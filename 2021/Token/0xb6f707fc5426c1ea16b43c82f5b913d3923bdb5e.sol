['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/Stake/IRewardDelegators.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IRewardDelegators {\n', '    function undelegationWaitTime() external returns(uint256);\n', '    function minMPONDStake() external returns(uint256);\n', '    function MPONDTokenId() external returns(bytes32);\n', '    function updateMPONDTokenId(bytes32 _updatedMPONDTokenId) external;\n', '    function addRewardFactor(bytes32 _tokenId, uint256 _rewardFactor) external;\n', '    function removeRewardFactor(bytes32 _tokenId) external;\n', '    function updateRewardFactor(bytes32 _tokenId, uint256 _updatedRewardFactor) external;\n', '    function _updateRewards(address _cluster) external;\n', '    function delegate(\n', '        address _delegator,\n', '        address _cluster,\n', '        bytes32[] calldata _tokens,\n', '        uint256[] calldata _amounts\n', '    ) external;\n', '    function undelegate(\n', '        address _delegator,\n', '        address _cluster,\n', '        bytes32[] calldata _tokens,\n', '        uint256[] calldata _amounts\n', '    ) external;\n', '    function withdrawRewards(address _delegator, address _cluster) external returns(uint256);\n', '    function isClusterActive(address _cluster) external returns(bool);\n', '    function getClusterDelegation(address _cluster, bytes32 _tokenId) external view returns(uint256);\n', '    function getDelegation(address _cluster, address _delegator, bytes32 _tokenId) external view returns(uint256);\n', '    function updateUndelegationWaitTime(uint256 _undelegationWaitTime) external;\n', '    function updateMinMPONDStake(uint256 _minMPONDStake) external;\n', '    function updateStakeAddress(address _updatedStakeAddress) external;\n', '    function updateClusterRewards(address _updatedClusterRewards) external;\n', '    function updateClusterRegistry(address _updatedClusterRegistry) external;\n', '    function updatePONDAddress(address _updatedPOND) external;\n', '    function getFullTokenList() external view returns (bytes32[] memory);\n', '    function getAccRewardPerShare(address _cluster, bytes32 _tokenId) external view returns(uint256);\n', '}\n', '\n', '// File: contracts/governance/mPondLogic.sol\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'contract MPondLogic is Initializable {\n', '    /// @notice EIP-20 token name for this token\n', '    string public name;\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public symbol;\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public decimals;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint256 public totalSupply; // 10k mPond\n', '    uint256 public bridgeSupply; // 3k mPond\n', '\n', '    address public dropBridge;\n', '    /// @notice Allowance amounts on behalf of others\n', '    mapping(address => mapping(address => uint96)) internal allowances;\n', '\n', '    /// @notice Official record of token balances for each account\n', '    mapping(address => uint96) internal balances;\n', '\n', '    /// @notice A record of each accounts delegate\n', '    mapping(address => mapping(address => uint96)) public delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping(address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public DOMAIN_TYPEHASH;\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public DELEGATION_TYPEHASH;\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public UNDELEGATION_TYPEHASH;\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '\n', '    /// customized params\n', '    address public admin;\n', '    mapping(address => bool) public isWhiteListed;\n', '    bool public enableAllTranfers;\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(\n', '        address indexed delegator,\n', '        address indexed fromDelegate,\n', '        address indexed toDelegate\n', '    );\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(\n', '        address indexed delegate,\n', '        uint256 previousBalance,\n', '        uint256 newBalance\n', '    );\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @notice Initializer a new mPond token\n', '     * @param account The initial account to grant all the tokens\n', '     */\n', '    function initialize(\n', '        address account,\n', '        address bridge,\n', '        address dropBridgeAddress\n', '    ) public initializer {\n', '        createConstants();\n', '        require(\n', '            account != bridge,\n', '            "Bridge and account should not be the same address"\n', '        );\n', '        balances[bridge] = uint96(bridgeSupply);\n', '        delegates[bridge][address(0)] = uint96(bridgeSupply);\n', '        isWhiteListed[bridge] = true;\n', '        emit Transfer(address(0), bridge, bridgeSupply);\n', '\n', '        uint96 remainingSupply = sub96(\n', '            uint96(totalSupply),\n', '            uint96(bridgeSupply),\n', '            "mPond: Subtraction overflow in the constructor"\n', '        );\n', '        balances[account] = remainingSupply;\n', '        delegates[account][address(0)] = remainingSupply;\n', '        isWhiteListed[account] = true;\n', '        dropBridge = dropBridgeAddress;\n', '        emit Transfer(address(0), account, uint256(remainingSupply));\n', '    }\n', '\n', '    function createConstants() internal {\n', '        name = "Marlin Governance Token";\n', '        symbol = "MPOND";\n', '        decimals = 18;\n', '        totalSupply = 10000e18;\n', '        bridgeSupply = 7000e18;\n', '        DOMAIN_TYPEHASH = keccak256(\n', '            "EIP712Domain(string name,uint256 chainId,address verifyingContract)"\n', '        );\n', '        DELEGATION_TYPEHASH = keccak256(\n', '            "Delegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)"\n', '        );\n', '        UNDELEGATION_TYPEHASH = keccak256(\n', '            "Unelegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)"\n', '        );\n', '        admin = msg.sender;\n', '        // enableAllTranfers = true; //This is only for testing, will be false\n', '    }\n', '\n', '    function addWhiteListAddress(address _address)\n', '        external\n', '        onlyAdmin("Only admin can whitelist")\n', '        returns (bool)\n', '    {\n', '        isWhiteListed[_address] = true;\n', '        return true;\n', '    }\n', '\n', '    function enableAllTransfers()\n', '        external\n', '        onlyAdmin("Only enable can enable all transfers")\n', '        returns (bool)\n', '    {\n', '        enableAllTranfers = true;\n', '        return true;\n', '    }\n', '\n', '    function changeDropBridge(address _updatedBridge)\n', '        public\n', '        onlyAdmin("Only admin can change drop bridge")\n', '    {\n', '        dropBridge = _updatedBridge;\n', '    }\n', '\n', '    function isWhiteListedTransfer(address _address1, address _address2)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (_address1 == dropBridge) {\n', '            return true;\n', '        } else if (_address2 == dropBridge) {\n', '            return (isWhiteListed[_address1] || enableAllTranfers);\n', '        }\n', '        return\n', '            (isWhiteListed[_address1] || isWhiteListed[_address2]) ||\n', '            enableAllTranfers;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint256 rawAmount)\n', '        external\n', '        returns (bool)\n', '    {\n', '        uint96 amount;\n', '        if (rawAmount == uint256(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(\n', '                rawAmount,\n', '                "mPond::approve: amount exceeds 96 bits"\n', '            );\n', '        }\n', '\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedAmount)\n', '        external\n', '        returns (bool)\n', '    {\n', '        uint96 amount;\n', '        if (addedAmount == uint256(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(\n', '                addedAmount,\n', '                "mPond::approve: addedAmount exceeds 96 bits"\n', '            );\n', '        }\n', '\n', '        allowances[msg.sender][spender] = add96(\n', '            allowances[msg.sender][spender],\n', '            amount,\n', '            "mPond: increaseAllowance allowance value overflows"\n', '        );\n', '        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 removedAmount)\n', '        external\n', '        returns (bool)\n', '    {\n', '        uint96 amount;\n', '        if (removedAmount == uint256(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(\n', '                removedAmount,\n', '                "mPond::approve: removedAmount exceeds 96 bits"\n', '            );\n', '        }\n', '\n', '        allowances[msg.sender][spender] = sub96(\n', '            allowances[msg.sender][spender],\n', '            amount,\n', '            "mPond: decreaseAllowance allowance value underflows"\n', '        );\n', '        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint256 rawAmount) external returns (bool) {\n', '        require(\n', '            isWhiteListedTransfer(msg.sender, dst),\n', '            "Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()"\n', '        );\n', '        uint96 amount = safe96(\n', '            rawAmount,\n', '            "mPond::transfer: amount exceeds 96 bits"\n', '        );\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 rawAmount\n', '    ) external returns (bool) {\n', '        require(\n', '            isWhiteListedTransfer(msg.sender, dst),\n', '            "Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()"\n', '        );\n', '        address spender = msg.sender;\n', '        uint96 spenderAllowance = allowances[src][spender];\n', '        uint96 amount = safe96(\n', '            rawAmount,\n', '            "mPond::approve: amount exceeds 96 bits"\n', '        );\n', '\n', '        if (spender != src && spenderAllowance != uint96(-1)) {\n', '            uint96 newAllowance = sub96(\n', '                spenderAllowance,\n', '                amount,\n', '                "mPond::transferFrom: transfer amount exceeds spender allowance"\n', '            );\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee, uint96 amount) public {\n', '        return _delegate(msg.sender, delegatee, amount);\n', '    }\n', '\n', '    function undelegate(address delegatee, uint96 amount) public {\n', '        return _undelegate(msg.sender, delegatee, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates votes from signatory to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function delegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        uint96 amount\n', '    ) public {\n', '        bytes32 domainSeparator = keccak256(\n', '            abi.encode(\n', '                DOMAIN_TYPEHASH,\n', '                keccak256(bytes(name)),\n', '                getChainId(),\n', '                address(this)\n', '            )\n', '        );\n', '        bytes32 structHash = keccak256(\n', '            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\n', '        );\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked("\\x19\\x01", domainSeparator, structHash)\n', '        );\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(\n', '            signatory != address(0),\n', '            "mPond::delegateBySig: invalid signature"\n', '        );\n', '        require(\n', '            nonce == nonces[signatory]++,\n', '            "mPond::delegateBySig: invalid nonce"\n', '        );\n', '        require(now <= expiry, "mPond::delegateBySig: signature expired");\n', '        return _delegate(signatory, delegatee, amount);\n', '    }\n', '\n', '    function undelegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        uint96 amount\n', '    ) public {\n', '        bytes32 domainSeparator = keccak256(\n', '            abi.encode(\n', '                DOMAIN_TYPEHASH,\n', '                keccak256(bytes(name)),\n', '                getChainId(),\n', '                address(this)\n', '            )\n', '        );\n', '        bytes32 structHash = keccak256(\n', '            abi.encode(UNDELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\n', '        );\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked("\\x19\\x01", domainSeparator, structHash)\n', '        );\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(\n', '            signatory != address(0),\n', '            "mPond::undelegateBySig: invalid signature"\n', '        );\n', '        require(\n', '            nonce == nonces[signatory]++,\n', '            "mPond::undelegateBySig: invalid nonce"\n', '        );\n', '        require(now <= expiry, "mPond::undelegateBySig: signature expired");\n', '        return _undelegate(signatory, delegatee, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint96) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return\n', '            nCheckpoints != 0\n', '                ? checkpoints[account][nCheckpoints - 1].votes\n', '                : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint256 blockNumber)\n', '        public\n', '        view\n', '        returns (uint96)\n', '    {\n', '        require(\n', '            blockNumber < block.number,\n', '            "mPond::getPriorVotes: not yet determined"\n', '        );\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(\n', '        address delegator,\n', '        address delegatee,\n', '        uint96 amount\n', '    ) internal {\n', '        delegates[delegator][address(0)] = sub96(\n', '            delegates[delegator][address(0)],\n', '            amount,\n', '            "mPond: delegates underflow"\n', '        );\n', '        delegates[delegator][delegatee] = add96(\n', '            delegates[delegator][delegatee],\n', '            amount,\n', '            "mPond: delegates overflow"\n', '        );\n', '\n', '        emit DelegateChanged(delegator, address(0), delegatee);\n', '\n', '        _moveDelegates(address(0), delegatee, amount);\n', '    }\n', '\n', '    function _undelegate(\n', '        address delegator,\n', '        address delegatee,\n', '        uint96 amount\n', '    ) internal {\n', '        delegates[delegator][delegatee] = sub96(\n', '            delegates[delegator][delegatee],\n', '            amount,\n', '            "mPond: undelegates underflow"\n', '        );\n', '        delegates[delegator][address(0)] = add96(\n', '            delegates[delegator][address(0)],\n', '            amount,\n', '            "mPond: delegates underflow"\n', '        );\n', '        emit DelegateChanged(delegator, delegatee, address(0));\n', '        _moveDelegates(delegatee, address(0), amount);\n', '    }\n', '\n', '    function _transferTokens(\n', '        address src,\n', '        address dst,\n', '        uint96 amount\n', '    ) internal {\n', '        require(\n', '            src != address(0),\n', '            "mPond::_transferTokens: cannot transfer from the zero address"\n', '        );\n', '        require(\n', '            delegates[src][address(0)] >= amount,\n', '            "mPond: _transferTokens: undelegated amount should be greater than transfer amount"\n', '        );\n', '        require(\n', '            dst != address(0),\n', '            "mPond::_transferTokens: cannot transfer to the zero address"\n', '        );\n', '\n', '        balances[src] = sub96(\n', '            balances[src],\n', '            amount,\n', '            "mPond::_transferTokens: transfer amount exceeds balance"\n', '        );\n', '        delegates[src][address(0)] = sub96(\n', '            delegates[src][address(0)],\n', '            amount,\n', '            "mPond: _tranferTokens: undelegate subtraction error"\n', '        );\n', '\n', '        balances[dst] = add96(\n', '            balances[dst],\n', '            amount,\n', '            "mPond::_transferTokens: transfer amount overflows"\n', '        );\n', '        delegates[dst][address(0)] = add96(\n', '            delegates[dst][address(0)],\n', '            amount,\n', '            "mPond: _transferTokens: undelegate addition error"\n', '        );\n', '        emit Transfer(src, dst, amount);\n', '\n', '        // _moveDelegates(delegates[src], delegates[dst], amount);\n', '    }\n', '\n', '    function _moveDelegates(\n', '        address srcRep,\n', '        address dstRep,\n', '        uint96 amount\n', '    ) internal {\n', '        if (srcRep != dstRep && amount != 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint96 srcRepOld = srcRepNum != 0\n', '                    ? checkpoints[srcRep][srcRepNum - 1].votes\n', '                    : 0;\n', '                uint96 srcRepNew = sub96(\n', '                    srcRepOld,\n', '                    amount,\n', '                    "mPond::_moveVotes: vote amount underflows"\n', '                );\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint96 dstRepOld = dstRepNum != 0\n', '                    ? checkpoints[dstRep][dstRepNum - 1].votes\n', '                    : 0;\n', '                uint96 dstRepNew = add96(\n', '                    dstRepOld,\n', '                    amount,\n', '                    "mPond::_moveVotes: vote amount overflows"\n', '                );\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(\n', '        address delegatee,\n', '        uint32 nCheckpoints,\n', '        uint96 oldVotes,\n', '        uint96 newVotes\n', '    ) internal {\n', '        uint32 blockNumber = safe32(\n', '            block.number,\n', '            "mPond::_writeCheckpoint: block number exceeds 32 bits"\n', '        );\n', '\n', '        if (\n', '            nCheckpoints != 0 &&\n', '            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n', '        ) {\n', '            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n', '                blockNumber,\n', '                newVotes\n', '            );\n', '            numCheckpoints[delegatee] = nCheckpoints + 1;\n', '        }\n', '\n', '        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint256 n, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint32)\n', '    {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    function safe96(uint256 n, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint96)\n', '    {\n', '        require(n < 2**96, errorMessage);\n', '        return uint96(n);\n', '    }\n', '\n', '    function add96(\n', '        uint96 a,\n', '        uint96 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint96) {\n', '        uint96 c = a + b;\n', '        require(c >= a, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    function sub96(\n', '        uint96 a,\n', '        uint96 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint96) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '\n', '    modifier onlyAdmin(string memory _error) {\n', '        require(msg.sender == admin, _error);\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/Stake/IClusterRegistry.sol\n', '\n', 'pragma solidity ^0.5.17;\n', 'interface IClusterRegistry {\n', '    function locks(bytes32 _lockId) external returns(uint256, uint256);\n', '    function lockWaitTime(bytes32 _selectorId) external returns(uint256);\n', '    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) external;\n', '    function register(bytes32 _networkId, uint256 _commission, address _rewardAddress, address _clientKey) external returns(bool);\n', '    function updateCluster(uint256 _commission, bytes32 _networkId, address _rewardAddress, address _clientKey) external;\n', '    function updateCommission(uint256 _commission) external;\n', '    function switchNetwork(bytes32 _networkId) external;\n', '    function updateRewardAddress(address _rewardAddress) external;\n', '    function updateClientKey(address _clientKey) external;\n', '    function unregister() external;\n', '    function isClusterValid(address _cluster) external returns(bool);\n', '    function getCommission(address _cluster) external returns(uint256);\n', '    function getNetwork(address _cluster) external returns(bytes32);\n', '    function getRewardAddress(address _cluster) external view returns(address);\n', '    function getClientKey(address _cluster) external view returns(address);\n', '    function getCluster(address _cluster) external;\n', '}\n', '\n', '// File: contracts/Stake/StakeManager.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StakeManager is Initializable, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Stash {\n', '        address staker;\n', '        address delegatedCluster;\n', '        mapping(bytes32 => uint256) amount;   // name is not intuitive\n', '        uint256 undelegatesAt;\n', '    }\n', '\n', '    struct Token {\n', '        address addr;\n', '        bool isActive;\n', '    }\n', '    // stashId to stash\n', '    // stashId = keccak256(index)\n', '    mapping(bytes32 => Stash) public stashes;\n', '    // Stash index for unique id generation\n', '    uint256 public stashIndex;\n', '    // tokenId to token address - tokenId = keccak256(tokenTicker)\n', '    mapping(bytes32 => Token) tokenAddresses;\n', '    MPondLogic MPOND;\n', '    MPondLogic prevMPOND;\n', '    IClusterRegistry clusterRegistry;\n', '    IRewardDelegators public rewardDelegators;\n', '    // new variables\n', '    struct Lock {\n', '        uint256 unlockBlock;\n', '        uint256 iValue;\n', '    }\n', '\n', '    mapping(bytes32 => Lock) public locks;\n', '    mapping(bytes32 => uint256) public lockWaitTime;\n', '    bytes32 constant REDELEGATION_LOCK_SELECTOR = keccak256("REDELEGATION_LOCK");\n', '\n', '    event StashCreated(\n', '        address indexed creator,\n', '        bytes32 stashId,\n', '        uint256 stashIndex,\n', '        bytes32[] tokens,\n', '        uint256[] amounts\n', '    );\n', '    event StashDelegated(bytes32 stashId, address delegatedCluster);\n', '    event StashUndelegated(bytes32 stashId, address undelegatedCluster, uint256 undelegatesAt);\n', '    event StashWithdrawn(bytes32 stashId, bytes32[] tokens, uint256[] amounts);\n', '    event StashClosed(bytes32 stashId, address indexed staker);\n', '    event AddedToStash(bytes32 stashId, address delegatedCluster, bytes32[] tokens, uint256[] amounts);\n', '    event TokenAdded(bytes32 tokenId, address tokenAddress);\n', '    event TokenRemoved(bytes32 tokenId);\n', '    event TokenUpdated(bytes32 tokenId, address tokenAddress);\n', '    event RedelegationRequested(bytes32 stashId, address currentCluster, address updatedCluster, uint256 redelegatesAt);\n', '    event Redelegated(bytes32 stashId, address updatedCluster);\n', '    event LockTimeUpdated(bytes32 selector, uint256 prevLockTime, uint256 updatedLockTime);\n', '\n', '    function initialize(\n', '        bytes32[] memory _tokenIds,\n', '        address[] memory _tokenAddresses,\n', '        address _MPONDTokenAddress,\n', '        address _clusterRegistryAddress,\n', '        address _rewardDelegatorsAddress,\n', '        address _owner)\n', '        initializer\n', '        public\n', '    {\n', '        require(\n', '            _tokenIds.length == _tokenAddresses.length,\n', '            "StakeManager:initialize - each tokenId should have a corresponding tokenAddress and vice versa"\n', '        );\n', '        for(uint256 i=0; i < _tokenIds.length; i++) {\n', '            tokenAddresses[_tokenIds[i]] = Token(_tokenAddresses[i], true);\n', '            emit TokenAdded(_tokenIds[i], _tokenAddresses[i]);\n', '        }\n', '        MPOND = MPondLogic(_MPONDTokenAddress);\n', '        clusterRegistry = IClusterRegistry(_clusterRegistryAddress);\n', '        rewardDelegators = IRewardDelegators(_rewardDelegatorsAddress);\n', '        super.initialize(_owner);\n', '    }\n', '\n', '    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) public onlyOwner {\n', '        emit LockTimeUpdated(_selector, lockWaitTime[_selector], _updatedWaitTime);\n', '        lockWaitTime[_selector] = _updatedWaitTime;\n', '    }\n', '\n', '    function changeMPONDTokenAddress(\n', '        address _MPONDTokenAddress\n', '    ) public onlyOwner {\n', '        prevMPOND = MPOND;\n', '        MPOND = MPondLogic(_MPONDTokenAddress);\n', '        emit TokenUpdated(keccak256("MPOND"), _MPONDTokenAddress);\n', '    }\n', '\n', '    function updateRewardDelegators(\n', '        address _updatedRewardDelegator\n', '    ) public onlyOwner {\n', '        require(\n', '            _updatedRewardDelegator != address(0),\n', '            "StakeManager:updateRewardDelegators - RewardDelegators address cannot be 0"\n', '        );\n', '        rewardDelegators = IRewardDelegators(_updatedRewardDelegator);\n', '    }\n', '\n', '    function updateClusterRegistry(\n', '        address _updatedClusterRegistry\n', '    ) public onlyOwner {\n', '        require(\n', '            _updatedClusterRegistry != address(0),\n', '            "StakeManager:updateClusterRegistry - Cluster Registry address cannot be 0"\n', '        );\n', '        clusterRegistry = IClusterRegistry(_updatedClusterRegistry);\n', '    }\n', '\n', '    function enableToken(\n', '        bytes32 _tokenId,\n', '        address _address\n', '    ) public onlyOwner {\n', '        require(\n', '            !tokenAddresses[_tokenId].isActive,\n', '            "StakeManager:enableToken - Token already enabled"\n', '        );\n', '        require(_address != address(0), "StakeManager:enableToken - Zero address not allowed");\n', '        tokenAddresses[_tokenId] = Token(_address, true);\n', '        emit TokenAdded(_tokenId, _address);\n', '    }\n', '\n', '    function disableToken(\n', '        bytes32 _tokenId\n', '    ) public onlyOwner {\n', '        require(\n', '            tokenAddresses[_tokenId].isActive,\n', '            "StakeManager:disableToken - Token already disabled"\n', '        );\n', '        tokenAddresses[_tokenId].isActive = false;\n', '        emit TokenRemoved(_tokenId);\n', '    }\n', '\n', '    function createStashAndDelegate(\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts,\n', '        address _delegatedCluster\n', '    ) public {\n', '        bytes32 stashId = createStash(_tokens, _amounts);\n', '        delegateStash(stashId, _delegatedCluster);\n', '    }\n', '\n', '    function createStash(\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts\n', '    ) public returns(bytes32) {\n', '        require(\n', '            _tokens.length == _amounts.length,\n', '            "StakeManager:createStash - each tokenId should have a corresponding amount and vice versa"\n', '        );\n', '        require(\n', '            _tokens.length != 0,\n', '            "StakeManager:createStash - stash must have atleast one token"\n', '        );\n', '        uint256 _stashIndex = stashIndex;\n', '        bytes32 _stashId = keccak256(abi.encodePacked(_stashIndex));\n', '        for(uint256 _index=0; _index < _tokens.length; _index++) {\n', '            bytes32 _tokenId = _tokens[_index];\n', '            uint256 _amount = _amounts[_index];\n', '            require(\n', '                tokenAddresses[_tokenId].isActive,\n', '                "StakeManager:createStash - Invalid tokenId"\n', '            );\n', '            require(\n', '                stashes[_stashId].amount[_tokenId] == 0,\n', '                "StakeManager:createStash - Can\'t add the same token twice while creating stash"\n', '            );\n', '            require(\n', '                _amount != 0,\n', '                "StakeManager:createStash - Can\'t add tokens with 0 amount"\n', '            );\n', '            stashes[_stashId].amount[_tokenId] = _amount;\n', '            _lockTokens(_tokenId, _amount, msg.sender);\n', '        }\n', '        stashes[_stashId].staker = msg.sender;\n', '        emit StashCreated(msg.sender, _stashId, _stashIndex, _tokens, _amounts);\n', "        stashIndex = _stashIndex + 1;  // Can't overflow\n", '        return _stashId;\n', '    }\n', '\n', '    function addToStash(\n', '        bytes32 _stashId,\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts\n', '    ) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:addToStash - Only staker can delegate stash to a cluster"\n', '        );\n', '        require(\n', '            _stash.undelegatesAt <= block.number,\n', '            "StakeManager:addToStash - Can\'t add to stash during undelegation"\n', '        );\n', '        require(\n', '            _tokens.length == _amounts.length,\n', '            "StakeManager:addToStash - Each tokenId should have a corresponding amount and vice versa"\n', '        );\n', '        if(_stash.delegatedCluster != address(0)) {\n', '            rewardDelegators.delegate(msg.sender, _stash.delegatedCluster, _tokens, _amounts);\n', '        }\n', '        for(uint256 i = 0; i < _tokens.length; i++) {\n', '            bytes32 _tokenId = _tokens[i];\n', '            require(\n', '                tokenAddresses[_tokenId].isActive,\n', '                "StakeManager:addToStash - Invalid tokenId"\n', '            );\n', '            if(_amounts[i] != 0) {\n', '                stashes[_stashId].amount[_tokenId] = stashes[_stashId].amount[_tokenId].add(_amounts[i]);\n', '                _lockTokens(_tokenId, _amounts[i], msg.sender);\n', '            }\n', '        }\n', '        \n', '        emit AddedToStash(_stashId, _stash.delegatedCluster, _tokens, _amounts);\n', '    }\n', '\n', '    function delegateStash(bytes32 _stashId, address _delegatedCluster) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:delegateStash - Only staker can delegate stash to a cluster"\n', '        );\n', '        require(\n', '            clusterRegistry.isClusterValid(_delegatedCluster),\n', '            "StakeManager:delegateStash - delegated cluster address is not valid"\n', '        );\n', '        require(\n', '            _stash.delegatedCluster == address(0),\n', '            "StakeManager:delegateStash - stash already delegated to another cluster. Please undelegate from delegating"\n', '        );\n', '        require(\n', '            _stash.undelegatesAt <= block.number,\n', '            "StakeManager:delegateStash - stash is not yet undelegated"\n', '        );\n', '        stashes[_stashId].delegatedCluster = _delegatedCluster;\n', '        delete stashes[_stashId].undelegatesAt;\n', '        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\n', '        uint256[] memory _amounts = new uint256[](_tokens.length);\n', '        for(uint256 i = 0; i < _tokens.length; i++) {\n', '            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\n', '        }\n', '        rewardDelegators.delegate(msg.sender, _delegatedCluster, _tokens, _amounts);\n', '        emit StashDelegated(_stashId, _delegatedCluster);\n', '    }\n', '\n', '    function requestStashRedelegation(bytes32 _stashId, address _newCluster) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:requestStashRedelegation - Only staker can redelegate stash to another cluster"\n', '        );\n', '        require(\n', '            _stash.delegatedCluster != address(0),\n', '            "StakeManager:requestStashRedelegation - Stash not already delegated"\n', '        );\n', '        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, msg.sender));\n', '        uint256 _unlockBlock = locks[_lockId].unlockBlock;\n', '        require(\n', '            _unlockBlock == 0,\n', '            "Stakemanager:requestStashRedelegation - Please close the existing redelegation request before placing a new one"\n', '        );\n', '        uint256 _redelegationBlock = block.number.add(lockWaitTime[REDELEGATION_LOCK_SELECTOR]);\n', '        locks[_lockId] = Lock(_redelegationBlock, uint256(_newCluster));\n', '        emit RedelegationRequested(_stashId, _stash.delegatedCluster, _newCluster, _redelegationBlock);\n', '    }\n', '\n', '    function redelegateStash(bytes32 _stashId) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.delegatedCluster != address(0),\n', '            "StakeManager:redelegateStash - Stash not already delegated"\n', '        );\n', '        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stash.staker));\n', '        uint256 _unlockBlock = locks[_lockId].unlockBlock;\n', '        require(\n', '            _unlockBlock <= block.number,\n', '            "StakeManager:redelegateStash - Redelegation period is not yet complete"\n', '        );\n', '        address _updatedCluster = address(locks[_lockId].iValue);\n', '        require(\n', '            clusterRegistry.isClusterValid(_updatedCluster),\n', '            "StakeManager:redelegateStash - can\'t delegate to invalid cluster"\n', '        );\n', '        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\n', '        uint256[] memory _amounts = new uint256[](_tokens.length);\n', '        for(uint256 i=0; i < _tokens.length; i++) {\n', '            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\n', '        }\n', '        rewardDelegators.undelegate(_stash.staker, _stash.delegatedCluster, _tokens, _amounts);\n', '        rewardDelegators.delegate(_stash.staker, _updatedCluster, _tokens, _amounts);\n', '        stashes[_stashId].delegatedCluster = _updatedCluster;\n', '        delete locks[_lockId];\n', '        emit Redelegated(_stashId, _updatedCluster);\n', '    }\n', '\n', '    function undelegateStash(bytes32 _stashId) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:undelegateStash - Only staker can undelegate stash"\n', '        );\n', '        require(\n', '            _stash.delegatedCluster != address(0),\n', '            "StakeManager:undelegateStash - stash is not delegated to any cluster"\n', '        );\n', '        uint256 _waitTime = rewardDelegators.undelegationWaitTime();\n', '        uint256 _undelegationBlock = block.number.add(_waitTime);\n', '        stashes[_stashId].undelegatesAt = _undelegationBlock;\n', '        delete stashes[_stashId].delegatedCluster;\n', '        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, msg.sender));\n', '        if(locks[_lockId].unlockBlock != 0) {\n', '            delete locks[_lockId];\n', '        }\n', '        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\n', '        uint256[] memory _amounts = new uint256[](_tokens.length);\n', '        for(uint256 i=0; i < _tokens.length; i++) {\n', '            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\n', '        }\n', '        rewardDelegators.undelegate(msg.sender, _stash.delegatedCluster, _tokens, _amounts);\n', '        emit StashUndelegated(_stashId, _stash.delegatedCluster, _undelegationBlock);\n', '    }\n', '\n', '    function withdrawStash(bytes32 _stashId) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:withdrawStash - Only staker can withdraw stash"\n', '        );\n', '        require(\n', '            _stash.delegatedCluster == address(0),\n', '            "StakeManager:withdrawStash - Stash is delegated. Please undelegate before withdrawal"\n', '        );\n', '        require(\n', '            _stash.undelegatesAt <= block.number,\n', '            "StakeManager:withdrawStash - stash is not yet undelegated"\n', '        );\n', '        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\n', '        uint256[] memory _amounts = new uint256[](_tokens.length);\n', '        for(uint256 i=0; i < _tokens.length; i++) {\n', '            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\n', '            if(_amounts[i] == 0) continue;\n', '            delete stashes[_stashId].amount[_tokens[i]];\n', '            _unlockTokens(_tokens[i], _amounts[i], msg.sender);\n', '        }\n', '        // Other items already zeroed\n', '        delete stashes[_stashId].staker;\n', '        delete stashes[_stashId].undelegatesAt;\n', '        emit StashWithdrawn(_stashId, _tokens, _amounts);\n', '        emit StashClosed(_stashId, msg.sender);\n', '    }\n', '\n', '    function withdrawStash(\n', '        bytes32 _stashId,\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts\n', '    ) public {\n', '        Stash memory _stash = stashes[_stashId];\n', '        require(\n', '            _stash.staker == msg.sender,\n', '            "StakeManager:withdrawStash - Only staker can withdraw stash"\n', '        );\n', '        require(\n', '            _stash.delegatedCluster == address(0),\n', '            "StakeManager:withdrawStash - Stash is delegated. Please undelegate before withdrawal"\n', '        );\n', '        require(\n', '            _stash.undelegatesAt <= block.number,\n', '            "StakeManager:withdrawStash - stash is not yet undelegated"\n', '        );\n', '        require(\n', '            _tokens.length == _amounts.length,\n', '            "StakeManager:withdrawStash - Each tokenId should have a corresponding amount and vice versa"\n', '        );\n', '        for(uint256 i=0; i < _tokens.length; i++) {\n', '            uint256 _balance = stashes[_stashId].amount[_tokens[i]];\n', '            require(\n', '                _balance >= _amounts[i],\n', '                "StakeManager:withdrawStash - balance not sufficient"\n', '            );\n', '            if(_balance == _amounts[i]) {\n', '                delete stashes[_stashId].amount[_tokens[i]];\n', '            } else {\n', '                stashes[_stashId].amount[_tokens[i]] = _balance.sub(_amounts[i]);\n', '            }\n', '            _unlockTokens(_tokens[i], _amounts[i], msg.sender);\n', '        }\n', '        emit StashWithdrawn(_stashId, _tokens, _amounts);\n', '    }\n', '\n', '    function _lockTokens(bytes32 _tokenId, uint256 _amount, address _delegator) internal {\n', '        if(_amount == 0) {\n', '            return;\n', '        }\n', '        address tokenAddress = tokenAddresses[_tokenId].addr;\n', '        // pull tokens from mpond/pond contract\n', '        // if mpond transfer the governance rights back\n', '        require(\n', '            ERC20(tokenAddress).transferFrom(\n', '                _delegator,\n', '                address(this),\n', '                _amount\n', '            ), "StakeManager: ERC20 transfer failed"\n', '        );\n', '        if (tokenAddress == address(MPOND)) {\n', '            // send a request to delegate governance rights for the amount to delegator\n', '            MPOND.delegate(\n', '                _delegator,\n', '                uint96(_amount)\n', '            );\n', '        }\n', '    }\n', '\n', '    function _unlockTokens(bytes32 _tokenId, uint256 _amount, address _delegator) internal {\n', '        if(_amount == 0) {\n', '            return;\n', '        }\n', '        address tokenAddress = tokenAddresses[_tokenId].addr;\n', '        if(tokenAddress == address(MPOND)) {\n', '            // send a request to undelegate governacne rights for the amount to previous delegator\n', '            MPOND.undelegate(\n', '                _delegator,\n', '                uint96(_amount)\n', '            );\n', '        } else if(tokenAddress == address(prevMPOND)) {\n', '            prevMPOND.undelegate(\n', '                _delegator,\n', '                uint96(_amount)\n', '            );\n', '        }\n', '        require(\n', '            ERC20(tokenAddress).transfer(\n', '                _delegator,\n', '                _amount\n', '            )\n', '        );\n', '    }\n', '\n', '    function getTokenAmountInStash(bytes32 _stashId, bytes32 _tokenId) public view returns(uint256) {\n', '        return stashes[_stashId].amount[_tokenId];\n', '    }\n', '}']