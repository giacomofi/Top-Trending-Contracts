['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// File: contracts/interface/TokenBarInterfaces.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract TokenBarAdminStorage {\n', '    /**\n', '     * @notice Administrator for this contract\n', '     */\n', '    address public admin;\n', '    /**\n', '     * @notice Governance for this contract which has the right to adjust the parameters of TokenBar\n', '     */\n', '    address public governance;\n', '\n', '    /**\n', '     * @notice Active brains of TokenBar\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'contract xSHDStorage {\n', '    string public name = "ShardingBar";\n', '    string public symbol = "xSHD";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '}\n', '\n', 'contract ITokenBarStorge is TokenBarAdminStorage {\n', '    //lock period :60*60*24*7\n', '    uint256 public lockPeriod = 604800;\n', '    address public SHDToken;\n', '    mapping(address => mapping(address => address)) public routerMap;\n', '    address public marketRegulator;\n', '    address public weth;\n', '    mapping(address => uint256) public lockDeadline;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/xSHDToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract xSHDToken is xSHDStorage {\n', '    using SafeMath for uint256;\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function _mint(address to, uint256 value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint256 value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 value\n', '    ) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint256(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\n', '                value\n', '            );\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {}\n', '\n', '// File: contracts/interface/IMarketRegulator.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IMarketRegulator {\n', '    function IsInWhiteList(address wantToken)\n', '        external\n', '        view\n', '        returns (bool inTheList);\n', '\n', '    function IsInBlackList(uint256 _shardPoolId)\n', '        external\n', '        view\n', '        returns (bool inTheList);\n', '\n', '    function getWantTokenWhiteList()\n', '        external\n', '        view\n', '        returns (whiteListToken[] memory _wantTokenWhiteList);\n', '\n', '    struct whiteListToken {\n', '        address token;\n', '        string symbol;\n', '    }\n', '}\n', '\n', '// File: contracts/TokenBarDelegate.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenBarDelegate is ITokenBarStorge, xSHDToken {\n', '    using SafeMath for uint256;\n', '\n', '    event Deposit(address user, uint256 SHDAmountIn, uint256 xSHDAmountOut);\n', '\n', '    event Withdraw(\n', '        address user,\n', '        uint256 xSHDAmountIn,\n', '        uint256 SHDAmountOut,\n', '        bool isUpdateSHDInBar\n', '    );\n', '\n', '    constructor() public {}\n', '\n', '    function initialize(\n', '        address _SHDToken,\n', '        address _marketRegulator,\n', '        address _weth\n', '    ) public {\n', '        require(weth == address(0), "already initialize");\n', '        require(msg.sender == admin, "unauthorized");\n', '        SHDToken = _SHDToken;\n', '        marketRegulator = _marketRegulator;\n', '        weth = _weth;\n', '    }\n', '\n', '    //user operation\n', '    //enter the bar. Get the xSHDToken\n', '    function deposit(uint256 _SHDAmountIn) public {\n', '        require(_SHDAmountIn > 0, "Insufficient SHDToken");\n', '\n', '        uint256 totalSHD = IERC20(SHDToken).balanceOf(address(this));\n', '        uint256 totalShares = totalSupply;\n', '\n', '        lockDeadline[msg.sender] = now.add(lockPeriod);\n', '\n', '        uint256 xSHDAmountOut;\n', '        if (totalShares == 0 || totalSHD == 0) {\n', '            xSHDAmountOut = _SHDAmountIn;\n', '            _mint(msg.sender, _SHDAmountIn);\n', '        } else {\n', '            xSHDAmountOut = _SHDAmountIn.mul(totalShares).div(totalSHD);\n', '            _mint(msg.sender, xSHDAmountOut);\n', '        }\n', '        IERC20(SHDToken).transferFrom(msg.sender, address(this), _SHDAmountIn);\n', '        emit Deposit(msg.sender, _SHDAmountIn, xSHDAmountOut);\n', '    }\n', '\n', '    // Leave the bar. Claim back your SHDTokens.\n', '    function withdraw(uint256 _xSHDAmountIn, bool _isUpdateSHDInBar) public {\n', '        require(_xSHDAmountIn > 0, "Insufficient xSHDToken");\n', '        if (_isUpdateSHDInBar) {\n', '            swapAllForSHD();\n', '        }\n', '        uint256 timeForWithdraw = lockDeadline[msg.sender];\n', '        require(now > timeForWithdraw, "still locked");\n', '        uint256 totalShares = totalSupply;\n', '        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\n', '        uint256 SHDAmountOut = _xSHDAmountIn.mul(SHDBalance).div(totalShares);\n', '        _burn(msg.sender, _xSHDAmountIn);\n', '        IERC20(SHDToken).transfer(msg.sender, SHDAmountOut);\n', '        emit Withdraw(\n', '            msg.sender,\n', '            _xSHDAmountIn,\n', '            SHDAmountOut,\n', '            _isUpdateSHDInBar\n', '        );\n', '    }\n', '\n', '    function swapAllForSHD() public {\n', '        IMarketRegulator.whiteListToken[] memory wantTokenWhiteList =\n', '            IMarketRegulator(marketRegulator).getWantTokenWhiteList();\n', '        for (uint256 i = 0; i < wantTokenWhiteList.length; i++) {\n', '            address wantToken = wantTokenWhiteList[i].token;\n', '            if (wantToken != weth) {\n', '                swap(wantToken, weth);\n', '            }\n', '        }\n', '        swap(weth, SHDToken);\n', '    }\n', '\n', '    function swapExactTokenForSHD(address wantToken) public {\n', '        if (wantToken != weth) {\n', '            swap(wantToken, weth);\n', '        }\n', '        swap(weth, SHDToken);\n', '    }\n', '\n', '    function swap(address from, address to) internal {\n', '        uint256 balance = IERC20(from).balanceOf(address(this));\n', '        if (balance > 0) {\n', '            address router = routerMap[from][to];\n', '            require(router != address(0), "router hasn\'t been set");\n', '            address[] memory path = new address[](2);\n', '            path[0] = from;\n', '            path[1] = to;\n', '            IERC20(from).approve(router, balance);\n', '            IUniswapV2Router02(router).swapExactTokensForTokens(\n', '                balance,\n', '                0,\n', '                path,\n', '                address(this),\n', '                now.add(60)\n', '            );\n', '        }\n', '    }\n', '\n', '    //admin operation\n', '    function setRouter(\n', '        address fromToken,\n', '        address ToToken,\n', '        address router\n', '    ) public {\n', '        require(msg.sender == admin, "unauthorized");\n', '        routerMap[fromToken][ToToken] = router;\n', '    }\n', '\n', '    function setMarketRegulator(address _marketRegulator) public {\n', '        require(msg.sender == admin, "unauthorized");\n', '        marketRegulator = _marketRegulator;\n', '    }\n', '\n', '    //goverance operation\n', '    function setLockPeriod(uint256 _lockPeriod) public {\n', '        require(msg.sender == governance, "unauthorized");\n', '        lockPeriod = _lockPeriod;\n', '    }\n', '\n', '    //view function\n', '    function getxSHDAmountOut(uint256 SHDAmountIn)\n', '        public\n', '        view\n', '        returns (uint256 xSHDAmountOut)\n', '    {\n', '        uint256 totalSHD = IERC20(SHDToken).balanceOf(address(this));\n', '        uint256 totalShares = totalSupply;\n', '        if (totalShares == 0 || totalSHD == 0) {\n', '            xSHDAmountOut = SHDAmountIn;\n', '        } else {\n', '            xSHDAmountOut = SHDAmountIn.mul(totalShares).div(totalSHD);\n', '        }\n', '    }\n', '\n', '    function getSHDAmountOut(uint256 xSHDAmountIn)\n', '        public\n', '        view\n', '        returns (uint256 SHDAmountOut)\n', '    {\n', '        uint256 totalShares = totalSupply;\n', '        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\n', '        SHDAmountOut = xSHDAmountIn.mul(SHDBalance).div(totalShares);\n', '    }\n', '\n', '    function getSHDAmountOutAfterSwap(uint256 xSHDAmountIn)\n', '        public\n', '        view\n', '        returns (uint256 SHDAmountOut)\n', '    {\n', '        IMarketRegulator.whiteListToken[] memory wantTokenWhiteList =\n', '            IMarketRegulator(marketRegulator).getWantTokenWhiteList();\n', '\n', '        uint256 balanceOfWeth = IERC20(weth).balanceOf(address(this));\n', '\n', '        for (uint256 i = 0; i < wantTokenWhiteList.length; i++) {\n', '            address wantToken = wantTokenWhiteList[i].token;\n', '            if (wantToken != weth) {\n', '                uint256 balance = IERC20(wantToken).balanceOf(address(this));\n', '                uint256 wethAmountOut = getSwapAmount(wantToken, weth, balance);\n', '                balanceOfWeth = balanceOfWeth.add(wethAmountOut);\n', '            }\n', '        }\n', '\n', '        uint256 SHDBalance = IERC20(SHDToken).balanceOf(address(this));\n', '        uint256 SHDTokenAmountOut =\n', '            getSwapAmount(weth, SHDToken, balanceOfWeth);\n', '        SHDBalance = SHDBalance.add(SHDTokenAmountOut);\n', '\n', '        uint256 totalShares = totalSupply;\n', '        SHDAmountOut = xSHDAmountIn.mul(SHDBalance).div(totalShares);\n', '    }\n', '\n', '    function getSwapAmount(\n', '        address from,\n', '        address to,\n', '        uint256 fromAmountIn\n', '    ) internal view returns (uint256 amountOut) {\n', '        if (fromAmountIn > 0) {\n', '            address router = routerMap[from][to];\n', '            require(router != address(0), "router hasn\'t been set");\n', '            address[] memory path = new address[](2);\n', '            path[0] = from;\n', '            path[1] = to;\n', '            uint256[] memory amounts =\n', '                IUniswapV2Router02(router).getAmountsOut(fromAmountIn, path);\n', '            amountOut = amounts[1];\n', '        }\n', '    }\n', '}']