['// contracts/FontsERC1155.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "openzeppelin-solidity/contracts/access/AccessControlUpgradeable.sol";\n', 'import "openzeppelin-solidity/contracts/utils/ContextUpgradeable.sol";\n', 'import "openzeppelin-solidity/contracts/token/ERC1155/ERC1155Upgradeable.sol";\n', 'import "openzeppelin-solidity/contracts/token/ERC1155/ERC1155BurnableUpgradeable.sol";\n', 'import "openzeppelin-solidity/contracts/token/ERC1155/ERC1155PausableUpgradeable.sol";\n', 'import "openzeppelin-solidity/contracts/proxy/Initializable.sol";\n', '\n', '/**\n', ' * @dev {ERC1155} token, including:\n', ' *\n', ' *  - ability for holders to burn (destroy) their tokens\n', ' *  - a minter role that allows for token minting (creation)\n', ' *  - a pauser role that allows to stop all token transfers\n', ' *\n', ' * This contract uses {AccessControl} to lock permissioned functions using the\n', ' * different roles - head to its documentation for details.\n', ' *\n', ' * The account that deploys the contract will be granted the minter and pauser\n', ' * roles, as well as the default admin role, which will let it grant both minter\n', ' * and pauser roles to other accounts.\n', ' */\n', 'contract FontsERC1155 is Initializable, ContextUpgradeable, AccessControlUpgradeable, ERC1155BurnableUpgradeable, ERC1155PausableUpgradeable {\n', '    function initialize() public virtual initializer {\n', '        __ERC1155PresetMinterPauser_init("https://api.font.community/font/{id}.json");\n', '    }\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '\n', '    /**\n', '     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n', '     * deploys the contract.\n', '     */\n', '    function __ERC1155PresetMinterPauser_init(string memory uri) internal initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '        __ERC165_init_unchained();\n', '        __ERC1155_init_unchained(uri);\n', '        __ERC1155Burnable_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC1155Pausable_init_unchained();\n', '        __ERC1155PresetMinterPauser_init_unchained(uri);\n', '    }\n', '\n', '    function __ERC1155PresetMinterPauser_init_unchained(string memory uri) internal initializer {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '\n', '        _setupRole(MINTER_ROLE, _msgSender());\n', '        _setupRole(PAUSER_ROLE, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n', '     *\n', '     * See {ERC1155-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MINTER_ROLE`.\n', '     */\n', '    function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");\n', '\n', '        _mint(to, id, amount, data);\n', '    }\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n', '     */\n', '    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");\n', '\n', '        _mintBatch(to, ids, amounts, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses all token transfers.\n', '     *\n', '     * See {ERC1155Pausable} and {Pausable-_pause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function pause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to pause");\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses all token transfers.\n', '     *\n', '     * See {ERC1155Pausable} and {Pausable-_unpause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function unpause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to unpause");\n', '        _unpause();\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable)\n', '    {\n', '        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n', '    }\n', '    uint256[50] private __gap;\n', '}']