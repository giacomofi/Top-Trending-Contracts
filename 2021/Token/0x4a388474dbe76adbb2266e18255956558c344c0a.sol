['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract WORK_token {\n', '  // The name of the token\n', '  string private _name;\n', '\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  // The symbol of the token\n', '  string private _symbol;\n', '\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  // The number of decimals\n', '  uint8 private _decimals;\n', '\n', '  function decimals() public view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  // The amount of tokens in existence\n', '  uint256 private _totalSupply;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  // The token balance of each account\n', '  mapping (address => uint256) private _balances;\n', '\n', '  function balanceOf(address account) public view returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  // Emitted when tokens are moved from one account to another\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // Transfer tokens to another account\n', '  function transfer(address recipient, uint256 amount) public returns (bool) {\n', '    // Prevent transfer to 0x0 address\n', '    require(recipient != address(0), "Transfer to the zero address");\n', '    // Check if the sender has enough tokens\n', '    require(amount <= _balances[msg.sender], "Transfer amount exceeds balance");\n', "    // Subtract tokens from sender's account\n", '    _balances[msg.sender] -= amount;\n', "    // Add tokens to recipient's account\n", '    uint256 newBalance = _balances[recipient] + amount;\n', '    require(newBalance >= _balances[recipient], "Addition overflow");\n', '    _balances[recipient] = newBalance;\n', '    // Notify the listeners\n', '    emit Transfer(msg.sender, recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  // The accounts approved to withdraw from a given account with the withdrawal sum allowed for each delegate\n', '  mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '  // Emitted when the allowance of a `spender` for an `owner` is set by a call to `approve` function.\n', '  // `value` is the new allowance.\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  // Approve delegate to withdraw tokens\n', '  function approve(address spender, uint256 amount) public returns (bool) {\n', '    // Prevent approval to 0x0 address\n', '    require(spender != address(0), "Approve to the zero address");\n', '    // Change the allowance amount\n', '    _allowances[msg.sender][spender] = amount;\n', '    // Notify the listeners\n', '    emit Approval(msg.sender, spender, amount);\n', '    return true;\n', '  }\n', '\n', '  // Get number of tokens approved for withdrawal\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  // Transfer tokens by delegate\n', '  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '    // Prevent transfer to 0x0 address\n', '    require(recipient != address(0), "Transfer to the zero address");\n', '    // Check if the sender has enough tokens\n', '    require(amount <= _balances[sender], "Transfer amount exceeds balance");\n', "    // Subtract tokens from sender's account\n", '    _balances[sender] -= amount;\n', "    // Check if delegate's allowance is big enough\n", '    require(amount <= _allowances[sender][msg.sender], "Transfer amount exceeds allowance");\n', "    // Reduce delegate's allowance amount\n", '    _allowances[sender][msg.sender] -= amount;\n', "    // Add tokens to recipient's account\n", '    uint256 newBalance = _balances[recipient] + amount;\n', '    require(newBalance >= _balances[recipient], "Addition overflow");\n', '    _balances[recipient] = newBalance;\n', '    // Notify the listeners\n', '    emit Transfer(sender, recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  // Constructor\n', '  constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, uint256 total) {\n', '    require(bytes(tokenName).length > 0);\n', '    require(bytes(tokenSymbol).length > 0);\n', '    require(total > 0);\n', '\n', '    _name = tokenName;\n', '    _symbol = tokenSymbol;\n', '    _decimals = tokenDecimals;\n', '    _totalSupply = total * 10 ** uint256(_decimals);\n', '    _balances[msg.sender] = _totalSupply;\n', '  }\n', '}']