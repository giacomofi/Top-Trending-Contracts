['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '\n', '\n', 'contract UNFIAggregator  {\n', '  \n', '\n', '    string private _name  = "Aggregator UNFI";\n', '    string private _symbol  = "aUNFI";\n', '    uint8 private _decimals = 18 ;\n', 'GGM lvl1;\n', 'GGM lvl2;\n', 'GGM lvl3 = GGM(0xf64a670a3F1E877031e9a62f2E382E4b2035b620);\n', 'IERC20 lvl4 = IERC20(0x441761326490cACF7aF299725B6292597EE822c2);\n', '    address public _owner ;\n', '    mapping(uint =>bool) public enableVotes;\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowed;\n', '\n', '\n', '    constructor () public {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', ' \n', '\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256 totalSupplyResult) {\n', '         totalSupplyResult = lvl4.totalSupply();\n', '        if(enableVotes[1] == true && address(lvl1) != address(0) ){\n', '            totalSupplyResult = totalSupplyResult + (lvl1.totalStakeAmount());\n', '        }\n', '        if(enableVotes[2] == true  && address(lvl2) != address(0)){\n', '            totalSupplyResult = totalSupplyResult + (lvl2.totalStakeAmount());    \n', '        }\n', '        if(enableVotes[3] == true  && address(lvl3) != address(0) ){\n', '            totalSupplyResult = totalSupplyResult + (lvl3.totalStakeAmount());\n', '        }\n', '        return totalSupplyResult;\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address account) public view returns (uint256 balanceResult) {\n', '         balanceResult = lvl4.balanceOf(account );\n', '        if(enableVotes[1] == true && address(lvl1) != address(0) ){\n', '            balanceResult = balanceResult + (lvl1.userStakeAmount(account));\n', '        }\n', '        if(enableVotes[2] == true  && address(lvl2) != address(0)){\n', '            balanceResult = balanceResult + (lvl2.userStakeAmount(account));    \n', '        }\n', '        if(enableVotes[3] == true  && address(lvl3) != address(0) ){\n', '            balanceResult = balanceResult + (lvl3.userStakeAmount(account));\n', '        }\n', '        return balanceResult;\n', '    \n', '    }\n', '   \n', '  function updatGGMDetals (uint GGMLevel, bool value , address GGMAddress)public {\n', '      require(_owner == msg.sender,"Unauthorized");\n', '      if(GGMLevel == 1){\n', '          enableVotes[1] = value;\n', '           lvl1 = GGM(GGMAddress);\n', '      }\n', '\n', '      if(GGMLevel == 2){\n', '           enableVotes[2] = value; \n', '            lvl2 = GGM(GGMAddress);\n', '      }\n', '      \n', '      if(GGMLevel == 3){\n', '          enableVotes[3] = value;\n', '            lvl3 = GGM(GGMAddress);\n', '      }\n', '      \n', '      if(GGMLevel == 4){\n', '          enableVotes[4] = value;  \n', '          lvl4 = IERC20(GGMAddress);\n', '      }\n', '  }\n', '    function transferOwnerShip(address to) public returns (bool) {\n', '         require(_owner == msg.sender,"Unauthorized");\n', '         _owner = to;\n', '        return true;\n', '    }\n', '\n', '\n', '  \n', '\n', '  \n', '\n', '\n', '\n', '   \n', '\n', '}\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function mint(address account, uint amount) external;\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', 'interface GGM {\n', '\n', '    function totalStakeAmount() external view returns (uint256);\n', '    function userStakeAmount(address account) external view returns (uint256);\n', '\n', '\n', '\n', '}']