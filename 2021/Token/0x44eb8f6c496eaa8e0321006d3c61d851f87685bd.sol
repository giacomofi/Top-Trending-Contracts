['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.4;\n', '\n', '/*\n', 'ðŸŒŽ Website: https://Lambo.DefiFactory.finance\n', 'ðŸ‘‰ Telegram: https://t.me/LamboTokenOwners\n', '*/\n', '\n', 'struct TaxAmountsInput {\n', '    address sender;\n', '    address recipient;\n', '    uint transferAmount;\n', '    uint senderRealBalance;\n', '    uint recipientRealBalance;\n', '}\n', 'struct TaxAmountsOutput {\n', '    uint senderRealBalance;\n', '    uint recipientRealBalance;\n', '    uint burnAndRewardAmount;\n', '    uint recipientGetsAmount;\n', '}\n', 'struct TemporaryReferralRealAmountsBulk {\n', '    address addr;\n', '    uint realBalance;\n', '}\n', '\n', 'interface INoBotsTech {\n', '    function prepareTaxAmounts(\n', '        TaxAmountsInput calldata taxAmountsInput\n', '    ) \n', '        external\n', '        returns(TaxAmountsOutput memory taxAmountsOutput);\n', '    \n', '    function getTemporaryReferralRealAmountsBulk(address[] calldata addrs)\n', '        external\n', '        view\n', '        returns (TemporaryReferralRealAmountsBulk[] memory);\n', '        \n', '    function prepareHumanAddressMintOrBurnRewardsAmounts(bool isMint, address account, uint desiredAmountToMintOrBurn)\n', '        external\n', '        returns (uint realAmountToMintOrBurn);\n', '        \n', '    function getBalance(address account, uint accountBalance)\n', '        external\n', '        view\n', '        returns(uint);\n', '        \n', '    function getRealBalance(address account, uint accountBalance)\n', '        external\n', '        view\n', '        returns(uint);\n', '        \n', '    function getRealBalanceTeamVestingContract(uint accountBalance)\n', '        external\n', '        view\n', '        returns(uint);\n', '        \n', '    function getTotalSupply()\n', '        external\n', '        view\n', '        returns (uint);\n', '        \n', '    function grantRole(bytes32 role, address account) \n', '        external;\n', '        \n', '    function getCalculatedReferrerRewards(address addr, address[] calldata referrals)\n', '        external\n', '        view\n', '        returns (uint);\n', '        \n', '    function getCachedReferrerRewards(address addr)\n', '        external\n', '        view\n', '        returns (uint);\n', '    \n', '    function updateReferrersRewards(address[] calldata referrals)\n', '        external;\n', '    \n', '    function clearReferrerRewards(address addr)\n', '        external;\n', '    \n', '    function chargeCustomTax(uint taxAmount, uint accountBalance)\n', '        external\n', '        returns (uint);\n', '    \n', '    function chargeCustomTaxTeamVestingContract(uint taxAmount, uint accountBalance)\n', '        external\n', '        returns (uint);\n', '        \n', '    function registerReferral(address referral, address referrer)\n', '        external;\n', '        \n', '    function filterNonZeroReferrals(address[] calldata referrals)\n', '        external\n', '        view\n', '        returns (address[] memory);\n', '        \n', '    function publicForcedUpdateCacheMultiplier()\n', '        external;\n', '    \n', '    event MultiplierUpdated(uint newMultiplier);\n', '    event BotTransactionDetected(address from, address to, uint transferAmount, uint taxedAmount);\n', '    event ReferrerRewardUpdated(address referrer, uint amount);\n', '    event ReferralRegistered(address referral, address referrer);\n', '    event ReferrerReplaced(address referral, address referrerFrom, address referrerTo);\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev External interface of AccessControl declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControl {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n', '    function grantRole(bytes32 role, address account) external;\n', '    function revokeRole(bytes32 role, address account) external;\n', '    function renounceRole(bytes32 role, address account) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', " * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n", ' * members except through off-chain means by accessing the contract event logs. Some\n', ' * applications may benefit from on-chain enumerability, for those cases see\n', ' * {AccessControlEnumerable}.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `ROLE_ADMIN`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `ROLE_ADMIN` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context, IAccessControl, ERC165 {\n', '    struct RoleData {\n', '        mapping (address => bool) members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant ROLE_ADMIN = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Modifier that checks that an account has a specific role. Reverts\n', '     * with a standardized message including the required role.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    modifier onlyRole(bytes32 role) {\n', '        _checkRole(role, _msgSender());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControl).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view override returns (bool) {\n', '        return _roles[role].members[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Revert with a standard message if `account` is missing `role`.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     */\n', '    function _checkRole(bytes32 role, address account) internal view {\n', '        if(!hasRole(role, account)) {\n', '            revert(string(abi.encodePacked(\n', '                "AccessControl: account ",\n', '                Strings.toHexString(uint160(account), 20),\n', '                " is missing role ",\n', '                Strings.toHexString(uint256(role), 32)\n', '            )));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (!hasRole(role, account)) {\n', '            _roles[role].members[account] = true;\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (hasRole(role, account)) {\n', '            _roles[role].members[account] = false;\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            if (lastIndex != toDeleteIndex) {\n', '                bytes32 lastvalue = set._values[lastIndex];\n', '\n', '                // Move the last value to the index where the value to delete is\n', '                set._values[toDeleteIndex] = lastvalue;\n', '                // Update the index for the moved value\n', "                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n", '            }\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControlEnumerable {\n', '    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n', '    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n', ' */\n', 'abstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControlEnumerable).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n', '        return _roleMembers[role].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n', '        return _roleMembers[role].length();\n', '    }\n', '\n', '    /**\n', '     * @dev Overload {grantRole} to track enumerable memberships\n', '     */\n', '    function grantRole(bytes32 role, address account) public virtual override {\n', '        super.grantRole(role, account);\n', '        _roleMembers[role].add(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload {revokeRole} to track enumerable memberships\n', '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override {\n', '        super.revokeRole(role, account);\n', '        _roleMembers[role].remove(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload {renounceRole} to track enumerable memberships\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        super.renounceRole(role, account);\n', '        _roleMembers[role].remove(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload {_setupRole} to track enumerable memberships\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual override {\n', '        super._setupRole(role, account);\n', '        _roleMembers[role].add(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' */\n', 'interface IERC20Permit {\n', '    /**\n', "     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n", "     * given ``owner``'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Mod is Context, IERC20, IERC20Metadata {\n', '    mapping (address => uint256) internal _RealBalances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All two of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        // overriden in parent contract\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _RealBalances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) { }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual { }\n', '\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // Check the signature length\n', '        // - case 65: r,s,v signature (standard)\n', '        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n', '        if (signature.length == 65) {\n', '            // ecrecover takes the signature parameters, and the only way to get them\n', '            // currently is to use assembly.\n', '            // solhint-disable-next-line no-inline-assembly\n', '            assembly {\n', '                r := mload(add(signature, 0x20))\n', '                s := mload(add(signature, 0x40))\n', '                v := byte(0, mload(add(signature, 0x60)))\n', '            }\n', '        } else if (signature.length == 64) {\n', '            // ecrecover takes the signature parameters, and the only way to get them\n', '            // currently is to use assembly.\n', '            // solhint-disable-next-line no-inline-assembly\n', '            assembly {\n', '                let vs := mload(add(signature, 0x40))\n', '                r := mload(add(signature, 0x20))\n', '                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n', '                v := add(shr(255, vs), 27)\n', '            }\n', '        } else {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        return recover(hash, v, r, s);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload of {ECDSA-recover} that receives the `v`,\n', '     * `r` and `s` signature fields separately.\n', '     */\n', '    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n Ã· 2 + 1, and for v in (282): v âˆˆ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * produces hash corresponding to the one signed with the\n', '     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n', '     * JSON-RPC method as part of EIP-191.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Typed Data, created from a\n', '     * `domainSeparator` and a `structHash`. This produces hash corresponding\n', '     * to the one signed with the\n', '     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n', '     * JSON-RPC method as part of EIP-712.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n', ' *\n', ' * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n', ' * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n', ' * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n', ' *\n', ' * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n', ' * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n', ' * ({_hashTypedDataV4}).\n', ' *\n', ' * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n', ' * the chain id to protect against replay attacks on an eventual fork of the chain.\n', ' *\n', ' * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method\n', ' * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n', ' *\n', ' * _Available since v3.4._\n', ' */\n', 'abstract contract EIP712 {\n', '    /* solhint-disable var-name-mixedcase */\n', '    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n', '    // invalidate the cached domain separator if the chain id changes.\n', '    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n', '    uint256 private immutable _CACHED_CHAIN_ID;\n', '\n', '    bytes32 private immutable _HASHED_NAME;\n', '    bytes32 private immutable _HASHED_VERSION;\n', '    bytes32 private immutable _TYPE_HASH;\n', '    /* solhint-enable var-name-mixedcase */\n', '\n', '    /**\n', '     * @dev Initializes the domain separator and parameter caches.\n', '     *\n', '     * The meaning of `name` and `version` is specified in\n', '     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n', '     *\n', '     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n', '     * - `version`: the current major version of the signing domain.\n', '     *\n', '     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n', '     * contract upgrade].\n', '     */\n', '    constructor(string memory name, string memory version) {\n', '        bytes32 hashedName = keccak256(bytes(name));\n', '        bytes32 hashedVersion = keccak256(bytes(version));\n', '        bytes32 typeHash = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '        _HASHED_NAME = hashedName;\n', '        _HASHED_VERSION = hashedVersion;\n', '        _CACHED_CHAIN_ID = block.chainid;\n', '        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n', '        _TYPE_HASH = typeHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the domain separator for the current chain.\n', '     */\n', '    function _domainSeparatorV4() internal view returns (bytes32) {\n', '        if (block.chainid == _CACHED_CHAIN_ID) {\n', '            return _CACHED_DOMAIN_SEPARATOR;\n', '        } else {\n', '            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n', '        }\n', '    }\n', '\n', '    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n', '        return keccak256(\n', '            abi.encode(\n', '                typeHash,\n', '                name,\n', '                version,\n', '                block.chainid,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n', '     * function returns the hash of the fully encoded EIP712 message for this domain.\n', '     *\n', '     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n', '     *\n', '     * ```solidity\n', '     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n', '     *     keccak256("Mail(address to,string contents)"),\n', '     *     mailTo,\n', '     *     keccak256(bytes(mailContents))\n', '     * )));\n', '     * address signer = ECDSA.recover(digest, signature);\n', '     * ```\n', '     */\n', '    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n', '        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' */\n', 'library Counters {\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        unchecked {\n', '            counter._value += 1;\n', '        }\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        uint256 value = counter._value;\n', '        require(value > 0, "Counter: decrement overflow");\n', '        unchecked {\n', '            counter._value = value - 1;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' *\n', ' * _Available since v3.4._\n', ' */\n', 'abstract contract ERC20Permit is ERC20Mod, IERC20Permit, EIP712 {\n', '    using Counters for Counters.Counter;\n', '\n', '    mapping (address => Counters.Counter) private _nonces;\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    bytes32 private immutable _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '    /**\n', '     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.\n', '     *\n', "     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n", '     */\n', '    constructor(string memory name) EIP712(name, "1") {\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-permit}.\n', '     */\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp <= deadline, "ERC20Permit: expired deadline");\n', '\n', '        bytes32 structHash = keccak256(\n', '            abi.encode(\n', '                _PERMIT_TYPEHASH,\n', '                owner,\n', '                spender,\n', '                value,\n', '                _useNonce(owner),\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash = _hashTypedDataV4(structHash);\n', '\n', '        address signer = ECDSA.recover(hash, v, r, s);\n', '        require(signer == owner, "ERC20Permit: invalid signature");\n', '\n', '        _approve(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-nonces}.\n', '     */\n', '    function nonces(address owner) public view virtual override returns (uint256) {\n', '        return _nonces[owner].current();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n', '        return _domainSeparatorV4();\n', '    }\n', '\n', '    /**\n', '     * @dev "Consume a nonce": return the current value and increment.\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    function _useNonce(address owner) internal virtual returns (uint256 current) {\n', '        Counters.Counter storage nonce = _nonces[owner];\n', '        current = nonce.current();\n', '        nonce.increment();\n', '    }\n', '}\n', '\n', 'contract LamboToken is Context, AccessControlEnumerable, ERC20Mod, ERC20Permit {\n', '    bytes32 public constant ROLE_MINTER = keccak256("ROLE_MINTER");\n', '    bytes32 public constant ROLE_BURNER = keccak256("ROLE_BURNER");\n', '    bytes32 public constant ROLE_TRANSFERER = keccak256("ROLE_TRANSFERER");\n', '    bytes32 public constant ROLE_MODERATOR = keccak256("ROLE_MODERATOR");\n', '    bytes32 public constant ROLE_TAXER = keccak256("ROLE_TAXER");\n', '    \n', '    uint constant NOBOTS_TECH_CONTRACT_ID = 0;\n', '    uint constant TEAM_VESTING_CONTRACT_ID = 1;\n', '    \n', '    address[] utilsContracts;\n', '    \n', '    struct AccessSettings {\n', '        bool isMinter;\n', '        bool isBurner;\n', '        bool isTransferer;\n', '        bool isModerator;\n', '        bool isTaxer;\n', '        \n', '        address addr;\n', '    }\n', '    \n', '    bool public isPaused;\n', '    \n', '    address constant BURN_ADDRESS = address(0x0);\n', '    address constant DEAD_ADDRESS = 0xdEad000000000000000000000000000000000000;\n', '    \n', '    event VestedAmountClaimed(address recipient, uint amount);\n', '    event UpdatedUtilsContracts(AccessSettings[] accessSettings);\n', '    event TransferCustom(address sender, address recipient, uint amount);\n', '    event MintHumanAddress(address recipient, uint amount);\n', '    event BurnHumanAddress(address sender, uint amount);\n', '    \n', '    event MintedByBridge(address recipient, uint amount);\n', '    event BurnedByBridge(address sender, uint amount);\n', '\n', '    constructor() \n', '        ERC20Mod("Lambo Token t.me/LamboTokenOwners", "LAMBO") \n', '        ERC20Permit("Lambo Token")\n', '    {\n', '        _setupRole(ROLE_ADMIN, _msgSender());\n', '        _setupRole(ROLE_MINTER, _msgSender());\n', '        _setupRole(ROLE_BURNER, _msgSender());\n', '        _setupRole(ROLE_TRANSFERER, _msgSender());\n', '        _setupRole(ROLE_MODERATOR, _msgSender());\n', '        _setupRole(ROLE_TAXER, _msgSender());\n', '    }\n', '    \n', '    modifier notPausedContract {\n', '        require(\n', '            !isPaused,\n', '            "T: paused"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier pausedContract {\n', '        require(\n', '            isPaused,\n', '            "T: !paused"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    function updateNameAndSymbol(string calldata __name, string calldata __symbol)\n', '        external\n', '        onlyRole(ROLE_ADMIN)\n', '    {\n', '        _name = __name;\n', '        _symbol = __symbol;\n', '    }\n', '    \n', '    function balanceOf(address account) \n', '        public \n', '        view \n', '        override \n', '        returns(uint) \n', '    {\n', '        return INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]).\n', '            getBalance(account, _RealBalances[account]);\n', '    }\n', '    \n', '    function totalSupply() \n', '        public \n', '        view \n', '        override \n', '        returns (uint) \n', '    {\n', '        return INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]).\n', '            getTotalSupply();\n', '    }\n', '    \n', '    function pauseContract()\n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_ADMIN)\n', '    {\n', '        isPaused = true;\n', '    }\n', '    \n', '    function resumeContract()\n', '        external\n', '        pausedContract\n', '        onlyRole(ROLE_ADMIN)\n', '    {\n', '        isPaused = false;\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) \n', '        public \n', '        notPausedContract\n', '        virtual \n', '        override \n', '        returns (bool) \n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) \n', '        public \n', '        notPausedContract\n', '        virtual \n', '        override \n', '        returns (bool) \n', '    {\n', '        require(\n', '            sender != BURN_ADDRESS,\n', '            "T: !burn"\n', '        );\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "T: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function moderatorTransferFromWhilePaused(address sender, address recipient, uint256 amount) \n', '        external \n', '        pausedContract\n', '        onlyRole(ROLE_MODERATOR)\n', '        returns (bool) \n', '    {\n', '        require(\n', '            sender != BURN_ADDRESS,\n', '            "T: !burn"\n', '        );\n', '        _transfer(sender, recipient, amount);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function transferCustom(address sender, address recipient, uint256 amount)\n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_TRANSFERER)\n', '    {\n', '        require(\n', '            sender != BURN_ADDRESS,\n', '            "T: !burn"\n', '        );\n', '        _transfer(sender, recipient, amount);\n', '        \n', '        emit TransferCustom(sender, recipient, amount);\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint amount) \n', '        internal\n', '        virtual \n', '        override \n', '    {\n', '        require(\n', '            recipient != BURN_ADDRESS,\n', '            "T: !burn"\n', '        );\n', '        require(\n', '            sender != recipient,\n', '            "T: !self"\n', '        );\n', '        \n', '        INoBotsTech iNoBotsTech = INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]);\n', '        TaxAmountsOutput memory taxAmountsOutput = iNoBotsTech.prepareTaxAmounts(\n', '            TaxAmountsInput(\n', '                sender,\n', '                recipient,\n', '                amount,\n', '                _RealBalances[sender],\n', '                _RealBalances[recipient]\n', '            )\n', '        );\n', '        \n', '        _RealBalances[sender] = taxAmountsOutput.senderRealBalance;\n', '        _RealBalances[recipient] = taxAmountsOutput.recipientRealBalance;\n', '        \n', '        emit Transfer(sender, recipient, taxAmountsOutput.recipientGetsAmount);\n', '        if (taxAmountsOutput.burnAndRewardAmount > 0)\n', '        {\n', '            emit Transfer(sender, BURN_ADDRESS, taxAmountsOutput.burnAndRewardAmount);\n', '        }\n', '    }\n', '    \n', '    function transferFromTeamVestingContract(address recipient, uint256 amount)\n', '        external\n', '        notPausedContract\n', '    {\n', '        address vestingContract = utilsContracts[TEAM_VESTING_CONTRACT_ID];\n', '        require(vestingContract == _msgSender(), "T: !VESTING_CONTRACT");\n', '        \n', '        INoBotsTech iNoBotsTech = INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]);\n', '        _RealBalances[vestingContract] -= amount;\n', '        _RealBalances[recipient] += \n', '            iNoBotsTech.getRealBalanceTeamVestingContract(amount);\n', '        \n', '        iNoBotsTech.publicForcedUpdateCacheMultiplier();\n', '        \n', '        emit Transfer(vestingContract, recipient, amount);\n', '        emit VestedAmountClaimed(recipient, amount);\n', '    }\n', '    \n', '    function chargeCustomTax(address from, uint amount)\n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_TAXER)\n', '    {\n', '        uint balanceBefore = _RealBalances[from];\n', '        \n', '        INoBotsTech iNoBotsTech = INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]);\n', '        _RealBalances[from] = iNoBotsTech.chargeCustomTax(amount, balanceBefore);\n', '        \n', '        uint taxAmount = iNoBotsTech.getBalance(from, balanceBefore - _RealBalances[from]);\n', '        emit Transfer(from, address(0), taxAmount);\n', '    }\n', '    \n', '    function updateUtilsContracts(AccessSettings[] calldata accessSettings)\n', '        external\n', '        onlyRole(ROLE_ADMIN)\n', '    {\n', '        for(uint i = 0; i < utilsContracts.length; i++)\n', '        {\n', '            revokeRole(ROLE_MINTER, utilsContracts[i]);\n', '            revokeRole(ROLE_BURNER, utilsContracts[i]);\n', '            revokeRole(ROLE_TRANSFERER, utilsContracts[i]);\n', '            revokeRole(ROLE_MODERATOR, utilsContracts[i]);\n', '            revokeRole(ROLE_TAXER, utilsContracts[i]);\n', '        }\n', '        delete utilsContracts;\n', '        \n', '        for(uint i = 0; i < accessSettings.length; i++)\n', '        {\n', '            if (accessSettings[i].isMinter) grantRole(ROLE_MINTER, accessSettings[i].addr);\n', '            if (accessSettings[i].isBurner) grantRole(ROLE_BURNER, accessSettings[i].addr);\n', '            if (accessSettings[i].isTransferer) grantRole(ROLE_TRANSFERER, accessSettings[i].addr);\n', '            if (accessSettings[i].isModerator) grantRole(ROLE_MODERATOR, accessSettings[i].addr);\n', '            if (accessSettings[i].isTaxer) grantRole(ROLE_TAXER, accessSettings[i].addr);\n', '            \n', '            utilsContracts.push(accessSettings[i].addr);\n', '        }\n', '        \n', '        emit UpdatedUtilsContracts(accessSettings);\n', '    }\n', '    \n', '    function getUtilsContractAtPos(uint pos)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return utilsContracts[pos];\n', '    }\n', '    \n', '    function getUtilsContractsCount()\n', '        external\n', '        view\n', '        returns(uint)\n', '    {\n', '        return utilsContracts.length;\n', '    }\n', '    \n', '    function mintByBridge(address to, uint desiredAmountToMint) \n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_MINTER)\n', '    {\n', '        _mintHumanAddress(to, desiredAmountToMint);\n', '        emit MintedByBridge(to, desiredAmountToMint);\n', '    }\n', '    \n', '    function mintHumanAddress(address to, uint desiredAmountToMint) \n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_MINTER)\n', '    {\n', '        _mintHumanAddress(to, desiredAmountToMint);\n', '        emit MintHumanAddress(to, desiredAmountToMint);\n', '    }\n', '    \n', '    function _mintHumanAddress(address to, uint desiredAmountToMint) \n', '        private\n', '    {\n', '        INoBotsTech iNoBotsTech = INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]);\n', '        uint realAmountToMint = \n', '            iNoBotsTech.\n', '                prepareHumanAddressMintOrBurnRewardsAmounts(\n', '                    true,\n', '                    to,\n', '                    desiredAmountToMint\n', '                );\n', '        \n', '        _RealBalances[to] += realAmountToMint;\n', '        iNoBotsTech.publicForcedUpdateCacheMultiplier();\n', '        \n', '        emit Transfer(address(0), to, desiredAmountToMint);\n', '    }\n', '\n', '    function burnByBridge(address from, uint desiredAmountToBurn)\n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_BURNER)\n', '    {\n', '        _burnHumanAddress(from, desiredAmountToBurn);\n', '        emit BurnedByBridge(from, desiredAmountToBurn);\n', '    }\n', '\n', '    function burnHumanAddress(address from, uint desiredAmountToBurn)\n', '        external\n', '        notPausedContract\n', '        onlyRole(ROLE_BURNER)\n', '    {\n', '        _burnHumanAddress(from, desiredAmountToBurn);\n', '        emit BurnHumanAddress(from, desiredAmountToBurn);\n', '    }\n', '\n', '    function _burnHumanAddress(address from, uint desiredAmountToBurn)\n', '        private\n', '    {\n', '        INoBotsTech iNoBotsTech = INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]);\n', '        uint realAmountToBurn = \n', '            INoBotsTech(utilsContracts[NOBOTS_TECH_CONTRACT_ID]).\n', '                prepareHumanAddressMintOrBurnRewardsAmounts(\n', '                    false,\n', '                    from,\n', '                    desiredAmountToBurn\n', '                );\n', '        \n', '        _RealBalances[from] -= realAmountToBurn;\n', '        iNoBotsTech.publicForcedUpdateCacheMultiplier();\n', '        \n', '        emit Transfer(from, address(0), desiredAmountToBurn);\n', '    }\n', '    \n', '    function getChainId() \n', '        external \n', '        view \n', '        returns (uint) \n', '    {\n', '        return block.chainid;\n', '    }\n', '}']