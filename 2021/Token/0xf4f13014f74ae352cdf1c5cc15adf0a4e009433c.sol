['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract Coordinator {\n', '\n', '  address public multisig;\n', '  uint256 public minBalance = 1000 ether;\n', '  mapping(address=>uint256) public proposalTimeout;\n', '  mapping(address=>mapping(string=>address)) public proposers;\n', '\n', '  IERC20 constant public NFT = IERC20(address(0xcB8d1260F9c92A3A545d409466280fFdD7AF7042));\n', '\n', '  // Propose a new instruction\n', '  event InstructionProposed(address proposer, address contractAddress, string uri);\n', '\n', '  // DAO approves an instruction into the index\n', '  event InstructionApproved(string checksum, address contractAddress, string uri);\n', '\n', "  // TODO: reject proposal (because it's spam) and keep the fee\n", '  event InstructionRejected(address proposer, address contractAddress, string uri);\n', '\n', '  // TODO: deferr proposal (because it was voted against) and return fee to proposer\n', '  event InstructionDeferred(address proposer, address contractAddress, string uri);\n', '\n', '  constructor() {\n', '    multisig = msg.sender;\n', '  }\n', '\n', '  function approveInstruction(address contractAddress, string memory uri, string memory checksum) public {\n', '    require(msg.sender == multisig, "Only multisig can approve proposals");\n', '    emit InstructionApproved(checksum, contractAddress, uri);\n', '  }\n', '\n', '  function proposeInstruction(address contractAddress, string memory uri) public {\n', '    // TODO: replace with a deposit of NFT tokens to be repaid when proposal is approved or rejected\n', '    require(NFT.balanceOf(msg.sender) > minBalance, "Not enough NFT Protocol tokens");\n', '    require(block.timestamp > proposalTimeout[msg.sender], "Proposing again too soon");\n', '    proposalTimeout[msg.sender] = block.timestamp + 1 days;\n', '\n', '    proposers[contractAddress][uri] = msg.sender;\n', '    emit InstructionProposed(msg.sender, contractAddress, uri);\n', '  }\n', '\n', '  function rejectInstruction(address contractAddress, string memory uri) public {\n', '    require(msg.sender == multisig, "Only multisig can reject a proposal");\n', '    // TODO: increment a counter of deposited tokens kept\n', '    emit InstructionRejected(msg.sender, contractAddress, uri);\n', '  }\n', '\n', '  function deferInstruction(address contractAddress, string memory uri) public {\n', '    require(msg.sender == multisig, "Only multisig can defer a proposal");\n', "    // TODO: return proposer's deposit\n", '    emit InstructionDeferred(proposers[contractAddress][uri], contractAddress, uri);\n', '  }\n', '\n', '  function updateMultisig(address _multisig) public {\n', '    require(msg.sender == multisig, "Only multisig can update multisig");\n', '    multisig = _multisig;\n', '  }\n', '\n', '  function updateMinBalance(uint256 newBalance) public {\n', '    require(msg.sender == multisig, "Only multisig can update minBalance");\n', '    minBalance = newBalance;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']