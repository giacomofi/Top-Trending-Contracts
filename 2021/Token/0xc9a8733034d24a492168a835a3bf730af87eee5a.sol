['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-21\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', 'pragma solidity 0.5.6;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction underflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'contract ERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Claimable{\n', '\n', '    ERC20 private _token;\n', '    address private owner;\n', '    uint private oneMinute = 1 minutes;\n', '    uint private oneDay = 1 days;\n', '\n', '    struct usersDetails {\n', '        address User;\n', '        uint totalBalance;\n', '        uint checkWithdrawBalance;\n', '        uint orginalBalanceAfterCliff;\n', '        uint balance;\n', '        uint vestingStartTime;\n', '        uint percentageShareTGE;\n', '        uint cliffTimePeriod;\n', '        uint interval;\n', '        uint vestingEndTime;\n', '        uint claimableBalance;\n', '        uint vestingPercentage;\n', '        uint withdrawalBalance;\n', '    }\n', '    \n', '    ERC20[] public tokenAddressArray;\n', '    constructor(ERC20 token) public{\n', '        owner = msg.sender;\n', '        _token = token;\n', '        tokenAddressArray.push(_token);\n', '        // e.totalSupply();\n', '    }\n', '    function checkBalance(address addr) public view returns(uint){\n', '       ERC20 e = ERC20(addr);\n', '       return e.totalSupply();\n', '    }\n', '    \n', '    mapping(address => mapping(address => usersDetails)) public userMapping;\n', '    address[] public userArray;\n', '    address[] public tokenArray;\n', '    \n', '    function balanceTGE(address _tokenAddress, address _userAddress)public view returns (uint){\n', '    if(now >= userMapping[_tokenAddress][_userAddress].vestingStartTime){\n', '        return userMapping[_tokenAddress][_userAddress].claimableBalance;\n', '        }\n', '    }\n', '    \n', '    function getArray() public view returns(ERC20[] memory){\n', '        return tokenAddressArray;\n', '    }\n', '    \n', '    function _addUserAndBalances(address[] memory _userArray, uint _percentageShareTGE,uint _startTgeTime, uint _cliffTimePeriod, uint _interval, uint _vestingEndTime, uint _claimableBalance, ERC20 token, address _tokenAddress,uint _vestingPercentage, uint[] memory _balc) public {\n', '        _token = token;\n', '        tokenAddressArray.push(_token);\n', '        for(uint i= 0;i < _userArray.length; i++) {\n', '            if( userMapping[_tokenAddress][_userArray[i]].User == _userArray[i]){\n', '            userMapping[_tokenAddress][_userArray[i]].balance +=  _balc[i];\n', '            userMapping[_tokenAddress][_userArray[i]].orginalBalanceAfterCliff +=  _balc[i];\n', '            tokenArray.push(_tokenAddress);\n', '            }\n', '            else{\n', '                userMapping[_tokenAddress][_userArray[i]] = (usersDetails(_userArray[i],_balc[i],_balc[i], _balc[i], _balc[i],_startTgeTime,_percentageShareTGE,_startTgeTime +_cliffTimePeriod * oneDay, _interval * oneDay, _startTgeTime+ _cliffTimePeriod* oneDay + _vestingEndTime * oneDay, _claimableBalance, _vestingPercentage, 0));\n', '                if(now >= userMapping[_tokenAddress][_userArray[i]].vestingStartTime){\n', '                    uint calcTokenValueAdd = userMapping[_tokenAddress][_userArray[i]].balance * userMapping[_tokenAddress][_userArray[i]].percentageShareTGE;\n', '                    calcTokenValueAdd = calcTokenValueAdd/100;\n', '                    userMapping[_tokenAddress][_userArray[i]].orginalBalanceAfterCliff = userMapping[_tokenAddress][_userArray[i]].balance- calcTokenValueAdd;\n', '                    userMapping[_tokenAddress][_userArray[i]].balance = userMapping[_tokenAddress][_userArray[i]].balance- calcTokenValueAdd;\n', '                    userMapping[_tokenAddress][_userArray[i]].claimableBalance = calcTokenValueAdd;\n', '                }else{\n', '                    uint calcTokenValueAdd = userMapping[_tokenAddress][_userArray[i]].balance * userMapping[_tokenAddress][_userArray[i]].percentageShareTGE;\n', '                    calcTokenValueAdd = calcTokenValueAdd/100;\n', '                    userMapping[_tokenAddress][_userArray[i]].orginalBalanceAfterCliff = userMapping[_tokenAddress][_userArray[i]].balance- calcTokenValueAdd;\n', '                    userMapping[_tokenAddress][_userArray[i]].balance = userMapping[_tokenAddress][_userArray[i]].balance- calcTokenValueAdd;\n', '                    userMapping[_tokenAddress][_userArray[i]].claimableBalance = calcTokenValueAdd;\n', '                }\n', '                tokenArray.push(_tokenAddress);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function transferTokens (address sender, address _tokenAddress, address token,  address recvr, uint amnt, uint _withdrawalAmount) public  returns(bool){\n', '        \n', '        require(_token.allowance(owner, address(this)) >= amnt, "Insufficient Tokens in Smart contract");\n', '        require(recvr == userMapping[_tokenAddress][recvr].User, "User is not Found!");\n', '        require(userMapping[_tokenAddress][recvr].checkWithdrawBalance>= amnt, "User Balance is not Insufficient!");\n', '\n', '        for(uint o = 1; o < tokenAddressArray.length; o++){\n', '            if(tokenAddressArray[o] == ERC20(token)){\n', '                _token.transferFrom(sender, recvr, _withdrawalAmount);\n', '                userMapping[_tokenAddress][recvr].balance = userMapping[_tokenAddress][recvr].balance - (amnt- userMapping[_tokenAddress][recvr].claimableBalance);\n', '                userMapping[_tokenAddress][recvr].claimableBalance= 0;\n', '                userMapping[_tokenAddress][recvr].withdrawalBalance +=  amnt;\n', '                userMapping[_tokenAddress][recvr].checkWithdrawBalance = userMapping[_tokenAddress][recvr].checkWithdrawBalance-amnt;\n', '                return true;        \n', '            }\n', '        }\n', '        \n', '    }\n', '}']