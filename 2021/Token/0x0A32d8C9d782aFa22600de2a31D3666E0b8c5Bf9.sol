['// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', ' \n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WFC is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', "    string public _name;                    //'WO1FCOIN';\n", "    string public _symbol;                  //'WFC';\n", '    uint256 public _totalSupply;\n', '    uint256 public _decimals;               //18;\n', '    \n', '    address public admin;\n', '    \n', '    mapping(address => uint256) public _balanceOf;\n', '    \n', '    mapping(address => mapping(address => uint256)) public _allowance;\n', '    \n', '    constructor(string memory _Tname, string memory _Tsymbol, uint256 _TtotalSupply, uint256 _Tdecimals) {\n', '        _name = _Tname;\n', '        _symbol = _Tsymbol;\n', '        _totalSupply = _TtotalSupply;\n', '        _decimals = _Tdecimals;\n', '        _balanceOf[msg.sender] = _TtotalSupply;\n', '        \n', '        admin = msg.sender;\n', '        \n', '        emit Transfer(address(0), msg.sender, _TtotalSupply);    // Minting amount from the network\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint256) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() override external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address account) override external view returns (uint256) {\n', '        return _balanceOf[account];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) override public returns(bool success) {\n', '        require(_to != address(0), "Invalid address");\n', '        \n', '        require(_value > 0, "Invalid amount");\n', '        \n', '        require(_balanceOf[msg.sender] >= _value, "Insufficient balance");\n', '        \n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) override public returns (bool success) {\n', '        require(_spender != address(0), "Invalid address");\n', '        \n', '        require(_value > 0, "Invalid amount");\n', '        \n', '        require(_balanceOf[msg.sender] >= _value, "Owner doesn\'t have enough balance to approve");\n', '        \n', '        _allowance[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\n', '        return _allowance[_owner][_spender];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n', '        require(_from != address(0), "Invalid address");\n', '        \n', '        require(_to != address(0), "Invalid address");\n', '        \n', '        require(_value > 0, "Invalid amount");\n', '        \n', '        require(_allowance[_from][msg.sender] >= _value, "You don\'t have the approval to spend this amount of tokens");\n', '        \n', '        require(_balanceOf[_from] >= _value, "From address doesn\'t have enough balance to transfer");\n', '        \n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        \n', '        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function mint(address to, uint256 value) public {\n', '        require(msg.sender == admin, "Only creator of the contract can mint tokens");\n', '        \n', '        require(value > 0, "Invalid amount to mint");\n', '        \n', '        _totalSupply = _totalSupply.add(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        \n', '        emit Transfer(address(0), to, value);\n', '    }\n', '    \n', '    function burn(address to, uint256 value) public {\n', '        require(msg.sender == admin, "Only creator of the contract can burn tokens");\n', '        \n', '        require(value > 0, "Invalid amount to burn");\n', '        \n', '        require(_totalSupply > 0, "Total Supply should be greater than 0");\n', '        \n', '        require(value <= _totalSupply, "Value cannot be greater than total supply of tokens");\n', '        \n', '        require(_balanceOf[to] >= value, "Not enough balance to burn");\n', '        \n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balanceOf[to] = _balanceOf[to].sub(value);\n', '        \n', '        emit Transfer(to, address(0), value);\n', '    }\n', '}']