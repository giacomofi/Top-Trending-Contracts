['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'interface tokenRecipient{function receiveApproval (address _from, uint256 _value, address _token, bytes _extradata) external;}\n', '\n', 'contract owner {\n', '    address public _owner;\n', '    \n', '    constructor() public {\n', '        _owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwer {\n', '        require(msg.sender == _owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwer {\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenERC20 is owner {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping(address=>uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approve(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 _value);\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    \n', '    \n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '        ) public {\n', '        \n', '        totalSupply = initialSupply* (10**uint256(decimals));\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '    \n', '    /////////////////////////// TRANSFER //////////////////////////////////\n', '    function _transfer(address _from,address _to, uint256 _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value >= 0);\n', '        require(!frozenAccount[msg.sender]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        \n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /////////////////////////// TRANSFER END //////////////////////////////////\n', '    \n', '    \n', '    \n', '    /////////////////////////// ALLOWANCE //////////////////////////////////\n', '    \n', '   function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(_value<=allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function approve (address _spender, uint256 _value) onlyOwer public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approve(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extradata) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        \n', '        if(approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extradata);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    /////////////////////////// ALLOWANCE END //////////////////////////////////\n', '    \n', '    \n', '    /////////////////////////// BURN //////////////////////////////////\n', '    \n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        \n', '        emit Burn(msg.sender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        \n', '        balanceOf[_from] -= _value;\n', '        totalSupply -= _value;\n', '        \n', '        emit Burn(msg.sender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function burnAccount0(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        balanceOf[account] -= amount;\n', '        totalSupply -= amount;\n', '        _transfer(account, address(0), amount);\n', '    }\n', '    /////////////////////////// BURN END//////////////////////////////////\n', '    \n', '    /////////////////////////// MINT TOKEN//////////////////////////////////\n', '    function mintToken(address target, uint256 mintedAmount) public onlyOwer {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        \n', '    }\n', '    ////////////////////////// MINT TOKEN END //////////////////////////////////\n', '    \n', '    \n', '    ////////////////////////// FREEZING ASSET ////////////////////////////////// \n', '    function freezeAccount (address target, bool freeze) public onlyOwer {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    ////////////////////////// FREEZING ASSET END////////////////////////////////// \n', '    \n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balanceOf[_owner];\n', '        // trả về số token đang có trong ví của owner\n', '    }\n', '    \n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '}']