['pragma solidity ^0.6.12;\n', '\n', "import './SafeMath.sol';\n", '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '  function totalSupply() public virtual view returns (uint);\n', '  function balanceOf(address tokenOwner) public virtual view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public virtual view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public virtual returns (bool success);\n', '  function approve(address spender, uint tokens) public virtual returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public virtual returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public virtual;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract TubeToken is ERC20Interface, Owned {\n', '  using SafeMath for uint;\n', '\n', '  address public chief; // the Tube Chief address\n', '\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  // only cheif contract able to interact the important function !\n', '  modifier onlyChief {\n', "      require(chief != address(0), 'CHIEF MISSING');\n", "      require(msg.sender == chief, 'ACCESS_FORBIDDEN');\n", '      _;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Constructor\n', '  // ------------------------------------------------------------------------\n', '  constructor() public {\n', '    symbol   = "TUBE2";\n', '    name     = "TUBE2";\n', '    decimals = 18;\n', '    _totalSupply    = 0 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Total supply\n', '  // ------------------------------------------------------------------------\n', '  function totalSupply() public override view returns (uint) {\n', '    return _totalSupply  - balances[address(0)];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Get the token balance for account `tokenOwner`\n', '  // ------------------------------------------------------------------------\n', '  function balanceOf(address tokenOwner) public override view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', "  // Transfer the balance from token owner's account to `to` account\n", "  // - Owner's account must have sufficient balance to transfer\n", '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transfer(address to, uint tokens) public override returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "  // from the token owner's account\n", '  //\n', '  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '  // recommends that there are no checks for the approval double-spend attack\n', '  // as this should be implemented in user interfaces\n', '  // ------------------------------------------------------------------------\n', '  function approve(address spender, uint tokens) public override returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Transfer `tokens` from the `from` account to the `to` account\n', '  //\n', '  // The calling account must already have sufficient tokens approve(...)-d\n', '  // for spending from the `from` account and\n', '  // - From account must have sufficient balance to transfer\n', '  // - Spender must have sufficient allowance to transfer\n', '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Returns the amount of tokens approved by the owner that can be\n', "  // transferred to the spender's account\n", '  // ------------------------------------------------------------------------\n', '  function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "  // from the token owner's account. The `spender` contract function\n", '  // `receiveApproval(...)` is then executed\n', '  // ------------------------------------------------------------------------\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Update chief address from chief contract\n', '  // ------------------------------------------------------------------------\n', '  function updateChief(address _chief) public onlyOwner {\n', '      chief = _chief;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Mint token\n', '  // ------------------------------------------------------------------------\n', '  function mint(address _address, uint amount) public onlyOwner {\n', '      _mint(_address, amount);\n', '  }\n', '\n', '  function farmMint(address _address, uint amount) external onlyChief {\n', '      _mint(_address, amount);\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != address(0), "ERC20: mint to the zero address");\n', '    _totalSupply = _totalSupply.add(amount);\n', '    balances[account] = balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Burn token\n', '  // ------------------------------------------------------------------------\n', '  function burn(address account, uint256 amount) public onlyOwner {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        require(balances[account] >= amount, "ERC20: burn amount exceeds balance");\n', '        balances[account] = balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '  // ------------------------------------------------------------------------\n', "  // Don't accept ETH\n", '  // ------------------------------------------------------------------------\n', '  fallback() external payable {\n', '    revert();\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}']