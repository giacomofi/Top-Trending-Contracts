['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', '// File: ../common/openzeppelin/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/SmokeSignal.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'abstract contract EthPriceOracle\n', '{\n', '    function read()\n', '        public \n', '        virtual\n', '        view \n', '        returns(bytes32);\n', '}\n', '\n', 'struct StoredMessageData \n', '{\n', '    address firstAuthor;\n', '    uint nativeBurned;\n', '    uint dollarsBurned;\n', '    uint nativeTipped;\n', '    uint dollarsTipped;\n', '}\n', '\n', 'contract SmokeSignal \n', '{\n', '    using SafeMath for uint256;\n', '\n', '    address payable constant burnAddress = address(0x0);\n', '    address payable donationAddress;\n', '    EthPriceOracle public oracle;\n', '\n', '    constructor(address payable _donationAddress, EthPriceOracle _oracle) \n', '        public \n', '    {\n', '        donationAddress = _donationAddress;\n', '        oracle = _oracle;\n', '    }\n', '\n', '    mapping (bytes32 => StoredMessageData) public storedMessageData;\n', '\n', '    function EthPrice() \n', '        public\n', '        view\n', '        returns (uint _price)\n', '    {\n', '        return address(oracle) == address(0) ? 10**18 : uint(oracle.read());\n', '    }\n', '\n', '    function ethToUsd(uint ethAmount)\n', '        public\n', '        view\n', '        returns (uint usdAmount)\n', '    {\n', '        usdAmount = EthPrice() * ethAmount / 10**18;\n', '    }\n', '\n', '    event MessageBurn(\n', '        bytes32 indexed _hash,\n', '        address indexed _from,\n', '        uint _burnAmount,\n', '        uint _burnUsdValue,\n', '        string _message\n', '    );\n', '\n', '    function burnMessage(string calldata _message, uint donateAmount)\n', '        external\n', '        payable\n', '        returns(bytes32)\n', '    {\n', '        internalDonateIfNonzero(donateAmount);\n', '\n', '        bytes32 hash = keccak256(abi.encode(_message));\n', '\n', '        uint burnAmount = msg.value.sub(donateAmount);\n', '\n', '        uint burnUsdValue = ethToUsd(burnAmount);\n', '\n', '        internalBurnForMessageHash(hash, burnAmount, burnUsdValue);\n', '\n', '        if (storedMessageData[hash].firstAuthor == address(0))\n', '        {\n', '            storedMessageData[hash].firstAuthor = msg.sender;\n', '        }\n', '\n', '        emit MessageBurn(\n', '            hash,\n', '            msg.sender,\n', '            burnAmount,\n', '            burnUsdValue,\n', '            _message);\n', '\n', '        return hash;\n', '    }\n', '\n', '    event HashBurn(\n', '        bytes32 indexed _hash,\n', '        address indexed _from,\n', '        uint _burnAmount,\n', '        uint _burnUsdValue\n', '    );\n', '\n', '    function burnHash(bytes32 _hash, uint donateAmount)\n', '        external\n', '        payable\n', '    {\n', '        internalDonateIfNonzero(donateAmount);\n', '\n', '        uint burnAmount = msg.value.sub(donateAmount);\n', '\n', '        uint burnUsdValue = ethToUsd(burnAmount);\n', '\n', '        internalBurnForMessageHash(_hash, burnAmount, burnUsdValue);\n', '\n', '        emit HashBurn(\n', '            _hash,\n', '            msg.sender,\n', '            burnAmount,\n', '            burnUsdValue\n', '        );\n', '    }\n', '\n', '    event HashTip(\n', '        bytes32 indexed _hash,\n', '        address indexed _from,\n', '        uint _tipAmount,\n', '        uint _tipUsdValue\n', '    );\n', '\n', '    function tipHashOrBurnIfNoAuthor(bytes32 _hash, uint donateAmount)\n', '        external\n', '        payable\n', '    {\n', '        internalDonateIfNonzero(donateAmount);\n', '\n', '        uint tipAmount = msg.value.sub(donateAmount);\n', '        \n', '        uint tipUsdValue = ethToUsd(tipAmount);\n', '        \n', '        address author = storedMessageData[_hash].firstAuthor;\n', '        if (author == address(0))\n', '        {\n', '            internalBurnForMessageHash(_hash, tipAmount, tipUsdValue);\n', '\n', '            emit HashBurn(\n', '                _hash,\n', '                msg.sender,\n', '                tipAmount,\n', '                tipUsdValue\n', '            );\n', '        }\n', '        else \n', '        {\n', '            internalTipForMessageHash(_hash, author, tipAmount, tipUsdValue);\n', '\n', '            emit HashTip(\n', '                _hash,\n', '                msg.sender,\n', '                tipAmount,\n', '                tipUsdValue\n', '            );\n', '        }\n', '    }\n', '\n', '    function internalBurnForMessageHash(bytes32 _hash, uint _burnAmount, uint _burnUsdValue)\n', '        internal\n', '    {\n', '        internalBurn(_burnAmount);\n', '        storedMessageData[_hash].nativeBurned += _burnAmount;\n', '        storedMessageData[_hash].dollarsBurned += _burnUsdValue;\n', '    }\n', '\n', '    function internalTipForMessageHash(bytes32 _hash, address author, uint _tipAmount, uint _tipUsdValue)\n', '        internal\n', '    {\n', '        internalSend(author, _tipAmount);\n', '        storedMessageData[_hash].nativeTipped += _tipAmount;\n', '        storedMessageData[_hash].dollarsTipped += _tipUsdValue;\n', '    }\n', '\n', '    function internalDonateIfNonzero(uint _wei)\n', '        internal\n', '    {\n', '        if (_wei > 0)\n', '        {\n', '            internalSend(donationAddress, _wei);\n', '        }\n', '    }\n', '\n', '    function internalSend(address _to, uint _wei)\n', '        internal\n', '    {\n', '        _to.call.value(_wei)("");\n', '    }\n', '\n', '    function internalBurn(uint _wei)\n', '        internal\n', '    {\n', '        burnAddress.call.value(_wei)("");\n', '    }\n', '}\n', '\n', 'contract SmokeSignal_Ethereum is SmokeSignal\n', '{\n', '    constructor(address payable _donationAddress) SmokeSignal(_donationAddress, EthPriceOracle(0x729D19f657BD0614b4985Cf1D82531c67569197B))\n', '        public \n', '    { }\n', '}\n', '\n', 'contract SmokeSignal_xDai is SmokeSignal\n', '{\n', '    constructor(address payable _donationAddress) SmokeSignal(_donationAddress, EthPriceOracle(address(0)))\n', '        public \n', '    { }\n', '}']