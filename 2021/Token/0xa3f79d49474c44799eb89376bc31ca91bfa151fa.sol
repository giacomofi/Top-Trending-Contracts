['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '//\n', '//\n', '//    ______  __ __    ___      ____ ____   ____   ____  __ __      ____    ____  ____   __  _ \n', '//   |      ||  |  |  /  _]    |    \\    | /    | /    ||  |  |    |    \\  /    ||    \\ |  |/ ]\n', "//   |      ||  |  | /  [_     |  o  )  | |   __||   __||  |  |    |  o  )|  o  ||  _  ||  ' / \n", '//   |_|  |_||  _  ||    _]    |   _/|  | |  |  ||  |  ||  ~  |    |     ||     ||  |  ||    \\ \n', '//     |  |  |  |  ||   [_     |  |  |  | |  |_ ||  |_ ||___, |    |  O  ||  _  ||  |  ||     \\\n', '//     |  |  |  |  ||     |    |  |  |  | |     ||     ||     |    |     ||  |  ||  |  ||  .  |\n', '//     |__|  |__|__||_____|    |__| |____||___,_||___,_||____/     |_____||__|__||__|__||__|\\_|\n', '//\n', '// The Reflect 3 team ($RFIII) is launching their 2nd project in the Reflect 3 Ecosystem.\n', '// “The Piggy Bank” is all about generating a passive income for token holders of the first project $RFIII and holders of this token.\n', '// The third farming pool is supported with our partner Corlibri. All pools will pair with ETH and mint new RFPIG tokens but can have different and variable APY (returns).\n', '//\n', '//\n', '// Medium: https://thepiggybank.medium.com/\n', '// Website: https://reflect3finance.com/\n', '// Twitter: https://twitter.com/financereflect3\n', '// Telegram: https://t.me/reflectfinance3\n', '//\n', '//\n', '\n', 'pragma solidity 0.7.4;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'contract Owned {\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    address owner;\n', '    address newOwner;\n', '    function changeOwner(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    function balanceOf(address _owner) view public returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '  \n', '    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract ThePiggyBank is Owned,ERC20{\n', '    uint256 public maxSupply;\n', '\n', '    constructor(address _owner) {\n', '        symbol = "RFPIG";\n', '        name = "ThePiggyBank";\n', '        decimals = 18;                           // 18 Decimals\n', '        totalSupply = 150000e18;                 // 150,000 RFPIG and 18 Decimals\n', '        maxSupply   = 150000e18;                 // 150,000 RFPIG and 18 Decimals\n', '        owner = _owner;\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    receive() external payable {\n', '        revert();\n', '    }\n', '}']