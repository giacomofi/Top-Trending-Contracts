['pragma solidity ^0.4.24;\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract KaikenInuToken is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '    string public constant name = "KaikenInu";\n', '    string public constant symbol = "KaikenInu";\n', '    uint8 public constant decimals = 9;\n', '    uint256 private totalSupply_ = 1000000000 * 10**6 * 10**9;\n', '    uint256 public _taxFee = 2;\n', '    uint256 private _previousTaxFee = _taxFee;\n', '    uint256 public _liquidityFee = 1;\n', '    uint256 private _previousLiquidityFee = _liquidityFee;\n', '    uint256 public _burnFee = 1;\n', '    uint256 private _previousBurnFee = _burnFee;\n', '    uint256 public _marketingFee = 1;\n', '    \n', '    bool public locked = true;\n', '    mapping (address => uint256) private balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '  modifier onlyWhenUnlocked() {\n', '    require(!locked || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '      balances[msg.sender] = totalSupply_;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public onlyWhenUnlocked returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    onlyWhenUnlocked\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function burn(uint256 _value) public returns (bool success){\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    return true;\n', '  }\n', '\n', '  function unlock() public onlyOwner {\n', '    locked = false;\n', '  }\n', '\n', '}']