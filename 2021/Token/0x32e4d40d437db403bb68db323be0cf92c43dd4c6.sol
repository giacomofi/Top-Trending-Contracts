['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '/*\n', '\n', '███╗░░██╗███████╗████████╗\n', '████╗░██║██╔════╝╚══██╔══╝\n', '██╔██╗██║█████╗░░░░░██║░░░\n', '██║╚████║██╔══╝░░░░░██║░░░\n', '██║░╚███║██║░░░░░░░░██║░░░\n', '╚═╝░░╚══╝╚═╝░░░░░░░░╚═╝░░░\n', '\n', '██████╗░██████╗░░█████╗░\u2003\u2003\n', '██╔══██╗██╔══██╗██╔══██╗\u2003\u2003\n', '██████╔╝██████╔╝██║░░██║\u2003\u2003\n', '██╔═══╝░██╔══██╗██║░░██║\u2003\u2003\n', '██║░░░░░██║░░██║╚█████╔╝\u2003\u2003\n', '╚═╝░░░░░╚═╝░░╚═╝░╚════╝░\u2003\u2003\n', '\n', '░█████╗░██████╗░██╗░░░██╗██████╗░████████╗░█████╗░\n', '██╔══██╗██╔══██╗╚██╗░██╔╝██╔══██╗╚══██╔══╝██╔══██╗\n', '██║░░╚═╝██████╔╝░╚████╔╝░██████╔╝░░░██║░░░██║░░██║\n', '██║░░██╗██╔══██╗░░╚██╔╝░░██╔═══╝░░░░██║░░░██║░░██║\n', '╚█████╔╝██║░░██║░░░██║░░░██║░░░░░░░░██║░░░╚█████╔╝\n', '░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░░░░░░░╚═╝░░░░╚════╝░\n', '\n', 'https://nftprocrypto.com\n', '\n', '𝑇ℎ𝑖𝑠 𝑖𝑠 𝑡ℎ𝑒 𝑟𝑒𝑎𝑙 𝑎𝑟𝑡 𝑓𝑟𝑜𝑚 𝑝𝑟𝑜𝑓𝑒𝑠𝑠𝑖𝑜𝑛𝑎𝑙𝑠 | 𝑁𝐹𝑇 + 𝑅𝐸𝐴𝐿 𝐴𝑅𝑇 = 𝑁𝐹𝑇 𝑃𝑅𝑂 𝐶𝑅𝑌𝑃𝑇𝑂\n', '\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract Context {\n', '   \n', '    constructor () internal { }\n', ' \n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IERC165 {\n', '\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '\n', '\n', '    function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) public;\n', '    function approve(address to, uint256 tokenId) public;\n', '    function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public;\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract IERC721Receiver {\n', '\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n', '    public returns (bytes4);\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath {\n', '  \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '\n', '        uint256 _value; \n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract ERC165 is IERC165 {\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '\n', '    function _registerInterface(bytes4 interfaceId) internal {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract ERC721 is Context, ERC165, IERC721 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using Counters for Counters.Counter;\n', '\n', '\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '\n', '    mapping (uint256 => address) private _tokenOwner;\n', '\n', '\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', ' \n', '    mapping (address => Counters.Counter) private _ownedTokensCount;\n', '\n', '\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    constructor () public {\n', '\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _ownedTokensCount[owner].current();\n', '    }\n', '\n', '\n', '    function ownerOf(uint256 tokenId) public view returns (address) {\n', '        address owner = _tokenOwner[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '\n', '        return owner;\n', '    }\n', '\n', '\n', '    function approve(address to, uint256 tokenId) public {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(owner, to, tokenId);\n', '    }\n', '\n', '\n', '    function getApproved(uint256 tokenId) public view returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    function setApprovalForAll(address to, bool approved) public {\n', '        require(to != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][to] = approved;\n', '        emit ApprovalForAll(_msgSender(), to, approved);\n', '    }\n', '\n', '\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) public {\n', '        \n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transferFrom(from, to, tokenId);\n', '    }\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransferFrom(from, to, tokenId, _data);\n', '    }\n', '\n', '\n', '    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n', '        _transferFrom(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        address owner = _tokenOwner[tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    function _safeMint(address to, uint256 tokenId) internal {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _tokenOwner[tokenId] = to;\n', '        _ownedTokensCount[to].increment();\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    function _burn(address owner, uint256 tokenId) internal {\n', '        require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");\n', '\n', '        _clearApproval(tokenId);\n', '\n', '        _ownedTokensCount[owner].decrement();\n', '        _tokenOwner[tokenId] = address(0);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    function _burn(uint256 tokenId) internal {\n', '        _burn(ownerOf(tokenId), tokenId);\n', '    }\n', '\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _clearApproval(tokenId);\n', '\n', '        _ownedTokensCount[from].decrement();\n', '        _ownedTokensCount[to].increment();\n', '\n', '        _tokenOwner[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', ' \n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        internal returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '\n', '        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _clearApproval(uint256 tokenId) private {\n', '        if (_tokenApprovals[tokenId] != address(0)) {\n', '            _tokenApprovals[tokenId] = address(0);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract IERC721Enumerable is IERC721 {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n', '\n', '    function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\n', '\n', '    mapping(address => uint256[]) private _ownedTokens;\n', '\n', '    mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '    uint256[] private _allTokens;\n', '\n', '    mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    constructor () public {\n', '\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n', '        require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '        return _ownedTokens[owner][index];\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '  \n', '    function tokenByIndex(uint256 index) public view returns (uint256) {\n', '        require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        super._transferFrom(from, to, tokenId);\n', '\n', '        _removeTokenFromOwnerEnumeration(from, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '    }\n', '\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        super._mint(to, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '\n', '        _addTokenToAllTokensEnumeration(tokenId);\n', '    }\n', '\n', '    function _burn(address owner, uint256 tokenId) internal {\n', '        super._burn(owner, tokenId);\n', '\n', '        _removeTokenFromOwnerEnumeration(owner, tokenId);\n', '        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n', '        _ownedTokensIndex[tokenId] = 0;\n', '\n', '        _removeTokenFromAllTokensEnumeration(tokenId);\n', '    }\n', '\n', '    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n', '        return _ownedTokens[owner];\n', '    }\n', '\n', '    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n', '        _ownedTokens[to].push(tokenId);\n', '    }\n', '\n', '    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '        _allTokensIndex[tokenId] = _allTokens.length;\n', '        _allTokens.push(tokenId);\n', '    }\n', '\n', '    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', '\n', '        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '        if (tokenIndex != lastTokenIndex) {\n', '            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '            _ownedTokens[from][tokenIndex] = lastTokenId; \n', '            _ownedTokensIndex[lastTokenId] = tokenIndex; \n', '        }\n', '\n', '        _ownedTokens[from].length--;\n', '\n', '    }\n', '\n', '    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '\n', '        uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '        uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '\n', '        uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '        _allTokens[tokenIndex] = lastTokenId; \n', '        _allTokensIndex[lastTokenId] = tokenIndex; \n', '\n', '\n', '        _allTokens.length--;\n', '        _allTokensIndex[tokenId] = 0;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'contract ENSRegistryOwnerI {\n', '    function owner(bytes32 node) public view returns (address);\n', '}\n', '\n', 'contract ENSReverseRegistrarI {\n', '    function setName(string memory name) public returns (bytes32 node);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'contract IERC721Metadata is IERC721 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\n', '\n', '    string private _name;\n', '\n', '\n', '    string private _symbol;\n', '\n', '  \n', '    mapping(uint256 => string) private _tokenURIs;\n', '\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '\n', '\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '    }\n', '\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '\n', '    function tokenURI(uint256 tokenId) external view returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '        return _tokenURIs[tokenId];\n', '    }\n', '\n', '\n', '    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = uri;\n', '    }\n', '\n', ' \n', '    function _burn(address owner, uint256 tokenId) internal {\n', '        super._burn(owner, tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '            delete _tokenURIs[tokenId];\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract NFTPROCrypto is ERC721, ERC721Enumerable, ERC721Metadata("NFT PRO CRYPTO", "NFTPRO") {\n', '\n', '    string public uribase;\n', '\n', '    address public createControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\t\n', '\tbool public mintingFinished = false;\n', '\n', '    uint256 constant finalSupply= 5000;\n', '\n', '\n', '    constructor(address _createControl, address _tokenAssignmentControl)\n', '    public\n', '    {\n', '        createControl = _createControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        uribase = "https://nftprocrypto.com/nft/procrypto/meta/";\n', ' \n', '    }\n', '\n', '    modifier onlyCreateControl()\n', '    {\n', '        require(msg.sender == createControl, "createControl key required for this function.");\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl, "tokenAssignmentControl key required for this function.");\n', '        _;\n', '    }\n', '    \n', '\tmodifier requireMinting() {\n', '        require(mintingFinished == false, "This call only works when minting is not finished.");\n', '        _;\n', '    }\n', '\n', '\n', '\t\n', '    function totalSupply()\n', '    public view\n', '    returns (uint256) {\n', '        return finalSupply;\n', '    }\n', '\n', '  \n', '    function mintedSupply()\n', '    public view\n', '    returns (uint256) {\n', '        return super.totalSupply();\n', '    }\n', '\n', '\n', '    function create(uint256 _tokenId, address _owner)\n', '    public\n', '    onlyCreateControl\n', '\trequireMinting\n', '    {\n', '       \n', '        require(_tokenId == 0 || _exists(_tokenId.sub(1)), "Previous token ID has to exist.");\n', '       \n', '        _mint(_owner, _tokenId);\n', '    }\n', '\n', '\n', '\n', '    function createMulti(uint256 _tokenIdStart, address _owner, uint256 count)\n', '    public\n', '    onlyCreateControl\n', '    requireMinting\n', '    {\n', '        \n', '        require(_tokenIdStart == 0 || _exists(_tokenIdStart.sub(1)), "Previous token ID has to exist.");\n', '        for (uint256 i = 0; i < count; i++) {\n', '       \n', '            _mint(_owner, _tokenIdStart + i);\n', '        }\n', '    }\n', '\t\n', '\tfunction finishMinting()\n', '    public\n', '    onlyCreateControl\n', '    {\n', '        mintingFinished = true;\n', '    }\n', '\t\n', '\n', '\n', '\n', '\n', '    function newUriBase(string memory _newUriBase)\n', '    public\n', '    onlyCreateControl\n', '    {\n', '        uribase = _newUriBase;\n', '    }\n', '\n', '\n', '    function tokenURI(uint256 _tokenId)\n', '    external view\n', '    returns (string memory)\n', '    {\n', '        require(_exists(_tokenId), "Token ID does not exist.");\n', '        return string(abi.encodePacked(uribase, uint2str(_tokenId)));\n', '    }\n', '\n', '\n', '    function exists(uint256 tokenId) public view returns (bool) {\n', '        return _exists(tokenId);\n', '    }\n', '\n', '\n', '    function uint2str(uint256 inp)\n', '    internal pure\n', '    returns (string memory)\n', '    {\n', '        if (inp == 0) return "0";\n', '        uint i = inp;\n', '        uint j = i;\n', '        uint length;\n', '        while (j != 0) {\n', '            length++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(length);\n', '        uint k = length - 1;\n', '        while (i != 0) {\n', '            bstr[k--] = byte(uint8(48 + i % 10));\n', '            i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '\n', '\n', '    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name)\n', '    external\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(_reverseRegistrarAddress != address(0), "need a valid reverse registrar");\n', '        ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\n', '    }\n', '\n', '\n', '    function rescueToken(IERC20 _foreignToken, address _to)\n', '    external\n', '    onlyTokenAssignmentControl\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\n', '    }\n', '\n', '\n', '    function()\n', '    external payable\n', '    {\n', '        revert("The contract cannot receive ETH payments.");\n', '    }\n', '}\n', '\n', '/*\n', '\n', '\n', 'Learn more about NFT PRO CRYPTO \n', '\n', 'NFT PRO CRYPTO©\n', 'Website:https://nftprocrypto.com\n', '\n', 'Social Media:\n', 'https://www.facebook.com/nftprocrypto\n', 'https://twitter.com/nftprocrypto\n', '\n', '\n', '\n', '\n', '\n', '𝙰𝚞𝚝𝚑𝚘𝚛𝚒𝚣𝚎𝚍 𝚜𝚎𝚕𝚕𝚎𝚛 𝚏𝚘𝚛 𝚝𝚑𝚎 𝚜𝚊𝚕𝚎 𝚘𝚏 𝙽𝙵𝚃\n', '\n', '\n', '░█████╗░██╗░░░░░██╗░░░░░███╗░░░███╗███████╗██████╗░░██████╗░██████╗░░█████╗░██╗░░░██╗██████╗░\n', '██╔══██╗██║░░░░░██║░░░░░████╗░████║██╔════╝██╔══██╗██╔════╝░██╔══██╗██╔══██╗██║░░░██║██╔══██╗\n', '███████║██║░░░░░██║░░░░░██╔████╔██║█████╗░░██║░░██║██║░░██╗░██████╔╝██║░░██║██║░░░██║██████╔╝\n', '██╔══██║██║░░░░░██║░░░░░██║╚██╔╝██║██╔══╝░░██║░░██║██║░░╚██╗██╔══██╗██║░░██║██║░░░██║██╔═══╝░\n', '██║░░██║███████╗███████╗██║░╚═╝░██║███████╗██████╔╝╚██████╔╝██║░░██║╚█████╔╝╚██████╔╝██║░░░░░\n', '╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░░╚═════╝░╚═╝░░╚═╝░╚════╝░░╚═════╝░╚═╝░░░░░\n', '\n', '░█████╗░░█████╗░██████╗░██████╗░░█████╗░██████╗░░█████╗░████████╗██╗░█████╗░███╗░░██╗\n', '██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║\n', '██║░░╚═╝██║░░██║██████╔╝██████╔╝██║░░██║██████╔╝███████║░░░██║░░░██║██║░░██║██╔██╗██║\n', '██║░░██╗██║░░██║██╔══██╗██╔═══╝░██║░░██║██╔══██╗██╔══██║░░░██║░░░██║██║░░██║██║╚████║\n', '╚█████╔╝╚█████╔╝██║░░██║██║░░░░░╚█████╔╝██║░░██║██║░░██║░░░██║░░░██║╚█████╔╝██║░╚███║\n', '░╚════╝░░╚════╝░╚═╝░░╚═╝╚═╝░░░░░░╚════╝░╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝\n', '\n', '\n', '𝐀𝐋𝐋𝐌𝐄𝐃 𝐆𝐑𝐎𝐔𝐏 𝐂𝐎𝐑𝐏𝐎𝐑𝐀𝐓𝐈𝐎𝐍\n', '\n', '𝔘𝔫𝔦𝔱𝔢𝔡 𝔖𝔱𝔞𝔱𝔢𝔰 𝔬𝔣 𝔄𝔪𝔢𝔯𝔦𝔠𝔞 (𝚄𝚂𝙰)\n', '𝙵𝚕𝚘𝚛𝚒𝚍𝚊 𝚁𝚎𝚐𝚒𝚜𝚝𝚛𝚊𝚝𝚒𝚘𝚗 𝚠𝚠𝚠.𝚍𝚘𝚜.𝚜𝚝𝚊𝚎.𝚏𝚕.𝚞𝚜 𝚁𝚎𝚐𝚒𝚜𝚝𝚛𝚊𝚝𝚒𝚘𝚗 ℙ𝟙𝟛𝟘𝟘𝟘𝟘𝟟𝟜𝟜𝟙𝟟𝟿 | 𝙵𝚎𝚍𝚎𝚛𝚊𝚕 𝚃𝚊𝚡 𝙸𝚍𝚎𝚗𝚝𝚒𝚏𝚒𝚌𝚊𝚝𝚒𝚘𝚗 𝙽𝚞𝚖𝚋𝚎𝚛 (𝙴𝙸𝙽) 𝟛𝟘-𝟘𝟟𝟡𝟞𝟞𝟜𝟘\n', '----------------------------------------------------------------------------------------------------\n', '----------------------------------------------------------------------------------------------\n', '----------------------------------------------------------------------------------\n', '----------------------------------------------------------------\n', '-----------------------------------------------\n', '---------------------------------\n', '----------------------\n', 'Website:\n', ' https://allmedgroup.org/\n', ' \n', '[email\xa0protected]\n', '\n', 'Social Media: \n', 'https://www.facebook.com/allmedgroup/\n', 'https://twitter.com/allmedgroup\n', 'https://www.instagram.com/allmedgroup/\n', '\n', '\n', 'Aʟʟ Rɪɢʜᴛs Rᴇsᴇʀᴠᴇᴅ. AʟʟᴍᴇᴅGʀᴏᴜᴘ Cᴏʀᴘᴏʀᴀᴛɪᴏɴ\n', '\n', '*/']