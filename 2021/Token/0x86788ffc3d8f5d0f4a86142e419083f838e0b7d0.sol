['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', 'import "./ERC20Permit.sol";\n', 'import "./Ownable.sol";\n', '\n', '\n', '/**\n', 'ERC Token Standard #20 Interface\n', 'https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '*/\n', '\n', '\n', '/**\n', 'ERC20 Token, with the addition of symbol, name and decimals and assisted token transfers\n', '*/\n', 'contract RIEToken is ERC20Permit, Ownable {\n', '    using SafeMath for uint256;\n', '    //Define total Distribution Pilot Program Supply\n', '    uint256 private _DistPilotSupply = 5.5e8 ether;\n', '    \n', '    //Define total devTeam allocated token funds\n', '    uint256 private _devTeamSupply = 3.5e8 ether;\n', '    \n', '    //Define total bounty allocated token funds\n', '    uint256 private _bountySupply = 0.5e8 ether;\n', '\n', '    //Define owner address funds \n', '    uint256 private _ownerSupply = 1.55e9 ether;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address _owner) ERC20("Ralie Token", "RIE") EIP712("Ralie Token", "1") {\n', '                 \n', '        transferOwnership(_owner);\n', '        _mint(_owner, _ownerSupply);\n', '        _mint(0x0D82fB6990d7dC8A22f79623c3A662db099a50be, _DistPilotSupply);\n', '        _mint(0xc307c195b7380656598e992cf104cF1671B35476, _devTeamSupply);\n', '        _mint(0x801e2ab2197c1a13bB39335de47211a447Ff875F, _bountySupply);\n', '\n', '    }\n', '\n', '\n', '    function mintbyOwner(address account, uint256 amount) public virtual onlyOwner{\n', '        require(totalSupply().add(amount) <= 2.5e9 ether, "ERC20: amount higher than total supply");\n', '        _mint(account, amount);\n', '    }\n', '    \n', '    /**\n', '    * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', '    * tokens and those that they have an allowance for, in a way that can be\n', '    * recognized off-chain (via event analysis).\n', '    */\n', '    \n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '    \n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '\n', '}']