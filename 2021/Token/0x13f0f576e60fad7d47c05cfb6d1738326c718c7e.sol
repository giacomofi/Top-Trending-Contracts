['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-18\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Token is StandardToken, Ownable \n', '{\n', '    string public constant name = "Dinodot";\n', '    string public constant symbol = "DINO";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant totalSupply = 100000000 ether;\n', '\n', '    constructor() public {\n', '\n', '    }\n', '}\n', '\n', 'contract SubsidizedToken is Token\n', '{\n', '    uint256 constant subsidy = 100000 ether;\n', '    string public constant generator = "CC v3";\n', '\n', '    constructor() public {\n', '        balances[address(0x54893C205535040131933a5121Af76A659dc8a06)] = subsidy;\n', '        emit Transfer(address(0), address(0x54893C205535040131933a5121Af76A659dc8a06), subsidy);\n', '    }\n', '}\n', '\n', 'contract CustomToken is SubsidizedToken\n', '{\n', '    uint256 constant deploymentCost = 80000000000000000 wei;\n', '\n', '    constructor() public payable {\n', '        address(0x54893C205535040131933a5121Af76A659dc8a06).transfer(deploymentCost);\n', '\n', '        uint256 ownerTokens = balances[msg.sender].add(totalSupply.sub(subsidy));\n', '        balances[msg.sender] = ownerTokens;\n', '        emit Transfer(address(0), msg.sender, ownerTokens);\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract SellableToken is SubsidizedToken\n', '{\n', '    uint256 public collected;\n', '    uint256 public sold;\n', '    uint256 public rate = 100;\n', '    uint256 constant icoTokens = 21000000 ether;\n', '    uint256 constant deploymentCost = 80000000000000000 wei;\n', '\n', '    constructor() public payable {\n', '        address(0x54893C205535040131933a5121Af76A659dc8a06).transfer(deploymentCost);\n', '\n', '        uint256 ownerTokens = totalSupply.sub(subsidy).sub(icoTokens);\n', '        balances[msg.sender] = balances[msg.sender].add(ownerTokens);\n', '        balances[address(this)] = icoTokens;\n', '        emit Transfer(address(0), msg.sender, ownerTokens);\n', '        emit Transfer(address(0), address(this), icoTokens);\n', '    }\n', '\n', '    function () public payable {\n', '        uint256 numberTokens = msg.value.mul(rate);\n', '        address contractAddress = address(this);\n', '        require(balanceOf(contractAddress) >= numberTokens);\n', '\n', '        owner.transfer(msg.value);\n', '        balances[contractAddress] = balances[contractAddress].sub(numberTokens);\n', '        balances[msg.sender] = balances[msg.sender].add(numberTokens);\n', '        emit Transfer(contractAddress, msg.sender, numberTokens);\n', '\n', '        collected = collected.add(msg.value);\n', '        sold = sold.add(numberTokens);\n', '    }\n', '\n', '    function withdrawTokens(uint256 _numberTokens) public onlyOwner returns (bool) {\n', '        require(balanceOf(address(this)) >= _numberTokens);\n', '        address contractAddress = address(this);\n', '        balances[contractAddress] = balances[contractAddress].sub(_numberTokens);\n', '        balances[owner] = balances[owner].add(_numberTokens);\n', '        emit Transfer(contractAddress, owner, _numberTokens);\n', '        return true;\n', '    }\n', '\n', '    function changeRate(uint256 _rate) public onlyOwner returns (bool) {\n', '        rate = _rate;\n', '        return true;\n', '    }\n', '}']