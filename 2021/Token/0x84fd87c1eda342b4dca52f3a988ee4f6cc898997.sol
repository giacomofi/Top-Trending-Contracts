['// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity ^0.8.3;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private _initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private _initializing;\n', '\n', '  /**\n', '   * @dev Modifier to protect an initializer function from being invoked twice.\n', '   */\n', '  modifier initializer() {\n', '    require(\n', '      _initializing || !_initialized,\n', "      'Initializable: contract is already initialized'\n", '    );\n', '\n', '    bool isTopLevelCall = !_initializing;\n', '    if (isTopLevelCall) {\n', '      _initializing = true;\n', '      _initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      _initializing = false;\n', '    }\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.3;\n', "import '../proxy/utils/Initializable.sol';\n", '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '  function __Context_init() internal initializer {\n', '    __Context_init_unchained();\n', '  }\n', '\n', '  function __Context_init_unchained() internal initializer {}\n', '\n', '  function _msgSender() internal view virtual returns (address) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes calldata) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '\n', '  uint256[50] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', "import './IERC20Upgradeable.sol';\n", "import './extensions/IERC20MetadataUpgradeable.sol';\n", "import '../../utils/ContextUpgradeable.sol';\n", "import '../../proxy/utils/Initializable.sol';\n", '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Upgradeable is\n', '  Initializable,\n', '  ContextUpgradeable,\n', '  IERC20Upgradeable,\n', '  IERC20MetadataUpgradeable\n', '{\n', '  mapping(address => uint256) private _balances;\n', '\n', '  mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '\n', '  /**\n', '   * @dev Sets the values for {name} and {symbol}.\n', '   *\n', '   * The defaut value of {decimals} is 18. To select a different value for\n', '   * {decimals} you should overload it.\n', '   *\n', '   * All two of these values are immutable: they can only be set once during\n', '   * construction.\n', '   */\n', '  function __ERC20_init(string memory name_, string memory symbol_)\n', '    internal\n', '    initializer\n', '  {\n', '    __Context_init_unchained();\n', '    __ERC20_init_unchained(name_, symbol_);\n', '  }\n', '\n', '  function __ERC20_init_unchained(string memory name_, string memory symbol_)\n', '    internal\n', '    initializer\n', '  {\n', '    _name = name_;\n', '    _symbol = symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the name of the token.\n', '   */\n', '  function name() public view virtual override returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the symbol of the token, usually a shorter version of the\n', '   * name.\n', '   */\n', '  function symbol() public view virtual override returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of decimals used to get its user representation.\n', '   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '   *\n', '   * Tokens usually opt for a value of 18, imitating the relationship between\n', '   * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '   * overridden;\n', '   *\n', '   * NOTE: This information is only used for _display_ purposes: it in\n', '   * no way affects any of the arithmetic of the contract, including\n', '   * {IERC20-balanceOf} and {IERC20-transfer}.\n', '   */\n', '  function decimals() public view virtual override returns (uint8) {\n', '    return 18;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-totalSupply}.\n', '   */\n', '  function totalSupply() public view virtual override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-balanceOf}.\n', '   */\n', '  function balanceOf(address account)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256)\n', '  {\n', '    return _balances[account];\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-transfer}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `recipient` cannot be the zero address.\n', '   * - the caller must have a balance of at least `amount`.\n', '   */\n', '  function transfer(address recipient, uint256 amount)\n', '    public\n', '    virtual\n', '    override\n', '    returns (bool)\n', '  {\n', '    _transfer(_msgSender(), recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-allowance}.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256)\n', '  {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-approve}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function approve(address spender, uint256 amount)\n', '    public\n', '    virtual\n', '    override\n', '    returns (bool)\n', '  {\n', '    _approve(_msgSender(), spender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-transferFrom}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance. This is not\n', '   * required by the EIP. See the note at the beginning of {ERC20}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `sender` and `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', "   * - the caller must have allowance for ``sender``'s tokens of at least\n", '   * `amount`.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) public virtual override returns (bool) {\n', '    _transfer(sender, recipient, amount);\n', '\n', '    uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '    require(\n', '      currentAllowance >= amount,\n', "      'ERC20: transfer amount exceeds allowance'\n", '    );\n', '    _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function increaseAllowance(address spender, uint256 addedValue)\n', '    public\n', '    virtual\n', '    returns (bool)\n', '  {\n', '    _approve(\n', '      _msgSender(),\n', '      spender,\n', '      _allowances[_msgSender()][spender] + addedValue\n', '    );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   * - `spender` must have allowance for the caller of at least\n', '   * `subtractedValue`.\n', '   */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue)\n', '    public\n', '    virtual\n', '    returns (bool)\n', '  {\n', '    uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '    require(\n', '      currentAllowance >= subtractedValue,\n', "      'ERC20: decreased allowance below zero'\n", '    );\n', '    _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '   *\n', '   * This is internal function is equivalent to {transfer}, and can be used to\n', '   * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `sender` cannot be the zero address.\n', '   * - `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', '   */\n', '  function _transfer(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) internal virtual {\n', "    require(sender != address(0), 'ERC20: transfer from the zero address');\n", "    require(recipient != address(0), 'ERC20: transfer to the zero address');\n", '\n', '    _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '    uint256 senderBalance = _balances[sender];\n', "    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\n", '    _balances[sender] = senderBalance - amount;\n', '    _balances[recipient] += amount;\n', '\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '\n', '  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '   * the total supply.\n', '   *\n', '   * Emits a {Transfer} event with `from` set to the zero address.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `to` cannot be the zero address.\n', '   */\n', '  function _mint(address account, uint256 amount) internal virtual {\n', "    require(account != address(0), 'ERC20: mint to the zero address');\n", '\n', '    _beforeTokenTransfer(address(0), account, amount);\n', '\n', '    _totalSupply += amount;\n', '    _balances[account] += amount;\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Destroys `amount` tokens from `account`, reducing the\n', '   * total supply.\n', '   *\n', '   * Emits a {Transfer} event with `to` set to the zero address.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `account` cannot be the zero address.\n', '   * - `account` must have at least `amount` tokens.\n', '   */\n', '  function _burn(address account, uint256 amount) internal virtual {\n', "    require(account != address(0), 'ERC20: burn from the zero address');\n", '\n', '    _beforeTokenTransfer(account, address(0), amount);\n', '\n', '    uint256 accountBalance = _balances[account];\n', "    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\n", '    _balances[account] = accountBalance - amount;\n', '    _totalSupply -= amount;\n', '\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '   *\n', '   * This internal function is equivalent to `approve`, and can be used to\n', '   * e.g. set automatic allowances for certain subsystems, etc.\n', '   *\n', '   * Emits an {Approval} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `owner` cannot be the zero address.\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function _approve(\n', '    address owner,\n', '    address spender,\n', '    uint256 amount\n', '  ) internal virtual {\n', "    require(owner != address(0), 'ERC20: approve from the zero address');\n", "    require(spender != address(0), 'ERC20: approve to the zero address');\n", '\n', '    _allowances[owner][spender] = amount;\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Hook that is called before any transfer of tokens. This includes\n', '   * minting and burning.\n', '   *\n', '   * Calling conditions:\n', '   *\n', "   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '   * will be to transferred to `to`.\n', '   * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '   * - `from` and `to` are never both zero.\n', '   *\n', '   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '   */\n', '  function _beforeTokenTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 amount\n', '  ) internal virtual {}\n', '\n', '  uint256[45] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', "import '../IERC20Upgradeable.sol';\n", '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20MetadataUpgradeable is IERC20Upgradeable {\n', '  /**\n', '   * @dev Returns the name of the token.\n', '   */\n', '  function name() external view returns (string memory);\n', '\n', '  /**\n', '   * @dev Returns the symbol of the token.\n', '   */\n', '  function symbol() external view returns (string memory);\n', '\n', '  /**\n', '   * @dev Returns the decimals places of the token.\n', '   */\n', '  function decimals() external view returns (uint8);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', "import './openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\n", '\n', 'contract WhnsTokenV1 is ERC20Upgradeable {\n', '  struct MintArgs {\n', '    address to;\n', '    uint256 amount;\n', '  }\n', '\n', '  /**\n', '   * @dev The address with permission to mint new tokens\n', '   */\n', '  address public minter;\n', '\n', '  /**\n', '   * @dev Tracking for used redeem tokens.\n', '   */\n', '  mapping(bytes32 => bool) public isRedeemTokenUsed;\n', '\n', '  /**\n', "   * @dev Mapping of interface ids to whether or not it's supported.\n", '   */\n', '  mapping(bytes4 => bool) internal _supportedInterfaces;\n', '\n', '  event TokensRedeemed(\n', '    bytes32 indexed redeemToken,\n', '    address indexed from,\n', '    uint256 amount\n', '  );\n', '\n', '  function initialize(address _minter) public initializer {\n', "    __ERC20_init('Wrapped HNS', 'WHNS');\n", '    minter = _minter;\n', '\n', '    _supportedInterfaces[this.supportsInterface.selector] = true; // ERC165 itself\n', '    _supportedInterfaces[0x36372b07] = true; // ERC20\n', '    _supportedInterfaces[\n', '      this.name.selector ^ this.symbol.selector ^ this.decimals.selector\n', '    ] = true; // ERC20 metadata\n', '    _supportedInterfaces[this.name.selector] = true;\n', '    _supportedInterfaces[this.symbol.selector] = true;\n', '    _supportedInterfaces[this.decimals.selector] = true;\n', '  }\n', '\n', '  function decimals() public pure override returns (uint8) {\n', '    return 6;\n', '  }\n', '\n', '  /**\n', '   * @dev Mint tokens to an address. Can only be called by the recognized minter.\n', '   *\n', '   * @param _to The address to mint to\n', '   * @param _amount The amount (in dollarydoos) to mint\n', '   */\n', '  function mint(address _to, uint256 _amount) external {\n', '    require(msg.sender == minter);\n', '    _mint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Mint tokens to a set of addresses. Can only be called by the recognized\n', '   * minter.\n', '   *\n', '   * @param _mints The set of {to: address, amount: uint256} pairs\n', '   */\n', '  function batchMint(MintArgs[] calldata _mints) external {\n', '    require(msg.sender == minter);\n', '    for (uint256 i = 0; i < _mints.length; i++) {\n', '      _mint(_mints[i].to, _mints[i].amount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows a token holder to redeem tokens to real HNS in a Namebase account.\n', '   * A particular redeem token can only be used once.\n', '   *\n', '   * @param _amount the number of dollarydoos to redeem\n', '   * @param _redeemToken 32 bytes to identify the redemption, provided by Namebase\n', '   */\n', '  function redeem(uint256 _amount, bytes32 _redeemToken) external {\n', '    require(isRedeemTokenUsed[_redeemToken] == false);\n', '    isRedeemTokenUsed[_redeemToken] = true;\n', '    _burn(msg.sender, _amount);\n', '    emit TokensRedeemed(_redeemToken, msg.sender, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if this contract implements the interface defined by\n', '   * `interfaceId`. See the corresponding\n', '   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '   * to learn more about how these ids are created.\n', '   *\n', '   * This function call must use less than 30 000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\n', '    return _supportedInterfaces[_interfaceId];\n', '  }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  }\n', '}']