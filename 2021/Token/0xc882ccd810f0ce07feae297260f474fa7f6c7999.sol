['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', '// SPDX-License-Identifier: TBD\n', 'pragma solidity 0.7.4;\n', '\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function allowances(address _owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);    \n', '}\n', '\n', 'interface ICoinSwapGovERC20 is IERC20 {\n', '    function owner() external view returns (address payable);\n', '    function nonces(address account) external view returns (uint);\n', '    function permit(address _from, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function DOMAIN_TYPEHASH() external pure returns (bytes32);\n', '    function PERMIT_TYPEHASH() external view returns (bytes32);\n', '    function DELEGATION_TYPEHASH() external pure returns (bytes32);\n', '    function renounceOwner() external;\n', '    function setNewOwner(address payable newOwner) external;\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', "        require(c >= a, 'SafeMath: addition overflow');\n", '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        return sub(a, b, 'SafeMath: subtraction overflow');\n", '    }\n', '    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract CoinSwapGovERC20 is ICoinSwapGovERC20 {\n', '    using SafeMath for uint256;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    mapping(address => uint256) public override balanceOf;\n', '    mapping(address => mapping(address => uint256)) public override allowances;\n', '    address payable public override owner;\n', '    uint256 public override totalSupply;\n', "    string public constant override name = 'CoinSwap Governance';\n", "    string public constant override symbol= 'CSWP';\n", '    uint8 public constant override decimals = 18;\n', "    bytes32 public constant override DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\n", '    bytes32 public constant override PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant override DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '    bytes32 public override DOMAIN_SEPARATOR;\n', '    mapping (address => uint) public override nonces;\n', '\n', '    constructor() {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        DOMAIN_SEPARATOR = keccak256(\n', "            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)),keccak256(bytes('1')), chainId, address(this))\n", '        );\n', '    }\n', '\n', '    function renounceOwner() public override {\n', "        require(owner == msg.sender, 'ERC20: requires owner');\n", '        owner = address(0);\n', '        emit OwnershipTransferred(owner, address(0));\n', '    }\n', '    function setNewOwner(address payable newOwner) public override {\n', "        require((owner == msg.sender) && (newOwner != address(0)), 'ERC20: requires owner or new owner is zero');\n", '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', "        _approve(sender, msg.sender, allowances[sender][msg.sender].sub(amount, 'ERC20: transfer amount > allowance'));\n", '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender,\n', "            allowances[msg.sender][spender].sub(subtractedValue, 'ERC20: decreased allowance below zero'));\n", '        return true;\n', '    }\n', '    function _transfer(address sender,address recipient,uint256 amount) internal {\n', "        require((sender != address(0)) && (recipient != address(0)), 'ERC20: transfer with zero address');\n", "        balanceOf[sender] = balanceOf[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\n", '        balanceOf[recipient] = balanceOf[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal {\n', "        require(account != address(0), 'ERC20: mint to zero address');\n", '        totalSupply = totalSupply.add(amount);\n', '        balanceOf[account] = balanceOf[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal {\n', "        require(account != address(0), 'ERC20: burn from the zero address');\n", "        balanceOf[account] = balanceOf[account].sub(amount, 'ERC20: burn amount exceeds balance');\n", '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address _owner,address spender,uint256 amount) internal {\n', "        require((_owner != address(0)) &&( spender != address(0)), 'ERC20: approve with zero address');\n", '        allowances[_owner][spender] = amount;\n', '        emit Approval(_owner, spender, amount);\n', '    }\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', "        _approve(account,msg.sender,allowances[account][msg.sender].sub(amount, 'ERC20: burn amount exceeds allowance'));\n", '    }\n', '\n', '    function permit(address sender, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n', "        require(deadline >= block.timestamp, 'ERC20: expired');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[sender]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == sender, 'ERC20: wrong signature');\n", '        _approve(sender, spender, value);\n', '    }\n', '}\n', '\n', 'contract CSWPToken is CoinSwapGovERC20 {\n', '    using SafeMath for uint256;\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    constructor() {owner = tx.origin;}\n', '\n', '    mapping (address => address) internal _delegates;\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint256 votes;\n', '    }\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', '    function mint(address _to, uint256 _amount) public {\n', "        require(owner == msg.sender, 'ERC20: not owner');\n", '        _mint(_to, _amount);\n', '        _moveDelegates(address(0), _delegates[_to], _amount);\n', '    }\n', '\n', '    function delegates(address delegator) external view returns (address) {\n', '        return _delegates[delegator];\n', '    }\n', '\n', '    function delegate(address delegatee) external {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    function delegateBySig(address delegatee,uint nonce,uint expiry,uint8 v,bytes32 r, bytes32 s) external {\n', '        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH,delegatee,nonce,expiry));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01",DOMAIN_SEPARATOR,structHash));\n', '        address deletator = ecrecover(digest, v, r, s);\n', '        require(deletator != address(0), "CSWP: invalid signature");\n', '        require(nonce == nonces[deletator]++, "CSWP: invalid nonce");\n', '        require(block.timestamp <= expiry, "CSWP: signature expired");\n', '        return _delegate(deletator, delegatee);\n', '    }\n', '\n', '    function getCurrentVotes(address account) external view returns (uint256) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {\n', '        require(blockNumber < block.number, "CSWP: too early");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) { return 0; }\n', '\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; \n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = _delegates[delegator];\n', '        uint256 delegatorBalance = balanceOf[delegator]; \n', '        _delegates[delegator] = delegatee;\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint256 srcRepNew = srcRepOld.sub(amount);\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint256 dstRepNew = dstRepOld.add(amount);\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\n', '        uint blockNumber = block.number;\n', "        require(blockNumber<2**32, 'block.number overflow');\n", '        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[delegatee][nCheckpoints] = Checkpoint(uint32(blockNumber), newVotes);\n', '            numCheckpoints[delegatee] = nCheckpoints + 1;\n', '        }\n', '        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '}']