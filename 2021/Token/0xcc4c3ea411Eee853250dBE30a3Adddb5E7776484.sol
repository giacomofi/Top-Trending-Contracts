['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-29\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract ERC20 {\n', '  function transferFrom( address from, address to, uint value) returns (bool ok);\n', '}\n', '\n', '\n', 'contract Multiplexer {\n', '\n', '\tfunction sendEth(address[] _to, uint256[] _value) payable returns (bool _success) {\n', '\t\t// input validation\n', '\t\tassert(_to.length == _value.length);\n', '\t\tassert(_to.length <= 255);\n', '\t\t// count values for refunding sender\n', '\t\tuint256 beforeValue = msg.value;\n', '\t\tuint256 afterValue = 0;\n', '\t\t// loop through to addresses and send value\n', '\t\tfor (uint8 i = 0; i < _to.length; i++) {\n', '\t\t\tafterValue = afterValue + _value[i];\n', '\t\t\tassert(_to[i].send(_value[i]));\n', '\t\t}\n', '\t\t// send back remaining value to sender\n', '\t\tuint256 remainingValue = beforeValue - afterValue;\n', '\t\tif (remainingValue > 0) {\n', '\t\t\tassert(msg.sender.send(remainingValue));\n', '\t\t}\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction sendErc20(address _tokenAddress, address[] _to, uint256[] _value) returns (bool _success) {\n', '\t\t// input validation\n', '\t\tassert(_to.length == _value.length);\n', '\t\tassert(_to.length <= 255);\n', '\t\t// use the erc20 abi\n', '\t\tERC20 token = ERC20(_tokenAddress);\n', '\t\t// loop through to addresses and send value\n', '\t\tfor (uint8 i = 0; i < _to.length; i++) {\n', '\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '}']