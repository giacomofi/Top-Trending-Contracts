['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}\n', '\n', 'contract IronManToken is IERC20 {\n', '\n', '    string public constant name = "IronManToken";\n', '    string public constant symbol = "IMT";\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 _totalSupply;\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '   constructor(uint256 total) public {\n', '    _totalSupply = total;\n', '    balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '    return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _tokenowner) public override view returns (uint256) {\n', '        return balances[_tokenowner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public override returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public override returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public override view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _owner, address _to, uint256 _value) public override returns (bool) {\n', '        require(_value <= balances[_owner]);\n', '        require(_value <= allowed[_owner][msg.sender]);\n', '\n', '        balances[_owner] = balances[_owner].sub(_value);\n', '        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_owner, _to, _value);\n', '        return true;\n', '    }\n', '}']