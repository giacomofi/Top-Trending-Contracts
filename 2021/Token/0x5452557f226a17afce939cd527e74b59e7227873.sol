['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overloaded;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract MyToken is ERC20 {\n', '  uint256 constant INIT_SUPPLY_POC = 1000000000;\n', '  uint256 constant MAX_MINT_POC = 2000000000;\n', '    \n', ' address constant _approver1 = 0x2C76A35B071b9299b538c93686903c8Ab9F06e5e;\n', ' address constant _approver2 = 0x65d6D8353566Be8866a03B41d21173C647DBa0dD;\n', ' address constant _approver3 = 0x116EE03B66e0AbF4098B86f8C666cbc919fb7A8D;\n', ' address constant _approver4 = 0xb03aB8c62b6119248720f3E0B1E1404493a25980;\n', '  \n', '//  address constant _approver1 = 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db;\n', '//  address constant _approver2 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\n', '//  address constant _approver3 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\n', '//  address constant _approver4 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\n', '  \n', '  address _owner; \n', '  \n', '  uint8 private _seconds_per_block;\n', '  uint256 private _schedule_term;\n', '  uint256 private _mint_term;\n', '  \n', '  uint256 private _addedSupplyToken;\n', '  uint256 private _listingDate;\n', '  uint256 private _burnApproved1 = 0;\n', '  uint256 private _burnApproved2 = 0;\n', '  uint256 private _burnApproved3 = 0;\n', '  uint256 private _burnApproved4 = 0;\n', '  uint256 private _mintApproved1 = 0;\n', '  uint256 private _mintApproved2 = 0;\n', '  uint256 private _mintApproved3 = 0;\n', '  uint256 private _mintApproved4 = 0;\n', '  uint256 private _rescheduleApproved1 = 0;\n', '  uint256 private _rescheduleApproved2 = 0;\n', '  uint256 private _rescheduleApproved3 = 0;\n', '  uint256 private _rescheduleApproved4 = 0;\n', '  \n', '  struct Schedule{\n', '    uint256 day;\n', '    uint256 POC;\n', '  }\n', '  Schedule[] private schedule;\n', '  \n', '  constructor() ERC20("PocketArena", "POC") {\n', '    _seconds_per_block = 15;\n', '    _schedule_term = (60 * 60 * 24 * 30) / _seconds_per_block;  // during 30 days\n', '    _mint_term = (60 * 60 * 24 * 730) / _seconds_per_block;     // during 730 days\n', '//    _schedule_term = 30 / _seconds_per_block;  // during 30 seconds\n', '//    _mint_term = 730 / _seconds_per_block;     // during 730 seconds\n', '       \n', '    _listingDate = block.number;\n', '    _owner = msg.sender;\n', '    _mint(_owner, (INIT_SUPPLY_POC * (10 ** uint256(decimals()))));\n', '    _addedSupplyToken = 0;  \n', '    \n', '    schedule.push(Schedule(_listingDate, 501666667));  \n', '    schedule.push(Schedule((_listingDate + _schedule_term), 503333334));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 2)), 505000001));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 3)), 506666668));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 4)), 508333335));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 5)), 510000002));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 6)), 526666669));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 7)), 528333336));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 8)), 552500003));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 9)), 554166670));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 10)), 578333337));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 11)), 580000004));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 12)), 754166671));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 13)), 755833338));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 14)), 780000005));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 15)), 781666672));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 16)), 805833339));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 17)), 807500006));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 18)), 831666673));  \n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 19)), 1666667));\n', '    schedule.push(Schedule((_listingDate + (_schedule_term * 119)), INIT_SUPPLY_POC));\n', '  }\n', '  function scheduleGet(uint16 round) external view returns (Schedule memory) {\n', '    return schedule[round];\n', '  }\n', '  function lockedPOC(uint256 currentDate) public view returns (uint256) {\n', '    if (schedule[(schedule.length - 1)].day <= currentDate) {\n', '      //return (INIT_SUPPLY_POC - schedule[(schedule.length - 1)].POC);\n', '      return 0;\n', '    }\n', '    else if (schedule[(schedule.length - 2)].day <= currentDate) { \n', '      uint dateDiff = ((currentDate - schedule[(schedule.length - 2)].day) / _schedule_term);\n', '      uint256 newUnlockPOC = (schedule[(schedule.length - 2)].POC * (dateDiff + 1));\n', '      return (INIT_SUPPLY_POC - (schedule[(schedule.length - 3)].POC + newUnlockPOC));\n', '    }\n', '    else {\n', '      for (uint i=(schedule.length - 1); i>0; i--) {\n', '        if (schedule[i-1].day <= currentDate) {\n', '          return (INIT_SUPPLY_POC - schedule[i-1].POC);\n', '        }\n', '      }\n', '      return INIT_SUPPLY_POC;\n', '    }\n', '  }\n', '  function transferable() public view returns (uint256) {\n', '    uint256 locked = (lockedPOC(block.number) * (10 ** uint256(decimals())));\n', '    if (balanceOf(_owner) > locked) {\n', '\t  return (balanceOf(_owner) - locked);\n', '    }\n', '    else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  modifier listingDT() {\n', '    require(_listingDate <= block.number, "listing is not yet");\n', '    _;\n', '  }\n', '  modifier onlyApprover() {\n', '    require((msg.sender == _approver1 || msg.sender == _approver2 || msg.sender == _approver3 || msg.sender == _approver4), "only approver is possible");\n', '    _;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == _owner, "only owner is possible");\n', '    _;\n', '  }\n', '  modifier unlocking(uint256 amount) {\n', '    if (msg.sender != _owner){\n', '       _;\n', '    }\n', '    else {\n', '      require(transferable() >= amount, "lack of transferable token");\n', '      _;\n', '    }\n', '  }\n', '  \n', '  function burn_approve_up(uint256 approveToken) onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _burnApproved1 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _burnApproved2 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _burnApproved3 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _burnApproved4 = approveToken;\n', '    }\n', '    return true;\n', '  }\n', '  function burn_approve_down() onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _burnApproved1 = 0;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _burnApproved2 = 0;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _burnApproved3 = 0;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _burnApproved4 = 0;\n', '    }\n', '    return true;\n', '  }\n', '  function burn(uint256 burnToken) listingDT onlyOwner external returns (bool) {\n', '    require(_addedSupplyToken >= burnToken, "you can burn newly added token only");\n', '    require(balanceOf(msg.sender) >= burnToken, "you can burn in your balance only");\n', '    uint8 sum_approval = 0;\n', '    if (_burnApproved1 > 0) {\n', '      require(_burnApproved1 == burnToken, "you must get the right approval from approver1");\n', '      sum_approval++;\n', '    }\n', '    if (_burnApproved2 > 0) {\n', '      require(_burnApproved2 == burnToken, "you must get the right approval from approver2");\n', '      sum_approval++;\n', '    }\n', '    if (_burnApproved3 > 0) {\n', '      require(_burnApproved3 == burnToken, "you must get the right approval from approver3");\n', '      sum_approval++;\n', '    }\n', '    if (_burnApproved4 > 0) {\n', '      require(_burnApproved4 == burnToken, "you must get the right approval from approver4");\n', '      sum_approval++;\n', '    }\n', '    require((sum_approval >= 2), "you must get the 2 approvals at least");\n', '    _burn(msg.sender, burnToken);\n', '    _addedSupplyToken = (_addedSupplyToken - burnToken);\n', '    _burnApproved1 = 0;\n', '    _burnApproved2 = 0;\n', '    _burnApproved3 = 0;\n', '    _burnApproved4 = 0;\n', '    return true;\n', '  }\n', '  \n', '  function mint_approve_up(uint256 approveToken) onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _mintApproved1 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _mintApproved2 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _mintApproved3 = approveToken;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _mintApproved4 = approveToken;\n', '    }\n', '    return true;\n', '  }\n', '  function mint_approve_down() onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _mintApproved1 = 0;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _mintApproved2 = 0;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _mintApproved3 = 0;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _mintApproved4 = 0;\n', '    }\n', '    return true;\n', '  }\n', '  function mint(uint256 addedToken) listingDT onlyOwner external returns (bool) {\n', '    require((_listingDate + _mint_term) <= block.number, "creating new token is not yet");\n', '    require(MAX_MINT_POC >= (_addedSupplyToken + addedToken), "mint is reached on max");\n', '    uint8 sum_approval = 0;\n', '    if (_mintApproved1 > 0) {\n', '      require(_mintApproved1 == addedToken, "you must get the right approval from approver1");\n', '      sum_approval++;\n', '    }\n', '    if (_mintApproved2 > 0) {\n', '      require(_mintApproved2 == addedToken, "you must get the right approval from approver2");\n', '      sum_approval++;\n', '    }\n', '    if (_mintApproved3 > 0) {\n', '      require(_mintApproved3 == addedToken, "you must get the right approval from approver3");\n', '      sum_approval++;\n', '    }\n', '    if (_mintApproved4 > 0) {\n', '      require(_mintApproved4 == addedToken, "you must get the right approval from approver4");\n', '      sum_approval++;\n', '    }\n', '    require((sum_approval >= 2), "you must get the 2 approvals at least");\n', '    _mint(_owner, addedToken);\n', '    _addedSupplyToken = (_addedSupplyToken + addedToken);\n', '    _mintApproved1 = 0;\n', '    _mintApproved2 = 0;\n', '    _mintApproved3 = 0;\n', '    _mintApproved4 = 0;\n', '    return true;\n', '  }\n', '  \n', '  function reschedule_approve_up(uint256 approveBlock) onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _rescheduleApproved1 = approveBlock;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _rescheduleApproved2 = approveBlock;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _rescheduleApproved3 = approveBlock;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _rescheduleApproved4 = approveBlock;\n', '    }\n', '    return true;\n', '  }\n', '  function reschedule_approve_down() onlyApprover external returns (bool) {\n', '    if (msg.sender == _approver1) {\n', '      _rescheduleApproved1 = 0;\n', '    }\n', '    else if (msg.sender == _approver2) {\n', '      _rescheduleApproved2 = 0;\n', '    }\n', '    else if (msg.sender == _approver3) {\n', '      _rescheduleApproved3 = 0;\n', '    }\n', '    else if (msg.sender == _approver4) {\n', '      _rescheduleApproved4 = 0;\n', '    }\n', '    return true;\n', '  }\n', '  function reschedule(uint256 term_hour_changeDate, uint8 new_seconds_per_block) onlyOwner external {\n', '    uint8 sum_approval = 0;\n', '    if (_rescheduleApproved1 > 0) {\n', '      require(_rescheduleApproved1 == new_seconds_per_block, "you must get the right approval from approver1");\n', '      sum_approval++;\n', '    }\n', '    if (_rescheduleApproved2 > 0) {\n', '      require(_rescheduleApproved2 == new_seconds_per_block, "you must get the right approval from approver2");\n', '      sum_approval++;\n', '    }\n', '    if (_rescheduleApproved3 > 0) {\n', '      require(_rescheduleApproved3 == new_seconds_per_block, "you must get the right approval from approver3");\n', '      sum_approval++;\n', '    }\n', '    if (_rescheduleApproved4 > 0) {\n', '      require(_rescheduleApproved4 == new_seconds_per_block, "you must get the right approval from approver4");\n', '      sum_approval++;\n', '    }\n', '    require((sum_approval >= 2), "you must get the 2 approvals at least");\n', '    // changeDate means the date(block.number) of when ETH2.0 chagnes the rule to 6s\n', '    uint256 changeDate = block.number;\n', '    if (term_hour_changeDate > 0) {\n', '      changeDate = changeDate - (term_hour_changeDate * 60 * 60 / new_seconds_per_block);\n', '    }\n', "    // recalculate some schedules only which it's not used(reached) yet\n", '    uint256 recalculate_target;\n', '    for (uint i=(schedule.length - 1); i>0; i--) {\n', '      if (changeDate <= schedule[i-1].day) {\n', '        recalculate_target = (schedule[i-1].day - changeDate) * _seconds_per_block;\n', '        schedule[i-1].day = changeDate + (recalculate_target / new_seconds_per_block);\n', '      } \n', '      else {\n', '        break;\n', '      }\n', '    }\n', '    _seconds_per_block = new_seconds_per_block;\n', '  }\n', '  \n', '    function approve_clear(uint8 target) onlyOwner external returns (bool) {\n', '      if (target == 1) {\n', '        _burnApproved1 = 0;\n', '        _burnApproved2 = 0;\n', '        _burnApproved3 = 0;\n', '        _burnApproved4 = 0;\n', '        return true;\n', '      }\n', '      else if (target == 2) {\n', '        _mintApproved1 = 0;\n', '        _mintApproved2 = 0;\n', '        _mintApproved3 = 0;\n', '        _mintApproved4 = 0;\n', '        return true;\n', '      }\n', '      else if (target == 3) {\n', '        _rescheduleApproved1 = 0;\n', '        _rescheduleApproved2 = 0;\n', '        _rescheduleApproved3 = 0;\n', '        _rescheduleApproved4 = 0;\n', '        return true;\n', '      }\n', '      else {\n', '       return false;   \n', '      }\n', '  }\n', '\n', '  function transfer(address recipient, uint256 amount) listingDT unlocking(amount) public override returns (bool) {\n', '    _transfer(_msgSender(), recipient, amount);\n', '    return true;\n', '  }\n', '  function transferFrom(address sender, address recipient, uint256 amount) listingDT public virtual override returns (bool) {\n', '    if (msg.sender == _owner){\n', '      require(transferable() >= amount, "lack of transferable token");\n', '    }\n', '    if (super.transferFrom(sender, recipient, amount)) {\n', '      return true;\n', '    }\n', '    else \n', '    {\n', '      return false;\n', '    }\n', '  }\n', '  \n', '}']