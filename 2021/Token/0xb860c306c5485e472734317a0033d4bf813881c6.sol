['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-09\n', '*/\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '// ERC20 declare\n', 'contract IERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '// SafeERC20\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '// Ownable\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrAdmin() {\n', '    require(msg.sender != address(0) && (msg.sender == owner || msg.sender == admin));\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    require(newOwner != owner);\n', '    require(newOwner != admin);\n', '\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function setAdmin(address newAdmin) onlyOwner public {\n', '    require(admin != newAdmin);\n', '    require(owner != newAdmin);\n', '\n', '    admin = newAdmin;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '// ERC20 functions\n', 'contract ERC20 is IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping(address => bool) internal locks;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    \n', '    uint256 public Max_supply = 500000000 * (10 ** 8);\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '        require(locks[msg.sender] == false);\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    \n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        require(Max_supply > _totalSupply);\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '    \n', '    \n', '    function burn(address from, uint256 value) public {\n', '        _burn(from, value);\n', '    }\n', '    \n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        \n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '    \n', '\n', '    function lock(address _owner) public onlyOwner returns (bool) {\n', '        require(locks[_owner] == false);\n', '        locks[_owner] = true;\n', '        return true;\n', '    }\n', '\n', '    function unlock(address _owner) public onlyOwner returns (bool) {\n', '        require(locks[_owner] == true);\n', '        locks[_owner] = false;\n', '        return true;\n', '    }\n', '\n', '    function showLockState(address _owner) public view returns (bool) {\n', '        return locks[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '// Pause, Mint base\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', '\n', '// ERC20Detailed\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '// Math\n', 'library Math {\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '// SafeMath\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a); // overflow check\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '// Pause part\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '\n', '// Snapshot part\n', 'library Arrays {\n', '\n', '    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n', '        if (array.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 low = 0;\n', '        uint256 high = array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            if (array[mid] > element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '\n', '        if (low > 0 && array[low - 1] == element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '\n', '        uint256 _value; \n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Snapshot is ERC20 {\n', '    using SafeMath for uint256;\n', '    using Arrays for uint256[];\n', '    using Counters for Counters.Counter;\n', '\n', '\n', '    struct Snapshots {\n', '        uint256[] ids;\n', '        uint256[] values;\n', '    }\n', '\n', '    mapping (address => Snapshots) private _accountBalanceSnapshots;\n', '    Snapshots private _totalSupplySnaphots;\n', '\n', '\n', '    Counters.Counter private _currentSnapshotId;\n', '\n', '    event Snapshot(uint256 id);\n', '\n', '\n', '    function snapshot() public returns (uint256) {\n', '        _currentSnapshotId.increment();\n', '\n', '        uint256 currentId = _currentSnapshotId.current();\n', '        emit Snapshot(currentId);\n', '        return currentId;\n', '    }\n', '\n', '    function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n', '        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n', '\n', '        return snapshotted ? value : balanceOf(account);\n', '    }\n', '\n', '    function totalSupplyAt(uint256 snapshotId) public view returns(uint256) {\n', '        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnaphots);\n', '\n', '        return snapshotted ? value : totalSupply();\n', '    }\n', '\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        _updateAccountSnapshot(from);\n', '        _updateAccountSnapshot(to);\n', '\n', '        super._transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        _updateAccountSnapshot(account);\n', '        _updateTotalSupplySnapshot();\n', '\n', '        super._mint(account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '        _updateAccountSnapshot(account);\n', '        _updateTotalSupplySnapshot();\n', '\n', '        super._burn(account, value);\n', '    }\n', '\n', '\n', '    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n', '        private view returns (bool, uint256)\n', '    {\n', '        require(snapshotId > 0);\n', '        require(snapshotId <= _currentSnapshotId.current());\n', '\n', '        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n', '\n', '        if (index == snapshots.ids.length) {\n', '            return (false, 0);\n', '        } else {\n', '            return (true, snapshots.values[index]);\n', '        }\n', '    }\n', '\n', '    function _updateAccountSnapshot(address account) private {\n', '        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n', '    }\n', '\n', '    function _updateTotalSupplySnapshot() private {\n', '        _updateSnapshot(_totalSupplySnaphots, totalSupply());\n', '    }\n', '\n', '    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n', '        uint256 currentId = _currentSnapshotId.current();\n', '        if (_lastSnapshotId(snapshots.ids) < currentId) {\n', '            snapshots.ids.push(currentId);\n', '            snapshots.values.push(currentValue);\n', '        }\n', '    }\n', '\n', '    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n', '        if (ids.length == 0) {\n', '            return 0;\n', '        } else {\n', '            return ids[ids.length - 1];\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '// Mintable part\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '// Token detailed\n', 'contract VERA is ERC20, ERC20Detailed, ERC20Snapshot, ERC20Pausable, ERC20Mintable {\n', '    \n', '    string public constant name = "VERA";\n', '    string public constant symbol = "VERA";\n', '    \n', '// If you change DECIMALS must fix Max_supply\n', '    uint8 public constant DECIMALS = 8;\n', '    uint256 public constant INITIAL_SUPPLY = 0 * (10 ** uint256(DECIMALS));\n', '\n', '    constructor () public ERC20Detailed(name, symbol, DECIMALS) {\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '  \n', '}']