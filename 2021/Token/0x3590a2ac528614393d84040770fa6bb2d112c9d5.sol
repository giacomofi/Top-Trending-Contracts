['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// File: browser/NyanFundInterface.sol\n', '\n', 'pragma solidity ^0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface NFund {\n', '    function approveSpendERC20(address, uint256) external;\n', '    \n', '    function approveSpendETH(address, uint256) external;\n', '    \n', '    function newVotingRound() external;\n', '    \n', '    function setVotingAddress(address) external;\n', '    \n', '    function setConnectorAddress(address) external;\n', '    \n', '    function setNewFundAddress(address) external;\n', '    \n', '    function setNyanAddress(address) external;\n', '    \n', '    function setCatnipAddress(address) external;\n', '    \n', '    function setDNyanAddress(address) external;\n', '    \n', '    function setBalanceLimit(uint256) external;\n', '    \n', '    function sendToNewContract(address) external;\n', '}\n', '\n', 'interface NVoting {\n', '    function setConnector(address) external;\n', '    \n', '    function setFundAddress(address) external;\n', '    \n', '    function setRewardsContract(address) external;\n', '    \n', '    function setIsRewardingCatnip(bool) external;\n', '    \n', '    function setVotingPeriodBlockLength(uint256) external;\n', '    \n', '    function setNyanAddress(address) external;\n', '    \n', '    function setCatnipAddress(address) external;\n', '    \n', '    function setDNyanAddress(address) external;\n', '    \n', '    function distributeFunds(address, uint256) external;\n', '    \n', '    function burnCatnip() external;\n', '}\n', '\n', 'interface NConnector {\n', '    function executeBid(\n', '        string calldata, \n', '        string calldata, \n', '        address[] calldata , \n', '        uint256[] calldata, \n', '        string[] calldata, \n', '        bytes[] calldata) external;\n', '}\n', '\n', 'interface NyanV2 {\n', '    \n', '    function swapNyanV1(uint256) external;\n', '    \n', '    function stakeNyanV2LP(uint256) external;\n', '    \n', '    function unstakeNyanV2LP(uint256) external;\n', '    \n', '    function stakeDNyanV2LP(uint256) external;\n', '    \n', '    function unstakeDNyanV2LP(uint256) external;\n', '    \n', '    function addNyanAndETH(uint256) payable external;\n', '    \n', '    function claimETHLP() external;\n', '    \n', '    function initializeV2ETHPool() external;\n', '}\n', '\n', '\n', '// File: browser/UniswapV2Interface.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'interface IUniswapV2Callee {\n', '    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n', '}\n', '\n', 'interface IUniswapV2ERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '// File: browser/ERC20Interface.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'contract ERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256) {}\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256) {}\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool) {}\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256) {}\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool) {}\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {}\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '// File: browser/Connector.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '\n', '\n', '\n', '\n', 'contract Proxiable {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '\n', '    function updateCodeAddress(address newAddress) internal {\n', '        require(\n', '            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\n', '            "Not compatible"\n', '        );\n', '        assembly { // solium-disable-line\n', '            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\n', '        }\n', '    }\n', '    function proxiableUUID() public pure returns (bytes32) {\n', '        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\n', '    }\n', '}\n', '\n', 'contract LibraryLockDataLayout {\n', '  bool public initialized = false;\n', '}\n', '\n', 'contract LibraryLock is LibraryLockDataLayout {\n', '    // Ensures no one can manipulate the Logic Contract once it is deployed.\n', '    // PARITY WALLET HACK PREVENTION\n', '\n', '    modifier delegatedOnly() {\n', '        require(initialized == true, "The library is locked. No direct \'call\' is allowed");\n', '        _;\n', '    }\n', '    function initialize() internal {\n', '        initialized = true;\n', '    }\n', '}\n', '\n', 'contract DataLayout is LibraryLock {\n', '    struct bid {\n', '        address bidder;\n', '        uint256 votes;\n', '        address[] addresses;\n', '        uint256[] integers;\n', '        string[] strings;\n', '        bytes[] bytesArr;\n', '    }\n', '    \n', '    address public votingAddress;\n', '    address public fundAddress;\n', '    address public nyanV2;\n', '    address public owner;\n', '    address public uniswapRouterAddress;\n', '    IUniswapV2Router02 public uniswapRouter;\n', '    \n', '    \n', '    address[] public tokenList;\n', '    mapping(address => bool) public whitelist;\n', '    \n', '    \n', '    modifier _onlyOwner() {\n', '        require((msg.sender == votingAddress) || (msg.sender == owner)  || (msg.sender == address(this)));\n', '        _;\n', '    }\n', '\n', '    address public easyBid;\n', '    address public registry;\n', '    address public contractManager;\n', '    uint256[] public fundHistory;\n', '    address[] public historyManager;\n', '    string[] public historyReason;\n', '    address[] public historyRecipient;\n', '    \n', '}\n', '\n', 'contract Connector is DataLayout, Proxiable  {\n', '\n', '    function connectorConstructor(address _votingAddress, address _nyan2) public {\n', '        require(!initialized, "Contract is already initialized");\n', '        owner = msg.sender;\n', '        votingAddress = _votingAddress;\n', '        nyanV2 = _nyan2;\n', '        initialize();\n', '    }\n', '    \n', '    receive() external payable {\n', '        \n', '    }\n', '    \n', '    function relinquishOwnership()public _onlyOwner delegatedOnly {\n', '        require(contractManager != address(0));\n', '        owner = address(0);\n', '    } \n', '    \n', '    /** @notice Updates the logic contract.\n', '      * @param newCode  Address of the new logic contract.\n', '      */\n', '    function updateCode(address newCode) public delegatedOnly  {\n', '        if (owner == address(0)) {\n', '            require(msg.sender == contractManager);\n', '        } else {\n', '            require(msg.sender == owner);\n', '        }\n', '        updateCodeAddress(newCode);\n', '        \n', '    }\n', '    \n', '    function setVotingAddress(address _addr) public _onlyOwner delegatedOnly {\n', '        votingAddress = _addr;\n', '    }\n', '    \n', '    function setRegistry(address _registry) public _onlyOwner delegatedOnly {\n', '        registry = _registry;\n', '    }\n', '    \n', '    function setContractManager(address _contract) public _onlyOwner delegatedOnly {\n', '        contractManager = _contract;\n', '    }\n', '    \n', '    function setOwner(address _owner) public _onlyOwner delegatedOnly {\n', '        owner = _owner;\n', '    }\n', '    \n', '    function transferToFund() public delegatedOnly {\n', '        for (uint256 i = 0; i < tokenList.length; i++) {\n', '            ERC20 erc20 = ERC20(tokenList[0]);\n', '            uint256 balance = erc20.balanceOf(address(this));\n', '            erc20.transfer(fundAddress, balance);\n', '        }\n', '    }\n', '    \n', '    function fundLog(address manager, string memory reason, address recipient) public delegatedOnly payable {\n', '        //must be from registered contract\n', '        Registry(registry).checkRegistry(msg.sender);\n', '        fundHistory.push(fundAddress.balance);\n', '        historyManager.push(manager);\n', '        historyReason.push(reason);\n', '        historyRecipient.push(recipient);\n', '    }\n', '    \n', '    function getFundHistory() public view returns(uint256[] memory, address[] memory, string[] memory, address[] memory) {\n', '        return (\n', '            fundHistory,\n', '            historyManager,\n', '            historyReason,\n', '            historyRecipient\n', '        );\n', '    }\n', '    \n', '    function getFundETH(uint256 amount) public delegatedOnly {\n', '        NFund fund = NFund(fundAddress);\n', '        require(msg.sender == registry);\n', '        fund.approveSpendETH(registry, amount);\n', '    }\n', '    \n', '    function returnFundETH() public payable delegatedOnly {\n', '        require(msg.sender == registry);\n', '        fundAddress.call{value: msg.value}("");\n', '    }\n', '     \n', '    function withdrawDeposit(uint256 amount, address depositor) public delegatedOnly {\n', '        NFund fund = NFund(fundAddress);\n', '        require(msg.sender == registry);\n', '        fund.approveSpendETH(depositor, amount);\n', '    }\n', '     \n', '    function setEasyBidAddress(address _easyBid) public _onlyOwner delegatedOnly {\n', '        easyBid = _easyBid;\n', '    }\n', '\n', '    function getEasyBidETH(uint256 amount) public delegatedOnly {\n', '        NFund fund = NFund(fundAddress);\n', '        require(msg.sender == easyBid);\n', '        fund.approveSpendETH(easyBid, amount);\n', '\n', '    }\n', '\n', '    function sendMISCETH(address _address, uint256 _amount, string memory reason) public delegatedOnly {\n', '        NFund fund = NFund(fundAddress);\n', '        require(msg.sender == owner);\n', '        fund.approveSpendETH(_address, _amount);\n', '        fundLog(owner, reason, owner);\n', '    }\n', '\n', '}\n', '\n', 'interface Registry {\n', '    function checkRegistry(address _contract) external view returns(bool);\n', '}']