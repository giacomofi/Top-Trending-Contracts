['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-14\n', '*/\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/Stake/ClusterRegistry.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract ClusterRegistry is Initializable, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant UINT256_MAX = ~uint256(0);\n', '\n', '    struct Cluster {\n', '        uint256 commission;\n', '        address rewardAddress;\n', '        address clientKey;\n', '        bytes32 networkId; // keccak256("ETH") // token ticker for anyother chain in place of ETH\n', '        Status status;\n', '    }\n', '\n', '    struct Lock {\n', '        uint256 unlockBlock;\n', '        uint256 iValue;\n', '    }\n', '\n', '    mapping(address => Cluster) clusters;\n', '\n', '    mapping(bytes32 => Lock) public locks;\n', '    mapping(bytes32 => uint256) public lockWaitTime;\n', '    bytes32 constant COMMISSION_LOCK_SELECTOR = keccak256("COMMISSION_LOCK");\n', '    bytes32 constant SWITCH_NETWORK_LOCK_SELECTOR = keccak256("SWITCH_NETWORK_LOCK");\n', '    bytes32 constant UNREGISTER_LOCK_SELECTOR = keccak256("UNREGISTER_LOCK");\n', '\n', '    enum Status{NOT_REGISTERED, REGISTERED}\n', '\n', '    mapping(address => address) public clientKeys;\n', '\n', '    event ClusterRegistered(\n', '        address cluster, \n', '        bytes32 networkId, \n', '        uint256 commission, \n', '        address rewardAddress, \n', '        address clientKey\n', '    );\n', '    event CommissionUpdateRequested(address cluster, uint256 commissionAfterUpdate, uint256 effectiveBlock);\n', '    event CommissionUpdated(address cluster, uint256 updatedCommission, uint256 updatedAt);\n', '    event RewardAddressUpdated(address cluster, address updatedRewardAddress);\n', '    event NetworkSwitchRequested(address cluster, bytes32 networkId, uint256 effectiveBlock);\n', '    event NetworkSwitched(address cluster, bytes32 networkId, uint256 updatedAt);\n', '    event ClientKeyUpdated(address cluster, address clientKey);\n', '    event ClusterUnregisterRequested(address cluster, uint256 effectiveBlock);\n', '    event ClusterUnregistered(address cluster, uint256 updatedAt);\n', '    event LockTimeUpdated(bytes32 selector, uint256 prevLockTime, uint256 updatedLockTime);\n', '\n', '    function initialize(bytes32[] memory _selectors, uint256[] memory _lockWaitTimes, address _owner) \n', '        public \n', '        initializer\n', '    {\n', '        require(\n', '            _selectors.length == _lockWaitTimes.length,\n', '            "CR:I-Invalid params"\n', '        );\n', '        for(uint256 i=0; i < _selectors.length; i++) {\n', '            lockWaitTime[_selectors[i]] = _lockWaitTimes[i];\n', '            emit LockTimeUpdated(_selectors[i], 0, _lockWaitTimes[i]);\n', '        }\n', '        super.initialize(_owner);\n', '    }\n', '\n', '    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) public onlyOwner {\n', '        emit LockTimeUpdated(_selector, lockWaitTime[_selector], _updatedWaitTime);\n', '        lockWaitTime[_selector] = _updatedWaitTime; \n', '    }\n', '\n', '    function register(\n', '        bytes32 _networkId, \n', '        uint256 _commission, \n', '        address _rewardAddress, \n', '        address _clientKey\n', '    ) public returns(bool) {\n', "        // This happens only when the data of the cluster is registered or it wasn't registered before\n", '        require(\n', '            !isClusterValid(msg.sender), \n', '            "CR:R-Cluster is already registered"\n', '        );\n', '        require(_commission <= 100, "CR:R-Commission more than 100%");\n', '        require(clientKeys[_clientKey] ==  address(0), "CR:R - Client key is already used");\n', '        clusters[msg.sender].commission = _commission;\n', '        clusters[msg.sender].rewardAddress = _rewardAddress;\n', '        clusters[msg.sender].clientKey = _clientKey;\n', '        clusters[msg.sender].networkId = _networkId;\n', '        clusters[msg.sender].status = Status.REGISTERED;\n', '\n', '        clientKeys[_clientKey] = msg.sender;\n', '        \n', '        emit ClusterRegistered(msg.sender, _networkId, _commission, _rewardAddress, _clientKey);\n', '    }\n', '\n', '    function updateCluster(uint256 _commission, bytes32 _networkId, address _rewardAddress, address _clientKey) public {\n', '        if(_networkId != bytes32(0)) {\n', '            switchNetwork(_networkId);\n', '        }\n', '        if(_rewardAddress != address(0)) {\n', '            updateRewardAddress(_rewardAddress);\n', '        }\n', '        if(_clientKey != address(0)) {\n', '            updateClientKey(_clientKey);\n', '        }\n', '        if(_commission != UINT256_MAX) {\n', '            updateCommission(_commission);\n', '        }\n', '    }\n', '\n', '    function updateCommission(uint256 _commission) public {\n', '        require(\n', '            isClusterValid(msg.sender),\n', '            "CR:UCM-Cluster not registered"\n', '        );\n', '        require(_commission <= 100, "CR:UCM-Commission more than 100%");\n', '        bytes32 lockId = keccak256(abi.encodePacked(COMMISSION_LOCK_SELECTOR, msg.sender));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        require(\n', '            unlockBlock < block.number, \n', '            "CR:UCM-Commission update in progress"\n', '        );\n', '        if(unlockBlock != 0) {\n', '            uint256 currentCommission = locks[lockId].iValue;\n', '            clusters[msg.sender].commission = currentCommission;\n', '            emit CommissionUpdated(msg.sender, currentCommission, unlockBlock);\n', '        }\n', '        uint256 updatedUnlockBlock = block.number.add(lockWaitTime[COMMISSION_LOCK_SELECTOR]);\n', '        locks[lockId] = Lock(updatedUnlockBlock, _commission);\n', '        emit CommissionUpdateRequested(msg.sender, _commission, updatedUnlockBlock);\n', '    }\n', '\n', '    function switchNetwork(bytes32 _networkId) public {\n', '        require(\n', '            isClusterValid(msg.sender),\n', '            "CR:SN-Cluster not registered"\n', '        );\n', '        bytes32 lockId = keccak256(abi.encodePacked(SWITCH_NETWORK_LOCK_SELECTOR, msg.sender));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        require(\n', '            unlockBlock < block.number,\n', '            "CR:SN-Network switch in progress"\n', '        );\n', '        if(unlockBlock != 0) {\n', '            bytes32 currentNetwork = bytes32(locks[lockId].iValue);\n', '            clusters[msg.sender].networkId = currentNetwork;\n', '            emit NetworkSwitched(msg.sender, currentNetwork, unlockBlock);\n', '        }\n', '        uint256 updatedUnlockBlock = block.number.add(lockWaitTime[SWITCH_NETWORK_LOCK_SELECTOR]);\n', '        locks[lockId] = Lock(updatedUnlockBlock, uint256(_networkId));\n', '        emit NetworkSwitchRequested(msg.sender, _networkId, updatedUnlockBlock);\n', '    }\n', '\n', '    function updateRewardAddress(address _rewardAddress) public {\n', '        require(\n', '            isClusterValid(msg.sender),\n', '            "CR:URA-Cluster not registered"\n', '        );\n', '        clusters[msg.sender].rewardAddress = _rewardAddress;\n', '        emit RewardAddressUpdated(msg.sender, _rewardAddress);\n', '    }\n', '\n', '    function updateClientKey(address _clientKey) public {\n', '        // TODO: Add delay to client key updates as well\n', '        require(\n', '            isClusterValid(msg.sender),\n', '            "CR:UCK-Cluster not registered"\n', '        );\n', '        require(clientKeys[_clientKey] ==  address(0), "CR:UCK - Client key is already used");\n', '        delete clientKeys[clusters[msg.sender].clientKey];\n', '        clusters[msg.sender].clientKey = _clientKey;\n', '        clientKeys[_clientKey] = msg.sender;\n', '        emit ClientKeyUpdated(msg.sender, _clientKey);\n', '    }\n', '\n', '    function unregister() public {\n', '        require(\n', '            clusters[msg.sender].status != Status.NOT_REGISTERED,\n', '            "CR:UR-Cluster not registered"\n', '        );\n', '        bytes32 lockId = keccak256(abi.encodePacked(UNREGISTER_LOCK_SELECTOR, msg.sender));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        require(\n', '            unlockBlock < block.number,\n', '            "CR:UR-Unregistration already in progress"\n', '        );\n', '        if(unlockBlock != 0) {\n', '            clusters[msg.sender].status = Status.NOT_REGISTERED;\n', '            emit ClusterUnregistered(msg.sender, unlockBlock);\n', '            delete clientKeys[clusters[msg.sender].clientKey];\n', '            delete locks[lockId];\n', '            delete locks[keccak256(abi.encodePacked(COMMISSION_LOCK_SELECTOR, msg.sender))];\n', '            delete locks[keccak256(abi.encodePacked(SWITCH_NETWORK_LOCK_SELECTOR, msg.sender))];\n', '            return;\n', '        }\n', '        uint256 updatedUnlockBlock = block.number.add(lockWaitTime[UNREGISTER_LOCK_SELECTOR]);\n', '        locks[lockId] = Lock(updatedUnlockBlock, 0);\n', '        emit ClusterUnregisterRequested(msg.sender, updatedUnlockBlock);\n', '    }\n', '\n', '    function isClusterValid(address _cluster) public returns(bool) {\n', '        bytes32 lockId = keccak256(abi.encodePacked(UNREGISTER_LOCK_SELECTOR, _cluster));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        if(unlockBlock != 0 && unlockBlock < block.number) {\n', '            clusters[_cluster].status = Status.NOT_REGISTERED;\n', '            delete clientKeys[clusters[_cluster].clientKey];\n', '            emit ClusterUnregistered(_cluster, unlockBlock);\n', '            delete locks[lockId];\n', '            delete locks[keccak256(abi.encodePacked(COMMISSION_LOCK_SELECTOR, msg.sender))];\n', '            delete locks[keccak256(abi.encodePacked(SWITCH_NETWORK_LOCK_SELECTOR, msg.sender))];\n', '            return false;\n', '        }\n', '        return (clusters[_cluster].status != Status.NOT_REGISTERED);    // returns true if the status is registered\n', '    }\n', '\n', '    function getCommission(address _cluster) public returns(uint256) {\n', '        bytes32 lockId = keccak256(abi.encodePacked(COMMISSION_LOCK_SELECTOR, _cluster));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        if(unlockBlock != 0 && unlockBlock < block.number) {\n', '            uint256 currentCommission = locks[lockId].iValue;\n', '            clusters[_cluster].commission = currentCommission;\n', '            emit CommissionUpdated(_cluster, currentCommission, unlockBlock);\n', '            delete locks[lockId];\n', '            return currentCommission;\n', '        }\n', '        return clusters[_cluster].commission;\n', '    }\n', '\n', '    function getNetwork(address _cluster) public returns(bytes32) {\n', '        bytes32 lockId = keccak256(abi.encodePacked(SWITCH_NETWORK_LOCK_SELECTOR, _cluster));\n', '        uint256 unlockBlock = locks[lockId].unlockBlock;\n', '        if(unlockBlock != 0 && unlockBlock < block.number) {\n', '            bytes32 currentNetwork = bytes32(locks[lockId].iValue);\n', '            clusters[msg.sender].networkId = currentNetwork;\n', '            emit NetworkSwitched(msg.sender, currentNetwork, unlockBlock);\n', '            delete locks[lockId];\n', '            return currentNetwork;\n', '        }\n', '        return clusters[_cluster].networkId;\n', '    }\n', '\n', '    function getRewardAddress(address _cluster) public view returns(address) {\n', '        return clusters[_cluster].rewardAddress;\n', '    }\n', '\n', '    function getClientKey(address _cluster) public view returns(address) {\n', '        return clusters[_cluster].clientKey;\n', '    }\n', '\n', '    function getCluster(address _cluster) public returns(\n', '        uint256 commission, \n', '        address rewardAddress, \n', '        address clientKey, \n', '        bytes32 networkId, \n', '        bool isValidCluster\n', '    ) {\n', '        return (\n', '            getCommission(_cluster), \n', '            clusters[_cluster].rewardAddress, \n', '            clusters[_cluster].clientKey, \n', '            getNetwork(_cluster), \n', '            isClusterValid(_cluster)\n', '        );\n', '    }\n', '\n', '    function addClientKeys(address[] memory _clusters) public onlyOwner {\n', '        for(uint256 i=0; i < _clusters.length; i++) {\n', '            address _clientKey = clusters[_clusters[i]].clientKey;\n', '            require(_clientKey != address(0), "CR:ACK - Cluster has invalid client key");\n', '            clientKeys[_clientKey] = _clusters[i];\n', '        }\n', '    }\n', '}']