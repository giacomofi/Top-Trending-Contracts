['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'contract Context {\n', '  \n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '   \n', '    function totalSupply() external view returns (uint256);\n', '\n', '  \n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    \n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferWithoutDeflationary(address recipient, uint256 amount) external returns (bool) ;\n', '   \n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '   \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    \n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '   \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    struct PoolAddress{\n', '        address poolReward;\n', '        bool isActive;\n', '        bool isExist;\n', '\n', '    }\n', '\n', '    struct WhitelistTransfer{\n', '        address waddress;\n', '        bool isActived;\n', '        string name;\n', '\n', '    }\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => WhitelistTransfer) public whitelistTransfer;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    address[] rewardPool;\n', '    mapping(address=>PoolAddress) mapRewardPool;\n', '   \n', '    address internal tokenOwner;\n', '    uint256 internal beginFarming;\n', '\n', '    function addRewardPool(address add) public {\n', '        require(_msgSender() == tokenOwner, "ERC20: Only owner can init");\n', '        require(!mapRewardPool[add].isExist,"Pool already exist");\n', '        mapRewardPool[add].poolReward=add;\n', '        mapRewardPool[add].isActive=true;\n', '        mapRewardPool[add].isExist=true;\n', '        rewardPool.push(add);\n', '    }\n', '\n', '    function addWhitelistTransfer(address add, string memory name) public{\n', '         require(_msgSender() == tokenOwner, "ERC20: Only owner can init");\n', '         whitelistTransfer[add].waddress=add;\n', '        whitelistTransfer[add].isActived=true;\n', '        whitelistTransfer[add].name=name;\n', '\n', '    }\n', '\n', '     function removeWhitelistTransfer(address add) public{\n', '         require(_msgSender() == tokenOwner, "ERC20: Only owner can init");\n', '        \n', '        whitelistTransfer[add].isActived=false;\n', '        \n', '\n', '    }\n', '\n', '\n', '\n', '    function removeRewardPool(address add) public {\n', '        require(_msgSender() == tokenOwner, "ERC20: Only owner can init");\n', '        mapRewardPool[add].isActive=false;\n', '       \n', '        \n', '    }\n', '\n', '    function countActiveRewardPool() public  view returns (uint256){\n', '        uint length=0;\n', '     for(uint i=0;i<rewardPool.length;i++){\n', '         if(mapRewardPool[rewardPool[i]].isActive){\n', '             length++;\n', '         }\n', '     }\n', '      return  length;\n', '    }\n', '   function getRewardPool(uint index) public view  returns (address){\n', '    \n', '        return rewardPool[index];\n', '    }\n', '\n', '   \n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '   \n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        if(whitelistTransfer[recipient].isActived || whitelistTransfer[_msgSender()].isActived){//withdraw from exchange will not effect\n', '            _transferWithoutDeflationary(_msgSender(), recipient, amount);\n', '        }\n', '        else{\n', '            _transfer(_msgSender(), recipient, amount);\n', '        }\n', '        \n', '        return true;\n', '    }\n', ' function transferWithoutDeflationary(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transferWithoutDeflationary(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', ' \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', ' \n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '   \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '   \n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        uint256 burnAmount;\n', '        uint256 rewardAmount;\n', '         uint totalActivePool=countActiveRewardPool();\n', '         if (block.timestamp > beginFarming && totalActivePool>0) {\n', '            (burnAmount,rewardAmount)=_caculateExtractAmount(amount);\n', '\n', '        }     \n', '        //div reward\n', '        if(rewardAmount>0){\n', '           \n', '            uint eachPoolShare=rewardAmount.div(totalActivePool);\n', '            for(uint i=0;i<rewardPool.length;i++){\n', '                 if(mapRewardPool[rewardPool[i]].isActive){\n', '                    _balances[rewardPool[i]] = _balances[rewardPool[i]].add(eachPoolShare);\n', '                    emit Transfer(sender, rewardPool[i], eachPoolShare);\n', '\n', '                 }\n', '                \n', '       \n', '            }\n', '        }\n', '\n', '\n', '        //burn token\n', '        if(burnAmount>0){\n', '          _burn(sender,burnAmount);\n', '            _balances[sender] = _balances[sender].add(burnAmount);//because sender balance already sub in burn\n', '\n', '        }\n', '      \n', '        \n', '        uint256 newAmount=amount-burnAmount-rewardAmount;\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '      \n', '        _balances[recipient] = _balances[recipient].add(newAmount);\n', '        emit Transfer(sender, recipient, newAmount);\n', '\n', '        \n', '        \n', '    }\n', '    \n', ' function _transferWithoutDeflationary(address sender, address recipient, uint256 amount) internal virtual {\n', '          require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '        \n', '    }\n', '    \n', '    function _deploy(address account, uint256 amount,uint256 beginFarmingDate) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        tokenOwner = account;\n', '        beginFarming=beginFarmingDate;\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    \n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    \n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    \n', '    function _burnFrom(address account, uint256 amount) internal virtual {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    \n', '    function _caculateExtractAmount(uint256 amount)\n', '        internal\n', '        \n', '        returns (uint256, uint256)\n', '    {\n', '       \n', '            uint256 extractAmount = (amount * 5) / 1000;\n', '\n', '            uint256 burnAmount = (extractAmount * 10) / 100;\n', '            uint256 rewardAmount = (extractAmount * 90) / 100;\n', '\n', '            return (burnAmount, rewardAmount);\n', '      \n', '    }\n', '\n', '    function setBeginDeflationFarming(uint256 beginDate) public {\n', '        require(msg.sender == tokenOwner, "ERC20: Only owner can call");\n', '        beginFarming = beginDate;\n', '    }\n', '\n', '    function getBeginDeflationary() public view returns (uint256) {\n', '        return beginFarming;\n', '    }\n', '\n', '    \n', '\n', '}\n', '\n', 'contract ERC20Burnable is Context, ERC20 {\n', '    \n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '  \n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        _burnFrom(account, amount);\n', '    }\n', '}\n', '\n', 'abstract contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '   \n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'contract PolkaBridge is ERC20, ERC20Detailed, ERC20Burnable {\n', '    constructor(uint256 initialSupply)\n', '        public\n', '        ERC20Detailed("PolkaBridge", "PBR", 18)\n', '    {\n', '        _deploy(msg.sender, initialSupply, 1616630400); //25 Mar 2021 1616630400\n', '    }\n', '\n', '    //withdraw contract token\n', '    //use for someone send token to contract\n', '    //recuse wrong user\n', '\n', '    function withdrawErc20(IERC20 token) public {\n', '        token.transfer(tokenOwner, token.balanceOf(address(this)));\n', '    }\n', '}\n', '\n', 'contract SwapToken {\n', '    using SafeMath for uint256;\n', '    string public name = "PolkaBridge: Swap from old PBR to new PBR";\n', '    address payable private owner;\n', '\n', '    address oldPBRAddress;\n', '\n', '    PolkaBridge private polkaBridge;\n', '\n', '    constructor(PolkaBridge _polkaBridge) public {\n', '        polkaBridge = _polkaBridge;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function swapOldPBRToNewPBR(uint256 amount) public {\n', '        require(amount > 0, "amount must to > 0");\n', '        require(amount <= tokenContractBalance(), "exceeds amount limit");\n', '        require(amount <= oldTokenBalance(msg.sender), "not enough balance");\n', '\n', '        ERC20Burnable(oldPBRAddress).burnFrom(msg.sender, amount);\n', '        //send new POBR token\n', '        polkaBridge.transferWithoutDeflationary(msg.sender, amount);\n', '    }\n', '\n', '    function tokenContractBalance() public view returns (uint256) {\n', '        return polkaBridge.balanceOf(address(this));\n', '    }\n', '\n', '    function oldTokenBalance(address add) public view returns (uint256) {\n', '        return ERC20Burnable(oldPBRAddress).balanceOf(add);\n', '    }\n', '\n', '    function oldTokenAddress() public view returns (address) {\n', '        return oldPBRAddress;\n', '    }\n', '\n', '    function burnAllToken() public {\n', '        require(msg.sender == owner, "only owner can burn");\n', '\n', '        polkaBridge.burn(tokenContractBalance());\n', '    }\n', '\n', '    function burnToken(uint256 amount) public {\n', '        require(msg.sender == owner, "only owner can burn");\n', '\n', '        polkaBridge.burn(amount);\n', '    }\n', '\n', '    function withdrawFund() public {\n', '        require(msg.sender == owner, "only owner can withdraw");\n', '        uint256 balance = address(this).balance;\n', '        require(balance > 0, "not enough fund");\n', '        owner.transfer(balance);\n', '    }\n', '\n', '    //withdraw contract token\n', '    //use for someone send token to contract\n', '    //recuse wrong user\n', '\n', '    function withdrawErc20(IERC20 token) public {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    function setOldPBRAddress(address add) public {\n', '        require(msg.sender == owner, "only owner can do it");\n', '        oldPBRAddress = add;\n', '    }\n', '\n', '    receive() external payable {}\n', '}']