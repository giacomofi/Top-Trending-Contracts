['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// -----------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ---------------\n', '// -----------ⵣ ⵣ ⵣ ---------AMAZIGH-YAZ----------ⵣ ⵣ ⵣ -----------------\n', '// -----------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ---------------\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Interface pour le token AmazighYAZ.\n', '// Token ethnique Nord Africain créer en Europe pour le Monde.\n', '// Date de création :\n', '// Calendrier Grégorien - le 1er Avril 2021\n', "// Calendrier Hégire - le 18 Cha'aban 1442\n", '// Calendrier Agraire - Imheznen/Aheggan 2971\n', '// ----------------------------------------------------------------------------\n', '// La majeure partie des Berbères vit en Afrique du Nord :\n', '// Au Maroc, en Algérie, en Tunisie, en Libye, au Niger, au Mali,\n', '// en Mauritanie, au Burkina Faso, en Égypte, mais aussi aux Îles Canaries. \n', '// De grandes diasporas vivent en France, en Belgique, aux Pays-Bas, en Allemagne, \n', "// en Italie, au Canada et dans d'autres pays d'Europe.\n", '// ----------------------------------------------------------------------------\n', '// Ce token représente la communauté Amazigh dans le Monde.\n', "// Il a pour utilité de faciliter l'accès à la blockchain pour la communauté.\n", '// Et de permettre le developpement de cette technologie.\n', '// ---------------------------------------------------------------------------\n', "// Le symbole YAZ ⵣ  est une lettre de l'alphabet amazigh, le tifinagh.\n", "// C'est le symbole de l'homme libre numérisé à travers ce Token.\n", '// -----------------------------------------------------------------------\n', '// Adresse de création : 0xEA5C16635c26bD3f00c1A7113cb81DA9C16802b0\n', '// -----------------------------------------------------------------------\n', '// ----------------------A partager au maximum !--------------------------\n', '// -----------------------------------------------------------------------\n', '// -----------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------\n', '// -----------ⵣ ⵣ ⵣ ---------AMAZIGH-YAZ----------ⵣ ⵣ ⵣ ---------------\n', '// -----------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------ⵉⵎⴰⵣⵉⵖⵏ-------------\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract AmazighYAZ is ERC20Interface, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; \n', '\n', '    uint256 public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    \n', '    constructor() public {\n', '        name = "AmazighYAZ";\n', '        symbol = "YAZ";\n', '        decimals = 12;\n', '        _totalSupply = 50000000000000000000;\n', '\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '}']