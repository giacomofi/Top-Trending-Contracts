['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.9;\n', ' \n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', ' \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', 'contract HUSKYToken is IERC20 {\n', '    string public constant symbol = "HUSKY Token";\n', '    string public constant name = "HSK";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 100000000000000*10**18;\n', ' \n', '    // Owner of this contract\n', '    address public owner;\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', ' \n', ' \n', ' \n', '    modifier onlyOwner {\n', '        require(\n', '            msg.sender == owner,\n', '            "Only owner can call this function."\n', '        );\n', '        _;\n', '    }\n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', ' \n', '    // Constructor\n', '    constructor () public{\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', ' \n', '    function totalSupply() view  public  override returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', ' \n', ' \n', '    function balanceOf(address _owner) view public  override returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public   override returns (bool success) {\n', ' \n', ' \n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit  Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', ' \n', ' \n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) override   public   returns (bool success) {\n', ' \n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '           emit  Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount)public  override returns  (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '       emit  Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function  allowance(address _owner, address _spender)   public   view override returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']