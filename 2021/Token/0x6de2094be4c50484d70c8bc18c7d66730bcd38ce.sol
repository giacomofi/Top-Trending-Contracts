['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-15\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-12-05\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract X2  {\n', '    using SafeMath for uint256;\n', '\n', '    \n', '    string private _tokenName;\n', '    string private _tokenSymbol;\n', '    uint8 private _decimals;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 private _totalSupply;\n', '\n', '\n', '\n', '\t\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\t  //  The contract can be initialized with a number of tokens\n', '    //  All the tokens are deposited to the owner address\n', '    //\n', '    // @param InitialSupply Initial supply of the contract\n', '    // @param name Token Name\n', '    // @param symbol Token symbol\n', '    // @param decimals Token decimals\n', '\n', '\n', '    constructor (uint256  initialSupply ,string memory name, string memory symbol, uint8  decimals) public {\n', '        _tokenName = name;\n', '        _tokenSymbol = symbol;\n', '        _decimals = decimals;\n', '\t\t_totalSupply = initialSupply;\n', '        _balances[msg.sender] = initialSupply;\n', '        emit Transfer(address(0), msg.sender, initialSupply);\n', '    }\n', '\n', '    //Returns the name of the token\n', '    function name() public view returns (string memory) {\n', '        return _tokenName;\n', '    }\n', '\n', '    //Returns the symbol of the token\n', '    function symbol() public view returns (string memory) {\n', '        return _tokenSymbol;\n', '    }\n', '\n', '\t/**\n', '         Returns the number of decimals the token uses - e.g. 8, \n', '\t means to divide the token amount by 100000000 to get its user representation.\n', '        */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * returns total tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * returns the  account balance of the specified address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * Returns the amount which spender is still allowed to withdraw from owner\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     *Transfer token for a specified address\n', '\t *Transfers tokens to address receiver, and MUST fire the Transfer event. \n', '\t *The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend.\n', '     */\n', '    function transfer(address receiver, uint256 numTokens) public returns (bool) {\n', '        _transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Allows spender to withdraw from your account msg.sender multiple times, up to the numTokens amount. \n', '     * If this function is called again it overwrites the current allowance with numTokens.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * To prevent attack vectors like the one https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/ , \n', '     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. \n', '     * THOUGH The contract itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed before\n', '     */\n', '    function approve(address spender, uint256 numTokens) public returns (bool) {\n', '        _approve(msg.sender, spender, numTokens);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from one address to another.\n', '     */\n', '    function transferFrom(address from, address to, uint256 numTokens) public returns (bool) {\n', '        _transfer(from, to, numTokens);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(numTokens));\n', '        return true;\n', '    }\n', '\n', '    \n', '    /**\n', '     * Transfer token from to a specified addresses\n', '     */\n', '    function _transfer(address from, address to, uint256 numTokens) internal {\n', '        require(to != address(0));\n', '\t\trequire(numTokens <= _balances[from]);\n', '        _balances[from] = _balances[from].sub(numTokens);\n', '        _balances[to] = _balances[to].add(numTokens);\n', '         emit Transfer(from, to, numTokens);\n', '    }\n', '\n', '    /**\n', "     * Approve an address to spend another addresses' tokens.\n", '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '        _allowed[owner][spender] = value; \n', '        emit Approval(owner, spender, value);\n', '\t\n', '\t\t\n', '    }\n', '\t/**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '\t\n', '\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '       _approve(msg.sender, spender, _allowed [msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', ' \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed [msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '  }\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 ans = a - b;\n', '\n', '        return ans;\n', '    }\n', '\n', '    /**\n', '     * Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 ans = a + b;\n', '        require(ans >= a);\n', '        return ans;\n', '    }\n', '}']