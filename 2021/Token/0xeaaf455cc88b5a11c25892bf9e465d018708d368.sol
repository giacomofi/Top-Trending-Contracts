['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-14\n', '*/\n', '\n', '//SPDX-License-Identifier: Unlicense\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address account) external view returns (uint);\n', '    function delegate(address delegatee) external;\n', '    function transfer(address dst, uint rawAmount) external returns (bool);\n', '}\n', '\n', 'interface IndexInterface {\n', '    function master() external view returns (address);\n', '}\n', '\n', 'interface InstaVestingInterface {\n', '    function vestingAmount() external view returns (uint);\n', '    function factory() external view returns (address);\n', '}\n', '\n', '\n', 'contract InstaVestingFactory is Ownable {\n', '    TokenInterface public constant token = TokenInterface(0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb);\n', '    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\n', '    InstaVestingFactory public constant instaVestingFactory = InstaVestingFactory(0x3b05a5295Aa749D78858E33ECe3b97bB3Ef4F029);\n', '\n', '    constructor (address _owner) public {\n', '        transferOwnership(_owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if the sender not is Master Address from InstaIndex or owner\n', '    */\n', '    modifier isOwner {\n', '        require(_msgSender() == instaIndex.master() || owner() == _msgSender(), "caller is not the owner or master");\n', '        _;\n', '    }\n', '\n', '    function fundVestingContracts(\n', '        address[] memory vestings\n', '    ) public isOwner {\n', '        uint _length = vestings.length;\n', '\n', '        for (uint i = 0; i < _length; i++) {\n', '            uint256 balanceOf = token.balanceOf(vestings[i]);\n', '            uint256 vestingAmount = InstaVestingInterface(vestings[i]).vestingAmount();\n', '            require(0x3b05a5295Aa749D78858E33ECe3b97bB3Ef4F029 == InstaVestingInterface(vestings[i]).factory(), "VestingFunder::fundVestingContracts: Other vesting contract");\n', '            require(token.transfer(vestings[i], (vestingAmount - balanceOf)), "VestingFunder::fundVestingContracts: insufficient balance");\n', '        }\n', '    }\n', '\n', '    function withdraw() public isOwner {\n', '        token.transfer(owner(), token.balanceOf(address(this)));\n', '    }\n', '}']