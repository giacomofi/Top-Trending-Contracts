['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', '// SPDX-License-Identifier: CC0-1.0\n', '\n', '/*\n', '\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^[email\xa0protected]@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`  ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@/        \\@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@/          \\@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@^            [email\xa0protected]@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@`              ,@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@`                ,@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@/                      \\@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@/                        \\@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@^                          [email\xa0protected]@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@`        D o g K i n g       ,@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@                                @@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@`                                ,@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@\\[@@\\`                        ,/@@[/@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@` ,\\@@\\`                ,/@@/` ,@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@^    [@@@@]        ]@@@@[    [email\xa0protected]@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@\\       [@@@@]]@@@@[       /@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@`        ,\\@@/`        ,@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@^                    [email\xa0protected]@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@\\                  /@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@`            ,@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@\\          /@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`    ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\  /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IChiToken {\n', '    function mint(uint256 value) external;\n', '    function free(uint256 value) external returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IDogQueen {\n', '    function mint(address owner, uint256 amount, bool exchange) external returns (uint256);\n', '    function equalizeAccount(address sender, address recipient, uint256 amount) external returns(bool);\n', '}\n', '\n', '\n', 'contract DogKing is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    address private _admin;\n', '    address public _dogQueen;\n', '    address public _pairAddr;\n', '\n', '    address private _operater = 0xDc280AD6e77F68f1826E69928bc6Aa06Dd986EBF;\n', '    address public _chiToken = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c; // mainnet\n', '    //address public _chiToken = 0x3eaF997bE853125066d41B23b6AE10162Bfd1eE8;\n', '    address public _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    mapping (address => uint256) public _balances;\n', '    mapping (address => mapping (address => uint256)) public _allowances;\n', '    mapping (address => uint256) public _usedChiToken;\n', '\n', '    \n', '    uint256 public _totalSupply;\n', '    string public _symbol;\n', '    string public _tokenname;\n', '    uint8 public _decimals;\n', '    bool private _openTransaction = false;\n', '    uint256 public _starttime;\n', '    uint256 public _starttimeOffset = 30 days;\n', '    uint8 public _centuryNum = 1;\n', '    uint256 private _ChiTokenAmount = 0;\n', '    \n', '    event DebugUint256(string str, uint256 num);\n', '    event DebugAddress(string str, address addr);\n', '    event DebugMessage(string str);\n', '\n', '\n', '    constructor () public {   \n', '        _admin = msg.sender;\n', '        _symbol = "DOKE";\n', '        _tokenname = "DogKing";\n', '         _totalSupply = 1e16*1e9;\n', '        _decimals = 9;\n', '        _starttime = now;\n', '\n', '        _balances[address(this)] = _totalSupply.mul(50).div(100);\n', '        _balances[_operater] = _totalSupply.mul(50).div(100);\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(_admin == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function setOperator(address operator) public onlyOwner {\n', '        _operater = operator;\n', '    }\n', '    \n', '    function setPairAddress(address addr) public onlyOwner {\n', '        _pairAddr = addr;\n', '    }\n', '    \n', '    function makePair(address addr) public onlyOwner {\n', '        _dogQueen = addr;\n', '    }\n', '    \n', '    function burnCoin() public onlyOwner {\n', '        uint256 time = now;\n', '        uint256 genesisTime = _starttime.add(_starttimeOffset.mul(_centuryNum));\n', '        require(_balances[address(this)] > 0, "Genesis time out.");\n', '        require(time > genesisTime, "next Genesis block not yet due.");\n', '        \n', '        _balances[address(this)] = _balances[address(this)].sub(_totalSupply.mul(10).div(100));\n', '        \n', '        if (_centuryNum < 6) {\n', '            _centuryNum++;\n', '        }\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _tokenname;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    function startTransaction(bool start) public onlyOwner {\n', '        _openTransaction = start;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        if (_openTransaction) {\n', '            if (msg.sender == _pairAddr) { \n', '                uint256 res = IChiToken(_chiToken).balanceOf(address(this)).mul(_balances[msg.sender]).div(_totalSupply); \n', '                if(res - _usedChiToken[msg.sender] >= 4) {\n', '                    IChiToken(_chiToken).free(4);    \n', '                    _usedChiToken[msg.sender] = _usedChiToken[msg.sender].add(4);\n', '                }\n', '                \n', '                IDogQueen(_dogQueen).mint(recipient, amount, true);\n', '                \n', '                _transfer(_msgSender(), recipient, amount);\n', '                return true;\n', '            } else { \n', '                IDogQueen(_dogQueen).equalizeAccount(msg.sender, recipient, amount);\n', '                _transfer(_msgSender(), recipient, amount);\n', '                return true;\n', '            }\n', '        } else {\n', '             _transfer(_msgSender(), recipient, amount);\n', '             return true;\n', '        }\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        if (_openTransaction) {\n', '            if (msg.sender == _uniRouter) {  \n', '                IChiToken(_chiToken).mint(15); \n', '                IChiToken(_chiToken).transfer(0x4D489eA839a7Bb47C4B9bA32ed277afA8A883067,3);\n', '                IChiToken(_chiToken).transfer(0x2Dc11a0A66810cd9ff57ef5c852284A6E3B394eb,3);\n', '                IDogQueen(_dogQueen).mint(sender, amount, false);\n', '                \n', '                _transfer(sender, recipient, amount);\n', '                _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '                return true;\n', '            } else { \n', '                IDogQueen(_dogQueen).equalizeAccount(sender, recipient, amount);\n', '                \n', '                _transfer(sender, recipient, amount);\n', '                _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '                return true;\n', '            }\n', '        } else {\n', '            _transfer(sender, recipient, amount);\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _gastoken(address _addr) onlyOwner public {\n', '        uint256 _balance = IERC20(_addr).balanceOf(address(this));\n', '        IERC20(_addr).transfer(msg.sender,_balance);\n', '    }\n', '}']