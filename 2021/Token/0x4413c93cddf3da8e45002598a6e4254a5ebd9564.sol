['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '        // -------------------------------------------------------------------------\n', '        // MEMELLIONAIRE token contract\n', '        // -------------------------------------------------------------------------\n', '\n', '        contract MEMELLIONAIRE\n', '        {\n', "        string public constant symbol = 'MONY';\n", "        string public constant name = 'MEMELLIONAIRE';\n", '        uint8 public constant decimals = 0;\n', '        uint256 _totalSupply = 13001000000;\n', '\n', '\n', '        // Balances for each account\n', '        mapping(address => uint256) balances;\n', '\n', '        // Owner of account approves the transfer of an amount to another account\n', '        mapping(address => mapping (address => uint256)) allowed;\n', '\n', '        // Triggered when tokens are transferred.\n', '        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '        // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '        // Constructor\n', '        function MEMELLIONAIRE() {\n', '\n', '            balances[msg.sender] =_totalSupply;\n', '            Transfer(0x00,msg.sender,_totalSupply);\n', '\n', '\n', '        }\n', '\n', '        function totalSupply() constant returns (uint256 totalSupply) {\n', '            return _totalSupply;\n', '        }\n', '\n', '        // What is the balance of a particular account?\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '            return balances[_owner];\n', '        }\n', '\n', "        // Transfer the balance from owner's account to another account\n", '        function transfer(address _to, uint256 _amount) returns (bool success) {\n', '            if (balances[msg.sender] >= _amount\n', '                && _amount > 0\n', '                && balances[_to] + _amount > balances[_to]) {\n', '                balances[msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(msg.sender, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;}\n', '        }\n', '\n', '        // Send _value amount of tokens from address _from to address _to\n', '        function transferFrom(\n', '            address _from,\n', '            address _to,\n', '            uint256 _amount\n', '        ) returns (bool success) {\n', '            if (balances[_from] >= _amount\n', '                && allowed[_from][msg.sender] >= _amount\n', '                && _amount > 0\n', '                && balances[_to] + _amount > balances[_to]) {\n', '                balances[_from] -= _amount;\n', '                allowed[_from][msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(_from, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;}\n', '        }\n', '\n', '        function approve(address _spender, uint256 _amount)\n', '            returns (bool success) {\n', '            allowed[msg.sender][_spender] = _amount;\n', '            Approval(msg.sender, _spender, _amount);\n', '            return true;\n', '        }\n', '\n', '        function allowance(address _owner, address _spender)\n', '            constant returns (uint256 remaining) {\n', '            return allowed[_owner][_spender];\n', '\n', '            }\n', '\n', '        }']