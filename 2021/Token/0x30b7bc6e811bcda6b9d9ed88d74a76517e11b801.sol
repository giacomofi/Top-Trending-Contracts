['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    \n', 'function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    if (_a == 0) {\n', '        return 0;\n', '    }\n', '    \n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '    return c;\n', '}\n', '\n', 'function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0);\n', '    uint256 c = _a / _b;\n', '    return c;\n', '}\n', '\n', 'function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    return _a - _b;\n', '}\n', '\n', 'function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '    return c;\n', '}\n', '\n', 'function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '    \n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', 'constructor() public {\n', '    owner = msg.sender;\n', '    newOwner = address(0);\n', '}\n', '\n', 'modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '}\n', '\n', 'modifier onlyNewOwner() {\n', '    require(msg.sender != address(0));\n', '    require(msg.sender == newOwner);\n', '    _;\n', '}\n', '\n', 'function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    newOwner = _newOwner;\n', '}\n', '\n', 'function acceptOwnership() public onlyNewOwner {\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '}\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'interface TokenRecipient {\n', '\n', 'function receiveApproval(address _from, uint256 _value, address _token, bytes calldata) external;\n', '\n', '}\n', '\n', 'contract CHAINABLE is ERC20, Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 internal initialSupply;\n', '    uint256 internal totalSupply_;\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => bool) public frozen;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    \n', '    event Burn(address indexed owner, uint256 value);\n', '    event Freeze(address indexed holder);\n', '    event Unfreeze(address indexed holder);\n', '    \n', '    modifier notFrozen(address _holder) {\n', '        require(!frozen[_holder]);\n', '        _;\n', '    }\n', '    \n', 'constructor() public {\n', '    name = "CHAINA8LE BLOCKCHAIN";\n', '    symbol = "CAA";\n', '    decimals = 18;\n', '    initialSupply = 1000000000;\n', '    totalSupply_ = initialSupply * 10 ** uint(decimals);\n', '    balances[owner] = totalSupply_;\n', '    emit Transfer(address(0), owner, totalSupply_);\n', '}\n', '\n', 'function() external payable {\n', '    revert();\n', '}\n', '\n', 'function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '}\n', '\n', 'function _transfer(address _from, address _to, uint _value) internal {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '}\n', '\n', 'function balanceOf(address _holder) public view returns (uint256 balance) {\n', '    return balances[_holder];\n', '}\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    _transfer(_from, _to, _value);\n', '    return true;\n', '}\n', '\n', 'function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '}\n', '\n', 'function allowance(address _holder, address _spender) public view returns (uint256) {\n', '    return allowed[_holder][_spender];\n', '}\n', '\n', 'function freezeAccount(address _holder) public onlyOwner returns (bool) {\n', '    require(!frozen[_holder]);\n', '    frozen[_holder] = true;\n', '    emit Freeze(_holder);\n', '    return true;\n', '}\n', '\n', 'function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n', '    require(frozen[_holder]);\n', '    frozen[_holder] = false;\n', '    emit Unfreeze(_holder);\n', '    return true;\n', '}\n', '\n', 'function burn(uint256 _value) public onlyOwner returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    \n', '    return true;\n', '}\n', '\n', 'function isContract(address addr) internal view returns (bool) {\n', '    uint size;\n', '    assembly{size := extcodesize(addr)}\n', '    return size > 0;\n', '}\n', '}']