['pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./Context.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract DUST is ERC20, Ownable {\n', '    address private _minter = address(0);\n', '    address private _extraMinter = address(0);\n', '    \n', '    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n', '    }\n', '\n', '    function setMinter(address minter) public onlyOwner {\n', '        require(_minter == address(0), "ERROR: minter is set already, cannot be changed");\n', '        _minter = minter;\n', '    }\n', '\n', '    // future functions like staking\n', '    function setExtraMinter(address minter) public onlyOwner {  \n', '        require(_minter == address(0), "ERROR: minter is set already, cannot be changed");\n', '        _minter = minter;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public virtual returns (bool) {\n', '        require((_msgSender() == _minter) || (_msgSender() == _extraMinter), "ERROR: not minter");\n', '        _mint(to, amount);\n', '\treturn true;\n', '    }\n', '}']