['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-13\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-2.0-or-later\n', 'pragma solidity =0.6.11;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MerkleDistributor  {\n', '    address public token;\n', '    bytes32 public merkleRoot;\n', '    uint256 public  startTimestamp;\n', '    \n', '    event Claimed(uint256 index, address account, uint256 amount);\n', '\n', '    // This is a packed array of booleans.\n', '    mapping(uint256 => uint256) private claimedBitMap;\n', '\n', '    constructor(address token_, bytes32 merkleRoot_, uint256 _startTimestamp) public {\n', '        token = token_;\n', '        merkleRoot = merkleRoot_;\n', '        startTimestamp = _startTimestamp == 0 ? blockTimestamp() : _startTimestamp;\n', '    }\n', '    \n', '    function blockTimestamp() public view virtual returns (uint256) {\n', '       return block.timestamp;\n', '   }\n', '\n', '    function isClaimed(uint256 index) public view  returns (bool) {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function _setClaimed(uint256 index) private {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n', '    }\n', '\n', '    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external  {\n', "        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n", "        require(blockTimestamp()>startTimestamp,'Airdrop not start yet');\n", '\n', '        // Verify the merkle proof.\n', '        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n', "        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n", '\n', '        // Mark it claimed and send the token.\n', '        _setClaimed(index);\n', "        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\n", '\n', '        emit Claimed(index, account, amount);\n', '    }\n', '}']