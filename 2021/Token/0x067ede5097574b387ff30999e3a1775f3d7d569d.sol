['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', '/**************************************************************************\n', ' *            ____        _                              \n', ' *           / ___|      | |     __ _  _   _   ___  _ __ \n', " *          | |    _____ | |    / _` || | | | / _ \\| '__|\n", ' *          | |___|_____|| |___| (_| || |_| ||  __/| |   \n', ' *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \n', ' *                                     |___/             \n', ' * \n', ' **************************************************************************\n', ' *\n', ' *  The MIT License (MIT)\n', ' * SPDX-License-Identifier: MIT\n', ' *\n', ' * Copyright (c) 2016-2021 Cyril Lapinte\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining\n', ' * a copy of this software and associated documentation files (the\n', ' * "Software"), to deal in the Software without restriction, including\n', ' * without limitation the rights to use, copy, modify, merge, publish,\n', ' * distribute, sublicense, and/or sell copies of the Software, and to\n', ' * permit persons to whom the Software is furnished to do so, subject to\n', ' * the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included\n', ' * in all copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' *\n', ' **************************************************************************\n', ' *\n', ' * Flatten Contract: MintableTokenERC20\n', ' *\n', ' **************************************************************************/\n', '\n', '// File @c-layer/common/contracts/interface/[email\xa0protected]\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title IERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'interface IERC20 {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  function name() external view returns (string memory);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint256);\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address _owner) external view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    external view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    external returns (bool);\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    external returns (bool);\n', '}\n', '\n', '\n', '// File @c-layer/common/contracts/token/[email\xa0protected]\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Token ERC20\n', ' * @dev Token ERC20 default implementation\n', ' *\n', ' * @author Cyril Lapinte - <[email\xa0protected]>\n', ' *\n', ' * Error messages\n', ' *   TE01: Recipient is invalid\n', ' *   TE02: Not enougth tokens\n', ' *   TE03: Approval too low\n', ' */\n', 'contract TokenERC20 is IERC20 {\n', '\n', '  string internal name_;\n', '  string internal symbol_;\n', '  uint256 internal decimals_;\n', '\n', '  uint256 internal totalSupply_;\n', '  mapping(address => uint256) internal balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint256 _decimals,\n', '    address _initialAccount,\n', '    uint256 _initialSupply\n', '  ) {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '    decimals_ = _decimals;\n', '    totalSupply_ = _initialSupply;\n', '    balances[_initialAccount] = _initialSupply;\n', '\n', '    emit Transfer(address(0), _initialAccount, _initialSupply);\n', '  }\n', '\n', '  function name() external override view returns (string memory) {\n', '    return name_;\n', '  }\n', '\n', '  function symbol() external override view returns (string memory) {\n', '    return symbol_;\n', '  }\n', '\n', '  function decimals() external override view returns (uint256) {\n', '    return decimals_;\n', '  }\n', '\n', '  function totalSupply() external override virtual view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) external override virtual view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender)\n', '    external override view returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) external override virtual returns (bool) {\n', '    return transferFromInternal(msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external override virtual returns (bool)\n', '  {\n', '    return transferFromInternal(_from, _to, _value);\n', '  }\n', '\n', '  function transferFromInternal(address _from, address _to, uint256 _value)\n', '    internal virtual returns (bool)\n', '  {\n', '    require(_to != address(0), "TE01");\n', '    require(_value <= balances[_from], "TE02");\n', '\n', '    if (_from != msg.sender) {\n', '      require(_value <= allowed[_from][msg.sender], "TE03");\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n', '    }\n', '\n', '    balances[_from] = balances[_from] - _value;\n', '    balances[_to] = balances[_to] + _value;\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) external override returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue)\n', '    external override returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] =\n', '      allowed[msg.sender][_spender] + _addedValue;\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue)\n', '    external override returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '// File @c-layer/common/contracts/operable/[email\xa0protected]\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * @dev functions, this simplifies the implementation of "user permissions".\n', ' *\n', ' * Error messages\n', ' *   OW01: Message sender is not the owner\n', ' *   OW02: New owner must be valid\n', '*/\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "OW01");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0), "OW02");\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '// File contracts/interface/IMintableERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title IMintableERC20 interface\n', ' */\n', 'interface IMintableERC20 {\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '  event Mint(address indexed to, uint256 value);\n', '  event FinishMinting();\n', '\n', '  function mintingFinished() external view returns (bool);\n', '  function allTimeMinted() external view returns (uint256);\n', '\n', '  function burn(uint256 _amount) external;\n', '  function mint(address[] memory _recipients, uint256[] memory _amounts) external;\n', '  function finishMinting() external;\n', '}\n', '\n', '\n', '// File contracts/monolithic/MintableTokenERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable Token ERC20\n', ' * @dev Mintable Token ERC20 default implementation\n', ' *\n', ' * @author Cyril Lapinte - <[email\xa0protected]>\n', ' *\n', ' * Error messages\n', ' *   MT01: Unable to mint\n', ' *   MT02: Invalid number of recipients and amounts\n', ' */\n', 'contract MintableTokenERC20 is IMintableERC20, Ownable, TokenERC20 {\n', '\n', '  bool internal mintingFinished_;\n', '  uint256 internal allTimeMinted_;\n', '\n', '  modifier canMint {\n', '    require(!mintingFinished_, "MT01");\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint256 _decimals,\n', '    address _initialAccount,\n', '    uint256 _initialSupply\n', '  ) TokenERC20(\n', '    _name,\n', '    _symbol,\n', '    _decimals,\n', '    address(this),\n', '    0)\n', '  {\n', '    mintInternal(_initialAccount, _initialSupply);\n', '  }\n', '\n', '  function mintingFinished() external override view returns (bool) {\n', '    return mintingFinished_;\n', '  }\n', '\n', '  function allTimeMinted() external override view returns (uint256) {\n', '    return allTimeMinted_;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to burn tokens\n', '   * @param _amount The amount of tokens to burn.\n', '   */\n', '  function burn(uint256 _amount) external override onlyOwner\n', '  {\n', '    burnInternal(msg.sender, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint all tokens at once\n', '   * @param _recipients The addresses that will receive the minted tokens.\n', '   * @param _amounts The amounts of tokens to mint.\n', '   */\n', '  function mint(address[] memory _recipients, uint256[] memory _amounts)\n', '    external override canMint onlyOwner\n', '  {\n', '    require(_recipients.length == _amounts.length, "MT02");\n', '    for (uint256 i=0; i < _recipients.length; i++) {\n', '      mintInternal(_recipients[i], _amounts[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   */\n', '  function finishMinting() external override canMint onlyOwner\n', '  {\n', '    mintingFinished_ = true;\n', '    emit FinishMinting();\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens internal\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   */\n', '  function mintInternal(address _to, uint256 _amount) internal virtual\n', '  {\n', '    totalSupply_ = totalSupply_ + _amount;\n', '    balances[_to] = balances[_to] + _amount;\n', '    allTimeMinted_ = allTimeMinted_ + _amount;\n', '\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to burn tokens internal\n', '   * @param _from The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   */\n', '  function burnInternal(address _from, uint256 _amount) internal virtual\n', '  {\n', '    totalSupply_ = totalSupply_ - _amount;\n', '    balances[_from] = balances[_from] - _amount;\n', '\n', '    emit Transfer(_from, address(0), _amount);\n', '    emit Burn(_from, _amount);\n', '  }\n', '}']