['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-05\n', '*/\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '//---------------------------------- Define Ownable\n', 'contract Ownable {\n', '    address private owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner returns(bool) {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    function getOwner() public view returns(address){\n', '        return owner;\n', '    }\n', '}\n', '//---------------------------------- Define Pausable\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = false;\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    function pause() onlyOwner whenNotPaused public returns(bool){\n', '        paused = true;\n', '        emit Pause();\n', '        return true;\n', '    }\n', '    function unpause() onlyOwner whenPaused public returns(bool) {\n', '        paused = false;\n', '        emit Unpause();\n', '        return true;\n', '    }\n', '}\n', '//---------------------------------- TRC20Basic\n', 'contract TRC20Basic {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '//---------------------------------- BasicToken\n', 'contract BasicToken is TRC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '//---------------------------------- Define BlackList\n', 'contract BlackList is Ownable {\n', '    function getBlackListStatus(address _userAddress) external view returns (bool) {\n', '        return CRY_BLACK_LIST[_userAddress];\n', '    }\n', '    mapping (address => bool) public CRY_BLACK_LIST;\n', '    function addBlackList (address _exceptedUser) public onlyOwner {\n', '        CRY_BLACK_LIST[_exceptedUser] = true;\n', '        emit AddedBlackList(_exceptedUser);\n', '    }\n', '    function removeBlackList (address _whiteUser) public onlyOwner {\n', '        CRY_BLACK_LIST[_whiteUser] = false;\n', '        emit RemovedBlackList(_whiteUser);\n', '    }\n', '    event AddedBlackList(address indexed _user);\n', '    event RemovedBlackList(address indexed _user);\n', '}\n', '//---------------------------------- Define TRC20\n', 'contract TRC20 is TRC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '//---------------------------------- Define STD_TOKEN\n', 'contract STD_TOKEN is TRC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function plus_Approval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    function minus_Approval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '//---------------------------------- Define STD_TOKEN_WithFees\n', 'contract STD_TOKEN_WithFees is STD_TOKEN, Ownable {\n', '    uint256 public pointsCount = 0;\n', '    uint256 public txFee = 0;\n', '    uint256 constant internal MAX_DEFINED_POINTS = 20;\n', '    uint256 constant internal MAX_DEFINED_FEE = 50;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint internal constant MAX_UINT = 2**256 - 1;\n', '    function getFeeNow(uint _value) public view returns (uint) {\n', '        uint fee = (_value.mul(pointsCount)).div(10000);\n', '        if (fee > txFee) {\n', '            fee = txFee;\n', '        }\n', '        return fee;\n', '    }\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        uint fee = getFeeNow(_value);\n', '        uint sendAmount = _value.sub(fee);\n', '        super.transfer(_to, sendAmount);\n', '        if (fee > 0) {\n', '            super.transfer(getOwner(), fee);\n', '        }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        uint fee = getFeeNow(_value);\n', '        uint sendAmount = _value.sub(fee);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        if (allowed[_from][msg.sender] < MAX_UINT) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        }\n', '        emit Transfer(_from, _to, sendAmount);\n', '        if (fee > 0) {\n', '          balances[getOwner()] = balances[getOwner()].add(fee);\n', '          emit Transfer(_from, getOwner(), fee);\n', '        }\n', '        return true;\n', '    }\n', '    function set_Contract_Vars(uint newPoints, uint newTxFee) public onlyOwner {\n', '        require(newPoints < MAX_DEFINED_POINTS);\n', '        require(newTxFee < MAX_DEFINED_FEE);\n', '        pointsCount = newPoints;\n', '        txFee = newTxFee.mul(uint(10)**decimals);\n', '        emit contract_Vars_Changed(pointsCount, txFee);\n', '    }\n', '    function get_MAX_DEFINED_POINTS() public pure returns(uint256){\n', '        return MAX_DEFINED_POINTS;\n', '    }\n', '    function get_MAX_DEFINED_FEE() public pure returns(uint256){\n', '        return MAX_DEFINED_FEE;\n', '    }\n', '    function get_MAX_UINT() public pure returns(uint256){\n', '        return MAX_UINT;\n', '    }\n', '    event contract_Vars_Changed(uint feeBasisPoints, uint maxFee);\n', '}\n', '//|---------------------------------------------------------------------------------------------------------------------------------------| \n', '//|-------------------------------------------------------------- CRY TOKEN --------------------------------------------------------------|\n', '//|---------------------------------------------------------------------------------------------------------------------------------------|\n', '\n', 'contract CRYToken is Pausable, STD_TOKEN_WithFees, BlackList {\n', '    constructor(uint _initialSupply, string memory _name, string memory _symbol, uint8 _decimals) public {\n', '        _totalSupply = _initialSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[getOwner()] = _initialSupply;\n', '        \n', '    }\n', '    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n', '        require(!CRY_BLACK_LIST[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\n', '        require(!CRY_BLACK_LIST[_from]);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    function balanceOf(address who) public view returns (uint) {\n', '        return super.balanceOf(who);\n', '    }\n', '    function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    function plus_Approval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '        return super.plus_Approval(_spender, _addedValue);\n', '    }\n', '    function minus_Approval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.minus_Approval(_spender, _subtractedValue);\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return super.allowance(_owner, _spender);\n', '    }\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function addTokenToContract(uint amount) public onlyOwner returns(bool) {\n', '        balances[getOwner()] = balances[getOwner()].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit token_Added_Contract(amount);\n', '        emit Transfer(address(0), getOwner(), amount);\n', '        return true;\n', '    }\n', '    function delTokenFromContract(uint amount) public onlyOwner returns(bool) {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        balances[getOwner()] = balances[getOwner()].sub(amount);\n', '        emit token_deleted_Contract(amount);\n', '        emit Transfer(getOwner(), address(0), amount);\n', '        return true;\n', '    }\n', '    function deleteBlackFunds (address _exceptedUser) public onlyOwner returns(bool){\n', '        require(CRY_BLACK_LIST[_exceptedUser]);\n', '        uint dirtyFunds = balanceOf(_exceptedUser);\n', '        balances[_exceptedUser] = 0;\n', '        _totalSupply = _totalSupply.sub(dirtyFunds);\n', '        emit BlackFundsDeleted(_exceptedUser, dirtyFunds);\n', '        return true;\n', '    }\n', '    event BlackFundsDeleted(address indexed _exceptedUser, uint _balance);\n', '    event token_Added_Contract(uint amount);\n', '    event token_deleted_Contract(uint amount);\n', '    event Deprecate(address newAddress);\n', '}\n', '//---------------------------------------------------------- safe Math library\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']