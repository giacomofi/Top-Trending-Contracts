['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', 'pragma solidity 0.5.10;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '   \n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256 remaining);\n', '\n', '    function decimals() public view returns (uint256 digits);\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract Ellufa {\n', '    struct User {\n', '        uint256 cycle;\n', '        uint256 total_deposits;\n', '        uint256 max_earnings;\n', '        uint256 earnings_left;\n', '        uint256 total_withdrawl;\n', '        uint256 profitpayout;\n', '        uint256 total_profitpayout;\n', '        uint256 stakingpayout;\n', '        uint256 total_stakingpayout;\n', '        uint8 leader_status;\n', '    }\n', '\n', '    struct Merchant {\n', '        uint256 total_payout;\n', '        uint8 status;\n', '    }\n', '\n', '    struct Package {\n', '        uint8 status;\n', '        uint8 maxPayout;\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    address payable public owner;\n', '    address payable public companyaddress;\n', '    address payable public usdt_address;\n', '\n', '    address public node_address;\n', '    address public exchange_address;\n', '    \n', '    uint256 public total_depositcount = 0;\n', '    uint256 public total_deposited;\n', '    uint256 public total_withdraw;\n', '    uint256 public total_exchange_credit;\n', '    uint256 public total_payout;\n', '    uint256 public total_profit;\n', '    uint256 public current_profit;\n', '    uint256 public total_staked;\n', '    uint256 public current_staked;\n', '    uint8 public phaseversion;\n', '    uint8 public tokendebit; // If disable its wont debit 20%\n', '    uint256 public min_withdrawal; // Before live change to 6 digit\n', '    uint8 public staking_status;\n', '    uint8 public merchant_status;\n', '    uint256 public multiplier;\n', '    address public elft_address;\n', '    uint8 public token_transfer_status;\n', '    uint256 public token_price;\n', '    uint8 public token_share;\n', '\n', '    mapping(address => User) public users;\n', '\n', '    mapping(address => Merchant) public merchants;\n', '\n', '    mapping(uint256 => Package) public packages;\n', '\n', '    event NewDeposit(address indexed addr, uint256 amount);\n', '    event PayoutEvent(address indexed addr, uint256 payout, uint256 staking);\n', '    event WithdrawEvent(address indexed addr, uint256 amount, uint256 service);\n', '    event StakingEvent(address indexed addr, uint256 amount);\n', '    event MerchantEvent(address indexed addr, uint256 amount);\n', '    event ELFTTranEvent(address indexed addr, uint256 amount);\n', '    event ExchangeDebit(address indexed addr, uint256 amount);\n', '    event ExchangeCredit(address indexed addr, uint256 amount);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '\n', '        multiplier = 1000000;\n', '\n', '        companyaddress = 0xFE31Bf2345A531dD2A8E6c5444070248698171BF;\n', '\n', '        usdt_address = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '\n', '        phaseversion = 1;\n', '\n', '        tokendebit = 1;\n', '\n', '        min_withdrawal = 100 * multiplier;\n', '\n', '        staking_status = 0;\n', '\n', '        merchant_status = 0;\n', '\n', '        token_share = 20;\n', '\n', '        packages[1000 * multiplier].status = 1;\n', '        packages[1000 * multiplier].maxPayout = 2;\n', '    }\n', '\n', '    function initDeposit() external {\n', '        \n', '        \n', '        IERC20 tc = IERC20(usdt_address);\n', '\n', '        require(users[msg.sender].earnings_left == 0, "MAX CAP NOT REACHED");\n', '\n', '        require(\n', '            tc.allowance(msg.sender, address(this)) > 0,\n', '            "USDT APPROVAL FAILED"\n', '        );\n', '\n', '        uint256 _amount = tc.allowance(msg.sender, address(this));\n', '\n', '        \n', '        tc.safeTransferFrom(msg.sender, address(this), _amount);\n', '           \n', '        \n', '    \n', '        uint256 company_fee = _amount.div(100).mul(10);\n', '\n', '        tc.safeTransfer(companyaddress, company_fee);\n', '\n', '        uint256 token_fee = _amount.div(100).mul(token_share);\n', '\n', '        if (tokendebit == 1) {\n', '            tc.safeTransfer(companyaddress, token_fee);\n', '        } else {\n', '            //Phase 2 Added to staking\n', '            users[msg.sender].stakingpayout = users[msg.sender]\n', '                .stakingpayout\n', '                .add(token_fee);\n', '\n', '            users[msg.sender].total_stakingpayout = users[msg.sender]\n', '                .total_stakingpayout\n', '                .add(token_fee);\n', '\n', '            total_staked = total_staked.add(token_fee);\n', '            current_staked = current_staked.add(token_fee);\n', '        }\n', '\n', '        uint256 mxpayout = maxPayoutof(_amount);\n', '\n', '        users[msg.sender].cycle++;\n', '        total_depositcount++;\n', '        total_deposited += _amount;\n', '        users[msg.sender].total_deposits += _amount;\n', '        users[msg.sender].max_earnings += mxpayout;\n', '        users[msg.sender].earnings_left += mxpayout;\n', '\n', '        emit NewDeposit(msg.sender, _amount);\n', '\n', '        \n', '    }\n', '\n', '    function maxPayoutof(uint256 _amount) private view returns (uint256) {\n', '        uint8 maxtimes = packages[_amount].maxPayout;\n', '\n', '        return _amount * maxtimes;\n', '    }\n', '\n', '    function addNodeAddress(address _addr) external {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        node_address = _addr;\n', '    }\n', '\n', '    function addPayout(address _addr, uint256 amount) external {\n', '        require(\n', '            msg.sender == owner || msg.sender == node_address,\n', '            "PRIVILAGED USER ONLY"\n', '        );\n', '\n', '        if (users[_addr].leader_status == 0)\n', '            require(users[_addr].earnings_left >= amount, "MAX PAYOUT REACHED");\n', '\n', '        total_payout = total_payout.add(amount);\n', '\n', '        uint256 _profit = amount.div(100).mul(80);\n', '\n', '        uint256 _staked = amount.div(100).mul(20);\n', '\n', '        total_profit = total_profit.add(_profit);\n', '        current_profit = current_profit.add(_profit);\n', '\n', '        total_staked = total_staked.add(_staked);\n', '        current_staked = current_staked.add(_staked);\n', '\n', '        if (users[_addr].leader_status == 0)\n', '            users[_addr].earnings_left -= amount;\n', '\n', '        users[_addr].profitpayout += _profit;\n', '        users[_addr].total_profitpayout += _profit;\n', '        users[_addr].stakingpayout += _staked;\n', '        users[_addr].total_stakingpayout += _staked;\n', '\n', '        emit PayoutEvent(\n', '            _addr,\n', '            amount.div(100).mul(80),\n', '            amount.div(100).mul(20)\n', '        );\n', '    }\n', '\n', '    function withdraw(uint256 _amount) external {\n', '        require(\n', '            users[msg.sender].profitpayout >= min_withdrawal,\n', '            "MIN 100 USDT"\n', '        );\n', '\n', '        require(users[msg.sender].profitpayout >= _amount, "NOT ENOUGH MONEY");\n', '\n', '        require(_amount >= min_withdrawal, "MIN 100 USDT");\n', '\n', '        IERC20 tc = IERC20(usdt_address);\n', '\n', '        tc.safeTransfer(msg.sender, _amount.div(100).mul(95));\n', '        tc.safeTransfer(companyaddress, _amount.div(100).mul(5));\n', '\n', '        users[msg.sender].total_withdrawl = users[msg.sender]\n', '            .total_withdrawl\n', '            .add(_amount);\n', '\n', '        total_withdraw = total_withdraw.add(_amount);\n', '\n', '        current_profit = current_profit.sub(_amount);\n', '\n', '        emit WithdrawEvent(\n', '            msg.sender,\n', '            _amount.div(100).mul(95),\n', '            _amount.div(100).mul(5)\n', '        );\n', '\n', '        users[msg.sender].profitpayout = users[msg.sender].profitpayout.sub(\n', '            _amount\n', '        );\n', '    }\n', '\n', '    function investStaking(uint256 amount) external {\n', '        require(staking_status == 1, "STAKING NOT ENABLED");\n', '\n', '        require(\n', '            users[msg.sender].stakingpayout >= amount,\n', '            "NOT ENOUGH STAKING AMOUNT"\n', '        );\n', '\n', '        current_staked = current_staked.sub(amount);\n', '        users[msg.sender].stakingpayout = users[msg.sender].stakingpayout.sub(\n', '            amount\n', '        );\n', '\n', '        IERC20 tc = IERC20(usdt_address);\n', '        tc.safeTransfer(companyaddress, amount);\n', '\n', '        emit StakingEvent(msg.sender, amount);\n', '\n', '        if (token_transfer_status == 1) {\n', '            IERC20 elft = IERC20(elft_address);\n', '\n', '            uint256 return_token = amount.div(token_price).mul(multiplier);\n', '\n', '            elft.safeTransfer(msg.sender, return_token);\n', '\n', '            emit ELFTTranEvent(msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    function addMerchant(address _addr) external {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        merchants[_addr].status = 1;\n', '    }\n', '\n', '    function payMerchant(address _addr, uint256 _amount) external {\n', '        require(merchant_status == 1, "MERCHANT NOT ENABLED");\n', '\n', '        require(merchants[_addr].status == 1, "ADDRESS NOT AVAILABLE");\n', '\n', '        require(\n', '            users[msg.sender].stakingpayout >= _amount,\n', '            "NOT ENOUGH BALANCE"\n', '        );\n', '\n', '        current_staked = current_staked.sub(_amount);\n', '        users[msg.sender].stakingpayout = users[msg.sender].stakingpayout.sub(\n', '            _amount\n', '        );\n', '\n', '        merchants[_addr].total_payout = merchants[_addr].total_payout.add(\n', '            _amount\n', '        );\n', '\n', '        IERC20 tc = IERC20(usdt_address);\n', '        tc.safeTransfer(_addr, _amount);\n', '\n', '        emit MerchantEvent(msg.sender, _amount);\n', '    }\n', '\n', '    function addPackage(uint256 _amount, uint8 _maxpayout) public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        require(_maxpayout >= 2, "MINIMUM 2 TIMES RETURN");\n', '\n', '        packages[_amount * multiplier].status = 1;\n', '        packages[_amount * multiplier].maxPayout = _maxpayout;\n', '    }\n', '\n', '    function addLeaderAddress(address _address) public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        users[_address].leader_status = 1;\n', '    }\n', '\n', '    function addELFTAddress(address _address) public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        require(_address != address(0), "VALUID ADDRESS REQUIRED");\n', '\n', '        elft_address = _address;\n', '\n', '        token_transfer_status = 1;\n', '    }\n', '    \n', '    function addExchangeAddress(address _address) public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        require(_address != address(0), "VALUID ADDRESS REQUIRED");\n', '\n', '        exchange_address = _address;\n', '    }\n', '    \n', '    function debitStaking(address _address,uint256 _amount) public {\n', '        require(\n', '            msg.sender == owner || msg.sender == exchange_address,\n', '            "PRIVILAGED USER ONLY"\n', '        );\n', '        \n', '        require(\n', '            users[_address].stakingpayout >= _amount,\n', '            "NOT ENOUGH BALANCE"\n', '        );\n', '        \n', '        current_staked = current_staked.sub(_amount);\n', '        users[_address].stakingpayout = users[_address].stakingpayout.sub(\n', '            _amount\n', '        );\n', '    \n', '        emit ExchangeDebit(_address,_amount);\n', '\n', '    }\n', '    \n', '    function creditPayout(address _address,uint256 _amount) public {\n', '        \n', '        require(\n', '            msg.sender == owner || msg.sender == exchange_address,\n', '            "PRIVILAGED USER ONLY"\n', '        );\n', '        \n', '        total_profit = total_profit.add(_amount);\n', '        current_profit = current_profit.add(_amount);\n', '        total_exchange_credit = total_exchange_credit.add(_amount);\n', '        \n', '        users[_address].profitpayout = users[_address].profitpayout.add(_amount);\n', '        users[_address].total_profitpayout = users[_address].total_profitpayout.add(_amount);\n', '        \n', '        emit ExchangeCredit(_address,_amount);\n', '        \n', '    }\n', '\n', '    function addTokenPrice(uint256 _value) public {\n', '        //6 Decimal\n', '        require(\n', '            msg.sender == owner || msg.sender == node_address,\n', '            "PRIVILAGED USER ONLY"\n', '        );\n', '\n', '        token_price = _value;\n', '    }\n', '\n', '    function updateTokenShares(uint8 _value) public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        require(_value >= 0, "MUST HIGHER THAN 0");\n', '\n', '        token_share = _value;\n', '    }\n', '\n', '    function enablePhase2() public {\n', '        require(msg.sender == owner, "OWNER ONLY");\n', '\n', '        phaseversion = 2;\n', '\n', '        tokendebit = 2;\n', '\n', '        staking_status = 1;\n', '\n', '        merchant_status = 1;\n', '    }\n', '}']