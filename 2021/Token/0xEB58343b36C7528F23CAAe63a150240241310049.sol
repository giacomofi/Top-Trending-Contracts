['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', 'pragma solidity =0.8.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// NBU token main contract (2020)\n', '//\n', '// Symbol       : NBU\n', '// Name         : Nimbus\n', '// Total supply : 1.000.000.000 (burnable)\n', '// Decimals     : 18\n', '// ----------------------------------------------------------------------------\n', '// SPDX-License-Identifier: MIT\n', '// ----------------------------------------------------------------------------\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Ownable: Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address transferOwner) public onlyOwner {\n', '        require(transferOwner != newOwner);\n', '        newOwner = transferOwner;\n', '    }\n', '\n', '    function acceptOwnership() virtual public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(a, b, "SafeMath: addition overflow");\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract NBU is IERC20, Ownable, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '    \n', '    mapping (address => uint) private _unfrozenBalances;\n', '\n', '    mapping (address => uint) private _vestingNonces;\n', '    mapping (address => mapping (uint => uint)) private _vestingAmounts;\n', '    mapping (address => mapping (uint => uint)) private _unvestedAmounts;\n', '    mapping (address => mapping (uint => uint)) private _vestingTypes; //0 - multivest, 1 - single vest, > 2 give by vester id\n', '    mapping (address => mapping (uint => uint)) private _vestingReleaseStartDates;\n', '\n', '    uint private _totalSupply = 1_000_000_000e18;\n', '    string private constant _name = "Nimbus";\n', '    string private constant _symbol = "NBU";\n', '    uint8 private constant _decimals = 18;\n', '\n', '    uint private vestingFirstPeriod = 60 days;\n', '    uint private vestingSecondPeriod = 152 days;\n', '\n', '    uint public giveAmount;\n', '    mapping (address => bool) public vesters;\n', '\n', '    bytes32 public immutable DOMAIN_SEPARATOR;\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    mapping (address => uint) public nonces;\n', '\n', '    event Unvest(address user, uint amount);\n', '\n', '    constructor () {\n', '        _unfrozenBalances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply); \n', '\n', '        uint chainId = block.chainid;\n', '\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(_name)),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '        giveAmount = _totalSupply / 10;\n', '    }\n', '\n', '    function approve(address spender, uint amount) external override whenNotPaused returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address recipient, uint amount) external override whenNotPaused returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) external override whenNotPaused returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "NBU::transferFrom: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external whenNotPaused {\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "NBU::permit: invalid signature");\n', '        require(signatory == owner, "NBU::permit: unauthorized");\n', '        require(block.timestamp <= deadline, "NBU::permit: signature expired");\n', '\n', '        _allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "NBU::decreaseAllowance: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function unvest() external whenNotPaused returns (uint unvested) {\n', '        require (_vestingNonces[msg.sender] > 0, "NBU::unvest:No vested amount");\n', '        for (uint i = 1; i <= _vestingNonces[msg.sender]; i++) {\n', '            if (_vestingAmounts[msg.sender][i] == _unvestedAmounts[msg.sender][i]) continue;\n', '            if (_vestingReleaseStartDates[msg.sender][i] > block.timestamp) break;\n', '            uint toUnvest = block.timestamp.sub(_vestingReleaseStartDates[msg.sender][i]).mul(_vestingAmounts[msg.sender][i]) / vestingSecondPeriod;\n', '            if (toUnvest > _vestingAmounts[msg.sender][i]) {\n', '                toUnvest = _vestingAmounts[msg.sender][i];\n', '            } \n', '            uint totalUnvestedForNonce = toUnvest;\n', '            toUnvest = toUnvest.sub(_unvestedAmounts[msg.sender][i]);\n', '            unvested = unvested.add(toUnvest);\n', '            _unvestedAmounts[msg.sender][i] = totalUnvestedForNonce;\n', '        }\n', '        _unfrozenBalances[msg.sender] = _unfrozenBalances[msg.sender].add(unvested);\n', '        emit Unvest(msg.sender, unvested);\n', '    }\n', '\n', '    function give(address user, uint amount, uint vesterId) external {\n', '        require (giveAmount > amount, "NBU::give: give finished");\n', '        require (vesters[msg.sender], "NBU::give: not vester");\n', '        giveAmount = giveAmount.sub(amount);\n', '        _vest(user, amount, vesterId);\n', '     }\n', '\n', '    function vest(address user, uint amount) external {\n', '        require (vesters[msg.sender], "NBU::vest: not vester");\n', '        _vest(user, amount, 1);\n', '    }\n', '\n', '    function burnTokens(uint amount) external onlyOwner returns (bool success) {\n', '        require(amount <= _unfrozenBalances[owner], "NBU::burnTokens: exceeds available amount");\n', '        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(amount, "NBU::burnTokens: transfer amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount, "NBU::burnTokens: overflow");\n', '        emit Transfer(owner, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function allowance(address owner, address spender) external view override returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function decimals() external pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function totalSupply() external view override returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) external view override returns (uint) {\n', '        uint amount = _unfrozenBalances[account];\n', '        if (_vestingNonces[account] == 0) return amount;\n', '        for (uint i = 1; i <= _vestingNonces[account]; i++) {\n', '            amount = amount.add(_vestingAmounts[account][i]).sub(_unvestedAmounts[account][i]);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function availableForUnvesting(address user) external view returns (uint unvestAmount) {\n', '        if (_vestingNonces[user] == 0) return 0;\n', '        for (uint i = 1; i <= _vestingNonces[user]; i++) {\n', '            if (_vestingAmounts[user][i] == _unvestedAmounts[user][i]) continue;\n', '            if (_vestingReleaseStartDates[user][i] > block.timestamp) break;\n', '            uint toUnvest = block.timestamp.sub(_vestingReleaseStartDates[user][i]).mul(_vestingAmounts[user][i]) / vestingSecondPeriod;\n', '            if (toUnvest > _vestingAmounts[user][i]) {\n', '                toUnvest = _vestingAmounts[user][i];\n', '            } \n', '            toUnvest = toUnvest.sub(_unvestedAmounts[user][i]);\n', '            unvestAmount = unvestAmount.add(toUnvest);\n', '        }\n', '    }\n', '\n', '    function availableForTransfer(address account) external view returns (uint) {\n', '        return _unfrozenBalances[account];\n', '    }\n', '\n', '    function vestingInfo(address user, uint nonce) external view returns (uint vestingAmount, uint unvestedAmount, uint vestingReleaseStartDate, uint vestType) {\n', '        vestingAmount = _vestingAmounts[user][nonce];\n', '        unvestedAmount = _unvestedAmounts[user][nonce];\n', '        vestingReleaseStartDate = _vestingReleaseStartDates[user][nonce];\n', '        vestType = _vestingTypes[user][nonce];\n', '    }\n', '\n', '    function vestingNonces(address user) external view returns (uint lastNonce) {\n', '        return _vestingNonces[user];\n', '    }\n', '\n', '\n', '\n', '    function _approve(address owner, address spender, uint amount) private {\n', '        require(owner != address(0), "NBU::_approve: approve from the zero address");\n', '        require(spender != address(0), "NBU::_approve: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint amount) private {\n', '        require(sender != address(0), "NBU::_transfer: transfer from the zero address");\n', '        require(recipient != address(0), "NBU::_transfer: transfer to the zero address");\n', '\n', '        _unfrozenBalances[sender] = _unfrozenBalances[sender].sub(amount, "NBU::_transfer: transfer amount exceeds balance");\n', '        _unfrozenBalances[recipient] = _unfrozenBalances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _vest(address user, uint amount, uint vestType) private {\n', '        uint nonce = ++_vestingNonces[user];\n', '        _vestingAmounts[user][nonce] = amount;\n', '        _vestingReleaseStartDates[user][nonce] = block.timestamp + vestingFirstPeriod;\n', '        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(amount);\n', '        _vestingTypes[user][nonce] = vestType;\n', '        emit Transfer(owner, user, amount);\n', '    }\n', '\n', '\n', '\n', '\n', '    function multisend(address[] memory to, uint[] memory values) external onlyOwner returns (uint) {\n', '        require(to.length == values.length);\n', '        require(to.length < 100);\n', '        uint sum;\n', '        for (uint j; j < values.length; j++) {\n', '            sum += values[j];\n', '        }\n', '        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(sum, "NBU::multisend: transfer amount exceeds balance");\n', '        for (uint i; i < to.length; i++) {\n', '            _unfrozenBalances[to[i]] = _unfrozenBalances[to[i]].add(values[i], "NBU::multisend: transfer amount exceeds balance");\n', '            emit Transfer(owner, to[i], values[i]);\n', '        }\n', '        return(to.length);\n', '    }\n', '\n', '    function multivest(address[] memory to, uint[] memory values) external onlyOwner returns (uint) { \n', '        require(to.length == values.length);\n', '        require(to.length < 100);\n', '        uint sum;\n', '        for (uint j; j < values.length; j++) {\n', '            sum += values[j];\n', '        }\n', '        _unfrozenBalances[owner] = _unfrozenBalances[owner].sub(sum, "NBU::multivest: transfer amount exceeds balance");\n', '        for (uint i; i < to.length; i++) {\n', '            uint nonce = ++_vestingNonces[to[i]];\n', '            _vestingAmounts[to[i]][nonce] = values[i];\n', '            _vestingReleaseStartDates[to[i]][nonce] = block.timestamp + vestingFirstPeriod;\n', '            _vestingTypes[to[i]][nonce] = 0;\n', '            emit Transfer(owner, to[i], values[i]);\n', '        }\n', '        return(to.length);\n', '    }\n', '\n', '    function updateVesters(address vester, bool isActive) external onlyOwner { \n', '        vesters[vester] = isActive;\n', '    }\n', '\n', '    function updateGiveAmount(uint amount) external onlyOwner { \n', '        require (_unfrozenBalances[owner] > amount, "NBU::updateGiveAmount: exceed owner balance");\n', '        giveAmount = amount;\n', '    }\n', '    \n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) external onlyOwner returns (bool success) {\n', '        return IERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function acceptOwnership() public override {\n', '        uint amount = _unfrozenBalances[owner];\n', '        _unfrozenBalances[newOwner] = amount;\n', '        _unfrozenBalances[owner] = 0;\n', '        emit Transfer(owner, newOwner, amount);\n', '        super.acceptOwnership();\n', '    }\n', '}']