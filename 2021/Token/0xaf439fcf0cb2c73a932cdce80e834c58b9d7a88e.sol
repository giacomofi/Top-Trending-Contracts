['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'interface Art_IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) external  returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function name() external  view  returns(string memory);\n', '    function symbol() external view   returns (string memory);\n', '    function decimals() external view  returns (uint8);\n', '    \n', '    function getTokenPrice() external view  returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/*\n', 'fixed supply MJC \n', '*/\n', '\n', 'contract MJC_ERC20 is Context, Art_IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint8 private _decimals;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    address payable owner;\n', '    uint  priceEthToken;\n', '\n', '    constructor ( string memory name_, string memory symbol_, uint8 decimals_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = decimals_;\n', '        owner =payable(msg.sender);\n', '        priceEthToken = 0.01 ether;\n', '    }\n', '   \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function setTokenPrice(uint priceWeiTokens) public  returns (bool esito) {\n', '        require(msg.sender == owner,"Solo il propritario puo settare il prezzo");\n', '        priceEthToken = priceWeiTokens;\n', '        return true;\n', '    }\n', '    \n', '    /* buy MJC for using to buy Artworks */\n', '    function buyToken( uint tokens) payable public  returns (bool success) {//\n', '        uint amount = msg.value;\n', '        uint256 sellerBalance = balanceOf(owner);\n', '        require(tokens <= sellerBalance, "Not enough tokens in the Seller reserve");\n', '        require(amount >= priceEthToken * (tokens / (10 ** uint256(_decimals))), "Wrong price Token");\n', '        _balances[owner] -=  tokens;\n', '        _balances[msg.sender] += tokens;\n', '        emit Transfer(owner, msg.sender, tokens);\n', '        owner.transfer(amount);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function getTokenPrice() external view override returns (uint256){\n', '        return priceEthToken;\n', '    }\n', '    \n', '    /* DEFAULT FUNCTIONS*/\n', '    \n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address Owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[Owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '  \n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(((currentAllowance >= amount)), "MJC: transfer amount exceeds allowance ");\n', '        unchecked {\n', '            _approve(sender, _msgSender(), currentAllowance - amount);\n', '        }\n', '    \n', '        return true;\n', '    }\n', '\n', '  \n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        unchecked {\n', '            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        unchecked {\n', '            _balances[sender] = senderBalance - amount;\n', '        }\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        unchecked {\n', '            _balances[account] = accountBalance - amount;\n', '        }\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '   \n', '    function _approve(address Owner, address spender, uint256 amount) internal virtual {\n', '        require(Owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[Owner][spender] = amount;\n', '        emit Approval(Owner, spender, amount);\n', '    }\n', '\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    \n', '}\n', 'contract TATTOO_Token is MJC_ERC20 {\n', '    \n', '  //Nome symbol decimal  \n', '    constructor() MJC_ERC20("CRYPTO TATTOO", "TATTOO",10)  {\n', '        uint256 totalSupply = 1000000 * (10 ** uint256(10));\n', '        _mint(msg.sender,totalSupply);\n', '    }\n', '}']