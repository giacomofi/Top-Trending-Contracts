['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-08\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Governance is Context{\n', '    address internal _governance;\n', '    mapping (address => bool) private _isMinter;\n', '    mapping (address => uint256) internal _supplyByMinter;\n', '    mapping (address => uint256) internal _burnByAddress;\n', '    \n', '    event GovernanceChanged(address oldGovernance, address newGovernance);\n', '    event MinterAdmitted(address target);\n', '    event MinterExpelled(address target);\n', '    \n', '    modifier GovernanceOnly () {\n', '        require (_msgSender() == _governance, "Only Governance can do");\n', '        _;\n', '    }\n', '    \n', '    modifier MinterOnly () {\n', '        require (_isMinter[_msgSender()], "Only Minter can do");\n', '        _;\n', '    }\n', '    \n', '    function governance () external view returns (address) {\n', '        return _governance;\n', '    }\n', '    \n', '    function isMinter (address target) external view returns (bool) {\n', '        return _isMinter[target];\n', '    }\n', '    \n', '    function supplyByMinter (address minter) external view returns (uint256) {\n', '        return _supplyByMinter[minter];\n', '    }\n', '    \n', '    function burnByAddress (address by) external view returns (uint256) {\n', '        return _burnByAddress[by];\n', '    }\n', '    \n', '    function admitMinter (address target) external GovernanceOnly {\n', '        require (!_isMinter[target], "Target is minter already");\n', '        _isMinter[target] = true;\n', '        emit MinterAdmitted(target);\n', '    }\n', '    \n', '    function expelMinter (address target) external GovernanceOnly {\n', '        require (_isMinter[target], "Target is not minter");\n', '        _isMinter[target] = false;\n', '        emit MinterExpelled(target);\n', '    }\n', '    \n', '    function succeedGovernance (address newGovernance) external GovernanceOnly {\n', '        _governance = newGovernance;\n', '        emit GovernanceChanged(msg.sender, newGovernance);\n', '    }\n', '}\n', '\n', 'contract ERC20 is Governance, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _initialSupply;\n', '\n', '    constructor (\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 initialSupply\n', '    ) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _governance = msg.sender;\n', '        \n', '        _mint(msg.sender, initialSupply);\n', '        _initialSupply = initialSupply;\n', '    }\n', '\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    \n', '    function mint (address to, uint256 quantity) external MinterOnly {\n', '        _mint(to, quantity);\n', '        _supplyByMinter[msg.sender] = _supplyByMinter[msg.sender].add(quantity);\n', '    }\n', '    \n', '    function burn (uint256 quantity) external {\n', '        _burn(msg.sender, quantity);\n', '        _burnByAddress[msg.sender] = _burnByAddress[msg.sender].add(quantity);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract MCS is ERC20 ("MCS", "MCS", 18, 13000000000000000000000000000) {\n', '\n', '}']