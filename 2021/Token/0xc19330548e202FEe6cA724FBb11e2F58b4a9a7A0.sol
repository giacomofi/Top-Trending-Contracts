['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract VoltronToken {\n', '  \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    event Transfer(address indexed owner, address indexed recipient, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    constructor(\n', '      address pink_address,\n', '      address black_address,\n', '      address red_address,\n', '      address blue_address,\n', '      address green_address,\n', '      address yellow_address\n', '    ) {\n', '        _balances[pink_address] = 1000000000000000000000000000;\n', '        _balances[black_address] = 1000000000000000000000000000;\n', '        _balances[red_address] = 1000000000000000000000000000;\n', '        _balances[blue_address] = 1000000000000000000000000000;\n', '        _balances[green_address] = 1000000000000000000000000000;\n', '        _balances[yellow_address] = 1000000000000000000000000000;\n', '        emit Transfer(address(0), pink_address, 1000000000000000000000000000);\n', '        emit Transfer(address(0), black_address, 1000000000000000000000000000);\n', '        emit Transfer(address(0), red_address, 1000000000000000000000000000);\n', '        emit Transfer(address(0), blue_address, 1000000000000000000000000000);\n', '        emit Transfer(address(0), green_address, 1000000000000000000000000000);\n', '        emit Transfer(address(0), yellow_address, 1000000000000000000000000000);\n', '    }\n', '\n', '    function name() public pure returns (string memory) {\n', '        return "VoltronToken";\n', '    }\n', '\n', '    function symbol() public pure returns (string memory) {\n', '        return "VTN";\n', '    }\n', '\n', '    function decimals() public pure returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    function totalSupply() public pure returns (uint256) {\n', '        return 6000000000000000000000000000;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }    \n', '    \n', '    function transfer(address recipient, uint256 amount) public returns (bool) {  \n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    // msg.sender = (third-party) spender\n', '    function transferFrom(address owner, address recipient, uint256 amount) public returns (bool) {\n', '        uint256 currentAllowance = _allowances[owner][msg.sender];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");        \n', '        _transfer(owner, recipient, amount);\n', '        _approve(owner, msg.sender, currentAllowance - amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        uint256 currentAllowance = _allowances[msg.sender][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(msg.sender, spender, currentAllowance - subtractedValue);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address owner, address recipient, uint256 amount) internal {\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        uint256 ownerBalance = _balances[owner];\n', '        require(ownerBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[owner] = ownerBalance - amount;\n', '        _balances[recipient] += amount;\n', '        emit Transfer(owner, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']