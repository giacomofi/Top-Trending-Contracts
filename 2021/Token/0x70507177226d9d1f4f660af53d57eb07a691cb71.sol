['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal virtual {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Moderator is Ownable {\n', '    mapping(address => bool) private _mod;\n', '\n', '    event ModSet(address indexed newMod);\n', '    event ModDeleted(address indexed oldMod);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the new Mod.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _mod[msgSender] = true;\n', '        emit ModSet(msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the mod.\n', '     */\n', '    modifier onlyMod() {\n', '        require(isMod(), "Moderator: caller is not the mod");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current mod.\n', '     */\n', '    function isMod() public view returns (bool) {\n', '        address msgSender = _msgSender();\n', '        return _mod[msgSender];\n', '    }\n', '\n', '    /**\n', '     * @dev Set new moderator of the contract to a new account (`newMod`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function setNewMod(address newMod) public virtual onlyOwner {\n', '        _setNewMod(newMod);\n', '    }\n', '    \n', '    /**\n', '     * @dev Delete moderator of the contract (`oldMod`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function deleteMod(address oldMod) public virtual onlyOwner {\n', '        _deleteMod(oldMod);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new moderator of the contract to a new account (`newMod`).\n', '     */\n', '    function _setNewMod(address newMod) internal virtual {\n', '        require(newMod != address(0), "Moderator: new mod is the zero address");\n', '        emit ModSet(newMod);\n', '        _mod[newMod] = true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Delete moderator of the contract t (`oldMod`).\n', '     */\n', '    function _deleteMod(address oldMod) internal virtual {\n', '        require(oldMod != address(0), "Moderator: old Mod is the zero address");\n', '        emit ModDeleted(oldMod);\n', '        _mod[oldMod] = false;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Moderator {\n', '    bool private _paused;\n', '\n', '    address private _pauser;\n', '    \n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pauser is transferred by a owner.\n', '     */\n', '    event PauserTransferred(address indexed previousPauser, address indexed newPauser);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial pauser.\n', '     * \n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    constructor (address pauser) internal {\n', '        _pauser = pauser;\n', '        _paused = false;\n', '        emit PauserTransferred(address(0), pauser);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current pauser.\n', '     */\n', '    function pauser() public view returns (address) {\n', '        return _pauser;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyPauser() {\n', '        require(isPauser(), "Pausable: caller is not the pauser");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current pauser.\n', '     */\n', '    function isPauser() public view returns (bool) {\n', '        return _msgSender() == _pauser;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers pauser of the contract to a new account (`newPauser`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function setNewPauser(address newPauser) public virtual onlyOwner {\n', '        _transferPauser(newPauser);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers pauser of the contract to a new account (`newPauser`).\n', '     */\n', '    function _transferPauser(address newPauser) internal virtual {\n', '        require(newPauser != address(0), "Pausable: new pauser is the zero address");\n', '        emit PauserTransferred(_pauser, newPauser);\n', '        _pauser = newPauser;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract GHTVerificationService is Pausable {\n', '    using SafeMath for uint256;\n', '    mapping (address => bool) private _whiteListAddress;\n', '    mapping (address => uint256) private _GHTAmount;\n', '    \n', '    IERC20 GHT;\n', '    /**\n', "     * @dev Emitted when the user's address is locked or unlocked by a owner (`account`).\n", '     */\n', '    event SetWhiteListAddress(address indexed account, bool flag);\n', '    event DepositGHT(address indexed account, uint256 amount);\n', '    event GHTWithdrawalConfirmation(address indexed account, address indexed to, uint256 amount);\n', '    event DecreaseGHTAmount(address indexed account, uint256 amount);\n', '    \n', '    constructor(address pauser, address _ght) public Pausable(pauser){\n', '        address msgSender = _msgSender();\n', '        setWhiteListAddress(msgSender,true);\n', '        GHT = IERC20(_ght);\n', '    }\n', '    \n', '     /**\n', '     * @dev Returns GHT amount of `account` sent to contract.\n', '     */\n', '    function getGHTAmount(address account) public view returns (uint256) {\n', '        return _GHTAmount[account];\n', '    }\n', '    \n', '    /**\n', '     * @dev User deposit to Wallet.\n', '     */\n', '    function depositGHT(uint256 amount, address user) public whenNotPaused {\n', '        GHT.transferFrom(user,address(this),amount);\n', '        _GHTAmount[user] = _GHTAmount[user].add(amount);\n', '        \n', '        emit DepositGHT(user, amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev User withdraw GHT from Wallet.\n', '     */\n', '    function confirmedGHTWithdrawal(uint256 amount, address whitelistAddress, address to, uint256 update) public onlyMod whenNotPaused {\n', '        //require(_whiteListAddress[user]);\n', '        //require(_GHTAmount[whitelistAddress] >= amount);\n', '        \n', '        if(update!=0)\n', '            _GHTAmount[whitelistAddress] = update;\n', '        \n', '        GHT.transfer(to,amount);\n', '        _GHTAmount[whitelistAddress] = _GHTAmount[whitelistAddress].sub(amount);\n', '        \n', '        assert(_GHTAmount[whitelistAddress]>=0);\n', '        \n', '        emit GHTWithdrawalConfirmation(whitelistAddress, to, amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Decrease GHT in wallet cz used.\n', '     */\n', '    function decreaseGHTAmount(uint256 amount, address user) public onlyMod whenNotPaused {\n', '        _GHTAmount[user] = _GHTAmount[user].sub(amount);\n', '        assert(_GHTAmount[user]>=0);\n', '        emit DecreaseGHTAmount(user, amount);\n', '    }\n', '    \n', '    /**\n', "     * @dev Set the user's address to lock or unlock.\n", '     */\n', '    function setWhiteListAddress(address account, bool flag) public onlyMod {\n', '        _setWhiteListAddress(account, flag);\n', '        emit SetWhiteListAddress(account, flag);\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the state `account`.\n', '     */\n', '    function getWhiteListAddress(address account) public view returns (bool) {\n', '        return _whiteListAddress[account];\n', '    }\n', '    \n', '    /**\n', "     * @dev Set the user's address to lock or unlock.\n", '     */\n', '    function _setWhiteListAddress(address account, bool flag) internal {\n', '        _whiteListAddress[account] = flag;\n', '    }\n', '    \n', '    /**\n', '     * @dev Pausese contract.\n', '     *\n', '     * See {Pausable-_pause}.\n', '     */\n', '    function pauseContract() public virtual onlyPauser {\n', '        _pause();\n', '    }\n', '    \n', '    /**\n', '     * @dev Unpauses contract.\n', '     *\n', '     * See {Pausable-_unpause}.\n', '     */\n', '    function unpauseContract() public virtual onlyPauser {\n', '        _unpause();\n', '    }\n', '}']