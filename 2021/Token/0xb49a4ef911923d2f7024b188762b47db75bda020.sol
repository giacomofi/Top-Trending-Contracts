['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-14\n', '*/\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Initializable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/Stake/IClusterRewards.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IClusterRewards {\n', '    function clusterRewards(address _cluster) external returns(uint256);\n', '    function rewardWeight(bytes32 _networkId) external returns(uint256);\n', '    function totalRewardsPerEpoch() external returns(uint256);\n', '    function feeder() external returns(address);\n', '    function rewardDistributionWaitTime() external returns(uint256);\n', '    function changeFeeder(address _newFeeder) external;\n', '    function addNetwork(bytes32 _networkId, uint256 _rewardWeight) external;\n', '    function removeNetwork(bytes32 _networkId) external;\n', '    function changeNetworkReward(bytes32 _networkId, uint256 _updatedRewardWeight) external;\n', '    function feed(bytes32 _networkId, address[] calldata _clusters, uint256[] calldata _payouts, uint256 _epoch) external;\n', '    function getRewardPerEpoch(bytes32 _networkId) external view returns(uint256);\n', '    function claimReward(address _cluster) external returns(uint256);\n', '    function updateRewardDelegatorAddress(address _updatedRewardDelegator) external;\n', '    function updatePONDAddress(address _updatedPOND) external;\n', '    function changeRewardPerEpoch(uint256 _updatedRewardPerEpoch) external;\n', '    function changePayoutDenomination(uint256 _updatedPayoutDenomination) external;\n', '    function updateRewardDistributionWaitTime(uint256 _updatedRewardDistributionWaitTime) external;\n', '}\n', '\n', '// File: contracts/Stake/IClusterRegistry.sol\n', '\n', 'pragma solidity ^0.5.17;\n', 'interface IClusterRegistry {\n', '    function locks(bytes32 _lockId) external returns(uint256, uint256);\n', '    function lockWaitTime(bytes32 _selectorId) external returns(uint256);\n', '    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) external;\n', '    function register(bytes32 _networkId, uint256 _commission, address _rewardAddress, address _clientKey) external returns(bool);\n', '    function updateCluster(uint256 _commission, bytes32 _networkId, address _rewardAddress, address _clientKey) external;\n', '    function updateCommission(uint256 _commission) external;\n', '    function switchNetwork(bytes32 _networkId) external;\n', '    function updateRewardAddress(address _rewardAddress) external;\n', '    function updateClientKey(address _clientKey) external;\n', '    function unregister() external;\n', '    function isClusterValid(address _cluster) external returns(bool);\n', '    function getCommission(address _cluster) external returns(uint256);\n', '    function getNetwork(address _cluster) external returns(bytes32);\n', '    function getRewardAddress(address _cluster) external view returns(address);\n', '    function getClientKey(address _cluster) external view returns(address);\n', '    function getCluster(address _cluster) external;\n', '}\n', '\n', '// File: contracts/Stake/RewardDelegators.sol\n', '\n', 'pragma solidity >=0.4.21 <0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract RewardDelegators is Initializable, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Cluster {\n', '        mapping(bytes32 => uint256) totalDelegations;\n', '        mapping(address => mapping(bytes32 => uint256)) delegators;\n', '        mapping(address => mapping(bytes32 => uint256)) rewardDebt;\n', '        mapping(bytes32 => uint256) accRewardPerShare;\n', '    }\n', '\n', '    mapping(address => Cluster) clusters;\n', '\n', '    uint256 __unused_2;\n', '    address stakeAddress;\n', '    uint256 public minMPONDStake;\n', '    bytes32 public MPONDTokenId;\n', '    mapping(bytes32 => uint256) rewardFactor;\n', '    mapping(bytes32 => uint256) tokenIndex;\n', '    mapping(bytes32 => bytes32) __unused_1;\n', '    bytes32[] tokenList;\n', '    IClusterRewards clusterRewards;\n', '    IClusterRegistry clusterRegistry;\n', '    ERC20 PONDToken;\n', '\n', '    event AddReward(bytes32 tokenId, uint256 rewardFactor);\n', '    event RemoveReward(bytes32 tokenId);\n', '    event MPONDTokenIdUpdated(bytes32 MPONDTokenId);\n', '    event RewardsUpdated(bytes32 tokenId, uint256 rewardFactor);\n', '    event ClusterRewardDistributed(address cluster);\n', '    event RewardsWithdrawn(address cluster, address delegator, bytes32[] tokenIds, uint256 rewards);\n', '    event MinMPONDStakeUpdated(uint256 minMPONDStake);\n', '\n', '    modifier onlyStake() {\n', '        require(msg.sender == stakeAddress, "RD:OS-only stake contract can invoke");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        address _stakeAddress,\n', '        address _clusterRewardsAddress,\n', '        address _clusterRegistry,\n', '        address _rewardDelegatorsAdmin,\n', '        uint256 _minMPONDStake,\n', '        bytes32 _MPONDTokenId,\n', '        address _PONDAddress,\n', '        bytes32[] memory _tokenIds,\n', '        uint256[] memory _rewardFactors\n', '    ) public initializer {\n', '        require(\n', '            _tokenIds.length == _rewardFactors.length,\n', '            "RD:I-Each TokenId should have a corresponding Reward Factor and vice versa"\n', '        );\n', '        stakeAddress = _stakeAddress;\n', '        clusterRegistry = IClusterRegistry(_clusterRegistry);\n', '        clusterRewards = IClusterRewards(_clusterRewardsAddress);\n', '        PONDToken = ERC20(_PONDAddress);\n', '        minMPONDStake = _minMPONDStake;\n', '        emit MinMPONDStakeUpdated(_minMPONDStake);\n', '        MPONDTokenId = _MPONDTokenId;\n', '        emit MPONDTokenIdUpdated(_MPONDTokenId);\n', '        for(uint256 i=0; i < _tokenIds.length; i++) {\n', '            rewardFactor[_tokenIds[i]] = _rewardFactors[i];\n', '            tokenIndex[_tokenIds[i]] = tokenList.length;\n', '            tokenList.push(_tokenIds[i]);\n', '            emit AddReward(_tokenIds[i], _rewardFactors[i]);\n', '        }\n', '        super.initialize(_rewardDelegatorsAdmin);\n', '    }\n', '\n', '    function updateMPONDTokenId(bytes32 _updatedMPONDTokenId) public onlyOwner {\n', '        MPONDTokenId = _updatedMPONDTokenId;\n', '        emit MPONDTokenIdUpdated(_updatedMPONDTokenId);\n', '    }\n', '\n', '    function addRewardFactor(bytes32 _tokenId, uint256 _rewardFactor) public onlyOwner {\n', '        require(rewardFactor[_tokenId] == 0, "RD:AR-Reward already exists");\n', '        require(_rewardFactor != 0, "RD:AR-Reward cant be 0");\n', '        rewardFactor[_tokenId] = _rewardFactor;\n', '        tokenIndex[_tokenId] = tokenList.length;\n', '        tokenList.push(_tokenId);\n', '        emit AddReward(_tokenId, _rewardFactor);\n', '    }\n', '\n', '    function removeRewardFactor(bytes32 _tokenId) public onlyOwner {\n', '        require(rewardFactor[_tokenId] != 0, "RD:RR-Reward doesnt exist");\n', '        bytes32 tokenToReplace = tokenList[tokenList.length - 1];\n', '        uint256 originalTokenIndex = tokenIndex[_tokenId];\n', '        tokenList[originalTokenIndex] = tokenToReplace;\n', '        tokenIndex[tokenToReplace] = originalTokenIndex;\n', '        tokenList.pop();\n', '        delete rewardFactor[_tokenId];\n', '        delete tokenIndex[_tokenId];\n', '        emit RemoveReward(_tokenId);\n', '    }\n', '\n', '    function updateRewardFactor(bytes32 _tokenId, uint256 _updatedRewardFactor) public onlyOwner {\n', '        require(rewardFactor[_tokenId] != 0, "RD:UR-Cant update reward that doesnt exist");\n', '        require(_updatedRewardFactor != 0, "RD:UR-Reward cant be 0");\n', '        rewardFactor[_tokenId] = _updatedRewardFactor;\n', '        emit RewardsUpdated(_tokenId, _updatedRewardFactor);\n', '    }\n', '\n', '    function _updateRewards(address _cluster) public {\n', '        uint256 reward = clusterRewards.claimReward(_cluster);\n', '        if(reward == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 commissionReward = reward.mul(clusterRegistry.getCommission(_cluster)).div(100);\n', '        uint256 delegatorReward = reward.sub(commissionReward);\n', '        bytes32[] memory tokens = tokenList;\n', '        uint256[] memory delegations = new uint256[](tokens.length);\n', '        uint256 delegatedTokens = 0;\n', '        for(uint i=0; i < tokens.length; i++) {\n', '            delegations[i] = clusters[_cluster].totalDelegations[tokens[i]];\n', '            if(delegations[i] != 0) {\n', '                delegatedTokens++;\n', '            }\n', '        }\n', '        for(uint i=0; i < tokens.length; i++) {\n', '            // clusters[_cluster].accRewardPerShare[tokens[i]] = clusters[_cluster].accRewardPerShare[tokens[i]].add(\n', '            //                                                         delegatorReward\n', '            //                                                         .mul(rewardFactor[tokens[i]])\n', '            //                                                         .mul(10**30)\n', '            //                                                         .div(weightedStake)\n', '            //                                                     );\n', '            if(delegations[i] != 0) {\n', '                clusters[_cluster].accRewardPerShare[tokens[i]] = clusters[_cluster].accRewardPerShare[tokens[i]].add(\n', '                                                                    delegatorReward\n', '                                                                    .mul(10**30)\n', '                                                                    .div(delegatedTokens)\n', '                                                                    .div(delegations[i])\n', '                                                                );\n', '            }\n', '        }\n', '        transferRewards(clusterRegistry.getRewardAddress(_cluster), commissionReward);\n', '        emit ClusterRewardDistributed(_cluster);\n', '    }\n', '\n', '    function delegate(\n', '        address _delegator,\n', '        address _cluster,\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts\n', '    ) public onlyStake {\n', '        _updateTokens(_delegator, _cluster, _tokens, _amounts, true);\n', '    }\n', '\n', '    function _updateTokens(\n', '        address _delegator,\n', '        address _cluster,\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts,\n', '        bool _isDelegation\n', '    ) internal returns(uint256 _aggregateReward) {\n', '        _updateRewards(_cluster);\n', '\n', '        for(uint256 i = 0; i < _tokens.length; i++) {\n', '            bytes32 _tokenId = _tokens[i];\n', '            uint256 _amount = _amounts[i];\n', '\n', '            (uint256 _oldBalance, uint256 _newBalance) = _updateBalances(\n', '                _cluster,\n', '                _delegator,\n', '                _tokenId,\n', '                _amount,\n', '                _isDelegation\n', '            );\n', '\n', '            uint256 _reward = _updateDelegatorRewards(\n', '                _cluster,\n', '                _delegator,\n', '                _tokenId,\n', '                _oldBalance,\n', '                _newBalance\n', '            );\n', '\n', '            _aggregateReward = _aggregateReward.add(_reward);\n', '        }\n', '\n', '        if(_aggregateReward != 0) {\n', '            transferRewards(_delegator, _aggregateReward);\n', '            emit RewardsWithdrawn(_cluster, _delegator, _tokens, _aggregateReward);\n', '        }\n', '    }\n', '\n', '    function _updateBalances(\n', '        address _cluster,\n', '        address _delegator,\n', '        bytes32 _tokenId,\n', '        uint256 _amount,\n', '        bool _isDelegation\n', '    ) internal returns(uint256 _oldBalance, uint256 _newBalance) {\n', '        _oldBalance = clusters[_cluster].delegators[_delegator][_tokenId];\n', '\n', '        // short circuit\n', '        if(_amount == 0) {\n', '            _newBalance = _oldBalance;\n', '            return (_oldBalance, _newBalance);\n', '        }\n', '\n', '        // update balances\n', '        if(_isDelegation) {\n', '            _newBalance =  _oldBalance.add(_amount);\n', '            clusters[_cluster].totalDelegations[_tokenId] = clusters[_cluster].totalDelegations[_tokenId]\n', '                                                            .add(_amount);\n', '        } else {\n', '            _newBalance =  _oldBalance.sub(_amount);\n', '            clusters[_cluster].totalDelegations[_tokenId] = clusters[_cluster].totalDelegations[_tokenId]\n', '                                                            .sub(_amount);\n', '        }\n', '        clusters[_cluster].delegators[_delegator][_tokenId] = _newBalance;\n', '    }\n', '\n', '    function _updateDelegatorRewards(\n', '        address _cluster,\n', '        address _delegator,\n', '        bytes32 _tokenId,\n', '        uint256 _oldBalance,\n', '        uint256 _newBalance\n', '    ) internal returns(uint256 _reward) {\n', '        uint256 _accRewardPerShare = clusters[_cluster].accRewardPerShare[_tokenId];\n', '        uint256 _rewardDebt = clusters[_cluster].rewardDebt[_delegator][_tokenId];\n', '\n', '        // pending rewards\n', '        uint256 _tokenPendingRewards =  _accRewardPerShare.mul(_oldBalance).div(10**30);\n', '\n', '        // calculating pending rewards for the delegator if any\n', '        _reward = _tokenPendingRewards.sub(_rewardDebt);\n', '\n', '        // short circuit\n', '        if(_oldBalance == _newBalance && _reward == 0) {\n', '            return _reward;\n', '        }\n', '\n', '        // update the debt for next reward calculation\n', '        clusters[_cluster].rewardDebt[_delegator][_tokenId] = _accRewardPerShare.mul(_newBalance).div(10**30);\n', '    }\n', '\n', '    function undelegate(\n', '        address _delegator,\n', '        address _cluster,\n', '        bytes32[] memory _tokens,\n', '        uint256[] memory _amounts\n', '    ) public onlyStake {\n', '        _updateTokens(_delegator, _cluster, _tokens, _amounts, false);\n', '    }\n', '\n', '    function withdrawRewards(address _delegator, address _cluster) external returns(uint256) {\n', '        return _updateTokens(_delegator, _cluster, tokenList, new uint256[](tokenList.length), true);\n', '    }\n', '\n', '    function transferRewards(address _to, uint256 _amount) internal {\n', '        PONDToken.transfer(_to, _amount);\n', '    }\n', '\n', '    function isClusterActive(address _cluster) public returns(bool) {\n', '        if(\n', '            clusterRegistry.isClusterValid(_cluster)\n', '            && clusters[_cluster].totalDelegations[MPONDTokenId] > minMPONDStake\n', '        ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getClusterDelegation(address _cluster, bytes32 _tokenId)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return clusters[_cluster].totalDelegations[_tokenId];\n', '    }\n', '\n', '    function getDelegation(address _cluster, address _delegator, bytes32 _tokenId)\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return clusters[_cluster].delegators[_delegator][_tokenId];\n', '    }\n', '\n', '    function updateMinMPONDStake(uint256 _minMPONDStake) public onlyOwner {\n', '        minMPONDStake = _minMPONDStake;\n', '        emit MinMPONDStakeUpdated(_minMPONDStake);\n', '    }\n', '\n', '    function updateStakeAddress(address _updatedStakeAddress) public onlyOwner {\n', '        require(\n', '            _updatedStakeAddress != address(0),\n', '            "RD:USA-Stake contract address cant be 0"\n', '        );\n', '        stakeAddress = _updatedStakeAddress;\n', '    }\n', '\n', '    function updateClusterRewards(\n', '        address _updatedClusterRewards\n', '    ) public onlyOwner {\n', '        require(\n', '            _updatedClusterRewards != address(0),\n', '            "RD:UCR-ClusterRewards address cant be 0"\n', '        );\n', '        clusterRewards = IClusterRewards(_updatedClusterRewards);\n', '    }\n', '\n', '    function updateClusterRegistry(\n', '        address _updatedClusterRegistry\n', '    ) public onlyOwner {\n', '        require(\n', '            _updatedClusterRegistry != address(0),\n', '            "RD:UCR-Cluster Registry address cant be 0"\n', '        );\n', '        clusterRegistry = IClusterRegistry(_updatedClusterRegistry);\n', '    }\n', '\n', '    function updatePONDAddress(address _updatedPOND) public onlyOwner {\n', '        require(\n', '            _updatedPOND != address(0),\n', '            "RD:UPA-Updated POND token address cant be 0"\n', '        );\n', '        PONDToken = ERC20(_updatedPOND);\n', '    }\n', '\n', '    function getFullTokenList() public view returns (bytes32[] memory) {\n', '        return tokenList;\n', '    }\n', '\n', '    function getAccRewardPerShare(address _cluster, bytes32 _tokenId) public view returns(uint256) {\n', '        return clusters[_cluster].accRewardPerShare[_tokenId];\n', '    }\n', '}']