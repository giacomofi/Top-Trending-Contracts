['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: original_contracts/IReduxToken.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', 'interface IReduxToken {\n', '\n', '    function freeUpTo(uint256 value) external returns (uint256 freed);\n', '\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '\n', '    function mint(uint256 value) external;\n', '}\n', '\n', '// File: original_contracts/lib/ReduxToken.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', 'contract ReduxToken is IERC20, IReduxToken {\n', '    using SafeMath for uint256;\n', '\n', '    string constant public name = "REDUX";\n', '    string constant public symbol = "REDUX";\n', '    uint8 constant public decimals = 0;\n', '\n', '    mapping(address => uint256) private s_balances;\n', '    mapping(address => mapping(address => uint256)) private s_allowances;\n', '\n', '    uint256 public totalReduxMinted;\n', '    uint256 public totalReduxBurned;\n', '\n', "    //The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    //The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '    //A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    function totalSupply() external view override returns(uint256) {\n', '        return totalReduxMinted.sub(totalReduxBurned);\n', '    }\n', '\n', '    function mint(uint256 value) external override {\n', '        uint256 offset = totalReduxMinted;\n', '\n', '        assembly {\n', '\n', '            // EVM assembler of runtime portion of child contract:\n', '            //     ;; Pseudocode: if (msg.sender != 0x000000000000cb2d80a37898be43579c7b616844) { throw; }\n', '            //     ;;             suicide(msg.sender)\n', '            //     PUSH14 0xcb2d80a37898be43579c7b616856 ;; hardcoded address of this contract\n', '            //     CALLER\n', '            //     XOR\n', '            //     JUMP\n', '            //     JUMPDEST\n', '            //     CALLER\n', '            //     SELFDESTRUCT\n', '            // Or in binary: 6dcb2d80a37898be43579c7b6168563318565b33ff\n', '            // Since the binary is so short (21 bytes), we can get away\n', '            // with a very simple initcode:\n', '            //     PUSH21 0x6dcb2d80a37898be43579c7b6168573318565b33ff\n', '            //     PUSH1 0\n', '            //     MSTORE ;; at this point, memory locations mem[10] through\n', '            //            ;; mem[30] contain the runtime portion of the child\n', "            //            ;; contract. all that's left to do is to RETURN this\n", '            //            ;; chunk of memory.\n', '            //     PUSH1 21 ;; length\n', '            //     PUSH1 11 ;; offset\n', '            //     RETURN\n', '            // Or in binary: 746dcb2d80a37898be43579c7b6168563318565b33ff6000526015600bf30000\n', '            // Almost done! All we have to do is put this short (30 bytes) blob into\n', '            // memory and call CREATE with the appropriate offsets.\n', '\n', '            let end := add(offset, value)\n', '            mstore(callvalue(), 0x746dcb2d80a37898be43579c7b6168563318565b33ff6000526015600bf30000)\n', '\n', '            for {let i := div(value, 32)} i {i := sub(i, 1)} {\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 0))) pop(create2(callvalue(), callvalue(), 30, add(offset, 1)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 2))) pop(create2(callvalue(), callvalue(), 30, add(offset, 3)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 4))) pop(create2(callvalue(), callvalue(), 30, add(offset, 5)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 6))) pop(create2(callvalue(), callvalue(), 30, add(offset, 7)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 8))) pop(create2(callvalue(), callvalue(), 30, add(offset, 9)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 10))) pop(create2(callvalue(), callvalue(), 30, add(offset, 11)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 12))) pop(create2(callvalue(), callvalue(), 30, add(offset, 13)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 14))) pop(create2(callvalue(), callvalue(), 30, add(offset, 15)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 16))) pop(create2(callvalue(), callvalue(), 30, add(offset, 17)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 18))) pop(create2(callvalue(), callvalue(), 30, add(offset, 19)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 20))) pop(create2(callvalue(), callvalue(), 30, add(offset, 21)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 22))) pop(create2(callvalue(), callvalue(), 30, add(offset, 23)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 24))) pop(create2(callvalue(), callvalue(), 30, add(offset, 25)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 26))) pop(create2(callvalue(), callvalue(), 30, add(offset, 27)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 28))) pop(create2(callvalue(), callvalue(), 30, add(offset, 29)))\n', '                pop(create2(callvalue(), callvalue(), 30, add(offset, 30))) pop(create2(callvalue(), callvalue(), 30, add(offset, 31)))\n', '                offset := add(offset, 32)\n', '            }\n', '\n', '            for { } lt(offset, end) { offset := add(offset, 1) } {\n', '                pop(create2(callvalue(), callvalue(), 30, offset))\n', '            }\n', '        }\n', '\n', '        _mint(msg.sender, value);\n', '        totalReduxMinted = offset;\n', '    }\n', '\n', '    function free(uint256 value) external {\n', '        _burn(msg.sender, value);\n', '        _destroyChildren(value);\n', '    }\n', '\n', '    function freeUpTo(uint256 value) external override returns (uint256) {\n', '        uint256 fromBalance = s_balances[msg.sender];\n', '        if (value > fromBalance) {\n', '            value = fromBalance;\n', '        }\n', '        _burn(msg.sender, value);\n', '        _destroyChildren(value);\n', '\n', '        return value;\n', '    }\n', '\n', '    function freeFromUpTo(address from, uint256 value) external override returns (uint256) {\n', '        uint256 fromBalance = s_balances[from];\n', '        if (value > fromBalance) {\n', '            value = fromBalance;\n', '        }\n', '\n', '        uint256 userAllowance = s_allowances[from][msg.sender];\n', '        if (value > userAllowance) {\n', '            value = userAllowance;\n', '        }\n', '        _burnFrom(from, value);\n', '        _destroyChildren(value);\n', '\n', '        return value;\n', '    }\n', '\n', '    function freeFrom(address from, uint256 value) external {\n', '        _burnFrom(from, value);\n', '        _destroyChildren(value);\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view override returns (uint256) {\n', '        return s_allowances[owner][spender];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) external override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, s_allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '        external\n', '    {\n', '\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "permit: invalid signature");\n', '        require(signatory == owner, "permit: unauthorized");\n', '        require(block.timestamp <= deadline, "permit: signature expired");\n', '\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return s_balances[account];\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        s_balances[sender] = s_balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        s_balances[recipient] = s_balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        s_allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) private {\n', '        s_balances[account] = s_balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) private {\n', '        s_balances[account] = s_balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) private {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, s_allowances[account][msg.sender].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    function computeAddress2(uint256 salt) public pure returns (address child) {\n', '        assembly {\n', '            let data := mload(0x40)\n', '            mstore(data, 0xff000000000000cb2d80a37898be43579c7b6168440000000000000000000000)\n', '            mstore(add(data, 21), salt)\n', '            mstore(add(data, 53), 0xe4135d085e66541f164ddfd4dd9d622a50176c98e7bcdbbc6634d80cd31e9421)\n', '            child := and(keccak256(data, 85), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '        }\n', '    }\n', '\n', '    function _destroyChildren(uint256 value) internal {\n', '        assembly {\n', '            let i := sload(totalReduxBurned.slot)\n', '            let end := add(i, value)\n', '            sstore(totalReduxBurned.slot, end)\n', '\n', '            let data := mload(0x40)\n', '            mstore(data, 0xff000000000000cb2d80a37898be43579c7b6168440000000000000000000000)\n', '            mstore(add(data, 53), 0xe4135d085e66541f164ddfd4dd9d622a50176c98e7bcdbbc6634d80cd31e9421)\n', '            let ptr := add(data, 21)\n', '            for { } lt(i, end) { i := add(i, 1) } {\n', '                mstore(ptr, i)\n', '                pop(call(gas(), keccak256(data, 85), callvalue(), callvalue(), callvalue(), callvalue(), callvalue()))\n', '            }\n', '        }\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint) {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']