['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/lender/token/memberlist.sol\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity >=0.5.15 >=0.6.12;\n', '\n', '////// lib/tinlake-auth/src/auth.sol\n', '// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n', '/* pragma solidity >=0.5.15; */\n', '\n', 'contract Auth {\n', '    mapping (address => uint256) public wards;\n', '    \n', '    event Rely(address indexed usr);\n', '    event Deny(address indexed usr);\n', '\n', '    function rely(address usr) external auth {\n', '        wards[usr] = 1;\n', '        emit Rely(usr);\n', '    }\n', '    function deny(address usr) external auth {\n', '        wards[usr] = 0;\n', '        emit Deny(usr);\n', '    }\n', '\n', '    modifier auth {\n', '        require(wards[msg.sender] == 1, "not-authorized");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '////// lib/tinlake-math/src/math.sol\n', '// Copyright (C) 2018 Rain <[email\xa0protected]>\n', '/* pragma solidity >=0.5.15; */\n', '\n', 'contract Math {\n', '    uint256 constant ONE = 10 ** 27;\n', '\n', '    function safeAdd(uint x, uint y) public pure returns (uint z) {\n', '        require((z = x + y) >= x, "safe-add-failed");\n', '    }\n', '\n', '    function safeSub(uint x, uint y) public pure returns (uint z) {\n', '        require((z = x - y) <= x, "safe-sub-failed");\n', '    }\n', '\n', '    function safeMul(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");\n', '    }\n', '\n', '    function safeDiv(uint x, uint y) public pure returns (uint z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function rmul(uint x, uint y) public pure returns (uint z) {\n', '        z = safeMul(x, y) / ONE;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) public pure returns (uint z) {\n', '        require(y > 0, "division by zero");\n', '        z = safeAdd(safeMul(x, ONE), y / 2) / y;\n', '    }\n', '\n', '    function rdivup(uint x, uint y) internal pure returns (uint z) {\n', '        require(y > 0, "division by zero");\n', '        // always rounds up\n', '        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\n', '    }\n', '\n', '\n', '}\n', '\n', '////// src/lender/token/memberlist.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', '/* import "tinlake-math/math.sol"; */\n', '/* import "tinlake-auth/auth.sol"; */\n', '\n', 'contract Memberlist is Math, Auth {\n', '\n', '    uint constant minimumDelay = 7 days;\n', '\n', '    // -- Members--\n', '    mapping (address => uint) public members;\n', '    function updateMember(address usr, uint validUntil) public auth {\n', '        require((safeAdd(block.timestamp, minimumDelay)) < validUntil);\n', '        members[usr] = validUntil;\n', '     }\n', '\n', '    function updateMembers(address[] memory users, uint validUntil) public auth {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            updateMember(users[i], validUntil);\n', '        }\n', '    }\n', '\n', '    constructor() {\n', '        wards[msg.sender] = 1;\n', '    }\n', '\n', '    function member(address usr) public view {\n', '        require((members[usr] >= block.timestamp), "not-allowed-to-hold-token");\n', '    }\n', '\n', '    function hasMember(address usr) public view returns (bool) {\n', '        if (members[usr] >= block.timestamp) {\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '}']