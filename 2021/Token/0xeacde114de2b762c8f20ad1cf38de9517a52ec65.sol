['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-06-11\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IMatchingMarket.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'interface IMatchingMarket {\n', '\n', '    struct OfferInfo {\n', '        uint      pay_amt;\n', '        IERC20    pay_gem;\n', '        uint      buy_amt;\n', '        IERC20    buy_gem;\n', '        address   owner;\n', '        uint64    timestamp;\n', '    }\n', '\n', '    function getBestOffer(IERC20 sell_gem, IERC20 buy_gem) external view returns(uint);\n', '    function getWorseOffer(uint id) external view returns(uint);\n', '    function offers(uint) external view returns(OfferInfo memory);\n', '    function getOfferCount(IERC20 sell_gem, IERC20 buy_gem) external view returns(uint);\n', '}\n', '\n', '// File: contracts/OasisOrderBookHelper.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract OasisOrderBookHelper {\n', '\n', '    IMatchingMarket constant oasisExchange = IMatchingMarket(0x5e3e0548935a83aD29fb2A9153d331dc6d49020f);\n', '\n', '    struct Offer {\n', '        uint256   payAmount;\n', '        IERC20    payToken;\n', '        uint256   buyAmount;\n', '        IERC20    buyToken;\n', '    }\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function getOrderBookByPairs(\n', '        IERC20[] calldata tokens0,\n', '        IERC20[] calldata tokens1,\n', '        uint256 maxOrders\n', '    )\n', '        external\n', '        view\n', '        returns (Offer[][][] memory orders)\n', '    {\n', '        orders = new Offer[][][](tokens0.length);\n', '        for (uint i = 0; i < tokens0.length; i++) {\n', '            orders[i] = getOrderBookByPair(tokens0[i], tokens1[i], maxOrders);\n', '        }\n', '    }\n', '\n', '    function getOrderBookByPair(\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        uint256 maxOrders\n', '    )\n', '        public\n', '        view\n', '        returns (Offer[][] memory orders)\n', '    {\n', '        orders = new Offer[][](2);\n', '        orders[0] = getOrdersByPair(token0, token1, maxOrders); // bids\n', '        orders[1] = getOrdersByPair(token1, token0, maxOrders); // asks\n', '    }\n', '\n', '    function getOrdersByPair(\n', '        IERC20 sellToken,\n', '        IERC20 buyToken,\n', '        uint256 maxOrders\n', '    )\n', '        public\n', '        view\n', '        returns (Offer[] memory orders)\n', '    {\n', '\n', '        uint256 offersCount = oasisExchange.getOfferCount(sellToken, buyToken);\n', '        if (offersCount > maxOrders) {\n', '            offersCount = maxOrders;\n', '        }\n', '        uint256 offerId = oasisExchange.getBestOffer(sellToken, buyToken);\n', '        orders = new Offer[](offersCount);\n', '        for(uint i = 0; i < offersCount; i++) {\n', '            IMatchingMarket.OfferInfo memory info = oasisExchange.offers(offerId);\n', '            orders[i].payAmount =  info.pay_amt;\n', '            orders[i].payToken  =  info.pay_gem;\n', '            orders[i].buyAmount =  info.buy_amt;\n', '            orders[i].buyToken  =  info.buy_gem;\n', '            offerId = oasisExchange.getWorseOffer(offerId);\n', '        }\n', '    }\n', '}']