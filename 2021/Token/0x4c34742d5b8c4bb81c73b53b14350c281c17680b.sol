['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Interface {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public returns (uint256 remaining);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    \n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnerShip(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Interface {\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    constructor(string _name, string _symbol, uint8 _decimals, uint _totalSupply) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply;\n', '        balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        \n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract AdvanceToken is ERC20,owned {\n', '    mapping(address => bool) public frozenAccount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address target, uint amount);\n', '    \n', '    constructor (string _name, string _symbol, uint8 _decimals, uint _totalSupply) ERC20(_name, _symbol, _decimals, _totalSupply) public {\n', '        \n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(!frozenAccount[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        \n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(!frozenAccount[_from]);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '        totalSupply -= _value;\n', '        balanceOf[msg.sender] -= _value;\n', '        \n', '        emit Burn(msg.sender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        \n', '        totalSupply -= _value;\n', '        balanceOf[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        \n', '        emit Burn(_from, _value);\n', '        \n', '        return true;\n', '    }\n', '}']