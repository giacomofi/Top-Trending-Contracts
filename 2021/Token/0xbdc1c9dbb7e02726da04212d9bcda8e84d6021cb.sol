['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IAuctionHouse {\n', '    function buy(\n', '        uint256 wethInMax,\n', '        uint256 bankInMax,\n', '        uint256 floatOutMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function sell(\n', '        uint256 floatIn,\n', '        uint256 wethOutMin,\n', '        uint256 bankOutMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '}\n', '\n', 'contract FloatBuyer {\n', '    address owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function withdrawERC20(address tokenAddress) public onlyOwner {\n', '        IERC20 token = IERC20(tokenAddress);\n', '        token.transferFrom(\n', '            address(this),\n', '            msg.sender,\n', '            token.balanceOf(address(this))\n', '        );\n', '    }\n', '\n', '    function approve(\n', '        address tokenAddress,\n', '        uint256 amount,\n', '        address spender\n', '    ) public onlyOwner {\n', '        IERC20(tokenAddress).approve(spender, amount);\n', '    }\n', '\n', '    function executeAndBuy(\n', '        address floatAddress,\n', '        address usdcTokenAddress,\n', '        uint256 usdcTokenAmount,\n', '        address dexAddress,\n', '        bytes memory dexData,\n', '        address auctionHouse,\n', '        uint256 wethInMax,\n', '        uint256 bankInMax,\n', '        uint256 floatOutMin,\n', '        uint256 deadline\n', '    ) public {\n', '        // transfer usdc in\n', '        IERC20 usdc = IERC20(usdcTokenAddress);\n', '        usdc.transferFrom(msg.sender, address(this), usdcTokenAmount);\n', '\n', '        (bool success1, ) = dexAddress.call(dexData);\n', '        require(success1, "dex trade not sucessful");\n', '\n', '        // buy float\n', '        IAuctionHouse(auctionHouse).buy(\n', '            wethInMax,\n', '            bankInMax,\n', '            floatOutMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '\n', '        // transfer float out\n', '        _sendOutAll(IERC20(floatAddress));\n', '        // transfer leftover usdc\n', '        _sendOutAll(usdc);\n', '    }\n', '\n', '    function executeAndSell(\n', '        address floatAddress,\n', '        address usdcTokenAddress,\n', '        address wethTokenAddress,\n', '        address dexAddress,\n', '        bytes memory dexData,\n', '        address auctionHouse,\n', '        uint256 floatIn,\n', '        uint256 wethOutMin,\n', '        uint256 bankOutMin,\n', '        uint256 deadline\n', '    ) public {\n', '        // transfer float in\n', '        IERC20 float = IERC20(floatAddress);\n', '        float.transferFrom(msg.sender, address(this), floatIn);\n', '\n', '        // sell float for WETH\n', '        IAuctionHouse(auctionHouse).sell(\n', '            floatIn,\n', '            wethOutMin,\n', '            bankOutMin,\n', '            address(this),\n', '            deadline\n', '        );\n', '\n', '        // sell WETH for USDC\n', '        (bool success1, ) = dexAddress.call(dexData);\n', '        require(success1, "dex trade not sucessful");\n', '\n', '        // transfer USDC out\n', '        _sendOutAll(IERC20(usdcTokenAddress));\n', '        // transfer leftover float\n', '        _sendOutAll(float);\n', '        // transfer leftover weth\n', '        _sendOutAll(IERC20(wethTokenAddress));\n', '    }\n', '\n', '    function executeArbitrary(\n', '        address targetAddress,\n', '        bytes memory targetCallData\n', '    ) public onlyOwner returns (bool) {\n', '        (bool success, ) = targetAddress.call(targetCallData);\n', '        return success;\n', '    }\n', '\n', '    function _sendOutAll(IERC20 token) private {\n', '        token.transferFrom(\n', '            address(this),\n', '            msg.sender,\n', '            token.balanceOf(address(this))\n', '        );\n', '    }\n', '}']