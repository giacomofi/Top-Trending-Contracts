['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  using SafeMath for uint256;\n', '  uint256 public startdate;\n', '\n', '  function Ownable() public {\n', '\n', '    owner = msg.sender;\n', '    startdate = now;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  mapping(address => uint256) private _lock_list_period;\n', '  mapping(address => bool) private _lock_list;\n', '  bool public paused = false;\n', '  mapping(address => uint256) internal _balances;\n', '  uint256 internal _tokenSupply;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   *\n', '   */\n', '\n', '\n', '\n', '  modifier isLockAddress() {\n', '    check_lock_period(msg.sender);\n', '    if(_lock_list[msg.sender]){\n', '        revert();\n', '    }\n', '\n', '    _;\n', '\n', '  }\n', '\n', '  function check_lock_period(address check_address) {\n', '      if(now > _lock_list_period[check_address] && _lock_list[check_address]){\n', '        _lock_list[check_address] = false;\n', '        _tokenSupply = _tokenSupply.add(_balances[check_address]);\n', '      }\n', '\n', '  }\n', '\n', '  function check_period(address check_address) constant public returns(uint256){\n', '      return _lock_list_period[check_address];\n', '\n', '  }\n', '\n', '  function check_lock(address check_address) constant public returns(bool){\n', '\n', '      return _lock_list[check_address];\n', '\n', '  }\n', '  /**\n', '   *\n', '   */\n', '  function set_lock_list(address lock_address, uint period) onlyOwner external {\n', '      _lock_list_period[lock_address] = startdate + (period * 1 days);\n', '      _lock_list[lock_address]  = true;\n', '      _tokenSupply = _tokenSupply.sub(_balances[lock_address]);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20Token.sol\n', '\n', 'interface ERC20Token {\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: contracts/ERC223.sol\n', '\n', 'interface ERC223 {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/Receiver_Interface.sol\n', '\n', '/*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '\n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '// File: contracts/NTH.sol\n', '\n', 'contract NTH is ERC20Token, Pausable, ERC223{\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "NTH";\n', '    string public constant symbol = "NTH";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint private _totalSupply;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowed;\n', '    event MintedLog(address to, uint256 amount);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '\n', '    function NTH() public {\n', '        _tokenSupply = 0;\n', '        _totalSupply = 10000000000 * (uint256(10) ** decimals);\n', '\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _tokenSupply;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) onlyOwner public returns (bool){\n', '\n', '        amount = amount * (uint256(10) ** decimals);\n', '        if(_totalSupply + 1 > (_tokenSupply+amount)){\n', '            _tokenSupply = _tokenSupply.add(amount);\n', '            _balances[to]= _balances[to].add(amount);\n', '            emit MintedLog(to, amount);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function dist_list_set(address[] dist_list, uint256[] token_list) onlyOwner external{\n', '\n', '        for(uint i=0; i < dist_list.length ;i++){\n', '            transfer(dist_list[i],token_list[i]);\n', '        }\n', '\n', '    }\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) whenNotPaused isLockAddress public returns(bool success){\n', '    bytes memory empty;\n', '    \tif(isContract(to)) {\n', '        \treturn transferToContract(to, tokens, empty);\n', '    \t}\n', '    \telse {\n', '        \treturn transferToAddress(to, tokens, empty);\n', '    \t}\n', '    }\n', '\n', '\n', '    function approve(address spender, uint256 tokens) public returns (bool success) {\n', '\n', '        if (tokens > 0 && balanceOf(msg.sender) >= tokens) {\n', '            _allowed[msg.sender][spender] = tokens;\n', '            emit Approval(msg.sender, spender, tokens);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n', '        if (tokens > 0 && balanceOf(from) >= tokens && _allowed[from][msg.sender] >= tokens) {\n', '            _balances[from] = _balances[from].sub(tokens);\n', '            _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\n', '            _balances[to] = _balances[to].add(tokens);\n', '            emit Transfer(msg.sender, to, tokens);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function burn(uint256 tokens) public returns (bool success) {\n', '        if ( tokens > 0 && balanceOf(msg.sender) >= tokens ) {\n', '            _balances[msg.sender] = _balances[msg.sender].sub(tokens);\n', '            _tokenSupply = _tokenSupply.sub(tokens);\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    _balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    _balances[_to] = balanceOf(_to).add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    _balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    _balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '}\n', '\n', '\n', '\n', '    function isContract(address _addr) view returns (bool is_contract){\n', '      uint length;\n', '      assembly {\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '    function () public payable {\n', '        throw;\n', '\n', '    }\n', '}']