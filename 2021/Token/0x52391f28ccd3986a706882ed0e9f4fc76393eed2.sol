['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', 'pragma solidity ^0.4.22;\n', 'interface Token {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value && _value >= 0);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value && _value >= 0);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 supply;\n', '}\n', '\n', 'contract aaaa is StandardToken { \n', '    string public name;                  \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', "    string public version = 'H1.0';\n", '    uint256 public unitsOneEthCanBuy;     \n', '    uint256 public totalEthInWei;         \n', '    address public fundsWallet;           \n', '\n', '    function aaaa() public {\n', '        balances[msg.sender] = 10000000000000000000000000000;            \n', '        supply = 10000000000000000000000000000 ;                     \n', '        name = "ezswap";                                  \n', '        decimals = 18;                                               \n', '        symbol = "EZ";                                             \n', '        unitsOneEthCanBuy = 5000000;                                  \n', '        fundsWallet = msg.sender;                                   \n', '    }\n', '\n', '    function() public payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        emit Transfer(fundsWallet, msg.sender, amount); \n', '        fundsWallet.transfer(msg.value);                             \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}']