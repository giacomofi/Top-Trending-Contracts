['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.4;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/* @dev Interface of the ERC20 standard as defined in the EIP. */\n', 'interface IERC20 {\n', '    /* @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /* @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', "    /* @dev Moves amount tokens from the caller's account to recipient.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /* @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', "    /* @dev Sets amount as the allowance of spender over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /* @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /* @dev Emitted when value tokens are moved from one account (from) to\n', '     * another (to).\n', '     *\n', '     * Note that value may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /* @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    \n', '    /* @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /* @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /* @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /* @dev Transfers ownership of the contract to a new account (newOwner).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Bullstake is Ownable {\n', '    IERC20 public token;\n', '    uint256 public totalAmountStaked;\n', '    uint256 public rewardpool;\n', '    uint public minimumStakeValue;\n', '    uint public communityReward;\n', '\n', '    mapping(address => Stake) public staking;\n', '    \n', '    struct Stake {\n', '        address user;\n', '        uint256 amount;\n', '        uint256 timestamp;\n', '    }\n', '    \n', '    \n', '    constructor(IERC20 _token){\n', '        token = _token;\n', '        minimumStakeValue = 10000 ether;\n', '    }\n', '    \n', '    function tranferCommunityToken() external onlyOwner {\n', '        communityReward = 1000000 ether;\n', '        token.transferFrom(msg.sender,address(this),communityReward);\n', '    }\n', '    \n', '   function stake(uint256 amount) external {\n', '        require(staking[msg.sender].amount == 0, "You have already staked");\n', '        require(amount >= minimumStakeValue, "Minimum Stake is 10,000 BULL");\n', '         \n', '        uint256 tax = (amount * 5) / 100;\n', '        uint256 finalamount = amount - tax;\n', '        rewardpool = rewardpool + tax;\n', '        totalAmountStaked = totalAmountStaked + finalamount;\n', '        \n', '        token.transferFrom(msg.sender,address(this),amount);\n', '        staking[msg.sender] = Stake(msg.sender,finalamount, block.timestamp);\n', '        \n', '    }\n', '    \n', '\n', '    function withdrawStake() external {\n', '        require(staking[msg.sender].amount > 0, "No active stake");\n', '        uint256 amountStaked = staking[msg.sender].amount;\n', '        staking[msg.sender].amount = 0;\n', '        \n', '        uint256 tax = (amountStaked * 10) / 100;\n', '        \n', '        uint256 _reward = distributeReward(amountStaked);\n', '        uint256 _finalAmount = amountStaked + _reward - tax;\n', '        rewardpool = rewardpool+ tax;\n', '        \n', '        totalAmountStaked = totalAmountStaked - amountStaked;\n', '        token.transfer(msg.sender,_finalAmount);\n', '    }\n', '    \n', '    function distributeReward(uint256 amountStaked) private returns (uint256) {\n', '        uint256 dreward = (rewardpool * 10) / 100;\n', '        \n', '        rewardpool = rewardpool - dreward;\n', '    \n', '        if(communityReward >= dreward) {\n', '            communityReward = communityReward - dreward;\n', '            dreward = dreward * 2;\n', '        } else {\n', '             dreward += communityReward;\n', '             communityReward = 0;\n', '        }\n', '        \n', '        uint256 _reward = (amountStaked * dreward) / totalAmountStaked;\n', '        return _reward;\n', '    \n', '    }\n', '    \n', '}']