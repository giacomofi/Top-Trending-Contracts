['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.4;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'abstract contract ERC20Basic {\n', '    uint256 public _totalSupply = 100000000000000000000000000; //100 000 000\n', '    function totalSupply() public virtual view returns (uint256);\n', '    function balanceOf(address who) public virtual view returns (uint256);\n', '    function transfer(address to, uint256 value) public virtual returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'abstract contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public virtual view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n', '    function approve(address spender, uint256 value) public virtual returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    // Owner address of contract. Assigned on deployment.\n', '    address payable public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() {\n', '        owner = payable(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address payable newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Standard ERC20 token implementation\n', ' */\n', 'abstract contract StandardToken is ERC20, Ownable {\n', '    // Addresses and balances (in tokens) of all clients. Required by ERC20.\n', '    mapping (address => uint256) balances;\n', '    // Clients, allowed to work. Required by ERC20.\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) override public returns (bool success) {\n', '        if (balances[msg.sender] >= _value\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to])\n', '        {\n', '            uint256 obalance = balances[msg.sender];\n', '            if ( obalance >= _value)\n', '            {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                emit Transfer(msg.sender, _to, _value);\n', '                return true;\n', '            }\n', '            else\n', '            {\n', '                return false;\n', '            }\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) public override view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public override returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/*\n', ' * @title Coin\n', '*/\n', 'contract Coin is StandardToken {\n', '    // A symbol of a coin.\n', '    string public constant symbol = "EXTRA";\n', '    // A name of a coin.\n', '    string public constant name = "ExtraToken";\n', '    // A number of decimals in a coin.\n', '    uint8 public constant decimals = 18;\n', '    \n', '    event TransferFromTo(address indexed _from, address indexed _to, address indexed _by, uint256 _value);\n', '\n', '    /**\n', '    * @dev Constructor of a contract\n', '    */\n', '    constructor() payable {\n', '        owner = payable(msg.sender);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(this), owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev Destructor of a contract.\n', '    */\n', '    function kill() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\n', '        if (msg.sender == owner) {\n', '            allowed[_from][msg.sender] = _value;\n', '        }\n', '\n', '        if (balances[_from] >= _value\n', '        && allowed[_from][msg.sender] >= _value\n', '        && _value > 0)\n', '        {\n', '            uint256 obalance = balances[_from];\n', '            if ( obalance >= _value)\n', '            {\n', '\n', '                balances[_from] -= _value;\n', '                allowed[_from][msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                emit Transfer(_from, _to, _value);\n', '                emit TransferFromTo(_from, _to, msg.sender, _value);\n', '                return true;\n', '            }\n', '            else\n', '            {\n', '                return false;\n', '            }\n', '        }\n', '        else\n', '\t\t{\n', '            return false;\n', '        }\n', '    }\n', '\n', '}']