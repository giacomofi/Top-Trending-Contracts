['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IBasicIssuanceModule {\n', '    function issue(\n', '        address _setToken,\n', '        uint256 _quantity,\n', '        address _to\n', '    ) external;\n', '}\n', '\n', 'contract SetJoiner {\n', '    address constant SET_TOKEN = 0x7b18913D945242A9c313573E6c99064cd940c6aF;\n', '\n', '    IBasicIssuanceModule constant ISSUANCE_MODULE =\n', '        IBasicIssuanceModule(0xd8EF3cACe8b4907117a45B0b125c68560532F94D);\n', '\n', '    IERC20 constant TOKEN = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n', '\n', '    address constant TREASURY_MULTISIG =\n', '        0xe94B5EEC1fA96CEecbD33EF5Baa8d00E4493F4f3;\n', '\n', '    function execute() public {\n', '        require(\n', '            msg.sender == 0x189bC085565697509cFA34131521Dc7981BACDA0 ||\n', '            msg.sender == 0x285b7EEa81a5B66B62e7276a24c1e0F83F7409c1 ||\n', '            msg.sender == TREASURY_MULTISIG\n', '        );\n', '\n', '        uint256 balance = TOKEN.balanceOf(address(this));\n', '\n', '        TOKEN.approve(address(ISSUANCE_MODULE), balance);\n', '\n', '        ISSUANCE_MODULE.issue(SET_TOKEN, balance, TREASURY_MULTISIG);\n', '    }\n', '\n', '    function abort() public {\n', '        require(msg.sender == 0x285b7EEa81a5B66B62e7276a24c1e0F83F7409c1);\n', '        TOKEN.transfer(TREASURY_MULTISIG, TOKEN.balanceOf(address(this)));\n', '    }\n', '}']