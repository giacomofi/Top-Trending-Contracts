['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract TokenLock is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint16;\n', '\n', '    struct TokenGate {\n', '        uint256 startTime;\n', '        uint256 amount;\n', '        uint16 Duration;\n', '        uint16 daysClaimed;\n', '        uint256 totalClaimed;\n', '        address recipient;\n', '    }\n', '\n', '    event GateAdded(address indexed recipient);\n', '    event GateTokensClaimed(address indexed recipient, uint256 amountClaimed);\n', '    event GateRevoked(address recipient, uint256 amountVested, uint256 amountNotVested);\n', '\n', '    ERC20 public token;\n', '    \n', '    mapping (address => TokenGate) private ReleaseAddresses;\n', '\n', '    constructor(ERC20 _token) {\n', '        token = _token;\n', '    }\n', '    \n', '    function addTokenGate(\n', '        address _recipient,\n', '        uint256 _amount,\n', '        uint16 _DurationInDays,\n', '        uint16 _vestingCliffInDays    \n', '    ) \n', '        external\n', '        onlyOwner\n', '    {\n', '        require(ReleaseAddresses[_recipient].amount == 0, "Gate already exists, must revoke first.");\n', '        require(_vestingCliffInDays >= 0, "Cliff not less than 0 days");\n', '        require(_DurationInDays >= 0, "Duration not less than 0 days");\n', '        \n', '        uint256 amountVestedPerDay = _amount.div(_DurationInDays);\n', '        require(amountVestedPerDay >= 0, "amountVestedPerDay > 0");\n', '\n', '        // Transfer the gated tokens under the control of the vesting contract\n', '        require(token.transferFrom(owner(), address(this), _amount));\n', '\n', '        TokenGate memory releaseaddress = TokenGate({\n', '            startTime: currentTime() + _vestingCliffInDays * 1 days,\n', '            amount: _amount,\n', '            Duration: _DurationInDays,\n', '            daysClaimed: 0,\n', '            totalClaimed: 0,\n', '            recipient: _recipient\n', '        });\n', '        ReleaseAddresses[_recipient] = releaseaddress;\n', '        emit GateAdded(_recipient);\n', '    }\n', '\n', '    function claimVestedTokens() external {\n', '        uint16 daysVested;\n', '        uint256 amountVested;\n', '        (daysVested, amountVested) = calculateTokenClaim(msg.sender);\n', '        require(amountVested > 0, "Vested must be greater than 0");\n', '\n', '        TokenGate storage tokenRelease = ReleaseAddresses[msg.sender];\n', '        tokenRelease.daysClaimed = uint16(tokenRelease.daysClaimed.add(daysVested));\n', '        tokenRelease.totalClaimed = uint256(tokenRelease.totalClaimed.add(amountVested));\n', '        \n', '        require(token.transfer(tokenRelease.recipient, amountVested), "no tokens");\n', '        emit GateTokensClaimed(tokenRelease.recipient, amountVested);\n', '    }\n', '\n', '    function revokeTokenGate(address _recipient) \n', '        external \n', '        onlyOwner\n', '    {\n', '        TokenGate storage tokenRelease = ReleaseAddresses[_recipient];\n', '        uint16 daysVested;\n', '        uint256 amountVested;\n', '        (daysVested, amountVested) = calculateTokenClaim(_recipient);\n', '\n', '        uint256 amountNotVested = (tokenRelease.amount.sub(tokenRelease.totalClaimed)).sub(amountVested);\n', '\n', '        require(token.transfer(owner(), amountNotVested));\n', '        require(token.transfer(_recipient, amountVested));\n', '\n', '        tokenRelease.startTime = 0;\n', '        tokenRelease.amount = 0;\n', '        tokenRelease.Duration = 0;\n', '        tokenRelease.daysClaimed = 0;\n', '        tokenRelease.totalClaimed = 0;\n', '        tokenRelease.recipient = address(0);\n', '\n', '        emit GateRevoked(_recipient, amountVested, amountNotVested);\n', '    }\n', '\n', '    function getGateStartTime(address _recipient) public view returns(uint256) {\n', '        TokenGate storage tokenRelease = ReleaseAddresses[_recipient];\n', '        return tokenRelease.startTime;\n', '    }\n', '\n', '    function getGateAmount(address _recipient) public view returns(uint256) {\n', '        TokenGate storage tokenRelease = ReleaseAddresses[_recipient];\n', '        return tokenRelease.amount;\n', '    }\n', '\n', '    function calculateTokenClaim(address _recipient) private view returns (uint16, uint256) {\n', '        TokenGate storage tokenRelease = ReleaseAddresses[_recipient];\n', '\n', '        require(tokenRelease.totalClaimed < tokenRelease.amount, "Release fully claimed");\n', '\n', '        if (currentTime() < tokenRelease.startTime) {\n', '            return (0, 0);\n', '        }\n', '\n', '        uint elapsedDays = currentTime().sub(tokenRelease.startTime - 1 days).div(1 days);\n', '\n', '        if (elapsedDays >= tokenRelease.Duration) {\n', '            uint256 remainingTokens = tokenRelease.amount.sub(tokenRelease.totalClaimed);\n', '            return (tokenRelease.Duration, remainingTokens);\n', '        } else {\n', '            uint16 daysVested = uint16(elapsedDays.sub(tokenRelease.daysClaimed));\n', '            uint256 amountVestedPerDay = tokenRelease.amount.div(uint256(tokenRelease.Duration));\n', '            uint256 amountVested = uint256(daysVested.mul(amountVestedPerDay));\n', '            return (daysVested, amountVested);\n', '        }\n', '    }\n', '\n', '    function currentTime() private view returns(uint256) {\n', '        return block.timestamp;\n', '    }\n', '}']