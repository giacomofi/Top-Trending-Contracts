['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-07-01\n', '*/\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/external/ERC20/InitializableERC20.sol\n', '\n', '\n', '\n', 'contract InitializableERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '\n', '    bool public initialized;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    function init(\n', '        address _creator,\n', '        uint256 _totalSupply,\n', '        string memory _name,\n', '        string memory _symbol,\n', '        uint8 _decimals\n', '    ) public {\n', '        require(!initialized, "TOKEN_INITIALIZED");\n', '        initialized = true;\n', '        totalSupply = _totalSupply;\n', '        balances[_creator] = _totalSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        emit Transfer(address(0), _creator, _totalSupply);\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        require(to != address(0), "TO_ADDRESS_IS_EMPTY");\n', '        require(amount <= balances[msg.sender], "BALANCE_NOT_ENOUGH");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        require(to != address(0), "TO_ADDRESS_IS_EMPTY");\n', '        require(amount <= balances[from], "BALANCE_NOT_ENOUGH");\n', '        require(amount <= allowed[from][msg.sender], "ALLOWANCE_NOT_ENOUGH");\n', '\n', '        balances[from] = balances[from].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        allowed[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '}']