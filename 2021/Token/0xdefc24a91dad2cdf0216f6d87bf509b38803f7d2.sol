['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '// File: contracts/saga-genesis/interfaces/ISGNTokenManager.sol\n', '\n', '/**\n', ' * @title SGN Token Manager Interface.\n', ' */\n', 'interface ISGNTokenManager {\n', '    /**\n', '     * @dev Get the current SGR worth of a given SGN amount.\n', '     * @param _sgnAmount The amount of SGN to convert.\n', '     * @return The equivalent amount of SGR.\n', '     */\n', '    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Exchange SGN for SGR.\n', '     * @param _sender The address of the sender.\n', '     * @param _sgnAmount The amount of SGN received.\n', '     * @return The amount of SGR that the sender is entitled to.\n', '     */\n', '    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Handle direct SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransfer(address _sender, address _to, uint256 _value) external;\n', '\n', '    /**\n', '     * @dev Handle custodian SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _from The address of the source account.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n', '\n', '    /** \n', '     * @dev Upon minting of SGN vested in delay.\n', '     * @param _value The amount of SGN to mint.\n', '     */\n', '    function uponMintSgnVestedInDelay(uint256 _value) external;\n', '}\n', '\n', '// File: contracts/saga-genesis/interfaces/ISagaExchanger.sol\n', '\n', '/**\n', ' * @title Saga Exchanger Interface.\n', ' * @dev Old exchanger adapting by SagaExchangerSogurAdapter to the new ISogurExchanger.\n', ' */\n', 'interface ISagaExchanger {\n', '    /**\n', '     * @param _to The address of the SGN holder.\n', '     * @param _value The amount of SGR to transfer.\n', '     */\n', '    function transferSgaToSgnHolder(address _to, uint256 _value) external;\n', '}\n', '\n', '// File: contracts/saga-genesis/SGNTokenManager.sol\n', '\n', '/**\n', ' * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n', ' */\n', '\n', '/**\n', ' * @title SGN Token Manager.\n', ' */\n', 'contract SGNTokenManager is ISGNTokenManager, ISagaExchanger {\n', '    string public constant VERSION = "2.0.0";\n', '\n', '\n', '    /**\n', '     * @dev Get the current SGR worth of a given SGN amount.\n', '       function name is convertSgnToSga and not convertSgnToSgr for backward compatibility.\n', '     * @param _sgnAmount The amount of SGN to convert.\n', '     * @return Fixed zero as disabled.\n', '     */\n', '    function convertSgnToSga(uint256 _sgnAmount) external view returns (uint256) {\n', '        require(false, "convert SGN to SGA is disabled");\n', '        _sgnAmount;\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Exchange SGN for SGR.\n', '       function name is exchangeSgnForSga and not exchangeSgnForSgr for backward compatibility.\n', '     * @param _sender The address of the sender.\n', '     * @param _sgnAmount The amount of SGN received.\n', '     * @return Fixed zero as exchange is disabled.\n', '     */\n', '    function exchangeSgnForSga(address _sender, uint256 _sgnAmount) external returns (uint256) {\n', '        _sender;\n', '        _sgnAmount;\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Handle direct SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransfer(address _sender, address _to, uint256 _value) external {\n', '        _sender;\n', '        _to;\n', '        _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Handle custodian SGN transfer.\n', '     * @param _sender The address of the sender.\n', '     * @param _from The address of the source account.\n', '     * @param _to The address of the destination account.\n', '     * @param _value The amount of SGN to be transferred.\n', '     */\n', '    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external {\n', '        _sender;\n', '        _from;\n', '        _to;\n', '        _value;\n', '    }\n', '\n', '    /** \n', '     * @dev Upon minting of SGN vested in delay.\n', '     * @param _value The amount of SGN to mint.\n', '     */\n', '    function uponMintSgnVestedInDelay(uint256 _value) external {\n', '        require(false, "minting sgn is disabled");\n', '        _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer SGR to an SGN holder.\n', '     * @param _to The address of the SGN holder.\n', '     * @param _value The amount of SGR to transfer.\n', '     */\n', '    function transferSgaToSgnHolder(address _to, uint256 _value) external {\n', '        _to;\n', '        _value;\n', '    }\n', '}']