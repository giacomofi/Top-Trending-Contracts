['// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./interfaces/IERC20.sol";\n', 'import "./maths/SafeMath.sol";\n', '\n', 'contract GraphLinqDepositor {\n', '    using SafeMath for uint256;\n', '\n', '    address private _graphLinkContract;\n', '    mapping (address => uint256) _balances;\n', '    address private _engineManager;\n', '\n', '    constructor(address engineManager, address graphLinqContract) {\n', '        _engineManager = engineManager;\n', '        _graphLinkContract = graphLinqContract;\n', '    }\n', '\n', '    /* Parameters: Amount of GLQ Token to burn\n', '    ** Desc: Burn a specific amount of token by calling the GLQ Token Contract for All Wallets\n', '    ** Return: void\n', '    */\n', '    function burnAmount(uint256 amount) public {\n', '        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\n', '         require (\n', '            msg.sender == _engineManager,\n', '            "Only the GraphLinq engine manager can decide which funds should be burned for graph costs."\n', '        );\n', '        require(\n', '            graphLinqToken.balanceOf(address(this)) >= amount, \n', '            "Invalid fund in the depositor contract, cant reach the contract balance amount."\n', '        );\n', '        graphLinqToken.burnFuel(amount);\n', '    }\n', '\n', '    /* Parameters: Amount of GLQ Token to burn\n', '    ** Desc: Burn a specific amount of token by calling the GLQ Token Contract for a specific wallet\n', '    */\n', '    function burnBalance(address fromWallet, uint256 amount) public {\n', '        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\n', '        require (\n', '            msg.sender == _engineManager,\n', '            "Only the GraphLinq engine manager can decide which funds should be burned for graph costs."\n', '        );\n', '\n', '        require (_balances[fromWallet] >= amount,\n', '            "Invalid amount to withdraw, amount is higher then current wallet balance."\n', '        );\n', '\n', '        require(\n', '            graphLinqToken.balanceOf(address(this)) >= amount, \n', '            "Invalid fund in the depositor contract, cant reach the contract balance amount."\n', '        );\n', '\n', '        graphLinqToken.burnFuel(amount);\n', '        _balances[fromWallet] -= amount;\n', '    }\n', '\n', '    /* Parameters: wallet owner address, amount asked to withdraw, fees to pay for graphs execs\n', '    ** Desc: Withdraw funds from this contract to the base wallet depositor, applying fees if necessary\n', '    */\n', '    function withdrawWalletBalance(address walletOwner, uint256 amount,\n', '     uint256 removeFees) public {\n', '        IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\n', '\n', '        require (\n', '            msg.sender == _engineManager,\n', '            "Only the GraphLinq engine manager can decide which funds are withdrawable or not."\n', '        );\n', '\n', '        uint256 summedAmount = amount.add(removeFees);\n', '        require (_balances[walletOwner] >= summedAmount,\n', '            "Invalid amount to withdraw, amount is higher then current wallet balance."\n', '        );\n', '\n', '        require(\n', '            graphLinqToken.balanceOf(address(this)) >= summedAmount, \n', '            "Invalid fund in the depositor contract, cant reach the wallet balance amount."\n', '        );\n', '\n', '        _balances[walletOwner] -= amount;\n', '        require(\n', '            graphLinqToken.transfer(walletOwner, amount),\n', '            "Error transfering balance back to his owner from the depositor contract."\n', '        );\n', '        \n', '        // in case the wallet runned some graph on the engine and have fees to pay\n', '        if (removeFees > 0) {\n', '            graphLinqToken.burnFuel(removeFees);\n', '            _balances[walletOwner] -= removeFees;\n', '        }\n', '    }\n', '\n', '    /* Parameters: Amount to add into the contract\n', '    ** Desc: Deposit GLQ token in the contract to pay for graphs fees executions\n', '    */\n', '    function addBalance(uint256 amount) public {\n', '         IERC20 graphLinqToken = IERC20(address(_graphLinkContract));\n', '\n', '         require(\n', '             graphLinqToken.balanceOf(msg.sender) >= amount,\n', '             "Invalid balance to add in your credits"\n', '         );\n', '\n', '         require(\n', '             graphLinqToken.transferFrom(msg.sender, address(this), amount) == true,\n', '             "Error while trying to add credit to your balance, please check allowance."\n', '         );\n', '\n', '         _balances[msg.sender] += amount;\n', '    }\n', '\n', '    function getBalance(address from) public view returns(uint256) {\n', '        return _balances[from];\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '     // Allow deployer to burn his own wallet funds (which is the amount from depositor contract)\n', '    function burnFuel(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']