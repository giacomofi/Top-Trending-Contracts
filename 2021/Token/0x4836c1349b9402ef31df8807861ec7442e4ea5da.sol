['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^0.5.7;\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    event Unfreeze(address indexed from, uint256 value);\n', '}\n', '\n', 'contract ERC20BatchTransfer{\n', '    address public contractOwner;\n', '    bool isWorking = false;\n', '    \n', '    constructor() public{\n', '        contractOwner = msg.sender;\n', '    }\n', '    \n', '    function batchTransfer(IERC20 _contract, address[] memory _tos, uint256[] memory _values) public payable{\n', '        require(_tos.length <= 100,"The number of addresses exceeds the limit");\n', '        require(isWorking,"Contract is disenable");\n', '        require(_tos.length == _values.length);\n', '        uint256 sumTransferAmount = 0;\n', '        for (uint i = 0; i < _values.length; i++){\n', '            require(sumTransferAmount + _values[i] >= sumTransferAmount);\n', '            sumTransferAmount += _values[i];\n', '        }\n', '        require(_contract.balanceOf(msg.sender) >= sumTransferAmount);\n', '        require(_contract.allowance(msg.sender,address(this)) >= sumTransferAmount);\n', '        \n', '        for (uint i = 0; i < _tos.length; i++){\n', '            _contract.transferFrom(msg.sender,_tos[i],_values[i]);\n', '        }\n', '    }\n', '    \n', '    function enable() public{\n', '        require(msg.sender == contractOwner);\n', '        isWorking = true;\n', '    }\n', '    \n', '    function disenable() public{\n', '        require(msg.sender == contractOwner);\n', '        isWorking = false;\n', '    }\n', '}']