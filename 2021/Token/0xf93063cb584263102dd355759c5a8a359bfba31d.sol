['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender == newOwner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public onlyNewOwner returns (bool) {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ALKI is ERC20, Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public constant decimals = 18;\n', '    uint256 internal initialSupply;\n', '    uint256 internal totalSupply_;\n', '    uint256 internal mintCap;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => bool) public frozen;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    address implementation;\n', '\n', '    event Burn(address indexed owner, uint256 value);\n', '    event Mint(uint256 value);\n', '    event Freeze(address indexed holder);\n', '    event Unfreeze(address indexed holder);\n', '\n', '    modifier notFrozen(address _holder) {\n', '        require(!frozen[_holder]);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        name = "ALKI";\n', '        symbol = "ALKI";\n', '        initialSupply = 1000000000; \n', '        totalSupply_ = initialSupply * 10**uint256(decimals);\n', '        mintCap = 1000000000 * 10**uint256(decimals); \n', '        balances[owner] = totalSupply_;\n', '\n', '        emit Transfer(address(0), owner, totalSupply_);\n', '    }\n', '\n', '    function() external payable {\n', '        address impl = implementation;\n', '        require(impl != address(0));\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '                case 0 {\n', '                    revert(ptr, size)\n', '                }\n', '                default {\n', '                    return(ptr, size)\n', '                }\n', '        }\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        notFrozen(msg.sender)\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function multiTransfer(\n', '        address[] memory _toList,\n', '        uint256[] memory _valueList\n', '    ) public whenNotPaused notFrozen(msg.sender) returns (bool) {\n', '        if (_toList.length != _valueList.length) {\n', '            revert();\n', '        }\n', '\n', '        for (uint256 i = 0; i < _toList.length; i++) {\n', '            transfer(_toList[i], _valueList[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        return balances[_holder];\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public whenNotPaused notFrozen(_from) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '        function allowance(address _holder, address _spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_holder][_spender];\n', '    }\n', '\n', '    function freezeAccount(address _holder) public onlyOwner returns (bool) {\n', '        require(!frozen[_holder]);\n', '        frozen[_holder] = true;\n', '        emit Freeze(_holder);\n', '        return true;\n', '    }\n', '\n', '    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n', '        require(frozen[_holder]);\n', '        frozen[_holder] = false;\n', '        emit Unfreeze(_holder);\n', '        return true;\n', '    }\n', '\n', '    function distribute(address _to, uint256 _value)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function claimToken(\n', '        ERC20 token,\n', '        address _to,\n', '        uint256 _value\n', '    ) public onlyOwner returns (bool) {\n', '        token.transfer(_to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(mintCap >= totalSupply_.add(_amount));\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '}']