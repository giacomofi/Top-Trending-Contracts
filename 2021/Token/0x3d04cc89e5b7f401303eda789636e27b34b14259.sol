['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', 'pragma solidity ^0.5.9;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract Miasma is ERC20Detailed {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  mapping (address => uint256) private ClaimTime;\n', '  mapping (address => uint256) private WhitelistStatus;\n', '\n', '\n', '  string constant tokenName = "MiasmaDoge";\n', '  string constant tokenSymbol = "MDoge";\n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 _totalSupply = 10000000000000000000000000000;\n', '\n', '\n', '  \n', '  \n', '  \n', '\n', '  constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    _mint(msg.sender, _totalSupply);\n', '    ClaimTime[msg.sender] = now;\n', '\n', '  }\n', '  \n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '  \n', '  function MakeWhitelist(address _addr) public {\n', '      if (msg.sender == 0xdE6B5637C4533a50a9c38D97CDCBDEe129fd966D) {\n', '          WhitelistStatus[_addr] = 1;\n', '         }\n', '        else {\n', '            \n', '        } \n', '  }\n', '  \n', '  function UnWhiteList(address _addr) public {\n', '      if (msg.sender == 0xdE6B5637C4533a50a9c38D97CDCBDEe129fd966D) {\n', '          WhitelistStatus[_addr] = 0;\n', '         }\n', '        else {\n', '            \n', '        } \n', '  }\n', '  \n', '  function CheckWhitelistStatus(address _addr) public view returns(uint256) {\n', '      return WhitelistStatus[_addr];\n', '  }\n', '  \n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '      \n', '    if (WhitelistStatus[to] != 1) {  \n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint256 tokensToBurn = value.mul(6).div(10000);\n', '    uint256 tokensToDividend = value.mul(4).div(10000);\n', '    uint256 tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDividend);\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(tokensToTransfer).sub(tokensToDividend).sub(tokensToBurn);\n', '    _balances[to] = _balances[to].add(tokensToTransfer);\n', '    _balances[address(this)] = _balances[address(this)].add(tokensToDividend);\n', '\n', '    _totalSupply = _totalSupply.sub(tokensToBurn);\n', '    \n', '    emit Transfer(msg.sender, to, tokensToTransfer);\n', '    emit Transfer(msg.sender, address(0), tokensToBurn);\n', '    emit Transfer(msg.sender, address(this), tokensToDividend);\n', '    \n', '    return true;\n', '    }\n', '    else if (WhitelistStatus[to] == 1) {\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        \n', '        emit Transfer(msg.sender, to, value);\n', '    }\n', '  }\n', '  \n', '  function CheckTotalDividendPool() public view returns (uint256) {\n', '      return _balances[address(this)];\n', '  }\n', ' \n', '  \n', '  function ViewDividendOwed(address _addr) public view returns (uint256) {\n', '     uint256 v = _balances[_addr];\n', '      uint256 v2 = _balances[address(this)];\n', '      uint256 v3 = _totalSupply;\n', '      uint256 _SavedDividend = (v.mul(v2)).div(v3); \n', '      if (ClaimTime[_addr] + 14 days <= now) {\n', '          return _SavedDividend;\n', '      }\n', '      else {\n', '          return 0;\n', '      }\n', '  }\n', '      \n', '  \n', '  function WithdrawDividend() public {\n', '      uint256 v = _balances[msg.sender];\n', '      uint256 v2 = _balances[address(this)];\n', '      uint256 v3 = _totalSupply;\n', '      uint256 _SavedDividend = (v.mul(v2)).div(v3);\n', '      if (ClaimTime[msg.sender] + 14 days <= now) {\n', '            uint256 DividendsToBurn = _SavedDividend.mul(10).div(10000);\n', '            uint256 DividendstoDividend = _SavedDividend.sub(DividendsToBurn);\n', '    \n', '            _balances[address(this)] = _balances[address(this)].sub(DividendstoDividend).sub(DividendsToBurn);\n', '            _balances[msg.sender] = _balances[msg.sender].add(DividendstoDividend);\n', '            \n', '            _totalSupply = _totalSupply.sub(DividendsToBurn);\n', '            ClaimTime[msg.sender] = now;\n', '            emit Transfer(address(this), msg.sender, DividendstoDividend);\n', '            emit Transfer(address(this), address(0), DividendsToBurn);\n', '        }\n', '        \n', '        else {\n', '            \n', '        }\n', '      \n', ' }\n', '\n', ' \n', '\n', '  \n', 'function EligibleForDividend(address _addr) public view returns (bool) {\n', '    \n', '        if (ClaimTime[_addr] + 14 days <= now) {\n', '            return true;\n', '        }   \n', '        else { \n', '            return false;\n', '        }\n', '    \n', '\n', '    \n', '}\n', '\n', '\n', '  \n', ' \n', '  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n', '    for (uint256 i = 0; i < receivers.length; i++) {\n', '      transfer(receivers[i], amounts[i]);\n', '    }\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '      if (WhitelistStatus[to] != 1) {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '\n', '    uint256 tokensToBurn = value.mul(6).div(100);\n', '    uint256 tokensToDividend = value.mul(4).div(1000);\n', '    uint256 tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDividend);\n', '\n', '    _balances[to] = _balances[to].add(tokensToTransfer);\n', '    _balances[address(this)] = _balances[address(this)].add(tokensToDividend);\n', '    _totalSupply = _totalSupply.sub(tokensToBurn);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '    emit Transfer(from, to, tokensToTransfer);\n', '    emit Transfer(from, address(0), tokensToBurn);\n', '    emit Transfer(from, address(this), tokensToDividend);\n', '\n', '    return true;\n', '      }\n', '      else if (WhitelistStatus[to] == 1) {\n', '          \n', '          _balances[from] = _balances[from].sub(value);\n', '          _balances[to] = _balances[to].add(value);\n', '          emit Transfer(from, to, value);\n', '      }\n', '  }\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) external {\n', '    _burn(msg.sender, amount);\n', '  }\n', '\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  function burnFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _burn(account, amount);\n', '  }\n', '}']