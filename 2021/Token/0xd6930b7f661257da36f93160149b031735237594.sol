['# @version 0.2.11\n', '"""\n', '@title Pool Migrator\n', '@author Curve.fi\n', '@notice Zap for moving liquidity between Curve factory pools in a single transaction\n', '@license MIT\n', '"""\n', '\n', 'interface ERC20:\n', '    def approve(_spender: address, _amount: uint256): nonpayable\n', '\n', 'interface Swap:\n', '    def transferFrom(_owner: address, _spender: address, _amount: uint256) -> bool: nonpayable\n', '    def add_liquidity(_amounts: uint256[2], _min_mint_amount: uint256, _receiver: address) -> uint256: nonpayable\n', '    def remove_liquidity(_burn_amount: uint256, _min_amounts: uint256[2]) -> uint256[2]: nonpayable\n', '    def coins(i: uint256) -> address: view\n', '\n', '\n', '# pool -> coins are approved?\n', 'is_approved: HashMap[address, bool]\n', '\n', '\n', '@external\n', 'def migrate_to_new_pool(_old_pool: address, _new_pool: address, _amount: uint256) -> uint256:\n', '    """\n', '    @notice Migrate liquidity between two pools\n', '    @dev Each pool must be deployed by the curve factory and contain identical\n', '         assets. The migrator must have approval to transfer `_old_pool` tokens\n', '         on behalf of the caller.\n', '    @param _old_pool Address of the pool to migrate from\n', '    @param _new_pool Address of the pool to migrate into\n', '    @param _amount Number of `_old_pool` LP tokens to migrate\n', '    @return uint256 Number of `_new_pool` LP tokens received\n', '    """\n', '    Swap(_old_pool).transferFrom(msg.sender, self, _amount)\n', '    amounts: uint256[2] = Swap(_old_pool).remove_liquidity(_amount, [0, 0])\n', '\n', '    if not self.is_approved[_new_pool]:\n', '        for i in range(2):\n', '            coin: address = Swap(_new_pool).coins(i)\n', '            ERC20(coin).approve(_new_pool, MAX_UINT256)\n', '        self.is_approved[_new_pool] = True\n', '\n', '    return Swap(_new_pool).add_liquidity(amounts, 0, msg.sender)']