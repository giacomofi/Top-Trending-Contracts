['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract eGIToken is ERC20("eGame", "eGI"), Ownable {\n', '    event Mint(uint256 amount);\n', '    event MintFinished();\n', '    event Burn(uint256 amount);\n', '\n', '    uint8 public constant DECIMALS=8;\n', '    uint256 public constant INITIAL_SUPPLY=50000000000*(10**uint256(DECIMALS));\n', '    bool public mintingFinished=false;\n', '\n', '    constructor () {\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    function mint(uint256 amount) onlyOwner canMint public{\n', '        uint256 amount2=amount*(10**uint256(DECIMALS));\n', '        _mint(msg.sender,amount2);\n', '\n', '        emit Mint(amount);\n', '    }\n', '\n', '    function burn(uint256 amount) onlyOwner public {\n', '        uint256 amount2=amount*(10**uint256(DECIMALS));\n', '        _burn(msg.sender,amount2);\n', '\n', '        emit Burn(amount);\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function finishingMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}']