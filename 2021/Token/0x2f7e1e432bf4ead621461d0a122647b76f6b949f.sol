['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Pausable.sol";\n', 'import "./AccessControl.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract REBEL is ERC20, ERC20Burnable, Pausable, AccessControl {\n', '    using SafeMath for uint256;\n', '  \n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    \n', '    uint256 public constant cap = 1700000000000000000000000000;\n', '    uint256 private _remainingSupply;\n', '    uint256 public developersFunding;\n', '    uint256 public initialLiquityFunding;\n', '    uint256 public initialairDropFunding;\n', '    \n', '    address public developersAddress = 0x78225f18a19F26041c616c464a57403ffb94acCC;\n', '    address public initialLiquityAddress = 0xfda48cC92EE5354468EA46E9bd06d3EaBA8C4e16;\n', '    address public initialAirdropAddress = 0x09b5057618751691dBE448Cd1f613Ef9E417534D;\n', '\n', '    constructor() ERC20("Confederate Coin", "REBEL") {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, developersAddress);\n', '        _setupRole(PAUSER_ROLE, developersAddress);\n', '        _setupRole(MINTER_ROLE, developersAddress);\n', '        _remainingSupply = cap;\n', '        developersFunding = cap.mul(10).div(100);\n', '        initialLiquityFunding = cap.mul(2).div(100);\n', '        initialairDropFunding = cap.mul(1).div(100);\n', '        _mint(developersAddress, developersFunding);\n', '        _mint(initialLiquityAddress, initialLiquityFunding);\n', '        _mint(initialAirdropAddress, initialairDropFunding);\n', '        reduceSupplyBy(developersFunding);\n', '        reduceSupplyBy(initialLiquityFunding);\n', '    }\n', '\n', '    \n', '    function remainingSupply() public view returns (uint256) {\n', '      return _remainingSupply;\n', '    }\n', '    \n', '    function reduceSupplyBy(uint256 amount) private {\n', '      _remainingSupply = _remainingSupply - amount;\n', '    }\n', '    \n', '    function pause() public {\n', '        require(hasRole(PAUSER_ROLE, msg.sender));\n', '        _pause();\n', '    }\n', '\n', '    function unpause() public {\n', '        require(hasRole(PAUSER_ROLE, msg.sender));\n', '        _unpause();\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public {\n', '        require(hasRole(MINTER_ROLE, msg.sender));\n', '        require(totalSupply() + amount <= cap, "ERC20Capped: cap exceeded");\n', '        reduceSupplyBy(amount);\n', '\n', '        _mint(to, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount)\n', '        internal\n', '        whenNotPaused\n', '        override\n', '    {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']