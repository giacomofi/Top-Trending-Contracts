['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-01\n', '*/\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '/* Interface for the DOGEMEX base contract */\n', 'contract DOGEMEX_Base {\n', '    function availableBalanceOf(address token, address user) view returns (uint256);   \n', '    function withdraw(address token, uint256 amount) returns (bool success); \n', '}\n', '\n', '// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    // optional\n', '    function name() external view returns (string);\n', '    function symbol() external view returns (string);\n', '    function decimals() external view returns (string);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/* Interface for the Uniswap Exchange contract */\n', 'contract UniswapExchangeInterface {\n', '    // Address of ERC20 token sold on this exchange\n', '    function tokenAddress() external view returns (address token);\n', '    // Address of Uniswap Factory\n', '    function factoryAddress() external view returns (address factory);\n', '    // Provide Liquidity\n', '    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n', '    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n', '    // Get Prices\n', '    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n', '    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n', '    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n', '    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n', '    // Trade ETH to ERC20\n', '    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n', '    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n', '    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n', '    // Trade ERC20 to ETH\n', '    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n', '    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n', '    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n', '    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to ERC20\n', '    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n', '    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n', '    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n', '    // Trade ERC20 to Custom Pool\n', '    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n', '    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n', '    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n', '    // ERC20 comaptibility for liquidity tokens\n', '    bytes32 public name;\n', '    bytes32 public symbol;\n', '    uint256 public decimals;\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    // Never use\n', '    function setup(address token_addr) external;\n', '}\n', '\n', 'contract DOGEMEX_Token {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    uint256 public operationalPct = 800e15; // % that goes into the operations wallet 80%\n', '    uint256 public buybackPct = 200e15; // % going to the uniswap contract 20%\n', '\n', '    address public operationalAddress; // the operational address \n', '\n', '    function assert(bool assertion) pure {\n', '        \n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    // Safe Multiply Function - prevents integer overflow \n', '    function safeMul(uint a, uint b) pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    // Safe Subtraction Function - prevents integer overflow \n', '    function safeSub(uint a, uint b) pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    // Safe Addition Function - prevents integer overflow \n', '    function safeAdd(uint a, uint b) pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    address public owner; // holds the address of the contract owner\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => address) public uniswapTokenContracts; // mapping of tokens to uniswapTokenContracts for swap\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event LogUint(uint8 id, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function DOGEMEX_Token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol, \n', '        address _operationalAddress\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name    = tokenName;                                   // Set the name for display purposes\n', '        symbol  = tokenSymbol;                               // Set the symbol for display purposes\n', '    \n', '        operationalAddress      = _operationalAddress;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    // allows contract to receive ETH\n', '    function () payable {}\n', '\n', '    // Change operational wallet\n', '    function changeOperationalAddress (address newOperationalAddress) onlyOwner {\n', '        operationalAddress = newOperationalAddress;\n', '    }\n', '\n', '    // Adds an uniswap exchange contract for a new collateral token\n', '    function setUniswapTokenContract(address token, address _uniswapTokenContract) onlyOwner  {\n', '        uniswapTokenContracts[token]  = _uniswapTokenContract;\n', '    }\n', '\n', '    \n', '\n', '    function extractFeesFromDmex (address token, address dogemexContractAddress) public\n', '    {\n', '        uint256 availableBalance = DOGEMEX_Base(dogemexContractAddress).availableBalanceOf(token, this);\n', '        DOGEMEX_Base(dogemexContractAddress).withdraw(token, availableBalance);\n', '        \n', '        uint256 ethAmount; \n', '        \n', '        if (uniswapTokenContracts[token] == address(0)) revert();\n', '        \n', '\n', '        if (token != address(0))\n', '        {\n', '            // transfer token to uniswap token contract\n', '            ERC20Interface(token).approve(uniswapTokenContracts[token], availableBalance);\n', '\n', '            // swap token for ETH\n', '            ethAmount = UniswapExchangeInterface(uniswapTokenContracts[token]).tokenToEthSwapInput(availableBalance, 1, 2**256 - 1);\n', '        }\n', '        else\n', '        {\n', '            ethAmount = availableBalance;\n', '        }\n', '\n', '        uint256 buybackValue = safeMul(ethAmount, buybackPct) / 1e18;\n', '        uint256 operationalValue = safeSub(ethAmount, buybackValue);\n', '        \n', '        // use the buybackValue to buy back tokens through the UniSwap contract\n', '        uint256 tokens_bought = UniswapExchangeInterface(uniswapTokenContracts[address(0)]).ethToTokenSwapInput.value(buybackValue)(1, 2**256 - 1);\n', '    \n', '        // send the operational income share to the operational address\n', '        if (!operationalAddress.send(operationalValue))\n', '        {\n', '            revert();\n', '        }     \n', '        \n', '        // burn bought tokens and reduce total supply\n', '        selfBurn(tokens_bought);\n', '    }\n', '    \n', '    // used once when deploying the uniswap exchange\n', '    function allowUniswap(uint256 tokenAmount)\n', '    {\n', '        allowance[this][uniswapTokenContracts[address(0)]] = tokenAmount;\n', '    }\n', '    \n', '    // provides initial liquidity to the uniswap exchange\n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) onlyOwner\n', '    {\n', '        UniswapExchangeInterface(uniswapTokenContracts[address(0)]).addLiquidity.value(ethAmount)(1, tokenAmount, 2**256 - 1);\n', '    }\n', '   \n', '\n', '    // Allows only the owner of the contract to execute the function\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Changes the owner of the contract\n', '    function setOwner(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    \n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Destroy tokens \n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function selfBurn(uint256 _value) internal returns (bool success) {\n', '        require(balanceOf[this] >= _value);   // Check if the sender has enough\n', '        balanceOf[this] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                // Updates totalSupply\n', '        emit Burn(this, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']