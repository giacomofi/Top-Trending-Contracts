['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20, IERC20Metadata {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All two of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.7.6;\n', '\n', '/**\n', ' * a contract must implement this interface in order to support relayed transaction.\n', ' * It is better to inherit the BaseRelayRecipient as its implementation.\n', ' */\n', 'abstract contract IRelayRecipient {\n', '\n', '    /**\n', '     * return if the forwarder is trusted to forward relayed transactions to us.\n', "     * the forwarder is required to verify the sender's signature, and verify\n", '     * the call is not a replay.\n', '     */\n', '    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n', '     * of the msg.data.\n', '     * otherwise, return `msg.sender`\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal virtual view returns (address payable);\n', '\n', '    /**\n', '     * return the msg.data of this call.\n', '     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n', '     * of the msg.data - so this method will strip those 20 bytes off.\n', '     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n', '     * should be used in the contract instead of msg.data, where this difference matters.\n', '     */\n', '    function _msgData() internal virtual view returns (bytes memory);\n', '\n', '    function versionRecipient() external virtual view returns (string memory);\n', '}\n', '\n', '\n', 'pragma solidity >=0.7.6;\n', '\n', '/**\n', ' * A base contract to be inherited by any contract that want to receive relayed transactions\n', ' * A subclass must use "_msgSender()" instead of "msg.sender"\n', ' */\n', 'abstract contract BaseRelayRecipient is IRelayRecipient {\n', '\n', '    /*\n', '     * Forwarder singleton we accept calls from\n', '     */\n', '    address public trustedForwarder;\n', '\n', '    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n', '        return forwarder == trustedForwarder;\n', '    }\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, return the original sender.\n', '     * otherwise, return `msg.sender`.\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal override virtual view returns (address payable ret) {\n', '        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n', '            // At this point we know that the sender is a trusted forwarder,\n', '            // so we trust that the last bytes of msg.data are the verified sender address.\n', '            // extract sender address from the end of msg.data\n', '            assembly {\n', '                ret := shr(96,calldataload(sub(calldatasize(),20)))\n', '            }\n', '        } else {\n', '            return payable(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * return the msg.data of this call.\n', '     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n', '     * of the msg.data - so this method will strip those 20 bytes off.\n', '     * otherwise, return `msg.data`\n', '     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\n', '     * signing or hashing the\n', '     */\n', '    function _msgData() internal override virtual view returns (bytes memory ret) {\n', '        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n', '            return msg.data[0:msg.data.length-20];\n', '        } else {\n', '            return msg.data;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title AMFEIX ERC20 swap smart contract\n', ' * @dev Contract based on ERC20 standard with "swap" features between BTC and AMF\n', ' */\n', 'contract AMF is ERC20, Ownable, BaseRelayRecipient {\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    uint256 private _swapRatio;\n', '    address private _tokenPool;\n', '    string private _btcPool;\n', '    uint256 private _minimumWithdrawal;\n', '\n', '    string public override versionRecipient = "2.2.0";\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (\n', '        string memory name_, \n', '        string memory symbol_, \n', '        address tokenPool_, \n', '        string memory btcPool_\n', '        ) ERC20(name_,symbol_) Ownable() {\n', '            _swapRatio = 100000; // AMF amount for 1 BTC\n', '            _tokenPool = tokenPool_; // AMFEIX buffer ETH wallet address\n', '            _btcPool = btcPool_; // AMFEIX buffer BTC wallet address\n', '            _minimumWithdrawal = 1000; // AMF minimum amount for withdrawals\n', '    }\n', '\n', '    /**\n', '     * @dev Allows contract owner to create new tokens.\n', '     * \n', '     * @param newHolder Ethereum address of the recipient \n', '     * @param amount The number of tokens the recipient will receive\n', '     */\n', '    function mint(address newHolder, uint256 amount) public virtual onlyOwner returns (uint256) {\n', '        _mint(newHolder, amount);\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to destroy its tokens.\n', '     *\n', '     * @param amount The number of tokens that sender is willing to burn from its account\n', '     */\n', '    function burn(uint256 amount) public virtual returns (bool) {\n', '        _burn(_msgSender(), amount);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Returns the current AMF minimum withdrawal amount.\n', '     * \n', '     * We need this value to prevent users from claiming BTC if the AMF amount is too small.\n', '     * Main reason is the BTC mining fees AMFEIX is going to pay for this transaction\n', '     */\n', '    function getMinimumWithdrawalAmount() public view virtual returns (uint256) {\n', '        return _minimumWithdrawal;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows contract owner to update the current AMF minimum withdrawal amount.\n', '     * \n', '     * @param newMinimum The updated minimum amount of AMF allowed for BTC withdrawal\n', '     */\n', '    function setMinimumWithdrawalAmount(uint256 newMinimum) external virtual onlyOwner returns (bool) {\n', '        _minimumWithdrawal = newMinimum;\n', '        emit MinimumWithdrawalChanged(newMinimum);\n', '        return true;\n', '    }\n', '    // Emitted when AMFEIX changes the current AMF minimum withdrawal amount\n', '    event MinimumWithdrawalChanged (\n', '        uint256 indexed newMinimum\n', '    );\n', '\n', '    /**\n', '     * @dev Returns the current swap ratio (how much AMF tokens corresponds to 1 BTC)\n', '     *      \n', '     * Initial ratio  100000 AMF : 1 BTC  (1 AMF : 1000 sat)\n', '     * We need this value to compute the amount of AMF to send to users when they deposited BTC at AMFEIX\n', '     * and to compute the amount of BTC to send to users when they claim back their BTC.\n', '     */\n', '    function getSwapRatio() public view virtual returns (uint256) {\n', '        return _swapRatio;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows contract owner to update the current swap ratio (AMF/BTC).\n', '     * \n', '     * @param newRatio The updated amount of AMF tokens corresponding to 1 BTC (~10^5)\n', '     */\n', '    function setSwapRatio(uint256 newRatio) external virtual onlyOwner returns (bool) {\n', '        _swapRatio = newRatio;\n', '        emit RatioChanged(newRatio);\n', '        return true;\n', '    }\n', '    // Emitted when AMFEIX changes the current swap ratio\n', '    event RatioChanged (\n', '        uint256 indexed newRatio\n', '    );\n', '\n', '    /**\n', '     * @dev Returns the current AMF token pool address held by AMFEIX.\n', '     */\n', '    function getTokenPoolAddress() public view virtual returns (address) {\n', '        return _tokenPool;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows contract owner to update its current AMF token pool address.\n', '     * \n', '     * @param newAddress The updated address of the token pool\n', '     */\n', '    function setTokenPoolAddress(address newAddress) external virtual onlyOwner returns (bool) {\n', '        _tokenPool = newAddress;\n', '        emit TokenPoolAddressChanged(newAddress);\n', '        return true;\n', '    }\n', '    // Emitted when AMFEIX changes the current token pool address\n', '    event TokenPoolAddressChanged (\n', '        address indexed newAddress\n', '    );\n', '\n', '    /**\n', '     * @dev Returns the current BTC pool address held by AMFEIX.\n', '     */\n', '    function getBtcPoolAddress() public view virtual returns (string memory) {\n', '        return _btcPool;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows contract owner to update its current BTC pool address.\n', '     * \n', '     * @param newAddress The updated address of the BTC pool\n', '     */\n', '    function setBtcPoolAddress(string memory newAddress) external virtual onlyOwner returns (bool) {\n', '        _btcPool = newAddress;\n', '        emit BtcPoolAddressChanged(newAddress);\n', '        return true;\n', '    }\n', '    // Emitted when AMFEIX changes the current BTC pool address\n', '    event BtcPoolAddressChanged (\n', '        string indexed newAddress\n', '    );\n', '\n', '    /**\n', '     * @dev Allow any customer who hold tokens to claim BTC\n', '     * \n', '     * @param tokenAmount Amount of tokens to be exchanged (needs to be multiplied by 10^18)\n', '     * @param userBtcAddress BTC address on which users willing to receive payment\n', '     * /!\\ gas cost for calling this method : 37kgas /!\\\n', '     */\n', '    function claimBTC(uint256 tokenAmount, string memory userBtcAddress) public virtual returns (bool) {\n', '        require (tokenAmount >= _minimumWithdrawal, "current minimum withrawal is ${_minimumWithdrawal}");\n', '        _transfer(_msgSender(), _tokenPool, tokenAmount);\n', '        emit BtcToBePaid(_msgSender(), userBtcAddress, tokenAmount);\n', '        return true;\n', '    }\n', '    // Emitted when an user claim BTC against its tokens\n', '    event BtcToBePaid (\n', '        address indexed customer,\n', '        string userBtcAddress,\n', '        uint256 sentToken\n', '    );\n', '\n', '    /**\n', '     * @dev Allow AMFEIX to transfer AMF to claiming users\n', '     * \n', '     * @param tokenAmount Amount of tokens to be sent\n', '     * @param userAddress BTC address on which users willing to receive payment\n', '     * @param btcTxId ID of the AMF buying transaction on Bitcoin network\n', '     */\n', '    function payAMF(uint256 tokenAmount, address userAddress, string memory btcTxId) public virtual returns (bool) {\n', '        require(_msgSender() == _tokenPool, "Only AMFEIX can use this method");\n', '        _transfer(_msgSender(), userAddress, tokenAmount);\n', '        emit AmfPaid(userAddress, btcTxId, tokenAmount);\n', '        return true;\n', '    }\n', '    // Emitted when AMFEIX send AMF to users.\n', '    event AmfPaid (\n', '        address indexed customer,\n', '        string btcTxId,\n', '        uint256 sentToken\n', '    );\n', '\n', '    // GSN compatibility\n', '    function _msgSender() internal override(Context, BaseRelayRecipient) view returns (address payable) {\n', '        return payable(BaseRelayRecipient._msgSender());\n', '    }\n', '    function _msgData() internal override(Context,BaseRelayRecipient) view returns (bytes memory ret) {\n', '        return BaseRelayRecipient._msgData();\n', '    }\n', '    function setForwarder(address forwarder) public onlyOwner {\n', '        trustedForwarder = forwarder;\n', '    }\n', '}']