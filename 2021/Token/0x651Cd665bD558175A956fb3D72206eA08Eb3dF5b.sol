['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File contracts/utils/Context.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/IBEP20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the BEP20 standard as defined in the EIP.\n', ' */\n', 'interface IBEP20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/extensions/IBEP20Metadata.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the BEP20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IBEP20Metadata is IBEP20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', '// File contracts/security/Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Ownable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor() {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused returns (bool) {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused returns (bool) {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/BEP20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IBEP20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {BEP20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of BEP20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IBEP20-approve}.\n', ' */\n', 'contract BEP20 is Context, IBEP20, IBEP20Metadata, Pausable {\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All two of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor(string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {BEP20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IBEP20-balanceOf} and {IBEP20-transfer}.\n', '     */\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override whenNotPaused returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IBEP20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {BEP20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override whenNotPaused returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IBEP20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual whenNotPaused returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IBEP20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "BEP20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "BEP20: transfer from the zero address");\n', '        require(recipient != address(0), "BEP20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "BEP20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "BEP20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "BEP20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "BEP20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "BEP20: approve from the zero address");\n', '        require(spender != address(0), "BEP20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '}\n', '\n', '\n', '// File contracts/LGEWhitelisted.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract LGEWhitelisted is Context {\n', '    struct WhitelistRound {\n', '        uint256 duration;\n', '        uint256 amountMax;\n', '        mapping(address => bool) addresses;\n', '        mapping(address => uint256) purchased;\n', '    }\n', '\n', '    WhitelistRound[] public _lgeWhitelistRounds;\n', '\n', '    uint256 public _lgeTimestamp;\n', '    address public _lgePairAddress;\n', '\n', '    address public _whitelister;\n', '\n', '    event WhitelisterTransferred(address indexed previousWhitelister, address indexed newWhitelister);\n', '\n', '    constructor() {\n', '        _whitelister = _msgSender();\n', '    }\n', '\n', '    modifier onlyWhitelister() {\n', '        require(_whitelister == _msgSender(), "Caller is not the whitelister");\n', '        _;\n', '    }\n', '\n', '    function renounceWhitelister() external onlyWhitelister {\n', '        emit WhitelisterTransferred(_whitelister, address(0));\n', '        _whitelister = address(0);\n', '    }\n', '\n', '    function transferWhitelister(address newWhitelister) external onlyWhitelister {\n', '        _transferWhitelister(newWhitelister);\n', '    }\n', '\n', '    function _transferWhitelister(address newWhitelister) internal {\n', '        require(newWhitelister != address(0), "New whitelister is the zero address");\n', '        emit WhitelisterTransferred(_whitelister, newWhitelister);\n', '        _whitelister = newWhitelister;\n', '    }\n', '\n', '    /*\n', '     * createLGEWhitelist - Call this after initial Token Generation Event (TGE)\n', '     *\n', '     * pairAddress - address generated from createPair() event on DEX\n', '     * durations - array of durations (seconds) for each whitelist rounds\n', '     * amountsMax - array of max amounts (TOKEN decimals) for each whitelist round\n', '     *\n', '     */\n', '\n', '    function createLGEWhitelist(\n', '        address pairAddress,\n', '        uint256[] calldata durations,\n', '        uint256[] calldata amountsMax\n', '    ) external onlyWhitelister() {\n', '        require(durations.length == amountsMax.length, "Invalid whitelist(s)");\n', '\n', '        _lgePairAddress = pairAddress;\n', '\n', '        if (durations.length > 0) {\n', '            delete _lgeWhitelistRounds;\n', '\n', '            for (uint256 i = 0; i < durations.length; i++) {\n', '                WhitelistRound storage whitelistRound = _lgeWhitelistRounds.push();\n', '                whitelistRound.duration = durations[i];\n', '                whitelistRound.amountMax = amountsMax[i];\n', '            }\n', '        }\n', '    }\n', '\n', '    /*\n', '     * modifyLGEWhitelistAddresses - Define what addresses are included/excluded from a whitelist round\n', '     *\n', '     * index - 0-based index of round to modify whitelist\n', '     * duration - period in seconds from LGE event or previous whitelist round\n', '     * amountMax - max amount (TOKEN decimals) for each whitelist round\n', '     *\n', '     */\n', '\n', '    function modifyLGEWhitelist(\n', '        uint256 index,\n', '        uint256 duration,\n', '        uint256 amountMax,\n', '        address[] calldata addresses,\n', '        bool enabled\n', '    ) external onlyWhitelister() {\n', '        require(index < _lgeWhitelistRounds.length, "Invalid index");\n', '        require(amountMax > 0, "Invalid amountMax");\n', '\n', '        if (duration != _lgeWhitelistRounds[index].duration) _lgeWhitelistRounds[index].duration = duration;\n', '\n', '        if (amountMax != _lgeWhitelistRounds[index].amountMax) _lgeWhitelistRounds[index].amountMax = amountMax;\n', '\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            _lgeWhitelistRounds[index].addresses[addresses[i]] = enabled;\n', '        }\n', '    }\n', '\n', '    /*\n', '     *  getLGEWhitelistRound\n', '     *\n', '     *  returns:\n', '     *\n', '     *  1. whitelist round number ( 0 = no active round now )\n', '     *  2. duration, in seconds, current whitelist round is active for\n', '     *  3. timestamp current whitelist round closes at\n', '     *  4. maximum amount a whitelister can purchase in this round\n', '     *  5. is caller whitelisted\n', '     *  6. how much caller has purchased in current whitelist round\n', '     *\n', '     */\n', '\n', '    function getLGEWhitelistRound()\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            bool,\n', '            uint256\n', '        )\n', '    {\n', '        if (_lgeTimestamp > 0) {\n', '            uint256 wlCloseTimestampLast = _lgeTimestamp;\n', '\n', '            for (uint256 i = 0; i < _lgeWhitelistRounds.length; i++) {\n', '                WhitelistRound storage wlRound = _lgeWhitelistRounds[i];\n', '\n', '                wlCloseTimestampLast = wlCloseTimestampLast + wlRound.duration;\n', '                if (block.timestamp <= wlCloseTimestampLast)\n', '                    return (\n', '                        i + 1,\n', '                        wlRound.duration,\n', '                        wlCloseTimestampLast,\n', '                        wlRound.amountMax,\n', '                        wlRound.addresses[_msgSender()],\n', '                        wlRound.purchased[_msgSender()]\n', '                    );\n', '            }\n', '        }\n', '\n', '        return (0, 0, 0, 0, false, 0);\n', '    }\n', '\n', '    /*\n', '     * _applyLGEWhitelist - internal function to be called initially before any transfers\n', '     *\n', '     */\n', '\n', '    function _applyLGEWhitelist(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        if (_lgePairAddress == address(0) || _lgeWhitelistRounds.length == 0) return;\n', '\n', '        if (_lgeTimestamp == 0 && sender != _lgePairAddress && recipient == _lgePairAddress && amount > 0)\n', '            _lgeTimestamp = block.timestamp;\n', '\n', '        if (sender == _lgePairAddress && recipient != _lgePairAddress) {\n', '            //buying\n', '\n', '            (uint256 wlRoundNumber, , , , , ) = getLGEWhitelistRound();\n', '\n', '            if (wlRoundNumber > 0) {\n', '                WhitelistRound storage wlRound = _lgeWhitelistRounds[wlRoundNumber - 1];\n', '\n', '                require(wlRound.addresses[recipient], "LGE - Buyer is not whitelisted");\n', '\n', '                uint256 amountRemaining = 0;\n', '\n', '                if (wlRound.purchased[recipient] < wlRound.amountMax)\n', '                    amountRemaining = wlRound.amountMax - wlRound.purchased[recipient];\n', '\n', '                require(amount <= amountRemaining, "LGE - Amount exceeds whitelist maximum");\n', '                wlRound.purchased[recipient] = wlRound.purchased[recipient] + amount;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Roseon.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'contract LockCoin is BEP20 {\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint256 totalSupply\n', '    ) BEP20(name, symbol) {\n', '        _mint(_msgSender(), totalSupply);\n', '        _locker = _msgSender();\n', '    }\n', '\n', '    event Unlock(address indexed addressLock, uint256 amount);\n', '    event AddAddressLock(address indexed addressLock, uint256 amount);\n', '    event LockerTransferred(address indexed previousLocker, address indexed newLocker);\n', '\n', '    address public _locker;\n', '    struct ScheduleLock {\n', '        uint256 unlockTime;\n', '        uint256 amount;\n', '    }\n', '    struct TimeLockByAddress {\n', '        uint256 nextIndexTimeLock;\n', '        uint256 totalLock;\n', '        ScheduleLock[] arrTimeLock;\n', '    }\n', '\n', '    mapping(address => TimeLockByAddress) mappingAddressToLock;\n', '\n', '    modifier onlyLocker() {\n', '        require(_locker == _msgSender(), "Caller is not the locker");\n', '        _;\n', '    }\n', '\n', '    function renounceLocker() external onlyLocker {\n', '        emit LockerTransferred(_locker, address(0));\n', '        _locker = address(0);\n', '    }\n', '\n', '    function transferLocker(address newLocker) external onlyLocker {\n', '        _transferLocker(newLocker);\n', '    }\n', '\n', '    function _transferLocker(address newLocker) internal {\n', '        require(newLocker != address(0), "New locker is the zero address");\n', '        emit LockerTransferred(_locker, newLocker);\n', '        _locker = newLocker;\n', '    }\n', '\n', '    function _addScheduleLockByAddress(\n', '        address _addressLock,\n', '        uint256 _unlockTime,\n', '        uint256 _amount\n', '    ) internal {\n', '        mappingAddressToLock[_addressLock].arrTimeLock.push(ScheduleLock(_unlockTime, _amount));\n', '    }\n', '\n', '    function _updateTotalLockByAddress(\n', '        address _addressLock,\n', '        uint256 _totalLock,\n', '        uint256 _nextIndexLock\n', '    ) internal {\n', '        mappingAddressToLock[_addressLock].nextIndexTimeLock = _nextIndexLock;\n', '        mappingAddressToLock[_addressLock].totalLock = _totalLock;\n', '        emit AddAddressLock(_addressLock, _totalLock);\n', '    }\n', '\n', '    /**\n', '     * @dev Unlock token of "_addressLock" with timeline lock\n', '     */\n', '    function _unLock(address _addressLock) internal {\n', '        if (mappingAddressToLock[_addressLock].totalLock == 0) {\n', '            return;\n', '        }\n', '        TimeLockByAddress memory timeLockByAddress = mappingAddressToLock[_addressLock];\n', '        uint256 totalUnlock = 0;\n', '        while (\n', '            timeLockByAddress.nextIndexTimeLock < timeLockByAddress.arrTimeLock.length &&\n', '            block.timestamp >= timeLockByAddress.arrTimeLock[timeLockByAddress.nextIndexTimeLock].unlockTime\n', '        ) {\n', '            emit Unlock(_addressLock, timeLockByAddress.arrTimeLock[timeLockByAddress.nextIndexTimeLock].amount);\n', '            totalUnlock += timeLockByAddress.arrTimeLock[timeLockByAddress.nextIndexTimeLock].amount;\n', '            timeLockByAddress.nextIndexTimeLock += 1;\n', '        }\n', '        if (totalUnlock > 0) {\n', '            _updateTotalLockByAddress(\n', '                _addressLock,\n', '                timeLockByAddress.totalLock - totalUnlock,\n', '                timeLockByAddress.nextIndexTimeLock\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev get total amount lock of address\n', '     */\n', '    function getLockedAmount(address _addressLock) public view returns (uint256 amount) {\n', '        return mappingAddressToLock[_addressLock].totalLock;\n', '    }\n', '\n', '    /**\n', '     * @dev get next shedule unlock time of address lock\n', '     */\n', '    function getNextScheduleUnlock(address _addressLock)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 index,\n', '            uint256 unlockTime,\n', '            uint256 amount\n', '        )\n', '    {\n', '        TimeLockByAddress memory timeLockByAddress = mappingAddressToLock[_addressLock];\n', '        return (\n', '            timeLockByAddress.nextIndexTimeLock,\n', '            timeLockByAddress.arrTimeLock[timeLockByAddress.nextIndexTimeLock].unlockTime,\n', '            timeLockByAddress.arrTimeLock[timeLockByAddress.nextIndexTimeLock].amount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev update array schedule lock token of address\n', '     */\n', '    function overwriteScheduleLock(\n', '        address _addressLock,\n', '        uint256[] memory _arrAmount,\n', '        uint256[] memory _arrUnlockTime\n', '    ) public onlyLocker {\n', '        require(_arrAmount.length > 0 && _arrAmount.length == _arrUnlockTime.length, "The parameter passed was wrong");\n', '        require(mappingAddressToLock[_addressLock].totalLock > 0, "Address must in list lock");\n', '        _overwriteTimeLockByAddress(_addressLock, _arrAmount, _arrUnlockTime);\n', '    }\n', '\n', '    /**\n', '     * @dev get lock time and amount lock by address at a time\n', '     */\n', '    function getScheduleLock(address _addressLock, uint256 _index) public view returns (uint256, uint256) {\n', '        return (\n', '            mappingAddressToLock[_addressLock].arrTimeLock[_index].amount,\n', '            mappingAddressToLock[_addressLock].arrTimeLock[_index].unlockTime\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev add list timeline lock and total amount lock by address\n', '     */\n', '    function addScheduleLockByAddress(\n', '        address _addressLock,\n', '        uint256[] memory _arrAmount,\n', '        uint256[] memory _arrUnlockTime\n', '    ) public onlyLocker {\n', '        require(_arrAmount.length > 0 && _arrAmount.length == _arrUnlockTime.length, "The parameter passed was wrong");\n', '        require(mappingAddressToLock[_addressLock].totalLock == 0, "Address must not in list lock");\n', '        _overwriteTimeLockByAddress(_addressLock, _arrAmount, _arrUnlockTime);\n', '    }\n', '\n', '    function unlockRoseon() public whenNotPaused {\n', '        _unLock(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev function overwrite schedule time lock and total by address lock\n', '     */\n', '    function _overwriteTimeLockByAddress(\n', '        address _addressLock,\n', '        uint256[] memory _arrAmount,\n', '        uint256[] memory _arrUnlockTime\n', '    ) internal returns (uint256) {\n', '        uint256 totalLock = 0;\n', '        delete mappingAddressToLock[_addressLock].arrTimeLock;\n', '        for (uint256 i = 0; i < _arrAmount.length; i++) {\n', '            require(_arrUnlockTime[i] > 0, "The timeline must be greater than 0");\n', '            if (i != _arrAmount.length - 1) {\n', '                require(\n', '                    _arrUnlockTime[i + 1] > _arrUnlockTime[i],\n', '                    "The next timeline must be greater than the previous"\n', '                );\n', '            }\n', '            _addScheduleLockByAddress(_addressLock, _arrUnlockTime[i], _arrAmount[i]);\n', '            totalLock += _arrAmount[i];\n', '        }\n', '        _updateTotalLockByAddress(_addressLock, totalLock, 0);\n', '        return totalLock;\n', '    }\n', '}\n', '\n', 'contract RoseonToken is LockCoin, LGEWhitelisted {\n', '    constructor() LockCoin("Roseon token", "ROSN", 100000000 * 10**18) {}\n', '\n', '    function transfer(address _receiver, uint256 _amount) public override returns (bool success) {\n', '        _unLock(_msgSender());\n', '        require(_amount <= getAvailableBalance(_msgSender()), "Balance is insufficient");\n', '        return BEP20.transfer(_receiver, _amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _receiver,\n', '        uint256 _amount\n', '    ) public override returns (bool) {\n', '        _unLock(_from);\n', '        require(_amount <= getAvailableBalance(_from), "Balance is insufficient");\n', '        return BEP20.transferFrom(_from, _receiver, _amount);\n', '    }\n', '\n', '    function getAvailableBalance(address _lockedAddress) public view returns (uint256 amount) {\n', '        uint256 balance = balanceOf(_lockedAddress);\n', '        uint256 lockedAmount = getLockedAmount(_lockedAddress);\n', '        if (balance <= lockedAmount) return 0;\n', '        return balance - lockedAmount;\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal override {\n', '        super._beforeTokenTransfer(_from, _to, _amount);\n', '        _applyLGEWhitelist(_from, _to, _amount);\n', '    }\n', '}']