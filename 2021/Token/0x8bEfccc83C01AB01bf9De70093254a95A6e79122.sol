['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract CoinvestingDeFiToken is Ownable, ERC20 {\n', '    // Public variables\n', '    address public saleReserve;\n', '    address public technicalAndOperationalReserve;\n', '\n', '    // Events\n', '    event Received(address, uint);\n', '    \n', '    // Constructor\n', '    constructor (\n', '        string memory name,\n', '        string memory symbol,\n', '        uint _initialSupply,\n', '        address _saleReserve,\n', '        address _technicalAndOperationalReserve          \n', '    ) payable ERC20 (name, symbol) {\n', '        saleReserve = _saleReserve;\n', '        technicalAndOperationalReserve = _technicalAndOperationalReserve;\n', '        if (_initialSupply > 0) {\n', '            require((_initialSupply % 10) == 0, "_initialSupply has to be a multiple of 10!");\n', '            uint eightyFivePerCent = _initialSupply * 85 / 100;\n', '            uint fifteenPerCent = _initialSupply * 15 / 100; \n', '            mint(saleReserve, fifteenPerCent); \n', '            mint(technicalAndOperationalReserve, eightyFivePerCent);       \n', '            mintingFinished = true;\n', '        }\n', '    }\n', '\n', '    // Receive function \n', '    receive() external payable {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // External functions\n', '    function withdraw() external onlyOwner {\n', '        require(address(this).balance > 0, "Insuficient funds!");\n', '        uint amount = address(this).balance;\n', '        // sending to prevent re-entrancy attacks\n', '        address(this).balance - amount;\n', '        payable(msg.sender).transfer(amount);\n', '    }\n', '    \n', '    // Public functions\n', '    function mint(address account, uint amount) public onlyOwner canMint {\n', '        _mint(account, amount);\n', '    }\n', '}']