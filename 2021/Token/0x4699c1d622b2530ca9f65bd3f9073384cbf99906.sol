['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'abstract contract IERC20 {\n', '    function totalSupply() virtual public view returns (uint256 supply);\n', '    function balanceOf(address _owner) virtual public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) virtual public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\n', '    function approve(address _spender, uint256 _value) virtual public returns (bool success);\n', '    function allowance(address _owner, address _spender) virtual public returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '    uint256 internal total_supply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Mint(address indexed to, uint256 value);\n', '    function transfer(address _to, uint256 _value) override public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function balanceOf(address _owner) public view override returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint256 _value) public override returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public override returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    function totalSupply() public view override returns (uint256 supply) {\n', '        return total_supply;\n', '    }\n', '}\n', '\n', 'contract BTCH is ERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    address public owner;\n', '    constructor (uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n', '        balances[msg.sender] = _initialAmount* 10 ** uint256(_decimalUnits);\n', '        total_supply = _initialAmount* 10 ** uint256(_decimalUnits);\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        owner = msg.sender;\n', '    }\n', '}']