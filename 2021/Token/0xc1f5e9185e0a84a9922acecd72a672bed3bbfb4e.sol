['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// SPDX-License-Identifier: NO-LICENSE\n', '\n', 'pragma solidity <=0.7.4;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal view virtual returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view virtual returns (bytes memory) {\n', '\tthis; \n', '\treturn msg.data;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\t/**\n', '\t * @dev Returns the addition of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `+` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Addition cannot overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tmapping (address => uint256) private _balances;\n', '\n', '\tmapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '\tuint256 private _totalSupply;\n', '\n', '\tstring private _name;\n', '\tstring private _symbol;\n', '\tuint8 private _decimals;\n', '\n', '\t/**\n', '\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '\t * a default value of 18.\n', '\t *\n', '\t * To select a different value for {decimals}, use {_setupDecimals}.\n', '\t *\n', '\t * All three of these values are immutable: they can only be set once during\n', '\t * construction.\n', '\t */\n', '\tconstructor (\n', '\t\tstring memory tokenName, \n', '\t\tstring memory tokenSymbol\n', '\t\t) {\n', '\t\t_name = tokenName;\n', '\t\t_symbol = tokenSymbol;\n', '\t\t_decimals = 18;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the name of the token.\n', '\t */\n', '\tfunction name() public view returns (string memory) {\n', '\t\treturn _name;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the symbol of the token, usually a shorter version of the\n', '\t * name.\n', '\t */\n', '\tfunction symbol() public view returns (string memory) {\n', '\t\treturn _symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of decimals used to get its user representation.\n', '\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '\t *\n', '\t * Tokens usually opt for a value of 18, imitating the relationship between\n', '\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '\t * called.\n', '\t *\n', '\t * NOTE: This information is only used for _display_ purposes: it in\n', '\t * no way affects any of the arithmetic of the contract, including\n', '\t * {IERC20-balanceOf} and {IERC20-transfer}.\n', '\t */\n', '\tfunction decimals() public view returns (uint8) {\n', '\t\treturn _decimals;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-totalSupply}.\n', '\t */\n', '\tfunction totalSupply() public view override returns (uint256) {\n', '\t\treturn _totalSupply;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-balanceOf}.\n', '\t */\n', '\tfunction balanceOf(address account) public view override returns (uint256) {\n', '\t\treturn _balances[account];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transfer}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - the caller must have a balance of at least `amount`.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '\t\t_transfer(_msgSender(), recipient, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-allowance}.\n', '\t */\n', '\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '\t\treturn _allowances[owner][spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-approve}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '\t\t_approve(_msgSender(), spender, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transferFrom}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance. This is not\n', '\t * required by the EIP. See the note at the beginning of {ERC20};\n', '\t *\n', '\t * Requirements:\n', '\t * - `sender` and `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', "\t * - the caller must have allowance for ``sender``'s tokens of at least\n", '\t * `amount`.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '\t\t_transfer(sender, recipient, amount);\n', '\t\t_approve(sender, \n', '\t\t\t\t_msgSender(), \n', '\t\t\t\t_allowances[sender][_msgSender()]\n', '\t\t\t\t.sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t * - `spender` must have allowance for the caller of at least\n', '\t * `subtractedValue`.\n', '\t */\n', '\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '\t_approve(\n', '\t\t_msgSender(), \n', '\t\tspender, \n', '\t\t_allowances[_msgSender()][spender].sub(subtractedValue, \n', '\t\t"Allowance below zero"));\n', '\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '\t *\n', '\t * This is internal function is equivalent to {transfer}, and can be used to\n', '\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `sender` cannot be the zero address.\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', '\t */\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '\t\trequire(sender != address(0), "Invalid Address");\n', '\t\trequire(recipient != address(0), "Invalid Address");\n', '\n', '\t\t_beforeTokenTransfer(sender, recipient, amount);\n', '\n', '\t\t_balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");\n', '\t\t_balances[recipient] = _balances[recipient].add(amount);\n', '\t\temit Transfer(sender, recipient, amount);\n', '\t}\n', '\n', '\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '\t * the total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `from` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `to` cannot be the zero address.\n', '\t */\n', '\tfunction _mint(address account, uint256 amount) internal virtual {\n', '\t\trequire(account != address(0), "ERC20: mint to the zero address");\n', '\n', '\t\t_beforeTokenTransfer(address(0), account, amount);\n', '\n', '\t\t_totalSupply = _totalSupply.add(amount);\n', '\t\t_balances[account] = _balances[account].add(amount);\n', '\t\temit Transfer(address(0), account, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Destroys `amount` tokens from `account`, reducing the\n', '\t * total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `to` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `account` cannot be the zero address.\n', '\t * - `account` must have at least `amount` tokens.\n', '\t */\n', '\tfunction _burn(address account, uint256 amount) internal virtual {\n', '\t\trequire(account != address(0), "Invalid Address");\n', '\n', '\t\t_beforeTokenTransfer(account, address(0), amount);\n', '\n', '\t\t_balances[account] = _balances[account].sub(amount, "Insufficient Balance");\n', '\t\t_totalSupply = _totalSupply.sub(amount);\n', '\t\temit Transfer(account, address(0), amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '\t *\n', '\t * This internal function is equivalent to `approve`, and can be used to\n', '\t * e.g. set automatic allowances for certain subsystems, etc.\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `owner` cannot be the zero address.\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n', '\t\trequire(owner != address(0), "Invalid Address");\n', '\t\trequire(spender != address(0), "Invalid Address");\n', '\n', '\t\t_allowances[owner][spender] = amount;\n', '\t\temit Approval(owner, spender, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets {decimals} to a value other than the default one of 18.\n', '\t *\n', '\t * WARNING: This function should only be called from the constructor. Most\n', '\t * applications that interact with token contracts will not expect\n', '\t * {decimals} to ever change, and may work incorrectly if it does.\n', '\t */\n', '\tfunction _setupDecimals(uint8 decimals_) internal {\n', '\t\t_decimals = decimals_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Hook that is called before any transfer of tokens. This includes\n', '\t * minting and burning.\n', '\t *\n', '\t * Calling conditions:\n', '\t *\n', "\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '\t * will be to transferred to `to`.\n', '\t * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '\t * - `from` and `to` are never both zero.\n', '\t *\n', '\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '\t */\n', '\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n', '}\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '\t/**\n', '\t * @dev Emitted when the pause is triggered by `account`.\n', '\t */\n', '\tevent Paused(address account);\n', '\n', '\t/**\n', '\t * @dev Emitted when the pause is lifted by `account`.\n', '\t */\n', '\tevent Unpaused(address account);\n', '\n', '\tbool private _paused;\n', '\n', '\t/**\n', '\t * @dev Initializes the contract in unpaused state.\n', '\t */\n', '\tconstructor () {\n', '\t\t_paused = false;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the contract is paused, and false otherwise.\n', '\t */\n', '\tfunction paused() public view returns (bool) {\n', '\t\treturn _paused;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is not paused.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must not be paused.\n', '\t */\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!_paused, "Pausable: paused");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is paused.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must be paused.\n', '\t */\n', '\tmodifier whenPaused() {\n', '\t\trequire(_paused, "Pausable: not paused");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Triggers stopped state.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must not be paused.\n', '\t */\n', '\tfunction _pause() internal virtual whenNotPaused {\n', '\t\t_paused = true;\n', '\t\temit Paused(_msgSender());\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns to normal state.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The contract must be paused.\n', '\t */\n', '\tfunction _unpause() internal virtual whenPaused {\n', '\t\t_paused = false;\n', '\t\temit Unpaused(_msgSender());\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\t/**\n', '\t * @dev Returns true if `account` is a contract.\n', '\t *\n', '\t * [IMPORTANT]\n', '\t * ====\n', '\t * It is unsafe to assume that an address for which this function returns\n', '\t * false is an externally-owned account (EOA) and not a contract.\n', '\t *\n', '\t * Among others, `isContract` will return false for the following\n', '\t * types of addresses:\n', '\t *\n', '\t *  - an externally-owned account\n', '\t *  - a contract in construction\n', '\t *  - an address where a contract will be created\n', '\t *  - an address where a contract lived, but was destroyed\n', '\t * ====\n', '\t */\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\t// This method relies in extcodesize, which returns 0 for contracts in\n', '\t\t// construction, since the code is only stored at the end of the\n', '\t\t// constructor execution.\n', '\n', '\t\tuint256 size;\n', '\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\tassembly { size := extcodesize(account) }\n', '\t\treturn size > 0;\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '\t * `recipient`, forwarding all available gas and reverting on errors.\n', '\t *\n', '\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '\t * imposed by `transfer`, making them unable to receive funds via\n', '\t * `transfer`. {sendValue} removes this limitation.\n', '\t *\n', '\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '\t *\n', '\t * IMPORTANT: because control is transferred to `recipient`, care must be\n', '\t * taken to not create reentrancy vulnerabilities. Consider using\n', '\t * {ReentrancyGuard} or the\n', '\t * https://solidity.readthedocs.io/en/v0.5.11/\n', '\t   security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '\t */\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(address(this).balance >= amount, "Insufficient balance");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(success, "Transaction Failed : Reverted");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs a Solidity function call using a low level `call`. A\n', '\t * plain`call` is an unsafe replacement for a function call: use this\n', '\t * function instead.\n', '\t *\n', '\t * If `target` reverts with a revert reason, it is bubbled up by this\n', '\t * function (like regular Solidity function calls).\n', '\t *\n', '\t * Returns the raw returned data. To convert to the expected return value,\n', '\t * use https://solidity.readthedocs.io/en/\n', '\t \t   latest/units-and-global-variables.html?\n', '\t\t    highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `target` must be a contract.\n', '\t * - calling `target` with `data` must not revert.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '\t  return functionCall(target, data, "Call Failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '\t * `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '\t * but also transferring `value` wei to `target`.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the calling contract must have an ETH balance of at least `value`.\n', '\t * - the called Solidity function must be `payable`.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '\t\treturn functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(\n', '\t\taddress target, \n', '\t\tbytes memory data, \n', '\t\tuint256 value, \n', '\t\tstring memory errorMessage) \n', '\t\tinternal returns (bytes memory) \n', '\t{\n', '\t\trequire(address(this).balance >= value, "Insufficient balance");\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(\n', '\t\taddress target, \n', '\t\tbytes memory data, \n', '\t\tuint256 weiValue, \n', '\t\tstring memory errorMessage) \n', '\t\tprivate returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls\n', '\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\t// Look for revert reason and bubble it up if present\n', '\t\t\tif (returndata.length > 0) {\n', '\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '\t\t\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '\t// To implement this library for multiple types with as little code\n', '\t// repetition as possible, we write it in terms of a generic Set type with\n', '\t// bytes32 values.\n', '\t// The Set implementation uses private functions, and user-facing\n', '\t// implementations (such as AddressSet) are just wrappers around the\n', '\t// underlying Set.\n', '\t// This means that we can only create new EnumerableSets for types that fit\n', '\t// in bytes32.\n', '\n', '\tstruct Set {\n', '\t\t// Storage of set values\n', '\t\tbytes32[] _values;\n', '\n', '\t\t// Position of the value in the `values` array, plus 1 because index 0\n', '\t\t// means a value is not in the set.\n', '\t\tmapping (bytes32 => uint256) _indexes;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Add a value to a set. O(1).\n', '\t *\n', '\t * Returns true if the value was added to the set, that is if it was not\n', '\t * already present.\n', '\t */\n', '\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\n', '\t\tif (!_contains(set, value)) {\n', '\t\t\tset._values.push(value);\n', '\t\t\t// The value is stored at length-1, but we add 1 to all indexes\n', '\t\t\t// and use 0 as a sentinel value\n', '\t\t\tset._indexes[value] = set._values.length;\n', '\t\t\treturn true;\n', '\t\t} else {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Removes a value from a set. O(1).\n', '\t *\n', '\t * Returns true if the value was removed from the set, that is if it was\n', '\t * present.\n', '\t */\n', '\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\n', "\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\n", '\t\tuint256 valueIndex = set._indexes[value];\n', '\n', '\t\tif (valueIndex != 0) { // Equivalent to contains(set, value)\n', '\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\n", '\t\t\t// This modifies the order of the array, as noted in {at}.\n', '\n', '\t\t\tuint256 toDeleteIndex = valueIndex - 1;\n', '\t\t\tuint256 lastIndex = set._values.length - 1;\n', '\n', '\t\t\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '\t\t\tbytes32 lastvalue = set._values[lastIndex];\n', '\n', '\t\t\t// Move the last value to the index where the value to delete is\n', '\t\t\tset._values[toDeleteIndex] = lastvalue;\n', '\t\t\t// Update the index for the moved value\n', '\t\t\tset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '\t\t\t// Delete the slot where the moved value was stored\n', '\t\t\tset._values.pop();\n', '\n', '\t\t\t// Delete the index for the deleted slot\n', '\t\t\tdelete set._indexes[value];\n', '\n', '\t\t\treturn true;\n', '\t\t} else {\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the value is in the set. O(1).\n', '\t */\n', '\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '\t\treturn set._indexes[value] != 0;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of values on the set. O(1).\n', '\t */\n', '\tfunction _length(Set storage set) private view returns (uint256) {\n', '\t\treturn set._values.length;\n', '\t}\n', '\n', '   /**\n', '\t* @dev Returns the value stored at position `index` in the set. O(1).\n', '\t*\n', '\t* Note that there are no guarantees on the ordering of values inside the\n', '\t* array, and it may change when more values are added or removed.\n', '\t*\n', '\t* Requirements:\n', '\t*\n', '\t* - `index` must be strictly less than {length}.\n', '\t*/\n', '\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '\t\trequire(set._values.length > index, "Index out of bounds");\n', '\t\treturn set._values[index];\n', '\t}\n', '\n', '\t// AddressSet\n', '\n', '\tstruct AddressSet {\n', '\t\tSet _inner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Add a value to a set. O(1).\n', '\t *\n', '\t * Returns true if the value was added to the set, that is if it was not\n', '\t * already present.\n', '\t */\n', '\tfunction add(AddressSet storage set, address value) internal returns (bool) {\n', '\t\treturn _add(set._inner, bytes32(uint256(value)));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Removes a value from a set. O(1).\n', '\t *\n', '\t * Returns true if the value was removed from the set, that is if it was\n', '\t * present.\n', '\t */\n', '\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\n', '\t\treturn _remove(set._inner, bytes32(uint256(value)));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the value is in the set. O(1).\n', '\t */\n', '\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\n', '\t\treturn _contains(set._inner, bytes32(uint256(value)));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of values in the set. O(1).\n', '\t */\n', '\tfunction length(AddressSet storage set) internal view returns (uint256) {\n', '\t\treturn _length(set._inner);\n', '\t}\n', '\n', '   /**\n', '\t* @dev Returns the value stored at position `index` in the set. O(1).\n', '\t*\n', '\t* Note that there are no guarantees on the ordering of values inside the\n', '\t* array, and it may change when more values are added or removed.\n', '\t*\n', '\t* Requirements:\n', '\t*\n', '\t* - `index` must be strictly less than {length}.\n', '\t*/\n', '\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '\t\treturn address(uint256(_at(set._inner, index)));\n', '\t}\n', '\n', '\n', '\t// UintSet\n', '\n', '\tstruct UintSet {\n', '\t\tSet _inner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Add a value to a set. O(1).\n', '\t *\n', '\t * Returns true if the value was added to the set, that is if it was not\n', '\t * already present.\n', '\t */\n', '\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\n', '\t\treturn _add(set._inner, bytes32(value));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Removes a value from a set. O(1).\n', '\t *\n', '\t * Returns true if the value was removed from the set, that is if it was\n', '\t * present.\n', '\t */\n', '\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '\t\treturn _remove(set._inner, bytes32(value));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the value is in the set. O(1).\n', '\t */\n', '\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '\t\treturn _contains(set._inner, bytes32(value));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of values on the set. O(1).\n', '\t */\n', '\tfunction length(UintSet storage set) internal view returns (uint256) {\n', '\t\treturn _length(set._inner);\n', '\t}\n', '\n', '   /**\n', '\t* @dev Returns the value stored at position `index` in the set. O(1).\n', '\t*\n', '\t* Note that there are no guarantees on the ordering of values inside the\n', '\t* array, and it may change when more values are added or removed.\n', '\t*\n', '\t* Requirements:\n', '\t*\n', '\t* - `index` must be strictly less than {length}.\n', '\t*/\n', '\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '\t\treturn uint256(_at(set._inner, index));\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev ERC20 token with pausable token transfers, minting and burning.\n', ' *\n', ' * Useful for scenarios such as preventing trades until the end of an evaluation\n', ' * period, or having an emergency switch for freezing all token transfers in the\n', ' * event of a large bug.\n', ' */\n', 'abstract contract ERC20Pausable is ERC20, Pausable {\n', '\t/**\n', '\t * @dev See {ERC20-_beforeTokenTransfer}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the contract must not be paused.\n', '\t */\n', '\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '\t\tsuper._beforeTokenTransfer(from, to, amount);\n', '\n', '\t\trequire(!paused(), "Transfer Paused");\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '\tusing EnumerableSet for EnumerableSet.AddressSet;\n', '\tusing Address for address;\n', '\n', '\tstruct RoleData {\n', '\t\tEnumerableSet.AddressSet members;\n', '\t\tbytes32 adminRole;\n', '\t}\n', '\n', '\tmapping (bytes32 => RoleData) private _roles;\n', '\n', '\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '\t/**\n', "\t * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '\t *\n', '\t * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '\t * {RoleAdminChanged} not being emitted signaling this.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '\t/**\n', '\t * @dev Emitted when `account` is granted `role`.\n', '\t *\n', '\t * `sender` is the account that originated the contract call, an admin role\n', '\t * bearer except when using {_setupRole}.\n', '\t */\n', '\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '\t/**\n', '\t * @dev Emitted when `account` is revoked `role`.\n', '\t *\n', '\t * `sender` is the account that originated the contract call:\n', '\t *   - if using `revokeRole`, it is the admin role bearer\n', '\t *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '\t */\n', '\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '\t/**\n', '\t * @dev Returns `true` if `account` has been granted `role`.\n', '\t */\n', '\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\n', '\t\treturn _roles[role].members.contains(account);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of accounts that have `role`. Can be used\n', '\t * together with {getRoleMember} to enumerate all bearers of a role.\n', '\t */\n', '\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '\t\treturn _roles[role].members.length();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns one of the accounts that have `role`. `index` must be a\n', '\t * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '\t *\n', '\t * Role bearers are not sorted in any particular way, and their ordering may\n', '\t * change at any point.\n', '\t *\n', '\t * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '\t * you perform all queries on the same block. See the following\n', '\t * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '\t * for more information.\n', '\t */\n', '\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '\t\treturn _roles[role].members.at(index);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '\t * {revokeRole}.\n', '\t *\n', "\t * To change a role's admin, use {_setRoleAdmin}.\n", '\t */\n', '\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '\t\treturn _roles[role].adminRole;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Grants `role` to `account`.\n', '\t *\n', '\t * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '\t * event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', "\t * - the caller must have ``role``'s admin role.\n", '\t */\n', '\tfunction grantRole(bytes32 role, address account) public virtual {\n', '\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), "Not admin");\n', '\n', '\t\t_grantRole(role, account);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Revokes `role` from `account`.\n', '\t *\n', '\t * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', "\t * - the caller must have ``role``'s admin role.\n", '\t */\n', '\tfunction revokeRole(bytes32 role, address account) public virtual {\n', '\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), "Not Admin");\n', '\n', '\t\t_revokeRole(role, account);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Revokes `role` from the calling account.\n', '\t *\n', "\t * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '\t * purpose is to provide a mechanism for accounts to lose their privileges\n', '\t * if they are compromised (such as when a trusted device is misplaced).\n', '\t *\n', '\t * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '\t * event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the caller must be `account`.\n', '\t */\n', '\tfunction renounceRole(bytes32 role, address account) public virtual {\n', '\t\trequire(account == _msgSender(), "Not owner");\n', '\n', '\t\t_revokeRole(role, account);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Grants `role` to `account`.\n', '\t *\n', '\t * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "\t * event. Note that unlike {grantRole}, this function doesn't perform any\n", '\t * checks on the calling account.\n', '\t *\n', '\t * [WARNING]\n', '\t * ====\n', '\t * This function should only be called from the constructor when setting\n', '\t * up the initial roles for the system.\n', '\t *\n', '\t * Using this function in any other way is effectively circumventing the admin\n', '\t * system imposed by {AccessControl}.\n', '\t * ====\n', '\t */\n', '\tfunction _setupRole(bytes32 role, address account) internal virtual {\n', '\t\t_grantRole(role, account);\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Sets `adminRole` as ``role``'s admin role.\n", '\t *\n', '\t * Emits a {RoleAdminChanged} event.\n', '\t */\n', '\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '\t\temit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '\t\t_roles[role].adminRole = adminRole;\n', '\t}\n', '\n', '\tfunction _grantRole(bytes32 role, address account) private {\n', '\t\tif (_roles[role].members.add(account)) {\n', '\t\t\temit RoleGranted(role, account, _msgSender());\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _revokeRole(bytes32 role, address account) private {\n', '\t\tif(role == DEFAULT_ADMIN_ROLE){\n', '\t       require(_roles[DEFAULT_ADMIN_ROLE].members.length() > 1, "Last Admin");\n', '\t       _roles[role].members.remove(account);\n', '\t       emit RoleRevoked( role, account, _msgSender());\n', '\t    }\n', '\t\telse if(_roles[role].members.remove(account)){\n', '\t\t\temit RoleRevoked(role, account, _msgSender());\n', '\t\t}\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title ERC20 Token for EdgeX.\n', ' * Is a Standard ERC20 token\n', ' */\n', 'contract EdgeXToken is ERC20Pausable, AccessControl{\n', '\n', '  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '  bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '\n', '  constructor(\n', '\t  string memory _name, \n', '\t  string memory _symbol,\n', '\t  address _admin\n', '\t  ) \n', '\tERC20(_name, _symbol)\n', '  {\n', '\t_setupRole(DEFAULT_ADMIN_ROLE, _admin);\n', '  }\n', '\n', '  function mint(address to, uint256 amount) public {\n', '\trequire(hasRole(MINTER_ROLE, msg.sender), "Caller is not a minter");\n', '\t_mint(to, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) public {\n', '\t_burn(msg.sender, amount);\n', '  }\n', '\n', '  function pause() public {\n', '\trequire(hasRole(PAUSER_ROLE, msg.sender), "Caller is not a pauser");\n', '\t_pause();\n', '  }\n', '\n', '  function unpause() public {\n', '\trequire(hasRole(PAUSER_ROLE, msg.sender), "Caller is not a pauser");\n', '\t_unpause();\n', '  }\n', '\n', '}']