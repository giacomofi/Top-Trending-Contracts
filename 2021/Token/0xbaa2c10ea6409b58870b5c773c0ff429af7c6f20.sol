['pragma solidity ^0.4.26;\n', 'import "./oraclizeAPI_0.5.sol";\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(\n', '        address _from,\n', '        uint256 _value,\n', '        address _token,\n', '        bytes _extraData\n', '    ) public;\n', '}\n', '\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor() public {}\n', '\n', '    function _transfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '        uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); // Check allowance\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _value,\n', '        bytes _extraData\n', '    ) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20, usingOraclize {\n', '    string public name = "BuyPay";\n', '    string public symbol = "WBPC";\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public ethusd = 0;\n', '    uint256 public tokenPrice = 2;\n', '    uint256 public updatePriceFreq = 30 hours;\n', '    uint256 public totalSupply = 2000000000e18;\n', '    uint public lockedStatus = 0;\n', '    struct LockList {\n', '        address account;\n', '        uint256 amount;\n', '    }\n', '\n', '    LockList[] public lockupAccount;\n', '\n', '    constructor(uint256 _ethusd) public {\n', '        require(_ethusd > 0);\n', '        ethusd = _ethusd;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.value > 0);\n', '        uint256 amount = msg.value.mul(ethusd).div(tokenPrice);\n', '        _transfer(owner, msg.sender, amount); // makes the transfers\n', '        (owner).transfer(address(this).balance);\n', '    }\n', '\n', '    function _transfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', '        require(lockedStatus != 1);\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '        require(getUnlockedAmount(_from) >= _value);\n', '        uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function mint(address target, uint256 mintedAmount) public onlyOwner {\n', '        balanceOf[target] = balanceOf[target].add(mintedAmount);\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function sendToken(address target, uint256 amount) public onlyOwner {\n', '        require(balanceOf[owner] >= amount);\n', '        _transfer(owner, target, amount);\n', '        emit Transfer(owner, target, amount);\n', '    }\n', '\n', '    function removeAllToken(address target) public onlyOwner {\n', '        _transfer(target, owner, balanceOf[target]);\n', '        emit Transfer(target, owner, balanceOf[target]);\n', '    }\n', '\n', '    function removeToken(address target, uint256 amount) public onlyOwner {\n', '        require(balanceOf[target] >= amount);\n', '        _transfer(target, owner, amount);\n', '        emit Transfer(target, owner, amount);\n', '    }\n', '    function lockAll () public onlyOwner {\n', '        lockedStatus = 1;\n', '    }\n', '    function unlockAll () public onlyOwner {\n', '        lockedStatus = 0;\n', '    }\n', '    function lockAccount (address account, uint256 amount) public onlyOwner {\n', '      require(balanceOf[account] >= amount);\n', '      uint flag = 0;\n', '      for (uint i = 0; i < lockupAccount.length; i++) {\n', '        if (lockupAccount[i].account == account) {\n', '          lockupAccount[i].amount = amount;\n', '          flag = flag + 1;\n', '        }\n', '      }\n', '      if(flag == 0) {\n', '        lockupAccount.push(LockList(account, amount));\n', '      }\n', '    }\n', '\n', '    function getLockedAmount(address account) public view returns (uint256) {\n', '      uint256 res = 0;\n', '      for (uint i = 0; i < lockupAccount.length; i++) {\n', '        if (lockupAccount[i].account == account) {\n', '          res = lockupAccount[i].amount;\n', '        }\n', '      }\n', '      return res;\n', '    }\n', '\n', '    function getUnlockedAmount(address account) public view returns (uint256) {\n', '      uint256 res = 0;\n', '      res = balanceOf[account].sub(getLockedAmount(account));\n', '      return res;\n', '    }\n', '\n', '    function getLockedListLength() public view returns(uint) {\n', '        return lockupAccount.length;\n', '    } \n', '\n', '    function setEthUsd(uint256 _ethusd) public onlyOwner {\n', '        require(_ethusd > 0);\n', '        ethusd = _ethusd;\n', '    }\n', '\n', '    function setTokenPrice(uint256 _tokenPrice) public onlyOwner {\n', '        require(_tokenPrice > 0);\n', '        tokenPrice = _tokenPrice;\n', '    }\n', '\n', '    function withdrawBalance(uint256 amount) public onlyOwner {\n', '        require(address(this).balance >= amount);\n', '        (owner).transfer(amount);\n', '    }\n', '\n', '    function withdrawAll() public onlyOwner {\n', '        require(address(this).balance >= 0);\n', '        (owner).transfer(address(this).balance);\n', '    }\n', '    \n', '    function burn(uint256 _value) external {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) external {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '    function __callback(bytes32 myid, string result) public {\n', '        require(msg.sender == oraclize_cbAddress());\n', '        ethusd = parseInt(result, 2);\n', '        updatePrice();\n', '    }\n', '\n', '    function updatePrice() public payable {\n', '        oraclize_query(\n', '            updatePriceFreq,\n', '            "URL",\n', '            "json(https://api.etherscan.io/api?module=stats&action=ethprice&apikey=YourApiKeyToken).result.ethusd"\n', '        );\n', '    }\n', '}']