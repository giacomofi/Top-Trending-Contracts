['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-10\n', '*/\n', '\n', 'pragma solidity ^0.4.0;\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        require(a == b * c + (a % b));\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public constant returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public;\n', '\n', '    function approve(address spender, uint256 value) public;\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Multi Sender, support ETH and ERC20 Tokens\n', ' */\n', '\n', 'contract MultiSender is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogTokenMultiSent(address token, uint256 total);\n', '    event LogGetToken(address token, address receiver, uint256 balance);\n', '    address public receiverAddress;\n', '    uint256 public txFee = 0.01 ether;\n', '    uint256 public VIPFee = 1 ether;\n', '\n', '    /* VIP List */\n', '    mapping(address => bool) public vipList;\n', '\n', '    /*\n', '     *  get balance\n', '     */\n', '    function getBalance(address _tokenAddress) public onlyOwner {\n', '        address _receiverAddress = getReceiverAddress();\n', '        if (_tokenAddress == address(0)) {\n', '            require(_receiverAddress.send(address(this).balance));\n', '            return;\n', '        }\n', '        StandardToken token = StandardToken(_tokenAddress);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(_receiverAddress, balance);\n', '        emit LogGetToken(_tokenAddress, _receiverAddress, balance);\n', '    }\n', '\n', '    /*\n', '     *  Register VIP\n', '     */\n', '    function registerVIP() public payable {\n', '        require(msg.value >= VIPFee);\n', '        address _receiverAddress = getReceiverAddress();\n', '        require(_receiverAddress.send(msg.value));\n', '        vipList[msg.sender] = true;\n', '    }\n', '\n', '    /*\n', '     *  Register VIP\n', '     */\n', '    function registerFreeVIP(address _vip) public onlyOwner {\n', '        vipList[_vip] = true;\n', '    }\n', '\n', '    /*\n', '     *  VIP list\n', '     */\n', '    function addToVIPList(address[] _vipList) public onlyOwner {\n', '        for (uint256 i = 0; i < _vipList.length; i++) {\n', '            vipList[_vipList[i]] = true;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Remove address from VIP List by Owner\n', '     */\n', '    function removeFromVIPList(address[] _vipList) public onlyOwner {\n', '        for (uint256 i = 0; i < _vipList.length; i++) {\n', '            vipList[_vipList[i]] = false;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Check isVIP\n', '     */\n', '    function isVIP(address _addr) public view returns (bool) {\n', '        return _addr == owner || vipList[_addr];\n', '    }\n', '\n', '    /*\n', '     * set receiver address\n', '     */\n', '    function setReceiverAddress(address _addr) public onlyOwner {\n', '        require(_addr != address(0));\n', '        receiverAddress = _addr;\n', '    }\n', '\n', '    /*\n', '     * get receiver address\n', '     */\n', '    function getReceiverAddress() public view onlyOwner returns (address) {\n', '        if (receiverAddress == address(0)) {\n', '            return owner;\n', '        }\n', '\n', '        return receiverAddress;\n', '    }\n', '\n', '    /*\n', '     * set vip fee\n', '     */\n', '    function setVIPFee(uint256 _fee) public onlyOwner {\n', '        VIPFee = _fee;\n', '    }\n', '\n', '    /*\n', '     * set tx fee\n', '     */\n', '    function setTxFee(uint256 _fee) public onlyOwner {\n', '        txFee = _fee;\n', '    }\n', '\n', '    function ethSendSameValue(address[] _to, uint256 _value) internal {\n', '        uint256 sendAmount = _to.length.mul(_value);\n', '        uint256 remainingValue = msg.value;\n', '\n', '        bool vip = isVIP(msg.sender);\n', '        if (vip) {\n', '            require(remainingValue >= sendAmount);\n', '        } else {\n', '            require(remainingValue >= sendAmount.add(txFee));\n', '        }\n', '        require(_to.length <= 255);\n', '\n', '        for (uint8 i = 0; i < _to.length; i++) {\n', '            remainingValue = remainingValue.sub(_value);\n', '            require(_to[i].send(_value));\n', '        }\n', '\n', '        emit LogTokenMultiSent(\n', '            0x000000000000000000000000000000000000bEEF,\n', '            msg.value\n', '        );\n', '    }\n', '\n', '    function ethSendDifferentValue(address[] _to, uint256[] _value) internal {\n', '        uint256 sendAmount = 0;\n', '        for (uint8 i = 0; i < _value.length; i++) {\n', '            sendAmount = sendAmount.add(_value[i]);\n', '        }\n', '        uint256 remainingValue = msg.value;\n', '\n', '        require(remainingValue >= sendAmount);\n', '\n', '        require(_to.length == _value.length);\n', '        require(_to.length <= 255);\n', '\n', '        for (i = 0; i < _to.length; i++) {\n', '            remainingValue = remainingValue.sub(_value[i]);\n', '            require(_to[i].send(_value[i]));\n', '        }\n', '        emit LogTokenMultiSent(\n', '            0x000000000000000000000000000000000000bEEF,\n', '            msg.value\n', '        );\n', '    }\n', '\n', '    function coinSendSameValue(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256 _value\n', '    ) internal {\n', '        uint256 sendValue = msg.value;\n', '        bool vip = isVIP(msg.sender);\n', '        if (!vip) {\n', '            require(sendValue >= txFee);\n', '        }\n', '        require(_to.length <= 255);\n', '\n', '        address from = msg.sender;\n', '        uint256 sendAmount = _to.length.mul(_value);\n', '\n', '        StandardToken token = StandardToken(_tokenAddress);\n', '        for (uint8 i = 0; i < _to.length; i++) {\n', '            token.transferFrom(from, _to[i], _value);\n', '        }\n', '\n', '        emit LogTokenMultiSent(_tokenAddress, sendAmount);\n', '    }\n', '\n', '    function coinSendDifferentValue(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256[] _value\n', '    ) internal {\n', '        uint256 sendValue = msg.value;\n', '        bool vip = isVIP(msg.sender);\n', '        if (!vip) {\n', '            require(sendValue >= txFee);\n', '        }\n', '\n', '        require(_to.length == _value.length);\n', '        require(_to.length <= 255);\n', '\n', '        uint256 sendAmount = 0;\n', '        for (uint8 i = 0; i < _value.length; i++) {\n', '            sendAmount = sendAmount.add(_value[i]);\n', '        }\n', '        StandardToken token = StandardToken(_tokenAddress);\n', '\n', '        for (i = 0; i < _to.length; i++) {\n', '            token.transferFrom(msg.sender, _to[i], _value[i]);\n', '        }\n', '        emit LogTokenMultiSent(_tokenAddress, sendAmount);\n', '    }\n', '\n', '    /*\n', '        Send ether with the same value by a explicit call method\n', '    */\n', '\n', '    function sendEth(address[] _to, uint256 _value) public payable {\n', '        ethSendSameValue(_to, _value);\n', '    }\n', '\n', '    /*\n', '        Send ether with the different value by a explicit call method\n', '    */\n', '    function multisend(address[] _to, uint256[] _value) public payable {\n', '        ethSendDifferentValue(_to, _value);\n', '    }\n', '\n', '    /*\n', '        Send ether with the different value by a implicit call method\n', '    */\n', '\n', '    function mutiSendETHWithDifferentValue(address[] _to, uint256[] _value)\n', '        public\n', '        payable\n', '    {\n', '        ethSendDifferentValue(_to, _value);\n', '    }\n', '\n', '    /*\n', '        Send ether with the same value by a implicit call method\n', '    */\n', '\n', '    function mutiSendETHWithSameValue(address[] _to, uint256 _value)\n', '        public\n', '        payable\n', '    {\n', '        ethSendSameValue(_to, _value);\n', '    }\n', '\n', '    /*\n', '        Send coin with the same value by a implicit call method\n', '    */\n', '\n', '    function mutiSendCoinWithSameValue(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256 _value\n', '    ) public payable {\n', '        coinSendSameValue(_tokenAddress, _to, _value);\n', '    }\n', '\n', '    /*\n', '        Send coin with the different value by a implicit call method, this method can save some fee.\n', '    */\n', '    function mutiSendCoinWithDifferentValue(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256[] _value\n', '    ) public payable {\n', '        coinSendDifferentValue(_tokenAddress, _to, _value);\n', '    }\n', '\n', '    /*\n', '        Send coin with the different value by a explicit call method\n', '    */\n', '    function multisendToken(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256[] _value\n', '    ) public payable {\n', '        coinSendDifferentValue(_tokenAddress, _to, _value);\n', '    }\n', '\n', '    /*\n', '        Send coin with the same value by a explicit call method\n', '    */\n', '    function drop(\n', '        address _tokenAddress,\n', '        address[] _to,\n', '        uint256 _value\n', '    ) public payable {\n', '        coinSendSameValue(_tokenAddress, _to, _value);\n', '    }\n', '}']