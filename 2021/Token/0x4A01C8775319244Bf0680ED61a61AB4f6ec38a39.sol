['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', '/**\n', ' * \n', ' * Long Live Satoshi.\n', ' * \n', ' * https://gaspay.io\n', ' * \n', ' * https://t.me/GasPayDeFi\n', ' * https://t.me/GasPayAnnouncements\n', ' *\n', ' * \n', '*/ \n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract GasPay is Ownable, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    mapping (address => Lock[]) _locks;\n', '\n', '    uint256 private _totalSupply = 100000 ether;\n', '\n', '    string private _name = "GasPay";\n', '    string private _symbol = "$GASPAY";\n', '    uint8 private _decimals = 18;\n', '\n', '    uint256 private _percentFees = 6;\n', '\n', '    event Deposit(address indexed depositor, uint256 depositAmount, uint256 timestamp, uint256 unlockTimestamp);\n', '\n', '    struct Lock {\n', '        uint256 lockAmount;\n', '        uint256 unlockTime;\n', '    }\n', '\n', '    constructor() {\n', '        _balances[owner()] = _totalSupply;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function getContractBalance() public view returns (uint256) {\n', '        return _balances[address(this)];\n', '    }\n', '\n', '    function getFeeAmount(uint256 amount) public view returns (uint256) {\n', '        return amount.mul(_percentFees).div(100);\n', '    }\n', '\n', '    function getUnlockableAmount(address account) public view returns (uint256) {\n', '        Lock[] memory locks = _locks[account];\n', '        uint256 unlockableAmount = 0;\n', '\n', '        for (uint i=0; i<locks.length; i++) {\n', '            if (block.timestamp >= locks[i].unlockTime) {\n', '                unlockableAmount = unlockableAmount.add(locks[i].lockAmount);\n', '            }\n', '        }\n', '        \n', '        return unlockableAmount;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function lock(uint256 amount) public virtual {\n', '        address user = _msgSender();\n', '        uint256 lockAmount = amount;\n', '        uint256 timestamp = block.timestamp;\n', '        uint256 unlockTimestamp = timestamp.add(5 days);\n', '\n', '        _depositForLock(user, lockAmount);\n', '\n', '        Lock memory currentLock = Lock(\n', '            {\n', '                lockAmount: amount,\n', '                unlockTime: unlockTimestamp\n', '            }\n', '        );\n', '\n', '        _locks[user].push(currentLock);\n', '\n', '        emit Deposit(user, lockAmount, timestamp, unlockTimestamp);\n', '    }\n', '\n', '    function unlock() public virtual {\n', '        uint256 unlockableAmount = getUnlockableAmount(_msgSender());\n', '        require(unlockableAmount > 0, "No unlockable Tokens");\n', '                \n', '        Lock[] storage locks = _locks[_msgSender()];\n', '        uint256 withdrawAmount = 0;\n', '\n', '        // loop just in case somehow the order gets messed up, would be possible with single assignment from index 0 too\n', '        for (uint i=0; i<locks.length; i++) {\n', '            if (block.timestamp >= locks[i].unlockTime) {\n', '                withdrawAmount = withdrawAmount.add(locks[i].lockAmount);\n', '                locks = _removeIndex(i, locks);\n', '                break;\n', '            }\n', '        }\n', '\n', '        _locks[_msgSender()] = locks;\n', '\n', '        _withdrawFromLock(_msgSender(), withdrawAmount);\n', '    }\n', '\n', '    function _removeIndex(uint256 index, Lock[] storage array) internal virtual returns(Lock[] storage) {\n', '        if (index >= array.length) {\n', '            return array;\n', '        }\n', '\n', '        for (uint i=index; i<array.length-1; i++) {\n', '            array[i] = array[i+1];\n', '        }\n', '\n', '        array.pop();\n', '\n', '        return array;\n', '    }\n', '\n', '    function _depositForLock(address sender, uint256 amount) internal virtual {\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: lock amount exceeds balance");\n', '        _balances[address(this)] = _balances[address(this)].add(amount);\n', '        \n', '        emit Transfer(sender, address(this), amount);\n', '    }\n', '\n', '    function _withdrawFromLock(address withdrawer, uint256 amount) internal virtual {\n', '        _balances[address(this)] = _balances[address(this)].sub(amount);\n', '        _balances[withdrawer] = _balances[withdrawer].add(amount);\n', '        \n', '        emit Transfer(address(this), withdrawer, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 transferFee = getFeeAmount(amount);\n', '        uint256 amountAfterFee = amount.sub(transferFee);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amountAfterFee);\n', '\n', '        _balances[owner()] = _balances[owner()].add(transferFee);\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '        emit Transfer(sender, owner(), transferFee);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']