['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', 'contract SabaiCoin {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    constructor() {\n', '        balanceOf[0x820BB2b4973b41bf56342d4D9cf9D13412a93dFB] = 3000000;\n', '        totalSupply = 3000000;\n', '        name = "Sabai";\n', '        symbol = "SAB";\n', '        decimals = 3;\n', '        owner = 0x820BB2b4973b41bf56342d4D9cf9D13412a93dFB;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c>=a && c>=b);\n', '      return c;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value >= 0, "Cannot send negative amount");\n', '        require(balanceOf[msg.sender] > _value, "The balance is not sufficient");\n', '        require(balanceOf[_to] + _value > balanceOf[_to], "Overflow attack");\n', '        require(balanceOf[msg.sender] - _value < balanceOf[msg.sender], "Overflow attack");\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value >= 0, "Cannot send negative amount");\n', '        require(balanceOf[_from] > _value, "The balance is not sufficient");\n', '        require(balanceOf[_to] + _value > balanceOf[_to], "Overflow attack");\n', '        require(_value < allowance[_from][msg.sender], "The allowance is not sufficient");\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value >= 0, "Cannot send negative amount");\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']