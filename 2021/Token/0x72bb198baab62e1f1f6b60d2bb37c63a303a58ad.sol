['// contracts/Antimasks.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract Antimasks is ERC721, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    uint public constant MAX_ANTIMASKS = 3000;\n', '    bool public hasSaleStarted = false;\n', '    \n', '    // provenance hash of all Antimasks\n', '    string public ANTIMASKS_PROVENANCE = "";\n', '\n', '    constructor(string memory baseURI) ERC721("Antimasks","ANTI")  {\n', '        setBaseURI(baseURI);\n', '    }\n', '    \n', '    function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 index;\n', '            for (index = 0; index < tokenCount; index++) {\n', '                result[index] = tokenOfOwnerByIndex(_owner, index);\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    function calculatePrice() public view returns (uint256) {\n', '        require(hasSaleStarted == true, "Sale has not started");\n', '        require(totalSupply() < (MAX_ANTIMASKS - 500), "Sale has already ended");\n', '\n', '        uint currentSupply = totalSupply();\n', '        if (currentSupply >= 2451) {\n', '            return 250000000000000000;         // 2451-2500:  0.25 ETH\n', '        } else if (currentSupply >= 2301) {\n', '            return 200000000000000000;         // 2301-2450:  0.20 ETH\n', '        } else if (currentSupply >= 1901) {\n', '            return 150000000000000000;         // 1901-2300:  0.15 ETH\n', '        } else if (currentSupply >= 1151) {\n', '            return 100000000000000000;         // 1151-1900:  0.10 ETH\n', '        } else if (currentSupply >= 401) {\n', '            return 60000000000000000;          // 401-1150:   0.06 ETH \n', '        } else {\n', '            return 30000000000000000;          // 1-400:      0.03 ETH\n', '        }\n', '    }\n', '\n', '    function calculatePriceForToken(uint _id) public view returns (uint256) {\n', '        require(_id < (MAX_ANTIMASKS - 500), "Sale has already ended");\n', '\n', '        if (_id >= 2451) {\n', '            return 250000000000000000;         // 2451-2500:  0.25 ETH\n', '        } else if (_id >= 2301) {\n', '            return 200000000000000000;         // 2301-2450:  0.20 ETH\n', '        } else if (_id >= 1901) {\n', '            return 150000000000000000;         // 1901-2300:  0.15 ETH\n', '        } else if (_id >= 1151) {\n', '            return 100000000000000000;         // 1151-1900:  0.10 ETH\n', '        } else if (_id >= 401) {\n', '            return 60000000000000000;          // 401-1150:   0.06 ETH \n', '        } else {\n', '            return 30000000000000000;          // 1-400:      0.03 ETH\n', '        }\n', '    }\n', '    \n', '   function mintAntimask(uint256 numAntimasks) public payable {\n', '        require(totalSupply() < (MAX_ANTIMASKS - 500), "Sale has already ended");\n', '        require(numAntimasks > 0 && numAntimasks <= 5, "You can mint from 1 to 5 Antimasks");\n', '        require(totalSupply().add(numAntimasks) <= (MAX_ANTIMASKS - 500), "Exceeds MAX_ANTIMASKS");\n', '        require(msg.value >= calculatePrice().mul(numAntimasks), "Ether value sent is below the price");\n', '\n', '        for (uint i = 0; i < numAntimasks; i++) {\n', '            uint mintIndex = totalSupply() + 1;\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '    }\n', '    \n', '   function mintAntimaskAirdrops(uint256 numAntimasks) public payable onlyOwner {\n', '        require(totalSupply() < MAX_ANTIMASKS, "Max Antimasks supply reached");\n', '        require(totalSupply().add(numAntimasks) <= MAX_ANTIMASKS, "Exceeds MAX_ANTIMASKS");\n', '\n', '        for (uint i = 0; i < numAntimasks; i++) {\n', '            uint mintIndex = totalSupply() + 1;\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '    }\n', '\n', '    // set provenance hash after all Antimasks minted\n', '    function setProvenanceHash(string memory _hash) public onlyOwner {\n', '        ANTIMASKS_PROVENANCE = _hash;\n', '    }\n', '    \n', '    function setBaseURI(string memory baseURI) public onlyOwner {\n', '        _setBaseURI(baseURI);\n', '    }\n', '    \n', '    function startSale() public onlyOwner {\n', '        hasSaleStarted = true;\n', '    }\n', '    function pauseSale() public onlyOwner {\n', '        hasSaleStarted = false;\n', '    }\n', '    \n', '    function withdrawAll() public payable onlyOwner {\n', '        require(payable(msg.sender).send(address(this).balance));\n', '    }\n', '\n', '}']