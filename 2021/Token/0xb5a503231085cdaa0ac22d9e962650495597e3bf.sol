['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.6.12;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// This contract simply calls multiple targets sequentially, ensuring WETH balance before and after\n', '\n', 'contract FlashBotsMultiCall {\n', '    address private immutable owner;\n', '    address private immutable executor;\n', '    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    modifier onlyExecutor() {\n', '        require(msg.sender == executor);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(address _executor) public payable {\n', '        owner = msg.sender;\n', '        executor = _executor;\n', '        if (msg.value > 0) {\n', '            WETH.deposit{value: msg.value}();\n', '        }\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function uniswapWeth(uint256 _wethAmountToFirstMarket, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {\n', '        require (_targets.length == _payloads.length);\n', '        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n', '        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\n', '        for (uint256 i = 0; i < _targets.length; i++) {\n', '            (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\n', '            require(_success); _response;\n', '        }\n', '\n', '        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n', '        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\n', '        if (_ethAmountToCoinbase == 0) return;\n', '\n', '        uint256 _ethBalance = address(this).balance;\n', '        if (_ethBalance < _ethAmountToCoinbase) {\n', '            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n', '        }\n', '        block.coinbase.transfer(_ethAmountToCoinbase);\n', '    }\n', '\n', '    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {\n', '        require(_to != address(0));\n', '        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n', '        require(_success);\n', '        return _result;\n', '    }\n', '}']