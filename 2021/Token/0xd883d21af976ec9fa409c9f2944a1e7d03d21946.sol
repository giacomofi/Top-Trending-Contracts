['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'abstract contract ERC20Capped is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n', '     * set once during construction.\n', '     */\n', '    constructor (uint256 cap_) internal {\n', '        require(cap_ > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap_;\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the cap on the token's total supply.\n", '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - minted tokens must not cause the total supply to go over the cap.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '}\n', '\n', 'contract wCHXMapping is Ownable {\n', '    event AddressMapped(address indexed ethAddress, string chxAddress, string signature);\n', '    event AddressMappingRemoved(address indexed ethAddress, string chxAddress, string signature);\n', '\n', '    mapping (address => string) private ethToChxAddresses;\n', '    mapping (string => address) private chxToEthAddresses;\n', '    mapping (string => string) private chxToSignatures;\n', '\n', '    constructor()\n', '        public\n', '    {\n', '    }\n', '\n', '    function chxAddress(address _ethAddress)\n', '        external\n', '        view\n', '        returns (string memory) \n', '    {\n', '        return ethToChxAddresses[_ethAddress];\n', '    }\n', '\n', '    function ethAddress(string calldata _chxAddress)\n', '        external\n', '        view\n', '        returns (address) \n', '    {\n', '        return chxToEthAddresses[_chxAddress];\n', '    }\n', '\n', '    function signature(string calldata _chxAddress)\n', '        external\n', '        view\n', '        returns (string memory) \n', '    {\n', '        return chxToSignatures[_chxAddress];\n', '    }\n', '\n', '    function mapAddress(string calldata _chxAddress, string calldata _signature)\n', '        external\n', '    {\n', '        address _ethAddress = _msgSender();\n', '\n', '        require(bytes(ethToChxAddresses[_ethAddress]).length == 0);\n', '        require(chxToEthAddresses[_chxAddress] == address(0));\n', '        require(bytes(chxToSignatures[_chxAddress]).length == 0);\n', '        checkChxAddress(_chxAddress);\n', '        checkSignature(_signature);\n', '\n', '        ethToChxAddresses[_ethAddress] = _chxAddress;\n', '        chxToEthAddresses[_chxAddress] = _ethAddress;\n', '        chxToSignatures[_chxAddress] = _signature;\n', '\n', '        emit AddressMapped(_ethAddress, _chxAddress, _signature);\n', '    }\n', '\n', '    function removeMappedAddress(address _ethAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        string memory _chxAddress = ethToChxAddresses[_ethAddress];\n', '        require(bytes(_chxAddress).length != 0);\n', '\n', '        string memory _signature = chxToSignatures[_chxAddress];\n', '        require(bytes(_signature).length != 0);\n', '        require(chxToEthAddresses[_chxAddress] == _ethAddress);\n', '        \n', '        delete ethToChxAddresses[_ethAddress];\n', '        delete chxToEthAddresses[_chxAddress];\n', '        delete chxToSignatures[_chxAddress];\n', '        \n', '        emit AddressMappingRemoved(_ethAddress, _chxAddress, _signature);\n', '    }\n', '\n', '    function isAlphanumericChar(bytes1 _char)\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (_char >= 0x30 && _char <= 0x39) || \n', '            (_char >= 0x41 && _char <= 0x5A) || \n', '            (_char >= 0x61 && _char <= 0x7A);\n', '    }\n', '\n', '    function checkChxAddress(string memory _chxAddress)\n', '        private \n', '        pure\n', '    {\n', '        bytes memory _strBytes = bytes(_chxAddress);\n', '        bytes memory _prefix = bytes("CH");\n', '        require(_strBytes[0] == _prefix[0] && _strBytes[1] == _prefix[1], "Invalid CHX address");\n', '\n', '        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\n', '        require(isAlphanumericChar(_lastChar), "CHX address ends with incorrect character");\n', '    }\n', '\n', '    function checkSignature(string memory _signature)\n', '        private \n', '        pure\n', '    {\n', '        bytes memory _strBytes = bytes(_signature);\n', '\n', '        bytes1 _firstChar = _strBytes[0];\n', '        require(isAlphanumericChar(_firstChar), "Signature ends with incorrect character");\n', '\n', '        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\n', '        require(isAlphanumericChar(_lastChar), "Signature ends with incorrect character");\n', '    }\n', '\n', "    // Enable recovery of ether sent by mistake to this contract's address.\n", '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        payable(owner()).transfer(_amount);\n', '        return true;\n', '    }\n', '\n', "    // Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\n", '    function drainStrayTokens(IERC20 _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return _token.transfer(owner(), _amount);\n', '    }\n', '}\n', '\n', 'contract wCHXToken is ERC20Capped, Ownable {\n', '    using SafeMath for uint;\n', '    event UnwrapChx(address ethAddress, string chxAddress, uint amount);\n', '    event WrapChx(address ethAddress, string chxAddress, uint amount);\n', '\n', '    wCHXMapping public addressMapping;\n', '    uint public minWrapAmount;\n', '    mapping (address => uint) private pendingUnwrapBalances;\n', '\n', '    constructor(address _mappingContractAddress)\n', '        ERC20("Wrapped CHX", "wCHX")\n', '        ERC20Capped(uint(1689565220930844))\n', '        public\n', '    {\n', '        addressMapping = wCHXMapping(_mappingContractAddress);\n', '        _setupDecimals(7);\n', '        minWrapAmount = uint(1000).mul(1e7);\n', '    }\n', '\n', '    function pendingUnwrapBalanceOf(address _ethAddress) \n', '        external \n', '        view \n', '        returns (uint) \n', '    {\n', '        return pendingUnwrapBalances[_ethAddress];\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Transfers\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function transfer(address _recipient, uint _amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        validateAndLogUnwrap(_msgSender(), _recipient, _amount);\n', '\n', '        bool isSuccess = super.transfer(_recipient, _amount);\n', '\n', '        if (isSuccess && _recipient == address(this)) {\n', '            pendingUnwrapBalances[_msgSender()] = pendingUnwrapBalances[_msgSender()].add(_amount);\n', '        }\n', '\n', '        return isSuccess;\n', '    }\n', '\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        validateAndLogUnwrap(_sender, _recipient, _amount);\n', '\n', '        bool isSuccess = super.transferFrom(_sender, _recipient, _amount);\n', '\n', '        if (isSuccess && _recipient == address(this)) {\n', '            pendingUnwrapBalances[_sender] = pendingUnwrapBalances[_sender].add(_amount);\n', '        }\n', '\n', '        return isSuccess;\n', '    }\n', '\n', '    function validateAndLogUnwrap(address _sender, address _recipient, uint256 _amount) \n', '        private\n', '    {\n', '        if (_recipient == address(this)) {\n', '            require(_amount >= minWrapAmount, "Amount must be greater than minWrapAmount");\n', '            string memory chxAddress = addressMapping.chxAddress(_sender);\n', '            require(bytes(chxAddress).length != 0, "Address is not mapped to CHX address");\n', '            emit UnwrapChx(_sender, chxAddress, _amount);\n', '        }\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Wrapping logic\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function burnUnwrapedTokens(string calldata _chxAddress, uint _amount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        address ethAddress = addressMapping.ethAddress(_chxAddress);\n', '        require(ethAddress != address(0), "CHX address is not mapped to ETH address");\n', '\n', '        pendingUnwrapBalances[ethAddress] = pendingUnwrapBalances[ethAddress].sub(_amount, "Burn amount exceeds unwraped token balance");\n', '        _burn(address(this), _amount);\n', '    }\n', '\n', '    function revertUnwrapedTokens(string calldata _chxAddress, uint _revertAmount, uint _feeAmount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        address ethAddress = addressMapping.ethAddress(_chxAddress);\n', '        require(ethAddress != address(0), "CHX address is not mapped to ETH address");\n', '\n', '        uint totalAmount = _revertAmount.add(_feeAmount);\n', '        pendingUnwrapBalances[ethAddress] = pendingUnwrapBalances[ethAddress].sub(totalAmount, "Total amount exceeds unwraped token balance");\n', '        _burn(address(this), _feeAmount);\n', '        _transfer(address(this), ethAddress, _revertAmount);\n', '    }\n', '\n', '    function wrap(string calldata _chxAddress, uint _amount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        address ethAddress = addressMapping.ethAddress(_chxAddress);\n', '        require(ethAddress != address(0), "CHX address is not mapped to ETH address");\n', '        emit WrapChx(ethAddress, _chxAddress, _amount);\n', '\n', '        _mint(ethAddress, _amount);\n', '    }\n', '\n', '    function setMinWrapAmount(uint _amount)\n', '        external\n', '        onlyOwner\n', '    {\n', '        minWrapAmount = _amount;\n', '    }\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Miscellaneous\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', "    // Enable recovery of ether sent by mistake to this contract's address.\n", '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        payable(owner()).transfer(_amount);\n', '        return true;\n', '    }\n', '\n', "    // Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\n", '    function drainStrayTokens(IERC20 _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(address(_token) != address(this), "wCHX cannot be drained");\n', '        return _token.transfer(owner(), _amount);\n', '    }\n', '}']