['# @version ^0.2.8\n', '# https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', "'''\n", '@title FLEX Coin ERC-20 Token\n', '@author Sitt Guruvanich\n', '@notice Implementation of FLEX Coin used by CoinFLEX\n', '@dev Follows the ERC-20 token standard as defined at\n', '     https://eips.ethereum.org/EIPS/eip-20\n', "'''\n", 'from vyper.interfaces import ERC20\n', 'implements: ERC20\n', '\n', '### Events ###\n', 'event Transfer: # ERC-20\n', '  _from: indexed(address)\n', '  _to: indexed(address)\n', '  _value: uint256\n', '\n', 'event Approval: # ERC-20\n', '  _owner: indexed(address)\n', '  _spender: indexed(address)\n', '  _value: uint256\n', '\n', 'event OwnershipTransferred: # Ownable\n', '  _prev_owner: indexed(address)\n', '  _new_owner:  indexed(address)\n', '\n', '### Member Variables ###\n', 'name: public(String[64])\n', 'symbol: public(String[32])\n', 'balanceOf: public(HashMap[address, uint256])\n', 'allowance: public(HashMap[address, HashMap[address, uint256]])\n', 'totalSupply: public(uint256)\n', 'owner: public(address) # Implements Ownable\n', '\n', '@external\n', 'def __init__(_name: String[64], _symbol: String[32]):\n', '  self.name = _name\n', '  self.symbol = _symbol\n', '  self.owner = msg.sender\n', '  log Transfer(ZERO_ADDRESS, msg.sender, 0)\n', '\n', '@view\n', '@external\n', 'def decimals() -> uint256:\n', "  '''\n", '  @notice Get the number of decimals for this token\n', '  @dev Implemented as a view method to reduce gas costs\n', '  @return uint256 decimal places\n', "  '''\n", '  return 18\n', '\n', '@external\n', 'def transfer(_to : address, _value : uint256) -> bool:\n', "  '''\n", '  @dev Transfer token for a specified address\n', '  @param _to The address to transfer to.\n', '  @param _value The amount to be transferred.\n', "  '''\n", '  # NOTE: vyper does not allow underflows\n', '  #       so the following subtraction would revert on insufficient balance\n', '  self.balanceOf[msg.sender] -= _value\n', '  self.balanceOf[_to] += _value\n', '  log Transfer(msg.sender, _to, _value)\n', '  return True\n', '\n', '@external\n', 'def transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n', "  '''\n", '  @dev Transfer tokens from one address to another.\n', '  @param _from address The address which you want to send tokens from\n', '  @param _to address The address which you want to transfer to\n', '  @param _value uint256 the amount of tokens to be transferred\n', "  '''\n", '  self.balanceOf[_from] -= _value\n', '  self.balanceOf[_to] += _value\n', '  _allowance: uint256 = self.allowance[_from][msg.sender]\n', '  if _allowance != MAX_UINT256:\n', '    self.allowance[_from][msg.sender] = _allowance - _value\n', '  log Transfer(_from, _to, _value)\n', '  return True\n', '\n', '@external\n', 'def approve(_spender : address, _value : uint256) -> bool:\n', "  '''\n", '  @notice Approve the passed address to transfer the specified amount of\n', '          tokens on behalf of msg.sender\n', '  @dev Beware that changing an allowance via this method brings the risk\n', '       that someone may use both the old and new allowance by unfortunate\n', '       transaction ordering. This may be mitigated with the use of\n', '       {increaseAllowance} and {decreaseAllowance}.\n', '       https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '  @param _spender The address which will transfer the funds\n', '  @param _value The amount of tokens that may be transferred\n', '  @return bool success\n', "  '''\n", '  self.allowance[msg.sender][_spender] = _value\n', '  log Approval(msg.sender, _spender, _value)\n', '  return True\n', '\n', '@external\n', 'def increaseAllowance(_spender: address, _added_value: uint256) -> bool:\n', "  '''\n", '  @notice Increase the allowance granted to `_spender` by the caller\n', '  @dev This is alternative to {approve} that can be used as a mitigation for\n', '       the potential race condition\n', '  @param _spender The address which will transfer the funds\n', '  @param _added_value The amount of to increase the allowance\n', '  @return bool success\n', "  '''\n", '  allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\n', '  self.allowance[msg.sender][_spender] = allowance\n', '  log Approval(msg.sender, _spender, allowance)\n', '  return True\n', '\n', '@external\n', 'def decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\n', "  '''\n", '  @notice Decrease the allowance granted to `_spender` by the caller\n', '  @dev This is alternative to {approve} that can be used as a mitigation for\n', '       the potential race condition\n', '  @param _spender The address which will transfer the funds\n', '  @param _subtracted_value The amount of to decrease the allowance\n', '  @return bool success\n', "  '''\n", '  allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\n', '  self.allowance[msg.sender][_spender] = allowance\n', '  log Approval(msg.sender, _spender, allowance)\n', '  return True\n', '\n', '@external\n', 'def mint(_to: address, _value: uint256) -> bool:\n', "  '''\n", '  @notice Mint an amount of the token and assigns it to an account.\n', '       This encapsulates the modification of balances such that the\n', '       proper events are emitted.\n', '  @dev only contract owner has access to this action\n', '  @param _to The account that will receive the created tokens.\n', '  @param _value The amount that will be created.\n', "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", '  self.totalSupply += _value\n', '  self.balanceOf[_to] += _value\n', '  log Transfer(ZERO_ADDRESS, _to, _value)\n', '  return True\n', '\n', '@external\n', 'def burnFrom(_to: address, _value: uint256) -> bool:\n', "  '''\n", '  @notice Burn an amount of the token from a given account.\n', '  @dev only contract owner has access to this action\n', '  @param _to The account whose tokens will be burned.\n', '  @param _value The amount that will be burned.\n', "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", '  self.totalSupply -= _value\n', '  self.balanceOf[_to] -= _value\n', '  log Transfer(_to, ZERO_ADDRESS, _value)\n', '  return True\n', '\n', '@external\n', 'def transferOwnership(_addr: address) -> bool:\n', "  '''\n", '  @notice Transfer ownership for this contract; Only one owner address allowed\n', '  @dev only contract owner has access to this action\n', "  @param _addr  the address to transfer this contract's ownership to\n", "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", "  assert _addr != ZERO_ADDRESS, 'Cannot transfer contract ownership to zero address.' # dev: cannot transfer ownership to zero address\n", '  self.owner = _addr # dev: set new owner\n', '  log OwnershipTransferred(msg.sender, _addr)\n', '  return True']