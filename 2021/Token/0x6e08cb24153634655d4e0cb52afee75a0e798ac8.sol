['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', 'pragma solidity 0.5.10;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title FreezerRole\n', ' */\n', 'contract FreezerRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event FreezerAdded(address indexed account);\n', '    event FreezerRemoved(address indexed account);\n', '\n', '    Roles.Role internal _freezers;\n', '\n', '    modifier onlyFreezer() {\n', '        require(isFreezer(msg.sender), "Caller has no permission");\n', '        _;\n', '    }\n', '\n', '    function isFreezer(address account) public view returns (bool) {\n', '        return(_freezers.has(account) || account == owner());\n', '    }\n', '}\n', '\n', 'interface ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\n', '}\n', '\n', 'contract FosterToken is ERC20, FreezerRole {\n', '\n', '    address private boss = 0xC20e9fa3C437181A8f2F283B5c97Af59C0b046Aa;\n', '    address private admin = 0x0D968ab967290731c75204A9713856f9954dfEc4;\n', '\n', '    mapping (address => uint256) freezed;\n', '\n', '    modifier notFreezed(address account) {\n', '        require(block.timestamp >= freezed[account], "Balance is frozen");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerAndBoss() {\n', '        require(msg.sender == owner() || msg.sender == boss, "No access");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdminAndBoss() {\n', '        require(msg.sender == admin || msg.sender == boss, "No access");\n', '        _;\n', '    }\n', '\n', '    modifier onlyBoss() {\n', '        require(msg.sender == boss, "No access");\n', '        _;\n', '    }\n', '\n', '    uint256 internal INITIAL_SUPPLY = 8000000000 * (10 ** 18);\n', '\n', '    bool public issuingFinished;\n', '\n', '    constructor(address recipient) public {\n', '\n', '        _name = "FOSTER Token";\n', '        _symbol = "FOSTER";\n', '        _decimals = 18;\n', '\n', '        _mint(recipient, INITIAL_SUPPLY);\n', '\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal notFreezed(sender) {\n', '        super._transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _freeze(address account, uint256 period) internal {\n', '        require(account != address(0));\n', '        freezed[account] = block.timestamp.add(period);\n', '        emit OnFreezed(msg.sender, account, period, block.timestamp);\n', '    }\n', '\n', '    function freeze(address[] memory accounts, uint256[] memory periods) public onlyFreezer {\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            _freeze(accounts[i], periods[i]);\n', '        }\n', '    }\n', '\n', '    function _freezeAndTransfer(address recipient, uint256 amount, uint256 period) internal {\n', '        _freeze(recipient, period);\n', '        transfer(recipient, amount);\n', '    }\n', '\n', '    function freezeAndTransfer(address recipient, uint256 amount, uint256 period) public onlyFreezer {\n', '        _freezeAndTransfer(recipient, amount, period);\n', '    }\n', '\n', '    function freezeAndTransfer(address[] memory recipients, uint256[] memory amounts, uint256[] memory periods) public onlyFreezer {\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            _freezeAndTransfer(recipients[i], amounts[i], periods[i]);\n', '        }\n', '    }\n', '\n', '    function issue(address[] memory accounts, uint256[] memory values) public onlyBoss {\n', '        require(!issuingFinished, "Issuing is finished");\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            _mint(accounts[i], values[i]);\n', '            emit OnIssue(accounts[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function finishIssuing(bool check) public onlyBoss {\n', '        require(!issuingFinished && check);\n', '        issuingFinished = check;\n', '    }\n', '\n', '    function deputeBoss(address newBoss) public onlyBoss {\n', '        require(newBoss != address(0));\n', '        emit OnBossDeputed(boss, newBoss, block.timestamp);\n', '        boss = newBoss;\n', '    }\n', '\n', '    function deputeAdmin(address newAdmin) public onlyOwnerAndBoss {\n', '        require(newAdmin != address(0));\n', '        emit OnAdminDeputed(admin, newAdmin, block.timestamp);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function addFreezer(address account) public onlyOwnerAndBoss {\n', '        _freezers.add(account);\n', '        emit FreezerAdded(account);\n', '    }\n', '\n', '    function removeFreezer(address account) public onlyOwnerAndBoss {\n', '        _freezers.remove(account);\n', '        emit FreezerRemoved(account);\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\n', '        require(approve(spender, amount));\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawERC20(address ERC20Token, address recipient) external {\n', '        require(msg.sender == boss || msg.sender == admin);\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        require(amount > 0);\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '    function setName(string memory newName, string memory newSymbol) public onlyOwner {\n', '        emit OnNameSet(_name, _symbol, newName, newSymbol, now);\n', '\n', '        _name = newName;\n', '        _symbol = newSymbol;\n', '    }\n', '\n', '    function releaseDate(address account) public view returns(uint256) {\n', '        return freezed[account];\n', '    }\n', '\n', '    event OnFreezed (\n', '        address indexed sender,\n', '        address indexed account,\n', '        uint256 period,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event OnBossDeputed (\n', '        address indexed former,\n', '        address indexed current,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event OnAdminDeputed (\n', '        address indexed former,\n', '        address indexed current,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event OnNameSet (\n', '        string oldName,\n', '        string oldSymbol,\n', '        string newName,\n', '        string newSymbol,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event OnIssue(\n', '        address indexed account,\n', '        uint256 value\n', '    );\n', '\n', '}']