['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '// import "@openzeppelin/contracts/utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/security/Pausable.sol\n', '\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '// import "@openzeppelin/contracts/utils/Context.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/security/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '// pragma solidity ^0.8.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/utils/Context.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overloaded;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// Dependency file: contracts/token/ZilliosToken.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'contract ZilliosToken is ERC20, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) Ownable() {}\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished, "ERC20: Minting is finished");\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) external onlyOwner canMint returns (bool) {\n', '        _mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() external onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _unsoldTokens) external onlyOwner returns (bool) {\n', '        _burn(msg.sender, _unsoldTokens);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/base/Crowdsale.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '// import "@openzeppelin/contracts/security/Pausable.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/security/ReentrancyGuard.sol";\n', '// import "contracts/token/ZilliosToken.sol";\n', '\n', 'contract Crowdsale is Ownable, Pausable, ReentrancyGuard {\n', '    ZilliosToken internal token;\n', '    address internal wallet;\n', '    uint256 public rate; //for rate use in wei, for example, rate 1 is 1**10^18, 1.5 - 1.5*10^18\n', '    uint256 internal weiRaised;\n', '    uint256 public ICOstartTime;\n', '    uint256 public ICOEndTime;\n', '    uint256 public totalSupply = 1000000000 * (1 ether);\n', '\n', '    // SUPPLIES :: START\n', '    uint256 public publicSupply = 400000000 * (1 ether);\n', '    uint256 public teamFounderSupply = 250000000 * (1 ether);\n', '    uint256 public companyVestingSupply = 250000000 * (1 ether);\n', '    uint256 public advisorSupply = 30000000 * (1 ether);\n', '    uint256 public bountySupply = 10000000 * (1 ether);\n', '    uint256 public rewardsSupply = 60000000 * (1 ether);\n', '    // SUPPLIES :: END\n', '    uint256 public teamFounderTimeLock;\n', '    uint256 public companyVestingTimeLock;\n', '    uint256 public advisorTimeLock;\n', '    uint256 internal founderCounter = 0;\n', '    uint256 internal advisorCounter = 0;\n', '    uint256 internal companyCounter = 0;\n', '    bool public checkBurnTokens;\n', '    bool public checkAlocatedBurn;\n', '\n', '    // ETH RATES again USD\n', '\n', '    uint256 public WEI_500_USD;\n', '\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event WEIPriceSET(uint256 _wei_500_usd);\n', '\n', '    event RateChanged(uint256 newRate);\n', '\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) Pausable() Ownable() ReentrancyGuard() {\n', '        require(_startTime >= block.timestamp, "ZilliosCrowdsale: start time is before current time");\n', '        require(_endTime >= _startTime, "ZilliosCrowdsale: start time is not before end time");\n', '        require(_rate > 0, "ZilliosCrowdsale: rate is 0");\n', '        require(_wallet != address(0x0), "ZilliosCrowdsale: wallet is the zero address");\n', '        require(address(_token) != address(0x0), "ZilliosCrowdsale: token is the zero address");\n', '\n', '        ICOstartTime = _startTime;\n', '        ICOEndTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '\n', '        teamFounderTimeLock = ICOEndTime + (730 days);\n', '        companyVestingTimeLock = ICOEndTime + (730 days);\n', '        advisorTimeLock = ICOEndTime + (365 days);\n', '\n', '        checkBurnTokens = false;\n', '        checkAlocatedBurn = false;\n', '\n', '        token = _token;\n', '    }\n', '\n', '    function getTokenAmount(uint256 weiAmount) internal returns (uint256) {\n', '        uint256 tokens;\n', '\n', '        if (WEI_500_USD > 0) {\n', '            if (weiAmount >= WEI_500_USD) {\n', '                // wei amount > 500 USD worth WEI\n', '\n', '                tokens = tokens + (weiAmount * rate) / 10**18;\n', '                tokens = tokens + ((tokens * 20) / 100); // 20% bonus\n', '            } else if ((weiAmount < WEI_500_USD) && (weiAmount >= ((WEI_500_USD * 100) / 25) / 10)) {\n', '                // wei amount >= 200 and < 500 USD worth WEI\n', '\n', '                tokens = tokens + (weiAmount * rate) / 10**18;\n', '                tokens = tokens + ((tokens * 15) / 100); // 15% bonus\n', '            } else if ((weiAmount < ((WEI_500_USD * 100) / 25) / 10) && (weiAmount >= (WEI_500_USD / 5))) {\n', '                // wei amount < 200 USD && >= 100 USD worth WEI\n', '\n', '                tokens = tokens + (weiAmount * rate) / 10**18;\n', '                tokens = tokens + ((tokens * 10) / 100); // 10% bonus\n', '            } else if ((weiAmount < (WEI_500_USD / 5)) && (weiAmount >= (WEI_500_USD / 20))) {\n', '                // wei amount < 100 USD && >= 25 USD worth WEI\n', '\n', '                tokens = tokens + (weiAmount * rate) / 10**18;\n', '                tokens = tokens + ((tokens * 5) / 100); // 5% bonus\n', '            } else {\n', '                tokens = tokens + (weiAmount * rate) / 10**18;\n', '            }\n', '        } else {\n', '            tokens = tokens + ((weiAmount * rate)) / 10**18;\n', '        }\n', '\n', '        publicSupply = publicSupply - tokens;\n', '        return tokens;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable virtual nonReentrant whenNotPaused {\n', '        require(beneficiary != address(0x0), "ZilliosCrowdsale: beneficiary is the zero address");\n', '        require(validPurchase(), "ZilliosCrowdsale: purchase is not valid");\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 tokens = 0;\n', '\n', '        tokens = getTokenAmount(weiAmount);\n', '\n', '        forwardFunds();\n', '\n', '        weiRaised = weiRaised + weiAmount;\n', '        token.mint(beneficiary, tokens);\n', '\n', '        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    function setWEIPrice(uint256 _wei_500_usd) external onlyOwner {\n', '        WEI_500_USD = _wei_500_usd;\n', '\n', '        emit WEIPriceSET(WEI_500_USD);\n', '    }\n', '\n', '    function changeRate(uint256 _newRate) external onlyOwner {\n', '        rate = _newRate;\n', '\n', '        emit RateChanged(rate);\n', '    }\n', '\n', '    function forwardFunds() internal virtual {\n', '        payable(wallet).transfer(msg.value);\n', '    }\n', '\n', '    function validPurchase() internal view virtual returns (bool) {\n', '        bool withinPeriod = block.timestamp >= ICOstartTime && block.timestamp <= ICOEndTime;\n', '        bool nonZeroPurchase = true;\n', '\n', '        return withinPeriod && nonZeroPurchase && msg.value != 0;\n', '    }\n', '\n', '    function hasEnded() public view virtual returns (bool) {\n', '        return block.timestamp > ICOEndTime;\n', '    }\n', '\n', '    function getTokenAddress() public view onlyOwner returns (address) {\n', '        return address(token);\n', '    }\n', '\n', '    function pause() external onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/distribution/RefundVault.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'contract RefundVault is Ownable {\n', '    enum State {Active, Refunding, Closed}\n', '    mapping(address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    constructor(address _wallet) {\n', '        require(_wallet != address(0x0));\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '\n', '    function deposit(address investor) external payable onlyOwner {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor] + msg.value;\n', '    }\n', '\n', '    function close() external onlyOwner {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        payable(wallet).transfer(address(this).balance);\n', '    }\n', '\n', '    function enableRefunds() external onlyOwner {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    function refund(address investor) external {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        payable(investor).transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/distribution/Allocations.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "contracts/base/Crowdsale.sol";\n', '\n', 'contract Allocations is Crowdsale {\n', '    struct Bounty {\n', '        uint256 amount;\n', '        uint256 lockTime;\n', '    }\n', '\n', '    mapping(address => Bounty) public bounties;\n', '\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) Crowdsale(_startTime, _endTime, _rate, _wallet, _token) {}\n', '\n', '    function bountyDrop(address[] memory recipients, uint256[] memory values) public onlyOwner {\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = values[i];\n', '            require(bountySupply >= values[i]);\n', '            bountySupply = bountySupply - values[i];\n', '\n', '            bounties[recipients[i]].amount = bounties[recipients[i]].amount + values[i];\n', '            bounties[recipients[i]].lockTime = block.timestamp + 4 weeks;\n', '        }\n', '    }\n', '\n', '    function withdrawBounty() external {\n', '        Bounty memory sender_bounty = bounties[msg.sender];\n', '\n', '        require(sender_bounty.lockTime < block.timestamp, "ZilliosToken: Vesting period of 4 weeks has not ended.");\n', '        require(sender_bounty.amount > 0, "ZilliosToken: No bounty found.");\n', '\n', '        uint256 bounty_amount = sender_bounty.amount;\n', '        delete bounties[msg.sender];\n', '\n', '        token.mint(msg.sender, bounty_amount);\n', '    }\n', '\n', '    function grantAdvisorToken(address beneficiary) external onlyOwner {\n', '        require((advisorCounter < 6) && (advisorTimeLock < block.timestamp), "ZilliosCrowdsale: cliff period is not ended");\n', '        advisorTimeLock = advisorTimeLock + 30 days;\n', '        token.mint(beneficiary, advisorSupply / 6);\n', '        advisorCounter = advisorCounter + 1;\n', '    }\n', '\n', '    function grantTeamFounderToken(address teamfounderAddress) external onlyOwner {\n', '        require((founderCounter < 6) && (teamFounderTimeLock < block.timestamp), "ZilliosCrowdsale: cliff period is not ended");\n', '        teamFounderTimeLock = teamFounderTimeLock + 30 days;\n', '        token.mint(teamfounderAddress, teamFounderSupply / 6);\n', '        founderCounter = founderCounter + 1;\n', '    }\n', '\n', '    function grantCompanyToken(address companyAddress) public onlyOwner {\n', '        require((companyCounter < 12) && (companyVestingTimeLock < block.timestamp), "ZilliosCrowdsale: cliff period is not ended");\n', '        companyVestingTimeLock = companyVestingTimeLock + 30 days;\n', '        token.mint(companyAddress, companyVestingSupply / 12);\n', '        companyCounter = companyCounter + 1;\n', '    }\n', '\n', '    function transferRewardsFunds(address[] memory recipients, uint256[] memory values) public onlyOwner {\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = values[i];\n', '            require(rewardsSupply >= values[i]);\n', '            rewardsSupply = rewardsSupply - values[i];\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function transferFunds(address[] memory recipients, uint256[] memory values) public onlyOwner {\n', '        require(!checkBurnTokens);\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = values[i];\n', '            require(publicSupply >= values[i]);\n', '            publicSupply = publicSupply - values[i];\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function burnToken() external onlyOwner returns (bool) {\n', '        require(hasEnded());\n', '        require(!checkBurnTokens);\n', '        token.burn(publicSupply);\n', '        totalSupply = totalSupply - publicSupply;\n', '        publicSupply = 0;\n', '        checkBurnTokens = true;\n', '        return true;\n', '    }\n', '\n', '    function allocatedTokenBurn() external onlyOwner returns (bool) {\n', '        require(!checkAlocatedBurn);\n', '        require(hasEnded());\n', '        token.burn(advisorSupply);\n', '        token.burn(bountySupply);\n', '        totalSupply = totalSupply - advisorSupply;\n', '        totalSupply = totalSupply - bountySupply;\n', '        advisorSupply = 0;\n', '        bountySupply = 0;\n', '\n', '        checkAlocatedBurn = true;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/distribution/FinalizableCrowdsale.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "contracts/distribution/Allocations.sol";\n', '\n', 'contract FinalizableCrowdsale is Allocations {\n', '    bool isFinalized = false;\n', '    event Finalized();\n', '\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) Allocations(_startTime, _endTime, _rate, _wallet, _token) {}\n', '\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized, "ZilliosCrowdsale: already finalized");\n', '        require(hasEnded(), "ZilliosCrowdsale: not closed");\n', '        finalization();\n', '        emit Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    function finalization() internal virtual {}\n', '}\n', '\n', '\n', '// Dependency file: contracts/distribution/RefundableCrowdsale.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "contracts/distribution/RefundVault.sol";\n', '// import "contracts/distribution/FinalizableCrowdsale.sol";\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    uint256 internal goal;\n', '    RefundVault private vault;\n', '\n', '    constructor(\n', '        uint256 _goal,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) FinalizableCrowdsale(_startTime, _endTime, _rate, _wallet, _token) {\n', '        require(_goal > 0, "ZilliosCrowdsale: goal is 0");\n', '\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', '    function forwardFunds() internal virtual override(Crowdsale) {\n', '        vault.deposit{value: msg.value}(msg.sender);\n', '    }\n', '\n', '    function claimRefund() external {\n', '        require(isFinalized, "ZilliosCrowdsale: not finalized");\n', '        require(!goalReached(), "ZilliosCrowdsale: goal reached");\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    function finalization() internal virtual override {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised >= goal;\n', '    }\n', '\n', '    function getVaultAddress() external view onlyOwner returns (address) {\n', '        return address(vault);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/validation/CappedCrowdsale.sol\n', '\n', '\n', '// pragma solidity 0.8.0;\n', '\n', '// import "contracts/distribution/RefundableCrowdsale.sol";\n', '\n', 'contract CappedCrowdsale is RefundableCrowdsale {\n', '    uint256 internal cap;\n', '\n', '    constructor(\n', '        uint256 _cap,\n', '        uint256 _goal,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) RefundableCrowdsale(_goal, _startTime, _endTime, _rate, _wallet, _token) {\n', '        require(_cap > 0, "ZilliosCrowdsale: cap is 0");\n', '        cap = _cap;\n', '    }\n', '\n', '    function validPurchase() internal view virtual override returns (bool) {\n', '        bool withinCap = weiRaised + msg.value <= cap;\n', '        return super.validPurchase() && withinCap;\n', '    }\n', '\n', '    function hasEnded() public view virtual override returns (bool) {\n', '        bool capReached = weiRaised >= cap;\n', '        return super.hasEnded() || capReached;\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/ZilliosCrowdsale.sol\n', '\n', '\n', 'pragma solidity 0.8.0;\n', '\n', '// import "contracts/base/Crowdsale.sol";\n', '// import "contracts/validation/CappedCrowdsale.sol";\n', '// import "contracts/distribution/RefundableCrowdsale.sol";\n', '// import "contracts/distribution/Allocations.sol";\n', '\n', 'contract ZilliosCrowdsale is CappedCrowdsale {\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _hardCap,\n', '        uint256 _softCap,\n', '        address _wallet,\n', '        ZilliosToken _token\n', '    ) CappedCrowdsale(_hardCap, _softCap, _startTime, _endTime, _rate, _wallet, _token) {}\n', '\n', '    receive() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable virtual override whenNotPaused {\n', '        require(CappedCrowdsale.validPurchase(), "ZilliosCrowdsale: cap exceeded or purchase is not valid");\n', '        require(!CappedCrowdsale.hasEnded(), "ZilliosCrowdsale: crowdsale has ended");\n', '\n', '        Crowdsale.buyTokens(beneficiary);\n', '    }\n', '\n', '    function setSoftCap(uint256 _goal) external onlyOwner {\n', '        require(block.timestamp <= ICOstartTime, "ZilliosCrowdsale: ICO starts");\n', '        require(_goal > 0, "ZilliosCrowdsale: goal is 0");\n', '        goal = _goal;\n', '    }\n', '\n', '    function setHardCap(uint256 _cap) external onlyOwner {\n', '        require(block.timestamp <= ICOstartTime, "ZilliosCrowdsale: ICO starts");\n', '        require(_cap > 0, "ZilliosCrowdsale: cap is 0");\n', '        cap = _cap;\n', '    }\n', '}']