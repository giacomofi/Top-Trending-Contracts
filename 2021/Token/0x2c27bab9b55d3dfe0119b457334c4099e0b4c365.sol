['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// File: contracts\\gsn\\Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\access\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '\n', '        _owner = msgSender;\n', '\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\libs\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '\n', '        return a % b;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\token\\erc20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '// File: contracts\\token\\erc20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string private _name;\n', '\n', '    string private _symbol;\n', '\n', '    uint8 private _decimals;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount));\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\libs\\RealMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * Reference: https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\n', ' */\n', '\n', 'library RealMath {\n', '\n', '    uint256 private constant BONE           = 10 ** 18;\n', '    uint256 private constant MIN_BPOW_BASE  = 1 wei;\n', '    uint256 private constant MAX_BPOW_BASE  = (2 * BONE) - 1 wei;\n', '    uint256 private constant BPOW_PRECISION = BONE / 10 ** 10;\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rtoi(uint256 a)\n', '        internal\n', '        pure \n', '        returns (uint256)\n', '    {\n', '        return a / BONE;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rfloor(uint256 a)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return rtoi(a) * BONE;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function radd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        \n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rsub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        (uint256 c, bool flag) = rsubSign(a, b);\n', '\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rsubSign(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256, bool)\n', '    {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rmul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c0 = a * b;\n', '\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '\n', '        uint256 c1 = c0 + (BONE / 2);\n', '\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '\n', '        return c1 / BONE;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rdiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '\n', '        uint256 c0 = a * BONE;\n', '\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL");\n', '\n', '        uint256 c1 = c0 + (b / 2);\n', '\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL");\n', '\n', '        return c1 / b;\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rpowi(uint256 a, uint256 n)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 z = n % 2 != 0 ? a : BONE;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            a = rmul(a, a);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, a);\n', '            }\n', '        }\n', '\n', '        return z;\n', '    }\n', '\n', '    /**\n', '     * @dev Computes b^(e.w) by splitting it into (b^e)*(b^0.w).\n', '     * Use `rpowi` for `b^e` and `rpowK` for k iterations of approximation of b^0.w\n', '     */\n', '    function rpow(uint256 base, uint256 exp)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(base >= MIN_BPOW_BASE, "ERR_BPOW_BASE_TOO_LOW");\n', '        require(base <= MAX_BPOW_BASE, "ERR_BPOW_BASE_TOO_HIGH");\n', '\n', '        uint256 whole = rfloor(exp);   \n', '        uint256 remain = rsub(exp, whole);\n', '\n', '        uint256 wholePow = rpowi(base, rtoi(whole));\n', '\n', '        if (remain == 0) {\n', '            return wholePow;\n', '        }\n', '\n', '        uint256 partialResult = rpowApprox(base, remain, BPOW_PRECISION);\n', '\n', '        return rmul(wholePow, partialResult);\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     */\n', '    function rpowApprox(uint256 base, uint256 exp, uint256 precision)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        (uint256 x, bool xneg) = rsubSign(base, BONE);\n', '\n', '        uint256 a = exp;\n', '        uint256 term = BONE;\n', '        uint256 sum = term;\n', '\n', '        bool negative = false;\n', '\n', '        // term(k) = numer / denom \n', '        //         = (product(a - i - 1, i = 1--> k) * x ^ k) / (k!)\n', '        // Each iteration, multiply previous term by (a - (k - 1)) * x / k\n', '        // continue until term is less than precision\n', '        for (uint256 i = 1; term >= precision; i++) {\n', '            uint256 bigK = i * BONE;\n', '\n', '            (uint256 c, bool cneg) = rsubSign(a, rsub(bigK, BONE));\n', '\n', '            term = rmul(term, rmul(c, x));\n', '            term = rdiv(term, bigK);\n', '\n', '            if (term == 0) break;\n', '\n', '            if (xneg) negative = !negative;\n', '            if (cneg) negative = !negative;\n', '\n', '            if (negative) {\n', '                sum = rsub(sum, term);\n', '\n', '            } else {\n', '                sum = radd(sum, term);\n', '            }\n', '        }\n', '\n', '        return sum;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\libs\\Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\pak\\ICollection.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface ICollection {\n', '\n', '    // ERC721\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    // ERC1155\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes calldata data) external;\n', '\n', '}\n', '\n', '// File: contracts\\pak\\ASH.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ASH is Ownable, ERC20 {\n', '\n', '    using RealMath for uint256;\n', '    using Address for address;\n', '\n', '    bytes4 private constant _ERC1155_RECEIVED = 0xf23a6e61;\n', '\n', '    event CollectionWhitelist(address collection, bool status);\n', '    event AssetWhitelist(address collection, uint256 assetId, bool status);\n', '\n', '    event CollectionBlacklist(address collection, bool status);\n', '    event AssetBlacklist(address collection, uint256 assetId, bool status);\n', '\n', '    event Swapped(address collection, uint256 assetId, address account, uint256 amount, bool isWhitelist, bool isERC721);\n', '\n', '    // Mapping "collection" whitelist\n', '    mapping(address => bool) private _collectionWhitelist;\n', '\n', '    // Mapping "asset" whitelist\n', '    mapping(address => mapping(uint256 => bool)) private _assetWhitelist;\n', '\n', '    // Mapping "collection" blacklist\n', '    mapping(address => bool) private _collectionBlacklist;\n', '\n', '    // Mapping "asset" blacklist\n', '    mapping(address => mapping(uint256 => bool)) private _assetBlacklist;\n', '\n', '    bool public isStarted = false;\n', '\n', '    bool public isERC721Paused = false;\n', '    bool public isERC1155Paused = true;\n', '\n', '    /**\n', '     * @dev Throws if NFT swapping does not start yet\n', '     */\n', '    modifier started() {\n', '        require(isStarted, "ASH: NFT swapping does not start yet");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if collection or asset is in blacklist\n', '     */\n', '    modifier notInBlacklist(address collection, uint256 assetId) {\n', '        require(!_collectionBlacklist[collection] && !_assetBlacklist[collection][assetId], "ASH: collection or asset is in blacklist");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initializes the contract settings\n', '     */\n', '    constructor(string memory name, string memory symbol)\n', '        public\n', '        ERC20(name, symbol, 18)\n', '    {}\n', '\n', '    /**\n', '     * @dev Starts to allow NFT swapping\n', '     */\n', '    function start()\n', '        public\n', '        onlyOwner\n', '    {\n', '        isStarted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses NFT (everything) swapping\n', '     */\n', '    function pause(bool erc721)\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (erc721) {\n', '            isERC721Paused = true;\n', '\n', '        } else {\n', '            isERC1155Paused = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Resumes NFT (everything) swapping\n', '     */\n', '    function resume(bool erc721)\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (erc721) {\n', '            isERC721Paused = false;\n', '\n', '        } else {\n', '            isERC1155Paused = false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Adds or removes collections in whitelist\n', '     */\n', '    function updateWhitelist(address[] memory collections, bool status)\n', '        public\n', '        onlyOwner\n', '    {\n', '        uint256 length = collections.length;\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            address collection = collections[i];\n', '\n', '            if (_collectionWhitelist[collection] != status) {\n', '                _collectionWhitelist[collection] = status;\n', '\n', '                emit CollectionWhitelist(collection, status);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Adds or removes assets in whitelist\n', '     */\n', '    function updateWhitelist(address[] memory collections, uint256[] memory assetIds, bool status)\n', '        public\n', '        onlyOwner\n', '    {\n', '        uint256 length = collections.length;\n', '\n', '        require(length == assetIds.length, "ASH: length of arrays is not equal");\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            address collection = collections[i];\n', '            uint256 assetId = assetIds[i];\n', '\n', '            if (_assetWhitelist[collection][assetId] != status) {\n', '                _assetWhitelist[collection][assetId] = status;\n', '\n', '                emit AssetWhitelist(collection, assetId, status);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '      * @dev Returns true if collection is in whitelist\n', '      */\n', '    function isWhitelist(address collection)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _collectionWhitelist[collection];\n', '    }\n', '\n', '    /**\n', '      * @dev Returns true if asset is in whitelist\n', '      */\n', '    function isWhitelist(address collection, uint256 assetId)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _assetWhitelist[collection][assetId];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds or removes collections in blacklist\n', '     */\n', '    function updateBlacklist(address[] memory collections, bool status)\n', '        public\n', '        onlyOwner\n', '    {\n', '        uint256 length = collections.length;\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            address collection = collections[i];\n', '\n', '            if (_collectionBlacklist[collection] != status) {\n', '                _collectionBlacklist[collection] = status;\n', '\n', '                emit CollectionBlacklist(collection, status);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Adds or removes assets in blacklist\n', '     */\n', '    function updateBlacklist(address[] memory collections, uint256[] memory assetIds, bool status)\n', '        public\n', '        onlyOwner\n', '    {\n', '        uint256 length = collections.length;\n', '\n', '        require(length == assetIds.length, "ASH: length of arrays is not equal");\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            address collection = collections[i];\n', '            uint256 assetId = assetIds[i];\n', '\n', '            if (_assetBlacklist[collection][assetId] != status) {\n', '                _assetBlacklist[collection][assetId] = status;\n', '\n', '                emit AssetBlacklist(collection, assetId, status);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '      * @dev Returns true if collection is in blacklist\n', '      */\n', '    function isBlacklist(address collection)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _collectionBlacklist[collection];\n', '    }\n', '\n', '    /**\n', '      * @dev Returns true if asset is in blacklist\n', '      */\n', '    function isBlacklist(address collection, uint256 assetId)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _assetBlacklist[collection][assetId];\n', '    }\n', '\n', '    /**\n', '     * @dev Burns tokens with a specific `amount`\n', '     */\n', '    function burn(uint256 amount)\n', '        public\n', '    {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates token amount that user will receive when burn\n', '     */\n', '    function calculateToken(address collection, uint256 assetId)\n', '        public\n', '        view\n', '        returns (bool, uint256)\n', '    {\n', '        bool whitelist = false;\n', '\n', '        // Checks if collection or asset in whitelist\n', '        if (_collectionWhitelist[collection] || _assetWhitelist[collection][assetId]) {\n', '            whitelist = true;\n', '        }\n', '\n', '        uint256 exp = totalSupply().rdiv(1000000 * (10 ** 18));\n', '\n', '        uint256 multiplier = RealMath.rdiv(1, 2).rpow(exp);\n', '\n', '        uint256 result;\n', '\n', '        // Calculates token amount that will issue\n', '        if (whitelist) {\n', '            result = multiplier.rmul(1000 * (10 ** 18));\n', '\n', '        } else {\n', '            result = multiplier.rmul(multiplier).rmul(2 * (10 ** 18));\n', '        }\n', '\n', '        return (whitelist, result);\n', '    }\n', '\n', '    /**\n', '     * @dev Issues ERC20 tokens\n', '     */\n', '    function _issueToken(address collection, uint256 assetId, address account, bool isERC721)\n', '        private\n', '    {\n', '        (bool whitelist, uint256 amount) = calculateToken(collection, assetId);\n', '\n', '        if (!whitelist) {\n', '            if (isERC721) {\n', '                require(!isERC721Paused, "ASH: ERC721 swapping paused");\n', '\n', '            } else {\n', '                require(!isERC1155Paused, "ASH: ERC1155 swapping paused");\n', '            }\n', '        }\n', '\n', '        require(amount > 0, "ASH: amount is invalid");\n', '\n', '        // Issues tokens\n', '        _mint(account, amount);\n', '\n', '        emit Swapped(collection, assetId, account, amount, whitelist, isERC721);\n', '    }\n', '\n', '    /**\n', '     * @dev Swaps ERC721 to ERC20\n', '     */\n', '    function swapERC721(address collection, uint256 assetId)\n', '        public\n', '        started()\n', '        notInBlacklist(collection, assetId)\n', '    {\n', '        address msgSender = _msgSender();\n', '\n', '        require(!msgSender.isContract(), "ASH: caller is invalid");\n', '\n', '        // Transfers ERC721 and lock in this smart contract\n', '        ICollection(collection).transferFrom(msgSender, address(this), assetId);\n', '\n', '        // Issues ERC20 tokens for caller\n', '        _issueToken(collection, assetId, msgSender, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Swaps ERC1155 to ERC20\n', '     */\n', '    function swapERC1155(address collection, uint256 assetId)\n', '        public\n', '        started()\n', '        notInBlacklist(collection, assetId)\n', '    {\n', '        address msgSender = _msgSender();\n', '\n', '        require(!msgSender.isContract(), "ASH: caller is invalid");\n', '\n', '        // Transfers ERC1155 and lock in this smart contract\n', '        ICollection(collection).safeTransferFrom(msgSender, address(this), assetId, 1, "");\n', '\n', '        // Issues ERC20 tokens for caller\n', '        _issueToken(collection, assetId, msgSender, false);\n', '    }\n', '\n', '    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data)\n', '        external\n', '        returns (bytes4)\n', '    {\n', '        return _ERC1155_RECEIVED;\n', '    }\n', '\n', '}']