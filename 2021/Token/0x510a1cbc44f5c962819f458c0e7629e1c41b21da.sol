['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', '// Tornado Cash proposal to fund a multisig with 5% of the vested TORN of the governance treasury \n', '// and 5% of the funds vesting over the next 12 month. The multisig is owned by community members\n', '// and its goal is to funds ecosystem initiatives. \n', '\n', '// Author: @Rezan-vm\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface ISablier {\n', '    function createStream(\n', '        address recipient,\n', '        uint256 deposit,\n', '        address tokenAddress,\n', '        uint256 startTime,\n', '        uint256 stopTime\n', '    ) external returns (uint256);\n', '}\n', '\n', 'interface Vesting {\n', '  function SECONDS_PER_MONTH() external view returns (uint256);\n', '  function release() external;\n', '  function vestedAmount() external view returns (uint256);\n', '  function released() external view returns (uint256);\n', '  function startTimestamp() external view returns (uint256);\n', '}\n', '\n', 'contract TCashProposal {\n', '    IERC20 public constant TORN = IERC20(0x77777FeDdddFfC19Ff86DB637967013e6C6A116C);\n', '    \n', '    Vesting public constant GOV_VESTING = Vesting(0x179f48C78f57A3A78f0608cC9197B8972921d1D2);\n', '\n', '    ISablier public constant SABLIER = ISablier(0xA4fc358455Febe425536fd1878bE67FfDBDEC59a);\n', '\n', '    // Gnosis safe address that will receive the tokens\n', '    address public constant COMMUNITY_MULTISIG = address(0xb04E030140b30C27bcdfaafFFA98C57d80eDa7B4);\n', '    \n', '    // Percentage of the treasury to fund the multisig with\n', '    uint256 public constant PERCENT_OF_TREASURY = 5; // 5%\n', '    \n', '    uint256 public constant SECOND_PER_MONTH = 30 days;\n', '    uint256 public constant MONTH_PER_YEAR = 12;\n', '    uint256 public constant SECOND_PER_YEAR = SECOND_PER_MONTH * MONTH_PER_YEAR;\n', '    uint256 public constant HUNDRED = 100;\n', '\n', '    function executeProposal() public {\n', '        // Claim vested funds if any\n', '        if(GOV_VESTING.vestedAmount() > 0) {\n', '            GOV_VESTING.release();\n', '        }\n', '\n', '        // Total funds that have already vested\n', '        uint256 releasedFunds = GOV_VESTING.released();\n', '\n', '        // Initial Funding, transfer 5% of what has already vested\n', '        // Note: No safeMath needed in solidity 0.8.0\n', '        TORN.transfer(COMMUNITY_MULTISIG, releasedFunds * PERCENT_OF_TREASURY / HUNDRED);\n', '\n', '        // Calculate how many token are vesting per month\n', '        uint256 elapsedMonths = (block.timestamp - GOV_VESTING.startTimestamp()) / SECOND_PER_MONTH;\n', '        uint256 vestingPerMonth = releasedFunds / elapsedMonths;\n', '        \n', '        // Send to sablier 5% of what is about to unlock in the next 12 months\n', '        uint256 sablierDeposit = vestingPerMonth * MONTH_PER_YEAR * PERCENT_OF_TREASURY / HUNDRED;\n', '        \n', '        // The deposited amount in Sablier needs to be a multiple of the of the distribution period.\n', '        // Round down and distribute slightly less tokens.\n', '        uint256 sablierAdjustedDeposit = sablierDeposit - sablierDeposit % SECOND_PER_YEAR;\n', '\n', '        // Approve the amount and create the stream\n', '        TORN.approve(address(SABLIER), sablierAdjustedDeposit);\n', '        SABLIER.createStream(\n', '            COMMUNITY_MULTISIG,\n', '            sablierAdjustedDeposit,\n', '            address(TORN),\n', '            block.timestamp,\n', '            block.timestamp + SECOND_PER_YEAR\n', '        );\n', '    }\n', '}']