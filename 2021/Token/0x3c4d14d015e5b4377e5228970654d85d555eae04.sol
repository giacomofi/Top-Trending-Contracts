['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', '// File: contracts/assets/TokenBankInterface.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract TokenBankInterface{\n', '  function issue(address token_addr, address payable _to, uint _amount) public returns (bool success);\n', '}\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/utils/AddressArray.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library AddressArray{\n', '  function exists(address[] memory self, address addr) public pure returns(bool){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function index_of(address[] memory self, address addr) public pure returns(uint){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return i;\n', '      }\n', '    }\n', '    require(false, "AddressArray:index_of, not exist");\n', '  }\n', '\n', '  function remove(address[] storage self, address addr) public returns(bool){\n', '    uint index = index_of(self, addr);\n', '    self[index] = self[self.length - 1];\n', '\n', '    delete self[self.length-1];\n', '    self.length--;\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/erc20/ERC20Impl.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(\n', '        address from,\n', '        uint256 _amount,\n', '        address _token,\n', '        bytes memory _data\n', '    ) public;\n', '}\n', 'contract TransferEventCallBack{\n', '  function onTransfer(address _from, address _to, uint256 _amount) public;\n', '}\n', '\n', 'contract ERC20Base {\n', "    string public name;                //The Token's name: e.g. GTToken\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = "AET_0.1"; //An arbitrary versioning scheme\n', '\n', '    using AddressArray for address[];\n', '    address[] public transferListeners;\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '    event NewTransferListener(address _addr);\n', '    event RemoveTransferListener(address _addr);\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    ERC20Base public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) public balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] public totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a ERC20Base\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    constructor(\n', '        ERC20Base _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled\n', '    )  public\n', '    {\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // The standard ERC 20 transferFrom functionality\n', '        if (allowed[_from][msg.sender] < _amount)\n', '            return false;\n', '        allowed[_from][msg.sender] -= _amount;\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n', '        if (_amount == 0) {\n', '            return true;\n', '        }\n', '        require(parentSnapShotBlock < block.number);\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != address(0)) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer returns false\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        if (previousBalanceFrom < _amount) {\n', '            return false;\n', '        }\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\n', '        require(approve(address(_spender), _amount));\n', '\n', '        _spender.receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            address(this),\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function _generateTokens(address _owner, uint _amount) internal returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(address(0), _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function _destroyTokens(address _owner, uint _amount) internal returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        emit Transfer(_owner, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function _enableTransfers(bool _transfersEnabled) internal {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }function getCheckPointAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0)\n', '            return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock)\n', '            return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return min;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '\n', '    function onTransferDone(address _from, address _to, uint256 _amount) internal {\n', '      for(uint i = 0; i < transferListeners.length; i++){\n', '        TransferEventCallBack t = TransferEventCallBack(transferListeners[i]);\n', '        t.onTransfer(_from, _to, _amount);\n', '      }\n', '    }\n', '\n', '    function _addTransferListener(address _addr) internal {\n', '      transferListeners.push(_addr);\n', '      emit NewTransferListener(_addr);\n', '    }\n', '    function _removeTransferListener(address _addr) internal{\n', '      transferListeners.remove(_addr);\n', '      emit RemoveTransferListener(_addr);\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    //function () external payable {\n', '        //require(false, "cannot transfer ether to this contract");\n', '    //}\n', '}\n', '\n', '// File: contracts/utils/TokenClaimer.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract TokenClaimer{\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '  function _claimStdTokens(address _token, address payable to) internal {\n', '        if (_token == address(0x0)) {\n', '            to.transfer(address(this).balance);\n', '            return;\n', '        }\n', '        uint balance = IERC20(_token).balanceOf(address(this));\n', '\n', '        (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));\n', '        require(status, "call failed");\n', '        emit ClaimedTokens(_token, to, balance);\n', '  }\n', '}\n', '\n', '// File: contracts/plugins/TokenAuction.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenAuction is Ownable, TokenClaimer{\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  address public bank;\n', '  address public target_token;\n', '  address public recv_token;\n', '  address public yield_pool;\n', '  uint256 public start_price;\n', '  uint256 public last_duration_in_blocknum;\n', '  uint256 public minimal_bumpup;\n', '  uint256 public minimal_amount;\n', '  uint256 public ratio_base;\n', '\n', '  bool public paused;\n', '\n', '\n', '  struct round_info{\n', '    uint256 last_auction_block;\n', '    uint256 highest_price;\n', '    uint256 highest_amount;\n', '    address payable highest_sender;\n', '    bool settled;\n', '  }\n', '\n', '  round_info[] public all_rounds;\n', '\n', '  constructor(address _bank, address _target_token, address _recv_token, address _yield_pool, uint256 _start_price,\n', '              uint256 _last_duration_in_blocknum, uint256 _minimal_bumpup, uint256 _minimal_amount) public{\n', '\n', '    bank = _bank;\n', '    target_token = _target_token;\n', '    recv_token = _recv_token;\n', '    start_price = _start_price;\n', '    last_duration_in_blocknum = _last_duration_in_blocknum;\n', '    minimal_bumpup = _minimal_bumpup;\n', '    minimal_amount = _minimal_amount;\n', '    yield_pool = _yield_pool;\n', '    ratio_base = 10000;\n', '    paused = false;\n', '  }\n', '\n', '  event PlaceAuction(address newAuctioner, uint256 newAmount, uint256 newPrice, address oldAuctioner, uint256 oldAmount, uint256 oldPrice);\n', '  function auction(uint256 amount, uint256 price) public returns(bool){\n', '    require(!paused, "auction already paused");\n', '    require(amount >= minimal_amount, "less than minimal amount");\n', '    require(price >= start_price, "less than start price");\n', '\n', '    if(all_rounds.length == 0){\n', '      round_info memory ri;\n', '      ri.last_auction_block == block.number;\n', '      all_rounds.push(ri);\n', '    }\n', '\n', '    round_info storage ri = all_rounds[all_rounds.length - 1];\n', '    if(block.number > ri.last_auction_block.safeAdd(last_duration_in_blocknum)){\n', '      if(!ri.settled){\n', '        _end_current_auction();\n', '      }\n', '      round_info memory ti;\n', '      ti.last_auction_block == block.number;\n', '      all_rounds.push(ti);\n', '      ri = all_rounds[all_rounds.length - 1];\n', '    }\n', '    //require(price >= ri.highest_price.safeMul(ratio_base + minimal_bumpup).safeDiv(ratio_base), "price bump up too small");\n', '\n', '    uint256 t = amount.safeMul(price).safeDiv(uint256(10)**ERC20Base(target_token).decimals());\n', '    uint256 h = ri.highest_amount.safeMul(ri.highest_price).safeDiv(uint256(10)**ERC20Base(target_token).decimals());\n', '\n', '    require(t >= h.safeMul(ratio_base + minimal_bumpup).safeDiv(ratio_base), "total payment bump up too small");\n', '    require(amount <= IERC20(target_token).balanceOf(bank), "bank doesn\'t have enough token");\n', '\n', '    if(ri.highest_sender != address(0x0)){\n', '      IERC20(recv_token).safeTransfer(ri.highest_sender, h);\n', '    }\n', '    emit PlaceAuction(msg.sender, amount, price, ri.highest_sender, ri.highest_amount, ri.highest_price);\n', '\n', '    IERC20(recv_token).safeTransferFrom(msg.sender, address(this), t);\n', '    ri.last_auction_block = block.number;\n', '    ri.highest_price = price;\n', '    ri.highest_amount = amount;\n', '    ri.highest_sender = msg.sender;\n', '    ri.settled = false;\n', '    return true;\n', '  }\n', '\n', '  event AuctionDone(address bidder, uint256 price, uint256 amount);\n', '  function _end_current_auction() internal{\n', '    round_info storage ri = all_rounds[all_rounds.length - 1];\n', '    if(ri.settled) return;\n', '    //require(ri.settled == false, "already settled");\n', '    ri.settled = true;\n', '    TokenBankInterface(bank).issue(target_token, ri.highest_sender, ri.highest_amount);\n', '    IERC20(recv_token).safeTransfer(yield_pool, ri.highest_price.safeMul(ri.highest_amount).safeDiv(uint256(10)**ERC20Base(target_token).decimals()));\n', '    emit AuctionDone(ri.highest_sender, ri.highest_price, ri.highest_amount);\n', '  }\n', '\n', '  function end_current_auction() public {\n', '    if(all_rounds.length == 0){\n', '      return ;\n', '    }\n', '    round_info storage ri = all_rounds[all_rounds.length - 1];\n', '    if(ri.settled){\n', '      return ;\n', '    }\n', '    require(block.number > ri.last_auction_block.safeAdd(last_duration_in_blocknum), "not ready to end");\n', '    _end_current_auction();\n', '  }\n', '\n', '  function pause_auction() public onlyOwner{\n', '    _end_current_auction();\n', '    paused = true;\n', '  }\n', '\n', '  function resume_auction() public onlyOwner{\n', '    paused = false;\n', '  }\n', '\n', '  function claimStdTokens(address _token, address payable to) public onlyOwner{\n', '    _claimStdTokens(_token, to);\n', '  }\n', '\n', '  event SetStartPrice(uint256 start_price);\n', '  function set_start_price(uint256 _start_price) public onlyOwner{\n', '    start_price = _start_price;\n', '    emit SetStartPrice(start_price);\n', '  }\n', '\n', '  event SetMinimalAmount(uint256 minimal_amount);\n', '  function set_minimal_amount(uint256 _minimal_amount) public onlyOwner{\n', '    minimal_amount = _minimal_amount;\n', '    emit SetMinimalAmount(minimal_amount);\n', '  }\n', '\n', '  event SetMinimalBumpup(uint256 minimal_bumpup);\n', '  function set_minimal_bumpup(uint256 _minimal_bumpup) public onlyOwner{\n', '    minimal_bumpup = _minimal_bumpup;\n', '    emit SetMinimalBumpup(minimal_bumpup);\n', '  }\n', '  \n', '  event SetDuration(uint256 last_duration_in_blocknum);\n', '  function set_duration(uint256 _last_duration_in_blocknum) public onlyOwner{\n', '    last_duration_in_blocknum = _last_duration_in_blocknum;\n', '    emit SetDuration(last_duration_in_blocknum);\n', '  }\n', '\n', '  event ChangeYieldPool(address yield_pool);\n', '  function change_yield_pool(address _yield_pool) public onlyOwner{\n', '    yield_pool = _yield_pool;\n', '    emit ChangeYieldPool(yield_pool);\n', '  }\n', '\n', '  event ChangeBank(address bank);\n', '  function change_bank(address _bank) public onlyOwner{\n', '    bank = _bank;\n', '    emit ChangeBank(bank);\n', '  }\n', '\n', '  function get_current_auction_round() public view returns(uint256){\n', '    return all_rounds.length;\n', '  }\n', '\n', '  function get_current_auction_info() public view returns(uint256 last_auction_block, uint256 highest_price, uint256 highest_amount, address payable highest_sender){\n', '    return get_auction_info(get_current_auction_round() - 1);\n', '  }\n', '  function get_auction_info(uint256 index) public view returns(uint256 last_auction_block, uint256 highest_price, uint256 highest_amount, address payable highest_sender){\n', '    round_info storage ri = all_rounds[index];\n', '    last_auction_block = ri.last_auction_block;\n', '    highest_price = ri.highest_price;\n', '    highest_amount = ri.highest_amount;\n', '    highest_sender = ri.highest_sender;\n', '  }\n', '}\n', '\n', 'contract TokenAuctionFactory{\n', '  event NewTokenAuction(address addr);\n', '\n', '  function createTokenAuction(address bank, address target_token, address recv_token, address yield_pool, uint256 start_price,\n', '                        uint256 last_duration_in_blocknum, uint256 minimal_bumpup, uint256 minimal_amount) public returns(address){\n', '    TokenAuction newAuction = new TokenAuction(bank, target_token, recv_token, yield_pool, start_price, last_duration_in_blocknum, minimal_bumpup, minimal_amount);\n', '\n', '    emit NewTokenAuction(address(newAuction));\n', '    newAuction.transferOwnership(msg.sender);\n', '    return address(newAuction);\n', '  }\n', '}']