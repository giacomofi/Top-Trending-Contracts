['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IAddressConfig.sol\n', '\n', '// SPDX-License-Identifier: MPL-2.0\n', 'pragma solidity >=0.5.17;\n', '\n', 'interface IAddressConfig {\n', '\tfunction token() external view returns (address);\n', '\n', '\tfunction allocator() external view returns (address);\n', '\n', '\tfunction allocatorStorage() external view returns (address);\n', '\n', '\tfunction withdraw() external view returns (address);\n', '\n', '\tfunction withdrawStorage() external view returns (address);\n', '\n', '\tfunction marketFactory() external view returns (address);\n', '\n', '\tfunction marketGroup() external view returns (address);\n', '\n', '\tfunction propertyFactory() external view returns (address);\n', '\n', '\tfunction propertyGroup() external view returns (address);\n', '\n', '\tfunction metricsGroup() external view returns (address);\n', '\n', '\tfunction metricsFactory() external view returns (address);\n', '\n', '\tfunction policy() external view returns (address);\n', '\n', '\tfunction policyFactory() external view returns (address);\n', '\n', '\tfunction policySet() external view returns (address);\n', '\n', '\tfunction policyGroup() external view returns (address);\n', '\n', '\tfunction lockup() external view returns (address);\n', '\n', '\tfunction lockupStorage() external view returns (address);\n', '\n', '\tfunction voteTimes() external view returns (address);\n', '\n', '\tfunction voteTimesStorage() external view returns (address);\n', '\n', '\tfunction voteCounter() external view returns (address);\n', '\n', '\tfunction voteCounterStorage() external view returns (address);\n', '\n', '\tfunction setAllocator(address _addr) external;\n', '\n', '\tfunction setAllocatorStorage(address _addr) external;\n', '\n', '\tfunction setWithdraw(address _addr) external;\n', '\n', '\tfunction setWithdrawStorage(address _addr) external;\n', '\n', '\tfunction setMarketFactory(address _addr) external;\n', '\n', '\tfunction setMarketGroup(address _addr) external;\n', '\n', '\tfunction setPropertyFactory(address _addr) external;\n', '\n', '\tfunction setPropertyGroup(address _addr) external;\n', '\n', '\tfunction setMetricsFactory(address _addr) external;\n', '\n', '\tfunction setMetricsGroup(address _addr) external;\n', '\n', '\tfunction setPolicyFactory(address _addr) external;\n', '\n', '\tfunction setPolicyGroup(address _addr) external;\n', '\n', '\tfunction setPolicySet(address _addr) external;\n', '\n', '\tfunction setPolicy(address _addr) external;\n', '\n', '\tfunction setToken(address _addr) external;\n', '\n', '\tfunction setLockup(address _addr) external;\n', '\n', '\tfunction setLockupStorage(address _addr) external;\n', '\n', '\tfunction setVoteTimes(address _addr) external;\n', '\n', '\tfunction setVoteTimesStorage(address _addr) external;\n', '\n', '\tfunction setVoteCounter(address _addr) external;\n', '\n', '\tfunction setVoteCounterStorage(address _addr) external;\n', '}\n', '\n', '// File: contracts/src/common/config/UsingConfig.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * Module for using AddressConfig contracts.\n', ' */\n', 'contract UsingConfig {\n', '\taddress private _config;\n', '\n', '\t/**\n', '\t * Initialize the argument as AddressConfig address.\n', '\t */\n', '\tconstructor(address _addressConfig) public {\n', '\t\t_config = _addressConfig;\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig instance.\n', '\t */\n', '\tfunction config() internal view returns (IAddressConfig) {\n', '\t\treturn IAddressConfig(_config);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns the latest AddressConfig address.\n', '\t */\n', '\tfunction configAddress() external view returns (address) {\n', '\t\treturn _config;\n', '\t}\n', '}\n', '\n', '// File: contracts/interface/IAllocator.sol\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', 'interface IAllocator {\n', '\tfunction beforeBalanceChange(\n', '\t\taddress _property,\n', '\t\taddress _from,\n', '\t\taddress _to\n', '\t) external;\n', '\n', '\tfunction calculateMaxRewardsPerBlock() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interface/IProperty.sol\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', 'interface IProperty {\n', '\tfunction author() external view returns (address);\n', '\n', '\tfunction changeAuthor(address _nextAuthor) external;\n', '\n', '\tfunction changeName(string calldata _name) external;\n', '\n', '\tfunction changeSymbol(string calldata _symbol) external;\n', '\n', '\tfunction withdraw(address _sender, uint256 _value) external;\n', '}\n', '\n', '// File: contracts/interface/IPropertyFactory.sol\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', 'interface IPropertyFactory {\n', '\tfunction create(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _author\n', '\t) external returns (address);\n', '\n', '\tfunction createAndAuthenticate(\n', '\t\tstring calldata _name,\n', '\t\tstring calldata _symbol,\n', '\t\taddress _market,\n', '\t\tstring calldata _args1,\n', '\t\tstring calldata _args2,\n', '\t\tstring calldata _args3\n', '\t) external returns (bool);\n', '\n', '\tfunction createChangeAuthorEvent(address _old, address _new) external;\n', '\n', '\tfunction createChangeNameEvent(string calldata _old, string calldata _new)\n', '\t\texternal;\n', '\n', '\tfunction createChangeSymbolEvent(string calldata _old, string calldata _new)\n', '\t\texternal;\n', '}\n', '\n', '// File: contracts/interface/IPolicy.sol\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', 'interface IPolicy {\n', '\tfunction rewards(uint256 _lockups, uint256 _assets)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction holdersShare(uint256 _amount, uint256 _lockups)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256);\n', '\n', '\tfunction marketApproval(uint256 _agree, uint256 _opposite)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\n', '\tfunction policyApproval(uint256 _agree, uint256 _opposite)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\n', '\tfunction marketVotingBlocks() external view returns (uint256);\n', '\n', '\tfunction policyVotingBlocks() external view returns (uint256);\n', '\n', '\tfunction shareOfTreasury(uint256 _supply) external view returns (uint256);\n', '\n', '\tfunction treasury() external view returns (address);\n', '}\n', '\n', '// File: contracts/src/property/Property.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * A contract that represents the assets of the user and collects staking from the stakers.\n', ' * Property contract inherits ERC20.\n', ' * Holders of Property contracts(tokens) receive holder rewards according to their share.\n', ' */\n', 'contract Property is ERC20, UsingConfig, IProperty {\n', '\tusing SafeMath for uint256;\n', '\tuint8 private constant PROPERTY_DECIMALS = 18;\n', '\tuint256 private constant SUPPLY = 10000000000000000000000000;\n', '\taddress private __author;\n', '\tstring private __name;\n', '\tstring private __symbol;\n', '\tuint8 private __decimals;\n', '\n', '\t/**\n', '\t * @dev Initializes the passed value as AddressConfig address, author address, token name, and token symbol.\n', '\t * @param _config AddressConfig address.\n', '\t * @param _own The author address.\n', '\t * @param _name The name of the new Property.\n', '\t * @param _symbol The symbol of the new Property.\n', '\t */\n', '\tconstructor(\n', '\t\taddress _config,\n', '\t\taddress _own,\n', '\t\tstring memory _name,\n', '\t\tstring memory _symbol\n', '\t) public UsingConfig(_config) {\n', '\t\t/**\n', '\t\t * Validates the sender is PropertyFactory contract.\n', '\t\t */\n', '\t\trequire(\n', '\t\t\tmsg.sender == config().propertyFactory(),\n', '\t\t\t"this is illegal address"\n', '\t\t);\n', '\t\t/**\n', '\t\t * Sets the author.\n', '\t\t */\n', '\t\t__author = _own;\n', '\n', '\t\t/**\n', '\t\t * Sets the ERO20 attributes\n', '\t\t */\n', '\t\t__name = _name;\n', '\t\t__symbol = _symbol;\n', '\t\t__decimals = PROPERTY_DECIMALS;\n', '\n', '\t\t/**\n', '\t\t * Mints to the author and  treasury contract.\n', '\t\t */\n', '\t\tIPolicy policy = IPolicy(config().policy());\n', '\t\tuint256 toTreasury = policy.shareOfTreasury(SUPPLY);\n', '\t\tuint256 toAuthor = SUPPLY.sub(toTreasury);\n', '\t\trequire(toAuthor != 0, "share of author is 0");\n', '\t\t_mint(__author, toAuthor);\n', '\t\t_mint(policy.treasury(), toTreasury);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the author.\n', '\t */\n', '\tmodifier onlyAuthor() {\n', '\t\trequire(msg.sender == __author, "illegal sender");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the name of the author.\n', '\t * @return The the author address.\n', '\t */\n', '\tfunction author() external view returns (address) {\n', '\t\treturn __author;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the name of the token.\n', '\t * @return The name of the token.\n', '\t */\n', '\tfunction name() external view returns (string memory) {\n', '\t\treturn __name;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the symbol of the token, usually a shorter version of the name.\n', '\t * @return The symbol of the token, usually a shorter version of the name.\n', '\t */\n', '\tfunction symbol() external view returns (string memory) {\n', '\t\treturn __symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of decimals used to get its user representation.\n', '\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '\t *\n', '\t * Tokens usually opt for a value of 18, imitating the relationship between\n', '\t * Ether and Wei.\n', '\t *\n', '\t * NOTE: This information is only used for _display_ purposes: it in\n', '\t * no way affects any of the arithmetic of the contract, including\n', '\t * {IERC20-balanceOf} and {IERC20-transfer}.\n', '\t * @return The number of decimals used to get its user representation.\n', '\t */\n', '\tfunction decimals() external view returns (uint8) {\n', '\t\treturn __decimals;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Changes the author.\n', '\t * @param _nextAuthor The new author address.\n', '\t */\n', '\tfunction changeAuthor(address _nextAuthor) external onlyAuthor {\n', '\t\t/**\n', '\t\t * save author information\n', '\t\t */\n', '\t\tIPropertyFactory(config().propertyFactory()).createChangeAuthorEvent(\n', '\t\t\t__author,\n', '\t\t\t_nextAuthor\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Changes the author.\n', '\t\t */\n', '\t\t__author = _nextAuthor;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Changes the name.\n', '\t * @param _name The new name.\n', '\t */\n', '\tfunction changeName(string calldata _name) external onlyAuthor {\n', '\t\tIPropertyFactory(config().propertyFactory()).createChangeNameEvent(\n', '\t\t\t__name,\n', '\t\t\t_name\n', '\t\t);\n', '\n', '\t\t__name = _name;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Changes the symbol.\n', '\t * @param _symbol The new symbol.\n', '\t */\n', '\tfunction changeSymbol(string calldata _symbol) external onlyAuthor {\n', '\t\tIPropertyFactory(config().propertyFactory()).createChangeSymbolEvent(\n', '\t\t\t__symbol,\n', '\t\t\t_symbol\n', '\t\t);\n', '\n', '\t\t__symbol = _symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Hook on `transfer` and call `Withdraw.beforeBalanceChange` function.\n', '\t * @param _to The recipient address.\n', '\t * @param _value The transfer amount.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\t/**\n', '\t\t * Validates the destination is not 0 address.\n', '\t\t */\n', '\t\trequire(_to != address(0), "this is illegal address");\n', '\t\trequire(_value != 0, "illegal transfer value");\n', '\n', '\t\t/**\n', '\t\t * Calls Withdraw contract via Allocator contract.\n', '\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\n', '\t\t */\n', '\t\tIAllocator(config().allocator()).beforeBalanceChange(\n', '\t\t\taddress(this),\n', '\t\t\tmsg.sender,\n', '\t\t\t_to\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Calls the transfer of ERC20.\n', '\t\t */\n', '\t\t_transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Hook on `transferFrom` and call `Withdraw.beforeBalanceChange` function.\n', '\t * @param _from The source address.\n', '\t * @param _to The recipient address.\n', '\t * @param _value The transfer amount.\n', '\t */\n', '\tfunction transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t) public returns (bool) {\n', '\t\t/**\n', '\t\t * Validates the source and destination is not 0 address.\n', '\t\t */\n', '\t\trequire(_from != address(0), "this is illegal address");\n', '\t\trequire(_to != address(0), "this is illegal address");\n', '\t\trequire(_value != 0, "illegal transfer value");\n', '\n', '\t\t/**\n', '\t\t * Calls Withdraw contract via Allocator contract.\n', '\t\t * Passing through the Allocator contract is due to the historical reason for the old Property contract.\n', '\t\t */\n', '\t\tIAllocator(config().allocator()).beforeBalanceChange(\n', '\t\t\taddress(this),\n', '\t\t\t_from,\n', '\t\t\t_to\n', '\t\t);\n', '\n', '\t\t/**\n', '\t\t * Calls the transfer of ERC20.\n', '\t\t */\n', '\t\t_transfer(_from, _to, _value);\n', '\n', '\t\t/**\n', '\t\t * Reduces the allowance amount.\n', '\t\t */\n', '\t\tuint256 allowanceAmount = allowance(_from, msg.sender);\n', '\t\t_approve(\n', '\t\t\t_from,\n', '\t\t\tmsg.sender,\n', '\t\t\tallowanceAmount.sub(\n', '\t\t\t\t_value,\n', '\t\t\t\t"ERC20: transfer amount exceeds allowance"\n', '\t\t\t)\n', '\t\t);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers the staking amount to the original owner.\n', '\t * @param _sender The Property Contract address as the source.\n', '\t * @param _value The transfer amount.\n', '\t */\n', '\tfunction withdraw(address _sender, uint256 _value) external {\n', '\t\t/**\n', '\t\t * Validates the sender is Lockup contract.\n', '\t\t */\n', '\t\trequire(msg.sender == config().lockup(), "this is illegal address");\n', '\n', '\t\t/**\n', '\t\t * Transfers the passed amount to the original owner.\n', '\t\t */\n', '\t\tERC20 devToken = ERC20(config().token());\n', '\t\tbool result = devToken.transfer(_sender, _value);\n', '\t\trequire(result, "dev transfer failed");\n', '\t}\n', '}']