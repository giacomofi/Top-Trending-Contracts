['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >= 0.8.0<0.9.0;\n', '\n', '/*\n', 'ERC-20 token\n', '*/\n', 'contract BhangraCoin {\n', '\n', '\n', '\n', "    string public name = 'Bhangra Coin';\n", "    string public symbol = 'BGRA';\n", "    string public standard = 'Bhangra Coin v1.1';\n", '    uint256 public totalSupply;\n', '    uint8 public decimals;\n', '\n', '    // @dev Records data of all the tokens transferred\n', '    // @param _from Address that sends tokens\n', '    // @param _to Address that receives tokens\n', '    // @param _value the amount that _spender can spend on behalf of _owner\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    // @dev Records data of an Approval to spend the tokens on behalf of\n', '    // @param _owner address that approves to pay on its behalf\n', '    // @param _spender address to whom the approval is issued\n', '    // @param _value the amount that _spender can spend on behalf of _owner\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '\n', '    //@dev mapping array for keeping the balances of all the accounts\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    //@dev amping array that keeps the allowance that is still allowed to withdraw from _owner\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    //@notice account A approved account B to send C tokens (amount C is actually left )\n', '\n', '\n', '    constructor(uint256 _intialSupply, uint8 _intialDecimals)\n', '    public\n', '    {\n', '        balanceOf[msg.sender] = _intialSupply;\n', '        totalSupply = _intialSupply;\n', '        decimals = _intialDecimals;\n', '    }\n', '\n', '\n', '    // @dev Transfers tokens from sender account to\n', '    // @param _from Address that sends tokens\n', '    // @param _to Address that receives tokens\n', '    // @param _value the amount that _spender can spend on behalf of _owner\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    returns(bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender] - _value;\n', '        balanceOf[_to] = balanceOf[_to] + _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Allows _spender to withdraw from [msg.sender] account multiple times,\n', '    // up to the _value amount.\n', '    // @param _spender address to whom the approval is issued\n', '    // @param _value the amount that _spender can spend on behalf of _owner\n', '    // @notice If this function is called again it overwrites the current allowance\n', '    // with _value.\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    returns(bool success)\n', '    {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Transfers tokens on behalf of _form account to _to account. [msg.sender]\n', '    // should have an allowance from _from account to transfer the number of tokens.\n', '    // @param _from address tokens are transferred from\n', '    // @param _to address tokens are transferred to\n', '    // @parram _value the number of tokens transferred\n', '    // @notice _from account should have enough tokens and allowance should be equal\n', '    // or greater than the amount transferred\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns(bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_from] = balanceOf[_from] - _value;\n', '        balanceOf[_to] = balanceOf[_to] + _value;\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}']