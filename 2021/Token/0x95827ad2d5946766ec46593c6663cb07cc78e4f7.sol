['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'library SafeMath {\n', '    function add(\n', '        uint256 a,\n', '        uint256 b)\n', '        internal\n', '        pure\n', '        returns(uint256 c)\n', '    {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b)\n', '        internal\n', '        pure\n', '        returns(uint256 c)\n', '    {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(\n', '        uint256 a,\n', '        uint256 b)\n', '        internal\n', '        pure\n', '        returns(uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    \n', '     function div(\n', '        uint256 a,\n', '        uint256 b)\n', '        internal\n', '        pure\n', '        returns(uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    // ERC20 Optional Views\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    // Views\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    // Mutative functions\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/contracts/owned\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    function _onlyOwner() private view {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', 'contract Pausable is Owned {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'contract IDODistribution is Owned, Pausable {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    /**\n', '     * @notice Authorised address able to call batchDeposit\n', '     */\n', '    address public authority;\n', '\n', '    /**\n', '     * @notice Address of ERC20 token\n', '     */\n', '    address public erc20Address;\n', '\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => uint) counts;\n', '\n', '    uint public totalSupply;\n', '\n', '    constructor(\n', '        address _owner,\n', '        address _authority\n', '    ) public Owned(_owner) {\n', '        authority = _authority;\n', '    }\n', '\n', '    function balanceOf(address _address) public view returns (uint) {\n', '        return balances[_address];\n', '    }\n', '\n', '    function depositNumberOf(address _address) public view returns (uint) {\n', '        return counts[_address];\n', '    }\n', '\n', '    // ========== EXTERNAL SETTERS ==========\n', '\n', '    function setTokenAddress(address _erc20Address) public onlyOwner {\n', '        erc20Address = _erc20Address;\n', '    }\n', '\n', '    /**\n', '     * @notice Set the address of the contract authorised to call distributeReward()\n', '     * @param _authority Address of the authorised calling contract.\n', '     */\n', '    function setAuthority(address _authority) public onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function batchDeposit(address[] destinations, uint[] amounts) public returns (bool) {\n', '        require(msg.sender == authority, "Caller is not authorized");\n', '        require(erc20Address != address(0), "erc20 token address is not set");\n', '        require(destinations.length == amounts.length, "length of inputs not match");\n', '\n', "        // we don't need check amount[i] > 0 or destinations != 0x0 because they cannot claim anyway\n", '        uint amount = 0;\n', '        for (uint i = 0; i < amounts.length; i++) {\n', '            amount = amount.add(amounts[i]);\n', '            balances[destinations[i]] =  balances[destinations[i]].add(amounts[i]);\n', '            counts[destinations[i]] += 1;\n', '        }\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '\n', '        emit TokenDeposit(amount);\n', '        return true;\n', '    }\n', '\n', '    function claim() public whenNotPaused returns (bool) {\n', '        require(erc20Address != address(0), "erc20 token address is not set");\n', '        require(balances[msg.sender] > 0, "account balance is zero");\n', '\n', '        uint _amount = balances[msg.sender];\n', '        require(\n', '            IERC20(erc20Address).balanceOf(address(this)) >= _amount,\n', '            "This contract does not have enough tokens to distribute"\n', '        );\n', '\n', '        balances[msg.sender] = 0;\n', '        IERC20(erc20Address).transfer(msg.sender, _amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '\n', '        emit UserClaimed(msg.sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /* ========== Events ========== */\n', '    event TokenDeposit(uint _amount);\n', '    event UserClaimed(address _address, uint _amount);\n', '}']