['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-08\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface IERC20{\n', '    \n', '     function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns(string memory);\n', '\n', '    function decimals() external view returns(uint256);\n', '\n', '    function totalSupply() external view returns(uint256);\n', '    \n', '    function balanceOf(address account) external view returns(uint256);\n', '    \n', '    function transfer(address recipient, uint256 amount) external returns(bool);\n', '\n', '    function allowance(address owner, address spender) external view returns(uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns(bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns(bool);\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool);\n', '    \n', '    function mint(address user, uint256 amount) external;\n', '    \n', '    function burn(uint256 amount) external;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    event Burn(address indexed from, uint256 amount);\n', '    \n', '}\n', 'contract MCFToken is IERC20{\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    \n', '    address private _owner;\n', '    \n', '    constructor (string memory name_, string memory symbol_, uint256 totalSupply) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _totalSupply = totalSupply * (10 ** uint256(10));\n', '        _balances[msg.sender] = totalSupply*  (10 ** uint256(10));\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    function name() external view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() external view override returns (uint256) {\n', '        return 10;\n', '    }\n', '\n', '    function totalSupply() external view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) external view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) external override returns (bool) {\n', '        _balances[msg.sender] -= amount;\n', '        _balances[recipient] += amount;\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) external override returns (bool) {\n', '        _allowances[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n', '        _allowances[sender][msg.sender] -= amount;\n', '        \n', '        _balances[sender] -= amount;\n', '        _balances[recipient] += amount;\n', '        \n', '        emit Transfer(sender, recipient, amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external  override returns (bool) {\n', '        _allowances[msg.sender][spender] += addedValue;\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\n', '        if(subtractedValue > _allowances[msg.sender][spender]){_allowances[msg.sender][spender] = 0;}\n', '        else{_allowances[msg.sender][spender] -= subtractedValue;}\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address user, uint256 amount) external override {\n', '        require(msg.sender == _owner);\n', '        _balances[user] += amount;\n', '        _totalSupply += amount;\n', '        emit Mint(user, amount);\n', '    }\n', '    \n', '    function burn(uint256 amount) external override {\n', '        _balances[msg.sender] -= amount;\n', '        _totalSupply -= amount;\n', '        emit Burn(msg.sender, amount);\n', '    }\n', '\n', '}']