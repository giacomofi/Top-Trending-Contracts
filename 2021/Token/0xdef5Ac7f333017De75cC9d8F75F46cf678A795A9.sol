['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    \n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', 'library SafeERC20 {\n', '    function safeTransfer(\n', '        ERC20Basic _token,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal\n', '    {\n', '        require(_token.transfer(_to, _value));\n', '    }\n', '    function safeTransferFrom(\n', '        ERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal\n', '    {\n', '        require(_token.transferFrom(_from, _to, _value));\n', '    }\n', '    function safeApprove(\n', '        ERC20 _token,\n', '        address _spender,\n', '        uint256 _value\n', '    ) internal\n', '    {\n', '        require(_token.approve(_spender, _value));\n', '    }\n', '}\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        if(a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', ' * @title ONALBA token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint256 totalSupply_;\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom (\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '    function allowance (\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        \n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    ) public returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        \n', '        return true;\n', '    }\n', '}\n', 'contract Ownable {\n', '    uint8 constant MAX_BURN = 3;\n', '    address[MAX_BURN] public chkBurnerList;\n', '    \n', '    mapping(address => bool) public burners;\n', '    //mapping (address => bool) public owners;\n', '    address owner;\n', '    \n', '    event AddedBurner(address indexed newBurner);\n', '    event ChangeOwner(address indexed newOwner);\n', '    event DeletedBurner(address indexed toDeleteBurner);\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    modifier onlyBurner(){\n', '        require(burners[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function changeOwnerShip(address newOwner) public onlyOwner returns(bool) {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        \n', '        emit ChangeOwner(newOwner);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function addBurner(address burner, uint8 num) public onlyOwner returns (bool) {\n', '        require(num < MAX_BURN);\n', '        require(burner != address(0));\n', '        require(chkBurnerList[num] == address(0));\n', '        require(burners[burner] == false);\n', '        burners[burner] = true;\n', '        chkBurnerList[num] = burner;\n', '        \n', '        emit AddedBurner(burner);\n', '        \n', '        return true;\n', '    }\n', '    function deleteBurner(address burner, uint8 num) public onlyOwner returns (bool){\n', '        require(num < MAX_BURN);\n', '        require(burner != address(0));\n', '        require(chkBurnerList[num] == burner);\n', '        \n', '        burners[burner] = false;\n', '        chkBurnerList[num] = address(0);\n', '        \n', '        emit DeletedBurner(burner);\n', '        \n', '        return true;\n', '    }\n', '}\n', 'contract Blacklist is Ownable {\n', '    mapping(address => bool) blacklisted;\n', '    event Blacklisted(address indexed blacklist);\n', '    event Whitelisted(address indexed whitelist);\n', '    \n', '    modifier whenPermitted(address node) {\n', '        require(!blacklisted[node]);\n', '        _;\n', '    }\n', '    \n', '    function isPermitted(address node) public view returns (bool) {\n', '        return !blacklisted[node];\n', '    }\n', '    function blacklist(address node) public onlyOwner returns (bool) {\n', '        require(!blacklisted[node]);\n', '        blacklisted[node] = true;\n', '        emit Blacklisted(node);\n', '        return blacklisted[node];\n', '    }\n', '   \n', '    function unblacklist(address node) public onlyOwner returns (bool) {\n', '        require(blacklisted[node]);\n', '        blacklisted[node] = false;\n', '        emit Whitelisted(node);\n', '        return blacklisted[node];\n', '    }\n', '}\n', 'contract Burnlist is Blacklist {\n', '    mapping(address => bool) public isburnlist;\n', '    event Burnlisted(address indexed burnlist, bool signal);\n', '    modifier isBurnlisted(address who) {\n', '        require(isburnlist[who]);\n', '        _;\n', '    }\n', '    function addBurnlist(address node) public onlyOwner returns (bool) {\n', '        require(!isburnlist[node]);\n', '        \n', '        isburnlist[node] = true;\n', '        \n', '        emit Burnlisted(node, true);\n', '        \n', '        return isburnlist[node];\n', '    }\n', '    function delBurnlist(address node) public onlyOwner returns (bool) {\n', '        require(isburnlist[node]);\n', '        \n', '        isburnlist[node] = false;\n', '        \n', '        emit Burnlisted(node, false);\n', '        \n', '        return isburnlist[node];\n', '    }\n', '}\n', 'contract PausableToken is StandardToken, Burnlist {\n', '    \n', '    bool public paused = false;\n', '    \n', '    event Paused(address addr);\n', '    event Unpaused(address addr);\n', '    constructor() public {\n', '    }\n', '    \n', '    modifier whenNotPaused() {\n', '        require(!paused || owner == msg.sender);\n', '        _;\n', '    }\n', '   \n', '    function pause() public onlyOwner returns (bool) {\n', '        require(!paused);\n', '        paused = true;\n', '        \n', '        emit Paused(msg.sender);\n', '        return paused;\n', '    }\n', '    function unpause() public onlyOwner returns (bool) {\n', '        require(paused);\n', '        paused = false;\n', '        \n', '        emit Unpaused(msg.sender);\n', '        return paused;\n', '    }\n', '    function transfer(address to, uint256 value) public whenNotPaused whenPermitted(msg.sender) returns (bool) {\n', '       \n', '        return super.transfer(to, value);\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public \n', '    whenNotPaused whenPermitted(from) whenPermitted(msg.sender) returns (bool) {\n', '      \n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}\n', '/**\n', ' * @title ONALBA\n', ' *\n', ' */\n', 'contract ONALBA is PausableToken {\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    event Mint(address indexed minter, uint256 value);\n', '    string public constant name = "ONALBA";\n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol = "ALBA";\n', '    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        \n', '        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    function destory() public onlyOwner returns (bool) {\n', '        \n', '        selfdestruct(owner);\n', '        return true;\n', '    }\n', ' \n', '    function mint(uint256 _amount) public onlyOwner returns (bool) {\n', '        \n', '        require(INITIAL_SUPPLY >= totalSupply_.add(_amount));\n', '        \n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        \n', '        balances[owner] = balances[owner].add(_amount);\n', '        emit Mint(owner, _amount);\n', '        \n', '        emit Transfer(address(0), owner, _amount);\n', '        \n', '        return true;\n', '    }\n', ' \n', '    function burn(address _to,uint256 _value) public onlyBurner isBurnlisted(_to) returns(bool) {\n', '        \n', '        _burn(_to, _value);\n', '        \n', '        return true;\n', '    }\n', '    function _burn(address _who, uint256 _value) internal returns(bool){     \n', '        require(_value <= balances[_who]);\n', '        \n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '        \n', '        return true;\n', '    }\n', '}']