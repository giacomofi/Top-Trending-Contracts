['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender == newOwner);\n', '        _;\n', '    }\n', '    \n', '    function isOwner(address account) public view returns (bool) {\n', '        if( account == owner ){\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public onlyNewOwner {\n', '        emit OwnershipTransferred(owner, newOwner);        \n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev The Pausable can pause and unpause the token transfers.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }    \n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev The ERC20 standard as defined in the EIP.\n', ' */\n', 'contract Token {\n', '    /**\n', '     * @dev The total amount of tokens.\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of wei to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        // Ensure not overflow\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        \n', '        // Ensure not overflow\n', '        require(balances[_to] + _value >= balances[_to]);          \n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }  \n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true; \n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract NatureDollar is StandardToken, Pausable {\n', '    string public constant name = "NatureDollar";\n', '    string public constant symbol = "NTD";\n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply = 8_000_000e18;\n', '\n', '    event Freeze(address indexed account);\n', '    event Unfreeze(address indexed account);\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    modifier notFrozen(address _account) {\n', '        require(!frozenAccount[_account]);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply;  \n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public notFrozen(msg.sender) whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }   \n', '\n', '    function transferFrom(address from, address to, uint256 value) public notFrozen(from) whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze an user\n', '     * @param account The address of the user who will be frozen\n', '     * @return The result of freezing an user\n', '     */\n', '    function freezeAccount(address account) public onlyOwner returns (bool) {\n', '        require(!frozenAccount[account]);\n', '        frozenAccount[account] = true;\n', '        emit Freeze(account);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze an user\n', '     * @param account The address of the user who will be unfrozen\n', '     * @return The result of unfreezing an user\n', '     */\n', '    function unfreezeAccount(address account) public onlyOwner returns (bool) {\n', '        require(frozenAccount[account]);\n', '        frozenAccount[account] = false;\n', '        emit Unfreeze(account);\n', '        return true;\n', '    }\n', '}']