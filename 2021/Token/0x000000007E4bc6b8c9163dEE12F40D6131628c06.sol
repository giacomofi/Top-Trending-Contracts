['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-27\n', '*/\n', '\n', '/*\n', 'SPDX-License-Identifier: M̧͖̪̬͚͕̘̻̙̫͎̉̾͑̽͌̓̏̅͌̕͘ĩ̢͎̥̦̼͖̾̀͒̚͠n̺̼̳̩̝̐͒̑̄̕͢͞è̫̦̬͙̌͗͡ş̣̞̤̲̳̭̫̬̦͗́͂̅̉̒̍͑̑̒̈́̏͟͜™͍͙͆̒̏ͅ®̳̻̋̿©͕̅\n', '*/\n', '\n', 'pragma solidity ^0.8.6;\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        _setOwner(newOwner);\n', '    }\n', '    function _setOwner(address newOwner) private {\n', '        address oldOwner = _owner;\n', '        _owner = newOwner;\n', '        emit OwnershipTransferred(oldOwner, newOwner);\n', '    }\n', '}\n', 'contract Receiver is Context, Ownable {\n', '    address payable private addr;\n', '    constructor(address payable _addr) {\n', '        addr = _addr;\n', '    }\n', '    receive() external payable {\n', '        uint256 amount = msg.value;\n', '        if (amount > 0) {\n', '            addr.transfer(amount);\n', '        }\n', '    }\n', '    function changeAddress(address payable newaddr) public onlyOwner {\n', '        addr = newaddr;\n', '    }\n', '\t\n', '}']