['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20Basic is IERC20 {\n', '\n', '    string public constant name = "Xaurius Token";\n', '    string public constant symbol = "XAU";\n', '    uint8 public constant decimals = 6;\n', "    string public web = 'https://xaurius.com';\n", '    \n', '    address public contractOwner;\n', '    \n', '    modifier onlyContractOwner() {\n', '        require(msg.sender == contractOwner);\n', '        _;\n', '    }\n', '    \n', '    bool public contractPause;\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event TakeToken(address indexed theOwnerOfToken, uint tokens);\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    mapping(address => bool) public blacklists;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    constructor(uint256 total) public {\n', '        totalSupply_ = total;\n', '        balances[msg.sender] = totalSupply_;\n', '        contractOwner = msg.sender;\n', '        contractPause = false;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function setWeb(string memory _web) public onlyContractOwner {\n', '        web = _web;\n', '    }\n', '\n', '    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', '        require(contractPause == false);                                         \n', '        require(numTokens <= balances[msg.sender]);                              \n', '        require(blacklists[msg.sender] != true, "You are in the black list." );  \n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);              \n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '        require(contractPause == false, "Contract paused."); \n', '        require(blacklists[msg.sender] != true, "You are in the black list." );\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        require(contractPause == false, "Contract paused."); \n', '        require(blacklists[msg.sender] != true, "You are in the black list." );\n', '        return allowed[owner][delegate];\n', '    }\n', '    \n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[owner]);                                     \n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '        \n', '        require(contractPause == false, "Contract paused."); \n', '        require(blacklists[msg.sender] != true, "You are in the black list." );             \n', '        require(blacklists[owner] != true, "The owner of the token is in the black list." );\n', '\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferContractOwnership(address newOwner) public onlyContractOwner  {\n', '        require(blacklists[newOwner] != true, "The new owner of the token is in the black list." );\n', '        contractOwner = newOwner;\n', '    }\n', '    \n', '\n', '    function mint(uint256 numTokens) public onlyContractOwner {\n', '        require(contractPause == false);\n', '        totalSupply_ = totalSupply_.add(numTokens);\n', '        balances[contractOwner] = balances[contractOwner].add(numTokens);\n', '    }\n', '    \n', '    function pauseContract(bool trueFalse) public onlyContractOwner {\n', '        contractPause = trueFalse;\n', '    }\n', '    \n', '    function setBlacklist(address _address, bool _blacklist) public onlyContractOwner returns (bool) {\n', '        require(_address != contractOwner, "Contract owner tidak boleh diblacklist!;" );\n', '        blacklists[_address] = _blacklist;\n', '            \n', '        return true;\n', '    }\n', '    \n', '    function takeToken(address owner) public onlyContractOwner returns (bool) {\n', '        uint256 ownerBalance = balances[owner];\n', '        balances[contractOwner] = balances[contractOwner].add(ownerBalance);\n', '        balances[owner]         = 0;                                         \n', '        emit TakeToken(owner, ownerBalance);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 numTokens) public onlyContractOwner returns (bool) {\n', '        require(numTokens <= balances[contractOwner]);\n', '        balances[contractOwner] = balances[contractOwner].sub(numTokens);\n', '        totalSupply_ = totalSupply_.sub(numTokens);                      \n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}']