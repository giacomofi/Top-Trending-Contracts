['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'library DSMath {\n', '    /// @dev github.com/makerdao/dss implementation\n', '    /// of exponentiation by squaring\n', '    // \xa0nth power of x mod b\n', '    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n', '      assembly {\n', '        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\n', '        default {\n', '          switch mod(n, 2) case 0 { z := b } default { z := x }\n', '          let half := div(b, 2)  // for rounding.\n', '          for { n := div(n, 2) } n { n := div(n,2) } {\n', '            let xx := mul(x, x)\n', '            if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '            let xxRound := add(xx, half)\n', '            if lt(xxRound, xx) { revert(0,0) }\n', '            x := div(xxRound, b)\n', '            if mod(n,2) {\n', '              let zx := mul(z, x)\n', '              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '              let zxRound := add(zx, half)\n', '              if lt(zxRound, zx) { revert(0,0) }\n', '              z := div(zxRound, b)\n', '            }\n', '          }\n', '        }\n', '      }\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract CompoundRateKeeper is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct CompoundRate {\n', '        uint256 rate;\n', '        uint256 lastUpdate;\n', '    }\n', '\n', '    CompoundRate public compoundRate;\n', '\n', '    constructor () {\n', '        compoundRate.rate = 1 * 10 ** 27;\n', '        compoundRate.lastUpdate = block.timestamp;\n', '    }\n', '\n', '    function getCurrentRate() view external returns(uint256) {\n', '        return compoundRate.rate;\n', '    }\n', '\n', '    function getLastUpdate() view external returns(uint256) {\n', '        return compoundRate.lastUpdate;\n', '    }\n', '\n', '    function update(uint256 _interestRate) external onlyOwner returns(uint256) {\n', '        uint256 _decimal = 10 ** 27;\n', '        uint256 _period = (block.timestamp).sub(compoundRate.lastUpdate);\n', '        uint256 _newRate = compoundRate.rate\n', '        .mul(DSMath.rpow(_interestRate.add(_decimal), _period, _decimal)).div(_decimal);\n', '\n', '        compoundRate.rate = _newRate;\n', '        compoundRate.lastUpdate = block.timestamp;\n', '\n', '        return _newRate;\n', '    }\n', '}\n', '\n', 'interface IEpanStaking {\n', '    /**\n', '     * @notice Update compound rate\n', '     */\n', '    function updateCompoundRate() external;\n', '\n', '    /**\n', '     * @notice Update compound rate timeframe\n', '     */\n', '    function updateCompoundRateTimeframe() external;\n', '\n', '    /**\n', '     * @notice Update both compound rates\n', '     */\n', '    function updateCompoundRates() external;\n', '\n', '    /**\n', '     * @notice Update compound rate and stake tokens to user balance\n', '     * @param _amount Amount to stake\n', '     * @param _isTimeframe If true, stake to timeframe structure\n', '     */\n', '    function updateCompoundAndStake(uint256 _amount, bool _isTimeframe) external returns (bool);\n', '\n', '    /**\n', '     * @notice Update compound rate and withdraw tokens from contract\n', '     * @param _amount Amount to stake\n', '     * @param _isTimeframe If true, withdraw from timeframe structure\n', '     */\n', '    function updateCompoundAndWithdraw(uint256 _amount, bool _isTimeframe) external returns (bool);\n', '\n', '    /**\n', '     * @notice Stake tokens to user balance\n', '     * @param _amount Amount to stake\n', '     * @param _isTimeframe If true, stake to timeframe structure\n', '     */\n', '    function stake(uint256 _amount, bool _isTimeframe) external returns (bool);\n', '\n', '    /**\n', '     * @notice Withdraw tokens from user balance. Only for timeframe stake\n', '     * @param _amount Amount to withdraw\n', '     * @param _isTimeframe If true, withdraws from timeframe structure\n', '     */\n', '    function withdraw(uint256 _amount, bool _isTimeframe) external returns (bool);\n', '\n', '    /**\n', '     * @notice Returns the staking balance of the user\n', '     * @param _isTimeframe If true, return balance from timeframe structure\n', '     */\n', '    function getBalance(bool _isTimeframe) external view returns (uint256);\n', '\n', '    /**\n', '    * @notice Set interest rate\n', '    */\n', '    function setInterestRate(uint256 _newInterestRate) external;\n', '\n', '    /**\n', '    * @notice Set interest rate timeframe\n', '    * @param _newInterestRate New interest rate\n', '    */\n', '    function setInterestRateTimeframe(uint256 _newInterestRate) external;\n', '\n', '    /**\n', '     * @notice Set interest rates\n', '     * @param _newInterestRateTimeframe New interest rate timeframe\n', '     */\n', '    function setInterestRates(uint256 _newInterestRate, uint256 _newInterestRateTimeframe) external;\n', '\n', '    /**\n', '     * @notice Add tokens to contract address to be spent as rewards\n', '     * @param _amount Token amount that will be added to contract as reward\n', '     */\n', '    function supplyRewardPool(uint256 _amount) external returns (bool);\n', '\n', '    /**\n', '     * @notice Get reward amount for sender address\n', '     * @param _isTimeframe If timeframe, calculate reward for user from timeframe structure\n', '     */\n', '    function getRewardAmount(bool _isTimeframe) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Get coefficient. Tokens on the contract / reward to be paid\n', '     */\n', '    function monitorSecurityMargin() external view returns (uint256);\n', '}']