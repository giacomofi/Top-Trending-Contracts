['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', '/*\n', '\n', '    Copyright 2021 Referral Network.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author Referral Network\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/token/ReferralToken.sol\n', '\n', '/*\n', '\n', '    Copyright 2021 Referral Network.\n', '\n', '*/\n', '\n', '/**\n', ' * @title ReferralToken\n', ' * @author Referral Network\n', ' */\n', 'contract ReferralToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public symbol = "REFER";\n', '    string public name = "Referral Network";\n', '\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply = 1000000 * 10**18; // 1 Million\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    // ============ Events ============\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param to The address to transfer to.\n', '     * @param amount The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        require(amount <= balances[msg.sender], "BALANCE_NOT_ENOUGH");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the the balance of.\n', '     * @return balance An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param amount uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        require(amount <= balances[from], "BALANCE_NOT_ENOUGH");\n', '        require(amount <= allowed[from][msg.sender], "ALLOWANCE_NOT_ENOUGH");\n', '\n', '        balances[from] = balances[from].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        allowed[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '}']