['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) _allowances;\n', '\n', '\n', '    constructor(string memory _tokenName, string memory _tokenSymbol, uint8 _decimalUnits, uint256 _initialAmount) public {\n', '        totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);\n', '        balances[msg.sender] = totalSupply;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns\n', '    (bool success) {\n', '        require(_allowances[_from][msg.sender] >= _value, "ERC20: transferFrom amount exceeds allowance");\n', '        _transfer(_from, _to, _value);\n', '        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(balances[_from] >= _value, "ERC20: transfer amount exceeds balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success)\n', '    {\n', '        _allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '\n', '    function _burn(address _from, uint256 _value) internal {\n', '        require(balances[_from] >= _value, "ERC20: burn amount exceeds balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(_allowances[_from][msg.sender] >= _value, "ERC20: burn amount exceeds allowance");\n', '        _burn(msg.sender, _value);\n', '        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '\n', '\n', '    function transferArray(address[] memory _to, uint256[] memory _value) public {\n', '        require(_to.length == _value.length);\n', '        uint256 sum = 0;\n', '        for (uint256 i = 0; i < _value.length; i++) {\n', '            sum = sum.add(_value[i]);\n', '        }\n', '        require(balances[msg.sender] >= sum);\n', '        for (uint256 k = 0; k < _to.length; k++) {\n', '            _transfer(msg.sender, _to[k], _value[k]);\n', '        }\n', '    }\n', '\n', '}']