['// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'struct TraitUnitProb {\n', '    string value;\n', '    string name;\n', '    uint16 prob;\n', '}\n', ' \n', 'contract PulsquaresRecipeV1 is Ownable {\n', '\n', '    TraitUnitProb[] probsFormula;\n', '    TraitUnitProb[] probsColorSchemes;\n', '    TraitUnitProb[] probsAlphaType;\n', '    TraitUnitProb[] probsPulseType;\n', '    TraitUnitProb[] probsMainPrimitive;\n', '    TraitUnitProb[] probsRotation;\n', '    TraitUnitProb[] probsSizeVariation;\n', '    TraitUnitProb[] probsSize;\n', '    TraitUnitProb[] probsOpacity;\n', '    \n', '    string public script;\n', '    string public scriptIPFS;  \n', '                        \n', '    /**\n', '     * @dev Probs are multiplied by 10000 to help rounding\n', '     */                        \n', '    constructor() {\n', '\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '            value: "(((x/size)%5)*((y/size)%5))^(291)*10",\n', '            name: " Lima"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '            value: "(x/10 + (x%y)/10)*5",\n', '            name: " Helsinki"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '            value: "(1/Math.cos(x*y))*100",\n', '            name: " Las Vegas"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(Math.atan(x*y)*((x**2)-y**2))/100",\n', '          name: "Santiago"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "Math.atan(x^y)*200",\n', '          name: "Montreal"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x^y)",\n', '          name: "New Delhi"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '        value: "(x+y)",\n', '        name: "Tokyo"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x/y)*100",\n', '        name: "Austin"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(y/(x+y)*10)",\n', '         name: "Berlin"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x&y)^76",\n', '          name: "Chicago"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x*x+y*y)>>(y/size/50)",\n', '          name: "Melbourne"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(Math.abs(x-y)^Math.abs(x*y)/100)",\n', '          name: "Boston"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(Math.abs((x-y)/(x+y))^(Math.abs(x&y)/10))*10",\n', '          name: "Jakarta"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x|y)^(x&y)",\n', '          name: "Buenos Aires"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(x>>y)*x",\n', '          name: "Moscow"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "(y>>x)*y",\n', '          name: "Dubai"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "((x*x)|(y*y))/100",\n', '          name: "Barcelona"}));\n', '        probsFormula.push(TraitUnitProb({prob: 500,\n', '          value: "Math.pow(x*x+y*y, 1/2)",\n', '          name: "Seoul"}));\n', '        probsFormula.push(TraitUnitProb({prob: 250,\n', '          value: "(2*x)%y",\n', '          name: "Rome"}));\n', '        probsFormula.push(TraitUnitProb({prob: 250,\n', '          value: "(2*y)%x",\n', '          name: "Toronto"}));\n', '        probsFormula.push(TraitUnitProb({prob: 200,\n', '          value: "(Math.abs(x+y)^Math.abs(x-y)+1)",\n', '          name: "Prague"}));\n', '        probsFormula.push(TraitUnitProb({prob: 200,\n', '          value: "(x%y)%30",\n', '          name: "Paris"}));\n', '        probsFormula.push(TraitUnitProb({prob: 50,\n', '          value: "(Math.abs(x/size%2)+(Math.abs(y/size)%2))*10000",\n', '          name: "St. Petersburg"}));\n', '        probsFormula.push(TraitUnitProb({prob: 50,\n', '        value: "((x^y) < 39)*100",\n', '        name: "Rio"}));\n', '        \n', '      probsColorSchemes.push(TraitUnitProb({prob: 2000,\n', '        value: "BlackOnWhite",\n', '        name: "Black On White"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 2000,\n', '        value: "WhiteOnBlack",\n', '        name: "White On Black"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 1000,\n', '        value: "SunsetOnWhite",\n', '        name: "Sunset On White"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 1000,\n', '        value: "OceanOnWhite",\n', '        name: "Ocean On White"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 1000,\n', '        value: "TropicalOnBlack",\n', '        name: "Tropical On Black"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 1000,\n', '        value: "FireOnWhite",\n', '        name: "Fire On White"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 500,\n', '        value: "BlackOnGold",\n', '        name: "Black On Gold"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 500,\n', '        value: "BlackOnPurple",\n', '        name: "Black On Purple"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 500,\n', '        value: "BlackOnBlue",\n', '        name: "Black On Blue"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 250,\n', '        value: "RainbowOnWhite",\n', '        name: "Rainbow On White"}));\n', '      probsColorSchemes.push(TraitUnitProb({prob: 250,\n', '        value: "RainbowOnBlack",\n', '        name: "Rainbow On Black"}));\n', '        \n', '      probsAlphaType.push(TraitUnitProb({prob: 5000,\n', '        value: "None",\n', '        name: "None"}));\n', '      probsAlphaType.push(TraitUnitProb({prob: 4000,\n', '        value: "Increasing",\n', '        name: "Increasing"}));\n', '      probsAlphaType.push(TraitUnitProb({prob: 1000,\n', '        value: "Decreasing",\n', '        name: "Decreasing"}));\n', '        \n', '      probsPulseType.push(TraitUnitProb({prob: 500,\n', '        value: "Chaotic",\n', '        name: "Chaotic"}));\n', '      probsPulseType.push(TraitUnitProb({prob: 9500,\n', '        value: "Uniform",\n', '        name: "Uniform"}));    \n', '        \n', '      probsMainPrimitive.push(TraitUnitProb({prob: 9800,\n', '        value: "Square",\n', '        name: "Square"}));\n', '      probsMainPrimitive.push(TraitUnitProb( {prob: 200,\n', '        value: "Circle",\n', '        name: "Circle"}));\n', '        \n', '    probsRotation.push(TraitUnitProb({prob: 9000,\n', '        value: "None",\n', '        name: "None"}));\n', '        probsRotation.push(TraitUnitProb({prob: 1000,\n', '        value: "Rotating",\n', '        name: "Rotating"}));\n', '        \n', '    probsSizeVariation.push(TraitUnitProb({prob: 9000,\n', '        value: "1.05",\n', '        name: "Regular"}));\n', '    probsSizeVariation.push(TraitUnitProb({prob: 1000,\n', '        value: "0.5",\n', '        name: "Small"}));\n', '        \n', '    probsSize.push(TraitUnitProb({prob: 500,\n', '        value: "100",\n', '        name: "Big"}));\n', '    probsSize.push(TraitUnitProb({prob: 8000,\n', '        value: "15",\n', '        name: "Small"}));\n', '    probsSize.push(TraitUnitProb({prob: 1500,\n', '        value: "25",\n', '        name: "Medium"}));\n', '        \n', '        \n', '    probsOpacity.push(TraitUnitProb({prob: 9900,\n', '        value: "false",\n', '        name: "Regular"}));\n', '    probsOpacity.push(TraitUnitProb({prob: 100,\n', '        value: "true",\n', '        name: "Transparent"}));\n', '    }\n', '    \n', '    function weightedRandom(TraitUnitProb[] memory traitsProbs, uint value) public pure returns(TraitUnitProb memory) {\n', '      uint sum = 0;\n', '      uint r = value*10000/255;\n', '      for (uint i=0; i<traitsProbs.length; i++) {\n', '        sum += traitsProbs[i].prob;\n', '        if (r <= sum) return traitsProbs[i];\n', '      }      \n', '      return traitsProbs[traitsProbs.length-1];\n', '    }\n', '\n', '    function setScript(string memory _script) public onlyOwner {\n', '        script = _script;\n', '    }\n', '\n', '    function setScriptIPFS(string memory _scriptIPFS) public onlyOwner {\n', '        scriptIPFS = _scriptIPFS;\n', '    }\n', '\n', '    function getFormula(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = uint256(traitHash) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsFormula, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getColorScheme(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsColorSchemes, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getAlphaType(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*2) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsAlphaType, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getPulseType(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*3) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsPulseType, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getMainPrimitive(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*4) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsMainPrimitive, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getRotation(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*5) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsRotation, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getSizeVariation(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*6) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsSizeVariation, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getSize(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*7) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsSize, value);\n', '        return a.name;\n', '    }\n', '    \n', '    function getOpacity(bytes32 traitHash) public view returns(string memory) {\n', '        uint256 value = (uint256(traitHash) << 8*8) >> 31*8;\n', '        TraitUnitProb memory a = weightedRandom(probsOpacity, value);\n', '        return a.name;\n', '    }\n', '    \n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']