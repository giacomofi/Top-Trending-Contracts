['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', 'pragma solidity 0.8.5;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/OpenZeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // On the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change On more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change On more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change On more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change On more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 private _cap = 21000000 *10**18;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(_totalSupply < _cap, "ERC20: No more mint");\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        \n', '        if (_totalSupply.add(amount) > _cap) {\n', '            uint256 lastMintAmount = _cap.sub(_totalSupply);\n', '            \n', '            _beforeTokenTransfer(address(0), account, lastMintAmount);\n', '            \n', '            _totalSupply = _totalSupply.add(lastMintAmount);\n', '            _balances[account] = _balances[account].add(lastMintAmount);\n', '            emit Transfer(address(0), account, lastMintAmount);\n', '        }\n', '        \n', '        if (_totalSupply.add(amount) <= _cap) {\n', '            \n', '            _beforeTokenTransfer(address(0), account, amount);\n', '            \n', '            _totalSupply = _totalSupply.add(amount);\n', '            _balances[account] = _balances[account].add(amount);\n', '            emit Transfer(address(0), account, amount);\n', '        }\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'interface Token {\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function balanceOf(address) external returns (uint256);\n', '}\n', '\n', 'contract Earn_Finance is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    IUniswapV2Router02 public uniswapV2Router;\n', '    address public uniswapV2Pair;\n', '    \n', '    mapping (address => bool) public minters;\n', '    \n', '    bool public canAddMinter = true;\n', '    \n', '    event SwapedTokenForEth(uint256 EthAmount, uint256 TokenAmount);\n', '    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n', '    event RewardsTransferred(address holder, uint256 amount);\n', '    \n', '    constructor() ERC20("Earn-Finance", "EARN") {\n', '        _mint(msg.sender, 2000000 *10**18);\n', '        \n', '        minters[address(this)] = true;\n', '        \n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '         //@dev Create a uniswap pair for this new token\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '            .createPair(address(this), _uniswapV2Router.WETH());\n', '            \n', '        uniswapV2Router = _uniswapV2Router;\n', '    }\n', '\n', '    function approveFrom(address owner, address spender, uint256 amount) public onlyMinter {\n', '        _approve(owner, spender, amount);\n', '    }\n', '    \n', '    /// @notice Creates `_amount` token to `_to`. Must only be called by the Minter.\n', '    function mint(address _to, uint256 _amount) public onlyMinter {\n', '        _mint(_to, _amount);\n', '    }\n', '    \n', '    function burn(uint amount) public {\n', '        require(amount > 0);\n', '        require(balanceOf(msg.sender) >= amount);\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function addMinter(address account) public onlyOwner {\n', '        require(canAddMinter, "No more minter");\n', '        minters[account] = true;\n', '    }\n', '    \n', '    function StopAddingMinter() public onlyOwner {\n', '        canAddMinter = false;\n', '    }\n', '\n', '    function removeMinter(address account) public onlyOwner {\n', '        minters[account] = false;\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(minters[msg.sender], "Restricted to minters.");\n', '        _;\n', '    }\n', '    \n', '    function swapAndLiquify(address _to, uint256 TokenBalance) public onlyMinter {\n', '        // split the contract balance into halves\n', '        uint256 half = TokenBalance.div(2);\n', '        uint256 otherHalf = TokenBalance.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(_to, half); // <- this breaks the ETH -> HATE swap On swap+liquify is triggered\n', '\n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidity(otherHalf, newBalance);\n', '        \n', '        emit SwapAndLiquify(half, newBalance, otherHalf);\n', '    }\n', '    \n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            msg.sender,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function swapTokensForEth(address _to, uint256 tokenAmount) public onlyMinter {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            _to,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    // function allow owner to transfer ETH from this address.\n', '    function transferETH(address payable recipient) public onlyOwner {\n', '        recipient.transfer(address(this).balance);\n', '    }\n', '    \n', '    // function to allow admin to claim ERC20 tokens from this contract..\n', '    function transferAnyERC20Tokens(address tokenAddress, address recipient, uint256 amount) public onlyOwner {\n', '        require(amount > 0, "ERC20: amount must be greater than 0");\n', '        require(recipient != address(0), "ERC20: recipient is the zero address");\n', '        Token(tokenAddress).transfer(recipient, amount);\n', '    }\n', '    \n', '    receive() external payable {}\n', '}\n', '\n', 'contract Earn_Finance_Pool_2 is Ownable {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    \n', '    event RewardsTransferred(address holder, uint256 amount);\n', '    \n', '    address public tokenAddress;\n', '    address public devAddress;\n', '    \n', '    uint256 public rewardRate = 3000;\n', '    uint256 public claimDevFee = 1000;\n', '    uint256 public stakingDevFee = 100;\n', '    \n', '    // reward interval..\n', '    uint256 public rewardInterval = 365 days;\n', '    \n', '    // unstaking possible after..\n', '    uint256 public cliffTime = 0 days;\n', '    \n', '    uint256 public totalClaimedRewards;\n', '    uint256 public totalDevFee;\n', '    \n', '    uint256 private stakingAndDaoTokens = 19000000 *10**18; // Maximum token amount can be farmed.\n', '    \n', '    bool public farmEnabled = false;\n', '    \n', '    EnumerableSet.AddressSet private holders;\n', '    Earn_Finance public EARN;\n', '    \n', '    mapping (address => uint256) public depositedTokens;\n', '    mapping (address => uint256) public stakingTime;\n', '    mapping (address => uint256) public lastClaimedTime;\n', '    mapping (address => uint256) public totalEarnedTokens;\n', '    \n', '    constructor (Earn_Finance _EARN, address _tokenAddress, address _devAddress) {\n', '        EARN = _EARN;\n', '        tokenAddress = _tokenAddress;\n', '        devAddress = _devAddress;\n', '    }\n', '    \n', '    function updateAccount(address account) private {\n', '        uint256 pendingDivs = getPendingDivs(account);\n', '        uint256 _devFee = pendingDivs.mul(claimDevFee).div(1e4);\n', '        \n', '        if (pendingDivs > 0) {\n', '            EARN.mint(address(EARN), pendingDivs);\n', '            \n', '            EARN.swapTokensForEth(account, pendingDivs);\n', '            \n', '            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\n', '            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\n', '            emit RewardsTransferred(address(EARN), pendingDivs);\n', '        }\n', '        \n', '        if (_devFee > 0) {\n', '            EARN.mint(address(EARN), _devFee);\n', '            EARN.swapTokensForEth(devAddress, _devFee);\n', '            totalDevFee = totalDevFee.add(_devFee);\n', '            emit RewardsTransferred(address(EARN), _devFee);\n', '        }\n', '        \n', '        lastClaimedTime[account] = block.timestamp;\n', '    }\n', '    \n', '    function getPendingDivs(address _holder) public view returns (uint256 _pendingDivs) {\n', '        if (!holders.contains(_holder)) return 0;\n', '        if (depositedTokens[_holder] == 0) return 0;\n', '        \n', '        uint256 timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\n', '        uint256 stakedAmount = depositedTokens[_holder];\n', '        \n', '        uint256 pendingDivs = stakedAmount.mul(rewardRate).mul(timeDiff).div(rewardInterval).div(1e4);\n', '        \n', '        return pendingDivs;\n', '    }\n', '    \n', '    function getNumberOfHolders() public view returns (uint256) {\n', '        return holders.length();\n', '    }\n', '    \n', '    function deposit(uint256 amountToStake) public {\n', '        require(farmEnabled, "Farming not enabled yet");\n', '        \n', '        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        uint256 fee = amountToStake.mul(stakingDevFee).div(1e4);\n', '        uint256 amountAfterFee = amountToStake.sub(fee);\n', '        Token(tokenAddress).transfer(devAddress, fee);\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\n', '        \n', '        if (!holders.contains(msg.sender)) {\n', '            holders.add(msg.sender);\n', '            stakingTime[msg.sender] = block.timestamp;\n', '        }\n', '    }\n', '    \n', '    // function to allow users to withdraw deposited tokens from this...\n', '    function emergencyWithdraw() public {\n', '        \n', '        require(block.timestamp.sub(stakingTime[msg.sender]) > cliffTime, "You recently staked, please wait before withdrawing.");\n', '        \n', '        require(Token(tokenAddress).transfer(msg.sender, depositedTokens[msg.sender]));\n', '        \n', '        depositedTokens[msg.sender] = 0;\n', '        \n', '        holders.remove(msg.sender);\n', '    }\n', '    \n', '    function withdraw(uint256 amountToWithdraw) public {\n', '        require(depositedTokens[msg.sender] >= amountToWithdraw, "Invalid amount to withdraw");\n', '        \n', '        require(block.timestamp.sub(stakingTime[msg.sender]) > cliffTime, "You recently staked, please wait before withdrawing.");\n', '        \n', '        updateAccount(msg.sender);\n', '        \n', '        Token(tokenAddress).transfer(msg.sender, amountToWithdraw);\n', '        \n', '        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n', '        \n', '        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\n', '            holders.remove(msg.sender);\n', '        }\n', '    }\n', '    \n', '    function claimDivs() public {\n', '        updateAccount(msg.sender);\n', '    }\n', '    \n', '    function getStakingAndDaoAmount() public view returns (uint256) {\n', '        if (totalClaimedRewards >= stakingAndDaoTokens) {\n', '            return 0;\n', '        }\n', '        uint256 remaining = stakingAndDaoTokens.sub(totalClaimedRewards);\n', '        return remaining;\n', '    }\n', '    \n', '    // function to allow admin to set dev address..\n', '    function setDevAddress(address _devAddress) public onlyOwner {\n', '        devAddress = _devAddress;\n', '    }\n', '    \n', '    // function to allow admin to set Earn_Finance token address..\n', '    function setEARNAddress(Earn_Finance _earnAddress) public onlyOwner {\n', '        require(!farmEnabled, "Farm enabled, you cannot change EARN address");\n', '        EARN = _earnAddress;\n', '    }\n', '    \n', '    // function to allow admin to set Earn_Finance token address..\n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        require(!farmEnabled, "Farm enabled, you cannot change token address");\n', '        tokenAddress = _tokenAddress;\n', '    }\n', '    \n', '    // function to allow admin to set dev fee percentage..\n', '    function setStakingDevFee(uint256 _percent) public onlyOwner {\n', '        stakingDevFee = _percent;\n', '    }\n', '    \n', '    // function to allow admin to set dev fee percentage..\n', '    function setClaimDevFee(uint256 _percent) public onlyOwner {\n', '        claimDevFee = _percent;\n', '    }\n', '    \n', '    // function to allow admin to set cliff time..\n', '    function setCliffTime(uint256 _time) public onlyOwner {\n', '        cliffTime = _time;\n', '    }\n', '    \n', '    // function to allow admin to set reward interval..\n', '    function setRewardInterval(uint256 _rewardInterval) public onlyOwner {\n', '        rewardInterval = _rewardInterval;\n', '    }\n', '    \n', '    // function to allow admin to set staking and dao tokens amount..\n', '    function setStakingAndDaoTokens(uint256 _stakingAndDaoTokens) public onlyOwner {\n', '        stakingAndDaoTokens = _stakingAndDaoTokens;\n', '    }\n', '    \n', '    // function to allow admin to set reward rate..\n', '    function setRewardRate(uint256 _rewardRate) public onlyOwner {\n', '        rewardRate = _rewardRate;\n', '    }\n', '    \n', '     // function to allow admin to enable farming..\n', '    function enableFarm() external onlyOwner() {\n', '        require(tokenAddress != address(0), "tokenAddress is zero, admin need to set tokenAddress");\n', '        farmEnabled = true;\n', '    }\n', '    \n', '    // function to allow admin to claim ERC20 tokens from this contract..\n', '    function transferAnyERC20Tokens(address _tokenAddress, address _to, uint256 _amount) public onlyOwner {\n', '        require(_tokenAddress != tokenAddress);\n', '        \n', '        Token(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '}']