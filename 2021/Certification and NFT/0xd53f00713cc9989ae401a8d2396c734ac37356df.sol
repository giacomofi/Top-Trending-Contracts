['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.9.0;\n', '\n', 'contract MultiSend {\n', '    \n', '    // to save the owner of the contract in construction\n', '    address private owner;\n', '    \n', '    // to save the amount of ethers in the smart-contract\n', '    uint total_value;\n', '    \n', '    \n', '    // event for EVM logging\n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    \n', '    // modifier to check if the caller is owner\n', '    modifier isOwner() {\n', "        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n", '        // changes to the state and to Ether balances are reverted.\n', '        // This used to consume all gas in old EVM versions, but not anymore.\n', "        // It is often a good idea to use 'require' to check if functions are called correctly.\n", '        // As a second argument, you can also provide an explanation about what went wrong.\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Set contract deployer as owner\n', '     */\n', '    constructor() payable{\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '        \n', '        total_value = msg.value;  // msg.value is the ethers of the transaction\n', '    }\n', '    \n', '    // the owner of the smart-contract can chage its owner to whoever \n', '    // he/she wants\n', '    function changeOwner(address newOwner) public isOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner; \n', '    }\n', '    \n', '    /**\n', '     * @dev Return owner address \n', '     * @return address of owner\n', '     */\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '    \n', '    // charge enable the owner to store ether in the smart-contract\n', '    function charge() payable public isOwner {\n', '        // adding the message value to the smart contract\n', '        total_value += msg.value;\n', '    }\n', '    \n', '    // sum adds the different elements of the array and return its sum\n', '    function sum(uint[] memory amounts) private returns (uint retVal) {\n', '        // the value of message should be exact of total amounts\n', '        uint totalAmnt = 0;\n', '        \n', '        for (uint i=0; i < amounts.length; i++) {\n', '            totalAmnt += amounts[i];\n', '        }\n', '        \n', '        return totalAmnt;\n', '    }\n', '    \n', '    // withdraw perform the transfering of ethers\n', '    function withdraw(address payable receiverAddr, uint receiverAmnt) private {\n', '        receiverAddr.transfer(receiverAmnt);\n', '    }\n', '    \n', '    // withdrawls enable to multiple withdraws to different accounts\n', '    // at one call, and decrease the network fee\n', '    function withdrawls(address payable[] memory addrs, uint[] memory amnts) payable public isOwner {\n', '        \n', '        // first of all, add the value of the transaction to the total_value \n', '        // of the smart-contract\n', '        total_value += msg.value;\n', '        \n', '        // the addresses and amounts should be same in length\n', '        require(addrs.length == amnts.length, "The length of two array should be the same");\n', '        \n', '        // the value of the message in addition to sotred value should be more than total amounts\n', '        uint totalAmnt = sum(amnts);\n', '        \n', '        require(total_value >= totalAmnt, "The value is not sufficient or exceed");\n', '        \n', '        \n', '        for (uint i=0; i < addrs.length; i++) {\n', '            // first subtract the transferring amount from the total_value\n', '            // of the smart-contract then send it to the receiver\n', '            total_value -= amnts[i];\n', '            \n', '            // send the specified amount to the recipient\n', '            withdraw(addrs[i], amnts[i]);\n', '        }\n', '    }\n', '    \n', '}']