['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-11\n', '*/\n', '\n', '// SPDX-License-Identifier: https://github.com/lendroidproject/protocol.2.0/blob/master/LICENSE.md\n', '\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/heartbeat/Pacemaker.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/** @title Pacemaker\n', '    @author Lendroid Foundation\n', '    @notice Smart contract based on which various events in the Protocol take place\n', '    @dev Audit certificate : https://certificate.quantstamp.com/view/lendroid-whalestreet\n', '*/\n', '\n', '\n', '// solhint-disable-next-line\n', 'abstract contract Pacemaker {\n', '\n', '    using SafeMath for uint256;\n', '    uint256 constant public HEART_BEAT_START_TIME = 1607212800;// 2020-12-06 00:00:00 UTC (UTC +00:00)\n', '    uint256 constant public EPOCH_PERIOD = 8 hours;\n', '\n', '    /**\n', '        @notice Displays the epoch which contains the given timestamp\n', '        @return uint256 : Epoch value\n', '    */\n', '    function epochFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp > HEART_BEAT_START_TIME) {\n', '            return timestamp.sub(HEART_BEAT_START_TIME).div(EPOCH_PERIOD).add(1);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '        @notice Displays timestamp when a given epoch began\n', '        @return uint256 : Epoch start time\n', '    */\n', '    function epochStartTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp <= HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME;\n', '        } else {\n', '            return HEART_BEAT_START_TIME.add((epochFromTimestamp(timestamp).sub(1)).mul(EPOCH_PERIOD));\n', '        }\n', '    }\n', '\n', '    /**\n', '        @notice Displays timestamp when a given epoch will end\n', '        @return uint256 : Epoch end time\n', '    */\n', '    function epochEndTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp < HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME;\n', '        } else if (timestamp == HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME.add(EPOCH_PERIOD);\n', '        } else {\n', '            return epochStartTimeFromTimestamp(timestamp).add(EPOCH_PERIOD);\n', '        }\n', '    }\n', '\n', '    /**\n', '        @notice Calculates current epoch value from the block timestamp\n', "        @dev Calculates the nth 8-hour window frame since the heartbeat's start time\n", '        @return uint256 : Current epoch value\n', '    */\n', '    function currentEpoch() public view returns (uint256) {\n', '        return epochFromTimestamp(block.timestamp);// solhint-disable-line not-rely-on-time\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/IToken0.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/**\n', ' * @dev Required interface of a Token0 compliant contract.\n', ' */\n', 'interface IToken0 is IERC20 {\n', '    function mint(address account, uint256 amount) external;\n', '\n', '    function burn(uint256 amount) external;\n', '\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/IVault.sol\n', '\n', 'pragma solidity 0.7.5;\n', 'pragma abicoder v2;\n', '\n', '\n', '/**\n', ' * @dev Required interface of a Vault compliant contract.\n', ' */\n', 'interface IVault {\n', '    function lockVault() external;\n', '\n', '    function unlockVault() external;\n', '\n', '    function safeAddAsset(address[] calldata tokenAddresses, uint256[] calldata tokenIds,\n', '            string[] calldata categories) external;\n', '\n', '    function safeTransferAsset(uint256[] calldata assetIds) external;\n', '\n', '    function escapeHatchERC721(address tokenAddress, uint256 tokenId) external;\n', '\n', '    function setDecentralandOperator(address registryAddress, address operatorAddress,\n', '        uint256 assetId) external;\n', '\n', '    function transferOwnership(address newOwner) external;\n', '\n', '    function totalAssetSlots() external view returns (uint256);\n', '\n', '    function onERC721Received(address, uint256, bytes memory) external pure returns (bytes4);\n', '\n', '}\n', '\n', '// File: contracts/SimpleBuyout.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '/** @title SimpleBuyout\n', '    @author Lendroid Foundation\n', '    @notice Smart contract representing a NFT bundle buyout\n', '    @dev Audit certificate : Pending\n', '*/\n', 'contract SimpleBuyout is Ownable, Pacemaker, Pausable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for IToken0;\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    enum BuyoutStatus { ENABLED, ACTIVE, REVOKED, ENDED }\n', '\n', '    BuyoutStatus public status;\n', '    IToken0 public token0;\n', '    //// admin\n', '    IERC20 public token2;\n', '    uint256 public startThreshold;\n', '    uint256[4] public epochs;// [startEpoch, endEpoch, durationInEpochs, bidIntervalInEpochs]\n', '    //// vault\n', '    IVault public vault;\n', '    //// governance\n', '    uint256 public stopThresholdPercent;\n', '    uint256 public currentBidToken0Staked;\n', '    mapping (address => uint256) public token0Staked;\n', '    //// end user\n', '    address public highestBidder;\n', '    uint256[3] public highestBidValues;// [highestBid, highestToken0Bid, highestToken2Bid]\n', '    //// bid and veto count\n', '    uint256 public currentBidId;\n', '    mapping (address => uint256) public lastVetoedBidId;\n', '    //// redeem\n', '    uint256 public redeemToken2Amount;\n', '    //// prevent flash loan attacks on veto/withdrawVeto logic\n', '    mapping (address => uint256) public lastVetoedBlockNumber;\n', '\n', '    uint256 constant public MINIMUM_BID_PERCENTAGE_INCREASE_ON_VETO = 108;\n', '    uint256 constant public MINIMUM_BID_TOKEN0_PERCENTAGE_REQUIRED = 1;\n', '\n', '    // Events that will be emitted on changes.\n', '    event HighestBidIncreased(address bidder, uint256 amount);\n', '    event BuyoutStarted(address bidder, uint256 amount);\n', '    event BuyoutRevoked(uint256 amount);\n', '    event BuyoutEnded(address bidder, uint256 amount);\n', '\n', '    // solhint-disable-next-line func-visibility\n', '    constructor(address token0Address, address token2Address, address vaultAddress, uint256[4] memory uint256Values) {\n', '        // input validations\n', '        require(token0Address.isContract(), "{enableBuyout} : invalid token0Address");\n', '        require(token2Address.isContract(), "{enableBuyout} : invalid token2Address");\n', '        require(vaultAddress.isContract(), "{enableBuyout} : invalid vaultAddress");\n', '        require(uint256Values[0] > 0, "{enableBuyout} : startThreshold cannot be zero");\n', '        require(uint256Values[1] > 0, "{enableBuyout} : durationInEpochs cannot be zero");\n', '        // uint256Values[1], aka, bidIntervalInEpochs can be zero, so no checks required.\n', '        require(uint256Values[3] > 0 && uint256Values[3] <= 100,\n', '            "{enableBuyout} : stopThresholdPercent should be between 1 and 100");\n', '        // set values\n', '        token0 = IToken0(token0Address);\n', '        token2 = IERC20(token2Address);\n', '        vault = IVault(vaultAddress);\n', '        startThreshold = uint256Values[0];\n', '        epochs[2] = uint256Values[1];\n', '        epochs[3] = uint256Values[2];\n', '        stopThresholdPercent = uint256Values[3];\n', '        status = BuyoutStatus.ENABLED;\n', '    }\n', '\n', '    function togglePause(bool pause) external onlyOwner {\n', '        if (pause) {\n', '            _pause();\n', '        } else {\n', '            _unpause();\n', '        }\n', '    }\n', '\n', '    function transferVaultOwnership(address newOwner) external onlyOwner whenPaused {\n', '        require(newOwner != address(0), "{transferVaultOwnership} : invalid newOwner");\n', '        // transfer ownership of Vault to newOwner\n', '        vault.transferOwnership(newOwner);\n', '    }\n', '\n', '    function placeBid(uint256 totalBidAmount, uint256 token2Amount) external whenNotPaused {\n', '        // verify buyout has not ended\n', '        require(status != BuyoutStatus.ENDED, "{placeBid} : buyout has ended");\n', '        // verify token0 and token2 amounts are sufficient to place bid\n', '        require(totalBidAmount > startThreshold, "{placeBid} : totalBidAmount does not meet minimum threshold");\n', '        require(token2.balanceOf(msg.sender) >= token2Amount, "{placeBid} : insufficient token2 balance");\n', '        require(totalBidAmount > highestBidValues[0], "{placeBid} : there already is a higher bid");\n', '        uint256 token0Amount = requiredToken0ToBid(totalBidAmount, token2Amount);\n', '        require(token0.balanceOf(msg.sender) >= token0Amount, "{placeBid} : insufficient token0 balance");\n', '        require(token0Amount >= token0.totalSupply().mul(MINIMUM_BID_TOKEN0_PERCENTAGE_REQUIRED).div(100),\n', '            "{placeBid} : token0Amount should be at least 5% of token0 totalSupply");\n', '        // increment bid number and reset veto count\n', '        currentBidId = currentBidId.add(1);\n', '        currentBidToken0Staked = 0;\n', '        // update endEpoch\n', '        if (status == BuyoutStatus.ACTIVE) {\n', '            // already active\n', '            require(currentEpoch() <= epochs[1], "{placeBid} : buyout end epoch has been surpassed");\n', '            epochs[1] = currentEpoch().add(epochs[3]);\n', '        } else {\n', '            // activate buyout process if applicable\n', '            status = BuyoutStatus.ACTIVE;\n', '            epochs[1] = currentEpoch().add(epochs[2]);\n', '        }\n', '        // set startEpoch\n', '        epochs[0] = currentEpoch();\n', '        // return highest bid to previous bidder\n', '        if (highestBidValues[1] > 0) {\n', '            token0.safeTransfer(highestBidder, highestBidValues[1]);\n', '        }\n', '        if (highestBidValues[2] > 0) {\n', '            token2.safeTransfer(highestBidder, highestBidValues[2]);\n', '        }\n', '        // set sender as highestBidder and totalBidAmount as highestBidValues[0]\n', '        highestBidder = msg.sender;\n', '        highestBidValues[0] = totalBidAmount;\n', '        highestBidValues[1] = token0Amount;\n', '        highestBidValues[2] = token2Amount;\n', '        // transfer token0 and token2 to this contract\n', '        token0.safeTransferFrom(msg.sender, address(this), token0Amount);\n', '        token2.safeTransferFrom(msg.sender, address(this), token2Amount);\n', '        // send notification\n', '        emit HighestBidIncreased(msg.sender, totalBidAmount);\n', '    }\n', '\n', '    function veto(uint256 token0Amount) external whenNotPaused {\n', '        require(token0Amount > 0, "{veto} : token0Amount cannot be zero");\n', '        token0Staked[msg.sender] = token0Staked[msg.sender].add(token0Amount);\n', '        uint256 vetoAmount = lastVetoedBidId[msg.sender] == currentBidId ? token0Amount : token0Staked[msg.sender];\n', '        _veto(msg.sender, vetoAmount);\n', '        token0.safeTransferFrom(msg.sender, address(this), token0Amount);\n', '    }\n', '\n', '    function extendVeto() external whenNotPaused {\n', '        uint256 token0Amount = token0Staked[msg.sender];\n', '        require(token0Amount > 0, "{extendVeto} : no staked token0Amount");\n', '        require(lastVetoedBidId[msg.sender] != currentBidId, "{extendVeto} : already vetoed");\n', '        _veto(msg.sender, token0Amount);\n', '    }\n', '\n', '    function withdrawStakedToken0(uint256 token0Amount) external {\n', '        require(lastVetoedBlockNumber[msg.sender] < block.number, "{withdrawStakedToken0} : Flash attack!");\n', '        require(token0Amount > 0, "{withdrawStakedToken0} : token0Amount cannot be zero");\n', '        require(token0Staked[msg.sender] >= token0Amount,\n', '            "{withdrawStakedToken0} : token0Amount cannot exceed staked amount");\n', '        // ensure Token0 cannot be unstaked if users veto on current bid has not expired\n', '        if ((status == BuyoutStatus.ACTIVE) && (currentEpoch() <= epochs[1])) {\n', '            // already active\n', '            require(lastVetoedBidId[msg.sender] != currentBidId,\n', '                "{withdrawStakedToken0} : cannot unstake until veto on current bid expires");\n', '        }\n', '        token0Staked[msg.sender] = token0Staked[msg.sender].sub(token0Amount);\n', '        token0.safeTransfer(msg.sender, token0Amount);\n', '    }\n', '\n', '    function endBuyout() external whenNotPaused {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(currentEpoch() > epochs[1], "{endBuyout} : end epoch has not yet been reached");\n', '        require(status != BuyoutStatus.ENDED, "{endBuyout} : buyout has already ended");\n', '        require(highestBidder != address(0), "{endBuyout} : buyout does not have highestBidder");\n', '        // additional safety checks\n', '        require(((highestBidValues[1] > 0) || (highestBidValues[2] > 0)),\n', '            "{endBuyout} : highestBidder deposits cannot be 0");\n', '        // set status\n', '        status = BuyoutStatus.ENDED;\n', '        redeemToken2Amount = highestBidValues[2];\n', '        highestBidValues[2] = 0;\n', '        // burn token0Amount\n', '        if (highestBidValues[1] > 0) {\n', '            token0.burn(highestBidValues[1]);\n', '        }\n', '        // transfer ownership of Vault to highestBidder\n', '        vault.transferOwnership(highestBidder);\n', '\n', '        emit BuyoutEnded(highestBidder, highestBidValues[0]);\n', '    }\n', '\n', '    function withdrawBid() external whenPaused {\n', '        require(highestBidder == msg.sender, "{withdrawBid} : sender is not highestBidder");\n', '        _resetHighestBidDetails();\n', '\n', '    }\n', '\n', '    function redeem(uint256 token0Amount) external {\n', '        require(status == BuyoutStatus.ENDED, "{redeem} : redeem has not yet been enabled");\n', '        require(token0.balanceOf(msg.sender) >= token0Amount, "{redeem} : insufficient token0 amount");\n', '        require(token0Amount > 0, "{redeem} : token0 amount cannot be zero");\n', '        uint256 token2Amount = token2AmountRedeemable(token0Amount);\n', '        redeemToken2Amount = redeemToken2Amount.sub(token2Amount);\n', '        // burn token0Amount\n', '        token0.burnFrom(msg.sender, token0Amount);\n', '        // send token2Amount\n', '        token2.safeTransfer(msg.sender, token2Amount);\n', '    }\n', '\n', '    function token2AmountRedeemable(uint256 token0Amount) public view returns (uint256) {\n', '        return token0Amount.mul(redeemToken2Amount).div(token0.totalSupply());\n', '    }\n', '\n', '    function requiredToken0ToBid(uint256 totalBidAmount, uint256 token2Amount) public view returns (uint256) {\n', '        uint256 token0Supply = token0.totalSupply();\n', '        require(token2Amount <= totalBidAmount, "{requiredToken0ToBid} : token2Amount cannot exceed totalBidAmount");\n', '        // token2Amount = threshold * ( (totalToken0Supply - token0Amount) / totalToken0Supply )\n', '        return token0Supply\n', '            .mul(\n', '                totalBidAmount\n', '                .sub(token2Amount)\n', '            ).div(totalBidAmount);\n', '    }\n', '\n', '    function _resetHighestBidDetails() internal {\n', '        uint256 token0Amount = highestBidValues[1];\n', '        uint256 token2Amount = highestBidValues[2];\n', '        if (token0Amount > 0) {\n', '            token0.safeTransfer(highestBidder, token0Amount);\n', '        }\n', '        if (token2Amount > 0) {\n', '            token2.safeTransfer(highestBidder, token2Amount);\n', '        }\n', '        // reset highestBidder\n', '        highestBidder = address(0);\n', '        // reset highestBidValues\n', '        highestBidValues[0] = 0;\n', '        highestBidValues[1] = 0;\n', '        highestBidValues[2] = 0;\n', '    }\n', '\n', '    function _veto(address sender, uint256 token0Amount) internal {\n', '        // verify buyout has not ended\n', '        require((\n', '            (status == BuyoutStatus.ACTIVE) && (currentEpoch() >= epochs[0]) && (currentEpoch() <= epochs[1])\n', '        ), "{_veto} : buyout is not active");\n', '        lastVetoedBlockNumber[sender] = block.number;\n', '        lastVetoedBidId[sender] = currentBidId;\n', '        uint256 updatedCurrentBidToken0Staked = currentBidToken0Staked.add(token0Amount);\n', '        if (updatedCurrentBidToken0Staked < stopThresholdPercent.mul(token0.totalSupply().div(100))) {\n', '            currentBidToken0Staked = updatedCurrentBidToken0Staked;\n', '        } else {\n', '            currentBidToken0Staked = 0;\n', '            // increase startThreshold by 8% of last bid\n', '            startThreshold = highestBidValues[0].mul(MINIMUM_BID_PERCENTAGE_INCREASE_ON_VETO).div(100);\n', '            // reset endEpoch\n', '            epochs[1] = 0;\n', '            // set status\n', '            status = BuyoutStatus.REVOKED;\n', '            _resetHighestBidDetails();\n', '            emit BuyoutRevoked(updatedCurrentBidToken0Staked);\n', '        }\n', '    }\n', '\n', '}']