['// Copyright (C) 2021 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { ERC20 } from "../../ERC20.sol";\n', 'import { TokenMetadata, Component } from "../../Structs.sol";\n', 'import { TokenAdapter } from "../TokenAdapter.sol";\n', '\n', '\n', '/**\n', ' * @dev VaultLib contract interface.\n', ' * Only the functions required for OusdTokenAdapter contract are added.\n', ' */\n', 'interface VaultLib {\n', '    function calculateRedeemOutputs(uint256 _amount) external view returns (uint256[] memory);\n', '    function getAllAssets() external view returns (address[] memory);\n', '}\n', '\n', '\n', '/**\n', ' * @dev OUSD contract interface.\n', ' * Only the functions required for OusdTokenAdapter contract are added.\n', ' */\n', 'interface OusdLib {\n', '    function vaultAddress() external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title Token adapter for OUSD Protocol.\n', ' * @dev Implementation of TokenAdapter interface.\n', ' * @author Domen Grabec\n', ' */\n', 'contract OusdTokenAdapter is TokenAdapter {\n', '\n', '    /**\n', '     * @return TokenMetadata struct with ERC20-style token info.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getMetadata(address token) external view override returns (TokenMetadata memory) {\n', '        return TokenMetadata({\n', '            token: token,\n', '            name: ERC20(token).name(),\n', '            symbol: ERC20(token).symbol(),\n', '            decimals: ERC20(token).decimals()\n', '        });\n', '    }\n', '\n', '    /**\n', '     * @return Array of Component structs with underlying tokens rates for the given token.\n', '     * @dev Implementation of TokenAdapter interface function.\n', '     */\n', '    function getComponents(address token) external view override returns (Component[] memory) {\n', '        address vaultAddress = OusdLib(token).vaultAddress();\n', '        address[] memory trackedAssets = VaultLib(vaultAddress).getAllAssets();\n', '        uint256[] memory redeemOutputs = VaultLib(vaultAddress).calculateRedeemOutputs(1e18);\n', '\n', '        uint256 length = trackedAssets.length;\n', '        Component[] memory underlyingTokens = new Component[](length);\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            underlyingTokens[i] = Component({\n', '                token: trackedAssets[i],\n', '                tokenType: "ERC20",\n', '                rate: redeemOutputs[i]\n', '            });\n', '        }\n', '\n', '        return underlyingTokens;\n', '    }\n', '}\n', '\n', '// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface ERC20 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', '// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'struct ProtocolBalance {\n', '    ProtocolMetadata metadata;\n', '    AdapterBalance[] adapterBalances;\n', '}\n', '\n', '\n', 'struct ProtocolMetadata {\n', '    string name;\n', '    string description;\n', '    string websiteURL;\n', '    string iconURL;\n', '    uint256 version;\n', '}\n', '\n', '\n', 'struct AdapterBalance {\n', '    AdapterMetadata metadata;\n', '    FullTokenBalance[] balances;\n', '}\n', '\n', '\n', 'struct AdapterMetadata {\n', '    address adapterAddress;\n', '    string adapterType; // "Asset", "Debt"\n', '}\n', '\n', '\n', '// token and its underlying tokens (if exist) balances\n', 'struct FullTokenBalance {\n', '    TokenBalance base;\n', '    TokenBalance[] underlying;\n', '}\n', '\n', '\n', 'struct TokenBalance {\n', '    TokenMetadata metadata;\n', '    uint256 amount;\n', '}\n', '\n', '\n', '// ERC20-style token metadata\n', '// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\n', 'struct TokenMetadata {\n', '    address token;\n', '    string name;\n', '    string symbol;\n', '    uint8 decimals;\n', '}\n', '\n', '\n', 'struct Component {\n', '    address token;\n', '    string tokenType;  // "ERC20" by default\n', '    uint256 rate;  // price per full share (1e18)\n', '}\n', '\n', '// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program. If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { TokenMetadata, Component } from "../Structs.sol";\n', '\n', '\n', '/**\n', ' * @title Token adapter interface.\n', ' * @dev getMetadata() and getComponents() functions MUST be implemented.\n', ' * @author Igor Sobolev <[email\xa0protected]>\n', ' */\n', 'interface TokenAdapter {\n', '\n', '    /**\n', '     * @dev MUST return TokenMetadata struct with ERC20-style token info.\n', '     * struct TokenMetadata {\n', '     *     address token;\n', '     *     string name;\n', '     *     string symbol;\n', '     *     uint8 decimals;\n', '     * }\n', '     */\n', '    function getMetadata(address token) external view returns (TokenMetadata memory);\n', '\n', '    /**\n', '     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\n', '     * struct Component {\n', '     *     address token;    // Address of token contract\n', '     *     string tokenType; // Token type ("ERC20" by default)\n', '     *     uint256 rate;     // Price per share (1e18)\n', '     * }\n', '     */\n', '    function getComponents(address token) external view returns (Component[] memory);\n', '}']