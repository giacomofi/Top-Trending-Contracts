['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', 'pragma solidity >=0.7.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library ProtocolAdapterTypes {\n', '    enum OptionType {Invalid, Put, Call}\n', '\n', '    // We have 2 types of purchase methods so far - by contract and by 0x.\n', '    // Contract is simple because it involves just specifying the option terms you want to buy.\n', '    // ZeroEx involves an off-chain API call which prepares a ZeroExOrder object to be passed into the tx.\n', '    enum PurchaseMethod {Invalid, Contract, ZeroEx}\n', '\n', '    /**\n', '     * @notice Terms of an options contract\n', '     * @param underlying is the underlying asset of the options. E.g. For ETH $800 CALL, ETH is the underlying.\n', '     * @param strikeAsset is the asset used to denote the asset paid out when exercising the option.\n', '     *        E.g. For ETH $800 CALL, USDC is the strikeAsset.\n', '     * @param collateralAsset is the asset used to collateralize a short position for the option.\n', '     * @param expiry is the expiry of the option contract. Users can only exercise after expiry in Europeans.\n', '     * @param strikePrice is the strike price of an optio contract.\n', '     *        E.g. For ETH $800 CALL, 800*10**18 is the USDC.\n', '     * @param optionType is the type of option, can only be OptionType.Call or OptionType.Put\n', '     * @param paymentToken is the token used to purchase the option.\n', '     *        E.g. Buy UNI/USDC CALL with WETH as the paymentToken.\n', '     */\n', '    struct OptionTerms {\n', '        address underlying;\n', '        address strikeAsset;\n', '        address collateralAsset;\n', '        uint256 expiry;\n', '        uint256 strikePrice;\n', '        ProtocolAdapterTypes.OptionType optionType;\n', '        address paymentToken;\n', '    }\n', '\n', '    /**\n', '     * @notice 0x order for purchasing otokens\n', '     * @param exchangeAddress [deprecated] is the address we call to conduct a 0x trade.\n', '     * Slither flagged this as a potential vulnerability so we hardcoded it.\n', '     * @param buyTokenAddress is the otoken address\n', '     * @param sellTokenAddress is the token used to purchase USDC. This is USDC most of the time.\n', '     * @param allowanceTarget is the address the adapter needs to provide sellToken allowance to so the swap happens\n', '     * @param protocolFee is the fee paid (in ETH) when conducting the trade\n', '     * @param makerAssetAmount is the buyToken amount\n', '     * @param takerAssetAmount is the sellToken amount\n', '     * @param swapData is the encoded msg.data passed by the 0x api response\n', '     */\n', '    struct ZeroExOrder {\n', '        address exchangeAddress;\n', '        address buyTokenAddress;\n', '        address sellTokenAddress;\n', '        address allowanceTarget;\n', '        uint256 protocolFee;\n', '        uint256 makerAssetAmount;\n', '        uint256 takerAssetAmount;\n', '        bytes swapData;\n', '    }\n', '}\n', '\n', 'interface IProtocolAdapter {\n', '    /**\n', '     * @notice Emitted when a new option contract is purchased\n', '     */\n', '    event Purchased(\n', '        address indexed caller,\n', '        string indexed protocolName,\n', '        address indexed underlying,\n', '        uint256 amount,\n', '        uint256 optionID\n', '    );\n', '\n', '    /**\n', '     * @notice Emitted when an option contract is exercised\n', '     */\n', '    event Exercised(\n', '        address indexed caller,\n', '        address indexed options,\n', '        uint256 indexed optionID,\n', '        uint256 amount,\n', '        uint256 exerciseProfit\n', '    );\n', '\n', '    /**\n', '     * @notice Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses\n', '     */\n', '    function protocolName() external pure returns (string memory);\n', '\n', '    /**\n', '     * @notice Boolean flag to indicate whether to use option IDs or not.\n', '     * Fungible protocols normally use tokens to represent option contracts.\n', '     */\n', '    function nonFungible() external pure returns (bool);\n', '\n', '    /**\n', '     * @notice Returns the purchase method used to purchase options\n', '     */\n', '    function purchaseMethod()\n', '        external\n', '        pure\n', '        returns (ProtocolAdapterTypes.PurchaseMethod);\n', '\n', '    /**\n', '     * @notice Check if an options contract exist based on the passed parameters.\n', '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    /**\n', "     * @notice Get the options contract's address based on the passed parameters\n", '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function getOptionsAddress(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms\n', '    ) external view returns (address);\n', '\n', '    /**\n', '     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param purchaseAmount is the number of options purchased\n', '     */\n', '    function premium(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\n', '        uint256 purchaseAmount\n', '    ) external view returns (uint256 cost);\n', '\n', '    /**\n', '     * @notice Amount of profit made from exercising an option contract (current price - strike price).\n', '     *         0 if exercising out-the-money.\n', '     * @param options is the address of the options contract\n', '     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\n', '     * @param amount is the amount of tokens or options contract to exercise.\n', '     */\n', '    function exerciseProfit(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount\n', '    ) external view returns (uint256 profit);\n', '\n', '    function canExercise(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount\n', '    ) external view returns (bool);\n', '\n', '    /**\n', '     * @notice Purchases the options contract.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param amount is the purchase amount in Wad units (10**18)\n', '     */\n', '    function purchase(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\n', '        uint256 amount,\n', '        uint256 maxCost\n', '    ) external payable returns (uint256 optionID);\n', '\n', '    /**\n', '     * @notice Exercises the options contract.\n', '     * @param options is the address of the options contract\n', '     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\n', '     * @param amount is the amount of tokens or options contract to exercise.\n', '     * @param recipient is the account that receives the exercised profits.\n', '     * This is needed since the adapter holds all the positions\n', '     */\n', '    function exercise(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount,\n', '        address recipient\n', '    ) external payable;\n', '\n', '    /**\n', '     * @notice Opens a short position for a given `optionTerms`.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param amount is the short position amount\n', '     */\n', '    function createShort(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\n', '        uint256 amount\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Closes an existing short position. In the future,\n', '     * we may want to open this up to specifying a particular short position to close.\n', '     */\n', '    function closeShort() external returns (uint256);\n', '}\n', '\n', 'library GammaTypes {\n', '    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\n', '    struct Vault {\n', '        // addresses of oTokens a user has shorted (i.e. written) against this vault\n', '        address[] shortOtokens;\n', '        // addresses of oTokens a user has bought and deposited in this vault\n', '        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\n', "        // generally, long oTokens will be 'deposited' in vaults to act as collateral\n", '        // in order to write oTokens against (i.e. in spreads)\n', '        address[] longOtokens;\n', '        // addresses of other ERC-20s a user has deposited as collateral in this vault\n', '        address[] collateralAssets;\n', '        // quantity of oTokens minted/written for each oToken address in shortOtokens\n', '        uint256[] shortAmounts;\n', '        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\n', '        uint256[] longAmounts;\n', '        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\n', '        uint256[] collateralAmounts;\n', '    }\n', '}\n', '\n', 'interface OtokenInterface {\n', '    function addressBook() external view returns (address);\n', '\n', '    function underlyingAsset() external view returns (address);\n', '\n', '    function strikeAsset() external view returns (address);\n', '\n', '    function collateralAsset() external view returns (address);\n', '\n', '    function strikePrice() external view returns (uint256);\n', '\n', '    function expiryTimestamp() external view returns (uint256);\n', '\n', '    function isPut() external view returns (bool);\n', '\n', '    function init(\n', '        address _addressBook,\n', '        address _underlyingAsset,\n', '        address _strikeAsset,\n', '        address _collateralAsset,\n', '        uint256 _strikePrice,\n', '        uint256 _expiry,\n', '        bool _isPut\n', '    ) external;\n', '\n', '    function mintOtoken(address account, uint256 amount) external;\n', '\n', '    function burnOtoken(address account, uint256 amount) external;\n', '}\n', '\n', 'interface IOtokenFactory {\n', '    event OtokenCreated(\n', '        address tokenAddress,\n', '        address creator,\n', '        address indexed underlying,\n', '        address indexed strike,\n', '        address indexed collateral,\n', '        uint256 strikePrice,\n', '        uint256 expiry,\n', '        bool isPut\n', '    );\n', '\n', '    function oTokens(uint256 index) external returns (address);\n', '\n', '    function getOtokensLength() external view returns (uint256);\n', '\n', '    function getOtoken(\n', '        address _underlyingAsset,\n', '        address _strikeAsset,\n', '        address _collateralAsset,\n', '        uint256 _strikePrice,\n', '        uint256 _expiry,\n', '        bool _isPut\n', '    ) external view returns (address);\n', '\n', '    function createOtoken(\n', '        address _underlyingAsset,\n', '        address _strikeAsset,\n', '        address _collateralAsset,\n', '        uint256 _strikePrice,\n', '        uint256 _expiry,\n', '        bool _isPut\n', '    ) external returns (address);\n', '}\n', '\n', 'interface IController {\n', '    // possible actions that can be performed\n', '    enum ActionType {\n', '        OpenVault,\n', '        MintShortOption,\n', '        BurnShortOption,\n', '        DepositLongOption,\n', '        WithdrawLongOption,\n', '        DepositCollateral,\n', '        WithdrawCollateral,\n', '        SettleVault,\n', '        Redeem,\n', '        Call\n', '    }\n', '\n', '    struct ActionArgs {\n', '        // type of action that is being performed on the system\n', '        ActionType actionType;\n', '        // address of the account owner\n', '        address owner;\n', '        // address which we move assets from or to (depending on the action type)\n', '        address secondAddress;\n', '        // asset that is to be transfered\n', '        address asset;\n', '        // index of the vault that is to be modified (if any)\n', '        uint256 vaultId;\n', '        // amount of asset that is to be transfered\n', '        uint256 amount;\n', '        // each vault can hold multiple short / long / collateral assets\n', '        // but we are restricting the scope to only 1 of each in this version\n', '        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\n', '        uint256 index;\n', '        // any other data that needs to be passed in for arbitrary function calls\n', '        bytes data;\n', '    }\n', '\n', '    struct RedeemArgs {\n', '        // address to which we pay out the oToken proceeds\n', '        address receiver;\n', '        // oToken that is to be redeemed\n', '        address otoken;\n', '        // amount of oTokens that is to be redeemed\n', '        uint256 amount;\n', '    }\n', '\n', '    function getPayout(address _otoken, uint256 _amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function operate(ActionArgs[] calldata _actions) external;\n', '\n', '    function getAccountVaultCounter(address owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function oracle() external view returns (address);\n', '\n', '    function getVault(address _owner, uint256 _vaultId)\n', '        external\n', '        view\n', '        returns (GammaTypes.Vault memory);\n', '\n', '    function getProceed(address _owner, uint256 _vaultId)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function isSettlementAllowed(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        uint256 _expiry\n', '    ) external view returns (bool);\n', '}\n', '\n', 'interface OracleInterface {\n', '    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function getExpiryPrice(address _asset, uint256 _expiryTimestamp)\n', '        external\n', '        view\n', '        returns (uint256, bool);\n', '\n', '    function getDisputer() external view returns (address);\n', '\n', '    function getPricer(address _asset) external view returns (address);\n', '\n', '    function getPrice(address _asset) external view returns (uint256);\n', '\n', '    function getPricerLockingPeriod(address _pricer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getPricerDisputePeriod(address _pricer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    // Non-view function\n', '\n', '    function setAssetPricer(address _asset, address _pricer) external;\n', '\n', '    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\n', '\n', '    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\n', '\n', '    function setExpiryPrice(\n', '        address _asset,\n', '        uint256 _expiryTimestamp,\n', '        uint256 _price\n', '    ) external;\n', '\n', '    function disputeExpiryPrice(\n', '        address _asset,\n', '        uint256 _expiryTimestamp,\n', '        uint256 _price\n', '    ) external;\n', '\n', '    function setDisputer(address _disputer) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    //rounds to zero if x*y < RAY / 2\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    if (_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value))) {\n', '        return;\n', '    }\n', '    require(_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0))\n', '        && _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)),\n', '        "ERC20 approve failed");\n', '  }\n', '\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private returns (bool) {\n', '      // solhint-disable-next-line avoid-low-level-calls\n', '      (bool success, bytes memory returndata) = address(token).call(data);\n', '      if (!success) {\n', '          return false;\n', '      }\n', '\n', '      if (returndata.length >= 32) { // Return data is optional\n', '          return abi.decode(returndata, (bool));\n', '      }\n', '\n', '      // In a wierd case when return data is 1-31 bytes long - return false.\n', '      return returndata.length == 0;\n', '  }\n', '}\n', '\n', 'interface IERC20Detailed is IERC20 {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function symbol() external view returns (string calldata);\n', '}\n', '\n', '// \n', 'contract GammaAdapter is IProtocolAdapter, DSMath {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // gammaController is the top-level contract in Gamma protocol\n', '    // which allows users to perform multiple actions on their vaults\n', '    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\n', '    address public immutable gammaController;\n', '\n', '    // oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\n', '    address public immutable oTokenFactory;\n', '\n', '    // _swapWindow is the number of seconds in which a Uniswap swap is valid from block.timestamp.\n', '    uint256 private constant SWAP_WINDOW = 900;\n', '\n', '    string private constant _name = "OPYN_GAMMA";\n', '    bool private constant _nonFungible = false;\n', '\n', '    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Otoken.sol#L70\n', '    uint256 private constant OTOKEN_DECIMALS = 10**8;\n', '\n', '    uint256 private constant SLIPPAGE_TOLERANCE = 0.75 ether;\n', '\n', "    // MARGIN_POOL is Gamma protocol's collateral pool.\n", '    // Needed to approve collateral.safeTransferFrom for minting otokens.\n', '    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/MarginPool.sol\n', '    address public immutable MARGIN_POOL;\n', '\n', '    // USDCETHPriceFeed is the USDC/ETH Chainlink price feed used\n', '    // to perform swaps, as an alternative to getAmountsIn\n', '    AggregatorV3Interface public immutable USDCETHPriceFeed;\n', '\n', "    // UNISWAP_ROUTER is Uniswap's periphery contract for conducting trades.\n", '    // Using this contract is gas inefficient and should only used for convenience i.e. admin functions\n', '    address public immutable UNISWAP_ROUTER;\n', '\n', '    // WETH9 contract\n', '    address public immutable WETH;\n', '\n', '    // USDC is the strike asset in Gamma Protocol\n', '    address public immutable USDC;\n', '\n', '    // 0x proxy for performing buys\n', '    address public immutable ZERO_EX_EXCHANGE_V3;\n', '\n', '    /**\n', '     * @notice Constructor for the GammaAdapter which initializes a variables\n', '     * @param _oTokenFactory is the Gamma protocol factory contract which spawns otokens\n', '     * https://github.com/opynfinance/GammaProtocol/blob/master/contracts/OtokenFactory.sol\n', '     * @param _gammaController is a top-level contract which allows users to\n', '     * perform multiple actions in the Gamma protocol\n', '     * https://github.com/opynfinance/GammaProtocol/blob/master/contracts/Controller.sol\n', '     */\n', '    constructor(\n', '        address _oTokenFactory,\n', '        address _gammaController,\n', '        address _marginPool,\n', '        address _usdcEthPriceFeed,\n', '        address _uniswapRouter,\n', '        address _weth,\n', '        address _usdc,\n', '        address _zeroExExchange\n', '    ) {\n', '        require(_oTokenFactory != address(0), "!_oTokenFactory");\n', '        require(_gammaController != address(0), "!_gammaController");\n', '        require(_marginPool != address(0), "!_marginPool");\n', '        require(_usdcEthPriceFeed != address(0), "!_usdcEthPriceFeed");\n', '        require(_uniswapRouter != address(0), "!_uniswapRouter");\n', '        require(_weth != address(0), "!_weth");\n', '        require(_usdc != address(0), "!_usdc");\n', '        require(_zeroExExchange != address(0), "!_zeroExExchange");\n', '\n', '        oTokenFactory = _oTokenFactory;\n', '        gammaController = _gammaController;\n', '        MARGIN_POOL = _marginPool;\n', '        USDCETHPriceFeed = AggregatorV3Interface(_usdcEthPriceFeed);\n', '        UNISWAP_ROUTER = _uniswapRouter;\n', '        WETH = _weth;\n', '        USDC = _usdc;\n', '        ZERO_EX_EXCHANGE_V3 = _zeroExExchange;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function protocolName() external pure override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function nonFungible() external pure override returns (bool) {\n', '        return _nonFungible;\n', '    }\n', '\n', '    function purchaseMethod()\n', '        external\n', '        pure\n', '        override\n', '        returns (ProtocolAdapterTypes.PurchaseMethod)\n', '    {\n', '        return ProtocolAdapterTypes.PurchaseMethod.ZeroEx;\n', '    }\n', '\n', '    /**\n', '     * @notice Check if an options contract exist based on the passed parameters.\n', '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function optionsExist(ProtocolAdapterTypes.OptionTerms calldata optionTerms)\n', '        external\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        return lookupOToken(optionTerms) != address(0);\n', '    }\n', '\n', '    /**\n', "     * @notice Get the options contract's address based on the passed parameters\n", '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function getOptionsAddress(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms\n', '    ) external view override returns (address) {\n', '        return lookupOToken(optionTerms);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\n', '     */\n', '    function premium(ProtocolAdapterTypes.OptionTerms calldata, uint256)\n', '        external\n', '        pure\n', '        override\n', '        returns (uint256 cost)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Amount of profit made from exercising an option contract abs(current price - strike price)\n', '     *         0 if exercising out-the-money.\n', '     * @param options is the address of the options contract\n', '     * @param amount is the amount of tokens or options contract to exercise\n', '     *        Only relevant for fungle protocols like Opyn\n', '     */\n', '    function exerciseProfit(\n', '        address options,\n', '        uint256,\n', '        uint256 amount\n', '    ) public view override returns (uint256 profit) {\n', '        IController controller = IController(gammaController);\n', '        OracleInterface oracle = OracleInterface(controller.oracle());\n', '        OtokenInterface otoken = OtokenInterface(options);\n', '\n', '        uint256 spotPrice = oracle.getPrice(otoken.underlyingAsset());\n', '        uint256 strikePrice = otoken.strikePrice();\n', '        bool isPut = otoken.isPut();\n', '\n', '        if (!isPut && spotPrice <= strikePrice) {\n', '            return 0;\n', '        } else if (isPut && spotPrice >= strikePrice) {\n', '            return 0;\n', '        }\n', '\n', '        return controller.getPayout(options, amount.div(10**10));\n', '    }\n', '\n', '    /**\n', '     * @notice Helper function that returns true if the option can be exercised now.\n', '     * @param options is the address of the otoken\n', '     * @param amount is amount of otokens to exercise\n', '     */\n', '    function canExercise(\n', '        address options,\n', '        uint256,\n', '        uint256 amount\n', '    ) public view override returns (bool) {\n', '        OtokenInterface otoken = OtokenInterface(options);\n', '\n', '        bool settlementAllowed =\n', '            isSettlementAllowed(\n', '                otoken.underlyingAsset(),\n', '                otoken.collateralAsset(),\n', '                otoken.expiryTimestamp()\n', '            );\n', '\n', '        if (!settlementAllowed) {\n', '            return false;\n', '        }\n', "        // use `0` as the optionID because it doesn't do anything for exerciseProfit\n", '        if (exerciseProfit(options, 0, amount) > 0) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Stubbed out for conforming to the IProtocolAdapter interface.\n', '     */\n', '    function purchase(\n', '        ProtocolAdapterTypes.OptionTerms calldata,\n', '        uint256,\n', '        uint256\n', '    ) external payable override returns (uint256) {}\n', '\n', '    /**\n', '     * @notice Purchases otokens using a 0x order struct\n', '     * It is the obligation of the delegate-calling contract to return the remaining\n', '     * msg.value back to the user.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param zeroExOrder is the 0x order struct constructed using the 0x API response passed by the frontend.\n', '     */\n', '    function purchaseWithZeroEx(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\n', '        ProtocolAdapterTypes.ZeroExOrder calldata zeroExOrder\n', '    ) external payable {\n', '        require(\n', '            msg.value >= zeroExOrder.protocolFee,\n', '            "Value cannot cover protocolFee"\n', '        );\n', '        require(\n', '            zeroExOrder.sellTokenAddress == USDC,\n', '            "Sell token has to be USDC"\n', '        );\n', '\n', '        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = WETH;\n', '        path[1] = zeroExOrder.sellTokenAddress;\n', '\n', '        (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\n', '\n', '        // Because we guard that zeroExOrder.sellTokenAddress == USDC\n', '        // We can assume that the decimals == 6\n', '        uint256 soldETH =\n', '            zeroExOrder.takerAssetAmount.mul(uint256(latestPrice)).div(\n', '                10**assetDecimals(zeroExOrder.sellTokenAddress)\n', '            );\n', '\n', '        router.swapETHForExactTokens{value: soldETH}(\n', '            zeroExOrder.takerAssetAmount,\n', '            path,\n', '            address(this),\n', '            block.timestamp + SWAP_WINDOW\n', '        );\n', '\n', '        require(\n', '            IERC20(zeroExOrder.sellTokenAddress).balanceOf(address(this)) >=\n', '                zeroExOrder.takerAssetAmount,\n', '            "Not enough takerAsset balance"\n', '        );\n', '\n', '        // double approve to fix non-compliant ERC20s\n', '        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\n', '            zeroExOrder.allowanceTarget,\n', '            0\n', '        );\n', '        IERC20(zeroExOrder.sellTokenAddress).safeApprove(\n', '            zeroExOrder.allowanceTarget,\n', '            zeroExOrder.takerAssetAmount\n', '        );\n', '\n', '        require(\n', '            address(this).balance >= zeroExOrder.protocolFee,\n', '            "Not enough balance for protocol fee"\n', '        );\n', '\n', '        (bool success, ) =\n', '            ZERO_EX_EXCHANGE_V3.call{value: zeroExOrder.protocolFee}(\n', '                zeroExOrder.swapData\n', '            );\n', '\n', '        require(success, "0x swap failed");\n', '\n', '        require(\n', '            IERC20(zeroExOrder.buyTokenAddress).balanceOf(address(this)) >=\n', '                zeroExOrder.makerAssetAmount,\n', '            "Not enough buyToken balance"\n', '        );\n', '\n', '        emit Purchased(\n', '            msg.sender,\n', '            _name,\n', '            optionTerms.underlying,\n', '            soldETH.add(zeroExOrder.protocolFee),\n', '            0\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Exercises the options contract.\n', '     * @param options is the address of the options contract\n', '     * @param amount is the amount of tokens or options contract to exercise.\n', '     *        Only relevant for fungle protocols like Opyn\n', '     * @param recipient is the account that receives the exercised profits.\n', '     *        This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\n', '     */\n', '    function exercise(\n', '        address options,\n', '        uint256,\n', '        uint256 amount,\n', '        address recipient\n', '    ) public payable override {\n', '        OtokenInterface otoken = OtokenInterface(options);\n', '\n', '        require(\n', '            block.timestamp >= otoken.expiryTimestamp(),\n', '            "oToken not expired yet"\n', '        );\n', '\n', '        // Since we accept all amounts in 10**18, we need to normalize it down to the decimals otokens use (10**8)\n', '        uint256 scaledAmount = amount.div(10**10);\n', '\n', "        // use `0` as the optionID because it doesn't do anything for exerciseProfit\n", '        uint256 profit = exerciseProfit(options, 0, amount);\n', '\n', '        require(profit > 0, "Not profitable to exercise");\n', '\n', '        IController.ActionArgs memory action =\n', '            IController.ActionArgs(\n', '                IController.ActionType.Redeem,\n', '                address(this), // owner\n', '                address(this), // receiver -  we need this contract to receive so we can swap at the end\n', '                options, // asset, otoken\n', '                0, // vaultId\n', '                scaledAmount,\n', '                0, //index\n', '                "" //data\n', '            );\n', '\n', '        IController.ActionArgs[] memory actions =\n', '            new IController.ActionArgs[](1);\n', '        actions[0] = action;\n', '\n', '        IController(gammaController).operate(actions);\n', '\n', '        uint256 profitInUnderlying =\n', '            swapExercisedProfitsToUnderlying(options, profit, recipient);\n', '\n', '        emit Exercised(msg.sender, options, 0, amount, profitInUnderlying);\n', '    }\n', '\n', '    /**\n', '     * @notice Swaps the exercised profit (originally in the collateral token) into the `underlying` token.\n', '     *         This simplifies the payout of an option. Put options pay out in USDC, so we swap USDC back\n', '     *         into WETH and transfer it to the recipient.\n', "     * @param otokenAddress is the otoken's address\n", '     * @param profitInCollateral is the profit after exercising\n', '     *        denominated in the collateral - this could be a token with different decimals\n', '     * @param recipient is the recipient of the underlying tokens after the swap\n', '     */\n', '    function swapExercisedProfitsToUnderlying(\n', '        address otokenAddress,\n', '        uint256 profitInCollateral,\n', '        address recipient\n', '    ) internal returns (uint256 profitInUnderlying) {\n', '        OtokenInterface otoken = OtokenInterface(otokenAddress);\n', '        address collateral = otoken.collateralAsset();\n', '        IERC20 collateralToken = IERC20(collateral);\n', '\n', '        require(\n', '            collateralToken.balanceOf(address(this)) >= profitInCollateral,\n', '            "Not enough collateral from exercising"\n', '        );\n', '\n', '        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAP_ROUTER);\n', '\n', '        IWETH weth = IWETH(WETH);\n', '\n', '        if (collateral == address(weth)) {\n', '            profitInUnderlying = profitInCollateral;\n', '            weth.withdraw(profitInCollateral);\n', '            (bool success, ) = recipient.call{value: profitInCollateral}("");\n', '            require(success, "Failed to transfer exercise profit");\n', '        } else {\n', "            // just guard against anything that's not USDC\n", '            // we will revisit opening up other collateral types for puts\n', '            // when they get added\n', '            require(collateral == USDC, "!USDC");\n', '\n', '            address[] memory path = new address[](2);\n', '            path[0] = collateral;\n', '            path[1] = address(weth);\n', '\n', '            (, int256 latestPrice, , , ) = USDCETHPriceFeed.latestRoundData();\n', '\n', '            profitInUnderlying = wdiv(profitInCollateral, uint256(latestPrice))\n', '                .mul(10**assetDecimals(collateral));\n', '\n', '            require(profitInUnderlying > 0, "Swap is unprofitable");\n', '\n', '            IERC20(collateral).safeApprove(UNISWAP_ROUTER, profitInCollateral);\n', '\n', '            uint256[] memory amountsOut =\n', '                router.swapExactTokensForETH(\n', '                    profitInCollateral,\n', '                    wmul(profitInUnderlying, SLIPPAGE_TOLERANCE),\n', '                    path,\n', '                    recipient,\n', '                    block.timestamp + SWAP_WINDOW\n', '                );\n', '\n', '            profitInUnderlying = amountsOut[1];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a short otoken position by opening a vault, depositing collateral and minting otokens.\n', '     * The sale of otokens is left to the caller contract to perform.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param depositAmount is the amount deposited to open the vault.\n', '     *        This amount will determine how much otokens to mint.\n', '     */\n', '    function createShort(\n', '        ProtocolAdapterTypes.OptionTerms calldata optionTerms,\n', '        uint256 depositAmount\n', '    ) external override returns (uint256) {\n', '        IController controller = IController(gammaController);\n', '        uint256 newVaultID =\n', '            (controller.getAccountVaultCounter(address(this))).add(1);\n', '\n', '        address oToken = lookupOToken(optionTerms);\n', '        require(oToken != address(0), "Invalid oToken");\n', '\n', '        address collateralAsset = optionTerms.collateralAsset;\n', '        if (collateralAsset == address(0)) {\n', '            collateralAsset = WETH;\n', '        }\n', '        IERC20 collateralToken = IERC20(collateralAsset);\n', '\n', '        uint256 collateralDecimals =\n', '            uint256(IERC20Detailed(collateralAsset).decimals());\n', '        uint256 mintAmount;\n', '\n', '        if (optionTerms.optionType == ProtocolAdapterTypes.OptionType.Call) {\n', '            mintAmount = depositAmount;\n', '            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\n', '\n', '            if (mintAmount > scaleBy && collateralDecimals > 8) {\n', '                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\n', '                require(\n', '                    mintAmount > 0,\n', '                    "Must deposit more than 10**8 collateral"\n', '                );\n', '            }\n', '        } else {\n', '            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\n', '            // This is because of an issue with precision.\n', '            //\n', '            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\n', '            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\n', '            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\n', '            //\n', "            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\n", '            // We retain the dust in the vault so the calling contract can withdraw the\n', '            // actual locked amount + dust at settlement.\n', '            //\n', '            // To test this behavior, we can console.log\n', '            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\n', '            // to see how much dust (or excess collateral) is left behind.\n', '            mintAmount = wdiv(\n', '                depositAmount.mul(OTOKEN_DECIMALS),\n', '                optionTerms\n', '                    .strikePrice\n', '            )\n', '                .div(10**collateralDecimals);\n', '        }\n', '\n', '        // double approve to fix non-compliant ERC20s\n', '        collateralToken.safeApprove(MARGIN_POOL, depositAmount);\n', '\n', '        IController.ActionArgs[] memory actions =\n', '            new IController.ActionArgs[](3);\n', '\n', '        actions[0] = IController.ActionArgs(\n', '            IController.ActionType.OpenVault,\n', '            address(this), // owner\n', '            address(this), // receiver -  we need this contract to receive so we can swap at the end\n', '            address(0), // asset, otoken\n', '            newVaultID, // vaultId\n', '            0, // amount\n', '            0, //index\n', '            "" //data\n', '        );\n', '\n', '        actions[1] = IController.ActionArgs(\n', '            IController.ActionType.DepositCollateral,\n', '            address(this), // owner\n', '            address(this), // address to transfer from\n', '            collateralAsset, // deposited asset\n', '            newVaultID, // vaultId\n', '            depositAmount, // amount\n', '            0, //index\n', '            "" //data\n', '        );\n', '\n', '        actions[2] = IController.ActionArgs(\n', '            IController.ActionType.MintShortOption,\n', '            address(this), // owner\n', '            address(this), // address to transfer to\n', '            oToken, // deposited asset\n', '            newVaultID, // vaultId\n', '            mintAmount, // amount\n', '            0, //index\n', '            "" //data\n', '        );\n', '\n', '        controller.operate(actions);\n', '\n', '        return mintAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Close the existing short otoken position. Currently this implementation is simple.\n', '     * It closes the most recent vault opened by the contract. This assumes that the contract will\n', '     * only have a single vault open at any given time. Since calling `closeShort` deletes vaults,\n', '     * this assumption should hold.\n', '     */\n', '    function closeShort() external override returns (uint256) {\n', '        IController controller = IController(gammaController);\n', '\n', '        // gets the currently active vault ID\n', '        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n', '\n', '        GammaTypes.Vault memory vault =\n', '            controller.getVault(address(this), vaultID);\n', '\n', '        require(vault.shortOtokens.length > 0, "No active short");\n', '\n', '        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n', '        OtokenInterface otoken = OtokenInterface(vault.shortOtokens[0]);\n', '\n', '        bool settlementAllowed =\n', '            isSettlementAllowed(\n', '                otoken.underlyingAsset(),\n', '                otoken.collateralAsset(),\n', '                otoken.expiryTimestamp()\n', '            );\n', '\n', '        uint256 startCollateralBalance =\n', '            collateralToken.balanceOf(address(this));\n', '\n', '        IController.ActionArgs[] memory actions;\n', '\n', '        // If it is after expiry, we need to settle the short position using the normal way\n', '        // Delete the vault and withdraw all remaining collateral from the vault\n', '        //\n', '        // If it is before expiry, we need to burn otokens in order to withdraw collateral from the vault\n', '        if (settlementAllowed) {\n', '            actions = new IController.ActionArgs[](1);\n', '\n', '            actions[0] = IController.ActionArgs(\n', '                IController.ActionType.SettleVault,\n', '                address(this), // owner\n', '                address(this), // address to transfer to\n', '                address(0), // not used\n', '                vaultID, // vaultId\n', '                0, // not used\n', '                0, // not used\n', '                "" // not used\n', '            );\n', '\n', '            controller.operate(actions);\n', '        } else {\n', '            // Burning otokens given by vault.shortAmounts[0] (closing the entire short position),\n', '            // then withdrawing all the collateral from the vault\n', '            actions = new IController.ActionArgs[](2);\n', '\n', '            actions[0] = IController.ActionArgs(\n', '                IController.ActionType.BurnShortOption,\n', '                address(this), // owner\n', '                address(this), // address to transfer to\n', '                address(otoken), // otoken address\n', '                vaultID, // vaultId\n', '                vault.shortAmounts[0], // amount\n', '                0, //index\n', '                "" //data\n', '            );\n', '\n', '            actions[1] = IController.ActionArgs(\n', '                IController.ActionType.WithdrawCollateral,\n', '                address(this), // owner\n', '                address(this), // address to transfer to\n', '                address(collateralToken), // withdrawn asset\n', '                vaultID, // vaultId\n', '                vault.collateralAmounts[0], // amount\n', '                0, //index\n', '                "" //data\n', '            );\n', '\n', '            controller.operate(actions);\n', '        }\n', '\n', '        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n', '\n', '        return endCollateralBalance.sub(startCollateralBalance);\n', '    }\n', '\n', '    /**\n', '     * @notice Gas-optimized getter for checking if settlement is allowed.\n', '     * Looks up from the oracles with asset address and expiry\n', '     * @param underlying is the address of the underlying for an otoken\n', '     * @param collateral is the address of the collateral for an otoken\n', "     * @param expiry is the timestamp of the otoken's expiry\n", '     */\n', '    function isSettlementAllowed(\n', '        address underlying,\n', '        address collateral,\n', '        uint256 expiry\n', '    ) private view returns (bool) {\n', '        IController controller = IController(gammaController);\n', '        OracleInterface oracle = OracleInterface(controller.oracle());\n', '\n', '        bool underlyingFinalized =\n', '            oracle.isDisputePeriodOver(underlying, expiry);\n', '\n', '        bool collateralFinalized =\n', '            (underlying != collateral && collateral != USDC)\n', '                ? oracle.isDisputePeriodOver(collateral, expiry)\n', '                : true;\n', '\n', '        bool strikeFinalized = oracle.isDisputePeriodOver(USDC, expiry);\n', '\n', '        // We can avoid checking the dispute period for the collateral for now\n', '        // Because the collateral is either the underlying or USDC at this point\n', '        // We do not have, for example, ETH-collateralized UNI otoken vaults\n', '        // bool collateralFinalized = oracle.isDisputePeriodOver(isPut ? USDC : underlying, expiry);\n', '\n', '        return underlyingFinalized && strikeFinalized && collateralFinalized;\n', '    }\n', '\n', '    /**\n', '     * @notice Helper function to get the decimals of an asset. Will just hardcode for the time being.\n', '     * @param asset is the token which we want to know the decimals\n', '     */\n', '    function assetDecimals(address asset) private view returns (uint256) {\n', '        // USDC\n', '        if (asset == USDC) {\n', '            return 6;\n', '        }\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @notice Function to lookup oToken addresses. oToken addresses are keyed by an ABI-encoded byte string\n', '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function lookupOToken(ProtocolAdapterTypes.OptionTerms memory optionTerms)\n', '        public\n', '        view\n', '        returns (address oToken)\n', '    {\n', '        IOtokenFactory factory = IOtokenFactory(oTokenFactory);\n', '\n', '        bool isPut =\n', '            optionTerms.optionType == ProtocolAdapterTypes.OptionType.Put;\n', '        address underlying = optionTerms.underlying;\n', '\n', '        /**\n', '         * In many instances, we just use 0x0 to indicate ETH as the underlying asset.\n', '         * We need to unify usage of 0x0 as WETH instead.\n', '         */\n', '        if (optionTerms.underlying == address(0)) {\n', '            underlying = WETH;\n', '        }\n', '\n', '        oToken = factory.getOtoken(\n', '            underlying,\n', '            optionTerms.strikeAsset,\n', '            optionTerms.collateralAsset,\n', '            optionTerms.strikePrice.div(10**10),\n', '            optionTerms.expiry,\n', '            isPut\n', '        );\n', '    }\n', '}']