['//SPDX-License-Identifier: Unlicense\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./ServiceInterface.sol";\n', 'import "./IERC1155Preset.sol";\n', 'import "./StrongNFTBonusLegacyInterface.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Context.sol";\n', 'import "./ERC1155Receiver.sol";\n', '\n', 'contract StrongNFTBonusV2 is Context {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Staked(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block);\n', '  event Unstaked(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block);\n', '\n', '  ServiceInterface public CService;\n', '  IERC1155Preset public CERC1155;\n', '  StrongNFTBonusLegacyInterface public CStrongNFTBonus;\n', '\n', '  bool public initDone;\n', '\n', '  address public serviceAdmin;\n', '  address public superAdmin;\n', '\n', '  string[] public nftBonusNames;\n', '  mapping(string => uint256) public nftBonusLowerBound;\n', '  mapping(string => uint256) public nftBonusUpperBound;\n', '  mapping(string => uint256) public nftBonusValue;\n', '  mapping(string => uint256) public nftBonusEffectiveBlock;\n', '\n', '  mapping(uint256 => address) public nftIdStakedToEntity;\n', '  mapping(uint256 => uint128) public nftIdStakedToNodeId;\n', '  mapping(uint256 => uint256) public nftIdStakedAtBlock;\n', '  mapping(address => mapping(uint128 => uint256)) public entityNodeStakedNftId;\n', '\n', '  mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '  function init(address serviceContract, address nftContract, address strongNFTBonusContract, address serviceAdminAddress, address superAdminAddress) public {\n', '    require(initDone == false, "init done");\n', '\n', '    _registerInterface(0x01ffc9a7);\n', '    _registerInterface(\n', '      ERC1155Receiver(0).onERC1155Received.selector ^\n', '      ERC1155Receiver(0).onERC1155BatchReceived.selector\n', '    );\n', '\n', '    serviceAdmin = serviceAdminAddress;\n', '    superAdmin = superAdminAddress;\n', '    CService = ServiceInterface(serviceContract);\n', '    CERC1155 = IERC1155Preset(nftContract);\n', '    CStrongNFTBonus = StrongNFTBonusLegacyInterface(strongNFTBonusContract);\n', '    initDone = true;\n', '  }\n', '\n', '  //\n', '  // Getters\n', '  // -------------------------------------------------------------------------------------------------------------------\n', '\n', '  function isNftStaked(uint256 _nftId) public view returns (bool) {\n', '    return nftIdStakedToNodeId[_nftId] != 0;\n', '  }\n', '\n', '  function isNftStakedLegacy(uint256 _nftId) public view returns (bool) {\n', '    return CStrongNFTBonus.isNftStaked(_nftId);\n', '  }\n', '\n', '  function getStakedNftId(address _entity, uint128 _nodeId) public view returns (uint256) {\n', '    uint256 stakedNftId = entityNodeStakedNftId[_entity][_nodeId];\n', '    uint256 stakedNftIdLegacy = CStrongNFTBonus.getStakedNftId(_entity, _nodeId);\n', '    return stakedNftId != 0 ? stakedNftId : stakedNftIdLegacy;\n', '  }\n', '\n', '  function getBonus(address _entity, uint128 _nodeId, uint256 _fromBlock, uint256 _toBlock) public view returns (uint256) {\n', '    string memory bonusName = "BRONZE";\n', '    uint256 nftId = getStakedNftId(_entity, _nodeId);\n', '    uint256 stakedAtBlock = nftIdStakedAtBlock[nftId];\n', '    uint256 effectiveBlock = nftBonusEffectiveBlock[bonusName];\n', '    uint256 startFromBlock = stakedAtBlock > _fromBlock ? stakedAtBlock : _fromBlock;\n', '    if (startFromBlock < effectiveBlock) {\n', '      startFromBlock = effectiveBlock;\n', '    }\n', '\n', '    if (stakedAtBlock == 0 && keccak256(abi.encode(bonusName)) == keccak256(abi.encode("BRONZE"))) {\n', '      return CStrongNFTBonus.getBonus(_entity, _nodeId, startFromBlock, _toBlock);\n', '    }\n', '\n', '    if (nftId == 0) return 0;\n', '    if (stakedAtBlock == 0) return 0;\n', '    if (effectiveBlock == 0) return 0;\n', '    if (startFromBlock >= _toBlock) return 0;\n', '    if (nftId < nftBonusLowerBound[bonusName]) return 0;\n', '    if (nftId > nftBonusUpperBound[bonusName]) return 0;\n', '    if (CERC1155.balanceOf(address(this), nftId) == 0) return 0;\n', '\n', '    return _toBlock.sub(startFromBlock).mul(nftBonusValue[bonusName]);\n', '  }\n', '\n', '  //\n', '  // Staking\n', '  // -------------------------------------------------------------------------------------------------------------------\n', '\n', '  function stakeNFT(uint256 _nftId, uint128 _nodeId) public payable {\n', '    require(CERC1155.balanceOf(_msgSender(), _nftId) != 0, "not enough");\n', '    require(entityNodeStakedNftId[_msgSender()][_nodeId] == 0, "already staked");\n', '    require(_nftId >= nftBonusLowerBound["BRONZE"] && _nftId <= nftBonusUpperBound["BRONZE"], "not eligible");\n', '    require(CService.doesNodeExist(_msgSender(), _nodeId), "node doesnt exist");\n', '\n', '    entityNodeStakedNftId[_msgSender()][_nodeId] = _nftId;\n', '    nftIdStakedToEntity[_nftId] = _msgSender();\n', '    nftIdStakedToNodeId[_nftId] = _nodeId;\n', '    nftIdStakedAtBlock[_nftId] = block.number;\n', '\n', '    CERC1155.safeTransferFrom(_msgSender(), address(this), _nftId, 1, bytes(""));\n', '\n', '    emit Staked(_msgSender(), _nftId, _nodeId, block.number);\n', '  }\n', '\n', '  function unStakeNFT(uint256 _nftId, uint256 _blockNumber) public payable {\n', '    require(nftIdStakedToEntity[_nftId] != address(0), "not staked");\n', '    require(nftIdStakedToEntity[_nftId] == _msgSender(), "not staker");\n', '\n', '    uint128 nodeId = nftIdStakedToNodeId[_nftId];\n', '\n', '    CService.claim{value : msg.value}(nodeId, _blockNumber, false);\n', '\n', '    entityNodeStakedNftId[_msgSender()][nodeId] = 0;\n', '    nftIdStakedToEntity[_nftId] = address(0);\n', '    nftIdStakedToNodeId[_nftId] = 0;\n', '\n', '    CERC1155.safeTransferFrom(address(this), _msgSender(), _nftId, 1, bytes(""));\n', '\n', '    emit Unstaked(_msgSender(), _nftId, nodeId, _blockNumber);\n', '  }\n', '\n', '  //\n', '  // Admin\n', '  // -------------------------------------------------------------------------------------------------------------------\n', '\n', '  function updateBonus(string memory _name, uint256 _lowerBound, uint256 _upperBound, uint256 _value, uint256 _block) public {\n', '    require(_msgSender() == serviceAdmin || _msgSender() == superAdmin, "not admin");\n', '\n', '    bool alreadyExist = false;\n', '    for (uint i = 0; i < nftBonusNames.length; i++) {\n', '      if (keccak256(abi.encode(nftBonusNames[i])) == keccak256(abi.encode(_name))) {\n', '        alreadyExist = true;\n', '      }\n', '    }\n', '\n', '    if (!alreadyExist) {\n', '      nftBonusNames.push(_name);\n', '    }\n', '\n', '    nftBonusLowerBound[_name] = _lowerBound;\n', '    nftBonusUpperBound[_name] = _upperBound;\n', '    nftBonusValue[_name] = _value;\n', '    nftBonusEffectiveBlock[_name] = _block != 0 ? _block : block.number;\n', '  }\n', '\n', '  function updateContracts(address serviceContract, address nftContract) public {\n', '    require(_msgSender() == superAdmin, "not admin");\n', '    CService = ServiceInterface(serviceContract);\n', '    CERC1155 = IERC1155Preset(nftContract);\n', '  }\n', '\n', '  function updateServiceAdmin(address newServiceAdmin) public {\n', '    require(_msgSender() == superAdmin, "not admin");\n', '    serviceAdmin = newServiceAdmin;\n', '  }\n', '\n', '  //\n', '  // ERC1155 support\n', '  // -------------------------------------------------------------------------------------------------------------------\n', '\n', '  function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\n', '    return this.onERC1155Received.selector;\n', '  }\n', '\n', '  function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\n', '    return this.onERC1155BatchReceived.selector;\n', '  }\n', '\n', '  function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  function _registerInterface(bytes4 interfaceId) internal virtual {\n', '    require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}']