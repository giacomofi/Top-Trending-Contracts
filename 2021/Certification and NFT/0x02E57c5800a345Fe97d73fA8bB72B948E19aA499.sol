['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'import "./interfaces/IYVaultV2.sol";\n', 'import "./interfaces/ITrigger.sol";\n', '\n', '/**\n', ' * @notice Defines a trigger that is toggled if the price per share for the V2 yVault decreases between consecutive\n', ' * checks. Under normal operation, this value should only increase\n', ' */\n', 'contract YearnV2SharePrice is ITrigger {\n', '  uint256 internal constant WAD = 10**18;\n', '\n', '  /// @notice Vault this trigger is for\n', '  IYVaultV2 public immutable market;\n', '\n', '  /// @notice Last read pricePerShare\n', '  uint256 public lastPricePerShare;\n', '\n', '  /// @dev In Yearn V2 vaults, the pricePerShare decreases immediately after a harvest, and typically ramps up over the\n', '  /// next six hours. Therefore we cannot simply check that the pricePerShare increases. Instead, we consider the vault\n', "  /// triggered if the pricePerShare drops by more than 50% from it's previous value. This is conservative, but\n", '  /// previous Yearn bugs resulted in pricePerShare drops of 0.5% â€“ 10%, and were only temporary drops with users able\n', '  /// to be made whole. Therefore this trigger requires a large 50% drop to minimize false positives. The tolerance\n', '  /// is defined such that we trigger if: currentPricePerShare < lastPricePerShare * tolerance / 1e18. This means\n', '  /// if you want to trigger after a 20% drop, you should set the tolerance to 1e18 - 0.2e18 = 0.8e18 = 8e17\n', '  uint256 public constant tolerance = 5e17; // 50%, represented on a scale where 1e18 = 100%\n', '\n', '  /**\n', '   * @param _market Is the address of the Yearn V2 vault this trigger should protect\n', '   * @dev For definitions of other constructor parameters, see ITrigger.sol\n', '   */\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    string memory _description,\n', '    uint256[] memory _platformIds,\n', '    address _recipient,\n', '    address _market\n', '  ) ITrigger(_name, _symbol, _description, _platformIds, _recipient) {\n', '    // Set vault\n', '    market = IYVaultV2(_market);\n', '\n', "    // Save current share price (immutables can't be read at construction, so we don't use `market` directly)\n", '    lastPricePerShare = IYVaultV2(_market).pricePerShare();\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the yVault pricePerShare\n', '   */\n', '  function checkTriggerCondition() internal override returns (bool) {\n', '    // Read this blocks share price\n', '    uint256 _currentPricePerShare = market.pricePerShare();\n', '\n', '    // Check if current share price is below current share price, accounting for tolerance\n', '    bool _status = _currentPricePerShare < ((lastPricePerShare * tolerance) / 1e18);\n', '\n', '    // Save the new share price\n', '    lastPricePerShare = _currentPricePerShare;\n', '\n', '    // Return status\n', '    return _status;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface IYVaultV2 {\n', '  function pricePerShare() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', '/**\n', ' * @notice Abstract contract for creating or interacting with a Trigger contract\n', ' * @dev All trigger contracts created must inerit from this contract and conform to this interface\n', ' */\n', 'abstract contract ITrigger {\n', "  /// @notice Trigger name, analgous to an ERC-20 token's name\n", '  string public name;\n', '\n', "  /// @notice Trigger symbol, analgous to an ERC-20 token's symbol\n", '  string public symbol;\n', '\n', '  /// @notice Trigger description\n', '  string public description;\n', '\n', '  /// @notice Array of IDs of platforms covered by this trigger\n', '  uint256[] public platformIds;\n', '\n', '  /// @notice Returns address of recipient who receives subsidies for creating a protection market using this trigger\n', '  address public immutable recipient;\n', '\n', '  /// @notice Returns true if trigger condition has been met\n', '  bool public isTriggered;\n', '\n', '  /// @notice Emitted when the trigger is activated\n', '  event TriggerActivated();\n', '\n', '  /**\n', '   * @notice Returns array of IDs, where each ID corresponds to a platform covered by this trigger\n', '   * @dev See documentation for mapping of ID numbers to platforms\n', '   */\n', '  function getPlatformIds() external view returns (uint256[] memory) {\n', '    return platformIds;\n', '  }\n', '\n', '  /**\n', '   * @dev Executes trigger-specific logic to check if market has been triggered\n', '   * @return True if trigger condition occured, false otherwise\n', '   */\n', '  function checkTriggerCondition() internal virtual returns (bool);\n', '\n', '  /**\n', '   * @notice Checks trigger condition, sets isTriggered flag to true if condition is met, and returns the trigger status\n', '   * @return True if trigger condition occured, false otherwise\n', '   */\n', '  function checkAndToggleTrigger() external returns (bool) {\n', '    // Return true if trigger already toggled\n', '    if (isTriggered) return true;\n', '\n', '    // Return false if market has not been triggered\n', '    if (!checkTriggerCondition()) return false;\n', '\n', '    // Otherwise, market has been triggered\n', '    emit TriggerActivated();\n', '    isTriggered = true;\n', '    return isTriggered;\n', '  }\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    string memory _description,\n', '    uint256[] memory _platformIds,\n', '    address _recipient\n', '  ) {\n', '    name = _name;\n', '    description = _description;\n', '    symbol = _symbol;\n', '    platformIds = _platformIds;\n', '    recipient = _recipient;\n', '  }\n', '}\n', '\n', '{\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']