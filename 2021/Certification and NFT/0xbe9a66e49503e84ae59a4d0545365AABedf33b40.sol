['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-19\n', '*/\n', '\n', '// File: contracts/SmartRoute/intf/IDODOV2.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IDODOV2 {\n', '\n', '    //========== Common ==================\n', '\n', '    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\n', '\n', '    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\n', '\n', '    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n', '\n', '    function _BASE_TOKEN_() external view returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external view returns (address);\n', '\n', '    function getPMMStateForCall() external view returns (\n', '            uint256 i,\n', '            uint256 K,\n', '            uint256 B,\n', '            uint256 Q,\n', '            uint256 B0,\n', '            uint256 Q0,\n', '            uint256 R\n', '    );\n', '\n', '    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\n', '\n', '    \n', '    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\n', '\n', '    //========== DODOVendingMachine ========\n', '    \n', '    function createDODOVendingMachine(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP\n', '    ) external returns (address newVendingMachine);\n', '    \n', '    function buyShares(address to) external returns (uint256,uint256,uint256);\n', '\n', '\n', '    //========== DODOPrivatePool ===========\n', '\n', '    function createDODOPrivatePool() external returns (address newPrivatePool);\n', '\n', '    function initDODOPrivatePool(\n', '        address dppAddress,\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 k,\n', '        uint256 i,\n', '        bool isOpenTwap\n', '    ) external;\n', '\n', '    function reset(\n', '        address operator,\n', '        uint256 newLpFeeRate,\n', '        uint256 newI,\n', '        uint256 newK,\n', '        uint256 baseOutAmount,\n', '        uint256 quoteOutAmount,\n', '        uint256 minBaseReserve,\n', '        uint256 minQuoteReserve\n', '    ) external returns (bool); \n', '\n', '\n', '    function _OWNER_() external returns (address);\n', '    \n', '    //========== CrowdPooling ===========\n', '\n', '    function createCrowdPooling() external returns (address payable newCrowdPooling);\n', '\n', '    function initCrowdPooling(\n', '        address cpAddress,\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList,\n', '        bool isOpenTWAP\n', '    ) external;\n', '\n', '    function bid(address to) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/helper/DODOV2RouteHelper.sol\n', '\n', '\n', '\n', 'contract DODOV2RouteHelper {\n', '    address public immutable _DVM_FACTORY_;\n', '    address public immutable _DPP_FACTORY_;\n', '\n', '    struct PairDetail {\n', '        uint256 i;\n', '        uint256 K;\n', '        uint256 B;\n', '        uint256 Q;\n', '        uint256 B0;\n', '        uint256 Q0;\n', '        uint256 R;\n', '        uint256 lpFeeRate;\n', '        uint256 mtFeeRate;\n', '        address baseToken;\n', '        address quoteToken;\n', '        address curPair;\n', '        uint256 pairVersion;\n', '    }\n', '\n', '    constructor(address dvmFactory,address dppFactory) public {\n', '        _DVM_FACTORY_ = dvmFactory;\n', '        _DPP_FACTORY_ = dppFactory;\n', '    }\n', '\n', '    function getPairDetail(address token0,address token1,address userAddr) external view returns (PairDetail[] memory res) {\n', '        (address[] memory baseToken0DVM, address[] memory baseToken1DVM) = IDODOV2(_DVM_FACTORY_).getDODOPoolBidirection(token0,token1);\n', '        (address[] memory baseToken0DPP, address[] memory baseToken1DPP) = IDODOV2(_DPP_FACTORY_).getDODOPoolBidirection(token0,token1);\n', '        uint256 len = baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length + baseToken1DPP.length;\n', '        res = new PairDetail[](len);\n', '        for(uint8 i = 0; i < len; i++) {\n', '            PairDetail memory curRes = PairDetail(0,0,0,0,0,0,0,0,0,address(0),address(0),address(0),2);\n', '            address cur;\n', '            if(i < baseToken0DVM.length) {\n', '                cur = baseToken0DVM[i];\n', '                curRes.baseToken = token0;\n', '                curRes.quoteToken = token1;\n', '            } else if(i < baseToken0DVM.length + baseToken1DVM.length) {\n', '                cur = baseToken1DVM[i - baseToken0DVM.length];\n', '                curRes.baseToken = token1;\n', '                curRes.quoteToken = token0;\n', '            } else if(i < baseToken0DVM.length + baseToken1DVM.length + baseToken0DPP.length) {\n', '                cur = baseToken0DPP[i - baseToken0DVM.length - baseToken1DVM.length];\n', '                curRes.baseToken = token0;\n', '                curRes.quoteToken = token1;\n', '            } else {\n', '                cur = baseToken1DPP[i - baseToken0DVM.length - baseToken1DVM.length - baseToken0DPP.length];\n', '                curRes.baseToken = token1;\n', '                curRes.quoteToken = token0;\n', '            }\n', '\n', '            (            \n', '                curRes.i,\n', '                curRes.K,\n', '                curRes.B,\n', '                curRes.Q,\n', '                curRes.B0,\n', '                curRes.Q0,\n', '                curRes.R\n', '            ) = IDODOV2(cur).getPMMStateForCall();\n', '\n', '            (curRes.lpFeeRate, curRes.mtFeeRate) = IDODOV2(cur).getUserFeeRate(userAddr);\n', '            curRes.curPair = cur;\n', '            res[i] = curRes;\n', '        }\n', '    }\n', '}']