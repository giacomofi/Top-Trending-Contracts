['pragma solidity 0.8.6;\n', '\n', 'import "https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol";\n', '\n', 'contract PriceConsumer {\n', '\n', '    FeedRegistryInterface internal registry;\n', '\n', '    /**\n', '     * Network: Mainnet Alpha Preview\n', '     * Feed Registry: 0xd441F0B98BcF34749391A3879A94caA95ffDB74D\n', '     */\n', '    constructor() {\n', '        registry = FeedRegistryInterface(0xd441F0B98BcF34749391A3879A94caA95ffDB74D);\n', '    }\n', '\n', '    /**\n', '     * Returns the latest price\n', '     */\n', '    function getThePrice(address asset, address denomination) public view returns (int) {\n', '        (\n', '            uint80 roundID, \n', '            int price,\n', '            uint startedAt,\n', '            uint timeStamp,\n', '            uint80 answeredInRound\n', '        ) = registry.latestRoundData(asset, denomination);\n', '        return price;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', 'pragma abicoder v2;\n', '\n', 'import "./AggregatorV2V3Interface.sol";\n', '\n', 'interface FeedRegistryInterface {\n', '  struct Phase {\n', '    uint16 phaseId;\n', '    uint80 startingAggregatorRoundId;\n', '    uint80 endingAggregatorRoundId;\n', '  }\n', '\n', '  event FeedProposed(\n', '    address indexed asset,\n', '    address indexed denomination,\n', '    address indexed proposedAggregator,\n', '    address currentAggregator,\n', '    address sender\n', '  );\n', '  event FeedConfirmed(\n', '    address indexed asset,\n', '    address indexed denomination,\n', '    address indexed latestAggregator,\n', '    address previousAggregator,\n', '    uint16 nextPhaseId,\n', '    address sender\n', '  );\n', '\n', '  // V3 AggregatorV3Interface\n', '\n', '  function decimals(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint8\n', '    );\n', '\n', '  function description(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      string memory\n', '    );\n', '\n', '  function version(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256\n', '    );\n', '\n', '  function latestRoundData(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '  function getRoundData(\n', '    address asset,\n', '    address denomination,\n', '    uint80 _roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '  // V2 AggregatorInterface\n', '\n', '  function latestAnswer(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      int256 answer\n', '    );\n', '\n', '  function latestTimestamp(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256 timestamp\n', '    );\n', '\n', '  function latestRound(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256 roundId\n', '    );\n', '\n', '  function getAnswer(\n', '    address asset,\n', '    address denomination,\n', '    uint256 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      int256 answer\n', '    );\n', '\n', '  function getTimestamp(\n', '    address asset,\n', '    address denomination,\n', '    uint256 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256 timestamp\n', '    );\n', '\n', '  // Registry getters\n', '\n', '  function getFeed(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      AggregatorV2V3Interface aggregator\n', '    );\n', '\n', '  function getPhaseFeed(\n', '    address asset,\n', '    address denomination,\n', '    uint16 phaseId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      AggregatorV2V3Interface aggregator\n', '    );\n', '\n', '  function isFeedEnabled(\n', '    address aggregator\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      bool\n', '    );\n', '\n', '  function getPhase(\n', '    address asset,\n', '    address denomination,\n', '    uint16 phaseId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      Phase memory phase\n', '    );\n', '\n', '  // Round helpers\n', '\n', '  function getRoundFeed(\n', '    address asset,\n', '    address denomination,\n', '    uint80 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      AggregatorV2V3Interface aggregator\n', '    );\n', '\n', '  function getPhaseRange(\n', '    address asset,\n', '    address denomination,\n', '    uint16 phaseId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 startingRoundId,\n', '      uint80 endingRoundId\n', '    );\n', '\n', '  function getPreviousRoundId(\n', '    address asset,\n', '    address denomination,\n', '    uint80 roundId\n', '  ) external\n', '    view\n', '    returns (\n', '      uint80 previousRoundId\n', '    );\n', '\n', '  function getNextRoundId(\n', '    address asset,\n', '    address denomination,\n', '    uint80 roundId\n', '  ) external\n', '    view\n', '    returns (\n', '      uint80 nextRoundId\n', '    );\n', '\n', '  // Feed management\n', '\n', '  function proposeFeed(\n', '    address asset,\n', '    address denomination,\n', '    address aggregator\n', '  ) external;\n', '\n', '  function confirmFeed(\n', '    address asset,\n', '    address denomination,\n', '    address aggregator\n', '  ) external;\n', '\n', '  // Proposed aggregator\n', '\n', '  function getProposedFeed(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      AggregatorV2V3Interface proposedAggregator\n', '    );\n', '\n', '  function proposedGetRoundData(\n', '    address asset,\n', '    address denomination,\n', '    uint80 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 id,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '  function proposedLatestRoundData(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 id,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '  // Phases\n', '  function getCurrentPhaseId(\n', '    address asset,\n', '    address denomination\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint16 currentPhaseId\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./AggregatorInterface.sol";\n', 'import "./AggregatorV3Interface.sol";\n', '\n', 'interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\n', '{\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals()\n', '    external\n', '    view\n', '    returns (\n', '      uint8\n', '    );\n', '\n', '  function description()\n', '    external\n', '    view\n', '    returns (\n', '      string memory\n', '    );\n', '\n', '  function version()\n', '    external\n', '    view\n', '    returns (\n', '      uint256\n', '    );\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(\n', '    uint80 _roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface AggregatorInterface {\n', '  function latestAnswer()\n', '    external\n', '    view\n', '    returns (\n', '      int256\n', '    );\n', '  \n', '  function latestTimestamp()\n', '    external\n', '    view\n', '    returns (\n', '      uint256\n', '    );\n', '\n', '  function latestRound()\n', '    external\n', '    view\n', '    returns (\n', '      uint256\n', '    );\n', '\n', '  function getAnswer(\n', '    uint256 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      int256\n', '    );\n', '\n', '  function getTimestamp(\n', '    uint256 roundId\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256\n', '    );\n', '\n', '  event AnswerUpdated(\n', '    int256 indexed current,\n', '    uint256 indexed roundId,\n', '    uint256 updatedAt\n', '  );\n', '\n', '  event NewRound(\n', '    uint256 indexed roundId,\n', '    address indexed startedBy,\n', '    uint256 startedAt\n', '  );\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']