['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '// File: localhost/contracts/interfaces/IVault.sol\n', '\n', 'interface IVault {\n', '    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\n', '    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\n', '    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\n', '    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\n', '    function chargeFee ( address asset, address user, uint256 amount ) external;\n', '    function col (  ) external view returns ( address );\n', '    function colToken ( address, address ) external view returns ( uint256 );\n', '    function collaterals ( address, address ) external view returns ( uint256 );\n', '    function debts ( address, address ) external view returns ( uint256 );\n', '    function depositCol ( address asset, address user, uint256 amount ) external;\n', '    function depositEth ( address user ) external payable;\n', '    function depositMain ( address asset, address user, uint256 amount ) external;\n', '    function destroy ( address asset, address user ) external;\n', '    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\n', '    function lastUpdate ( address, address ) external view returns ( uint256 );\n', '    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\n', '    function liquidationBlock ( address, address ) external view returns ( uint256 );\n', '    function liquidationFee ( address, address ) external view returns ( uint256 );\n', '    function liquidationPrice ( address, address ) external view returns ( uint256 );\n', '    function oracleType ( address, address ) external view returns ( uint256 );\n', '    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function spawn ( address asset, address user, uint256 _oracleType ) external;\n', '    function stabilityFee ( address, address ) external view returns ( uint256 );\n', '    function tokenDebts ( address ) external view returns ( uint256 );\n', '    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\n', '    function update ( address asset, address user ) external;\n', '    function usdp (  ) external view returns ( address );\n', '    function vaultParameters (  ) external view returns ( address );\n', '    function weth (  ) external view returns ( address payable );\n', '    function withdrawCol ( address asset, address user, uint256 amount ) external;\n', '    function withdrawEth ( address user, uint256 amount ) external;\n', '    function withdrawMain ( address asset, address user, uint256 amount ) external;\n', '}\n', '\n', '// File: localhost/contracts/interfaces/ICollateralRegistry.sol\n', '\n', 'interface ICollateralRegistry {\n', '    function addCollateral ( address asset ) external;\n', '    function collateralId ( address ) external view returns ( uint256 );\n', '    function collaterals (  ) external view returns ( address[] memory );\n', '    function removeCollateral ( address asset ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '    function isCollateral ( address asset ) external view returns ( bool );\n', '    function collateralList ( uint id ) external view returns ( address );\n', '    function collateralsCount (  ) external view returns ( uint );\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IOracleRegistry.sol\n', '\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IOracleRegistry {\n', '\n', '    struct Oracle {\n', '        uint oracleType;\n', '        address oracleAddress;\n', '    }\n', '\n', '    function WETH (  ) external view returns ( address );\n', '    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\n', '    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\n', '    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\n', '    function maxOracleType (  ) external view returns ( uint256 );\n', '    function oracleByAsset ( address asset ) external view returns ( address );\n', '    function oracleByType ( uint256 ) external view returns ( address );\n', '    function oracleTypeByAsset ( address ) external view returns ( uint256 );\n', '    function oracleTypeByOracle ( address ) external view returns ( uint256 );\n', '    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\n', '    function setOracle ( uint256 oracleType, address oracle ) external;\n', '    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\n', '    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\n', '    function unsetOracle ( uint256 oracleType ) external;\n', '    function unsetOracleForAsset ( address asset ) external;\n', '    function unsetOracleForAssets ( address[] memory assets ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IBearingAssetOracle.sol\n', '\n', 'interface IBearingAssetOracle {\n', '    function assetToUsd ( address bearing, uint256 amount ) external view returns ( uint256 );\n', '    function bearingToUnderlying ( address bearing, uint256 amount ) external view returns ( address, uint256 );\n', '    function oracleRegistry (  ) external view returns ( address );\n', '    function setUnderlying ( address bearing, address underlying ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IVaultManagerParameters.sol\n', '\n', 'interface IVaultManagerParameters {\n', '    function devaluationPeriod ( address ) external view returns ( uint256 );\n', '    function initialCollateralRatio ( address ) external view returns ( uint256 );\n', '    function liquidationDiscount ( address ) external view returns ( uint256 );\n', '    function liquidationRatio ( address ) external view returns ( uint256 );\n', '    function maxColPercent ( address ) external view returns ( uint256 );\n', '    function minColPercent ( address ) external view returns ( uint256 );\n', '    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\n', '    function setCollateral (\n', '        address asset,\n', '        uint256 stabilityFeeValue,\n', '        uint256 liquidationFeeValue,\n', '        uint256 initialCollateralRatioValue,\n', '        uint256 liquidationRatioValue,\n', '        uint256 liquidationDiscountValue,\n', '        uint256 devaluationPeriodValue,\n', '        uint256 usdpLimit,\n', '        uint256[] calldata oracles,\n', '        uint256 minColP,\n', '        uint256 maxColP\n', '    ) external;\n', '    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\n', '    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\n', '    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\n', '    function setLiquidationRatio ( address asset, uint256 newValue ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', '// File: localhost/contracts/VaultParameters.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '/**\n', ' * @title Auth\n', " * @dev Manages USDP's system access\n", ' **/\n', 'contract Auth {\n', '\n', '    // address of the the contract with vault parameters\n', '    VaultParameters public vaultParameters;\n', '\n', '    constructor(address _parameters) {\n', '        vaultParameters = VaultParameters(_parameters);\n', '    }\n', '\n', "    // ensures tx's sender is a manager\n", '    modifier onlyManager() {\n', '        require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is able to modify the Vault\n", '    modifier hasVaultAccess() {\n', '        require(vaultParameters.canModifyVault(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is the Vault\n", '    modifier onlyVault() {\n', '        require(msg.sender == vaultParameters.vault(), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title VaultParameters\n', ' **/\n', 'contract VaultParameters is Auth {\n', '\n', '    // map token to stability fee percentage; 3 decimals\n', '    mapping(address => uint) public stabilityFee;\n', '\n', '    // map token to liquidation fee percentage, 0 decimals\n', '    mapping(address => uint) public liquidationFee;\n', '\n', '    // map token to USDP mint limit\n', '    mapping(address => uint) public tokenDebtLimit;\n', '\n', '    // permissions to modify the Vault\n', '    mapping(address => bool) public canModifyVault;\n', '\n', '    // managers\n', '    mapping(address => bool) public isManager;\n', '\n', '    // enabled oracle types\n', '    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\n', '\n', '    // address of the Vault\n', '    address payable public vault;\n', '\n', '    // The foundation address\n', '    address public foundation;\n', '\n', '    /**\n', '     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\n', '     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\n', '     * hashed with Keccak-256.\n', '     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\n', '    **/\n', '    constructor(address payable _vault, address _foundation) Auth(address(this)) {\n', '        require(_vault != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        require(_foundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        isManager[msg.sender] = true;\n', '        vault = _vault;\n', '        foundation = _foundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', "     * @dev Grants and revokes manager's status of any address\n", '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setManager(address who, bool permit) external onlyManager {\n', '        isManager[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the foundation address\n', '     * @param newFoundation The new foundation address\n', '     **/\n', '    function setFoundation(address newFoundation) external onlyManager {\n', '        require(newFoundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        foundation = newFoundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets ability to use token as the main collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\n', '     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\n', '     * @param usdpLimit The USDP token issue limit\n', '     * @param oracles The enables oracle types\n', '     **/\n', '    function setCollateral(\n', '        address asset,\n', '        uint stabilityFeeValue,\n', '        uint liquidationFeeValue,\n', '        uint usdpLimit,\n', '        uint[] calldata oracles\n', '    ) external onlyManager {\n', '        setStabilityFee(asset, stabilityFeeValue);\n', '        setLiquidationFee(asset, liquidationFeeValue);\n', '        setTokenDebtLimit(asset, usdpLimit);\n', '        for (uint i=0; i < oracles.length; i++) {\n', '            setOracleType(oracles[i], asset, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets a permission for an address to modify the Vault\n', '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setVaultAccess(address who, bool permit) external onlyManager {\n', '        canModifyVault[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the year stability fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The stability fee percentage (3 decimals)\n', '     **/\n', '    function setStabilityFee(address asset, uint newValue) public onlyManager {\n', '        stabilityFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the liquidation fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The liquidation fee percentage (0 decimals)\n', '     **/\n', '    function setLiquidationFee(address asset, uint newValue) public onlyManager {\n', '        require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");\n', '        liquidationFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Enables/disables oracle types\n', '     * @param _type The type of the oracle\n', '     * @param asset The address of the main collateral token\n', '     * @param enabled The control flag\n', '     **/\n', '    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\n', '        isOracleTypeEnabled[_type][asset] = enabled;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets USDP limit for a specific collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param limit The limit number\n', '     **/\n', '    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\n', '        tokenDebtLimit[asset] = limit;\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/ParametersBatchUpdater.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ParametersBatchUpdater\n', ' **/\n', 'contract ParametersBatchUpdater is Auth {\n', '\n', '    IVaultManagerParameters public immutable vaultManagerParameters;\n', '    IOracleRegistry public immutable oracleRegistry;\n', '    ICollateralRegistry public immutable collateralRegistry;\n', '\n', '    uint public constant BEARING_ASSET_ORACLE_TYPE = 9;\n', '\n', '    constructor(\n', '        address _vaultManagerParameters,\n', '        address _oracleRegistry,\n', '        address _collateralRegistry\n', '    ) Auth(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()) {\n', '        require(\n', '            _vaultManagerParameters != address(0) &&\n', '            _oracleRegistry != address(0) &&\n', '            _collateralRegistry != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\n', '        oracleRegistry = IOracleRegistry(_oracleRegistry);\n', '        collateralRegistry = ICollateralRegistry(_collateralRegistry);\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', "     * @dev Grants and revokes manager's status\n", '     * @param who The array of target addresses\n', '     * @param permit The array of permission flags\n', '     **/\n', '    function setManagers(address[] calldata who, bool[] calldata permit) external onlyManager {\n', '        require(who.length == permit.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < who.length; i++) {\n', '            vaultParameters.setManager(who[i], permit[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets a permission for provided addresses to modify the Vault\n', '     * @param who The array of target addresses\n', '     * @param permit The array of permission flags\n', '     **/\n', '    function setVaultAccesses(address[] calldata who, bool[] calldata permit) external onlyManager {\n', '        require(who.length == permit.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < who.length; i++) {\n', '            vaultParameters.setVaultAccess(who[i], permit[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the year stability fee for a particular collateral\n', '     * @param assets The array of addresses of the main collateral tokens\n', '     * @param newValues The array of stability fee percentages (3 decimals)\n', '     **/\n', '    function setStabilityFees(address[] calldata assets, uint[] calldata newValues) public onlyManager {\n', '        require(assets.length == newValues.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultParameters.setStabilityFee(assets[i], newValues[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentages of the liquidation fee for provided collaterals\n', '     * @param assets The array of addresses of the main collateral tokens\n', '     * @param newValues The array of liquidation fee percentages (0 decimals)\n', '     **/\n', '    function setLiquidationFees(address[] calldata assets, uint[] calldata newValues) public onlyManager {\n', '        require(assets.length == newValues.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultParameters.setLiquidationFee(assets[i], newValues[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Enables/disables oracle types\n', '     * @param _types The array of types of the oracles\n', '     * @param assets The array of addresses of the main collateral tokens\n', '     * @param flags The array of control flags\n', '     **/\n', '    function setOracleTypes(uint[] calldata _types, address[] calldata assets, bool[] calldata flags) public onlyManager {\n', '        require(_types.length == assets.length && _types.length == flags.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < _types.length; i++) {\n', '            vaultParameters.setOracleType(_types[i], assets[i], flags[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets USDP limits for a provided collaterals\n', '     * @param assets The addresses of the main collateral tokens\n', '     * @param limits The borrow USDP limits\n', '     **/\n', '    function setTokenDebtLimits(address[] calldata assets, uint[] calldata limits) public onlyManager {\n', '        require(assets.length == limits.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultParameters.setTokenDebtLimit(assets[i], limits[i]);\n', '        }\n', '    }\n', '\n', '    function changeOracleTypes(address[] calldata assets, address[] calldata users, uint[] calldata oracleTypes) public onlyManager {\n', '        require(assets.length == users.length && assets.length == oracleTypes.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            IVault(vaultParameters.vault()).changeOracleType(assets[i], users[i], oracleTypes[i]);\n', '        }\n', '    }\n', '\n', '    function setInitialCollateralRatios(address[] calldata assets, uint[] calldata values) public onlyManager {\n', '        require(assets.length == values.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultManagerParameters.setInitialCollateralRatio(assets[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function setLiquidationRatios(address[] calldata assets, uint[] calldata values) public onlyManager {\n', '        require(assets.length == values.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultManagerParameters.setLiquidationRatio(assets[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function setLiquidationDiscounts(address[] calldata assets, uint[] calldata values) public onlyManager {\n', '        require(assets.length == values.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultManagerParameters.setLiquidationDiscount(assets[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function setDevaluationPeriods(address[] calldata assets, uint[] calldata values) public onlyManager {\n', '        require(assets.length == values.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultManagerParameters.setDevaluationPeriod(assets[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function setOracleTypesInRegistry(uint[] calldata oracleTypes, address[] calldata oracles) public onlyManager {\n', '        require(oracleTypes.length == oracles.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < oracleTypes.length; i++) {\n', '            oracleRegistry.setOracle(oracleTypes[i], oracles[i]);\n', '        }\n', '    }\n', '\n', '    function setOracleTypesToAssets(address[] calldata assets, uint[] calldata oracleTypes) public onlyManager {\n', '        require(oracleTypes.length == assets.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            oracleRegistry.setOracleTypeForAsset(assets[i], oracleTypes[i]);\n', '        }\n', '    }\n', '\n', '    function setOracleTypesToAssetsBatch(address[][] calldata assets, uint[] calldata oracleTypes) public onlyManager {\n', '        require(oracleTypes.length == assets.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            oracleRegistry.setOracleTypeForAssets(assets[i], oracleTypes[i]);\n', '        }\n', '    }\n', '\n', '    function setUnderlyings(address[] calldata bearings, address[] calldata underlyings) public onlyManager {\n', '        require(bearings.length == underlyings.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < bearings.length; i++) {\n', '            IBearingAssetOracle(oracleRegistry.oracleByType(BEARING_ASSET_ORACLE_TYPE)).setUnderlying(bearings[i], underlyings[i]);\n', '        }\n', '    }\n', '\n', '    function setCollaterals(\n', '        address[] calldata assets,\n', '        uint stabilityFeeValue,\n', '        uint liquidationFeeValue,\n', '        uint initialCollateralRatioValue,\n', '        uint liquidationRatioValue,\n', '        uint liquidationDiscountValue,\n', '        uint devaluationPeriodValue,\n', '        uint usdpLimit,\n', '        uint[] calldata oracles\n', '    ) external onlyManager {\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            vaultManagerParameters.setCollateral(\n', '                assets[i],\n', '                stabilityFeeValue,\n', '                liquidationFeeValue,\n', '                initialCollateralRatioValue,\n', '                liquidationRatioValue,\n', '                liquidationDiscountValue,\n', '                devaluationPeriodValue,\n', '                usdpLimit,\n', '                oracles,\n', '                0,\n', '                0\n', '            );\n', '\n', '            collateralRegistry.addCollateral(assets[i]);\n', '        }\n', '    }\n', '\n', '    function setCollateralAddresses(address[] calldata assets, bool add) external onlyManager {\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            add ? collateralRegistry.addCollateral(assets[i]) : collateralRegistry.removeCollateral(assets[i]);\n', '        }\n', '    }\n', '}']