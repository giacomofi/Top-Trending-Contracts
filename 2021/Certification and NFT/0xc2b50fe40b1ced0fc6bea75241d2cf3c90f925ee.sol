['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Jackpot.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {ERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {ERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    // allocating 30 million tokens for promotion, airdrop, liquidity and dev share\n', '    uint256 private _totalSupply = 99999900 * (10**8);\n', '\n', '    constructor() public {\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    /* function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    } */\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {ERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    /* function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    } */\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    /* function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    } */\n', '}\n', '\n', 'contract GlobalsAndUtility is ERC20 {\n', '    /*  XfLobbyEnter\n', '     */\n', '    event XfLobbyEnter(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed entryIndex,\n', '        uint256 indexed rawAmount\n', '    );\n', '    /*  XfLobbyExit\n', '     */\n', '    event XfLobbyExit(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed entryIndex,\n', '        uint256 indexed xfAmount,\n', '        address indexed referrerAddr\n', '    );\n', '    /*  DailyDataUpdate\n', '     */\n', '    event DailyDataUpdate(\n', '        address indexed updaterAddr,\n', '        uint256 timestamp,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    );\n', '    /*  StakeStart\n', '     */\n', '    event StakeStart(\n', '        uint40 indexed stakeId,\n', '        address indexed stakerAddr,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 stakedDays\n', '    );\n', '    /*  StakeGoodAccounting\n', '     */\n', '    event StakeGoodAccounting(\n', '        uint40 indexed stakeId,\n', '        address indexed stakerAddr,\n', '        address indexed senderAddr,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 payout,\n', '        uint256 penalty\n', '    );\n', '    /*  StakeEnd\n', '     */\n', '    event StakeEnd(\n', '        uint40 indexed stakeId,\n', '        uint40 prevUnlocked,\n', '        address indexed stakerAddr,\n', '        uint256 lockedDay,\n', '        uint256 servedDays,\n', '        uint256 stakedSuns,\n', '        uint256 stakeShares,\n', '        uint256 payout,\n', '        uint256 penalty,\n', '        uint256 stakeReturn\n', '    );\n', '    /*  ShareRateChange\n', '     */\n', '    event ShareRateChange(\n', '        uint40 indexed stakeId,\n', '        uint256 timestamp,\n', '        uint256 newShareRate\n', '    );\n', '    //uint256 internal constant ROUND_TIME = 1 days;\n', '    //uint256 internal constant ROUND_TIME = 2 hours;\n', '    uint256 public ROUND_TIME;\n', '    //uint256 internal constant ROUND_TIME = 5 minutes;\n', '    //uint256 internal constant LOTERY_ENTRY_TIME = 1 hours;\n', '    //uint256 internal constant LOTERY_ENTRY_TIME = 20 minutes;\n', '    uint256 public LOTERY_ENTRY_TIME;\n', '    address public defaultReferrerAddr;\n', '    /* Flush address */\n', '    address payable public flushAddr;\n', '    uint256 internal firstAuction = uint256(-1);\n', '    uint256 internal LAST_FLUSHED_DAY = 0;\n', '    /* ERC20 constants */\n', '    string public constant name = "Jackpot Ethereum";\n', '    string public constant symbol = "JETH";\n', '    uint8 public constant decimals = 8;\n', '    uint256 public LAUNCH_TIME; // = 1606046700;\n', '    uint256 public dayNumberBegin; // = 2;\n', '    /* Start of claim phase */\n', '    uint256 internal constant CLAIM_STARTING_AMOUNT =\n', '        2500000 * (10**uint256(decimals));\n', '    uint256 internal constant CLAIM_LOWEST_AMOUNT =\n', '        1000000 * (10**uint256(decimals));\n', '    /* Number of words to hold 1 bit for each transform lobby day */\n', '    uint256 internal constant XF_LOBBY_DAY_WORDS = ((1 + (50 * 7)) + 255) >> 8;\n', '    /* Stake timing parameters */\n', '    uint256 internal constant MIN_STAKE_DAYS = 1;\n', '    uint256 internal constant MAX_STAKE_DAYS = 180; // Approx 0.5 years\n', '    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\n', '    //uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\n', '    uint256 internal constant LATE_PENALTY_GRACE_DAYS = 2 * 7;\n', '    //uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\n', '    uint256 internal constant LATE_PENALTY_SCALE_DAYS = 100 * 7;\n', '    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusSuns() */\n', '    //uint256 private constant LPB_BONUS_PERCENT = 20;\n', '    //uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\n', '    uint256 internal constant LPB = (18 * 100) / 20; /* LPB_BONUS_PERCENT */\n', '    uint256 internal constant LPB_MAX_DAYS = (LPB * 200) / 100; /* LPB_BONUS_MAX_PERCENT */\n', '    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusSuns() */\n', '    //uint256 private constant BPB_BONUS_PERCENT = 10;\n', '    //uint256 private constant BPB_MAX_JACKPOT = 7 * 1e6;\n', '    uint256 internal constant BPB_MAX_SUNS =\n', '        7 *\n', '            1e6 * /* BPB_MAX_JACKPOT */\n', '            (10**uint256(decimals));\n', '    uint256 internal constant BPB = (BPB_MAX_SUNS * 100) / 10; /* BPB_BONUS_PERCENT */\n', '    /* Share rate is scaled to increase precision */\n', '    uint256 internal constant SHARE_RATE_SCALE = 1e5;\n', '    /* Share rate max (after scaling) */\n', '    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\n', '    uint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\n', '    /* weekly staking bonus */\n', '    uint8 internal constant BONUS_DAY_SCALE = 2;\n', '    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\n', '    struct GlobalsCache {\n', '        uint256 _lockedSunsTotal;\n', '        uint256 _nextStakeSharesTotal;\n', '        uint256 _shareRate;\n', '        uint256 _stakePenaltyTotal;\n', '        uint256 _dailyDataCount;\n', '        uint256 _stakeSharesTotal;\n', '        uint40 _latestStakeId;\n', '        uint256 _currentDay;\n', '    }\n', '    struct GlobalsStore {\n', '        uint256 lockedSunsTotal;\n', '        uint256 nextStakeSharesTotal;\n', '        uint40 shareRate;\n', '        uint256 stakePenaltyTotal;\n', '        uint16 dailyDataCount;\n', '        uint256 stakeSharesTotal;\n', '        uint40 latestStakeId;\n', '    }\n', '    GlobalsStore public globals;\n', '    /* Daily data */\n', '    struct DailyDataStore {\n', '        uint256 dayPayoutTotal;\n', '        uint256 dayDividends;\n', '        uint256 dayStakeSharesTotal;\n', '    }\n', '    mapping(uint256 => DailyDataStore) public dailyData;\n', '    /* Stake expanded for memory (except _stakeId) and compact for storage */\n', '    struct StakeCache {\n', '        uint40 _stakeId;\n', '        uint256 _stakedSuns;\n', '        uint256 _stakeShares;\n', '        uint256 _lockedDay;\n', '        uint256 _stakedDays;\n', '        uint256 _unlockedDay;\n', '    }\n', '    struct StakeStore {\n', '        uint40 stakeId;\n', '        uint256 stakedSuns;\n', '        uint256 stakeShares;\n', '        uint16 lockedDay;\n', '        uint16 stakedDays;\n', '        uint16 unlockedDay;\n', '    }\n', '    struct UnstakeStore {\n', '        uint40 stakeId;\n', '        uint256 stakedSuns;\n', '        uint256 stakeShares;\n', '        uint16 lockedDay;\n', '        uint16 stakedDays;\n', '        uint16 unlockedDay;\n', '        uint256 unstakePayout;\n', '        uint256 unstakeDividends;\n', '    }\n', '    mapping(address => StakeStore[]) public stakeLists;\n', '    mapping(address => UnstakeStore[]) public endedStakeLists;\n', '    /* Temporary state for calculating daily rounds */\n', '    struct DailyRoundState {\n', '        uint256 _allocSupplyCached;\n', '        uint256 _payoutTotal;\n', '    }\n', '    struct XfLobbyEntryStore {\n', '        uint96 rawAmount;\n', '        address referrerAddr;\n', '    }\n', '    struct XfLobbyQueueStore {\n', '        uint40 headIndex;\n', '        uint40 tailIndex;\n', '        mapping(uint256 => XfLobbyEntryStore) entries;\n', '    }\n', '    mapping(uint256 => uint256) public xfLobby;\n', '    mapping(uint256 => mapping(address => XfLobbyQueueStore))\n', '        public xfLobbyMembers;\n', '    mapping(address => uint256) public fromReferrs;\n', '    mapping(uint256 => mapping(address => uint256))\n', '        public jackpotReceivedAuction;\n', '\n', '    /*  loteryLobbyEnter\n', '     */\n', '    event loteryLobbyEnter(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed rawAmount\n', '    );\n', '    /*  loteryLobbyExit\n', '     */\n', '    event loteryLobbyExit(\n', '        uint256 timestamp,\n', '        uint256 enterDay,\n', '        uint256 indexed rawAmount\n', '    );\n', '    event loteryWin(uint256 day, uint256 amount, address who);\n', '    struct LoteryStore {\n', '        uint256 change;\n', '        uint256 chanceCount;\n', '    }\n', '    struct LoteryCount {\n', '        address who;\n', '        uint256 chanceCount;\n', '    }\n', '    struct winLoteryStat {\n', '        address payable who;\n', '        uint256 totalAmount;\n', '        uint256 restAmount;\n', '    }\n', '    uint256 public lastEndedLoteryDay = 0;\n', '    uint256 public lastEndedLoteryDayWithWinner = 0;\n', '    uint256 public loteryDayWaitingForWinner = 0;\n', '    uint256 public loteryDayWaitingForWinnerNew = 0;\n', '    mapping(uint256 => winLoteryStat) public winners;\n', '    mapping(uint256 => uint256) public dayChanceCount;\n', '    // day => address => chance count\n', '    mapping(uint256 => mapping(address => LoteryStore)) public loteryLobby;\n', '    mapping(uint256 => LoteryCount[]) public loteryCount;\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Optionally update daily data for a smaller\n', '     * range to reduce gas cost for a subsequent operation\n', '     * @param beforeDay Only update days before this day number (optional; 0 for current day)\n', '     */\n', '    function dailyDataUpdate(uint256 beforeDay) external {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        /* Skip pre-claim period */\n', '        require(g._currentDay > 1, "JACKPOT: Too early"); /* CLAIM_PHASE_START_DAY */\n', '        if (beforeDay != 0) {\n', '            require(\n', '                beforeDay <= g._currentDay,\n', '                "JACKPOT: beforeDay cannot be in the future"\n', '            );\n', '            _dailyDataUpdate(g, beforeDay);\n', '        } else {\n', '            /* Default to updating before current day */\n', '            _dailyDataUpdate(g, g._currentDay);\n', '        }\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\n', '     * a single call.\n', '     * @param beginDay First day of data range\n', '     * @param endDay Last day (non-inclusive) of data range\n', '     * @return array of day stake shares total\n', '     * @return array of day payout total\n', '     */\n', '    /* function dailyDataRange(uint256 beginDay, uint256 endDay)\n', '        external\n', '        view\n', '        returns (uint256[] memory _dayStakeSharesTotal, uint256[] memory _dayPayoutTotal, uint256[] memory _dayDividends)\n', '    {\n', '        require(beginDay < endDay && endDay <= globals.dailyDataCount, "JACKPOT: range invalid");\n', '        _dayStakeSharesTotal = new uint256[](endDay - beginDay);\n', '        _dayPayoutTotal = new uint256[](endDay - beginDay);\n', '        _dayDividends = new uint256[](endDay - beginDay);\n', '        uint256 src = beginDay;\n', '        uint256 dst = 0;\n', '        do {\n', '            _dayStakeSharesTotal[dst] = uint256(dailyData[src].dayStakeSharesTotal);\n', '            _dayPayoutTotal[dst++] = uint256(dailyData[src].dayPayoutTotal);\n', '            _dayDividends[dst++] = dailyData[src].dayDividends;\n', '        } while (++src < endDay);\n', '        return (_dayStakeSharesTotal, _dayPayoutTotal, _dayDividends);\n', '    } */\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return most global info with a single call.\n', '     * Ugly implementation due to limitations of the standard ABI encoder.\n', '     * @return Fixed array of values\n', '     */\n', '    function globalInfo() external view returns (uint256[10] memory) {\n', '        return [\n', '            globals.lockedSunsTotal,\n', '            globals.nextStakeSharesTotal,\n', '            globals.shareRate,\n', '            globals.stakePenaltyTotal,\n', '            globals.dailyDataCount,\n', '            globals.stakeSharesTotal,\n', '            globals.latestStakeId,\n', '            block.timestamp,\n', '            totalSupply(),\n', '            xfLobby[_currentDay()]\n', '        ];\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\n', '     * staked Suns. allocatedSupply() includes both.\n', '     * @return Allocated Supply in Suns\n', '     */\n', '    function allocatedSupply() external view returns (uint256) {\n', '        return totalSupply().add(globals.lockedSunsTotal);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper for the current day number since launch time\n', '     * @return Current day number (zero-based)\n', '     */\n', '    function currentDay() external view returns (uint256) {\n', '        return _currentDay();\n', '    }\n', '\n', '    function _currentDay() internal view returns (uint256) {\n', '        return block.timestamp.sub(LAUNCH_TIME).div(ROUND_TIME);\n', '    }\n', '\n', '    function _dailyDataUpdateAuto(GlobalsCache memory g) internal {\n', '        _dailyDataUpdate(g, g._currentDay);\n', '    }\n', '\n', '    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\n', '        internal\n', '        view\n', '    {\n', '        g._lockedSunsTotal = globals.lockedSunsTotal;\n', '        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\n', '        g._shareRate = globals.shareRate;\n', '        g._stakePenaltyTotal = globals.stakePenaltyTotal;\n', '        g._dailyDataCount = globals.dailyDataCount;\n', '        g._stakeSharesTotal = globals.stakeSharesTotal;\n', '        g._latestStakeId = globals.latestStakeId;\n', '        g._currentDay = _currentDay();\n', '        _globalsCacheSnapshot(g, gSnapshot);\n', '    }\n', '\n', '    function _globalsCacheSnapshot(\n', '        GlobalsCache memory g,\n', '        GlobalsCache memory gSnapshot\n', '    ) internal pure {\n', '        gSnapshot._lockedSunsTotal = g._lockedSunsTotal;\n', '        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\n', '        gSnapshot._shareRate = g._shareRate;\n', '        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\n', '        gSnapshot._dailyDataCount = g._dailyDataCount;\n', '        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\n', '        gSnapshot._latestStakeId = g._latestStakeId;\n', '    }\n', '\n', '    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\n', '        internal\n', '    {\n', '        if (\n', '            g._lockedSunsTotal != gSnapshot._lockedSunsTotal ||\n', '            g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal ||\n', '            g._shareRate != gSnapshot._shareRate ||\n', '            g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal\n', '        ) {\n', '            globals.lockedSunsTotal = g._lockedSunsTotal;\n', '            globals.nextStakeSharesTotal = g._nextStakeSharesTotal;\n', '            globals.shareRate = uint40(g._shareRate);\n', '            globals.stakePenaltyTotal = g._stakePenaltyTotal;\n', '        }\n', '        if (\n', '            g._dailyDataCount != gSnapshot._dailyDataCount ||\n', '            g._stakeSharesTotal != gSnapshot._stakeSharesTotal ||\n', '            g._latestStakeId != gSnapshot._latestStakeId\n', '        ) {\n', '            globals.dailyDataCount = uint16(g._dailyDataCount);\n', '            globals.stakeSharesTotal = g._stakeSharesTotal;\n', '            globals.latestStakeId = g._latestStakeId;\n', '        }\n', '    }\n', '\n', '    function _stakeLoad(\n', '        StakeStore storage stRef,\n', '        uint40 stakeIdParam,\n', '        StakeCache memory st\n', '    ) internal view {\n', "        /* Ensure caller's stakeIndex is still current */\n", '        require(\n', '            stakeIdParam == stRef.stakeId,\n', '            "JACKPOT: stakeIdParam not in stake"\n', '        );\n', '        st._stakeId = stRef.stakeId;\n', '        st._stakedSuns = stRef.stakedSuns;\n', '        st._stakeShares = stRef.stakeShares;\n', '        st._lockedDay = stRef.lockedDay;\n', '        st._stakedDays = stRef.stakedDays;\n', '        st._unlockedDay = stRef.unlockedDay;\n', '    }\n', '\n', '    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\n', '        internal\n', '    {\n', '        stRef.stakeId = st._stakeId;\n', '        stRef.stakedSuns = st._stakedSuns;\n', '        stRef.stakeShares = st._stakeShares;\n', '        stRef.lockedDay = uint16(st._lockedDay);\n', '        stRef.stakedDays = uint16(st._stakedDays);\n', '        stRef.unlockedDay = uint16(st._unlockedDay);\n', '    }\n', '\n', '    function _stakeAdd(\n', '        StakeStore[] storage stakeListRef,\n', '        uint40 newStakeId,\n', '        uint256 newStakedSuns,\n', '        uint256 newStakeShares,\n', '        uint256 newLockedDay,\n', '        uint256 newStakedDays\n', '    ) internal {\n', '        stakeListRef.push(\n', '            StakeStore(\n', '                newStakeId,\n', '                newStakedSuns,\n', '                newStakeShares,\n', '                uint16(newLockedDay),\n', '                uint16(newStakedDays),\n', '                uint16(0) // unlockedDay\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Efficiently delete from an unordered array by moving the last element\n', '     * to the "hole" and reducing the array length. Can change the order of the list\n', '     * and invalidate previously held indexes.\n', '     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\n', '     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\n', '     * @param stakeIndex Index of the element to delete\n', '     */\n', '    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\n', '        internal\n', '    {\n', '        uint256 lastIndex = stakeListRef.length.sub(1);\n', '        /* Skip the copy if element to be removed is already the last element */\n', '        if (stakeIndex != lastIndex) {\n', '            /* Copy last element to the requested element\'s "hole" */\n', '            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\n', '        }\n', '        /*\n', '            Reduce the array length now that the array is contiguous.\n', "            Surprisingly, 'pop()' uses less gas than 'stakeListRef.length = lastIndex'\n", '        */\n', '        stakeListRef.pop();\n', '    }\n', '\n', '    /**\n', '     * @dev Estimate the stake payout for an incomplete day\n', '     * @param g Cache of stored globals\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function _estimatePayoutRewardsDay(\n', '        GlobalsCache memory g,\n', '        uint256 stakeSharesParam\n', '    ) internal view returns (uint256 payout) {\n', '        /* Prevent updating state for this estimation */\n', '        GlobalsCache memory gJpt;\n', '        _globalsCacheSnapshot(g, gJpt);\n', '        DailyRoundState memory rs;\n', '        rs._allocSupplyCached = totalSupply().add(g._lockedSunsTotal);\n', '        _dailyRoundCalc(gJpt, rs);\n', '        /* Stake is no longer locked so it must be added to total as if it were */\n', '        gJpt._stakeSharesTotal = gJpt._stakeSharesTotal.add(stakeSharesParam);\n', '        payout = rs._payoutTotal.mul(stakeSharesParam).div(gJpt._stakeSharesTotal);\n', '        return payout;\n', '    }\n', '\n', '    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs)\n', '        private\n', '        pure\n', '    {\n', '        /*\n', '            Calculate payout round\n', '            Inflation of 20% inflation per 365 days             (approx 1 year)\n', '            dailyInterestRate   = exp(log(1 + 20%)  / 365) - 1\n', '                                = exp(log(1 + 0.2) / 365) - 1\n', '                                = exp(log(1.2) / 365) - 1\n', '                                = 0.00049963589095561        (approx)\n', '            payout  = allocSupply * dailyInterestRate\n', '                    = allocSupply / (1 / dailyInterestRate)\n', '                    = allocSupply / (1 / 0.00049963589095561)\n', '                    = allocSupply / 2001.45749755364         (approx)\n', '                    = allocSupply * 342345 / 685188967\n', '        */\n', '        //rs._payoutTotal = (rs._allocSupplyCached * 342345 / 685188967);\n', '        rs._payoutTotal = rs._allocSupplyCached.mul(342345).div(685188967);\n', '        if (g._stakePenaltyTotal != 0) {\n', '            rs._payoutTotal = rs._payoutTotal.add(g._stakePenaltyTotal);\n', '            g._stakePenaltyTotal = 0;\n', '        }\n', '    }\n', '\n', '    function _dailyRoundCalcAndStore(\n', '        GlobalsCache memory g,\n', '        DailyRoundState memory rs,\n', '        uint256 day\n', '    ) private {\n', '        _dailyRoundCalc(g, rs);\n', '        dailyData[day].dayPayoutTotal = rs._payoutTotal;\n', '        /* if (day == firstAuction + 2)\n', '            dailyData[day].dayDividends = xfLobby[day] + xfLobby[firstAuction];\n', '        if (day == firstAuction + 3)\n', '            dailyData[day].dayDividends = xfLobby[day] + xfLobby[firstAuction + 1]; */\n', '        dailyData[day].dayDividends = xfLobby[day];\n', '        dailyData[day].dayStakeSharesTotal = g._stakeSharesTotal;\n', '    }\n', '\n', '    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay)\n', '        private\n', '    {\n', '        if (g._dailyDataCount >= beforeDay) {\n', '            /* Already up-to-date */\n', '            return;\n', '        }\n', '        DailyRoundState memory rs;\n', '        rs._allocSupplyCached = totalSupply().add(g._lockedSunsTotal);\n', '        uint256 day = g._dailyDataCount;\n', '        _dailyRoundCalcAndStore(g, rs, day);\n', '        /* Stakes started during this day are added to the total the next day */\n', '        if (g._nextStakeSharesTotal != 0) {\n', '            g._stakeSharesTotal = g._stakeSharesTotal.add(g._nextStakeSharesTotal);\n', '            g._nextStakeSharesTotal = 0;\n', '        }\n', '        while (++day < beforeDay) {\n', '            _dailyRoundCalcAndStore(g, rs, day);\n', '        }\n', '        emit DailyDataUpdate(\n', '            msg.sender,\n', '            block.timestamp,\n', '            g._dailyDataCount,\n', '            day\n', '        );\n', '        g._dailyDataCount = day;\n', '    }\n', '}\n', '\n', 'contract StakeableToken is GlobalsAndUtility {\n', '    modifier onlyAfterNDays(uint256 daysShift) {\n', '        require(now >= LAUNCH_TIME, "JACKPOT: Too early");\n', '        require(\n', '            firstAuction != uint256(-1),\n', '            "JACKPOT: Must be at least one auction"\n', '        );\n', '        require(\n', '            _currentDay() >= firstAuction.add(daysShift),\n', '            "JACKPOT: Too early"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Open a stake.\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function stakeStart(uint256 newStakedSuns, uint256 newStakedDays)\n', '        external\n', '        onlyAfterNDays(1)\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        if (g._currentDay >= 1) endLoteryDay(g._currentDay.sub(1));\n', '        /* Enforce the minimum stake time */\n', '        require(\n', '            newStakedDays >= MIN_STAKE_DAYS,\n', '            "JACKPOT: newStakedDays lower than minimum"\n', '        );\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '        _stakeStart(g, newStakedSuns, newStakedDays);\n', '        /* Remove staked Suns from balance of staker */\n', '        _burn(msg.sender, newStakedSuns);\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\n', '     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\n', '     * @param stakerAddr Address of staker\n', '     * @param stakeIndex Index of stake within stake list\n', "     * @param stakeIdParam The stake's id\n", '     */\n', '    function stakeGoodAccounting(\n', '        address stakerAddr,\n', '        uint256 stakeIndex,\n', '        uint40 stakeIdParam\n', '    ) external {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        if (g._currentDay >= 1) endLoteryDay(g._currentDay.sub(1));\n', '        /* require() is more informative than the default assert() */\n', '        require(\n', '            stakeLists[stakerAddr].length != 0,\n', '            "JACKPOT: Empty stake list"\n', '        );\n', '        require(\n', '            stakeIndex < stakeLists[stakerAddr].length,\n', '            "JACKPOT: stakeIndex invalid"\n', '        );\n', '        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\n', '        /* Get stake copy */\n', '        StakeCache memory st;\n', '        _stakeLoad(stRef, stakeIdParam, st);\n', '        /* Stake must have served full term */\n', '        require(\n', '            g._currentDay >= st._lockedDay.add(st._stakedDays),\n', '            "JACKPOT: Stake not fully served"\n', '        );\n', '        /* Stake must still be locked */\n', '        require(st._unlockedDay == 0, "JACKPOT: Stake already unlocked");\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '        /* Unlock the completed stake */\n', '        _stakeUnlock(g, st);\n', '        /* stakeReturn & dividends values are unused here */\n', '        (, uint256 payout, , uint256 penalty, uint256 cappedPenalty) =\n', '            _stakePerformance(g, st, st._stakedDays);\n', '        emit StakeGoodAccounting(\n', '            stakeIdParam,\n', '            stakerAddr,\n', '            msg.sender,\n', '            st._stakedSuns,\n', '            st._stakeShares,\n', '            payout,\n', '            penalty\n', '        );\n', '        if (cappedPenalty != 0) {\n', '            g._stakePenaltyTotal = g._stakePenaltyTotal.add(cappedPenalty);\n', '        }\n', '        /* st._unlockedDay has changed */\n', '        _stakeUpdate(stRef, st);\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\n', '     * a stake id is used to reject stale indexes.\n', '     * @param stakeIndex Index of stake within stake list\n', "     * @param stakeIdParam The stake's id\n", '     */\n', '    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\n', '        /* require() is more informative than the default assert() */\n', '        require(stakeListRef.length != 0, "JACKPOT: Empty stake list");\n', '        require(\n', '            stakeIndex < stakeListRef.length,\n', '            "JACKPOT: stakeIndex invalid"\n', '        );\n', '        /* Get stake copy */\n', '        StakeCache memory st;\n', '        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\n', '        /* Check if log data needs to be updated */\n', '        _dailyDataUpdateAuto(g);\n', '        _globalsSync(g, gSnapshot);\n', '        uint256 servedDays = 0;\n', '        bool prevUnlocked = (st._unlockedDay != 0);\n', '        uint256 stakeReturn;\n', '        uint256 payout = 0;\n', '        uint256 dividends = 0;\n', '        uint256 penalty = 0;\n', '        uint256 cappedPenalty = 0;\n', '        if (g._currentDay >= st._lockedDay) {\n', '            if (prevUnlocked) {\n', '                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\n', '                servedDays = st._stakedDays;\n', '            } else {\n', '                //require(g._currentDay >= st._lockedDay + 5, "JACKPOT: Stake must serve at least 5 days");\n', '                _stakeUnlock(g, st);\n', '                servedDays = g._currentDay.sub(st._lockedDay);\n', '                if (servedDays > st._stakedDays) {\n', '                    servedDays = st._stakedDays;\n', '                }\n', '            }\n', '            (\n', '                stakeReturn,\n', '                payout,\n', '                dividends,\n', '                penalty,\n', '                cappedPenalty\n', '            ) = _stakePerformance(g, st, servedDays);\n', '            msg.sender.transfer(dividends);\n', '        } else {\n', "            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\n", '            g._nextStakeSharesTotal = g._nextStakeSharesTotal.sub(st._stakeShares);\n', '            stakeReturn = st._stakedSuns;\n', '        }\n', '        emit StakeEnd(\n', '            stakeIdParam,\n', '            prevUnlocked ? 1 : 0,\n', '            msg.sender,\n', '            st._lockedDay,\n', '            servedDays,\n', '            st._stakedSuns,\n', '            st._stakeShares,\n', '            payout,\n', '            penalty,\n', '            stakeReturn\n', '        );\n', '        if (cappedPenalty != 0 && !prevUnlocked) {\n', '            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\n', '            g._stakePenaltyTotal = g._stakePenaltyTotal.add(cappedPenalty);\n', '        }\n', '        /* Pay the stake return, if any, to the staker */\n', '        if (stakeReturn != 0) {\n', '            _mint(msg.sender, stakeReturn);\n', '            /* Update the share rate if necessary */\n', '            _shareRateUpdate(g, st, stakeReturn);\n', '        }\n', '        g._lockedSunsTotal = g._lockedSunsTotal.sub(st._stakedSuns);\n', '        stakeListRef[stakeIndex].unlockedDay = uint16(\n', '            g._currentDay.mod(uint256(uint16(-1)))\n', '        );\n', '        UnstakeStore memory endedInfo;\n', '        endedInfo.stakeId = stakeListRef[stakeIndex].stakeId;\n', '        endedInfo.stakedSuns = stakeListRef[stakeIndex].stakedSuns;\n', '        endedInfo.stakeShares = stakeListRef[stakeIndex].stakeShares;\n', '        endedInfo.lockedDay = stakeListRef[stakeIndex].lockedDay;\n', '        endedInfo.stakedDays = stakeListRef[stakeIndex].stakedDays;\n', '        endedInfo.unlockedDay = stakeListRef[stakeIndex].unlockedDay;\n', '        endedInfo.unstakePayout = stakeReturn;\n', '        endedInfo.unstakeDividends = dividends;\n', '        //endedStakeLists[_msgSender()].push(stakeListRef[stakeIndex]);\n', '        endedStakeLists[_msgSender()].push(endedInfo);\n', '        _stakeRemove(stakeListRef, stakeIndex);\n', '        _globalsSync(g, gSnapshot);\n', '    }\n', '\n', '    uint256 private undestributedLotery = 0;\n', '\n', '    function endLoteryDay(uint256 endDay) public onlyAfterNDays(0) {\n', '        uint256 currDay = _currentDay();\n', '        if (currDay == 0) return;\n', '        if (endDay >= currDay) endDay = currDay.sub(1);\n', '        if (\n', '            endDay == currDay.sub(1) &&\n', '            now % ROUND_TIME <= LOTERY_ENTRY_TIME &&\n', '            endDay > 0\n', '        ) endDay = endDay.sub(1);\n', '        else if (\n', '            endDay == currDay.sub(1) &&\n', '            now % ROUND_TIME <= LOTERY_ENTRY_TIME &&\n', '            endDay == 0\n', '        ) return;\n', '        while (lastEndedLoteryDay <= endDay) {\n', '            uint256 ChanceCount = dayChanceCount[lastEndedLoteryDay];\n', '            if (ChanceCount == 0) {\n', '                undestributedLotery = undestributedLotery.add(xfLobby[lastEndedLoteryDay].mul(25).div(1000));\n', '                lastEndedLoteryDay = lastEndedLoteryDay.add(1);\n', '                continue;\n', '            }\n', '            uint256 randomInt = _random(ChanceCount);\n', '            //uint256 randomInt = _random(10000);\n', '            uint256 count = 0;\n', '            uint256 ind = 0;\n', '            while (count < randomInt) {\n', '                uint256 newChanceCount =\n', '                    loteryCount[lastEndedLoteryDay][ind].chanceCount;\n', '                if (count.add(newChanceCount) >= randomInt) break;\n', '                count = count.add(newChanceCount);\n', '                ind = ind.add(1);\n', '            }\n', '            uint256 amount = xfLobby[lastEndedLoteryDay].mul(25).div(1000);\n', '            if (undestributedLotery > 0) {\n', '                amount = amount.add(undestributedLotery);\n', '                undestributedLotery = 0;\n', '            }\n', '            winners[lastEndedLoteryDay] = winLoteryStat(\n', '                address(uint160(loteryCount[lastEndedLoteryDay][ind].who)),\n', '                amount,\n', '                amount\n', '            );\n', '            lastEndedLoteryDayWithWinner = lastEndedLoteryDay;\n', '            emit loteryWin(\n', '                lastEndedLoteryDay,\n', '                amount,\n', '                winners[lastEndedLoteryDay].who\n', '            );\n', '            //delete loteryCount[lastEndedLoteryDay];\n', '            lastEndedLoteryDay = lastEndedLoteryDay.add(1);\n', '        }\n', '    }\n', '\n', '    function loteryCountLen(uint256 day) external view returns (uint256) {\n', '        return loteryCount[day].length;\n', '    }\n', '\n', '    function withdrawLotery(uint256 day) public {\n', '        if (winners[day].restAmount != 0) {\n', '            winners[day].who.transfer(winners[day].restAmount);\n', '            winners[day].restAmount = 0;\n', '        }\n', '    }\n', '\n', '    uint256 private nonce = 0;\n', '\n', '    function _random(uint256 limit) private returns (uint256) {\n', '        uint256 randomnumber =\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        now,\n', '                        msg.sender,\n', '                        nonce,\n', '                        blockhash(block.number),\n', '                        block.number,\n', '                        block.coinbase,\n', '                        block.difficulty\n', '                    )\n', '                )\n', '            ) % limit;\n', '        nonce = nonce.add(1);\n', '        return randomnumber;\n', '    }\n', '\n', '    function endedStakeCount(address stakerAddr)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return endedStakeLists[stakerAddr].length;\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Return the current stake count for a staker address\n', '     * @param stakerAddr Address of staker\n', '     */\n', '    function stakeCount(address stakerAddr) external view returns (uint256) {\n', '        return stakeLists[stakerAddr].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Open a stake.\n', '     * @param g Cache of stored globals\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function _stakeStart(\n', '        GlobalsCache memory g,\n', '        uint256 newStakedSuns,\n', '        uint256 newStakedDays\n', '    ) internal {\n', '        /* Enforce the maximum stake time */\n', '        require(\n', '            newStakedDays <= MAX_STAKE_DAYS,\n', '            "JACKPOT: newStakedDays higher than maximum"\n', '        );\n', '        uint256 bonusSuns = _stakeStartBonusSuns(newStakedSuns, newStakedDays);\n', '        uint256 newStakeShares = newStakedSuns.add(bonusSuns).mul(SHARE_RATE_SCALE).div(g._shareRate);\n', '        /* Ensure newStakedSuns is enough for at least one stake share */\n', '        require(\n', '            newStakeShares != 0,\n', '            "JACKPOT: newStakedSuns must be at least minimum shareRate"\n', '        );\n', '        /*\n', '            The stakeStart timestamp will always be part-way through the current\n', '            day, so it needs to be rounded-up to the next day to ensure all\n', '            stakes align with the same fixed calendar days. The current day is\n', '            already rounded-down, so rounded-up is current day + 1.\n', '        */\n', '        uint256 newLockedDay = g._currentDay.add(1);\n', '        /* Create Stake */\n', '        g._latestStakeId = uint40(uint256(g._latestStakeId).add(1));\n', '        uint40 newStakeId = g._latestStakeId;\n', '        _stakeAdd(\n', '            stakeLists[msg.sender],\n', '            newStakeId,\n', '            newStakedSuns,\n', '            newStakeShares,\n', '            newLockedDay,\n', '            newStakedDays\n', '        );\n', '        emit StakeStart(\n', '            newStakeId,\n', '            msg.sender,\n', '            newStakedSuns,\n', '            newStakeShares,\n', '            newStakedDays\n', '        );\n', '        /* Stake is added to total in the next round, not the current round */\n', '        g._nextStakeSharesTotal = g._nextStakeSharesTotal.add(newStakeShares);\n', '        /* Track total staked Suns for inflation calculations */\n', '        g._lockedSunsTotal = g._lockedSunsTotal.add(newStakedSuns);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total stake payout including rewards for a multi-day range\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @param beginDay First day to calculate bonuses for\n', '     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function calcPayoutRewards(\n', '        uint256 stakeSharesParam,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    ) public view returns (uint256 payout) {\n', '        uint256 currDay = _currentDay();\n', '        require(beginDay <= currDay, "JACKPOT: Wrong argument for beginDay");\n', '        require(\n', '            endDay <= currDay && beginDay <= endDay,\n', '            "JACKPOT: Wrong argument for endDay"\n', '        );\n', '        require(globals.latestStakeId != 0, "JACKPOT: latestStakeId error.");\n', '        if (beginDay == endDay) return 0;\n', '        uint256 counter;\n', '        uint256 day = beginDay;\n', '        while (day < endDay && day < globals.dailyDataCount) {\n', '            uint256 dayPayout;\n', '            dayPayout =\n', '                dailyData[day].dayPayoutTotal.mul(stakeSharesParam).div(dailyData[day].dayStakeSharesTotal);\n', '            if (counter < 4) {\n', '                counter = counter.add(1);\n', '            }\n', '            /* Eligible to receive bonus */\n', '            else {\n', '                dayPayout =\n', '                    dailyData[day].dayPayoutTotal.mul(stakeSharesParam).div(dailyData[day].dayStakeSharesTotal).mul(BONUS_DAY_SCALE);\n', '                counter = 0;\n', '            }\n', '            payout = payout.add(dayPayout);\n', '            day = day.add(1);\n', '        }\n', '        uint256 dayStakeSharesTotal =\n', '            dailyData[uint256(globals.dailyDataCount).sub(1)].dayStakeSharesTotal;\n', '        if (dayStakeSharesTotal == 0) dayStakeSharesTotal = stakeSharesParam;\n', '        //require(dayStakeSharesTotal != 0, "JACKPOT: dayStakeSharesTotal == 0");\n', '        uint256 dayPayoutTotal =\n', '            dailyData[uint256(globals.dailyDataCount).sub(1)].dayPayoutTotal;\n', '        while (day < endDay) {\n', '            uint256 dayPayout;\n', '            dayPayout =\n', '                dayPayoutTotal.mul(stakeSharesParam).div(dayStakeSharesTotal);\n', '            if (counter < 4) {\n', '                counter = counter.add(1);\n', '            }\n', '            // Eligible to receive bonus\n', '            else {\n', '                dayPayout =\n', '                    dayPayoutTotal.mul(stakeSharesParam).div(dayStakeSharesTotal).mul(BONUS_DAY_SCALE);\n', '                counter = 0;\n', '            }\n', '            payout = payout.add(dayPayout);\n', '            day = day.add(1);\n', '        }\n', '        return payout;\n', '    }\n', '\n', '    function calcPayoutRewardsBonusDays(\n', '        uint256 stakeSharesParam,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    ) external view returns (uint256 payout) {\n', '        uint256 currDay = _currentDay();\n', '        require(beginDay <= currDay, "JACKPOT: Wrong argument for beginDay");\n', '        require(\n', '            endDay <= currDay && beginDay <= endDay,\n', '            "JACKPOT: Wrong argument for endDay"\n', '        );\n', '        require(globals.latestStakeId != 0, "JACKPOT: latestStakeId error.");\n', '        if (beginDay == endDay) return 0;\n', '        uint256 day = beginDay.add(5);\n', '        while (day < endDay && day < globals.dailyDataCount) {\n', '            payout = payout.add(dailyData[day].dayPayoutTotal.mul(stakeSharesParam).div(dailyData[day].dayStakeSharesTotal));\n', '            day = day.add(5);\n', '        }\n', '        uint256 dayStakeSharesTotal =\n', '            dailyData[uint256(globals.dailyDataCount).sub(1)].dayStakeSharesTotal;\n', '        if (dayStakeSharesTotal == 0) dayStakeSharesTotal = stakeSharesParam;\n', '        //require(dayStakeSharesTotal != 0, "JACKPOT: dayStakeSharesTotal == 0");\n', '        uint256 dayPayoutTotal =\n', '            dailyData[uint256(globals.dailyDataCount).sub(1)].dayPayoutTotal;\n', '        while (day < endDay) {\n', '            payout = payout.add(dayPayoutTotal.mul(stakeSharesParam).div(dayStakeSharesTotal));\n', '            day = day.add(5);\n', '        }\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates user dividends\n', '     * @param stakeSharesParam Param from stake to calculate bonuses for\n', '     * @param beginDay First day to calculate bonuses for\n', '     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\n', '     * @return Payout in Suns\n', '     */\n', '    function calcPayoutDividendsReward(\n', '        uint256 stakeSharesParam,\n', '        uint256 beginDay,\n', '        uint256 endDay\n', '    ) public view returns (uint256 payout) {\n', '        uint256 currDay = _currentDay();\n', '        require(beginDay <= currDay, "JACKPOT: Wrong argument for beginDay");\n', '        require(\n', '            endDay <= currDay && beginDay <= endDay,\n', '            "JACKPOT: Wrong argument for endDay"\n', '        );\n', '        require(globals.latestStakeId != 0, "JACKPOT: latestStakeId error.");\n', '        if (beginDay == endDay) return 0;\n', '        uint256 day = beginDay;\n', '        while (day < endDay && day < globals.dailyDataCount) {\n', '            uint256 dayPayout;\n', "            /* user's share of 90% of the day's dividends */\n", '            dayPayout = dayPayout.add(dailyData[day].dayDividends.mul(90).div(100).mul(stakeSharesParam).div(dailyData[day].dayStakeSharesTotal));\n', '            payout = payout.add(dayPayout);\n', '            day = day.add(1);\n', '        }\n', '        uint256 dayStakeSharesTotal =\n', '            dailyData[uint256(globals.dailyDataCount).sub(1)].dayStakeSharesTotal;\n', '        if (dayStakeSharesTotal == 0) dayStakeSharesTotal = stakeSharesParam;\n', '        //require(dayStakeSharesTotal != 0, "JACKPOT: dayStakeSharesTotal == 0");\n', '        while (day < endDay) {\n', '            uint256 dayPayout;\n', "            /* user's share of 90% of the day's dividends */\n", '            dayPayout = dayPayout.add(xfLobby[day].mul(90).div(100).mul(stakeSharesParam).div(dayStakeSharesTotal));\n', '            payout = payout.add(dayPayout);\n', '            day = day.add(1);\n', '        }\n', '        return payout;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate bonus Suns for a new stake, if any\n', '     * @param newStakedSuns Number of Suns to stake\n', '     * @param newStakedDays Number of days to stake\n', '     */\n', '    function _stakeStartBonusSuns(uint256 newStakedSuns, uint256 newStakedDays)\n', '        private\n', '        pure\n', '        returns (uint256 bonusSuns)\n', '    {\n', '        /*\n', '            LONGER PAYS BETTER:\n', '            If longer than 1 day stake is committed to, each extra day\n', '            gives bonus shares of approximately 0.0548%, which is approximately 20%\n', '            extra per year of increased stake length committed to, but capped to a\n', '            maximum of 200% extra.\n', '            extraDays       =  stakedDays - 1\n', '            longerBonus%    = (extraDays / 364) * 20%\n', '                            = (extraDays / 364) / 5\n', '                            =  extraDays / 1820\n', '                            =  extraDays / LPB\n', '            extraDays       =  longerBonus% * 1820\n', '            extraDaysMax    =  longerBonusMax% * 1820\n', '                            =  200% * 1820\n', '                            =  3640\n', '                            =  LPB_MAX_DAYS\n', '            BIGGER PAYS BETTER:\n', '            Bonus percentage scaled 0% to 10% for the first 7M JACKPOT of stake.\n', '            biggerBonus%    = (cappedSuns /  BPB_MAX_SUNS) * 10%\n', '                            = (cappedSuns /  BPB_MAX_SUNS) / 10\n', '                            =  cappedSuns / (BPB_MAX_SUNS * 10)\n', '                            =  cappedSuns /  BPB\n', '            COMBINED:\n', '            combinedBonus%  =            longerBonus%  +  biggerBonus%\n', '                                      cappedExtraDays     cappedSuns\n', '                            =         ---------------  +  ------------\n', '                                            LPB               BPB\n', '                                cappedExtraDays * BPB     cappedSuns * LPB\n', '                            =   ---------------------  +  ------------------\n', '                                      LPB * BPB               LPB * BPB\n', '                                cappedExtraDays * BPB  +  cappedSuns * LPB\n', '                            =   --------------------------------------------\n', '                                                  LPB  *  BPB\n', '            bonusSuns     = suns * combinedBonus%\n', '                            = suns * (cappedExtraDays * BPB  +  cappedSuns * LPB) / (LPB * BPB)\n', '        */\n', '        uint256 cappedExtraDays = 0;\n', '        /* Must be more than 1 day for Longer-Pays-Better */\n', '        if (newStakedDays > 1) {\n', '            cappedExtraDays = newStakedDays.sub(1) <= LPB_MAX_DAYS\n', '                ? newStakedDays.sub(1)\n', '                : LPB_MAX_DAYS;\n', '        }\n', '        uint256 cappedStakedSuns =\n', '            newStakedSuns <= BPB_MAX_SUNS ? newStakedSuns : BPB_MAX_SUNS;\n', '        bonusSuns = cappedExtraDays.mul(BPB).add(cappedStakedSuns.mul(LPB));\n', '        bonusSuns = newStakedSuns.mul(bonusSuns).div(LPB.mul(BPB));\n', '        return bonusSuns;\n', '    }\n', '\n', '    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\n', '        private\n', '        pure\n', '    {\n', '        g._stakeSharesTotal = g._stakeSharesTotal.sub(st._stakeShares);\n', '        st._unlockedDay = g._currentDay;\n', '    }\n', '\n', '    function _stakePerformance(\n', '        GlobalsCache memory g,\n', '        StakeCache memory st,\n', '        uint256 servedDays\n', '    )\n', '        private\n', '        view\n', '        returns (\n', '            uint256 stakeReturn,\n', '            uint256 payout,\n', '            uint256 dividends,\n', '            uint256 penalty,\n', '            uint256 cappedPenalty\n', '        )\n', '    {\n', '        if (servedDays < st._stakedDays) {\n', '            (payout, penalty) = _calcPayoutAndEarlyPenalty(\n', '                g,\n', '                st._lockedDay,\n', '                st._stakedDays,\n', '                servedDays,\n', '                st._stakeShares\n', '            );\n', '            stakeReturn = st._stakedSuns.add(payout);\n', '            dividends = calcPayoutDividendsReward(\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay.add(servedDays)\n', '            );\n', '        } else {\n', '            // servedDays must == stakedDays here\n', '            payout = calcPayoutRewards(\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay.add(servedDays)\n', '            );\n', '            dividends = calcPayoutDividendsReward(\n', '                st._stakeShares,\n', '                st._lockedDay,\n', '                st._lockedDay.add(servedDays)\n', '            );\n', '            stakeReturn = st._stakedSuns.add(payout);\n', '            penalty = _calcLatePenalty(\n', '                st._lockedDay,\n', '                st._stakedDays,\n', '                st._unlockedDay,\n', '                stakeReturn\n', '            );\n', '        }\n', '        if (penalty != 0) {\n', '            if (penalty > stakeReturn) {\n', '                /* Cannot have a negative stake return */\n', '                cappedPenalty = stakeReturn;\n', '                stakeReturn = 0;\n', '            } else {\n', '                /* Remove penalty from the stake return */\n', '                cappedPenalty = penalty;\n', '                stakeReturn = stakeReturn.sub(cappedPenalty);\n', '            }\n', '        }\n', '        return (stakeReturn, payout, dividends, penalty, cappedPenalty);\n', '    }\n', '\n', '    function getUnstakeParams(\n', '        address user,\n', '        uint256 stakeIndex,\n', '        uint40 stakeIdParam\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 stakeReturn,\n', '            uint256 payout,\n', '            uint256 dividends,\n', '            uint256 penalty,\n', '            uint256 cappedPenalty\n', '        )\n', '    {\n', '        GlobalsCache memory g;\n', '        GlobalsCache memory gSnapshot;\n', '        _globalsLoad(g, gSnapshot);\n', '        StakeStore[] storage stakeListRef = stakeLists[user];\n', '        /* require() is more informative than the default assert() */\n', '        require(stakeListRef.length != 0, "JACKPOT: Empty stake list");\n', '        require(\n', '            stakeIndex < stakeListRef.length,\n', '            "JACKPOT: stakeIndex invalid"\n', '        );\n', '        /* Get stake copy */\n', '        StakeCache memory st;\n', '        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\n', '        uint256 servedDays = 0;\n', '        bool prevUnlocked = (st._unlockedDay != 0);\n', '        //return (stakeReturn, payout, dividends, penalty, cappedPenalty);\n', '        if (g._currentDay >= st._lockedDay) {\n', '            if (prevUnlocked) {\n', '                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\n', '                servedDays = st._stakedDays;\n', '            } else {\n', '                _stakeUnlock(g, st);\n', '                servedDays = g._currentDay.sub(st._lockedDay);\n', '                if (servedDays > st._stakedDays) {\n', '                    servedDays = st._stakedDays;\n', '                }\n', '            }\n', '            (\n', '                stakeReturn,\n', '                payout,\n', '                dividends,\n', '                penalty,\n', '                cappedPenalty\n', '            ) = _stakePerformance(g, st, servedDays);\n', '        } else {\n', "            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\n", '            stakeReturn = st._stakedSuns;\n', '        }\n', '        return (stakeReturn, payout, dividends, penalty, cappedPenalty);\n', '    }\n', '\n', '    function _calcPayoutAndEarlyPenalty(\n', '        GlobalsCache memory g,\n', '        uint256 lockedDayParam,\n', '        uint256 stakedDaysParam,\n', '        uint256 servedDays,\n', '        uint256 stakeSharesParam\n', '    ) private view returns (uint256 payout, uint256 penalty) {\n', '        uint256 servedEndDay = lockedDayParam.add(servedDays);\n', '        /* 50% of stakedDays (rounded up) with a minimum applied */\n', '        uint256 penaltyDays = stakedDaysParam.add(1).div(2);\n', '        if (penaltyDays < EARLY_PENALTY_MIN_DAYS) {\n', '            penaltyDays = EARLY_PENALTY_MIN_DAYS;\n', '        }\n', '        if (servedDays == 0) {\n', '            /* Fill penalty days with the estimated average payout */\n', '            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam);\n', '            penalty = expected.mul(penaltyDays);\n', '            return (payout, penalty); // Actual payout was 0\n', '        }\n', '        if (penaltyDays < servedDays) {\n', '            /*\n', '                Simplified explanation of intervals where end-day is non-inclusive:\n', '                penalty:    [lockedDay  ...  penaltyEndDay)\n', '                delta:                      [penaltyEndDay  ...  servedEndDay)\n', '                payout:     [lockedDay  .......................  servedEndDay)\n', '            */\n', '            uint256 penaltyEndDay = lockedDayParam.add(penaltyDays);\n', '            penalty = calcPayoutRewards(\n', '                stakeSharesParam,\n', '                lockedDayParam,\n', '                penaltyEndDay\n', '            );\n', '            uint256 delta =\n', '                calcPayoutRewards(\n', '                    stakeSharesParam,\n', '                    penaltyEndDay,\n', '                    servedEndDay\n', '                );\n', '            payout = penalty.add(delta);\n', '            return (payout, penalty);\n', '        }\n', '        /* penaltyDays >= servedDays  */\n', '        payout = calcPayoutRewards(\n', '            stakeSharesParam,\n', '            lockedDayParam,\n', '            servedEndDay\n', '        );\n', '        if (penaltyDays == servedDays) {\n', '            penalty = payout;\n', '        } else {\n', '            /*\n', '                (penaltyDays > servedDays) means not enough days served, so fill the\n', '                penalty days with the average payout from only the days that were served.\n', '            */\n', '            penalty = payout.mul(penaltyDays).div(servedDays);\n', '        }\n', '        return (payout, penalty);\n', '    }\n', '\n', '    function _calcLatePenalty(\n', '        uint256 lockedDayParam,\n', '        uint256 stakedDaysParam,\n', '        uint256 unlockedDayParam,\n', '        uint256 rawStakeReturn\n', '    ) private pure returns (uint256) {\n', '        /* Allow grace time before penalties accrue */\n', '        uint256 maxUnlockedDay =\n', '            lockedDayParam.add(stakedDaysParam).add(LATE_PENALTY_GRACE_DAYS);\n', '        if (unlockedDayParam <= maxUnlockedDay) {\n', '            return 0;\n', '        }\n', '        /* Calculate penalty as a percentage of stake return based on time */\n', '        return rawStakeReturn.mul(unlockedDayParam.sub(maxUnlockedDay)).div(LATE_PENALTY_SCALE_DAYS);\n', '    }\n', '\n', '    function _shareRateUpdate(\n', '        GlobalsCache memory g,\n', '        StakeCache memory st,\n', '        uint256 stakeReturn\n', '    ) private {\n', '        if (stakeReturn > st._stakedSuns) {\n', '            /*\n', '                Calculate the new shareRate that would yield the same number of shares if\n', '                the user re-staked this stakeReturn, factoring in any bonuses they would\n', '                receive in stakeStart().\n', '            */\n', '            uint256 bonusSuns =\n', '                _stakeStartBonusSuns(stakeReturn, st._stakedDays);\n', '            uint256 newShareRate =\n', '                stakeReturn.add(bonusSuns).mul(SHARE_RATE_SCALE).div(st._stakeShares);\n', '            if (newShareRate > SHARE_RATE_MAX) {\n', '                /*\n', "                    Realistically this can't happen, but there are contrived theoretical\n", '                    scenarios that can lead to extreme values of newShareRate, so it is\n', '                    capped to prevent them anyway.\n', '                */\n', '                newShareRate = SHARE_RATE_MAX;\n', '            }\n', '            if (newShareRate > g._shareRate) {\n', '                g._shareRate = newShareRate;\n', '                emit ShareRateChange(\n', '                    st._stakeId,\n', '                    block.timestamp,\n', '                    newShareRate\n', '                );\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract TransformableToken is StakeableToken {\n', '    /**\n', '     * @dev PUBLIC FACING: Enter the auction lobby for the current round\n', '     * @param referrerAddr TRX address of referring user (optional; 0x0 for no referrer)\n', '     */\n', '    function xfLobbyEnter(address referrerAddr) external payable {\n', '        require(now >= LAUNCH_TIME, "JACKPOT: Too early");\n', '        uint256 enterDay = _currentDay();\n', '        require(enterDay < 365, "JACKPOT: Auction only first 365 days");\n', '        if (firstAuction == uint256(-1)) firstAuction = enterDay;\n', '        if (enterDay >= 1) endLoteryDay(enterDay.sub(1));\n', '        uint256 rawAmount = msg.value;\n', '        require(rawAmount != 0, "JACKPOT: Amount required");\n', '        address sender = _msgSender();\n', '        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][sender];\n', '        uint256 entryIndex = qRef.tailIndex++;\n', '        qRef.entries[entryIndex] = XfLobbyEntryStore(\n', '            uint96(rawAmount),\n', '            referrerAddr\n', '        );\n', '        xfLobby[enterDay] = xfLobby[enterDay].add(rawAmount);\n', '        uint256 dayNumberNow = whatDayIsItToday(enterDay);\n', '        //uint256 dayNumberNow = 1;\n', '        bool is_good = block.timestamp.sub(LAUNCH_TIME) % ROUND_TIME <= LOTERY_ENTRY_TIME;\n', '        /* if (is_good)\n', '        {\n', '            is_good = false;\n', '            uint256 len = stakeLists[sender].length;\n', '            for(uint256 i = 0; i < len && is_good == false; ++i)\n', '            {\n', '                uint256 _stakedDays = stakeLists[sender][i].stakedDays;\n', '                uint256 _lockedDay = stakeLists[sender][i].lockedDay;\n', '                if (_stakedDays >= 5 &&\n', '                    _lockedDay + _stakedDays >= enterDay)\n', '                    is_good = true;\n', '            }\n', '        } */\n', '        if (\n', '            is_good &&\n', '            dayNumberNow % 2 == 1 &&\n', '            loteryLobby[enterDay][sender].chanceCount == 0\n', '        ) {\n', '            loteryLobby[enterDay][sender].change = 0;\n', '            loteryLobby[enterDay][sender].chanceCount = 1;\n', '            dayChanceCount[enterDay] = dayChanceCount[enterDay].add(1);\n', '            loteryCount[enterDay].push(LoteryCount(sender, 1));\n', '\n', '            _updateLoteryDayWaitingForWinner(enterDay);\n', '\n', '            //loteryDayWaitingForWinner = enterDay;\n', '            emit loteryLobbyEnter(block.timestamp, enterDay, rawAmount);\n', '        } else if (is_good && dayNumberNow % 2 == 0) {\n', '            LoteryStore storage lb = loteryLobby[enterDay][sender];\n', '            uint256 oldChange = lb.change;\n', '            lb.change = oldChange.add(rawAmount) % 1 ether;\n', '            uint256 newEth = oldChange.add(rawAmount).div(1 ether);\n', '            if (newEth > 0) {\n', '                lb.chanceCount = lb.chanceCount.add(newEth);\n', '                dayChanceCount[enterDay] = dayChanceCount[enterDay].add(newEth);\n', '                loteryCount[enterDay].push(LoteryCount(sender, newEth));\n', '\n', '                _updateLoteryDayWaitingForWinner(enterDay);\n', '\n', '                //loteryDayWaitingForWinner = enterDay;\n', '                emit loteryLobbyEnter(block.timestamp, enterDay, rawAmount);\n', '            }\n', '        }\n', '        emit XfLobbyEnter(block.timestamp, enterDay, entryIndex, rawAmount);\n', '    }\n', '\n', '    function _updateLoteryDayWaitingForWinner(uint256 enterDay) private {\n', '        if (dayChanceCount[loteryDayWaitingForWinner] == 0) {\n', '            loteryDayWaitingForWinner = enterDay;\n', '            loteryDayWaitingForWinnerNew = enterDay;\n', '        } else if (loteryDayWaitingForWinnerNew < enterDay) {\n', '            loteryDayWaitingForWinner = loteryDayWaitingForWinnerNew;\n', '            loteryDayWaitingForWinnerNew = enterDay;\n', '        }\n', '    }\n', '\n', '    function whatDayIsItToday(uint256 day) public view returns (uint256) {\n', '        return dayNumberBegin.add(day) % 7;\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Leave the transform lobby after the round is complete\n', '     * @param enterDay Day number when the member entered\n', '     * @param count Number of queued-enters to exit (optional; 0 for all)\n', '     */\n', '    function xfLobbyExit(uint256 enterDay, uint256 count) external {\n', '        uint256 currDay = _currentDay();\n', '        require(enterDay < currDay, "JACKPOT: Round is not complete");\n', '        if (currDay >= 1) endLoteryDay(currDay.sub(1));\n', '        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\n', '        uint256 headIndex = qRef.headIndex;\n', '        uint256 endIndex;\n', '        if (count != 0) {\n', '            require(\n', '                count <= uint256(qRef.tailIndex).sub(headIndex),\n', '                "JACKPOT: count invalid"\n', '            );\n', '            endIndex = headIndex.add(count);\n', '        } else {\n', '            endIndex = qRef.tailIndex;\n', '            require(headIndex < endIndex, "JACKPOT: count invalid");\n', '        }\n', '        uint256 waasLobby = waasLobby(enterDay);\n', '        uint256 _xfLobby = xfLobby[enterDay];\n', '        uint256 totalXfAmount = 0;\n', '        do {\n', '            uint256 rawAmount = qRef.entries[headIndex].rawAmount;\n', '            address referrerAddr = qRef.entries[headIndex].referrerAddr;\n', '            //delete qRef.entries[headIndex];\n', '            uint256 xfAmount = waasLobby.mul(rawAmount).div(_xfLobby);\n', '            if (\n', '                (referrerAddr == address(0) || referrerAddr == msg.sender) &&\n', '                defaultReferrerAddr == address(0)\n', '            ) {\n', '                /* No referrer or Self-referred */\n', '                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\n', '            } else {\n', '                if (referrerAddr == address(0) || referrerAddr == msg.sender) {\n', '                    uint256 referrerBonusSuns = xfAmount.div(10);\n', '                    _emitXfLobbyExit(\n', '                        enterDay,\n', '                        headIndex,\n', '                        xfAmount,\n', '                        defaultReferrerAddr\n', '                    );\n', '                    _mint(defaultReferrerAddr, referrerBonusSuns);\n', '                    fromReferrs[defaultReferrerAddr] = fromReferrs[defaultReferrerAddr].add(referrerBonusSuns);\n', '                } else {\n', '                    /* Referral bonus of 10% of xfAmount to member */\n', '                    xfAmount = xfAmount.add(xfAmount.div(10));\n', '                    /* Then a cumulative referrer bonus of 10% to referrer */\n', '                    uint256 referrerBonusSuns = xfAmount.div(10);\n', '                    _emitXfLobbyExit(\n', '                        enterDay,\n', '                        headIndex,\n', '                        xfAmount,\n', '                        referrerAddr\n', '                    );\n', '                    _mint(referrerAddr, referrerBonusSuns);\n', '                    fromReferrs[referrerAddr] = fromReferrs[referrerAddr].add(referrerBonusSuns);\n', '                }\n', '            }\n', '            totalXfAmount = totalXfAmount.add(xfAmount);\n', '        } while (++headIndex < endIndex);\n', '        qRef.headIndex = uint40(headIndex);\n', '        if (totalXfAmount != 0) {\n', '            _mint(_msgSender(), totalXfAmount);\n', '            jackpotReceivedAuction[enterDay][_msgSender()] = jackpotReceivedAuction[enterDay][_msgSender()].add(totalXfAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: External helper to return multiple values of xfLobby[] with\n', '     * a single call\n', '     * @param beginDay First day of data range\n', '     * @param endDay Last day (non-inclusive) of data range\n', '     * @return Fixed array of values\n', '     */\n', '    /* function xfLobbyRange(uint256 beginDay, uint256 endDay)\n', '        external\n', '        view\n', '        returns (uint256[] memory list)\n', '    {\n', '        require(\n', '            beginDay < endDay && endDay <= _currentDay(),\n', '            "JACKPOT: invalid range"\n', '        );\n', '        list = new uint256[](endDay - beginDay);\n', '        uint256 src = beginDay;\n', '        uint256 dst = 0;\n', '        do {\n', '            list[dst++] = uint256(xfLobby[src++]);\n', '        } while (src < endDay);\n', '        return list;\n', '    } */\n', '    /**\n', '     * @dev PUBLIC FACING: Release 7.5% dev share from daily dividends\n', '     */\n', '    function xfFlush() external onlyOwner {\n', '        if (LAST_FLUSHED_DAY < firstAuction.add(2))\n', '            LAST_FLUSHED_DAY = firstAuction.add(2);\n', '        require(address(this).balance != 0, "JACKPOT: No value");\n', '        require(LAST_FLUSHED_DAY < _currentDay(), "JACKPOT: Invalid day");\n', '        while (LAST_FLUSHED_DAY < _currentDay()) {\n', '            flushAddr.transfer(xfLobby[LAST_FLUSHED_DAY].mul(75).div(1000));\n', '            LAST_FLUSHED_DAY = LAST_FLUSHED_DAY.add(1);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev PUBLIC FACING: Return a current lobby member queue entry.\n', '     * Only needed due to limitations of the standard ABI encoder.\n', '     * @param memberAddr TRX address of the lobby member\n', '     * @param enterDay asdsadsa\n', '     * @param entryIndex asdsadad\n', '     * @return 1: Raw amount that was entered with; 2: Referring TRX addr (optional; 0x0 for no referrer)\n', '     */\n', '    function xfLobbyEntry(\n', '        address memberAddr,\n', '        uint256 enterDay,\n', '        uint256 entryIndex\n', '    ) external view returns (uint256 rawAmount, address referrerAddr) {\n', '        XfLobbyEntryStore storage entry =\n', '            xfLobbyMembers[enterDay][memberAddr].entries[entryIndex];\n', '        require(entry.rawAmount != 0, "JACKPOT: Param invalid");\n', '        return (entry.rawAmount, entry.referrerAddr);\n', '    }\n', '\n', '    function waasLobby(uint256 enterDay)\n', '        public\n', '        pure\n', '        returns (uint256 _waasLobby)\n', '    {\n', '        /* 410958904109 = ~ 1500000 * SUNS_PER_JACKPOT / 365 */\n', '        if (enterDay >= 0 && enterDay <= 365) {\n', '            _waasLobby = CLAIM_STARTING_AMOUNT.sub(enterDay.mul(410958904109));\n', '        } else {\n', '            _waasLobby = CLAIM_LOWEST_AMOUNT;\n', '        }\n', '        return _waasLobby;\n', '    }\n', '\n', '    function _emitXfLobbyExit(\n', '        uint256 enterDay,\n', '        uint256 entryIndex,\n', '        uint256 xfAmount,\n', '        address referrerAddr\n', '    ) private {\n', '        emit XfLobbyExit(\n', '            block.timestamp,\n', '            enterDay,\n', '            entryIndex,\n', '            xfAmount,\n', '            referrerAddr\n', '        );\n', '    }\n', '}\n', '\n', 'contract Jackpot is TransformableToken {\n', '    constructor(\n', '        uint256 _LAUNCH_TIME,\n', '        uint256 _dayNumberBegin,\n', '        uint256 _ROUND_TIME,\n', '        uint256 _LOTERY_ENTRY_TIME\n', '    ) public {\n', '        require(_dayNumberBegin > 0 && _dayNumberBegin < 7);\n', '        LAUNCH_TIME = _LAUNCH_TIME;\n', '        dayNumberBegin = _dayNumberBegin;\n', '        ROUND_TIME = _ROUND_TIME;\n', '        LOTERY_ENTRY_TIME = _LOTERY_ENTRY_TIME;\n', '        /* Initialize global shareRate to 1 */\n', '        globals.shareRate = uint40(SHARE_RATE_SCALE);\n', '        uint256 currDay;\n', '        if (block.timestamp < _LAUNCH_TIME)\n', '            currDay = 0;\n', '        else\n', '            currDay = _currentDay();\n', '        lastEndedLoteryDay = currDay;\n', '        globals.dailyDataCount = uint16(currDay);\n', '        lastEndedLoteryDayWithWinner = currDay;\n', '        loteryDayWaitingForWinner = currDay;\n', '        loteryDayWaitingForWinnerNew = currDay;\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    function setDefaultReferrerAddr(address _defaultReferrerAddr)\n', '        external\n', '        onlyOwner\n', '    {\n', '        defaultReferrerAddr = _defaultReferrerAddr;\n', '    }\n', '\n', '    function setFlushAddr(address payable _flushAddr) external onlyOwner {\n', '        flushAddr = _flushAddr;\n', '    }\n', '\n', '    function getDayUnixTime(uint256 day) external view returns (uint256) {\n', '        return LAUNCH_TIME.add(day.mul(ROUND_TIME));\n', '    }\n', '\n', '    function getFirstAuction() external view returns (bool, uint256) {\n', '        if (firstAuction == uint256(-1)) return (false, 0);\n', '        else return (true, firstAuction);\n', '    }\n', '\n', '    bool private isFirstTwoDaysWithdrawed = false;\n', '\n', '    function ownerClaimFirstTwoDays() external onlyOwner onlyAfterNDays(2) {\n', '        require(\n', '            isFirstTwoDaysWithdrawed == false,\n', '            "JACKPOT: Already withdrawed"\n', '        );\n', '\n', '        flushAddr.transfer(xfLobby[firstAuction].add(xfLobby[firstAuction.add(1)]));\n', '\n', '        isFirstTwoDaysWithdrawed = true;\n', '    }\n', '}']