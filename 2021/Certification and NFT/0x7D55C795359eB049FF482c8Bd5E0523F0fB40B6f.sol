['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\n', '        uint c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) return 0;\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: contracts/protocol/IController.sol\n', '\n', 'interface IController {\n', '    function ADMIN_ROLE() external view returns (bytes32);\n', '\n', '    function HARVESTER_ROLE() external view returns (bytes32);\n', '\n', '    function admin() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '    function setAdmin(address _admin) external;\n', '\n', '    function setTreasury(address _treasury) external;\n', '\n', '    function grantRole(bytes32 _role, address _addr) external;\n', '\n', '    function revokeRole(bytes32 _role, address _addr) external;\n', '\n', '    /*\n', '    @notice Set strategy for vault\n', '    @param _vault Address of vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum undelying token current strategy must return. Prevents slippage\n', '    */\n', '    function setStrategy(\n', '        address _vault,\n', '        address _strategy,\n', '        uint _min\n', '    ) external;\n', '\n', '    // calls to strategy\n', '    /*\n', '    @notice Invest token in vault into strategy\n', '    @param _vault Address of vault\n', '    */\n', '    function invest(address _vault) external;\n', '\n', '    function harvest(address _strategy) external;\n', '\n', '    function skim(address _strategy) external;\n', '\n', '    /*\n', '    @notice Withdraw from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _amount Amount of underlying token to withdraw\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdraw(\n', '        address _strategy,\n', '        uint _amount,\n', '        uint _min\n', '    ) external;\n', '\n', '    /*\n', '    @notice Withdraw all from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdrawAll(address _strategy, uint _min) external;\n', '\n', '    /*\n', '    @notice Exit from strategy\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function exit(address _strategy, uint _min) external;\n', '}\n', '\n', '// File: contracts/protocol/IVault.sol\n', '\n', '/*\n', 'version 1.2.0\n', '\n', 'Changes\n', '- function deposit(uint) declared in IERC20Vault\n', '*/\n', '\n', 'interface IVault {\n', '    function admin() external view returns (address);\n', '\n', '    function controller() external view returns (address);\n', '\n', '    function timeLock() external view returns (address);\n', '\n', '    /*\n', '    @notice For EthVault, must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '    */\n', '    function token() external view returns (address);\n', '\n', '    function strategy() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (bool);\n', '\n', '    function reserveMin() external view returns (uint);\n', '\n', '    function withdrawFee() external view returns (uint);\n', '\n', '    function paused() external view returns (bool);\n', '\n', '    function whitelist(address _addr) external view returns (bool);\n', '\n', '    function setWhitelist(address _addr, bool _approve) external;\n', '\n', '    function setAdmin(address _admin) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function setTimeLock(address _timeLock) external;\n', '\n', '    function setPause(bool _paused) external;\n', '\n', '    function setReserveMin(uint _reserveMin) external;\n', '\n', '    function setWithdrawFee(uint _fee) external;\n', '\n', '    /*\n', '    @notice Returns the amount of asset (ETH or ERC20) in the vault\n', '    */\n', '    function balanceInVault() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns the estimate amount of asset in strategy\n', '    @dev Output may vary depending on price of liquidity provider token\n', '         where the underlying asset is invested\n', '    */\n', '    function balanceInStrategy() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns amount of tokens invested strategy\n', '    */\n', '    function totalDebtInStrategy() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns the total amount of asset in vault + total debt\n', '    */\n', '    function totalAssets() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns minimum amount of tokens that should be kept in vault for\n', '            cheap withdraw\n', '    @return Reserve amount\n', '    */\n', '    function minReserve() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns the amount of tokens available to be invested\n', '    */\n', '    function availableToInvest() external view returns (uint);\n', '\n', '    /*\n', '    @notice Approve strategy\n', '    @param _strategy Address of strategy\n', '    */\n', '    function approveStrategy(address _strategy) external;\n', '\n', '    /*\n', '    @notice Revoke strategy\n', '    @param _strategy Address of strategy\n', '    */\n', '    function revokeStrategy(address _strategy) external;\n', '\n', '    /*\n', '    @notice Set strategy\n', '    @param _min Minimum undelying asset current strategy must return. Prevents slippage\n', '    */\n', '    function setStrategy(address _strategy, uint _min) external;\n', '\n', '    /*\n', '    @notice Transfers asset in vault to strategy\n', '    */\n', '    function invest() external;\n', '\n', '    /*\n', '    @notice Calculate amount of asset that can be withdrawn\n', '    @param _shares Amount of shares\n', '    @return Amount of asset that can be withdrawn\n', '    */\n', '    function getExpectedReturn(uint _shares) external view returns (uint);\n', '\n', '    /*\n', '    @notice Withdraw asset\n', '    @param _shares Amount of shares to burn\n', '    @param _min Minimum amount of asset expected to return\n', '    */\n', '    function withdraw(uint _shares, uint _min) external;\n', '\n', '    /*\n', '    @notice Transfer asset in vault to admin\n', '    @param _token Address of asset to transfer\n', '    @dev _token must not be equal to vault asset\n', '    */\n', '    function sweep(address _token) external;\n', '}\n', '\n', '// File: contracts/protocol/IStrategy.sol\n', '\n', '/*\n', 'version 1.2.0\n', '\n', 'Changes\n', '\n', 'Changes listed here do not affect interaction with other contracts (Vault and Controller)\n', '- removed function assets(address _token) external view returns (bool);\n', '- remove function deposit(uint), declared in IStrategyERC20\n', '- add function setSlippage(uint _slippage);\n', '- add function setDelta(uint _delta);\n', '*/\n', '\n', 'interface IStrategy {\n', '    function admin() external view returns (address);\n', '\n', '    function controller() external view returns (address);\n', '\n', '    function vault() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns address of underlying asset (ETH or ERC20)\n', '    @dev Must return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\n', '    */\n', '    function underlying() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns total amount of underlying transferred from vault\n', '    */\n', '    function totalDebt() external view returns (uint);\n', '\n', '    function performanceFee() external view returns (uint);\n', '\n', '    function slippage() external view returns (uint);\n', '\n', '    /* \n', '    @notice Multiplier used to check total underlying <= total debt * delta / DELTA_MIN\n', '    */\n', '    function delta() external view returns (uint);\n', '\n', '    /*\n', '    @dev Flag to force exit in case normal exit fails\n', '    */\n', '    function forceExit() external view returns (bool);\n', '\n', '    function setAdmin(address _admin) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function setPerformanceFee(uint _fee) external;\n', '\n', '    function setSlippage(uint _slippage) external;\n', '\n', '    function setDelta(uint _delta) external;\n', '\n', '    function setForceExit(bool _forceExit) external;\n', '\n', '    /*\n', '    @notice Returns amount of underlying asset locked in this contract\n', '    @dev Output may vary depending on price of liquidity provider token\n', '         where the underlying asset is invested\n', '    */\n', '    function totalAssets() external view returns (uint);\n', '\n', '    /*\n', '    @notice Withdraw `_amount` underlying asset\n', '    @param amount Amount of underlying asset to withdraw\n', '    */\n', '    function withdraw(uint _amount) external;\n', '\n', '    /*\n', '    @notice Withdraw all underlying asset from strategy\n', '    */\n', '    function withdrawAll() external;\n', '\n', '    /*\n', '    @notice Sell any staking rewards for underlying and then deposit undelying\n', '    */\n', '    function harvest() external;\n', '\n', '    /*\n', '    @notice Increase total debt if profit > 0 and total assets <= max,\n', '            otherwise transfers profit to vault.\n', '    @dev Guard against manipulation of external price feed by checking that\n', '         total assets is below factor of total debt\n', '    */\n', '    function skim() external;\n', '\n', '    /*\n', '    @notice Exit from strategy\n', '    @dev Must transfer all underlying tokens back to vault\n', '    */\n', '    function exit() external;\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here to admin\n', '    @param _token Address of token to transfer\n', '    @dev _token must not be equal to underlying token\n', '    */\n', '    function sweep(address _token) external;\n', '}\n', '\n', '// File: contracts/AccessControl.sol\n', '\n', 'contract AccessControl {\n', '    event GrantRole(bytes32 indexed role, address indexed addr);\n', '    event RevokeRole(bytes32 indexed role, address indexed addr);\n', '\n', '    mapping(bytes32 => mapping(address => bool)) public hasRole;\n', '\n', '    modifier onlyAuthorized(bytes32 _role) {\n', '        require(hasRole[_role][msg.sender], "!authorized");\n', '        _;\n', '    }\n', '\n', '    function _grantRole(bytes32 _role, address _addr) internal {\n', '        require(_addr != address(0), "address = zero");\n', '\n', '        hasRole[_role][_addr] = true;\n', '\n', '        emit GrantRole(_role, _addr);\n', '    }\n', '\n', '    function _revokeRole(bytes32 _role, address _addr) internal {\n', '        require(_addr != address(0), "address = zero");\n', '\n', '        hasRole[_role][_addr] = false;\n', '\n', '        emit RevokeRole(_role, _addr);\n', '    }\n', '}\n', '\n', '// File: contracts/Controller.sol\n', '\n', '/*\n', 'version 1.2.0\n', '\n', 'Changes from Controller 1.1.0\n', '- Check vault and strategy are approved by admin.\n', '  Protect from arbitrary contract to be passed into invest, harvest, skim, etc...\n', '- compatible with ERC20 and ETH vault / strategy\n', '  (checks withdraw min for ERC20 and ETH strategies)\n', '- add setStrategyAndInvest\n', '*/\n', '\n', 'contract Controller is IController, AccessControl {\n', '    using SafeMath for uint;\n', '\n', '    event ApproveVault(address vault, bool approved);\n', '    event ApproveStrategy(address strategy, bool approved);\n', '\n', '    // WARNING: not address of ETH, used as placeholder\n', '    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    // keccak256(abi.encodePacked("ADMIN"));\n', '    bytes32 public constant override ADMIN_ROLE =\n', '        0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42;\n', '    // keccak256(abi.encodePacked("HARVESTER"));\n', '    bytes32 public constant override HARVESTER_ROLE =\n', '        0x27e3e4d29d60af3ae6456513164bb5db737d6fc8610aa36ad458736c9efb884c;\n', '\n', '    address public override admin;\n', '    // treasury must be able to receive ETH from ETH vault and strategy\n', '    address public override treasury;\n', '\n', '    // approved vaults\n', '    mapping(address => bool) public vaults;\n', '    // approved strategies\n', '    mapping(address => bool) public strategies;\n', '\n', '    constructor(address _treasury) public {\n', '        require(_treasury != address(0), "treasury = zero address");\n', '\n', '        admin = msg.sender;\n', '        treasury = _treasury;\n', '\n', '        _grantRole(ADMIN_ROLE, admin);\n', '        _grantRole(HARVESTER_ROLE, admin);\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "!admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyApprovedVault(address _vault) {\n', '        require(vaults[_vault], "!approved vault");\n', '        _;\n', '    }\n', '\n', '    modifier onlyApprovedStrategy(address _strategy) {\n', '        require(strategies[_strategy], "!approved strategy");\n', '        _;\n', '    }\n', '\n', '    modifier isCurrentStrategy(address _strategy) {\n', '        address vault = IStrategy(_strategy).vault();\n', '        /*\n', '        Check that _strategy is the current strategy used by the vault.\n', '        */\n', '        require(IVault(vault).strategy() == _strategy, "!strategy");\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _admin) external override onlyAdmin {\n', '        require(_admin != address(0), "admin = zero address");\n', '\n', '        _revokeRole(ADMIN_ROLE, admin);\n', '        _revokeRole(HARVESTER_ROLE, admin);\n', '\n', '        _grantRole(ADMIN_ROLE, _admin);\n', '        _grantRole(HARVESTER_ROLE, _admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    function setTreasury(address _treasury) external override onlyAdmin {\n', '        require(_treasury != address(0), "treasury = zero address");\n', '        treasury = _treasury;\n', '    }\n', '\n', '    function grantRole(bytes32 _role, address _addr) external override onlyAdmin {\n', '        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, "invalid role");\n', '        _grantRole(_role, _addr);\n', '    }\n', '\n', '    function revokeRole(bytes32 _role, address _addr) external override onlyAdmin {\n', '        require(_role == ADMIN_ROLE || _role == HARVESTER_ROLE, "invalid role");\n', '        _revokeRole(_role, _addr);\n', '    }\n', '\n', '    function approveVault(address _vault) external onlyAdmin {\n', '        require(!vaults[_vault], "already approved vault");\n', '        vaults[_vault] = true;\n', '        emit ApproveVault(_vault, true);\n', '    }\n', '\n', '    function revokeVault(address _vault) external onlyAdmin {\n', '        require(vaults[_vault], "!approved vault");\n', '        vaults[_vault] = false;\n', '        emit ApproveVault(_vault, false);\n', '    }\n', '\n', '    function approveStrategy(address _strategy) external onlyAdmin {\n', '        require(!strategies[_strategy], "already approved strategy");\n', '        strategies[_strategy] = true;\n', '        emit ApproveStrategy(_strategy, true);\n', '    }\n', '\n', '    function revokeStrategy(address _strategy) external onlyAdmin {\n', '        require(strategies[_strategy], "!approved strategy");\n', '        strategies[_strategy] = false;\n', '        emit ApproveStrategy(_strategy, false);\n', '    }\n', '\n', '    function setStrategy(\n', '        address _vault,\n', '        address _strategy,\n', '        uint _min\n', '    )\n', '        external\n', '        override\n', '        onlyAuthorized(ADMIN_ROLE)\n', '        onlyApprovedVault(_vault)\n', '        onlyApprovedStrategy(_strategy)\n', '    {\n', '        IVault(_vault).setStrategy(_strategy, _min);\n', '    }\n', '\n', '    function invest(address _vault)\n', '        external\n', '        override\n', '        onlyAuthorized(HARVESTER_ROLE)\n', '        onlyApprovedVault(_vault)\n', '    {\n', '        IVault(_vault).invest();\n', '    }\n', '\n', '    /*\n', '    @notice Set strategy for vault and invest\n', '    @param _vault Address of vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum undelying token current strategy must return. Prevents slippage\n', '    @dev Set strategy and invest in single transaction to avoid front running\n', '    */\n', '    function setStrategyAndInvest(\n', '        address _vault,\n', '        address _strategy,\n', '        uint _min\n', '    )\n', '        external\n', '        onlyAuthorized(ADMIN_ROLE)\n', '        onlyApprovedVault(_vault)\n', '        onlyApprovedStrategy(_strategy)\n', '    {\n', '        IVault(_vault).setStrategy(_strategy, _min);\n', '        IVault(_vault).invest();\n', '    }\n', '\n', '    function harvest(address _strategy)\n', '        external\n', '        override\n', '        onlyAuthorized(HARVESTER_ROLE)\n', '        onlyApprovedStrategy(_strategy)\n', '        isCurrentStrategy(_strategy)\n', '    {\n', '        IStrategy(_strategy).harvest();\n', '    }\n', '\n', '    function skim(address _strategy)\n', '        external\n', '        override\n', '        onlyAuthorized(HARVESTER_ROLE)\n', '        onlyApprovedStrategy(_strategy)\n', '        isCurrentStrategy(_strategy)\n', '    {\n', '        IStrategy(_strategy).skim();\n', '    }\n', '\n', '    modifier checkWithdraw(address _strategy, uint _min) {\n', '        address vault = IStrategy(_strategy).vault();\n', '        address token = IVault(vault).token();\n', '\n', '        uint balBefore;\n', '        uint balAfter;\n', '        if (token == ETH) {\n', '            balBefore = address(vault).balance;\n', '            _;\n', '            balAfter = address(vault).balance;\n', '        } else {\n', '            balBefore = IERC20(token).balanceOf(vault);\n', '            _;\n', '            balAfter = IERC20(token).balanceOf(vault);\n', '        }\n', '\n', '        require(balAfter.sub(balBefore) >= _min, "withdraw < min");\n', '    }\n', '\n', '    function withdraw(\n', '        address _strategy,\n', '        uint _amount,\n', '        uint _min\n', '    )\n', '        external\n', '        override\n', '        onlyAuthorized(HARVESTER_ROLE)\n', '        onlyApprovedStrategy(_strategy)\n', '        isCurrentStrategy(_strategy)\n', '        checkWithdraw(_strategy, _min)\n', '    {\n', '        IStrategy(_strategy).withdraw(_amount);\n', '    }\n', '\n', '    function withdrawAll(address _strategy, uint _min)\n', '        external\n', '        override\n', '        onlyAuthorized(HARVESTER_ROLE)\n', '        onlyApprovedStrategy(_strategy)\n', '        isCurrentStrategy(_strategy)\n', '        checkWithdraw(_strategy, _min)\n', '    {\n', '        IStrategy(_strategy).withdrawAll();\n', '    }\n', '\n', '    function exit(address _strategy, uint _min)\n', '        external\n', '        override\n', '        onlyAuthorized(ADMIN_ROLE)\n', '        onlyApprovedStrategy(_strategy)\n', '        isCurrentStrategy(_strategy)\n', '        checkWithdraw(_strategy, _min)\n', '    {\n', '        IStrategy(_strategy).exit();\n', '    }\n', '}']