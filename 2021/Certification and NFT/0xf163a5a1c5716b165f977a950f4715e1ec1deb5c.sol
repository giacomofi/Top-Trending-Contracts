['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', '\n', '// File: contracts/GSN/Context.sol\n', '// SPDX-License-Identifier: MIT\n', '// File: contracts/token/ERC20/IERC20.sol\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface UniswapRouterV2 {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '}\n', '\n', 'interface IController {\n', '    function vaults(address) external view returns (address);\n', '\n', '    function devfund() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '}\n', '\n', 'interface IUnitVaultParameters{\n', '\tfunction tokenDebtLimit(address asset) external view returns (uint);\n', '}\n', '\n', 'interface IUnitVault{\n', '\tfunction calculateFee(address asset, address user, uint amount) external view returns (uint);\n', '\tfunction getTotalDebt(address asset, address user) external view returns (uint);\n', '\tfunction debts(address asset, address user) external view returns (uint);\n', '\tfunction collaterals(address asset, address user) external view returns (uint);\n', '\tfunction tokenDebts(address asset) external view returns (uint);\n', '}\n', '\n', 'interface IUnitCDPManager {\n', '\tfunction exit(address asset, uint assetAmount, uint usdpAmount) external returns (uint);\n', '\tfunction join(address asset, uint assetAmount, uint usdpAmount) external;\n', '}\n', '\n', 'interface IMasterchef {\n', '    function notifyBuybackReward(uint256 _amount) external;\n', '}\n', '\n', 'interface ICurveFi_2 {\n', '    function get_virtual_price() external view returns (uint256);\n', '\t\n', '    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256);\n', '\t\n', '    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\n', ' \n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n', '}\n', '\n', 'interface ICurveGauge {\n', '    function deposit(uint256 _value) external;\n', '\n', '    function deposit(uint256 _value, address addr) external;\n', '\n', '    function balanceOf(address arg0) external view returns (uint256);\n', '\n', '    function withdraw(uint256 _value) external;\n', '\n', '    function withdraw(uint256 _value, bool claim_rewards) external;\n', '\n', '    function claim_rewards() external;\n', '\n', '    function claim_rewards(address addr) external;\n', '\n', '    function claimable_tokens(address addr) external returns (uint256);\n', '\n', '    function claimable_reward(address addr) external view returns (uint256);\n', '\n', '    function integrate_fraction(address arg0) external view returns (uint256);\n', '}\n', '\n', 'interface ICurveMintr {\n', '    function mint(address) external;\n', '\n', '    function minted(address arg0, address arg1) external view returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2SlidingOracle {\n', '    function current(\n', '        address tokenIn,\n', '        uint256 amountIn,\n', '        address tokenOut\n', '    ) external view returns (uint256);\n', '    function work() external;\n', '    function updatePair(address pair) external;\n', '    function observationLength(address pair) external view returns (uint);\n', '    function lastObservation(address pair) external view returns (uint timestamp, uint price0Cumulative, uint price1Cumulative);\n', '    function observations(address pair, uint256 idx) external view returns (uint timestamp, uint price0Cumulative, uint price1Cumulative);\n', '}\n', '\n', '// Strategy Contract Basics\n', 'abstract contract StrategyBase {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    // Perfomance fee 30% to buyback\n', '    uint256 public performanceFee = 30000;\n', '    uint256 public constant performanceMax = 100000;\n', '\n', '    // Withdrawal fee 0.2% to buyback\n', '    // - 0.14% to treasury\n', '    // - 0.06% to dev fund\n', '    uint256 public treasuryFee = 140;\n', '    uint256 public constant treasuryMax = 100000;\n', '\n', '    uint256 public devFundFee = 60;\n', '    uint256 public constant devFundMax = 100000;\n', '\n', '    // delay yield profit realization\n', '    uint256 public delayBlockRequired = 1000;\n', '    uint256 public lastHarvestBlock;\n', '    uint256 public lastHarvestInWant;\n', '\n', '    // buyback ready\n', '    bool public buybackEnabled = true;\n', '    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\n', '    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\n', '\n', '    //curve rewards\n', '    address public crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n', '\n', '    // Tokens\n', '    address public want;\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // buyback coins\n', '    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public constant zrxBuyback = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\n', '\n', '    // User accounts\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public timelock;\n', '\n', '    // Dex\n', '    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    //Sushi\n', '    address constant public sushiRouter = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n', '\n', '    constructor(\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    ) public {\n', '        require(_want != address(0));\n', '        require(_governance != address(0));\n', '        require(_strategist != address(0));\n', '        require(_controller != address(0));\n', '        require(_timelock != address(0));\n', '\n', '        want = _want;\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        controller = _controller;\n', '        timelock = _timelock;\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '\n', '    modifier onlyBenevolent {\n', '        require(\n', '            msg.sender == tx.origin ||\n', '                msg.sender == governance ||\n', '                msg.sender == strategist\n', '        );\n', '        _;\n', '    }\n', '\n', '    // **** Views **** //\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public virtual view returns (uint256);\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        uint256 delayReduction;\n', '        uint256 currentBlock = block.number;\n', '        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\n', '            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\n', '            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\n', '        }\n', '        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\n', '    }\n', '\n', '    function getName() external virtual pure returns (string memory);\n', '\n', '    // **** Setters **** //\n', '\n', '    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\n', '        require(msg.sender == governance, "!governance");\n', '        delayBlockRequired = _delayBlockRequired;\n', '    }\n', '\n', '    function setDevFundFee(uint256 _devFundFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        devFundFee = _devFundFee;\n', '    }\n', '\n', '    function setTreasuryFee(uint256 _treasuryFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        treasuryFee = _treasuryFee;\n', '    }\n', '\n', '    function setPerformanceFee(uint256 _performanceFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        performanceFee = _performanceFee;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setTimelock(address _timelock) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        timelock = _timelock;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setMmToken(address _mmToken) external {\n', '        require(msg.sender == governance, "!governance");\n', '        mmToken = _mmToken;\n', '    }\n', '\n', '    function setBuybackEnabled(bool _buybackEnabled) external {\n', '        require(msg.sender == governance, "!governance");\n', '        buybackEnabled = _buybackEnabled;\n', '    }\n', '\n', '    function setMasterChef(address _masterChef) external {\n', '        require(msg.sender == governance, "!governance");\n', '        masterChef = _masterChef;\n', '    }\n', '\n', '    // **** State mutations **** //\n', '    function deposit() public virtual;\n', '\n', '    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\t\t\t\t\n', '        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\n', '        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\n', '\n', '        if (buybackEnabled == true) {\n', '            // we want buyback mm using LP token\n', '            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\n', '            buybackAndNotify(_buybackPrinciple, _buybackAmount);\n', '        } else {\n', '            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\n', '            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\n', '        }\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\n', '    }\n', '\t\n', '    // buyback MM and notify MasterChef\n', '    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\n', '        if (buybackEnabled == true) {\n', '            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\n', '            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\n', '            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\n', '            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\n', '        }\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        _withdrawSome(balanceOfPool());\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\n', '\t\n', '    // convert LP to buyback principle token\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\n', '\n', '    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\n', '    function harvest() public virtual;\n', '\n', '    // **** Emergency functions ****\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        payable\n', '        returns (bytes memory response)\n', '    {\n', '        require(msg.sender == timelock, "!timelock");\n', '        require(_target != address(0), "!target");\n', '\n', '        // call contract in current context\n', '        assembly {\n', '            let succeeded := delegatecall(\n', '                sub(gas(), 5000),\n', '                _target,\n', '                add(_data, 0x20),\n', '                mload(_data),\n', '                0,\n', '                0\n', '            )\n', '            let size := returndatasize()\n', '\n', '            response := mload(0x40)\n', '            mstore(\n', '                0x40,\n', '                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\n', '            )\n', '            mstore(response, size)\n', '            returndatacopy(add(response, 0x20), 0, size)\n', '\n', '            switch iszero(succeeded)\n', '                case 1 {\n', '                    // throw if delegatecall failed\n', '                    revert(add(response, 0x20), size)\n', '                }\n', '        }\n', '    }\n', '\n', '    // **** Internal functions ****\n', '    function _swapUniswap(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(_to != address(0));\n', '\n', '        if (_amount > 0){\n', '\n', '            address[] memory path = (_to == usdcBuyback)? new address[](3) : new address[](2);\n', '            path[0] = _from;\n', '            if (_to == usdcBuyback){\n', '                path[1] = weth;\n', '                path[2] = _to;\n', '            }else{\n', '                path[1] = _to;\n', '            }\n', '\n', '            UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\n', '                _amount,\n', '                0,\n', '                path,\n', '                address(this),\n', '                now\n', '            );\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'interface AggregatorV3Interface {\n', '  \n', '  function latestRoundData() external view returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '  );\n', '\n', '}\n', '\n', '\n', 'abstract contract StrategyUnitBase is StrategyBase {\n', '    // Unit Protocol module: https://github.com/unitprotocol/core/blob/master/CONTRACTS.md\t\n', '    address public constant cdpMgr01 = 0x0e13ab042eC5AB9Fc6F43979406088B9028F66fA;\n', '    address public constant unitVault = 0xb1cFF81b9305166ff1EFc49A129ad2AfCd7BCf19;\t\t\n', '    address public constant unitVaultParameters = 0xB46F8CF42e504Efe8BEf895f848741daA55e9f1D;\t\n', '    address public constant debtToken = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\n', '    address public constant eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n', '\n', '    // sub-strategy related constants\n', '    address public collateral;\n', '    uint256 public collateralDecimal = 1e18;\n', '    address public unitOracle;\n', '    uint256 public collateralPriceDecimal = 1;\n', '    bool public collateralPriceEth = false;\n', '\t\n', '    // configurable minimum collateralization percent this strategy would hold for CDP\n', '    uint256 public minRatio = 200;\n', '    // collateralization percent buffer in CDP debt actions\n', '    uint256 public ratioBuff = 200;\n', '    uint256 public constant ratioBuffMax = 10000;\n', '\n', '    // Keeper bots, maintain ratio above minimum requirement\n', '    mapping(address => bool) public keepers;\n', '\n', '    constructor(\n', '        address _collateral,\n', '        uint256 _collateralDecimal,\n', '        address _collateralOracle,\n', '        uint256 _collateralPriceDecimal,\n', '        bool _collateralPriceEth,\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    )\n', '        public\n', '        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\n', '    {\n', "        require(_want == _collateral, '!mismatchWant');\n", '\t\t    \n', '        collateral = _collateral;   \n', '        collateralDecimal = _collateralDecimal;\n', '        unitOracle = _collateralOracle;\n', '        collateralPriceDecimal = _collateralPriceDecimal;\n', '        collateralPriceEth = _collateralPriceEth;\t\t\n', '\t\t\n', '        IERC20(collateral).safeApprove(unitVault, uint256(-1));\n', '        IERC20(debtToken).safeApprove(unitVault, uint256(-1));\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '\n', '    modifier onlyKeepers {\n', '        require(keepers[msg.sender] || msg.sender == address(this) || msg.sender == strategist || msg.sender == governance, "!keepers");\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyGovernanceAndStrategist {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance");\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyCDPInUse {\n', '        uint256 collateralAmt = getCollateralBalance();\n', "        require(collateralAmt > 0, '!zeroCollateral');\n", '\t\t\n', '        uint256 debtAmt = getDebtBalance();\n', "        require(debtAmt > 0, '!zeroDebt');\t\t\n", '        _;\n', '    }\n', '\t\n', '    function getCollateralBalance() public view returns (uint256) {\n', '        return IUnitVault(unitVault).collaterals(collateral, address(this));\n', '    }\n', '\t\n', '    function getDebtBalance() public view returns (uint256) {\n', '        return IUnitVault(unitVault).getTotalDebt(collateral, address(this));\n', '    }\t\n', '\t\n', '    function getDebtWithoutFee() public view returns (uint256) {\n', '        return IUnitVault(unitVault).debts(collateral, address(this));\n', '    }\t\n', '\n', '    // **** Getters ****\n', '\t\n', '    function debtLimit() public view returns (uint256){\n', '        return IUnitVaultParameters(unitVaultParameters).tokenDebtLimit(collateral);\n', '    }\n', '\t\n', '    function debtUsed() public view returns (uint256){\n', '        return IUnitVault(unitVault).tokenDebts(collateral);\n', '    }\n', '\t\n', '    function balanceOfPool() public override view returns (uint256){\n', '        return getCollateralBalance();\n', '    }\n', '\n', '    function collateralValue(uint256 collateralAmt) public view returns (uint256){\n', '        uint256 collateralPrice = getLatestCollateralPrice();\n', '        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal).div(collateralPriceDecimal);// debtToken in 1e18 decimal\n', '    }\n', '\n', '    function currentRatio() public onlyCDPInUse view returns (uint256) {\t    \n', '        uint256 collateralAmt = collateralValue(getCollateralBalance()).mul(100);\n', '        uint256 debtAmt = getDebtBalance();\t\t\n', '        return collateralAmt.div(debtAmt);\n', '    } \n', '    \n', '    // if borrow is true (for lockAndDraw): return (maxDebt - currentDebt) if positive value, otherwise return 0\n', '    // if borrow is false (for redeemAndFree): return (currentDebt - maxDebt) if positive value, otherwise return 0\n', '    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\n', '        uint256 maxDebt = collateralValue(collateralAmt).mul(ratioBuffMax).div(_getBufferedMinRatio(ratioBuffMax));\n', '\t\t\n', '        uint256 debtAmt = getDebtBalance();\n', '\t\t\n', '        uint256 debt = 0;\n', '        \n', '        if (borrow && maxDebt >= debtAmt){\n', '            debt = maxDebt.sub(debtAmt);\n', '        } else if (!borrow && debtAmt >= maxDebt){\n', '            debt = debtAmt.sub(maxDebt);\n', '        }\n', '        \n', '        return (debt > 0)? debt : 0;\n', '    }\n', '\t\n', '    function _getBufferedMinRatio(uint256 _multiplier) internal view returns (uint256){\n', '        return minRatio.mul(_multiplier).mul(ratioBuffMax.add(ratioBuff)).div(ratioBuffMax).div(100);\n', '    }\n', '\n', '    function borrowableDebt() public view returns (uint256) {\n', '        uint256 collateralAmt = getCollateralBalance();\n', '        return calculateDebtFor(collateralAmt, true);\n', '    }\n', '\n', '    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\n', '        uint256 collateralAmt = getCollateralBalance().sub(_redeemCollateralAmt);\n', '        return calculateDebtFor(collateralAmt, false);\n', '    }\n', '\n', '    // **** sub-strategy implementation ****\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\n', '\t\n', '    function _depositUSDP(uint256 _usdpAmt) internal virtual;\n', '\t\n', '    function _withdrawUSDP(uint256 _usdpAmt) internal virtual;\n', '\t\n', '    // **** Oracle (using chainlink) ****\n', '\t\n', '    function getLatestCollateralPrice() public view returns (uint256){\n', "        require(unitOracle != address(0), '!_collateralOracle');\t\n", '\t\t\n', '        (,int price,,,) = AggregatorV3Interface(unitOracle).latestRoundData();\n', '\t\t\n', '        if (price > 0){\t\t\n', '            int ethPrice = 1;\n', '            if (collateralPriceEth){\n', '               (,ethPrice,,,) = AggregatorV3Interface(eth_usd).latestRoundData();// eth price from chainlink in 1e8 decimal\t\t\n', '            }\n', '            return uint256(price).mul(collateralPriceDecimal).mul(uint256(ethPrice)).div(1e8).div(collateralPriceEth? 1e18 : 1);\n', '        } else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    // **** Setters ****\n', '\t\n', '    function setMinRatio(uint256 _minRatio) external onlyGovernanceAndStrategist {\n', '        minRatio = _minRatio;\n', '    }\t\n', '\t\n', '    function setRatioBuff(uint256 _ratioBuff) external onlyGovernanceAndStrategist {\n', '        ratioBuff = _ratioBuff;\n', '    }\t\n', '\n', '    function setKeeper(address _keeper, bool _enabled) external onlyGovernanceAndStrategist {\n', '        keepers[_keeper] = _enabled;\n', '    }\n', '\t\n', '    // **** Unit Protocol CDP actions ****\n', '\t\n', '    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _usdpAmt) internal {   \n', "        require(_usdpAmt.add(debtUsed()) < debtLimit(), '!exceedLimit');\n", '        IUnitCDPManager(cdpMgr01).join(collateral, _collateralAmt, _usdpAmt);\t\t\n', '    } \n', '\t\n', '    function repayAndRedeemCollateral(uint256 _collateralAmt, uint _usdpAmt) internal { \n', '        IUnitCDPManager(cdpMgr01).exit(collateral, _collateralAmt, _usdpAmt);     \t\t\n', '    } \n', '\n', '    // **** State Mutation functions ****\n', '\t\n', '    function keepMinRatio() external onlyCDPInUse onlyKeepers {\t\t\n', '        uint256 requiredPaidback = requiredPaidDebt(0);\n', '        if (requiredPaidback > 0){\n', '            _withdrawUSDP(requiredPaidback);\n', '\t\t\t\n', '            uint256 _actualPaidDebt = IERC20(debtToken).balanceOf(address(this));\n', '            uint256 _fee = getDebtBalance().sub(getDebtWithoutFee());\n', '\t\t\t\n', "            require(_actualPaidDebt > _fee, '!notEnoughForFee');\t\n", '            _actualPaidDebt = _actualPaidDebt.sub(_fee);// unit protocol will charge fee first\n', '            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt);\t\t\t\n', '\t\t\t\n', "            require(IERC20(debtToken).balanceOf(address(this)) >= _actualPaidDebt.add(_fee), '!notEnoughRepayment');\n", '            repayAndRedeemCollateral(0, _actualPaidDebt);\n', '        }\n', '    }\n', '\t\n', '    function deposit() public override {\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\t\n', '            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\n', '            if (_newDebt > 0){\n', '                addCollateralAndBorrow(_want, _newDebt);\n', '                uint256 wad = IERC20(debtToken).balanceOf(address(this));\n', '                _depositUSDP(_newDebt > wad? wad : _newDebt);\n', '            }\n', '        }\n', '    }\n', '\t\n', '    // to avoid repay all debt\n', '    function _capMaxDebtPaid(uint256 _actualPaidDebt) internal view returns(uint256){\n', '        uint256 _maxDebtToRepay = getDebtWithoutFee().sub(ratioBuffMax);\n', '        return _actualPaidDebt >= _maxDebtToRepay? _maxDebtToRepay : _actualPaidDebt;\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\n', '        if (_amount == 0){\n', '            return _amount;\n', '        }\n', '        \n', '        uint256 requiredPaidback = requiredPaidDebt(_amount);\t\t\n', '        if (requiredPaidback > 0){\n', '            _withdrawUSDP(requiredPaidback);\n', '        }\n', '\t\t\n', '        bool _fullWithdraw = _amount == balanceOfPool();\n', '        uint256 _wantBefore = IERC20(want).balanceOf(address(this));\n', '        if (!_fullWithdraw){\n', '            uint256 _actualPaidDebt = IERC20(debtToken).balanceOf(address(this));\n', '            uint256 _fee = getDebtBalance().sub(getDebtWithoutFee());\n', '\t\t\n', "            require(_actualPaidDebt > _fee, '!notEnoughForFee');\t\t\t\t\n", '            _actualPaidDebt = _actualPaidDebt.sub(_fee); // unit protocol will charge fee first\n', '            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt);\n', '\t\t\t\n', "            require(IERC20(debtToken).balanceOf(address(this)) >= _actualPaidDebt.add(_fee), '!notEnoughRepayment');\n", '            repayAndRedeemCollateral(_amount, _actualPaidDebt);\t\t\t\n', '        }else{\n', "            require(IERC20(debtToken).balanceOf(address(this)) >= getDebtBalance(), '!notEnoughFullRepayment');\n", '            repayAndRedeemCollateral(_amount, getDebtBalance());\n', "            require(getDebtBalance() == 0, '!leftDebt');\n", "            require(getCollateralBalance() == 0, '!leftCollateral');\n", '        }\n', '\t\t\n', '        uint256 _wantAfter = IERC20(want).balanceOf(address(this));\t\t\n', '        return _wantAfter.sub(_wantBefore);\n', '    }\n', '    \n', '}\n', '\n', 'contract StrategyUnitRenbtcV1 is StrategyUnitBase {\n', '    // strategy specific\n', '    address public constant renbtc_collateral = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n', '    uint256 public constant renbtc_collateral_decimal = 1e8;\n', '    address public constant renbtc_oracle = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\n', '    uint256 public constant renbtc_price_decimal = 1;\n', '    bool public constant renbtc_price_eth = false;\n', '\t\n', '    // farming in usdp3crv \n', '    address public constant usdp3crv = 0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6;\n', '    address public constant usdp = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\n', '    address public constant usdp_gauge = 0x055be5DDB7A925BfEF3417FC157f53CA77cA7222;\n', '    address public constant curvePool = 0x42d7025938bEc20B69cBae5A77421082407f053A;\n', '    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n', '    \n', '    // slippage protection for one-sided ape in/out\n', '    uint256 public slippageProtectionIn = 50; // max 0.5%\n', '    uint256 public slippageProtectionOut = 50; // max 0.5%\n', '    uint256 public constant DENOMINATOR = 10000;\n', '\n', '    constructor(address _governance, address _strategist, address _controller, address _timelock) \n', '        public StrategyUnitBase(\n', '            renbtc_collateral,\n', '            renbtc_collateral_decimal,\n', '            renbtc_oracle,\n', '            renbtc_price_decimal,\n', '            renbtc_price_eth,\n', '            renbtc_collateral,\n', '            _governance,\n', '            _strategist,\n', '            _controller,\n', '            _timelock\n', '        )\n', '    {\n', '        // approve for Curve pool and DEX\n', '        IERC20(usdp).safeApprove(curvePool, uint256(-1));\n', '        IERC20(usdp3crv).safeApprove(curvePool, uint256(-1));\n', '        \n', '        IERC20(usdp3crv).safeApprove(usdp_gauge, uint256(-1));\n', '        \n', '        IERC20(crv).safeApprove(univ2Router2, uint256(-1));\n', '        IERC20(weth).safeApprove(univ2Router2, uint256(-1));\n', '        IERC20(renbtc_collateral).safeApprove(univ2Router2, uint256(-1));\n', '        IERC20(usdcBuyback).safeApprove(univ2Router2, uint256(-1));\n', '    }\n', '\t\n', '    // **** Setters ****\t\n', '\t\n', '    function setSlippageProtectionIn(uint256 _slippage) external onlyGovernanceAndStrategist{\n', '        slippageProtectionIn = _slippage;\n', '    }\n', '\t\n', '    function setSlippageProtectionOut(uint256 _slippage) external onlyGovernanceAndStrategist{\n', '        slippageProtectionOut = _slippage;\n', '    }\n', '\t\n', '    // **** State Mutation functions ****\t\n', '\n', '    function getHarvestable() external returns (uint256) {\n', '        return ICurveGauge(usdp_gauge).claimable_tokens(address(this));\n', '    }\n', '\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\n', '        _swapUniswap(renbtc_collateral, usdcBuyback, _lpAmount);\n', '        return (usdcBuyback, IERC20(usdcBuyback).balanceOf(address(this)));\n', '    }\t\n', '\t\n', '    function harvest() public override onlyBenevolent {\n', '\n', '        // Collects crv tokens\n', '        ICurveMintr(mintr).mint(usdp_gauge);\n', '        uint256 _crv = IERC20(crv).balanceOf(address(this));\n', '        if (_crv > 0) {\n', '            _swapUniswap(crv, weth, _crv);\n', '        }\n', '\n', '        // buyback $MM\n', '        uint256 _to = IERC20(weth).balanceOf(address(this));\n', '        uint256 _buybackAmount = _to.mul(performanceFee).div(performanceMax);\t\t\n', '        if (buybackEnabled == true && _buybackAmount > 0) {\n', '            buybackAndNotify(weth, _buybackAmount);\n', '        }\n', '\t\t\n', '        // re-invest to compounding profit\n', '        _swapUniswap(weth, want, IERC20(weth).balanceOf(address(this)));\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            lastHarvestBlock = block.number;\n', '            lastHarvestInWant = _want;\n', '            deposit();\n', '        }\n', '    }\n', '\t\n', '    function _depositUSDP(uint256 _usdpAmt) internal override{\t\n', '        if (_usdpAmt > 0 && checkSlip(_usdpAmt)) {\n', '            uint256[2] memory amounts = [_usdpAmt, 0]; \n', '            ICurveFi_2(curvePool).add_liquidity(amounts, 0);\n', '        }\n', '\t\t\n', '        uint256 _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\n', '        if (_usdp3crv > 0){\n', '            ICurveGauge(usdp_gauge).deposit(_usdp3crv);\t\t\n', '        }\n', '    }\n', '\t\n', '    function _withdrawUSDP(uint256 _usdpAmt) internal override {\t\n', '        uint256 _requiredUsdp3crv = estimateRequiredUsdp3crv(_usdpAmt);\n', '        _requiredUsdp3crv = _requiredUsdp3crv.mul(DENOMINATOR.add(slippageProtectionOut)).div(DENOMINATOR);// try to remove bit more\n', '\t\t\n', '        uint256 _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\n', '        uint256 _withdrawFromGauge = _usdp3crv < _requiredUsdp3crv? _requiredUsdp3crv.sub(_usdp3crv) : 0;\n', '\t\t\t\n', '        if (_withdrawFromGauge > 0){\n', '            uint256 maxInGauge = ICurveGauge(usdp_gauge).balanceOf(address(this));\n', '            ICurveGauge(usdp_gauge).withdraw(maxInGauge < _withdrawFromGauge? maxInGauge : _withdrawFromGauge);\t\t\t\n', '        }\n', '\t\t    \t\n', '        _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\n', '        if (_usdp3crv > 0){\n', '            _requiredUsdp3crv = _requiredUsdp3crv > _usdp3crv?  _usdp3crv : _requiredUsdp3crv;\n', '            uint256 maxSlippage = _requiredUsdp3crv.mul(DENOMINATOR.sub(slippageProtectionOut)).div(DENOMINATOR);\n', '            ICurveFi_2(curvePool).remove_liquidity_one_coin(_requiredUsdp3crv, 0, maxSlippage);\t\t\t\n', '        }\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\n', '        require(usdp3crv != address(_asset), "!usdp3crv");\n', '        require(usdp != address(_asset), "!usdp");\n', '        return _withdrawNonWantAsset(_asset);\n', '    }\n', '\n', '    // **** Views ****\n', '\n', '    function virtualPriceToWant() public view returns (uint256) {\n', '        return ICurveFi_2(curvePool).get_virtual_price();\n', '    }\n', '\t\n', '    function estimateRequiredUsdp3crv(uint256 _usdpAmt) public view returns (uint256) {\n', '        uint256[2] memory amounts = [_usdpAmt, 0]; \n', '        return ICurveFi_2(curvePool).calc_token_amount(amounts, false);\n', '    }\n', '\t\n', '    function checkSlip(uint256 _usdpAmt) public view returns (bool){\n', '        uint256 expectedOut = _usdpAmt.mul(1e18).div(virtualPriceToWant());\n', '        uint256 maxSlip = expectedOut.mul(DENOMINATOR.sub(slippageProtectionIn)).div(DENOMINATOR);\n', '\n', '        uint256[2] memory amounts = [_usdpAmt, 0]; \n', '        return ICurveFi_2(curvePool).calc_token_amount(amounts, true) >= maxSlip;\n', '    }\n', '\n', '    function getName() external override pure returns (string memory) {\n', '        return "StrategyUnitRenbtcV1";\n', '    }\n', '}']