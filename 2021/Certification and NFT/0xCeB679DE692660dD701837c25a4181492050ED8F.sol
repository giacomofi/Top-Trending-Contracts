['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IVORConsumerBase {\n', '    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external;\n', '}\n', '\n', 'interface BlockHashStoreInterface {\n', '    function getBlockhash(uint256 number) external view returns (bytes32);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20_Ex {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title VOR\n', ' */\n', 'contract VOR {\n', '    // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\n', '    uint256 private constant GROUP_ORDER = // Number of points in Secp256k1\n', '        // solium-disable-next-line indentation\n', '        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n', '    // Prime characteristic of the galois field over which Secp256k1 is defined\n', '    uint256 private constant FIELD_SIZE =\n', '        // solium-disable-next-line indentation\n', '        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n', '    uint256 private constant WORD_LENGTH_BYTES = 0x20;\n', '\n', '    // (base^exponent) % FIELD_SIZE\n', '    // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n', '    function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\n', '        uint256 callResult;\n', '        uint256[6] memory bigModExpContractInputs;\n', '        bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\n', '        bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\n', '        bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\n', '        bigModExpContractInputs[3] = base;\n', '        bigModExpContractInputs[4] = exponent;\n', '        bigModExpContractInputs[5] = FIELD_SIZE;\n', '        uint256[1] memory output;\n', '        assembly {\n', '            // solhint-disable-line no-inline-assembly\n', '            callResult := staticcall(\n', '                not(0), // Gas cost: no limit\n', '                0x05, // Bigmodexp contract address\n', '                bigModExpContractInputs,\n', '                0xc0, // Length of input segment: 6*0x20-bytes\n', '                output,\n', '                0x20 // Length of output segment\n', '            )\n', '        }\n', '        if (callResult == 0) {\n', '            revert("bigModExp failure!");\n', '        }\n', '        return output[0];\n', '    }\n', '\n', '    // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\n', '    // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\n', '    uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\n', '\n', '    // Computes a s.t. a^2 = x in the field. Assumes a exists\n', '    function squareRoot(uint256 x) internal view returns (uint256) {\n', '        return bigModExp(x, SQRT_POWER);\n', '    }\n', '\n', '    // The value of y^2 given that (x,y) is on secp256k1.\n', '    function ySquared(uint256 x) internal pure returns (uint256) {\n', '        // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\n', '        uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\n', '        return addmod(xCubed, 7, FIELD_SIZE);\n', '    }\n', '\n', '    // True iff p is on secp256k1\n', '    function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\n', '        return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\n', '    }\n', '\n', '    // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\n', '    function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\n', '        x_ = uint256(keccak256(b));\n', '        // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\n', '        // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\n', '        // string_to_point in the IETF draft\n', '        while (x_ >= FIELD_SIZE) {\n', '            x_ = uint256(keccak256(abi.encodePacked(x_)));\n', '        }\n', '    }\n', '\n', '    // Hash b to a random point which hopefully lies on secp256k1.\n', '    function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\n', '        p[0] = fieldHash(b);\n', '        p[1] = squareRoot(ySquared(p[0]));\n', '        if (p[1] % 2 == 1) {\n', '            p[1] = FIELD_SIZE - p[1];\n', '        }\n', '    }\n', '\n', '    // Domain-separation tag for initial hash in hashToCurve.\n', '    uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\n', '\n', '    // Cryptographic hash function onto the curve.\n', '    //\n', '    // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\n', '    // DESIGN NOTES above for slight differences.)\n', '    //\n', '    // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\n', '    // "Construction of Rational Points on Elliptic Curves over Finite Fields"\n', '    // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\n', '    // and suggested by\n', '    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\n', "    // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\n", '    //\n', '    // This would greatly simplify the analysis in "OTHER SECURITY CONSIDERATIONS"\n', '    // https://www.pivotaltracker.com/story/show/171120900\n', '    function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\n', '        rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\n', '        while (!isOnCurve(rv)) {\n', '            rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\n', '        }\n', '    }\n', '\n', '    /** *********************************************************************\n', '     * @notice Check that product==scalar*multiplicand\n', '     *\n', "     * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n", '     *\n', '     * @param multiplicand: secp256k1 point\n', '     * @param scalar: non-zero GF(GROUP_ORDER) scalar\n', '     * @param product: secp256k1 expected to be multiplier * multiplicand\n', '     * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\n', '     */\n', '    function ecmulVerify(\n', '        uint256[2] memory multiplicand,\n', '        uint256 scalar,\n', '        uint256[2] memory product\n', '    ) internal pure returns (bool verifies) {\n', '        require(scalar != 0, "scalar must not be 0"); // Rules out an ecrecover failure case\n', '        uint256 x = multiplicand[0]; // x ordinate of multiplicand\n', '        uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\n', '        // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n', '        // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\n', '        // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\n', '        // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\n', '        bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\n', '        address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\n', '        // Explicit conversion to address takes bottom 160 bits\n', '        address expected = address(uint256(keccak256(abi.encodePacked(product))));\n', '        return (actual == expected);\n', '    }\n', '\n', '    // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\n', '    function projectiveSub(\n', '        uint256 x1,\n', '        uint256 z1,\n', '        uint256 x2,\n', '        uint256 z2\n', '    ) internal pure returns (uint256 x3, uint256 z3) {\n', '        uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\n', '        uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\n', '        (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n', '    }\n', '\n', '    // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\n', '    function projectiveMul(\n', '        uint256 x1,\n', '        uint256 z1,\n', '        uint256 x2,\n', '        uint256 z2\n', '    ) internal pure returns (uint256 x3, uint256 z3) {\n', '        (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n', '    }\n', '\n', '    /** **************************************************************************\n', '      @notice Computes elliptic-curve sum, in projective co-ordinates\n', '\n', '      @dev Using projective coordinates avoids costly divisions\n', '\n', '      @dev To use this with p and q in affine coordinates, call\n', '      @dev projectiveECAdd(px, py, qx, qy). This will return\n', '      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\n', '      @dev secp256k1 group.\n', '\n', '      @dev This can be used to calculate the z which is the inverse to zInv\n', '      @dev in isValidVOROutput. But consider using a faster\n', '\n', '      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\n', '           coordinates of secp256k1 points. That is safe in this contract,\n', '           because this method is only used by linearCombination, which checks\n', '           points are on the curve via ecrecover.\n', '      **************************************************************************\n', '      @param px The first affine coordinate of the first summand\n', '      @param py The second affine coordinate of the first summand\n', '      @param qx The first affine coordinate of the second summand\n', '      @param qy The second affine coordinate of the second summand\n', '\n', '      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\n', '      **************************************************************************\n', '      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\n', '      on secp256k1, in P²(𝔽ₙ)\n', '      @return sx \n', '      @return sy\n', '      @return sz\n', '  */\n', '    function projectiveECAdd(\n', '        uint256 px,\n', '        uint256 py,\n', '        uint256 qx,\n', '        uint256 qy\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 sx, uint256 sy, uint256 sz)\n', '    {\n', '        // See "Group law for E/K : y^2 = x^3 + ax + b", in section 3.1.2, p. 80,\n', '        // "Guide to Elliptic Curve Cryptography" by Hankerson, Menezes and Vanstone\n', '        // We take the equations there for (sx,sy), and homogenize them to\n', '        // projective coordinates. That way, no inverses are required, here, and we\n', '        // only need the one inverse in affineECAdd.\n', '\n', '        // We only need the "point addition" equations from Hankerson et al. Can\n', '        // skip the "point doubling" equations because p1 == p2 is cryptographically\n', "        // impossible, and require'd not to be the case in linearCombination.\n", '\n', '        // Add extra "projective coordinate" to the two points\n', '        (uint256 z1, uint256 z2) = (1, 1);\n', '\n', '        // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\n', '        uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\n', '        uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\n', '\n', '        uint256 dx; // Accumulates denominator from sx calculation\n', '        // sx=((qy-py)/(qx-px))^2-px-qx\n', '        (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\n', '        (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\n', '        (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\n', '\n', '        uint256 dy; // Accumulates denominator from sy calculation\n', '        // sy=((qy-py)/(qx-px))(px-sx)-py\n', '        (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\n', '        (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\n', '        (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\n', '\n', '        if (dx != dy) {\n', '            // Cross-multiply to put everything over a common denominator\n', '            sx = mulmod(sx, dy, FIELD_SIZE);\n', '            sy = mulmod(sy, dx, FIELD_SIZE);\n', '            sz = mulmod(dx, dy, FIELD_SIZE);\n', '        } else {\n', '            // Already over a common denominator, use that for z ordinate\n', '            sz = dx;\n', '        }\n', '    }\n', '\n', '    // p1+p2, as affine points on secp256k1.\n', '    //\n', '    // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\n', '    // It is computed off-chain to save gas.\n', '    //\n', "    // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\n", '    // point doubling.\n', '    function affineECAdd(\n', '        uint256[2] memory p1,\n', '        uint256[2] memory p2,\n', '        uint256 invZ\n', '    ) internal pure returns (uint256[2] memory) {\n', '        uint256 x;\n', '        uint256 y;\n', '        uint256 z;\n', '        (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\n', '        require(mulmod(z, invZ, FIELD_SIZE) == 1, "invZ must be inverse of z");\n', '        // Clear the z ordinate of the projective representation by dividing through\n', '        // by it, to obtain the affine representation\n', '        return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\n', '    }\n', '\n', '    // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\n', '    // cryptographically high probability.)\n', '    function verifyLinearCombinationWithGenerator(\n', '        uint256 c,\n', '        uint256[2] memory p,\n', '        uint256 s,\n', '        address lcWitness\n', '    ) internal pure returns (bool) {\n', '        // Rule out ecrecover failure modes which return address 0.\n', '        require(lcWitness != address(0), "bad witness");\n', '        uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\n', '        bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\n', '        bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\n', '        // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n', '        // The point corresponding to the address returned by\n', '        // ecrecover(-s*p[0],v,p[0],c*p[0]) is\n', '        // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\n', '        // See https://crypto.stackexchange.com/a/18106\n', '        // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\n', '        address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\n', '        return computed == lcWitness;\n', '    }\n', '\n', '    // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\n', '    // requires cp1Witness != sp2Witness (which is fine for this application,\n', '    // since it is cryptographically impossible for them to be equal. In the\n', '    // (cryptographically impossible) case that a prover accidentally derives\n', '    // a proof with equal c*p1 and s*p2, they should retry with a different\n', '    // proof nonce.) Assumes that all points are on secp256k1\n', '    // (which is checked in verifyVORProof below.)\n', '    function linearCombination(\n', '        uint256 c,\n', '        uint256[2] memory p1,\n', '        uint256[2] memory cp1Witness,\n', '        uint256 s,\n', '        uint256[2] memory p2,\n', '        uint256[2] memory sp2Witness,\n', '        uint256 zInv\n', '    ) internal pure returns (uint256[2] memory) {\n', '        require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0, "points in sum must be distinct");\n', '        require(ecmulVerify(p1, c, cp1Witness), "First multiplication check failed");\n', '        require(ecmulVerify(p2, s, sp2Witness), "Second multiplication check failed");\n', '        return affineECAdd(cp1Witness, sp2Witness, zInv);\n', '    }\n', '\n', '    // Domain-separation tag for the hash taken in scalarFromCurvePoints.\n', '    uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\n', '\n', '    // Pseudo-random number from inputs.\n', '    // TODO(alx): We could save a bit of gas by following the standard here and\n', '    // using the compressed representation of the points, if we collated the y\n', '    // parities into a single bytes32.\n', '    // https://www.pivotaltracker.com/story/show/171120588\n', '    function scalarFromCurvePoints(\n', '        uint256[2] memory hash,\n', '        uint256[2] memory pk,\n', '        uint256[2] memory gamma,\n', '        address uWitness,\n', '        uint256[2] memory v\n', '    ) internal pure returns (uint256 s) {\n', '        return\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\n', '                        hash,\n', '                        pk,\n', '                        gamma,\n', '                        v,\n', '                        uWitness\n', '                    )\n', '                )\n', '            );\n', '    }\n', '\n', '    // True if (gamma, c, s) is a correctly constructed randomness proof from pk\n', '    // and seed. zInv must be the inverse of the third ordinate from\n', '    // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\n', '    // section 5.3 of the IETF draft.\n', '    //\n', "    // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\n", '    // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\n', '    // (which I could make a uint256 without using any extra space.) Would save\n', '    // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\n', '    function verifyVORProof(\n', '        uint256[2] memory pk,\n', '        uint256[2] memory gamma,\n', '        uint256 c,\n', '        uint256 s,\n', '        uint256 seed,\n', '        address uWitness,\n', '        uint256[2] memory cGammaWitness,\n', '        uint256[2] memory sHashWitness,\n', '        uint256 zInv\n', '    ) internal view {\n', '        require(isOnCurve(pk), "public key is not on curve");\n', '        require(isOnCurve(gamma), "gamma is not on curve");\n', '        require(isOnCurve(cGammaWitness), "cGammaWitness is not on curve");\n', '        require(isOnCurve(sHashWitness), "sHashWitness is not on curve");\n', '        require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), "addr(c*pk+s*g)≠_uWitness");\n', '        // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\n', '        uint256[2] memory hash = hashToCurve(pk, seed);\n', '        // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\n', '        uint256[2] memory v =\n', '            linearCombination(\n', '                c,\n', '                gamma,\n', '                cGammaWitness,\n', '                s,\n', '                hash,\n', '                sHashWitness,\n', '                zInv\n', '            );\n', '        // Steps 7. and 8. of IETF draft section 5.3\n', '        uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\n', '        require(c == derivedC, "invalid proof");\n', '    }\n', '\n', '    // Domain-separation tag for the hash used as the final VOR output.\n', '    uint256 constant VOR_RANDOM_OUTPUT_HASH_PREFIX = 3;\n', '\n', '    // Length of proof marshaled to bytes array. Shows layout of proof\n', '    uint256 public constant PROOF_LENGTH =\n', '        64 + // PublicKey (uncompressed format.)\n', '        64 + // Gamma\n', '        32 + // C\n', '        32 + // S\n', '        32 + // Seed\n', '        0 +  // Dummy entry: The following elements are included for gas efficiency:\n', "        32 + // uWitness (gets padded to 256 bits, even though it's only 160)\n", '        64 + // cGammaWitness\n', '        64 + // sHashWitness\n', '        32;  // zInv  (Leave Output out, because that can be efficiently calculated)\n', '\n', '    /* ***************************************************************************\n', "   * @notice Returns proof's output, if proof is valid. Otherwise reverts\n", '\n', '   * @param proof A binary-encoded proof\n', '   *\n', '   * Throws if proof is invalid, otherwise:\n', '   * @return output i.e., the random output implied by the proof\n', '   * ***************************************************************************\n', '   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\n', '   */\n', '    function randomValueFromVORProof(bytes memory proof) internal view returns (uint256 output) {\n', '        require(proof.length == PROOF_LENGTH, "wrong proof length");\n', '\n', '        uint256[2] memory pk; // parse proof contents into these variables\n', '        uint256[2] memory gamma;\n', '        // c, s and seed combined (prevents "stack too deep" compilation error)\n', '        uint256[3] memory cSSeed;\n', '        address uWitness;\n', '        uint256[2] memory cGammaWitness;\n', '        uint256[2] memory sHashWitness;\n', '        uint256 zInv;\n', '\n', '        (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) =\n', '            abi.decode(proof,\n', '                (\n', '                    uint256[2],\n', '                    uint256[2],\n', '                    uint256[3],\n', '                    address,\n', '                    uint256[2],\n', '                    uint256[2],\n', '                    uint256\n', '                )\n', '            );\n', '\n', '        verifyVORProof(\n', '            pk,\n', '            gamma,\n', '            cSSeed[0], // c\n', '            cSSeed[1], // s\n', '            cSSeed[2], // seed\n', '            uWitness,\n', '            cGammaWitness,\n', '            sHashWitness,\n', '            zInv\n', '        );\n', '\n', '        output = uint256(keccak256(abi.encode(VOR_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title VORRequestIDBase\n', ' */\n', 'contract VORRequestIDBase {\n', '    /**\n', '     * @notice returns the seed which is actually input to the VOR coordinator\n', '     *\n', '     * @dev To prevent repetition of VOR output due to repetition of the\n', '     * @dev user-supplied seed, that seed is combined in a hash with the\n', '     * @dev user-specific nonce, and the address of the consuming contract. The\n', '     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n', '     * @dev the final seed, but the nonce does protect against repetition in\n', '     * @dev requests which are included in a single block.\n', '     *\n', '     * @param _userSeed VOR seed input provided by user\n', '     * @param _requester Address of the requesting contract\n', '     * @param _nonce User-specific nonce at the time of the request\n', '     */\n', '    function makeVORInputSeed(\n', '        bytes32 _keyHash,\n', '        uint256 _userSeed,\n', '        address _requester,\n', '        uint256 _nonce\n', '    ) internal pure returns (uint256) {\n', '        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the id for this request\n', '     * @param _keyHash The serviceAgreement ID to be used for this request\n', '     * @param _vORInputSeed The seed to be passed directly to the VOR\n', '     * @return The id for this request\n', '     *\n', '     * @dev Note that _vORInputSeed is not the seed passed by the consuming\n', '     * @dev contract, but the one generated by makeVORInputSeed\n', '     */\n', '    function makeRequestId(bytes32 _keyHash, uint256 _vORInputSeed) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(_keyHash, _vORInputSeed));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VORCoordinator\n', ' * @dev Coordinates on-chain verifiable-randomness requests\n', ' */\n', 'contract VORCoordinator is Ownable, ReentrancyGuard, VOR, VORRequestIDBase {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    IERC20_Ex internal xFUND;\n', '    BlockHashStoreInterface internal blockHashStore;\n', '\n', '    constructor(address _xfund, address _blockHashStore) public {\n', '        xFUND = IERC20_Ex(_xfund);\n', '        blockHashStore = BlockHashStoreInterface(_blockHashStore);\n', '    }\n', '\n', '    struct Callback {\n', '        // Tracks an ongoing request\n', '        address callbackContract; // Requesting contract, which will receive response\n', '        // Amount of xFUND paid at request time. Total xFUND = 1e9 * 1e18 < 2^96, so\n', '        // this representation is adequate, and saves a word of storage when this\n', '        // field follows the 160-bit callbackContract address.\n', '        uint96 randomnessFee;\n', '        // Commitment to seed passed to oracle by this contract, and the number of\n', '        // the block in which the request appeared. This is the keccak256 of the\n', '        // concatenation of those values. Storing this commitment saves a word of\n', '        // storage.\n', '        bytes32 seedAndBlockNum;\n', '    }\n', '\n', '    struct ServiceAgreement {\n', '        // Tracks oracle commitments to VOR service\n', '        address payable vOROracle; // Oracle committing to respond with VOR service\n', '        uint96 fee; // Minimum payment for oracle response. Total xFUND=1e9*1e18<2^96\n', '        mapping(address => uint96) granularFees; // Per consumer fees if required\n', '    }\n', '\n', '    struct Consumer {\n', '        uint256 amount;\n', '        mapping(address => uint256) providers;\n', '    }\n', '\n', '    /* (provingKey, seed) */\n', '    mapping(bytes32 => Callback) public callbacks;\n', '    /* provingKey */\n', '    mapping(bytes32 => ServiceAgreement) public serviceAgreements;\n', '    /* oracle */\n', '    /* xFUND balance */\n', '    mapping(address => uint256) public withdrawableTokens;\n', '    /* provingKey */\n', '    /* consumer */\n', '    mapping(bytes32 => mapping(address => uint256)) private nonces;\n', '\n', '    event RandomnessRequest(\n', '        bytes32 keyHash,\n', '        uint256 seed,\n', '        address sender,\n', '        uint256 fee,\n', '        bytes32 requestID\n', '    );\n', '\n', '    event NewServiceAgreement(bytes32 keyHash, uint256 fee);\n', '\n', '    event ChangeFee(bytes32 keyHash, uint256 fee);\n', '    event ChangeGranularFee(bytes32 keyHash, address consumer, uint256 fee);\n', '\n', '    event RandomnessRequestFulfilled(bytes32 requestId, uint256 output);\n', '\n', '    /**\n', '     * @dev getProviderAddress - get provider address\n', '     * @return address\n', '     */\n', '    function getProviderAddress(bytes32 _keyHash) external view returns (address) {\n', '        return serviceAgreements[_keyHash].vOROracle;\n', '    }\n', '\n', '    /**\n', "     * @dev getProviderFee - get provider's base fee\n", '     * @return address\n', '     */\n', '    function getProviderFee(bytes32 _keyHash) external view returns (uint96) {\n', '        return serviceAgreements[_keyHash].fee;\n', '    }\n', '\n', '    /**\n', "     * @dev getProviderGranularFee - get provider's granular fee for selected consumer\n", '     * @return address\n', '     */\n', '    function getProviderGranularFee(bytes32 _keyHash, address _consumer) external view returns (uint96) {\n', '        if(serviceAgreements[_keyHash].granularFees[_consumer] > 0) {\n', '            return serviceAgreements[_keyHash].granularFees[_consumer];\n', '        } else {\n', '            return serviceAgreements[_keyHash].fee;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Commits calling address to serve randomness\n', '     * @param _fee minimum xFUND payment required to serve randomness\n', '     * @param _oracle the address of the node with the proving key\n', '     * @param _publicProvingKey public key used to prove randomness\n', '     */\n', '    function registerProvingKey(\n', '        uint256 _fee,\n', '        address payable _oracle,\n', '        uint256[2] calldata _publicProvingKey\n', '    ) external {\n', '        bytes32 keyHash = hashOfKey(_publicProvingKey);\n', '        address oldVOROracle = serviceAgreements[keyHash].vOROracle;\n', '        require(oldVOROracle == address(0), "please register a new key");\n', '        require(_oracle != address(0), "_oracle must not be 0x0");\n', '        serviceAgreements[keyHash].vOROracle = _oracle;\n', '\n', '        require(_fee > 0, "fee cannot be zero");\n', '        require(_fee <= 1e9 ether, "fee too high");\n', '        serviceAgreements[keyHash].fee = uint96(_fee);\n', '        emit NewServiceAgreement(keyHash, _fee);\n', '    }\n', '\n', '    /**\n', "     * @notice Changes the provider's base fee\n", '     * @param _publicProvingKey public key used to prove randomness\n', '     * @param _fee minimum xFUND payment required to serve randomness\n', '     */\n', '    function changeFee(uint256[2] calldata _publicProvingKey, uint256 _fee) external {\n', '        bytes32 keyHash = hashOfKey(_publicProvingKey);\n', '        require(serviceAgreements[keyHash].vOROracle == _msgSender(), "only oracle can change the fee");\n', '        require(_fee > 0, "fee cannot be zero");\n', '        require(_fee <= 1e9 ether, "fee too high");\n', '        serviceAgreements[keyHash].fee = uint96(_fee);\n', '        emit ChangeFee(keyHash, _fee);\n', '    }\n', '\n', '    /**\n', "     * @notice Changes the provider's fee for a consumer contract\n", '     * @param _publicProvingKey public key used to prove randomness\n', '     * @param _fee minimum xFUND payment required to serve randomness\n', '     */\n', '    function changeGranularFee(uint256[2] calldata _publicProvingKey, uint256 _fee, address _consumer) external {\n', '        bytes32 keyHash = hashOfKey(_publicProvingKey);\n', '        require(serviceAgreements[keyHash].vOROracle == _msgSender(), "only oracle can change the fee");\n', '        require(_fee > 0, "fee cannot be zero");\n', '        require(_fee <= 1e9 ether, "fee too high");\n', '        serviceAgreements[keyHash].granularFees[_consumer] = uint96(_fee);\n', '        emit ChangeGranularFee(keyHash, _consumer, _fee);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the oracle operator to withdraw their xFUND\n', '     * @param _recipient is the address the funds will be sent to\n', '     * @param _amount is the amount of xFUND transferred from the Coordinator contract\n', '     */\n', '    function withdraw(address _recipient, uint256 _amount) external hasAvailableFunds(_amount) {\n', '        withdrawableTokens[_msgSender()] = withdrawableTokens[_msgSender()].sub(_amount);\n', '        assert(xFUND.transfer(_recipient, _amount));\n', '    }\n', '\n', '    /**\n', '     * @notice creates the request for randomness\n', '     *\n', '     * @param _keyHash ID of the VOR public key against which to generate output\n', '     * @param _consumerSeed Input to the VOR, from which randomness is generated\n', '     * @param _feePaid Amount of xFUND sent with request. Must exceed fee for key\n', '     *\n', '     * @dev _consumerSeed is mixed with key hash, sender address and nonce to\n', '     * @dev obtain preSeed, which is passed to VOR oracle, which mixes it with the\n', '     * @dev hash of the block containing this request, to compute the final seed.\n', '     *\n', '     * @dev The requestId used to store the request data is constructed from the\n', '     * @dev preSeed and keyHash.\n', '     */\n', '    function randomnessRequest(\n', '        bytes32 _keyHash,\n', '        uint256 _consumerSeed,\n', '        uint256 _feePaid\n', '    ) external sufficientXFUND(_feePaid, _keyHash) {\n', '        require(address(_msgSender()).isContract(), "request can only be made by a contract");\n', '\n', '        xFUND.transferFrom(_msgSender(), address(this), _feePaid);\n', '\n', '        uint256 nonce = nonces[_keyHash][_msgSender()];\n', '        uint256 preSeed = makeVORInputSeed(_keyHash, _consumerSeed, _msgSender(), nonce);\n', '        bytes32 requestId = makeRequestId(_keyHash, preSeed);\n', '\n', '        // Cryptographically guaranteed by preSeed including an increasing nonce\n', '        assert(callbacks[requestId].callbackContract == address(0));\n', '        callbacks[requestId].callbackContract = _msgSender();\n', '\n', '        assert(_feePaid < 1e27); // Total xFUND fits in uint96\n', '        callbacks[requestId].randomnessFee = uint96(_feePaid);\n', '\n', '        callbacks[requestId].seedAndBlockNum = keccak256(abi.encodePacked(preSeed, block.number));\n', '        emit RandomnessRequest(_keyHash, preSeed, _msgSender(), _feePaid, requestId);\n', '        nonces[_keyHash][_msgSender()] = nonces[_keyHash][_msgSender()].add(1);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the serviceAgreements key associated with this public key\n', '     * @param _publicKey the key to return the address for\n', '     */\n', '    function hashOfKey(uint256[2] memory _publicKey) public pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(_publicKey));\n', '    }\n', '\n', '    /**\n', '     * @notice Called by the node to fulfill requests\n', '     *\n', '     * @param _proof the proof of randomness. Actual random output built from this\n', '     */\n', '    function fulfillRandomnessRequest(bytes memory _proof) public {\n', '        (bytes32 currentKeyHash, Callback memory callback, bytes32 requestId, uint256 randomness) =\n', '            getRandomnessFromProof(_proof);\n', '\n', '        // Pay oracle\n', '        address payable oracle = serviceAgreements[currentKeyHash].vOROracle;\n', '        withdrawableTokens[oracle] = withdrawableTokens[oracle].add(callback.randomnessFee);\n', '\n', '        // Forget request. Must precede callback (prevents reentrancy)\n', '        delete callbacks[requestId];\n', '        callBackWithRandomness(requestId, randomness, callback.callbackContract);\n', '\n', '        emit RandomnessRequestFulfilled(requestId, randomness);\n', '    }\n', '\n', "    // Offsets into fulfillRandomnessRequest's _proof of various values\n", '    //\n', "    // Public key. Skips byte array's length prefix.\n", '    uint256 public constant PUBLIC_KEY_OFFSET = 0x20;\n', '    // Seed is 7th word in proof, plus word for length, (6+1)*0x20=0xe0\n', '    uint256 public constant PRESEED_OFFSET = 0xe0;\n', '\n', '    function callBackWithRandomness(bytes32 requestId, uint256 randomness, address consumerContract) internal {\n', '        // Dummy variable; allows access to method selector in next line. See\n', '        // https://github.com/ethereum/solidity/issues/3506#issuecomment-553727797\n', '        IVORConsumerBase v;\n', '        bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n', '        // The bound b here comes from https://eips.ethereum.org/EIPS/eip-150. The\n', '        // actual gas available to the consuming contract will be b-floor(b/64).\n', '        // This is chosen to leave the consuming contract ~200k gas, after the cost\n', '        // of the call itself.\n', '        uint256 b = 206000;\n', '        require(gasleft() >= b, "not enough gas for consumer");\n', "        // A low-level call is necessary, here, because we don't want the consuming\n", '        // contract to be able to revert this execution, and thus deny the oracle\n', '        // payment for a valid randomness response. This also necessitates the above\n', '        // check on the gasleft, as otherwise there would be no indication if the\n', '        // callback method ran out of gas.\n', '        //\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, ) = consumerContract.call(resp);\n', '        // Avoid unused-local-variable warning. (success is only present to prevent\n', '        // a warning that the return value of consumerContract.call is unused.)\n', '        (success);\n', '    }\n', '\n', '    function getRandomnessFromProof(bytes memory _proof)\n', '        internal\n', '        view\n', '        returns (\n', '            bytes32 currentKeyHash,\n', '            Callback memory callback,\n', '            bytes32 requestId,\n', '            uint256 randomness\n', '        )\n', '    {\n', '        // blockNum follows proof, which follows length word (only direct-number\n', '        // constants are allowed in assembly, so have to compute this in code)\n', '        uint256 blocknumOffset = 0x20 + PROOF_LENGTH;\n', '        // _proof.length skips the initial length word, so not including the\n', '        // blocknum in this length check balances out.\n', '        require(_proof.length == blocknumOffset, "wrong proof length");\n', '        uint256[2] memory publicKey;\n', '        uint256 preSeed;\n', '        uint256 blockNum;\n', '        assembly {\n', '            // solhint-disable-line no-inline-assembly\n', '            publicKey := add(_proof, PUBLIC_KEY_OFFSET)\n', '            preSeed := mload(add(_proof, PRESEED_OFFSET))\n', '            blockNum := mload(add(_proof, blocknumOffset))\n', '        }\n', '        currentKeyHash = hashOfKey(publicKey);\n', '        requestId = makeRequestId(currentKeyHash, preSeed);\n', '        callback = callbacks[requestId];\n', '        require(callback.callbackContract != address(0), "no corresponding request");\n', '        require(callback.seedAndBlockNum == keccak256(abi.encodePacked(preSeed, blockNum)), "wrong preSeed or block num");\n', '\n', '        bytes32 blockHash = blockhash(blockNum);\n', '        if (blockHash == bytes32(0)) {\n', '            blockHash = blockHashStore.getBlockhash(blockNum);\n', '            require(blockHash != bytes32(0), "please prove blockhash");\n', '        }\n', '        // The seed actually used by the VOR machinery, mixing in the blockhash\n', '        uint256 actualSeed = uint256(keccak256(abi.encodePacked(preSeed, blockHash)));\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Construct the actual proof from the remains of _proof\n', '            mstore(add(_proof, PRESEED_OFFSET), actualSeed)\n', '            mstore(_proof, PROOF_LENGTH)\n', '        }\n', '        randomness = VOR.randomValueFromVORProof(_proof); // Reverts on failure\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if amount is not at least what was agreed upon in the service agreement\n', '     * @param _feePaid The payment for the request\n', '     * @param _keyHash The key which the request is for\n', '     */\n', '    modifier sufficientXFUND(uint256 _feePaid, bytes32 _keyHash) {\n', '        if(serviceAgreements[_keyHash].granularFees[_msgSender()] > 0) {\n', '            require(_feePaid >= serviceAgreements[_keyHash].granularFees[_msgSender()], "Below agreed payment");\n', '        } else {\n', '            require(_feePaid >= serviceAgreements[_keyHash].fee, "Below agreed payment");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if amount requested is greater than withdrawable balance\n', '     * @param _amount The given amount to compare to `withdrawableTokens`\n', '     */\n', '    modifier hasAvailableFunds(uint256 _amount) {\n', '        require(withdrawableTokens[_msgSender()] >= _amount, "can\'t withdraw more than balance");\n', '        _;\n', '    }\n', '}']