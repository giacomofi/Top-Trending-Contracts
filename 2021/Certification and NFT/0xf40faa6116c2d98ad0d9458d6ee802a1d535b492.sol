['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\t\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address public admin;\n', '    address public dev;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function setAdmin(address _admin) public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '    function setDev(address _dev) public onlyOwner {\n', '        dev = _dev;\n', '    }\n', '    \n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin || msg.sender == _owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyDev {\n', '        require(msg.sender == dev || msg.sender == admin || msg.sender == _owner);\n', '        _;\n', '    }    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract ContractConn{\n', '    function transfer(address _to, uint256 _value) virtual public;\n', '    function balanceOf(address who) virtual public view returns (uint256);\n', '}\n', '\n', '\n', '\n', 'contract Minter is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public userMinted = 0;\n', '    bool public checkDeadline = false;   \n', '\n', '    mapping (uint256 => bool) public claimedOrderId;\n', '    \n', '    ContractConn public zild;   \n', '    \n', '    event EventUpdateCheckDeadline(bool newValue);\n', '\n', '    event EventClaim(uint256 orderId, address userAddress,uint256 amount);\n', '    \n', '    constructor(address _token) public {\n', '        zild = ContractConn(_token);\n', '    }    \n', '\n', '    function claim(uint256 orderId, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public  {\n', '        if(checkDeadline){\n', '            require(deadline >= block.timestamp, "expired order");\n', '        }\n', '        \n', '        require(claimedOrderId[orderId] == false, "already claimed");\n', '      \n', '        bytes32 hash1 = keccak256(\n', '            abi.encode(\n', '                address(this),\n', '                msg.sender,\n', '                orderId,\n', '                amount,\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash2 = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19Ethereum Signed Message:\\n32",\n', '                hash1\n', '            )\n', '        );\n', '\n', '        address signer = openzeppelin_recover(hash2, v, r, s);\n', '\n', '        require(signer == dev, "invalid signer");\n', '\n', '        zild.transfer(msg.sender,amount);\n', '        userMinted = userMinted.add(amount);\n', '        \n', '        claimedOrderId[orderId] = true;\n', '        emit EventClaim(orderId, msg.sender, amount);\n', '    }\n', '\n', '    // for special case\n', '    function claimByAdmin(uint256 orderId, address _to, uint256 amount) public onlyAdmin {        \n', '        require(claimedOrderId[orderId] == false, "already claimed");\n', '        claimedOrderId[orderId] = true;   \n', '        zild.transfer(_to,amount);\n', '        userMinted = userMinted.add(amount);\n', '        emit EventClaim(orderId, _to,amount);\n', '    }\n', '\n', '    function updateCheckDeadline(bool _checkDeadline) public onlyAdmin {        \n', '        checkDeadline = _checkDeadline;\n', '        emit EventUpdateCheckDeadline(_checkDeadline);\n', '    } \n', '\n', '    /**\n', '     *  openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\n', '     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n', '     * `r` and `s` signature fields separately.\n', '     */\n', '    function openzeppelin_recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '}']