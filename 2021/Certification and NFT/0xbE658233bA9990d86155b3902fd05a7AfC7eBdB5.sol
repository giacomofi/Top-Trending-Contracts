['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-13\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ConnectorsInterface {\n', '  function chief(address) external view returns (bool);\n', '}\n', '\n', 'interface IndexInterface {\n', '  function master() external view returns (address);\n', '}\n', '\n', 'contract BytesHelper {\n', '  /**\n', '  * @dev Convert String to bytes32.\n', '  */\n', '  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n', '    require(bytes(str).length != 0, "String-Empty");\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      result := mload(add(str, 32))\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Convert bytes32 to String.\n', '  */\n', '  function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\n', '    bytes32  _temp;\n', '    uint count;\n', '    for (uint256 i; i < 32; i++) {\n', '      _temp = _bytes32[i];\n', '      if( _temp != bytes32(0)) {\n', '        count += 1;\n', '      }\n', '    }\n', '    bytes memory bytesArray = new bytes(count);\n', '    for (uint256 i; i < count; i++) {\n', '      bytesArray[i] = (_bytes32[i]);\n', '    }\n', '    return (string(bytesArray));\n', '  }\n', '}\n', '\n', 'contract Helpers is BytesHelper {\n', '    address public constant connectorsV2 = 0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11;\n', '    address public constant instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\n', '\n', '    mapping (bytes32 => StakingData) public stakingMapping;\n', '\n', '    struct StakingData {\n', '        address stakingPool;\n', '        address stakingToken;\n', '        address rewardToken;\n', '    }\n', '\n', '    event LogAddStakingMapping(\n', '        string stakingName,\n', '        bytes32 stakingType,\n', '        address stakingAddress,\n', '        address stakingToken,\n', '        address rewardToken\n', '    );\n', '    event LogRemoveStakingMapping(\n', '        string stakingName,\n', '        bytes32 stakingType,\n', '        address stakingAddress,\n', '        address stakingToken,\n', '        address rewardToken\n', '    );\n', '\n', '    modifier isChief virtual {\n', '        require(\n', '        ConnectorsInterface(connectorsV2).chief(msg.sender) ||\n', '        IndexInterface(instaIndex).master() == msg.sender, "not-Chief");\n', '        _;\n', '    }\n', '\n', '    function addStakingMapping(\n', '        string memory stakingName,\n', '        address stakingAddress,\n', '        address stakingToken,\n', '        address rewardToken\n', '    ) public isChief {\n', '        require(stakingAddress != address(0), "stakingAddress-not-vaild");\n', '        require(stakingToken != address(0), "stakingToken-not-vaild");\n', '        require(rewardToken != address(0), "rewardToken-not-vaild");\n', '        require(bytes(stakingName).length <= 32, "Length-exceeds");\n', '        bytes32 stakeType = stringToBytes32(stakingName);\n', '        require(stakingMapping[stakeType].stakingPool == address(0), "StakingPool-already-added");\n', '        require(stakingMapping[stakeType].stakingToken == address(0), "StakingToken-already-added");\n', '        require(stakingMapping[stakeType].rewardToken == address(0), "rewardToken-already-added");\n', '\n', '        stakingMapping[stakeType] = StakingData(\n', '            stakingAddress,\n', '            stakingToken,\n', '            rewardToken\n', '        );\n', '        emit LogAddStakingMapping(stakingName, stakeType, stakingAddress, stakingToken, rewardToken);\n', '    }\n', '\n', '    function removeStakingMapping(string memory stakingName, address stakingAddress) public isChief {\n', '        require(stakingAddress != address(0), "stakingAddress-not-vaild");\n', '        bytes32 stakeType = stringToBytes32(stakingName);\n', '        require(stakingMapping[stakeType].stakingPool == stakingAddress, "different-staking-pool");\n', '\n', '        emit LogRemoveStakingMapping(\n', '            stakingName,\n', '            stakeType,\n', '            stakingAddress,\n', '            stakingMapping[stakeType].stakingToken,\n', '            stakingMapping[stakeType].rewardToken\n', '        );\n', '        delete stakingMapping[stakeType];\n', '    }\n', '}\n', '\n', 'contract InstaStakingERC20Mapping is Helpers {\n', '  string constant public name = "Staking-ERC20-Mapping-v1";\n', '}']