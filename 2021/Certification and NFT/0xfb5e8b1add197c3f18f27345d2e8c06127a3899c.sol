['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'contract Token {\n', '    \n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    \n', '    uint256 public totalSupply = 1500000000 * 10**18;\n', '    \n', '    string public name = "Free-Estimation Coin";\n', '    string symbol = "ESTC";\n', '    uint8 public decimals = 18;\n', '    \n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    constructor() {\n', '        balances[msg.sender] = totalSupply;  \n', '    }\n', '    \n', ' \n', '    function balanceOf(address tokenOwner) public view returns(uint256) {\n', '       return balances[tokenOwner];   \n', '    } \n', '    \n', '    function transfer(address receiver, uint256 numTokens) public returns(bool) {\n', '        require(balanceOf(msg.sender)>= numTokens, "Balance too low");\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address delegate, uint256 numTokens) public returns(bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public returns(bool) {\n', '        require(balanceOf(owner) >= numTokens, "balance too low");\n', '        require(allowed[owner][msg.sender] >= numTokens, "allowance too low");\n', '        \n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        \n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath { \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      assert(c >= b);\n', '      return c;\n', '    }\n', '}']