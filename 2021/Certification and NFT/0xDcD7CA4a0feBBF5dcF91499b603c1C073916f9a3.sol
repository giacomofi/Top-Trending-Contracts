['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "./lib/@uniswap/interfaces/IUniswapV2Pair.sol";\n', 'import "./interfaces/IAnyStake.sol";\n', 'import "./interfaces/IVaultMigrator.sol";\n', 'import "./interfaces/IAnyStakeRegulator.sol";\n', 'import "./interfaces/IAnyStakeVault.sol";\n', 'import "./utils/AnyStakeUtils.sol";\n', '\n', 'contract AnyStakeVault is IAnyStakeVault, AnyStakeUtils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event AnyStakeUpdated(address indexed user, address anystake);\n', '    event RegulatorUpdated(address indexed user, address regulator);\n', '    event MigratorUpdated(address indexed user, address migrator);\n', '    event DistributionRateUpdated(address indexed user, uint256 distributionRate);\n', '    event Migrate(address indexed user, address migrator);\n', '    event DeFiatBuyback(address indexed token, uint256 tokenAmount, uint256 buybackAmount);\n', '    event PointsBuyback(address indexed token, uint256 tokenAmount, uint256 buybackAmount);\n', '    event RewardsDistributed(address indexed user, uint256 anystakeAmount, uint256 regulatorAmount);\n', '    event RewardsBonded(address indexed user, uint256 bondedAmount, uint256 bondedLengthBlocks);\n', '\n', '    address public anystake;\n', '    address public regulator;\n', '    address public migrator;\n', '\n', '    uint256 public bondedRewards; // DFT bonded (block-based) rewards\n', '    uint256 public bondedRewardsPerBlock; // Amt of bonded DFT paid out each block\n', '    uint256 public bondedRewardsBlocksRemaining; // Remaining bonding period\n', '    uint256 public distributionRate; // % of rewards which are sent to AnyStake\n', '    uint256 public lastDistributionBlock; // last block that rewards were distributed\n', '    uint256 public totalTokenBuybackAmount; // total DFT bought back\n', '    uint256 public totalPointsBuybackAmount; // total DFTPv2 bought back\n', '    uint256 public totalRewardsDistributed; // total rewards distributed from Vault\n', '    uint256 public pendingRewards; // total rewards pending claim\n', '\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            msg.sender == anystake || msg.sender == regulator, \n', '            "Vault: Only AnyStake and Regulator allowed"\n', '        );\n', '        _;\n', '    }\n', '    \n', '    constructor(\n', '        address _router, \n', '        address _gov, \n', '        address _points, \n', '        address _token, \n', '        address _anystake, \n', '        address _regulator\n', '    ) \n', '        public\n', '        AnyStakeUtils(_router, _gov, _points, _token)\n', '    {\n', '        anystake = _anystake;\n', '        regulator = _regulator;\n', '        distributionRate = 700; // 70%, base 100\n', '    }\n', '\n', '    // Rewards - Distribute accumulated rewards during pool update\n', '    function calculateRewards() external override onlyAuthorized {\n', '        if (block.number <= lastDistributionBlock) {\n', '            return;\n', '        }\n', '\n', '        uint256 anystakeAmount;\n', '        uint256 regulatorAmount;\n', '\n', '        // find the transfer fee amount\n', '        // fees accumulated = balance - pendingRewards - bondedRewards\n', '        uint256 feeAmount = IERC20(DeFiatToken).balanceOf(address(this))\n', '            .sub(pendingRewards)\n', '            .sub(bondedRewards);\n', '        \n', '        // calculate fees accumulated since last update\n', '        if (feeAmount > 0) {\n', '            // find the amounts to distribute to each contract\n', '            uint256 anystakeShare = feeAmount.mul(distributionRate).div(1000);\n', '            anystakeAmount = anystakeAmount.add(anystakeShare);\n', '            regulatorAmount = regulatorAmount.add(feeAmount.sub(anystakeShare));\n', '        }\n', '\n', '        // find the bonded reward amount\n', '        if (bondedRewards > 0) {\n', '            // find blocks since last bond payout, dont overflow\n', '            uint256 blockDelta = block.number.sub(lastDistributionBlock);\n', '            if (blockDelta > bondedRewardsBlocksRemaining) {\n', '                blockDelta = bondedRewardsBlocksRemaining;\n', '            }\n', '\n', '            // find the bonded amount to payout, dont overflow\n', '            uint256 bondedAmount = bondedRewardsPerBlock.mul(blockDelta);\n', '            if (bondedAmount > bondedRewards) {\n', '                bondedAmount = bondedRewards;\n', '            }\n', '\n', '            // find the amounts to distribute to each contract\n', '            uint256 anystakeShare = bondedAmount.mul(distributionRate).div(1000);\n', '            anystakeAmount = anystakeAmount.add(anystakeShare);\n', '            regulatorAmount = regulatorAmount.add(bondedAmount.sub(anystakeShare));\n', '\n', "            // update bonded rewards before calc'ing fees\n", '            bondedRewards = bondedRewards.sub(bondedAmount);\n', '            bondedRewardsBlocksRemaining = bondedRewardsBlocksRemaining.sub(blockDelta);\n', '        }\n', '\n', '        if (anystakeAmount == 0 && regulatorAmount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (anystakeAmount > 0) {\n', '            IAnyStake(anystake).addReward(anystakeAmount);\n', '        }\n', '\n', '        if (regulatorAmount > 0) {\n', '            IAnyStakeRegulator(regulator).addReward(regulatorAmount);\n', '        }\n', '        \n', '        lastDistributionBlock = block.number;\n', '        pendingRewards = pendingRewards.add(anystakeAmount).add(regulatorAmount);\n', '        totalRewardsDistributed = totalRewardsDistributed.add(anystakeAmount).add(regulatorAmount);\n', '        emit RewardsDistributed(msg.sender, anystakeAmount, regulatorAmount);\n', '    }\n', '\n', '    function distributeRewards(address recipient, uint256 amount) external override onlyAuthorized {\n', '        safeTokenTransfer(recipient, DeFiatToken, amount);\n', '        pendingRewards = pendingRewards.sub(amount);\n', '    }\n', '\n', '    // Uniswap - Get token price from Uniswap in ETH\n', '    // return is 1e18. max Solidity is 1e77. \n', '    function getTokenPrice(address token, address lpToken) public override view returns (uint256) {\n', '        if (token == weth) {\n', '            return 1e18;\n', '        }\n', '        \n', '        // LP Tokens can be priced with address(0) as lpToken argument\n', '        // LP Token pricing is vulerable to flash loan attacks and should not be used in contract calculations\n', '        IUniswapV2Pair pair = lpToken == address(0) ? IUniswapV2Pair(token) : IUniswapV2Pair(lpToken);\n', '        \n', '        uint256 wethReserves;\n', '        uint256 tokenReserves;\n', '        if (pair.token0() == weth) {\n', '            (wethReserves, tokenReserves, ) = pair.getReserves();\n', '        } else {\n', '            (tokenReserves, wethReserves, ) = pair.getReserves();\n', '        }\n', '        \n', '        if (tokenReserves == 0) {\n', '            return 0;\n', '        } else if (lpToken == address(0)) {\n', '            return wethReserves.mul(2e18).div(IERC20(token).totalSupply());\n', '        } else {\n', '            uint256 adjuster = 36 - uint256(IERC20(token).decimals());\n', '            uint256 tokensPerEth = tokenReserves.mul(10**adjuster).div(wethReserves);\n', '            return uint256(1e36).div(tokensPerEth);\n', '        }\n', '    }\n', '\n', '    // Uniswap - Buyback DeFiat Tokens (DFT) from Uniswap with ERC20 tokens\n', '    function buyDeFiatWithTokens(address token, uint256 amount) external override onlyAuthorized {\n', '        uint256 buybackAmount = buyTokenWithTokens(DeFiatToken, token, amount);\n', '\n', '        if (buybackAmount > 0) {\n', '            totalTokenBuybackAmount = totalTokenBuybackAmount.add(buybackAmount);\n', '            emit DeFiatBuyback(token, amount, buybackAmount);\n', '        }\n', '    }\n', '\n', '    // Uniswap - Buyback DeFiat Points (DFTP) from Uniswap with ERC20 tokens\n', '    function buyPointsWithTokens(address token, uint256 amount) external override onlyAuthorized {\n', '        uint256 buybackAmount = buyTokenWithTokens(DeFiatPoints, token, amount);\n', '        \n', '        if (msg.sender == regulator) {\n', '            pendingRewards = pendingRewards.sub(amount);\n', '        }\n', '\n', '        if (buybackAmount > 0) {\n', '            totalPointsBuybackAmount = totalPointsBuybackAmount.add(buybackAmount);\n', '            emit PointsBuyback(token, amount, buybackAmount);\n', '        }\n', '    }\n', '\n', '    // Uniswap - Internal buyback function. Must have a WETH trading pair on Uniswap\n', '    function buyTokenWithTokens(address tokenOut, address tokenIn, uint256 amount) internal onlyAuthorized returns (uint256) {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        address[] memory path = new address[](tokenIn == weth ? 2 : 3);\n', '        if (tokenIn == weth) {\n', '            path[0] = weth; // WETH in\n', '            path[1] = tokenOut; // DFT out\n', '        } else {\n', '            path[0] = tokenIn; // ERC20 in\n', '            path[1] = weth; // WETH intermediary\n', '            path[2] = tokenOut; // DFT out\n', '        }\n', '     \n', '        uint256 tokenAmount = IERC20(tokenOut).balanceOf(address(this)); // snapshot\n', '        \n', '        IERC20(tokenIn).safeApprove(router, 0);\n', '        IERC20(tokenIn).safeApprove(router, amount);\n', '        IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '            amount, \n', '            0,\n', '            path,\n', '            address(this),\n', '            block.timestamp + 5 minutes\n', '        );\n', '\n', '        uint256 buybackAmount = IERC20(tokenOut).balanceOf(address(this)).sub(tokenAmount);\n', '\n', '        return buybackAmount;\n', '    }\n', '\n', '    function migrate() external onlyGovernor {\n', '        require(migrator != address(0), "Migrate: No migrator set");\n', '\n', '        uint256 balance = IERC20(DeFiatToken).balanceOf(address(this));\n', '        \n', '        // approve and migrate to new vault\n', '        // this function will need to maintain the pendingRewards, bondedRewards, lastDistributionBlock\n', '        // variables from this contract to ensure users can claim at all times\n', '        IERC20(DeFiatToken).safeApprove(migrator, balance);\n', '        IVaultMigrator(migrator).migrateTo();\n', '        emit Migrate(msg.sender, migrator);\n', '    }\n', '\n', '    // Governance - Add Bonded Rewards, rewards paid out over fixed timeframe\n', '    // Used for pre-AnyStake accumulated Treasury rewards and promotions\n', '    function addBondedRewards(uint256 _amount, uint256 _blocks) external onlyGovernor {\n', '        require(_amount > 0, "AddBondedRewards: Cannot add zero rewards");\n', '        require(_blocks > 0, "AddBondedRewards: Cannot have zero block bond");\n', '\n', '        // Add rewards, add to blocks, re-calculate rewards per block\n', '        bondedRewards = bondedRewards.add(_amount);\n', '        bondedRewardsBlocksRemaining = bondedRewardsBlocksRemaining.add(_blocks);\n', '        bondedRewardsPerBlock = bondedRewards.div(bondedRewardsBlocksRemaining);\n', '        lastDistributionBlock = block.number;\n', '\n', '        IERC20(DeFiatToken).transferFrom(msg.sender, address(this), _amount);\n', '        emit RewardsBonded(msg.sender, _amount, _blocks);\n', '    }\n', '\n', '    // Governance - Set AnyStake / Regulator DFT Reward Distribution Rate, 10 = 1%\n', '    function setDistributionRate(uint256 _distributionRate) external onlyGovernor {\n', '        require(_distributionRate != distributionRate, "SetRate: No rate change");\n', '        require(_distributionRate <= 1000, "SetRate: Cannot be greater than 100%");\n', '\n', '        distributionRate = _distributionRate;\n', '        emit DistributionRateUpdated(msg.sender, distributionRate);\n', '    }\n', '\n', '    // Governance - Set Migrator\n', '    function setMigrator(address _migrator) external onlyGovernor {\n', '        require(_migrator != address(0), "SetMigrator: No migrator change");\n', '\n', '        migrator = _migrator;\n', '        emit MigratorUpdated(msg.sender, _migrator);\n', '    }\n', '\n', '    // Governance - Set AnyStake Address\n', '    function setAnyStake(address _anystake) external onlyGovernor {\n', '        require(_anystake != anystake, "SetAnyStake: No AnyStake change");\n', '        require(_anystake != address(0), "SetAnyStake: Must have AnyStake value");\n', '\n', '        anystake = _anystake;\n', '        emit AnyStakeUpdated(msg.sender, anystake);\n', '    }\n', '\n', '    // Governance - Set Regulator Address\n', '    function setRegulator(address _regulator) external onlyGovernor {\n', '        require(_regulator != regulator, "SetRegulator: No Regulator change");\n', '        require(_regulator != address(0), "SetRegulator: Must have Regulator value");\n', '\n', '        regulator = _regulator;\n', '        emit RegulatorUpdated(msg.sender, regulator);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStake {\n', '    function addReward(uint256 amount) external;\n', '    function claim(uint256 pid) external;\n', '    function deposit(uint256 pid, uint256 amount) external;\n', '    function withdraw(uint256 pid, uint256 amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStakeRegulator {\n', '    function addReward(uint256 amount) external;\n', '    function claim() external;\n', '    function deposit(uint256 amount) external;\n', '    function withdraw(uint256 amount) external;\n', '    function migrate() external;\n', '    function updatePool() external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IAnyStakeVault {\n', '    function buyDeFiatWithTokens(address token, uint256 amount) external;\n', '    function buyPointsWithTokens(address token, uint256 amount) external;\n', '\n', '    function calculateRewards() external;\n', '    function distributeRewards(address recipient, uint256 amount) external;\n', '    function getTokenPrice(address token, address lpToken) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IVaultMigrator {\n', '    function migrateTo() external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface IDeFiatGov {\n', '    function mastermind() external view returns (address);\n', '    function viewActorLevelOf(address _address) external view returns (uint256);\n', '    function viewFeeDestination() external view returns (address);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewBurnRate() external view returns (uint256);\n', '    function viewFeeRate() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "./DeFiatUtils.sol";\n', 'import "../interfaces/IDeFiatGov.sol";\n', '\n', 'abstract contract DeFiatGovernedUtils is DeFiatUtils {\n', '    event GovernanceUpdated(address indexed user, address governance);\n', '\n', '    address public governance;\n', '\n', '    modifier onlyMastermind {\n', '        require(\n', '            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\n', '            "Gov: Only Mastermind"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernor {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\n', '            "Gov: Only Governors"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyPartner {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\n', '            "Gov: Only Partners"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function _setGovernance(address _governance) internal {\n', '        require(_governance != governance, "SetGovernance: No governance change");\n', '\n', '        governance = _governance;\n', '        emit GovernanceUpdated(msg.sender, governance);\n', '    }\n', '\n', '    function setGovernance(address _governance) external onlyGovernor {\n', '        _setGovernance(_governance);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "../../@openzeppelin/token/ERC20/IERC20.sol";\n', 'import "../../@openzeppelin/access/Ownable.sol";\n', '\n', 'abstract contract DeFiatUtils is Ownable {\n', '    event TokenSweep(address indexed user, address indexed token, uint256 amount);\n', '\n', '    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\n', '    function sweep(address token) public virtual onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        require(amount > 0, "Sweep: No token balance");\n', '\n', '        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\n', '\n', '        if (address(this).balance > 0) {\n', '            payable(msg.sender).transfer(address(this).balance);\n', '        }\n', '\n', '        emit TokenSweep(msg.sender, token, amount);\n', '    }\n', '\n', '    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\n', '    function kill() external onlyOwner {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    // Standard\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', 'import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'import "../lib/@defiat-crypto/utils/DeFiatUtils.sol";\n', 'import "../lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol";\n', 'import "../lib/@openzeppelin/token/ERC20/SafeERC20.sol";\n', 'import "../lib/@uniswap/interfaces/IUniswapV2Factory.sol";\n', 'import "../lib/@uniswap/interfaces/IUniswapV2Router02.sol";\n', '\n', 'abstract contract AnyStakeUtils is DeFiatGovernedUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    event PointsUpdated(address indexed user, address points);\n', '    event TokenUpdated(address indexed user, address token);\n', '    event UniswapUpdated(address indexed user, address router, address weth, address factory);\n', '  \n', '    address public router;\n', '    address public factory;\n', '    address public weth;\n', '    address public DeFiatToken;\n', '    address public DeFiatPoints;\n', '    address public DeFiatTokenLp;\n', '    address public DeFiatPointsLp;\n', '\n', '    mapping (address => bool) internal _blacklistedAdminWithdraw;\n', '\n', '    constructor(address _router, address _gov, address _points, address _token) public {\n', '        _setGovernance(_gov);\n', '\n', '        router = _router;\n', '        DeFiatPoints = _points;\n', '        DeFiatToken = _token;\n', '         \n', '        weth = IUniswapV2Router02(router).WETH();\n', '        factory = IUniswapV2Router02(router).factory();\n', '        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\n', '        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\n', '    }\n', '\n', '    function sweep(address _token) public override onlyOwner {\n', '        require(!_blacklistedAdminWithdraw[_token], "Sweep: Cannot withdraw blacklisted token");\n', '\n', '        DeFiatUtils.sweep(_token);\n', '    }\n', '\n', '    function isBlacklistedAdminWithdraw(address _token)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _blacklistedAdminWithdraw[_token];\n', '    }\n', '\n', '    // Method to avoid underflow on token transfers\n', '    function safeTokenTransfer(address user, address token, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\n', '        if (amount > tokenBalance) {\n', '            IERC20(token).safeTransfer(user, tokenBalance);\n', '        } else {\n', '            IERC20(token).safeTransfer(user, amount);\n', '        }\n', '    }\n', '\n', '    function setToken(address _token) external onlyGovernor {\n', '        require(_token != DeFiatToken, "SetToken: No token change");\n', '        require(_token != address(0), "SetToken: Must set token value");\n', '\n', '        DeFiatToken = _token;\n', '        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\n', '        emit TokenUpdated(msg.sender, DeFiatToken);\n', '    }\n', '\n', '    function setPoints(address _points) external onlyGovernor {\n', '        require(_points != DeFiatPoints, "SetPoints: No points change");\n', '        require(_points != address(0), "SetPoints: Must set points value");\n', '\n', '        DeFiatPoints = _points;\n', '        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\n', '        emit PointsUpdated(msg.sender, DeFiatPoints);\n', '    }\n', '\n', '    function setUniswap(address _router) external onlyGovernor {\n', '        require(_router != router, "SetUniswap: No uniswap change");\n', '        require(_router != address(0), "SetUniswap: Must set uniswap value");\n', '\n', '        router = _router;\n', '        weth = IUniswapV2Router02(router).WETH();\n', '        factory = IUniswapV2Router02(router).factory();\n', '        emit UniswapUpdated(msg.sender, router, weth, factory);\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 150\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']