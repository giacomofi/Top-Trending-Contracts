['pragma solidity ^0.5.16;\n', '\n', "import './Address.sol';\n", "import './SafeMath.sol';\n", "import './SafeERC20.sol';\n", "import './ERC20Detailed.sol';\n", "import './ERC20.sol';\n", '\n', '/**\n', ' * 发布的token\n', ' */\n', 'contract CodeToken is ERC20, ERC20Detailed {\n', '\n', '    // 引入SafeERC20库，其内部函数用于安全外部ERC20合约转账相关操作\n', '    using SafeERC20 for IERC20;\n', '    // 使用Address库中函数检查指定地址是否为合约地址\n', '    using Address for address;\n', '    // 引入SafeMath安全数学运算库，避免数学运算整型溢出\n', '    using SafeMath for uint;\n', '\n', '    // 存储治理管理员地址\n', '    address public governance;\n', '\n', '    // 存储指定地址的铸币权限\n', '    mapping (address => bool) public minters;\n', '\n', '\n', '    // 构造函数，设置代币名称、简称、精度；将发布合约的账号设置为治理账号\n', '    constructor () public ERC20Detailed("Bicthir", "BITI", 6) {\n', '        governance = tx.origin;\n', '    }\n', '\n', '    /**\n', '     * 铸币\n', '     *   拥有铸币权限地址向指定地址铸币\n', '     */\n', '    function mint(address account, uint256 amount) public {\n', '        require(minters[msg.sender], "!minter");\n', '        _mint(account, amount);\n', '    }\n', '\n', '    /**\n', '     * 设置治理管理员地址\n', '     */\n', '    function setGovernance(address _governance) public {\n', '        // 要求调用者必须为当前治理管理员地址\n', '        require(msg.sender == governance, "!governance");\n', '        // 更新governance\n', '        governance = _governance;\n', '    }\n', '\n', '    /**\n', '     * 添加铸币权限函数\n', '     */\n', '    function addMinter(address _minter) public {\n', '        // 要求调用者必须为当前治理管理员地址\n', '        require(msg.sender == governance, "!governance");\n', '        // 变更指定地址_minter的铸币权限为true\n', '        minters[_minter] = true;\n', '    }\n', '\n', '    /**\n', '     * 移除铸币权限函数\n', '     */\n', '    function removeMinter(address _minter) public {\n', '        // 要求调用者必须为当前治理管理员地址\n', '        require(msg.sender == governance, "!governance");\n', '        // 变更指定地址_minter的铸币权限为false\n', '        minters[_minter] = false;\n', '    }\n', '}']