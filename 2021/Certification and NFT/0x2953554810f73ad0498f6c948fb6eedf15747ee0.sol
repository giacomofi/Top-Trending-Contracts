['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface OracleSecurityModule {\n', '    function peek() external view returns (uint256, bool);\n', '    function peep() external view returns (uint256, bool);\n', '}\n', '\n', 'interface EACAggregatorProxy {\n', '    function decimals() external view returns (uint8);\n', '    function latestAnswer() external view returns (int256);\n', '}\n', '\n', 'contract OSMedianizer {\n', '    mapping(address => bool) public authorized;\n', '    address public governance;\n', '    address public token;\n', '\n', '    OracleSecurityModule public OSM;\n', '    EACAggregatorProxy public MEDIANIZER;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '        token = address(0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e);\n', '        OSM = OracleSecurityModule(0x208EfCD7aad0b5DD49438E0b6A0f38E951A50E5f);\n', '        MEDIANIZER = EACAggregatorProxy(0xA027702dbb89fbd58938e4324ac03B58d812b0E1);\n', '    }\n', '    \n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function setAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = true;\n', '    }\n', '    \n', '    function revokeAuthorized(address _authorized) external {\n', '        require(msg.sender == governance, "!governance");\n', '        authorized[_authorized] = false;\n', '    }\n', '    \n', '    function read() external view returns (uint price, bool osm) {\n', '        if (authorized[msg.sender]) {\n', '            return OSM.peek();\n', '        }\n', '        uint ans = uint(MEDIANIZER.latestAnswer());\n', '        return (ans * 1e18 / 10**uint(MEDIANIZER.decimals()), false);\n', '    }\n', '    \n', '    function foresight() external view returns (uint price, bool osm) {\n', '        if (authorized[msg.sender]) {\n', '            return OSM.peep();\n', '        }\n', '        uint ans = uint(MEDIANIZER.latestAnswer());\n', '        return (ans * 1e18 / 10**uint(MEDIANIZER.decimals()), false);\n', '    }\n', '}']