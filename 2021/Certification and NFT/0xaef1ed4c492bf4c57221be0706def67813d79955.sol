['// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', "import '../interfaces/IOracleRegistry.sol';\n", "import '../interfaces/IVault.sol';\n", "import '../interfaces/ICDPRegistry.sol';\n", "import '../interfaces/IVaultManagerParameters.sol';\n", "import '../interfaces/IVaultParameters.sol';\n", "import '../interfaces/IWrappedToUnderlyingOracle.sol';\n", "import '../interfaces/IForceTransferAssetStore.sol';\n", '\n', "import '../helpers/ReentrancyGuard.sol';\n", "import '../helpers/SafeMath.sol';\n", '\n', '/**\n', ' * @title LiquidationAuction02\n', ' **/\n', 'contract LiquidationAuction02 is ReentrancyGuard {\n', '    using SafeMath for uint;\n', '\n', '    IVault public immutable vault;\n', '    IVaultManagerParameters public immutable vaultManagerParameters;\n', '    ICDPRegistry public immutable cdpRegistry;\n', '    IForceTransferAssetStore public immutable forceTransferAssetStore;\n', '\n', '    uint public constant DENOMINATOR_1E2 = 1e2;\n', '    uint public constant WRAPPED_TO_UNDERLYING_ORACLE_TYPE = 11;\n', '\n', '    /**\n', '     * @dev Trigger when buyouts are happened\n', '    **/\n', '    event Buyout(address indexed asset, address indexed owner, address indexed buyer, uint amount, uint price, uint penalty);\n', '\n', '    modifier checkpoint(address asset, address owner) {\n', '        _;\n', '        cdpRegistry.checkpoint(asset, owner);\n', '    }\n', '\n', '    /**\n', '     * @param _vaultManagerParameters The address of the contract with Vault manager parameters\n', '     * @param _cdpRegistry The address of the CDP registry\n', '     * @param _forceTransferAssetStore The address of the ForceTransferAssetStore\n', '     **/\n', '    constructor(address _vaultManagerParameters, address _cdpRegistry, address _forceTransferAssetStore) {\n', '        require(\n', '            _vaultManagerParameters != address(0) &&\n', '            _forceTransferAssetStore != (address(0)),\n', '                "Unit Protocol: INVALID_ARGS"\n', '        );\n', '        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\n', '        vault = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault());\n', '        cdpRegistry = ICDPRegistry(_cdpRegistry);\n', '        forceTransferAssetStore = IForceTransferAssetStore(_forceTransferAssetStore);\n', '    }\n', '\n', '    /**\n', "     * @dev Buyouts a position's collateral\n", '     * @param asset The address of the main collateral token of a position\n', '     * @param owner The owner of a position\n', '     **/\n', '    function buyout(address asset, address owner) public nonReentrant checkpoint(asset, owner) {\n', '        require(vault.liquidationBlock(asset, owner) != 0, "Unit Protocol: LIQUIDATION_NOT_TRIGGERED");\n', '        uint startingPrice = vault.liquidationPrice(asset, owner);\n', '        uint blocksPast = block.number.sub(vault.liquidationBlock(asset, owner));\n', '        uint depreciationPeriod = vaultManagerParameters.devaluationPeriod(asset);\n', '        uint debt = vault.getTotalDebt(asset, owner);\n', '        uint penalty = debt.mul(vault.liquidationFee(asset, owner)).div(DENOMINATOR_1E2);\n', '        uint collateralInPosition = vault.collaterals(asset, owner);\n', '\n', '        uint collateralToLiquidator;\n', '        uint collateralToOwner;\n', '        uint repayment;\n', '\n', '        (collateralToLiquidator, collateralToOwner, repayment) = _calcLiquidationParams(\n', '            depreciationPeriod,\n', '            blocksPast,\n', '            startingPrice,\n', '            debt.add(penalty),\n', '            collateralInPosition\n', '        );\n', '\n', '        // ensure that at least 1 unit of token is transferred to cdp owner\n', '        if (collateralToOwner == 0 && forceTransferAssetStore.shouldForceTransfer(asset)) {\n', '            collateralToOwner = 1;\n', '            collateralToLiquidator = collateralToLiquidator.sub(1);\n', '        }\n', '\n', '        _liquidate(\n', '            asset,\n', '            owner,\n', '            collateralToLiquidator,\n', '            collateralToOwner,\n', '            repayment,\n', '            penalty\n', '        );\n', '    }\n', '\n', '    function _liquidate(\n', '        address asset,\n', '        address user,\n', '        uint collateralToBuyer,\n', '        uint collateralToOwner,\n', '        uint repayment,\n', '        uint penalty\n', '    ) private {\n', '        // send liquidation command to the Vault\n', '        vault.liquidate(\n', '            asset,\n', '            user,\n', '            collateralToBuyer,\n', '            0, // colToLiquidator\n', '            collateralToOwner,\n', '            0, // colToPositionOwner\n', '            repayment,\n', '            penalty,\n', '            msg.sender\n', '        );\n', '        // fire an buyout event\n', '        emit Buyout(asset, user, msg.sender, collateralToBuyer, repayment, penalty);\n', '    }\n', '\n', '    function _calcLiquidationParams(\n', '        uint depreciationPeriod,\n', '        uint blocksPast,\n', '        uint startingPrice,\n', '        uint debtWithPenalty,\n', '        uint collateralInPosition\n', '    )\n', '    internal\n', '    pure\n', '    returns(\n', '        uint collateralToBuyer,\n', '        uint collateralToOwner,\n', '        uint price\n', '    ) {\n', '        if (depreciationPeriod > blocksPast) {\n', '            uint valuation = depreciationPeriod.sub(blocksPast);\n', '            uint collateralPrice = startingPrice.mul(valuation).div(depreciationPeriod);\n', '            if (collateralPrice > debtWithPenalty) {\n', '                collateralToBuyer = collateralInPosition.mul(debtWithPenalty).div(collateralPrice);\n', '                collateralToOwner = collateralInPosition.sub(collateralToBuyer);\n', '                price = debtWithPenalty;\n', '            } else {\n', '                collateralToBuyer = collateralInPosition;\n', '                price = collateralPrice;\n', '            }\n', '        } else {\n', '            collateralToBuyer = collateralInPosition;\n', '        }\n', '    }\n', '}\n', '\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IOracleRegistry {\n', '\n', '    struct Oracle {\n', '        uint oracleType;\n', '        address oracleAddress;\n', '    }\n', '\n', '    function WETH (  ) external view returns ( address );\n', '    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\n', '    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\n', '    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\n', '    function maxOracleType (  ) external view returns ( uint256 );\n', '    function oracleByAsset ( address asset ) external view returns ( address );\n', '    function oracleByType ( uint256 ) external view returns ( address );\n', '    function oracleTypeByAsset ( address ) external view returns ( uint256 );\n', '    function oracleTypeByOracle ( address ) external view returns ( uint256 );\n', '    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\n', '    function setOracle ( uint256 oracleType, address oracle ) external;\n', '    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\n', '    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\n', '    function unsetOracle ( uint256 oracleType ) external;\n', '    function unsetOracleForAsset ( address asset ) external;\n', '    function unsetOracleForAssets ( address[] memory assets ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', 'interface IVault {\n', '    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\n', '    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\n', '    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\n', '    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\n', '    function chargeFee ( address asset, address user, uint256 amount ) external;\n', '    function col (  ) external view returns ( address );\n', '    function colToken ( address, address ) external view returns ( uint256 );\n', '    function collaterals ( address, address ) external view returns ( uint256 );\n', '    function debts ( address, address ) external view returns ( uint256 );\n', '    function depositCol ( address asset, address user, uint256 amount ) external;\n', '    function depositEth ( address user ) external payable;\n', '    function depositMain ( address asset, address user, uint256 amount ) external;\n', '    function destroy ( address asset, address user ) external;\n', '    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\n', '    function lastUpdate ( address, address ) external view returns ( uint256 );\n', '    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\n', '    function liquidationBlock ( address, address ) external view returns ( uint256 );\n', '    function liquidationFee ( address, address ) external view returns ( uint256 );\n', '    function liquidationPrice ( address, address ) external view returns ( uint256 );\n', '    function oracleType ( address, address ) external view returns ( uint256 );\n', '    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function spawn ( address asset, address user, uint256 _oracleType ) external;\n', '    function stabilityFee ( address, address ) external view returns ( uint256 );\n', '    function tokenDebts ( address ) external view returns ( uint256 );\n', '    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\n', '    function update ( address asset, address user ) external;\n', '    function usdp (  ) external view returns ( address );\n', '    function vaultParameters (  ) external view returns ( address );\n', '    function weth (  ) external view returns ( address payable );\n', '    function withdrawCol ( address asset, address user, uint256 amount ) external;\n', '    function withdrawEth ( address user, uint256 amount ) external;\n', '    function withdrawMain ( address asset, address user, uint256 amount ) external;\n', '}\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface ICDPRegistry {\n', '    \n', '    struct CDP {\n', '        address asset;\n', '        address owner;\n', '    }\n', '    \n', '    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\n', '    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\n', '    function checkpoint ( address asset, address owner ) external;\n', '    function cr (  ) external view returns ( address );\n', '    function getAllCdps (  ) external view returns ( CDP[] memory r );\n', '    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\n', '    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\n', '    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\n', '    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\n', '    function isAlive ( address asset, address owner ) external view returns ( bool );\n', '    function isListed ( address asset, address owner ) external view returns ( bool );\n', '    function vault (  ) external view returns ( address );\n', '}\n', '\n', 'interface IVaultManagerParameters {\n', '    function devaluationPeriod ( address ) external view returns ( uint256 );\n', '    function initialCollateralRatio ( address ) external view returns ( uint256 );\n', '    function liquidationDiscount ( address ) external view returns ( uint256 );\n', '    function liquidationRatio ( address ) external view returns ( uint256 );\n', '    function maxColPercent ( address ) external view returns ( uint256 );\n', '    function minColPercent ( address ) external view returns ( uint256 );\n', '    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\n', '    function setCollateral (\n', '        address asset,\n', '        uint256 stabilityFeeValue,\n', '        uint256 liquidationFeeValue,\n', '        uint256 initialCollateralRatioValue,\n', '        uint256 liquidationRatioValue,\n', '        uint256 liquidationDiscountValue,\n', '        uint256 devaluationPeriodValue,\n', '        uint256 usdpLimit,\n', '        uint256[] calldata oracles,\n', '        uint256 minColP,\n', '        uint256 maxColP\n', '    ) external;\n', '    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\n', '    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\n', '    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\n', '    function setLiquidationRatio ( address asset, uint256 newValue ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', 'interface IVaultParameters {\n', '    function canModifyVault ( address ) external view returns ( bool );\n', '    function foundation (  ) external view returns ( address );\n', '    function isManager ( address ) external view returns ( bool );\n', '    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\n', '    function liquidationFee ( address ) external view returns ( uint256 );\n', '    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\n', '    function setFoundation ( address newFoundation ) external;\n', '    function setLiquidationFee ( address asset, uint256 newValue ) external;\n', '    function setManager ( address who, bool permit ) external;\n', '    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\n', '    function setStabilityFee ( address asset, uint256 newValue ) external;\n', '    function setTokenDebtLimit ( address asset, uint256 limit ) external;\n', '    function setVaultAccess ( address who, bool permit ) external;\n', '    function stabilityFee ( address ) external view returns ( uint256 );\n', '    function tokenDebtLimit ( address ) external view returns ( uint256 );\n', '    function vault (  ) external view returns ( address );\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', 'interface IWrappedToUnderlyingOracle {\n', '    function assetToUnderlying(address) external view returns (address);\n', '}\n', '\n', 'interface IForceTransferAssetStore {\n', '    function shouldForceTransfer ( address ) external view returns ( bool );\n', '    function add ( address asset ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '{\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']