['# @version 0.2.8\n', '"""\n', '@title cToken Burner\n', '@notice Converts cTokens lending coins to USDC and transfers to `UnderlyingBurner`\n', '"""\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface cERC20:\n', '    def redeem(redeemTokens: uint256) -> uint256: nonpayable\n', '    def underlying() -> address: view\n', '\n', '\n', 'receiver: public(address)\n', 'recovery: public(address)\n', 'is_killed: public(bool)\n', '\n', 'owner: public(address)\n', 'emergency_owner: public(address)\n', 'future_owner: public(address)\n', 'future_emergency_owner: public(address)\n', '\n', '\n', '@external\n', 'def __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\n', '    """\n', '    @notice Contract constructor\n', '    @param _receiver Address that converted tokens are transferred to.\n', '                     Should be set to an `UnderlyingBurner` deployment.\n', '    @param _recovery Address that tokens are transferred to during an\n', '                     emergency token recovery.\n', '    @param _owner Owner address. Can kill the contract, recover tokens\n', '                  and modify the recovery address.\n', '    @param _emergency_owner Emergency owner address. Can kill the contract\n', '                            and recover tokens.\n', '    """\n', '    self.receiver = _receiver\n', '    self.recovery = _recovery\n', '    self.owner = _owner\n', '    self.emergency_owner = _emergency_owner\n', '\n', '\n', '@external\n', 'def burn(_coin: address) -> bool:\n', '    """\n', '    @notice Unwrap `_coin` and transfer to the underlying burner\n', '    @param _coin Address of the coin being unwrapped\n', '    @return bool success\n', '    """\n', '    assert not self.is_killed  # dev: is killed\n', '\n', '    # transfer coins from caller\n', '    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\n', '    if amount != 0:\n', '        ERC20(_coin).transferFrom(msg.sender, self, amount)\n', '\n', '    # get actual balance in case of transfer fee or pre-existing balance\n', '    amount = ERC20(_coin).balanceOf(self)\n', '\n', '    if amount != 0:\n', '        # unwrap cTokens for underlying asset\n', '        assert cERC20(_coin).redeem(amount) == 0\n', '        underlying: address = cERC20(_coin).underlying()\n', '        amount = ERC20(underlying).balanceOf(self)\n', '\n', '        # transfer underlying to underlying burner\n', '        response: Bytes[32] = raw_call(\n', '            underlying,\n', '            concat(\n', '                method_id("transfer(address,uint256)"),\n', '                convert(self.receiver, bytes32),\n', '                convert(amount, bytes32),\n', '            ),\n', '            max_outsize=32,\n', '        )\n', '        if len(response) != 0:\n', '            assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def recover_balance(_coin: address) -> bool:\n', '    """\n', '    @notice Recover ERC20 tokens from this contract\n', '    @dev Tokens are sent to the recovery address\n', '    @param _coin Token address\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '\n', '    amount: uint256 = ERC20(_coin).balanceOf(self)\n', '    response: Bytes[32] = raw_call(\n', '        _coin,\n', '        concat(\n', '            method_id("transfer(address,uint256)"),\n', '            convert(self.recovery, bytes32),\n', '            convert(amount, bytes32),\n', '        ),\n', '        max_outsize=32,\n', '    )\n', '    if len(response) != 0:\n', '        assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_recovery(_recovery: address) -> bool:\n', '    """\n', '    @notice Set the token recovery address\n', '    @param _recovery Token recovery address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.recovery = _recovery\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_killed(_is_killed: bool) -> bool:\n', '    """\n', '    @notice Set killed status for this contract\n', '    @dev When killed, the `burn` function cannot be called\n', '    @param _is_killed Killed status\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '    self.is_killed = _is_killed\n', '\n', '    return True\n', '\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.future_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_owner  # dev: only owner\n', '    self.owner = msg.sender\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def commit_transfer_emergency_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.emergency_owner  # dev: only owner\n', '    self.future_emergency_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_emergency_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_emergency_owner  # dev: only owner\n', '    self.emergency_owner = msg.sender\n', '\n', '    return True']