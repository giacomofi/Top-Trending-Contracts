['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/* Interface to allow Deafbeef owners to change token parameters all at once.\n', '   \n', '   Owners can also give editing access to up to 3 other users. \n', '   Signature can authenticate them on the deafbeef.com DAPP, to allow these\n', '   editors to perform off-chain previews of parameter changes without gas cost.\n', '\n', "   If editors have 'allowCommit' privilege, they can also commit those previews\n", '   permanently with setParams().\n', '\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.2;\n', '\n', 'abstract contract  extDeafbeef721  {\n', '  function numSeries() public pure virtual returns (uint256) ;\n', '  function mint(uint256 sid, address to) public virtual returns (uint256 _tokenId);\n', '  function setPrice(uint256 sid, uint256 p) public virtual;\n', '  function setTokenParam(uint256 tokenID, uint256 i, uint32 v) public virtual;\n', '  function ownerOf(uint256 tokenId) external virtual view returns (address owner);\n', '}\n', '\n', 'contract Changer {\n', '  extDeafbeef721 public deafbeef;\n', '  address admin_address;\n', '\n', '\n', '  event ParamsChanged(uint256 tokenID, uint32 p0,uint32 p1,uint32 p2,uint32 p3,uint32 p4,uint32 p5,uint32 p6);\n', '\n', '  //indexes which address/tokenID pairs have access to change params\n', '\n', '  struct EditStruct {\n', '    address[3] editors;\n', '    bool[3] allowCommit; //can editors also commit? or only preview\n', '    bool editingDisabled;\n', '  }\n', '  \n', '  //each tokenID can have up to 3 editor addresses\n', '  mapping(uint256 => EditStruct) editorAccess;\n', '\n', '  modifier requireOwner(uint256 tokenID) {\n', '    require(msg.sender == deafbeef.ownerOf(tokenID),"Not owner of token");\n', '    _;\n', '  }\n', '  modifier requireEditor(uint256 tokenID) {\n', '    if (editorAccess[tokenID].editingDisabled && msg.sender != deafbeef.ownerOf(tokenID)) {\n', '      revert("Editing, except by owner, is disabled");\n', '    }\n', '    \n', '    require(msg.sender == deafbeef.ownerOf(tokenID) ||\n', '\t    msg.sender == editorAccess[tokenID].editors[0] ||\n', '\t    msg.sender == editorAccess[tokenID].editors[1] ||\n', '\t    msg.sender == editorAccess[tokenID].editors[2]\n', '\t    ,"Not owner of token,nor token editor");\n', '    _;\n', '  }\n', '\n', '  //only with commit access\n', '  modifier requireCommiter(uint256 tokenID) {\n', '    if (editorAccess[tokenID].editingDisabled && msg.sender != deafbeef.ownerOf(tokenID)) {\n', '      revert("Editing, except by owner, is disabled");\n', '    }\n', '    \n', '    require(msg.sender == deafbeef.ownerOf(tokenID) ||\n', '\t    (msg.sender == editorAccess[tokenID].editors[0] && editorAccess[tokenID].allowCommit[0]) ||\n', '\t    (msg.sender == editorAccess[tokenID].editors[1] && editorAccess[tokenID].allowCommit[1]) ||\n', '\t    (msg.sender == editorAccess[tokenID].editors[2] && editorAccess[tokenID].allowCommit[2])\n', '\t    ,"Not owner of token,nor token editor");\n', '    _;\n', '  }\n', '  \n', '  modifier requireAdmin() {\n', '    require(admin_address == msg.sender,"Requires admin privileges");\n', '    _;\n', '  }\n', '  \n', '  constructor(address _contract_address) {\n', '    deafbeef = extDeafbeef721(_contract_address);\n', '    admin_address = msg.sender;\n', '  }\n', '\n', '  //Change the contract address this applies to. Probably never needed\n', '  function setDeafbeef(address _contract_address)  public requireAdmin virtual {\n', '    deafbeef = extDeafbeef721(_contract_address);    \n', '  }\n', '  \n', '  //only token owner can assign roles\n', '  function setEditRole(uint256 tokenID, uint256 i, address a, bool allowCommit) public requireOwner(tokenID) virtual {\n', '    editorAccess[tokenID].editors[i] = a;\n', '    editorAccess[tokenID].allowCommit[i] = allowCommit;    \n', '  }\n', '  \n', '  function getEditors(uint256 tokenID) public view returns(address editor0, address editor1, address editor2, bool allowCommit0, bool allowCommit1, bool allowCommit2, bool editingDisabled)  {\n', '    editingDisabled = editorAccess[tokenID].editingDisabled;\n', '    editor0 = editorAccess[tokenID].editors[0];\n', '    editor1 = editorAccess[tokenID].editors[1];\n', '    editor2 = editorAccess[tokenID].editors[2];\n', '\n', '    allowCommit0 = editorAccess[tokenID].allowCommit[0];\n', '    allowCommit1 = editorAccess[tokenID].allowCommit[1];\n', '    allowCommit2 = editorAccess[tokenID].allowCommit[2];    \n', '  }\n', '\n', '  // Master switch allowing owner to temporarily disable editing, without deleting the authentication list\n', '  function toggleEditing(uint256 tokenID, bool allowEditing) public requireOwner(tokenID) virtual {\n', '    editorAccess[tokenID].editingDisabled = !allowEditing;\n', '  }\n', '  \n', '  //sets many parameters at once. Must be an editor with allowCommit access\n', '  /*\n', '  function setParams(uint256 tokenID, uint[] memory i, uint32[] memory v) public requireCommiter(tokenID) virtual {\n', '    require(v.length == i.length);\n', '    for (uint j=0;j<v.length;j++) {\n', '      deafbeef.setTokenParam(tokenID,i[j],v[j]);\n', '    }\n', '  }\n', '  */\n', '  \n', '  function setParams(uint256 tokenID, uint32[] memory v) public requireCommiter(tokenID) virtual {\n', '    require(v.length==7,"Must have all parameters in order from 0-6");\n', '    for (uint j=0;j<v.length;j++) {\n', '      deafbeef.setTokenParam(tokenID,j,v[j]);\n', '    }\n', '    emit ParamsChanged(tokenID,v[0],v[1],v[2],v[3],v[4],v[5],v[6]);\n', '  }\n', '\n', '}']