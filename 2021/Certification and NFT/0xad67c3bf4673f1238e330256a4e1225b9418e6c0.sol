['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// Spent ETH Oracle for Stabinol\n', '// This oracle collects eth data from various whitelisted data sources to generate a database of eth spent data for users\n', '// The ETH spent data will be used by the Stabinol Claimer to determine how much cashback to reward to STOL LP holders\n', '// \n', '// Governace can update whitelisted addresses, change eth spent balances per user and update the iteration of the oracle (which resets all balances to 0)\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'contract StabinolSpentETHOracle {\n', '\n', '    address public governance;\n', '    uint256 private _globalIteration; // This resets all the balances back to 0\n', '    \n', '    mapping(address => UserInfo) private allUsersInfo;\n', '    mapping(address => bool) private providers; // This will be a list of all providers eligible\n', '    \n', '    event GovernanceUpdated(address _add);\n', '    event ProviderAdded(address _add);\n', '    event ProviderRemoved(address _add);\n', '    event NewIteration(uint256 _iter);\n', '    event UserETHSpentUpdated(address _updater, address _user, uint256 _amount);\n', '    \n', '    // Structs\n', '    struct UserInfo {\n', '        uint256 ethSpent; // The amount of eth spent since last claim\n', '        uint256 iteration; // The iteration version of the user\n', '    }\n', '\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '    \n', '    modifier onlyGovernance() {\n', '        require(governance == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function getCurrentIteration() external view returns (uint256) {\n', '        return _globalIteration;\n', '    }\n', '    \n', '    function getUserETHSpent(address _add) external view returns (uint256) {\n', '        if(allUsersInfo[_add].iteration < _globalIteration){\n', '            return 0; // The user is on an old iteration of this oracle\n', '        }else{\n', '            return allUsersInfo[_add].ethSpent; // Get the eth septn\n', '        }\n', '    }\n', '    \n', '    function getUserIteration(address _add) external view returns (uint256) {\n', '        return allUsersInfo[_add].iteration;\n', '    }\n', '    \n', '    function isAddressProvider(address _add) public view returns (bool) {\n', '        return providers[_add];\n', '    }\n', '    \n', '    // Write functions\n', '    // Whitelisted contracts can call this oracle to update the amount the user spent to perform a call\n', '    function addUserETHSpent(address _add, uint256 _ethback) external returns (bool) {\n', '        if(isAddressProvider(msg.sender) == false){\n', "            return false; // Don't revert, just return false instead\n", '        }\n', '        if(allUsersInfo[_add].iteration < _globalIteration){\n', '            allUsersInfo[_add].iteration = _globalIteration;\n', '            allUsersInfo[_add].ethSpent = 0;\n', '        }\n', '        allUsersInfo[_add].ethSpent = allUsersInfo[_add].ethSpent + _ethback; // Overflow is ok\n', '        emit UserETHSpentUpdated(msg.sender, _add, _ethback); // Create an event\n', '        return true; // This function will never revert so safe to be integrated\n', '    }\n', '    \n', '    // Governance functions\n', '    function updateGovernanceAddress(address _add) external onlyGovernance {\n', '        require(_add != address(0), "Can\'t set to 0 address");\n', '        governance = _add;\n', '        emit GovernanceUpdated(_add);\n', '    }\n', '    \n', '    function governanceUpdateUserETHSpent(address _add, uint256 amount) external onlyGovernance {\n', '        // Governance can update users balances manually in case of errors\n', '        allUsersInfo[_add].iteration = _globalIteration; // Set to the current iteration\n', '        allUsersInfo[_add].ethSpent = amount;\n', '    }\n', '    \n', '    function governanceAddToProviders(address _add) external onlyGovernance {\n', '        providers[_add] = true;\n', '        emit ProviderAdded(_add);\n', '    }\n', '    \n', '    function governanceRemoveFromProviders(address _add) external onlyGovernance {\n', '        providers[_add] = false;\n', '        emit ProviderRemoved(_add);\n', '    }\n', '    \n', '    function governanceNewIteration() external onlyGovernance {\n', '        // This will reset all ETH spends back to zero\n', '        _globalIteration = _globalIteration + 1;\n', '        emit NewIteration(_globalIteration);\n', '    }\n', '    \n', '}']