['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-20\n', '*/\n', '\n', '/*\n', '    The farming contract\n', '    riptide.finance\n', '\n', '    MasterChef\n', '    + restaking rewards\n', '    + dual toggled token rewards\n', '\n', '    Thanks sushiswap, surf, niceee, dracula.\n', '\n', '    @nightg0at\n', '    SPDX-License-Identifier: MIT\n', '*/\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/ds-math/math.sol\n', '\n', '/// math.sol -- mixin for inline numerical wizardry\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// GPL-3.0-or-later\n', '\n', 'pragma solidity >0.4.13;\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    //rounds to zero if x*y < RAY / 2\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/restaking/interfaces/IStakingAdapter.sol\n', '\n', '/*\n', '  The interface for any of our staking adapters\n', '\n', '  @nightg0at\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IStakingAdapter {\n', '    function claim() external;\n', '    function deposit(uint amount) external;\n', '    function withdraw(uint amount) external;\n', '    function emergencyWithdraw() external;\n', '    function rewardTokenAddress() external view returns(address);\n', '    function lpTokenAddress() external view returns(address);\n', '    function pending() external view returns (uint256);\n', '    function balance() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ITideToken.sol\n', '\n', '/*\n', '  TideToken interface\n', '\n', '  @nightg0at\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface ITideToken is IERC20 {\n', '  function owner() external view returns (address);\n', '  function mint(address _to, uint256 _amount) external;\n', '  function setParent(address _newConfig) external;\n', '  function wipeout(address _recipient, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/Poseidon.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\n', '//\n', "// Note that it's ownable and the owner wields tremendous power. The ownership\n", '// will be transferred to a governance smart contract once SUSHI is sufficiently\n', '// distributed and the community can show to govern itself.\n', '//\n', "// Have fun reading it. Hopefully it's bug-free. God bless.\n", 'contract Poseidon is Ownable, DSMath {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 tidalRewardDebt; // Reward debt. See explanation below.\n', '        uint256 riptideRewardDebt; // Reward debt. See explanation below.\n', '        uint256 otherRewardDebt;\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;           // Address of LP token contract.\n', '        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n', '        uint256 withdrawFee; // Amount of LP liquidated on withdraw (often 0)\n', '        uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\n', '        uint256 accTidalPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n', '        uint256 accRiptidePerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n', '        uint256 accOtherPerShare; // Accumulated OTHERs per share, times 1e12. See below.\n', '        IStakingAdapter adapter; // Manages external farming\n', '        IERC20 otherToken; // The OTHER reward token for this pool, if any\n', '    }\n', '\n', '    IUniswapV2Router02 router;\n', '\n', '    ITideToken public tidal;\n', '    ITideToken public riptide;\n', '\n', '    // Dev address.\n', '    address public devaddr;\n', '    // Fee address\n', '    address public feeaddr;\n', '    // Reward tokens created per block.\n', '    uint256 public baseRewardPerBlock = 2496e11; // base reward token emission (0.0002496)\n', '    uint256 public devDivisor = 238; // dev fund of 4.2%, 1000/238 = 4.20168...\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when SUSHI mining starts.\n', '    uint256 public startBlock;\n', '\n', "    // Don't add the same pool twice\n", '    mapping (address => bool) private poolIsAdded;\n', '\n', '    // Tide phase. The address of either tidal or riptide. Tidal to start\n', '    address public phase;\n', '    uint256 public constant TIDAL_CAP = 69e18;\n', '    uint256 public constant TIDAL_VERTEX = 42e18;\n', '\n', '    // weather\n', '    bool public stormy = false;\n', '    uint256 public stormDivisor = 2;\n', '\n', '    // weather god\n', '    address public zeus;\n', '\n', '    // surf and whirlpool\n', '    address public surf;\n', '    address public whirlpool;\n', '\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    constructor(\n', '        IUniswapV2Router02 _router,\n', '        ITideToken _tidal,\n', '        ITideToken _riptide,\n', '        address _surf, // 0xEa319e87Cf06203DAe107Dd8E5672175e3Ee976c\n', '        address _whirlpool, // 0x999b1e6EDCb412b59ECF0C5e14c20948Ce81F40b\n', '        address _devaddr,\n', '        uint256 _startBlock\n', '    ) public {\n', '        router = _router;\n', '        tidal = _tidal;\n', '        riptide = _riptide;\n', '        surf = _surf;\n', '        whirlpool = _whirlpool;\n', '        devaddr = _devaddr;\n', '        feeaddr = _devaddr;\n', '        startBlock = _startBlock;\n', '        phase = address(_tidal);\n', '    }\n', '\n', '    // rudimentary checks for the staking adapter\n', '    modifier validAdapter(IStakingAdapter _adapter) {\n', '        require(address(_adapter) != address(0), "no adapter specified");\n', '        require(_adapter.rewardTokenAddress() != address(0), "no other reward token specified in staking adapter");\n', '        require(_adapter.lpTokenAddress() != address(0), "no staking token specified in staking adapter");\n', '        _;\n', '    }\n', '\n', '    modifier onlyZeus() {\n', '        require(msg.sender == zeus, "only zeus can call this method");\n', '        _;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // This is assumed to not be a restaking pool.\n', '    // Restaking can be added later or with addWithRestaking() instead of add()\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, uint256 _withdrawFee, bool _withUpdate) public onlyOwner {\n', "        require(poolIsAdded[address(_lpToken)] == false, 'add: pool already added');\n", '        poolIsAdded[address(_lpToken)] = true;\n', '\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            withdrawFee: _withdrawFee,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accTidalPerShare: 0,\n', '            accRiptidePerShare: 0,\n', '            accOtherPerShare: 0,\n', '            adapter: IStakingAdapter(0),\n', '            otherToken: IERC20(0)\n', '        }));\n', '    }\n', '\n', '    // Add a new lp to the pool that uses restaking. Can only be called by the owner.\n', '    function addWithRestaking(uint256 _allocPoint, uint256 _withdrawFee, bool _withUpdate, IStakingAdapter _adapter) public onlyOwner validAdapter(_adapter) {\n', '        IERC20 _lpToken = IERC20(_adapter.lpTokenAddress());\n', '\n', "        require(poolIsAdded[address(_lpToken)] == false, 'add: pool already added');\n", '        poolIsAdded[address(_lpToken)] = true;\n', '        \n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            withdrawFee: _withdrawFee,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accTidalPerShare: 0,\n', '            accRiptidePerShare: 0,\n', '            accOtherPerShare: 0,\n', '            adapter: _adapter,\n', '            otherToken: IERC20(_adapter.rewardTokenAddress())\n', '        }));\n', '    }\n', '\n', "    // Update the given pool's SUSHI allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // Set a new restaking adapter.\n', '    function setRestaking(uint256 _pid, IStakingAdapter _adapter, bool _claim) public onlyOwner validAdapter(_adapter) {\n', '        if (_claim) {\n', '            updatePool(_pid);\n', '        }\n', '        if (isRestaking(_pid)) {\n', '            withdrawRestakedLP(_pid);\n', '        }\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(address(pool.lpToken) == _adapter.lpTokenAddress(), "LP mismatch");\n', '        pool.accOtherPerShare = 0;\n', '        pool.adapter = _adapter;\n', '        pool.otherToken = IERC20(_adapter.rewardTokenAddress());\n', '\n', '        // transfer LPs to new target if we have any\n', '        uint256 poolBal = pool.lpToken.balanceOf(address(this));\n', '        if (poolBal > 0) {\n', '            pool.lpToken.safeTransfer(address(pool.adapter), poolBal);\n', '            pool.adapter.deposit(poolBal);\n', '        }\n', '    }\n', '\n', '    // remove restaking\n', '    function removeRestaking(uint256 _pid, bool _claim) public onlyOwner {\n', '        require(isRestaking(_pid), "not a restaking pool");\n', '        if (_claim) {\n', '            updatePool(_pid);\n', '        }\n', '        withdrawRestakedLP(_pid);\n', '        poolInfo[_pid].adapter = IStakingAdapter(address(0));\n', '        require(!isRestaking(_pid), "failed to remove restaking");\n', '    }\n', '\n', '    // should always be called with update unless prohibited by gas\n', '    function setWeather(bool _isStormy, bool _withUpdate) public onlyZeus {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        stormy = _isStormy;\n', '    }\n', '\n', '    function setWeatherConfig(address _newZeus, uint256 _newStormDivisor) public onlyOwner {\n', '        require(_newStormDivisor != 0, "Cannot divide by zero");\n', '        stormDivisor = _newStormDivisor;\n', '        zeus = _newZeus; // can be address(0)\n', '    }\n', '\n', '    function setRewardPerBlock(uint256 _newReward) public onlyOwner {\n', '        baseRewardPerBlock = _newReward;\n', '    }\n', '\n', '    // used if surf.finance upgrade their contracts\n', '    function setSurfConfig(address _newSurf, address _newWhirlpool) public onlyOwner {\n', '        surf = _newSurf;\n', '        whirlpool = _newWhirlpool;\n', '    }\n', '\n', '    function _tokensPerBlock(address _tideToken) internal view returns (uint256) {\n', '        if (phase == _tideToken) {\n', '            if (stormy) {\n', '                return baseRewardPerBlock.div(stormDivisor);\n', '            } else {\n', '                return baseRewardPerBlock;\n', '            }\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function tokensPerBlock(address _tideToken) external view returns (uint256) {\n', '        return _tokensPerBlock(_tideToken);\n', '    }\n', '\n', '    // View function to see pending tide tokens on frontend.\n', '    function pendingTokens(uint256 _pid, address _user) external view returns (uint256, uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accTidalPerShare = pool.accTidalPerShare;\n', '        uint256 accRiptidePerShare = pool.accRiptidePerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (isRestaking(_pid)) {\n', '            lpSupply = pool.adapter.balance();\n', '        }\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', "            // we don't have a bonus multiplier stage, so just work out the unclaimed blockspan\n", '            uint256 span = block.number.sub(pool.lastRewardBlock);\n', '            // get pending tokens if we are in phase\n', '            uint256 pendingTidal = 0;\n', '            uint256 pendingRiptide = 0;\n', '            if (phase == address(tidal)) {\n', '                pendingTidal = span.mul(_tokensPerBlock(address(tidal))).mul(pool.allocPoint).div(totalAllocPoint);\n', '            } else if (phase == address(riptide)) {\n', '                pendingRiptide = span.mul(_tokensPerBlock(address(riptide))).mul(pool.allocPoint).div(totalAllocPoint);\n', '            }\n', '            accTidalPerShare = accTidalPerShare.add(pendingTidal.mul(1e12).div(lpSupply));\n', '            accRiptidePerShare = accRiptidePerShare.add(pendingRiptide.mul(1e12).div(lpSupply));\n', '        }\n', '        uint256 unclaimedTidal = user.amount.mul(accTidalPerShare).div(1e12).sub(user.tidalRewardDebt);\n', '        uint256 unclaimedRiptide = user.amount.mul(accRiptidePerShare).div(1e12).sub(user.riptideRewardDebt);\n', '        return (unclaimedTidal, unclaimedRiptide);\n', '    }\n', '\n', '    // View function to see our pending OTHERs on frontend (whatever the restaked reward token is)\n', '    function pendingOther(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accOtherPerShare = pool.accOtherPerShare;\n', '        uint256 lpSupply = pool.adapter.balance();\n', ' \n', '        if (lpSupply != 0) {\n', '            uint256 otherReward = pool.adapter.pending();\n', '            accOtherPerShare = accOtherPerShare.add(otherReward.mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '\n', '        updatePhase();\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '\n', '        uint256 lpSupply = getPoolSupply(_pid);\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        if (isRestaking(_pid)) {\n', '            uint256 pendingOtherTokens = pool.adapter.pending();\n', '            if (pendingOtherTokens >= 0) {\n', '                uint256 otherBalanceBefore = pool.otherToken.balanceOf(address(this));\n', '                pool.adapter.claim();\n', '                uint256 otherBalanceAfter = pool.otherToken.balanceOf(address(this));\n', '                pendingOtherTokens = otherBalanceAfter.sub(otherBalanceBefore);\n', '                pool.accOtherPerShare = pool.accOtherPerShare.add(pendingOtherTokens.mul(1e12).div(lpSupply));\n', '            }\n', '        }\n', '\n', '        uint256 span = block.number.sub(pool.lastRewardBlock);\n', '        if (phase == address(tidal)) {\n', '            uint256 tidalReward = span.mul(_tokensPerBlock(address(tidal))).mul(pool.allocPoint).div(totalAllocPoint);\n', '            uint256 devTidalReward = tidalReward.mul(10).div(devDivisor);\n', '            if (tidal.totalSupply().add(tidalReward).add(devTidalReward) > TIDAL_CAP) {\n', '                // we would exceed the cap\n', '                uint256 totalTidalReward = TIDAL_CAP.sub(tidal.totalSupply());\n', '                // split proportionally\n', '                uint256 newDevTidalReward = totalTidalReward.mul(10).div(devDivisor-10); // ~ reverse percentage approximation\n', '                uint256 newTidalReward = totalTidalReward.sub(newDevTidalReward);\n', '                tidal.mint(devaddr, newDevTidalReward); \n', '                tidal.mint(address(this), newTidalReward);\n', '                pool.accTidalPerShare = pool.accTidalPerShare.add(newTidalReward.mul(1e12).div(lpSupply));\n', '\n', '                uint256 totalRiptideReward = tidalReward.sub(totalTidalReward);\n', '                uint256 newDevRiptideReward = totalRiptideReward.mul(10).div(devDivisor-10);\n', '                uint256 newRiptideReward = totalRiptideReward.sub(newDevRiptideReward);\n', '                riptide.mint(devaddr, newDevRiptideReward);\n', '                riptide.mint(devaddr, newRiptideReward);\n', '                pool.accRiptidePerShare = pool.accRiptidePerShare.add(newRiptideReward.mul(1e12).div(lpSupply));\n', '            } else {\n', '                tidal.mint(devaddr, devTidalReward); \n', '                tidal.mint(address(this), tidalReward);\n', '                pool.accTidalPerShare = pool.accTidalPerShare.add(tidalReward.mul(1e12).div(lpSupply));\n', '            }\n', '        } else {\n', '            uint256 riptideReward = span.mul(_tokensPerBlock(address(riptide))).mul(pool.allocPoint).div(totalAllocPoint);\n', '            riptide.mint(devaddr, riptideReward.mul(10).div(devDivisor));\n', '            riptide.mint(address(this), riptideReward);\n', '            pool.accRiptidePerShare = pool.accRiptidePerShare.add(riptideReward.mul(1e12).div(lpSupply));\n', '        }\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Internal view function to get the amount of LP tokens staked in the specified pool\n', '    function getPoolSupply(uint256 _pid) internal view returns (uint256 lpSupply) {\n', '        PoolInfo memory pool = poolInfo[_pid];\n', '        if (isRestaking(_pid)) {\n', '            lpSupply = pool.adapter.balance();\n', '        } else {\n', '            lpSupply = pool.lpToken.balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function isRestaking(uint256 _pid) public view returns (bool outcome) {\n', '        if (address(poolInfo[_pid].adapter) != address(0)) {\n', '            outcome = true;\n', '        } else {\n', '            outcome = false;\n', '        }\n', '    }\n', '\n', '    // Deposit LP tokens to MasterChef for SUSHI allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        uint256 pendingOtherTokens = 0;\n', '        if (user.amount > 0) {\n', '            uint256 pendingTidal = user.amount.mul(pool.accTidalPerShare).div(1e12).sub(user.tidalRewardDebt);\n', '            if(pendingTidal > 0) {\n', '                safeTideTransfer(msg.sender, pendingTidal, tidal);\n', '            }\n', '            uint256 pendingRiptide = user.amount.mul(pool.accRiptidePerShare).div(1e12).sub(user.riptideRewardDebt);\n', '            if(pendingRiptide > 0) {\n', '                safeTideTransfer(msg.sender, pendingRiptide, riptide);\n', '            }\n', '            pendingOtherTokens = user.amount.mul(pool.accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\n', '        }\n', '        if(_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            if (isRestaking(_pid)) {\n', '                pool.lpToken.safeTransfer(address(pool.adapter), _amount);\n', '                pool.adapter.deposit(_amount);\n', '            }\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', "        // we can't guarantee we have the tokens until after adapter.deposit()\n", '        if (pendingOtherTokens > 0) {\n', '            safeOtherTransfer(msg.sender, pendingOtherTokens, _pid);\n', '        }\n', '        user.tidalRewardDebt = user.amount.mul(pool.accTidalPerShare).div(1e12);\n', '        user.riptideRewardDebt = user.amount.mul(pool.accRiptidePerShare).div(1e12);\n', '        user.otherRewardDebt = user.amount.mul(pool.accOtherPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pendingTidal = user.amount.mul(pool.accTidalPerShare).div(1e12).sub(user.tidalRewardDebt);\n', '        if(pendingTidal > 0) {\n', '            safeTideTransfer(msg.sender, pendingTidal, tidal);\n', '        }\n', '        uint256 pendingRiptide = user.amount.mul(pool.accRiptidePerShare).div(1e12).sub(user.riptideRewardDebt);\n', '        if(pendingRiptide > 0) {\n', '            safeTideTransfer(msg.sender, pendingRiptide, riptide);\n', '        }\n', '        uint256 pendingOtherTokens = user.amount.mul(pool.accOtherPerShare).div(1e12).sub(user.otherRewardDebt);\n', '        if(_amount > 0) {\n', '            uint256 amount = _amount;\n', '            user.amount = user.amount.sub(amount);\n', '            if (isRestaking(_pid)) {\n', '                pool.adapter.withdraw(amount);\n', '            }\n', '            if (pool.withdrawFee > 0) {\n', '                uint256 fee = wmul(amount, pool.withdrawFee);\n', '                amount = amount.sub(fee);\n', '                processWithdrawFee(address(pool.lpToken), fee);\n', '            }\n', '            pool.lpToken.safeTransfer(address(msg.sender), amount);\n', '        }\n', "        //  we can't guarantee we have the tokens until after adapter.withdraw()\n", '        if (pendingOtherTokens > 0) {\n', '            safeOtherTransfer(msg.sender, pendingOtherTokens, _pid);\n', '        }\n', '        user.tidalRewardDebt = user.amount.mul(pool.accTidalPerShare).div(1e12);\n', '        user.riptideRewardDebt = user.amount.mul(pool.accRiptidePerShare).div(1e12);\n', '        user.otherRewardDebt = user.amount.mul(pool.accOtherPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    function processWithdrawFee(address _lpToken, uint256 _fee) private {\n', '        // get token addresses & balances\n', '        address token0 = IUniswapV2Pair(_lpToken).token0();\n', '        address token1 = IUniswapV2Pair(_lpToken).token1();\n', '\n', '        // remove liquidity\n', '        IERC20(_lpToken).approve(address(router), _fee);\n', '        (uint256 token0Amount, uint256 token1Amount) = router.removeLiquidity(token0, token1, _fee, 0, 0, address(this), block.timestamp);\n', '        IERC20(_lpToken).approve(address(router), 0);\n', '\n', '        address[] memory surfPath = new address[](2);\n', '        surfPath[1] = surf;\n', '\n', '        // sell and transfer\n', '        if (token0 == surf) {\n', '            surfPath[0] = token1;\n', '            router.swapExactTokensForTokens(\n', '                token1Amount,\n', '                0,\n', '                surfPath,\n', '                whirlpool,\n', '                block.timestamp\n', '            );\n', '            IERC20(token0).transfer(whirlpool, token0Amount);\n', '        } else if (token1 == surf) {\n', '            surfPath[0] = token0;\n', '            router.swapExactTokensForTokens(\n', '                token0Amount,\n', '                0,\n', '                surfPath,\n', '                whirlpool,\n', '                block.timestamp\n', '            );\n', '            IERC20(token1).transfer(whirlpool, token1Amount);\n', '        } else {\n', '            // this is not a reward/surf pair. Transfer to fee wallet\n', '            IERC20(token0).transfer(feeaddr, token0Amount);\n', '            IERC20(token1).transfer(feeaddr, token1Amount);\n', '        }\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 amount = user.amount;\n', '        user.amount = 0;\n', '        user.tidalRewardDebt = 0;\n', '        user.riptideRewardDebt = 0;\n', '        if (isRestaking(_pid)) {\n', '            pool.adapter.withdraw(amount);\n', '        }\n', '        if (pool.withdrawFee > 0) {\n', '            uint256 fee = wmul(amount, pool.withdrawFee);\n', '            amount = amount.sub(fee);\n', '            pool.lpToken.transfer(feeaddr, fee);\n', '        }\n', '        pool.lpToken.safeTransfer(address(msg.sender), amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from the restaking target back here\n', '    // Does not claim rewards\n', '    function withdrawRestakedLP(uint256 _pid) internal {\n', '        require(isRestaking(_pid), "not a restaking pool");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint lpBalanceBefore = pool.lpToken.balanceOf(address(this));\n', '        pool.adapter.emergencyWithdraw();\n', '        uint lpBalanceAfter = pool.lpToken.balanceOf(address(this));\n', '        emit EmergencyWithdraw(address(pool.adapter), _pid, lpBalanceAfter.sub(lpBalanceBefore));\n', '    }\n', '\n', '\n', '    // Safe tide token transfer function, just in case if rounding error causes pool to not have enough tokens of type _tideToken\n', '    function safeTideTransfer(address _to, uint256 _amount, ITideToken _tideToken) internal {\n', '        uint256 tokenBal = _tideToken.balanceOf(address(this));\n', '        if (_amount > tokenBal) {\n', '            _tideToken.transfer(_to, tokenBal);\n', '        } else {\n', '            _tideToken.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // as above but for any restaking token\n', '    function safeOtherTransfer(address _to, uint256 _amount, uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 otherBal = pool.otherToken.balanceOf(address(this));\n', '        if (_amount > otherBal) {\n', '            pool.otherToken.transfer(_to, otherBal);\n', '        } else {\n', '            pool.otherToken.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Update dev fee address\n', '    function dev(address _devaddr) public onlyOwner {\n', '        devaddr = _devaddr;\n', '    }\n', '\n', '    // Set dev fee divisor\n', '    function setNewDevDivisor(uint256 _newDivisor) public onlyOwner {\n', '        require(_newDivisor >= 145, "Dev fee too high"); // ~6.9% max\n', '        devDivisor = _newDivisor;\n', '    }\n', '\n', '    // Update withdraw fee recipient\n', '    function fee(address _feeaddr) public onlyOwner {\n', '        feeaddr = _feeaddr;\n', '    }\n', '\n', '    // transfer ownership from this contract to a new owner\n', '    function transferTokenOwnership(address _owned, address _newOwner) public onlyOwner {\n', '        Ownable(_owned).transferOwnership(_newOwner);\n', '    }\n', '\n', '    /*\n', '        set a new tidal token\n', '        before calling, ensure:\n', '            tokens per block is set to 0 beforehand and reinstated afterwards\n', '            this is the sibling of riptide\n', '            poseidon is the owner\n', "            poseidon's new and old tidal balances match\n", '    */\n', '    function setNewTidalToken(address _newTidal) public onlyOwner {\n', '        require(ITideToken(_newTidal).owner() == address(this), "Poseidon not the owner");\n', '        if (phase == address(tidal)) phase = _newTidal;\n', '        tidal = ITideToken(_newTidal);\n', '    }\n', '\n', '    /*\n', '        set a new riptide token\n', '        before calling, see above\n', '    */\n', '    function setNewRiptideToken(address _newRiptide) public onlyOwner {\n', '        require(ITideToken(_newRiptide).owner() == address(this), "Poseidon not the owner");\n', '        if (phase == address(riptide)) phase = _newRiptide;\n', '        riptide = ITideToken(_newRiptide);\n', '    }\n', '\n', '    // return the active reward token (the phase; either tide or riptide)\n', '    function getPhase() public view returns (address) {\n', '        return phase;\n', '    }\n', '\n', '    // called every pool update.\n', '    function updatePhase() internal {\n', '        if (phase == address(tidal) && tidal.totalSupply() >= TIDAL_CAP){\n', '            phase = address(riptide);\n', '        }\n', '        else if (phase == address(riptide) && tidal.totalSupply() < TIDAL_VERTEX) {\n', '            phase = address(tidal);\n', '        }\n', '    }\n', '\n', '}']