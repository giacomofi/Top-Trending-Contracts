['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', '/*\n', ' * @dev Context variant with ERC2771 support.\n', ' */\n', 'abstract contract ERC2771Context is Context {\n', '    address constant _trustedForwarder = 0xAa3E82b4c4093b4bA13Cb5714382C99ADBf750cA;\n', '\n', '    constructor() {        \n', '    }\n', '\n', '    function isTrustedForwarder(address forwarder) public view virtual returns(bool) {\n', '        return forwarder == _trustedForwarder;\n', '    }\n', '\n', '    function _msgSender() internal view virtual override returns (address sender) {\n', '        if (isTrustedForwarder(msg.sender)) {\n', '            // The assembly code is more direct than the Solidity version using `abi.decode`.\n', '            assembly { sender := shr(96, calldataload(sub(calldatasize(), 20))) }\n', '        } else {\n', '            return super._msgSender();\n', '        }\n', '    }\n', '\n', '    function _msgData() internal view virtual override returns (bytes calldata) {\n', '        if (isTrustedForwarder(msg.sender)) {\n', '            return msg.data[:msg.data.length-20];\n', '        } else {\n', '            return super._msgData();\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.6;\n', '\n', 'abstract contract Bakc {\n', '    function ownerOf(uint256 tokenId) public view virtual returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.6;\n', '\n', 'import "@openzeppelin/contracts/security/Pausable.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/metatx/ERC2771Context.sol";\n', 'import "./Bakc.sol";\n', '\n', 'contract TestReceiver is ERC2771Context, Pausable, Ownable {\t\n', '    struct AmendmentMetadata {\n', '        address amender;\n', '        uint timestamp;\n', '        bool isAmendable;\n', '    }\n', '\n', '    mapping (uint => AmendmentMetadata) private _amendmentsRequests;\n', '    Bakc private bakc;\n', '\n', '    constructor(address dependentContractAddress) \n', '        ERC2771Context() {\n', '        bakc = Bakc(dependentContractAddress);\n', '    }\n', '\n', '    function initializeMetadata(uint[] memory ids) external onlyOwner {\n', '        for(uint i = 0; i < ids.length; i++) {\n', '            _amendmentsRequests[ids[i]] = AmendmentMetadata(address(0), 0, true);\n', '        }\n', '    }\n', '\n', '    function amendmentRequested(uint tokenId) public view returns (bool) {\n', '        return \n', '            _amendmentsRequests[tokenId].isAmendable && \n', '            _amendmentsRequests[tokenId].amender != address(0);        \n', '    }\n', '\n', '    function isAmendable(uint tokenId) public view returns (bool) {\n', '        return _amendmentsRequests[tokenId].isAmendable;\n', '    }\n', '\n', '    function togglePausedState() public onlyOwner {\n', '        paused() ? _unpause() : _pause();\n', '    }\n', '    \n', '    function requestAmendment(uint tokenId) external whenNotPaused {\n', '        require(_amendmentsRequests[tokenId].isAmendable, "Requested Token ID isn\'t amendable");\n', '        require(!amendmentRequested(tokenId), "Can only request an amendment once");\n', '        require(bakc.ownerOf(tokenId) == _msgSender(), "Token ID must be owned by amender");\n', '        _amendmentsRequests[tokenId] = AmendmentMetadata(_msgSender(), block.timestamp, true);\n', '    }\n', '\n', '    function amendmentRequestDetails(uint tokenId) public view returns(address, uint) {        \n', '        require(amendmentRequested(tokenId), "Token hasn\'t been amended");\n', '        AmendmentMetadata memory amendment = _amendmentsRequests[tokenId];\n', '        return (amendment.amender, amendment.timestamp);\n', '    }\n', '    \n', '    function _msgSender() internal view override(Context, ERC2771Context)\n', '        returns (address sender) {\n', '        sender = ERC2771Context._msgSender();\n', '    }    \n', '\n', '    function _msgData() internal view override(Context, ERC2771Context)\n', '        returns (bytes calldata) {\n', '        return ERC2771Context._msgData();\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "berlin",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']