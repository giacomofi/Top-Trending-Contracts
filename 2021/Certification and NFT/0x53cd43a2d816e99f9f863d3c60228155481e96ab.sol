['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-12\n', '*/\n', '\n', '//"SPDX-License-Identifier: UNLICENSED"\n', 'pragma solidity 0.8.4;\n', '\n', 'interface Multiplier {\n', '    function updateLockupPeriod(address _user, uint _lockup) external returns(bool);\n', '    function balance(address user) external view returns (uint);\n', '    function lockupPeriod(address user) external view returns (uint);\n', '}\n', '\n', 'contract MultiplierLock {\n', '    \n', '    Multiplier private multiplier;\n', '    \n', '    event LockupUpdated(address indexed sender, uint term);\n', '    \n', '    constructor(address _multiplier) {\n', '        \n', '        multiplier = Multiplier(_multiplier);\n', '    }\n', '    \n', '    function updateMultiplierLockUp(uint _term) external returns(bool lockUpdated) {\n', '        \n', '        require(multiplier.balance(msg.sender) > 0, "No Multiplier balance to lock");\n', '        \n', '        if (_term > multiplier.lockupPeriod(msg.sender)) multiplier.updateLockupPeriod(msg.sender, _term);\n', '        else revert("cannot reduce current lockup");\n', '        \n', '        emit LockupUpdated(msg.sender, _term);\n', '        return true;\n', '    }\n', '    \n', '}']