['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.7.6 <0.8.0;\n', '\n', '// EIP-3561 trust minimized proxy implementation https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3561.md\n', '\n', 'contract OracleRegistryTrustMinimizedProxy{ // THE CODE FITS ON THE SCREEN UNBELIAVABLE LETS STOP ENDLESS SCROLLING UP AND DOWN\n', '\tevent Upgraded(address indexed toLogic);\n', '\tevent AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '\tevent NextLogicDefined(address indexed nextLogic, uint earliestArrivalBlock);\n', '\tevent ProposingUpgradesRestrictedUntil(uint block, uint nextProposedLogicEarliestArrival);\n', '\tevent NextLogicCanceled();\n', '\tevent TrustRemoved();\n', '\n', '\tbytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\tbytes32 internal constant LOGIC_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\tbytes32 internal constant NEXT_LOGIC_SLOT = 0xb182d207b11df9fb38eec1e3fe4966cf344774ba58fb0e9d88ea35ad46f3601e;\n', '\tbytes32 internal constant NEXT_LOGIC_BLOCK_SLOT = 0x96de003e85302815fe026bddb9630a50a1d4dc51c5c355def172204c3fd1c733;\n', '\tbytes32 internal constant PROPOSE_BLOCK_SLOT = 0xbc9d35b69e82e85049be70f91154051f5e20e574471195334bde02d1a9974c90;\n', '//\tbytes32 internal constant DEADLINE_SLOT = 0xb124b82d2ac46ebdb08de751ebc55102cc7325d133e09c1f1c25014e20b979ad;\n', '\tbytes32 internal constant TRUST_MINIMIZED_SLOT = 0xa0ea182b754772c4f5848349cff27d3431643ba25790e0c61a8e4bdf4cec9201;\n', '\n', '\tconstructor() payable {\n', "//\t\trequire(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1) && LOGIC_SLOT==bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1) // this require is simply against human error, can be removed if you know what you are doing\n", "//\t\t&& NEXT_LOGIC_SLOT == bytes32(uint256(keccak256('eip1984.proxy.nextLogic')) - 1) && NEXT_LOGIC_BLOCK_SLOT == bytes32(uint256(keccak256('eip1984.proxy.nextLogicBlock')) - 1)\n", "//\t\t&& PROPOSE_BLOCK_SLOT == bytes32(uint256(keccak256('eip1984.proxy.proposeBlock')) - 1)/* && DEADLINE_SLOT == bytes32(uint256(keccak256('eip1984.proxy.deadline')) - 1)*/\n", "//\t\t&& TRUST_MINIMIZED_SLOT == bytes32(uint256(keccak256('eip1984.proxy.trustMinimized')) - 1));\n", '\t\t_setAdmin(msg.sender);\n', '//\t\tuint deadline = block.number + 4204800; // ~2 years as default\n', '//\t\tassembly {sstore(DEADLINE_SLOT,deadline)}\n', '\t}\n', '\n', '\tmodifier ifAdmin() {if (msg.sender == _admin()) {_;} else {_fallback();}}\n', '\tfunction _logic() internal view returns (address logic) {assembly { logic := sload(LOGIC_SLOT) }}\n', '\tfunction _proposeBlock() internal view returns (uint bl) {assembly { bl := sload(PROPOSE_BLOCK_SLOT) }}\n', '\tfunction _nextLogicBlock() internal view returns (uint bl) {assembly { bl := sload(NEXT_LOGIC_BLOCK_SLOT) }}\n', '//\tfunction _deadline() internal view returns (uint bl) {assembly { bl := sload(DEADLINE_SLOT) }}\n', '\tfunction _trustMinimized() internal view returns (bool tm) {assembly { tm := sload(TRUST_MINIMIZED_SLOT) }}\n', '\tfunction _admin() internal view returns (address adm) {assembly { adm := sload(ADMIN_SLOT) }}\n', '\tfunction _setAdmin(address newAdm) internal {assembly {sstore(ADMIN_SLOT, newAdm)}}\n', '\tfunction changeAdmin(address newAdm) external ifAdmin {emit AdminChanged(_admin(), newAdm);_setAdmin(newAdm);}\n', '\tfunction upgrade() external ifAdmin {require(block.number>=_nextLogicBlock());address logic;assembly {logic := sload(NEXT_LOGIC_SLOT) sstore(LOGIC_SLOT,logic)}emit Upgraded(logic);}\n', '\tfallback () external payable {_fallback();}\n', '\treceive () external payable {_fallback();}\n', '\tfunction _fallback() internal {require(msg.sender != _admin());_delegate(_logic());}\n', '\tfunction cancelUpgrade() external ifAdmin {address logic; assembly {logic := sload(LOGIC_SLOT)sstore(NEXT_LOGIC_SLOT, logic)}emit NextLogicCanceled();}\n', '\tfunction prolongLock(uint b) external ifAdmin {require(b > _proposeBlock()); assembly {sstore(PROPOSE_BLOCK_SLOT,b)} emit ProposingUpgradesRestrictedUntil(b,b+172800);}\n', '\tfunction removeTrust() external ifAdmin {assembly{ sstore(TRUST_MINIMIZED_SLOT, true) }emit TrustRemoved();} // before this called acts like a normal eip 1967 transparent proxy. after the deployer confirms everything is deployed correctly must be called\n', '\tfunction _updateBlockSlot() internal {uint nlb = block.number + 172800; assembly {sstore(NEXT_LOGIC_BLOCK_SLOT,nlb)}}\n', '\tfunction _setNextLogic(address nl) internal {require(block.number >= _proposeBlock());_updateBlockSlot();assembly { sstore(NEXT_LOGIC_SLOT, nl)}emit NextLogicDefined(nl,block.number + 172800);}\n', '\n', '\tfunction proposeToAndCall(address newLogic, bytes calldata data) payable external ifAdmin {\n', '\t\tif (_logic() == address(0) || _trustMinimized() == false) {assembly {sstore(LOGIC_SLOT,newLogic)}emit Upgraded(newLogic);}else{_setNextLogic(newLogic);}\n', '\t\t(bool success,) = newLogic.delegatecall(data);require(success);\n', '\t}\n', '\n', '\tfunction _delegate(address logic_) internal {\n', '\t\tassembly {\n', '\t\t\tcalldatacopy(0, 0, calldatasize())\n', '\t\t\tlet result := delegatecall(gas(), logic_, 0, calldatasize(), 0, 0)\n', '\t\t\treturndatacopy(0, 0, returndatasize())\n', '\t\t\tswitch result\n', '\t\t\tcase 0 { revert(0, returndatasize()) }\n', '\t\t\tdefault { return(0, returndatasize()) }\n', '\t\t}\n', '\t}\n', '}']