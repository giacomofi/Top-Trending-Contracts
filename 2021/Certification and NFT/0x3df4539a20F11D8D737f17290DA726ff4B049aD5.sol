['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', "import 'synthetix/contracts/interfaces/IERC20.sol';\n", "import 'synthetix/contracts/interfaces/ISystemStatus.sol';\n", "import 'synthetix/contracts/interfaces/ISynthetix.sol';\n", '\n', "import './IBPool.sol';\n", "import './ISwaps.sol';\n", '\n', '/**\n', ' * @title sTSLA on-ramp\n', ' */\n', 'contract TSLAExchange {\n', '  // tokens\n', '  address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '  address private constant SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\n', '  address private constant STSLA = 0x918dA91Ccbc32B7a6A0cc4eCd5987bbab6E31e6D;\n', '  // synthetix\n', '  address private constant SNX = 0x97767D7D04Fd0dB0A1a2478DCd4BA85290556B48;\n', '  address private constant SYSTEM_STATUS = 0x1c86B3CDF2a60Ae3a574f7f71d44E2C50BDdB87E;\n', '  // curve\n', '  address private constant SWAPS = 0xD1602F68CC7C4c7B59D686243EA35a9C73B0c6a2;\n', '  // balancer\n', '  address private constant BPOOL = 0x055dB9AFF4311788264798356bbF3a733AE181c6;\n', '\n', '  constructor () {\n', '    IERC20(USDC).approve(SWAPS, type(uint).max);\n', '    IERC20(SUSD).approve(BPOOL, type(uint).max);\n', '  }\n', '\n', '  /**\n', '   * @notice exchange USDC for sTSLA on behalf of sender\n', '   * @dev contract must be approved to spend USDC\n', '   * @dev contract must be approved to exchange on Synthetix on behalf of sender\n', '   * @param amount quantity of USDC to exchange\n', '   * @param susdMin minimum quantity of sUSD output by Curve\n', '   * @param stslaMin minimum quantity of sTSLA output by Balancer\n', '   * @return susd sUSD output amount\n', '   * @return stsla sTSLA output amount\n', '   */\n', '  function exchange (\n', '    uint amount,\n', '    uint susdMin,\n', '    uint stslaMin\n', '  ) external returns (uint susd, uint stsla) {\n', '    IERC20(USDC).transferFrom(msg.sender, address(this), amount);\n', '\n', '    (bool suspended, ) = ISystemStatus(SYSTEM_STATUS).synthExchangeSuspension(\n', "      'sTSLA'\n", '    );\n', '\n', '    susd = ISwaps(SWAPS).exchange_with_best_rate(\n', '      USDC,\n', '      SUSD,\n', '      amount,\n', '      susdMin,\n', '      suspended ? address(this) : msg.sender\n', '    );\n', '\n', '    if (suspended) {\n', '      (stsla, ) = IBPool(BPOOL).swapExactAmountIn(\n', '        SUSD,\n', '        susd,\n', '        STSLA,\n', '        stslaMin,\n', '        type(uint).max\n', '      );\n', '\n', '      IERC20(STSLA).transfer(msg.sender, stsla);\n', '    } else {\n', '      stsla = ISynthetix(SNX).exchangeOnBehalf(\n', '        msg.sender,\n', "        'sUSD',\n", '        susd,\n', "        'sTSLA'\n", '      );\n', '    }\n', '\n', '    return (susd, stsla);\n', '  }\n', '}\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/ierc20\n', 'interface IERC20 {\n', '    // ERC20 Optional Views\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    // Views\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    // Mutative functions\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/isystemstatus\n', 'interface ISystemStatus {\n', '    struct Status {\n', '        bool canSuspend;\n', '        bool canResume;\n', '    }\n', '\n', '    struct Suspension {\n', '        bool suspended;\n', '        // reason is an integer code,\n', '        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n', '        uint248 reason;\n', '    }\n', '\n', '    // Views\n', '    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\n', '\n', '    function requireSystemActive() external view;\n', '\n', '    function requireIssuanceActive() external view;\n', '\n', '    function requireExchangeActive() external view;\n', '\n', '    function requireExchangeBetweenSynthsAllowed(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n', '\n', '    function requireSynthActive(bytes32 currencyKey) external view;\n', '\n', '    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n', '\n', '    function systemSuspension() external view returns (bool suspended, uint248 reason);\n', '\n', '    function issuanceSuspension() external view returns (bool suspended, uint248 reason);\n', '\n', '    function exchangeSuspension() external view returns (bool suspended, uint248 reason);\n', '\n', '    function synthExchangeSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n', '\n', '    function synthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n', '\n', '    function getSynthExchangeSuspensions(bytes32[] calldata synths)\n', '        external\n', '        view\n', '        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons);\n', '\n', '    function getSynthSuspensions(bytes32[] calldata synths)\n', '        external\n', '        view\n', '        returns (bool[] memory suspensions, uint256[] memory reasons);\n', '\n', '    // Restricted functions\n', '    function suspendSynth(bytes32 currencyKey, uint256 reason) external;\n', '\n', '    function updateAccessControl(\n', '        bytes32 section,\n', '        address account,\n', '        bool canSuspend,\n', '        bool canResume\n', '    ) external;\n', '}\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'import "./ISynth.sol";\n', 'import "./IVirtualSynth.sol";\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\n', 'interface ISynthetix {\n', '    // Views\n', '    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n', '\n', '    function availableCurrencyKeys() external view returns (bytes32[] memory);\n', '\n', '    function availableSynthCount() external view returns (uint);\n', '\n', '    function availableSynths(uint index) external view returns (ISynth);\n', '\n', '    function collateral(address account) external view returns (uint);\n', '\n', '    function collateralisationRatio(address issuer) external view returns (uint);\n', '\n', '    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n', '\n', '    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n', '\n', '    function remainingIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (\n', '            uint maxIssuable,\n', '            uint alreadyIssued,\n', '            uint totalSystemDebt\n', '        );\n', '\n', '    function synths(bytes32 currencyKey) external view returns (ISynth);\n', '\n', '    function synthsByAddress(address synthAddress) external view returns (bytes32);\n', '\n', '    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\n', '\n', '    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);\n', '\n', '    function transferableSynthetix(address account) external view returns (uint transferable);\n', '\n', '    // Mutative Functions\n', '    function burnSynths(uint amount) external;\n', '\n', '    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\n', '\n', '    function burnSynthsToTarget() external;\n', '\n', '    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n', '\n', '    function exchange(\n', '        bytes32 sourceCurrencyKey,\n', '        uint sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint amountReceived);\n', '\n', '    function exchangeOnBehalf(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint amountReceived);\n', '\n', '    function exchangeWithTracking(\n', '        bytes32 sourceCurrencyKey,\n', '        uint sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint amountReceived);\n', '\n', '    function exchangeOnBehalfWithTracking(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint amountReceived);\n', '\n', '    function exchangeWithVirtual(\n', '        bytes32 sourceCurrencyKey,\n', '        uint sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        bytes32 trackingCode\n', '    ) external returns (uint amountReceived, IVirtualSynth vSynth);\n', '\n', '    function issueMaxSynths() external;\n', '\n', '    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n', '\n', '    function issueSynths(uint amount) external;\n', '\n', '    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\n', '\n', '    function mint() external returns (bool);\n', '\n', '    function settle(bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint reclaimed,\n', '            uint refunded,\n', '            uint numEntries\n', '        );\n', '\n', '    // Liquidations\n', '    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\n', '\n', '    // Restricted Functions\n', '\n', '    function mintSecondary(address account, uint amount) external;\n', '\n', '    function mintSecondaryRewards(uint amount) external;\n', '\n', '    function burnSecondary(address account, uint amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IBPool {\n', '  function swapExactAmountIn (\n', '    address tokenIn,\n', '    uint tokenAmountIn,\n', '    address tokenOut,\n', '    uint minAmountOut,\n', '    uint maxPrice\n', '  ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface ISwaps {\n', '  function exchange_with_best_rate(\n', '    address from,\n', '    address to,\n', '    uint amount,\n', '    uint expected,\n', '    address recipient\n', '  ) external payable returns (uint);\n', '}\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/isynth\n', 'interface ISynth {\n', '    // Views\n', '    function currencyKey() external view returns (bytes32);\n', '\n', '    function transferableSynths(address account) external view returns (uint);\n', '\n', '    // Mutative functions\n', '    function transferAndSettle(address to, uint value) external returns (bool);\n', '\n', '    function transferFromAndSettle(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    // Restricted: used internally to Synthetix\n', '    function burn(address account, uint amount) external;\n', '\n', '    function issue(address account, uint amount) external;\n', '}\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'import "./ISynth.sol";\n', '\n', '\n', 'interface IVirtualSynth {\n', '    // Views\n', '    function balanceOfUnderlying(address account) external view returns (uint);\n', '\n', '    function rate() external view returns (uint);\n', '\n', '    function readyToSettle() external view returns (bool);\n', '\n', '    function secsLeftInWaitingPeriod() external view returns (uint);\n', '\n', '    function settled() external view returns (bool);\n', '\n', '    function synth() external view returns (ISynth);\n', '\n', '    // Mutative functions\n', '    function settle(address account) external;\n', '}']