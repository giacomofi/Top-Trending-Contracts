['// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: original_contracts/lib/IUniswapV2Pair.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', 'interface IUniswapV2Pair {\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function swap(\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    )\n', '        external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: original_contracts/lib/UniswapV3LibFork.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '\n', 'library UniswapV3LibFork {\n', '    using SafeMath for uint256;\n', '\n', '    function checkAndConvertETHToWETH(address token) internal pure returns(address) {\n', '\n', '        if(token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\n', '            return address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '        }\n', '        return token;\n', '    }\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\n', '\n', '        return(tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA));\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes32 initCode) internal pure returns (address) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        return(address(uint(keccak256(abi.encodePacked(\n', '            hex"ff",\n', '            factory,\n', '            keccak256(abi.encodePacked(token0, token1)),\n', '            initCode // init code hash\n', '        )))));\n', '    }\n', '\n', '    function getReservesByPair(address pair, address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut, uint256 fee) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV3Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        uint256 amountInWithFee = amountIn.mul(fee);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = uint256(numerator / denominator);\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountInAndPair(address factory, uint amountOut, address tokenA, address tokenB, bytes32 initCode, uint256 fee) internal view returns (uint256 amountIn, address pair) {\n', '        tokenA = checkAndConvertETHToWETH(tokenA);\n', '        tokenB = checkAndConvertETHToWETH(tokenB);\n', '\n', '        pair = pairFor(factory, tokenA, tokenB, initCode);\n', '        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, tokenA, tokenB);\n', '        require(amountOut > 0, "UniswapV3Library: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(reserveOut > amountOut, "UniswapV3Library: reserveOut should be greater than amountOut");\n', '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(fee);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    function getAmountOutByPair(uint256 amountIn, address pair, address tokenA, address tokenB, uint256 fee) internal view returns(uint256 amountOut) {\n', '        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, tokenA, tokenB);\n', '        return (getAmountOut(amountIn, reserveIn, reserveOut, fee));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: original_contracts/IWETH.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', 'abstract contract IWETH is IERC20 {\n', '    function deposit() external virtual payable;\n', '    function withdraw(uint256 amount) external virtual;\n', '}\n', '\n', '// File: original_contracts/UniswapV3RouterFork.sol\n', '\n', 'pragma solidity =0.7.5;\n', '\n', '\n', '\n', '\n', '\n', 'contract UniswapV3RouterFork {\n', '    using SafeMath for uint;\n', '\n', '    address public immutable factory;\n', '    address public immutable WETH;\n', '    address public constant ETH_IDENTIFIER = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    bytes32 public immutable initCode;\n', '    uint256 public immutable fee;\n', '\n', '    constructor(address _factory, address _WETH, bytes32 _initCode, uint256 _fee) public {\n', '        factory = _factory;\n', '        WETH = _WETH;\n', '        initCode = _initCode;\n', '        fee = _fee;\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function swap(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        payable\n', '        returns (uint256 tokensBought)\n', '    {\n', '        require(path.length > 1, "More than 1 token required");\n', '        uint8 pairs = uint8(path.length - 1);\n', '        bool tokensBoughtEth;\n', '        tokensBought = amountIn;\n', '        address receiver;\n', '\n', '        for(uint8 i = 0; i < pairs; i++) {\n', '            address tokenSold = path[i];\n', '            address tokenBought = path[i+1];\n', '\n', '            address currentPair = receiver;\n', '\n', '            if (i == pairs - 1) {\n', '                if (tokenBought == ETH_IDENTIFIER) {\n', '                    tokenBought = WETH;\n', '                    tokensBoughtEth = true;\n', '                }\n', '            }\n', '            if (i == 0) {\n', '                if (tokenSold == ETH_IDENTIFIER) {\n', '                    tokenSold = WETH;\n', '                    currentPair = UniswapV3LibFork.pairFor(factory, tokenSold, tokenBought, initCode);\n', '                    uint256 amount = msg.value;\n', '                    IWETH(WETH).deposit{value: amount}();\n', '                    assert(IWETH(WETH).transfer(currentPair, amount));\n', '                }\n', '                else {\n', '                    currentPair = UniswapV3LibFork.pairFor(factory, tokenSold, tokenBought, initCode);\n', '                    TransferHelper.safeTransferFrom(\n', '                        tokenSold, msg.sender, currentPair, amountIn\n', '                    );\n', '                }\n', '            }\n', '\n', '            //AmountIn for this hop is amountOut of previous hop\n', '            tokensBought = UniswapV3LibFork.getAmountOutByPair(tokensBought, currentPair, tokenSold, tokenBought, fee);\n', '\n', '            if ((i + 1) == pairs) {\n', '                if ( tokensBoughtEth ) {\n', '                    receiver = address(this);\n', '                }\n', '                else {\n', '                    receiver = msg.sender;\n', '                }\n', '            }\n', '            else {\n', '                receiver = UniswapV3LibFork.pairFor(factory, tokenBought, path[i+2] == ETH_IDENTIFIER ? WETH : path[i+2], initCode);\n', '            }\n', '\n', '            (address token0,) = UniswapV3LibFork.sortTokens(tokenSold, tokenBought);\n', '            (uint256 amount0Out, uint256 amount1Out) = tokenSold == token0 ? (uint256(0), tokensBought) : (tokensBought, uint256(0));\n', '            IUniswapV2Pair(currentPair).swap(\n', '                amount0Out, amount1Out, receiver, new bytes(0)\n', '            );\n', '\n', '        }\n', '\n', '        if (tokensBoughtEth) {\n', '            IWETH(WETH).withdraw(tokensBought);\n', '            TransferHelper.safeTransferETH(msg.sender, tokensBought);\n', '        }\n', '\n', '        require(tokensBought >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");\n', '\n', '    }\n', '\n', '    function buy(\n', '        uint256 amountInMax,\n', '        uint256 amountOut,\n', '        address[] calldata path\n', '    )\n', '        external\n', '        payable\n', '        returns (uint256 tokensSold)\n', '    {\n', '        require(path.length > 1, "More than 1 token required");\n', '        bool tokensBoughtEth;\n', '        uint8 length = uint8(path.length);\n', '\n', '        uint256[] memory amounts = new uint256[](length);\n', '        address[] memory pairs = new address[](length - 1);\n', '\n', '        amounts[length - 1] = amountOut;\n', '\n', '        for (uint8 i = length - 1; i > 0; i--) {\n', '            (amounts[i - 1], pairs[i - 1]) = UniswapV3LibFork.getAmountInAndPair(\n', '                factory,\n', '                amounts[i],\n', '                path[i-1],\n', '                path[i],\n', '                initCode,\n', '                fee\n', '            );\n', '        }\n', '\n', '        tokensSold = amounts[0];\n', '        require(tokensSold <= amountInMax, "UniswapV3Router: INSUFFICIENT_INPUT_AMOUNT");\n', '\n', '        for(uint8 i = 0; i < length - 1; i++) {\n', '            address tokenSold = path[i];\n', '            address tokenBought = path[i+1];\n', '\n', '            if (i == length - 2) {\n', '                if (tokenBought == ETH_IDENTIFIER) {\n', '                    tokenBought = WETH;\n', '                    tokensBoughtEth = true;\n', '                }\n', '            }\n', '            if (i == 0) {\n', '                if (tokenSold == ETH_IDENTIFIER) {\n', '                    tokenSold = WETH;\n', '                    TransferHelper.safeTransferETH(msg.sender, msg.value.sub(tokensSold));\n', '                    IWETH(WETH).deposit{value: tokensSold}();\n', '                    assert(IWETH(WETH).transfer(pairs[i], tokensSold));\n', '                }\n', '                else {\n', '                    TransferHelper.safeTransferFrom(\n', '                        tokenSold, msg.sender, pairs[i], tokensSold\n', '                    );\n', '                }\n', '            }\n', '\n', '            address receiver;\n', '\n', '            if (i == length - 2) {\n', '                if (tokensBoughtEth) {\n', '                    receiver = address(this);\n', '                }\n', '                else {\n', '                    receiver = msg.sender;\n', '                }\n', '            }\n', '            else {\n', '                receiver = pairs[i+1];\n', '            }\n', '\n', '            (address token0,) = UniswapV3LibFork.sortTokens(tokenSold, tokenBought);\n', '            (uint256 amount0Out, uint256 amount1Out) = tokenSold == token0 ? (uint256(0), amounts[i+1]) : (amounts[i+1], uint256(0));\n', '            IUniswapV2Pair(pairs[i]).swap(\n', '                amount0Out, amount1Out, receiver, new bytes(0)\n', '            );\n', '\n', '        }\n', '\n', '        if (tokensBoughtEth) {\n', '            IWETH(WETH).withdraw(amountOut);\n', '            TransferHelper.safeTransferETH(msg.sender, amountOut);\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']