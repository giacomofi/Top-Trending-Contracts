['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-10\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view override returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferGovernance(address newOwner) internal virtual onlyGovernance {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/zs-tsBTC.sol\n', '// zsTokens are Stabilize proxy tokens that serve as receipts for deposits into Stabilize strategies\n', '// zsTokens should increase in value if the strategy it uses is profitable\n', '// When someone deposits into the zsToken contract, tokens are minted and when they redeem, tokens are burned\n', '\n', 'interface StabilizeStrategy {\n', '    function rewardTokensCount() external view returns (uint256);\n', '    function rewardTokenAddress(uint256) external view returns (address);\n', '    function withdrawTokenReserves() external view returns (address, uint256);\n', '    function balance() external view returns (uint256);\n', '    function pricePerToken() external view returns (uint256);\n', '    function enter() external;\n', '    function exit() external;\n', '    function deposit(bool) external;\n', '    function withdraw(address, uint256, uint256, bool) external returns (uint256); // Will withdraw to the address specified a percent of total shares\n', '}\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'contract zsToken is ERC20("Stabilize Strategy tBTC/sBTC Proxy", "zs-tsBTC"), Ownable, ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Variables\n', '    uint256 constant DIVISION_FACTOR = 100000;\n', '    \n', '    // There are no fees to deposit and withdraw from the zs-Tokens\n', '    \n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 depositTime; // The time the user made the last deposit\n', '        uint256 shareEstimate;\n', '    }\n', '    \n', '    mapping(address => UserInfo) private userInfo;\n', '    \n', '    // Token information\n', '    // This wrapped token accepts multiple eth coins\n', '    // tBTC, sBTC\n', '    struct TokenInfo {\n', '        IERC20 token; // Reference of token\n', '        uint256 decimals; // Decimals of token\n', '    }\n', '    \n', '    TokenInfo[] private tokenList; // An array of tokens accepted as deposits\n', '    address private _underlyingPriceAsset; // Token from which the price is derived for STBZ staking\n', '    bool public depositsOpen = true; // Governance can open or close deposits without timelock, cannot block withdrawals\n', '    \n', '    // Strategy information\n', '    StabilizeStrategy private currentStrategy; // This will be the contract for the strategy\n', '    address private _pendingStrategy;\n', '    \n', '    // Events\n', '    event Wrapped(address indexed user, uint256 amount);\n', '    event Unwrapped(address indexed user, uint256 amount);\n', '\n', '    constructor (address _priceAsset) public {\n', '        _underlyingPriceAsset = _priceAsset;\n', '        setupWithdrawTokens();\n', '    }\n', '    \n', '    function setupWithdrawTokens() internal {\n', '        // Start with tBTC\n', '        IERC20 _token = IERC20(address(0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa));\n', '        tokenList.push(\n', '            TokenInfo({\n', '                token: _token,\n', '                decimals: _token.decimals()\n', '            })\n', '        );   \n', '        \n', '        // sBTC from Synthetix\n', '        _token = IERC20(address(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6));\n', '        tokenList.push(\n', '            TokenInfo({\n', '                token: _token,\n', '                decimals: _token.decimals()\n', '            })\n', '        );\n', '    }\n', '    \n', '    function getCurrentStrategy() external view returns (address) {\n', '        return address(currentStrategy);\n', '    }\n', '    \n', '    function getPendingStrategy() external view returns (address) {\n', '        return _pendingStrategy;\n', '    }\n', '\n', '    function underlyingAsset() public view returns (address) {\n', '        // Can be used if staking in the STBZ pool\n', '        return address(_underlyingPriceAsset);\n', '    }\n', '    \n', '    function underlyingDepositAssets() public view returns (address[] memory) {\n', '        // Returns all addresses accepted by this token vault\n', '        uint256 length = tokenList.length;\n', '        address[] memory addresses = new address[](length);\n', '        for(uint256 i = 0; i < length; i++){\n', '            addresses[i] = address(tokenList[i].token);\n', '        }\n', '        return addresses;\n', '    }\n', '    \n', '    function pricePerToken() public view returns (uint256) {\n', '        if(totalSupply() == 0){\n', '            return 1e18; // Shown in Wei units\n', '        }else{\n', '            return uint256(1e18).mul(valueOfVaultAndStrategy()).div(totalSupply());      \n', '        }\n', '    }\n', '    \n', '    function getNormalizedTotalBalance(address _address) public view returns (uint256) {\n', '        uint256 _balance = 0;\n', '        for(uint256 i = 0; i < tokenList.length; i++){\n', '            uint256 _bal = tokenList[i].token.balanceOf(_address);\n', '            _bal = _bal.mul(1e18).div(10**tokenList[i].decimals);\n', '            _balance = _balance.add(_bal); // This has been normalized to 1e18 decimals\n', '        }\n', '        return _balance;\n', '    }\n', '    \n', '    function valueOfVaultAndStrategy() public view returns (uint256) { // The total value of the tokens\n', '        uint256 balance = getNormalizedTotalBalance(address(this)); // Get tokens stored in this contract\n', '        if(currentStrategy != StabilizeStrategy(address(0))){\n', '            balance += currentStrategy.balance(); // And tokens stored at the strategy\n', '        }\n', '        return balance;\n', '    }\n', '    \n', '    function withdrawTokenReserves() public view returns (address, uint256) {\n', '        // This function will return the address and amount of the token with the highest balance\n', '        if(currentStrategy != StabilizeStrategy(address(0))){\n', '            return currentStrategy.withdrawTokenReserves();\n', '        }else{\n', '            uint256 length = tokenList.length;\n', '            uint256 targetID = 0;\n', '            uint256 targetNormBalance = 0;\n', '            for(uint256 i = 0; i < length; i++){\n', '                uint256 _normBal = tokenList[i].token.balanceOf(address(this)).mul(1e18).div(10**tokenList[i].decimals);\n', '                if(_normBal > 0){\n', '                    if(targetNormBalance == 0 || _normBal >= targetNormBalance){\n', '                        targetNormBalance = _normBal;\n', '                        targetID = i;\n', '                    }\n', '                }\n', '            }\n', '            if(targetNormBalance > 0){\n', '                return (address(tokenList[targetID].token), tokenList[targetID].token.balanceOf(address(this)));\n', '            }else{\n', '                return (address(0), 0); // No balance\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    // Now handle deposits into the strategy\n', '    function deposit(uint256 amount, uint256 _tokenID) public nonReentrant {\n', '        uint256 total = valueOfVaultAndStrategy(); // Get token equivalent at strategy and here if applicable\n', '        \n', '        require(depositsOpen == true, "Deposits have been suspended, but you can still withdraw");\n', '        require(currentStrategy != StabilizeStrategy(address(0)),"No strategy contract has been selected yet");\n', '        require(_tokenID < tokenList.length, "Token ID is outside range of tokens in contract");\n', '        \n', '        IERC20 _token = tokenList[_tokenID].token; // Trusted tokens\n', '        uint256 _before = _token.balanceOf(address(this));\n', '        _token.safeTransferFrom(_msgSender(), address(this), amount); // Transfer token to this address\n', '        amount = _token.balanceOf(address(this)).sub(_before); // Some tokens lose amount (transfer fee) upon transfer\n', '        require(amount > 0, "Cannot deposit 0");\n', '        bool nonContract = false;\n', '        if(tx.origin == _msgSender()){\n', '            nonContract = true; // The sender is not a contract\n', '        }\n', '        uint256 _strategyBalance = currentStrategy.balance(); // Will get the balance of the value of the main tokens at the strategy\n', '        // Now call the strategy to deposit\n', '        pushTokensToStrategy(); // Push any strategy tokens here into the strategy\n', '        currentStrategy.deposit(nonContract); // Activate strategy deposit\n', '        require(currentStrategy.balance() > _strategyBalance, "No change in strategy balance"); // Balance should increase\n', '        uint256 normalizedAmount = amount.mul(1e18).div(10**tokenList[_tokenID].decimals); // Make sure everything is same units\n', '        uint256 mintAmount = normalizedAmount;\n', '        if(totalSupply() > 0){\n', '            // There is already a balance here, calculate our share\n', '            mintAmount = normalizedAmount.mul(totalSupply()).div(total); // Our share of the total\n', '        }\n', '        _mint(_msgSender(),mintAmount); // Now mint new zs-token to the depositor\n', '        \n', '        // Add the user information\n', '        userInfo[_msgSender()].depositTime = now;\n', '        userInfo[_msgSender()].shareEstimate = userInfo[_msgSender()].shareEstimate.add(mintAmount);\n', '\n', '        emit Wrapped(_msgSender(), amount);\n', '    }\n', '    \n', '    function redeem(uint256 share) public nonReentrant {\n', '        // Essentially withdraw our equivalent share of the pool based on share value\n', '        // Users cannot choose which token they get. They get the largest quantity coin up to the lowest quantity\n', '        require(share > 0, "Cannot withdraw 0");\n', '        require(totalSupply() > 0, "No value redeemable");\n', '        uint256 tokenTotal = totalSupply();\n', '        // Now burn the token\n', "        _burn(_msgSender(),share); // Burn the amount, will fail if user doesn't have enough\n", '        \n', '        bool nonContract = false;\n', '        if(tx.origin == _msgSender()){\n', '            nonContract = true; // The sender is not a contract, we will allow market sells and buys\n', '        }else{\n', '            // This is a contract redeeming\n', '            require(userInfo[_msgSender()].depositTime < now && userInfo[_msgSender()].depositTime > 0, "Contract depositor cannot redeem in same transaction");\n', '        }\n', '        \n', '        // Update user information\n', '        if(share <= userInfo[_msgSender()].shareEstimate){\n', '            userInfo[_msgSender()].shareEstimate = userInfo[_msgSender()].shareEstimate.sub(share);\n', '        }else{\n', '            // Share is greater than our share estimate, can happen if tokens are transferred\n', '            userInfo[_msgSender()].shareEstimate = 0;\n', '            require(nonContract == true, "Contract depositors cannot take out more than what they put in");\n', '        }\n', '\n', '        uint256 withdrawAmount = 0;\n', '        if(currentStrategy != StabilizeStrategy(address(0))){\n', '            withdrawAmount = currentStrategy.withdraw(_msgSender(), share, tokenTotal, nonContract); // Returns the amount of underlying removed\n', '            require(withdrawAmount > 0, "Failed to withdraw from the strategy");\n', '        }else{\n', '            // Pull directly from this contract the token amount in relation to the share if strategy not used\n', '            if(share < tokenTotal){\n', '                uint256 _balance = getNormalizedTotalBalance(address(this));\n', '                uint256 _myBalance = _balance.mul(share).div(tokenTotal);\n', '                withdrawPerBalance(_msgSender(), _myBalance, false); // This will withdraw based on token balanace\n', '                withdrawAmount = _myBalance;\n', '            }else{\n', '                // We are all shares, transfer all\n', '                uint256 _balance = getNormalizedTotalBalance(address(this));\n', '                withdrawPerBalance(_msgSender(), _balance, true);\n', '                withdrawAmount = _balance;\n', '            }\n', '        }\n', '        \n', '        emit Unwrapped(_msgSender(), withdrawAmount);\n', '    }\n', '    \n', '    // This will withdraw the tokens from the contract based on their balance, from highest balance to lowest\n', '    function withdrawPerBalance(address _receiver, uint256 _withdrawAmount, bool _takeAll) internal {\n', '        uint256 length = tokenList.length;\n', '        if(_takeAll == true){\n', '            // Send the entire balance\n', '            for(uint256 i = 0; i < length; i++){\n', '                uint256 _bal = tokenList[i].token.balanceOf(address(this));\n', '                if(_bal > 0){\n', '                    tokenList[i].token.safeTransfer(_receiver, _bal);\n', '                }\n', '            }\n', '            return;\n', '        }\n', '        bool[] memory done = new bool[](length);\n', '        uint256 targetID = 0;\n', '        uint256 targetNormBalance = 0;\n', '        for(uint256 i = 0; i < length; i++){\n', '            \n', '            targetNormBalance = 0; // Reset the target balance\n', '            // Find the highest balanced token to withdraw\n', '            for(uint256 i2 = 0; i2 < length; i2++){\n', '                if(done[i2] == false){\n', '                    uint256 _normBal = tokenList[i2].token.balanceOf(address(this)).mul(1e18).div(10**tokenList[i2].decimals);\n', '                    if(targetNormBalance == 0 || _normBal >= targetNormBalance){\n', '                        targetNormBalance = _normBal;\n', '                        targetID = i2;\n', '                    }\n', '                }\n', '            }\n', '            done[targetID] = true;\n', '            \n', '            // Determine the balance left\n', '            uint256 _normalizedBalance = tokenList[targetID].token.balanceOf(address(this)).mul(1e18).div(10**tokenList[targetID].decimals);\n', '            if(_normalizedBalance <= _withdrawAmount){\n', '                // Withdraw the entire balance of this token\n', '                if(_normalizedBalance > 0){\n', '                    _withdrawAmount = _withdrawAmount.sub(_normalizedBalance);\n', '                    tokenList[targetID].token.safeTransfer(_receiver, tokenList[targetID].token.balanceOf(address(this)));                    \n', '                }\n', '            }else{\n', '                // Withdraw a partial amount of this token\n', '                if(_withdrawAmount > 0){\n', "                    // Convert the withdraw amount to the token's decimal amount\n", '                    uint256 _balance = _withdrawAmount.mul(10**tokenList[targetID].decimals).div(1e18);\n', '                    _withdrawAmount = 0;\n', '                    tokenList[targetID].token.safeTransfer(_receiver, _balance);\n', '                }\n', '                break; // Nothing more to withdraw\n', '            }\n', '        }\n', '    }\n', '    \n', '    // Governance functions\n', '    \n', '    // Stop/start all deposits, no timelock required\n', '    // --------------------\n', '    function stopDeposits() external onlyGovernance {\n', '        depositsOpen = false;\n', '    }\n', '\n', '    function startDeposits() external onlyGovernance {\n', '        depositsOpen = true;\n', '    }\n', '\n', '    // A function used in case of strategy failure, possibly due to bug in the platform our strategy is using, governance can stop using it quick\n', '    function emergencyStopStrategy() external onlyGovernance {\n', '        depositsOpen = false;\n', '        if(currentStrategy != StabilizeStrategy(address(0)) && totalSupply() > 0){\n', '            currentStrategy.exit(); // Pulls all the tokens and accessory tokens from the strategy \n', '        }\n', '        currentStrategy = StabilizeStrategy(address(0));\n', '        _timelockType = 0; // Prevent governance from changing to new strategy without timelock\n', '    }\n', '\n', '    // --------------------\n', '    \n', '    // Timelock variables\n', '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    address private _timelock_address;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        if(totalSupply() > 0){\n', '            // Timelock is only required after tokens exist\n', '            require(now >= _timelockStart + TIMELOCK_DURATION, "Timelock time not met");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    // Change the owner of the token contract\n', '    // --------------------\n', '    function startGovernanceChange(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address = _address;       \n', '    }\n', '    \n', '    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\n', '        transferGovernance(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    \n', '    // Change the treasury address\n', '    // --------------------\n', '    function startChangeStrategy(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_address = _address;\n', '        _pendingStrategy = _address;\n', '        if(totalSupply() == 0){\n', '            // Can change strategy with one call in this case\n', '            finishChangeStrategy();\n', '        }\n', '    }\n', '    \n', '    function finishChangeStrategy() public onlyGovernance timelockConditionsMet(2) {\n', '        if(currentStrategy != StabilizeStrategy(address(0)) && totalSupply() > 0){\n', '            currentStrategy.exit(); // Pulls all the tokens and accessory tokens from the strategy \n', '        }\n', '        currentStrategy = StabilizeStrategy(_timelock_address);\n', '        if(currentStrategy != StabilizeStrategy(address(0)) && totalSupply() > 0){\n', '            pushTokensToStrategy(); // It will push any strategy reward tokens here to the new strategy\n', '            currentStrategy.enter(); // Puts all the tokens and accessory tokens into the new strategy \n', '        }\n', '        _pendingStrategy = address(0);\n', '    }\n', '    \n', '    function pushTokensToStrategy() internal {\n', '        uint256 tokenCount = currentStrategy.rewardTokensCount();\n', '        for(uint256 i = 0; i < tokenCount; i++){\n', '            IERC20 _token = IERC20(address(currentStrategy.rewardTokenAddress(i)));\n', '            uint256 _balance = _token.balanceOf(address(this));\n', '            if(_balance > 0){\n', '                _token.safeTransfer(address(currentStrategy), _balance);\n', '            }\n', '        }\n', '    }\n', '    // --------------------\n', '\n', '}']