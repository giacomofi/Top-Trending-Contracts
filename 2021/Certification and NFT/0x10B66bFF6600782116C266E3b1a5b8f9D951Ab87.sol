['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '/*  _______________________________________________________________\n', '                      PRESALE DETAILS |\n', '\n', '    1. Presale Start    : 1614171600 [FEB 24, 2021] [1 PM UTC]\n', '    2. Presale End      : 1614344400 [FEB 26, 2021] [1 PM UTC]  \n', '    3. Base Price       : 1 ETH = 1000 APEAPE                  \n', '    4. Max Purchase     : 3 ETH                                \n', '    5. HARD CAP         : 60 ETH                               \n', '    _______________________________________________________________\n', '                    | APE APE DETAILS |\n', '\n', '    1. Total Supply       : 100K                                |\n', '    2. APEAPE Unlock Time : 1614430800 [FEB 27, 2021] [1PM UTC] | *\n', '    3. Burn               : 1%                                  | \n', '    4. Total Supply       : 100K                                |\n', '    5. Last20 Tx Fee      : 1%                                  |\n', '    6. Reward Collector   : 3% from last 7 days token transfers | \n', '    _______________________________________________________________\n', '    \n', '    -Codezeros Developers\n', '    -https://www.codezeros.com/\n', '    _______________________________________________________________\n', '*/\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library Math {\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    constructor() {}\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'abstract contract BasicToken is IERC20, Context, Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public _totalSupply;\n', '    mapping(address => uint256) balances_;\n', '    mapping(address => uint256) ethBalances;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '\n', '    uint256 public unlockDuration = 72 hours;                               // ----| Lock transfers for non-owner |------\n', '\n', '    uint256 public startTime = 1614171600;                                  // ------| Deploy Timestamp |--------\n', '    uint256 public rewardDispatchStartTime = startTime.add(unlockDuration); // ------| Start after 72 hours |--------\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        virtual\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return balances_[account];\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            msg.sender,\n', '            spender,\n', '            _allowances[msg.sender][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            msg.sender,\n', '            spender,\n', '            _allowances[msg.sender][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function checkInvestedETH(address who) public view returns (uint256) {\n', '        return ethBalances[who];\n', '    }\n', '}\n', '\n', 'abstract contract StandardToken is BasicToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public lastTwentyTxReward = 0;               //----| Stores 1 % form last 20 transactions|-----\n', '    uint256 public tokensToBurn;                         //------| Burns 1 % token on each transfer |------\n', '    uint256 public StakingContractFee = 0;\n', '    uint256 public transferCounter = 0;\n', '\n', '    address public stakingContract;\n', '    address public rewardCollector;\n', '\n', '    uint256 public realStakingContractFee;               \n', '\n', '    function setupContract(address _stakingContract, address _rewardCollector) public onlyOwner {\n', '       \n', '        require(stakingContract == address(0),"Staking Contract is already set");\n', '        require(rewardCollector == address(0),"Reward Collector Contract is already set");\n', '\n', '        stakingContract = _stakingContract;\n', '        rewardCollector = _rewardCollector;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        \n', '        if (msg.sender == stakingContract ||  msg.sender == rewardCollector || msg.sender == owner()) {\n', '                                        \n', '            _transferSpecial(msg.sender, recipient, amount);\n', '\n', '        } else {\n', '\n', '            _transfer(msg.sender, recipient, amount);\n', '\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '\n', '        if (msg.sender == stakingContract ||  msg.sender == rewardCollector || msg.sender == owner()) {\n', '\n', '            _transferSpecial(sender, recipient, amount);\n', '\n', '        } else {\n', '          \n', '            _transfer(sender, recipient, amount);\n', '        }\n', '\n', '        _approve(\n', '            sender,\n', '            msg.sender,\n', '            _allowances[sender][msg.sender].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function findOnePercent(uint256 amount) internal pure returns (uint256) {\n', '        return amount.mul(10).div(1000);\n', '    }\n', '\n', '    function findThreePercent(uint256 amount) internal pure returns (uint256) {\n', '        return amount.mul(30).div(1000);\n', '    }\n', '\n', '    function findFivePercent(uint256 amount) internal pure returns (uint256) {\n', '        return amount.mul(50).div(1000);\n', '    }\n', '\n', '    function _transferSpecial(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(\n', '            sender != address(0),\n', '            "ERC20 Special: transfer from the zero address"\n', '        );\n', '        require(\n', '            recipient != address(0),\n', '            "ERC20 Special: transfer to the zero address"\n', '        );\n', '\n', '        balances_[sender] = balances_[sender].sub(\n', '            amount,\n', '            "ERC20 Special: transfer amount exceeds balance"\n', '        );\n', '        balances_[recipient] = balances_[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(stakingContract != address(0), "Staking contract is not set");\n', '        require(rewardCollector != address(0), "RewardCollector contract is not set");\n', '\n', '        require(\n', '            block.timestamp >= startTime.add(unlockDuration), "Tokens not unlocked yet");\n', '\n', '\n', '        tokensToBurn = findOnePercent(amount);                               //---| 1% ===> Burn |-----------------\n', '        lastTwentyTxReward = lastTwentyTxReward + findOnePercent(amount);    //---| 1% ===> Last20Tx Collection|---\n', '        StakingContractFee = StakingContractFee + findThreePercent(amount);  //---| 3% ===> Reward Collector |-----\n', '\n', '        uint256 tokensToTransfer = amount.sub(findFivePercent(amount), "overflow");        //---| Net Amount Received |----------\n', '\n', '        _totalSupply = _totalSupply.sub(tokensToBurn);                       //---| Remove from Total Supply |-----\n', '\n', '        balances_[sender] = balances_[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '\n', '        balances_[recipient] = balances_[recipient].add(tokensToTransfer);\n', '\n', '        transferCounter = transferCounter + 1;\n', '\n', '        if (transferCounter == 20) {\n', '            \n', '            balances_[sender] = balances_[sender].add(lastTwentyTxReward); //---| Rewards last 20 Transactions |-----\n', '            transferCounter = 0;\n', '\n', '            emit Transfer(address(0), sender, lastTwentyTxReward);\n', '            lastTwentyTxReward = 0;\n', '        }\n', '\n', '        if (block.timestamp > rewardDispatchStartTime.add(7 days)) {   //-|Transfer rewards to RewardCollector every 7 days |--\n', '            balances_[rewardCollector] = balances_[rewardCollector].add(\n', '                StakingContractFee\n', '            );\n', '\n', '            realStakingContractFee = StakingContractFee;\n', '            StakingContractFee = 0;\n', '            rewardDispatchStartTime = block.timestamp;\n', '\n', '            emit Transfer(\n', '                address(this),\n', '                rewardCollector,\n', '                realStakingContractFee\n', '            );\n', '        }\n', '\n', '        emit Transfer(sender, recipient, tokensToTransfer);\n', '        emit Transfer(sender, address(0), tokensToBurn);\n', '    }\n', '    \n', '}\n', '\n', 'contract Configurable {\n', '    uint256 public cap = 60000 * 10**18;                 //---------| Tokens for Presale |---------\n', '    uint256 public basePrice = 1000 * 10**18;            //-----| 1 ETH = 1000 Tokens |---------\n', '    uint256 public tokensSold;\n', '    uint256 public tokenReserve = 100000 * 10**18;       //-----------| Total Supply = 100 K |------\n', '    uint256 public remainingTokens;\n', '}\n', '\n', 'contract PreSaleToken is StandardToken, Configurable { \n', '    using SafeMath for uint256;\n', '    enum Phases {none, start, end}\n', '    Phases public currentPhase;\n', '\n', '    constructor() {\n', '       \n', '        currentPhase = Phases.none;\n', '        balances_[owner()] = balances_[owner()].add(tokenReserve);\n', '        _totalSupply = _totalSupply.add(tokenReserve);\n', '        remainingTokens = cap;\n', '        emit Transfer(address(this), owner(), tokenReserve);\n', '    }\n', '\n', '    receive() external payable {\n', '        require(\n', '            currentPhase == Phases.start,\n', '            "The presale has not started yet"\n', '        );\n', '        require(remainingTokens > 0, "Presale token limit reached");\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\n', '    \n', '        ethBalances[msg.sender] = ethBalances[msg.sender].add(weiAmount); // Track each user investments\n', "        ethBalances[address(this)] = ethBalances[address(this)].add(weiAmount); // Track this contract's funds\n", '\n', '        require(\n', '            ethBalances[msg.sender] <= 3e18,\n', '            "You are exceeding max 3 ETH of purchase"\n', '        );\n', '        require(\n', '            ethBalances[address(this)] <= 60e18,\n', '            "Sorry! target amount of 60 ETH has been achieved"\n', '        );\n', '\n', '        if (tokensSold.add(tokens) > cap) {\n', '            revert("Exceeding limit of presale tokens");\n', '        }\n', '\n', '        tokensSold = tokensSold.add(tokens); // counting tokens sold\n', '        remainingTokens = cap.sub(tokensSold);\n', '\n', '        balances_[owner()] = balances_[owner()].sub(\n', '            tokens,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '\n', '        balances_[msg.sender] = balances_[msg.sender].add(tokens);\n', '\n', '        emit Transfer(address(this), msg.sender, tokens);\n', '\n', '        payable(owner()).transfer(weiAmount);\n', '    }\n', '\n', '    function startPresale() public onlyOwner {\n', '        require(currentPhase != Phases.end, "The coin offering has ended");\n', '        currentPhase = Phases.start;\n', '    }\n', '\n', '    function endPresale() public onlyOwner {\n', '        require(currentPhase != Phases.end, "The presale has ended");\n', '        currentPhase = Phases.end;\n', '    }\n', '\n', '}\n', '\n', 'contract Presale is PreSaleToken {\n', '    string public name = "ApeApe Finance";\n', '    string public symbol = "APEAPE";\n', '    uint32 public decimals = 18;\n', '}']