['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.0;\n', '\n', '\n', 'interface cETHInterface {\n', '\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\n', '    function redeem(uint256 amount) external returns (uint256);\n', '    function exchangeRateCurrent() external returns (uint256);\n', '}\n', '\n', '\n', 'interface cETHRedeemerInterface {\n', '    function redeem(uint256 amount) external returns (uint256 receivedEther);\n', '    function redeemUnderlying(uint256 amount) external returns (uint256 redeemedCEth);\n', '    function redeemFor(address from, address to, uint256 amount) external returns (uint256 receivedEther);\n', '    function redeemUnderlyingFor(address from, address to, uint256 amount) external returns (uint256 redeemedCEth);\n', '}\n', '\n', '\n', '/// Redeem cETH for ETH in cases where ETH payments cannot be accepted due to\n', '/// the 2300 gas stipend used for ETH transfers on cETH. Approve this contract\n', '/// to move cETH before calling.\n', '/// @author 0age\n', 'contract cETHRedeemer is cETHRedeemerInterface {\n', '\tcETHInterface public constant cETH = cETHInterface(\n', '\t\t0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5\n', '\t);\n', '\n', '    receive() external payable {\n', '    \tif (msg.sender != address(cETH)) {\n', '    \t\trevert("Only cETH can send Ether to this contract.");\n', '    \t}\n', '    }\n', '\n', '    function redeem(\n', '    \tuint256 amount\n', '    ) external override returns (uint256 receivedEther) {\n', '    \treceivedEther = _redeemFor(msg.sender, msg.sender, amount);\n', '    }\n', '\n', '    function redeemUnderlying(\n', '    \tuint256 amount\n', '    ) external override returns (uint256 redeemedCEth) {\n', '     \tredeemedCEth = _convertEthToCEth(amount);\n', '    \t_redeemFor(msg.sender, msg.sender, redeemedCEth);\n', '    }\n', '\n', '    function redeemFor(\n', '    \taddress from, address to, uint256 amount\n', '    ) external override returns (uint256 receivedEther) {\n', '    \treceivedEther = _redeemFor(from, to, amount);\n', '    }\n', '\n', '    function redeemUnderlyingFor(\n', '    \taddress from, address to, uint256 amount\n', '    ) external override returns (uint256 redeemedCEth) {\n', '    \tredeemedCEth = _convertEthToCEth(amount);\n', '    \t_redeemFor(from, to, redeemedCEth);\n', '    }\n', '\n', '    function _redeemFor(\n', '    \taddress from, address to, uint256 amount\n', '    ) internal returns (uint256 receivedEther) {\n', '    \trequire(\n', '    \t\tcETH.transferFrom(from, address(this), amount),\n', '    \t\t"Transfer in failed... is allowance set on cETH for this contract?"\n', '    \t);\n', '    \trequire(\n', '    \t\tcETH.redeem(amount) == 0,\n', '    \t\t"Redeeming cETH failed."\n', '    \t);\n', '\n', '    \treceivedEther = address(this).balance;\n', '        (bool ok, ) = to.call{value: receivedEther}("");\n', '        if (!ok) {\n', '            assembly {\n', '                returndatacopy(0, 0, returndatasize())\n', '                revert(0, returndatasize())\n', '            }\n', '        }\n', '    }\n', '\n', '    function _convertEthToCEth(uint256 ethAmount) internal returns (uint256 cETHAmount) {\n', '    \tcETHAmount = (ethAmount * 1e18) / cETH.exchangeRateCurrent();\n', '    }\n', '}']