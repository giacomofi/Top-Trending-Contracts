['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract TimeUtil {\n', '    uint256 private constant blockPerSecNumerator = 1;\n', '    uint256 private constant blockPerSecDenominator = 13;\n', '    using SafeMath for uint256;\n', '\n', '    function blocksFromCurrent(uint256 targetTime) public view returns (uint256) {\n', '        return toBlocks(targetTime.sub(block.timestamp));\n', '    }\n', '\n', '    function blocksFromBegin(uint256 targetTime) public view returns (uint256) {\n', '        return blocksFromCurrent(targetTime).add(block.number);\n', '    }\n', '\n', '    function toBlocks(uint256 diffTime) public pure returns (uint256) {\n', '        return diffTime.mul(blockPerSecNumerator).div(blockPerSecDenominator);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract AdminAccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    EnumerableSet.AddressSet private _adminSet;\n', '\n', '    constructor() internal {\n', '        _adminSet.add(_msgSender());\n', '    }\n', '\n', '    function getAdministrators() public view returns (address[] memory addresses) {\n', '        addresses = new address[](_adminSet.length());\n', '        for (uint256 index = 0; index < addresses.length; ++index) addresses[index] = _adminSet.at(index);\n', '    }\n', '\n', '    function addAdministrator(address account) public onlyAdmin {\n', '        require(_adminSet.add(account), "AccessControl: account already an administrator.");\n', '    }\n', '\n', '    function clearAdministrator(address account) public onlyAdmin {\n', '        require(_adminSet.length() > 1, "AccessControl: cannot remove last administrator.");\n', '        require(_adminSet.remove(account), "AccessControl: account not an administrator.");\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(_adminSet.contains(_msgSender()), "AccessControl: require administrator account");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract StakingBase is ReentrancyGuard, AdminAccessControl {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct UserInfo {\n', '        uint256 amount; // deposited amount\n', '        uint256 rewardDebt; // reward debt for pending calculation\n', '        uint256 exChanged; // total claimed token\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        address tokenAddress; // address of sataking token\n', '        uint256 poolPledged; // total pledged token per pool\n', '        uint256 allocPoint; // How many allocation points assigned to this pool.\n', '        uint256 lastRewardBlock; // Last block number that token distribution occurs.\n', '        uint256 accTokenPerShare; // Accumulated token per share, times 1e12.\n', '    }\n', '\n', '    struct PeriodeReleases {\n', '        uint256 blockOffset; // number of block from mining begin\n', '        uint256 tokenPerBlock; // number of tokens release per block \n', '    }\n', '\n', '    // How many allocation points assigned in total.\n', '    uint256 public totalAllocPoint;\n', '\n', '    // periodes\n', '    PeriodeReleases[] public periodes;\n', '\n', '    // Tokens that will be released\n', '    uint256 public miningTotal;\n', '\n', '    // the beginning block of mining\n', '    uint256 public miningBeginBlock;\n', ' \n', '\n', '    // yao token\n', '    IERC20 private _yao;\n', '\n', '    bool public isEmergency;\n', '\n', '    // abstraction pools, which might be an ERC1155 pool, an ERC20 pool, even a CFX pool\n', '    // depens on inherition\n', '    PoolInfo[] public poolInfo;\n', '\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '\n', '    event Withdraw(address indexed user, uint256 indexed pId, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pId, uint256 amount);\n', '\n', '    constructor(IERC20 yao_) public {\n', '        _yao = yao_;\n', '        isEmergency = false;\n', '    }\n', '\n', '    function setEmergency(bool isEmergency_) public onlyAdmin {\n', '        isEmergency = isEmergency_;\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev add new pool, with alloc point\n', '     * any inherited contract should call this function to create the pool\n', '     */\n', '    function _add(uint256 _allocPoint, address tokenAddress) internal onlyAdmin returns (uint256) {\n', '        _updateAllPools();\n', '        uint256 pid = poolInfo.length;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({tokenAddress: tokenAddress, poolPledged: 0, allocPoint: _allocPoint, lastRewardBlock: miningBeginBlock, accTokenPerShare: 0}));\n', '        return pid;\n', '    }\n', '\n', '    /**\n', "     * @dev modify an pool's alloc point.\n", '     * in order to minimize inaccuracy, it should call before the pool opens or as soon as a periode is advanced\n', '     */\n', '    function setAllocPoint(uint256 pId, uint256 _allocPoint) public virtual onlyAdmin {\n', '        _updateAllPools();\n', '        PoolInfo storage pool = poolInfo[pId];\n', '        totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\n', '        pool.allocPoint = _allocPoint;\n', '    }\n', '\n', '    /**\n', "     * @dev get the balance of owner's periode token\n", '     */\n', '    function pendingToken(uint256 pId, address _user) external view returns (uint256) {\n', '        PoolInfo memory pool = poolInfo[pId];\n', '        UserInfo memory user = userInfo[pId][_user];\n', '        uint256 accTokenPerShare = pool.accTokenPerShare;\n', '        if (block.number > pool.lastRewardBlock && pool.poolPledged > 0) {\n', '            uint256 yaoReward = getPoolReward(pool.lastRewardBlock, pool.allocPoint);\n', '            accTokenPerShare = accTokenPerShare.add(yaoReward.mul(1e12).div(pool.poolPledged));\n', '        }\n', '        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    /**\n', '     * @dev refresh all pool infomation, should be called before modification is maked for any pools\n', '     */\n', '    function _updateAllPools() internal virtual {\n', '        for (uint256 idxPool = 0; idxPool < poolInfo.length; ++idxPool) _updatePool(poolInfo[idxPool]);\n', '    }\n', '\n', '    /**\n', '     * @dev Update reward variables of the given pool to be up-to-date.\n', '     */\n', '\n', '    function _updatePool(PoolInfo storage pool) internal virtual {\n', '        // if the mining is not started there is no needs to update\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        // if there is nothing in this pool\n', '        if (pool.poolPledged == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        // get reward\n', '        uint256 yaoReward = getPoolReward(pool.lastRewardBlock, pool.allocPoint);\n', '        // calcult accumulate token per share\n', '        pool.accTokenPerShare = pool.accTokenPerShare.add(yaoReward.mul(1e12).div(pool.poolPledged));\n', '        // update pool last reward block\n', '        pool.lastRewardBlock = block.number;  \n', '    }\n', '\n', '    /**\n', '     * @dev deposit token into pool\n', '     * any inherited contract should call this function to make a deposit\n', '     */\n', '    function _deposit(uint256 pId, uint256 _amount) internal nonReentrant returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[pId];\n', '        UserInfo storage user = userInfo[pId][_msgSender()];\n', '        _withdrawPool(pId, user);\n', '        user.amount = user.amount.add(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n', '        pool.poolPledged = pool.poolPledged.add(_amount);\n', '        return user.amount;\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw staking token from pool\n', '     * any inherited contract should call this function to make a withdraw\n', '     */\n', '    function _withdraw(uint256 pId, uint256 _amount) internal nonReentrant returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[pId];\n', '        UserInfo storage user = userInfo[pId][_msgSender()];\n', '        require(user.amount >= _amount, "StakingBase: _withdraw needs amount > user.amount");\n', '        _withdrawPool(pId, user);\n', '        user.amount = user.amount.sub(_amount);\n', '        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n', '        pool.poolPledged = pool.poolPledged.sub(_amount);\n', '        return user.amount;\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw without tokens, emergency only\n', '     * any inherited contract should call this function to make a emergencyWithdraw\n', '     */\n', '    function _emergencyWithdraw(uint256 pId) internal nonReentrant onEmergency returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[pId];\n', '        UserInfo storage user = userInfo[pId][_msgSender()];\n', '        if (user.amount > 0) {\n', '            user.amount = 0;\n', '            user.rewardDebt = 0;\n', '            pool.poolPledged = pool.poolPledged.sub(user.amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw periode token from pool(in this case is Yao)\n', '     */\n', '    function withdrawPool(uint256 pId) public nonReentrant {\n', '        _withdrawPool(pId, userInfo[pId][_msgSender()]);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw periode token from every pool(in this case is Yao)\n', '     */\n', '    function withdrawPoolAll() public nonReentrant {\n', '        for (uint256 index = 0; index < poolInfo.length; ++index) {\n', '            UserInfo storage user = userInfo[index][_msgSender()];\n', '            if (user.amount > 0) _withdrawPool(index, user);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev implemtation of withdraw pending tokens\n', '     */\n', '    function _withdrawPool(uint256 pId, UserInfo storage user) private {\n', '        PoolInfo storage pool = poolInfo[pId];\n', '        // update pool for new accTokenPerShare\n', '        _updatePool(pool);\n', '        // calculate pending tokens\n', '        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\n', '        // if has pending token, then send\n', '        if (pending > 0) {\n', '            safeTransferYAO(_msgSender(), pending);\n', '            user.exChanged = user.exChanged.add(pending);\n', '            emit Withdraw(_msgSender(), pId, pending);\n', '        }\n', '        // update user reward debut\n', '        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\n', '    }\n', ' \n', '\n', '    // Safe Yao transfer function, just in case if rounding error causes pool to not have enough tokens.\n', '    function safeTransferYAO(address to, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            uint256 acgBal = _yao.balanceOf(address(this));\n', '            if (amount > acgBal) {\n', '                _yao.transfer(to, acgBal);\n', '            } else {\n', '                _yao.transfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev get pool reward\n', '     */\n', '    function getPoolReward(uint256 _poolLastRewardBlock, uint256 _poolAllocPoint) internal view returns (uint256) {\n', '        return getPoolReward(_poolLastRewardBlock, _poolAllocPoint, block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev get pool reward\n', '     */\n', '    function getPoolReward(\n', '        uint256 _poolLastRewardBlock,\n', '        uint256 _poolAllocPoint,\n', '        uint256 _blockNumber\n', '    ) internal view returns (uint256) {\n', '        if (_blockNumber < miningBeginBlock) return 0;\n', '\n', '        // get offset of current block from beginning\n', '        uint256 currentOffset = _blockNumber.sub(miningBeginBlock);\n', '        // get offset of last reward block from beginning\n', '        uint256 lasRewardBlockOffset = _poolLastRewardBlock.sub(miningBeginBlock);\n', '        uint256 poolRewards = 0;\n', '        // from last periode to first periode\n', '        for (uint256 idx = periodes.length - 1; ; --idx) {\n', '            // if last reward is later that current periode,\n', '            // so we sure that lasRewardBlockOffset to currentOffset is in the same periode,\n', '            // accumulate rewards then stop iterate.\n', '            // if not, that lasRewardBlockOffset and currentOffset is in the different periode,\n', '            // accumulate rewards and move currentOffset to the beginning of current periode, contiune to iterate\n', '            PeriodeReleases memory onePeriode = periodes[idx];\n', '            if (lasRewardBlockOffset >= onePeriode.blockOffset) {\n', '                poolRewards = poolRewards.add(onePeriode.tokenPerBlock * currentOffset.sub(lasRewardBlockOffset));\n', '                break;\n', '            } else if (currentOffset > onePeriode.blockOffset) {\n', '                poolRewards = poolRewards.add(onePeriode.tokenPerBlock * (currentOffset.sub(onePeriode.blockOffset)));\n', '                currentOffset = onePeriode.blockOffset;\n', '            }\n', '        }\n', '        // apply allocation percentage to pool reward\n', '        return poolRewards.mul(_poolAllocPoint).div(totalAllocPoint);\n', '    }\n', '\n', '    function getBlockInfo() public view returns (uint256, uint256) {\n', '        return (block.timestamp, block.number);\n', '    }\n', '\n', '    function estimateRewards(\n', '        uint256 pId,\n', '        uint256 amount,\n', '        uint256 blockOffset\n', '    ) public view returns (uint256 rewards) {\n', '        PoolInfo memory pool = poolInfo[pId];\n', '        uint256 yaoReward = getPoolReward(block.number, pool.allocPoint, block.number.add(blockOffset));\n', '        return yaoReward.mul(amount).div(pool.poolPledged.add(amount));\n', '    }\n', '\n', '    function totalReleased() public view returns (uint256) {\n', '        if (block.number < miningBeginBlock) return 0;\n', '        // get offset of current block from beginning\n', '        uint256 currentOffset = block.number.sub(miningBeginBlock);\n', '        uint256 sum = 0;\n', '        for (uint256 idx = periodes.length - 1; ; --idx) {\n', '            PeriodeReleases memory onePeriode = periodes[idx];\n', '            if (currentOffset > onePeriode.blockOffset) {\n', '                sum = sum.add(onePeriode.tokenPerBlock * (currentOffset.sub(onePeriode.blockOffset)));\n', '                currentOffset = onePeriode.blockOffset;\n', '                if (idx == 0) break;\n', '            }\n', '        }\n', '        return sum;\n', '    }\n', '\n', '    modifier onEmergency() {\n', '        require(isEmergency, "StakingBase: not in emergency");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n', '    constructor() internal {\n', '        _registerInterface(\n', '            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n', '            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n', '        );\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Library for managing an enumerable variant of Solidity's\n", ' * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n', ' * type.\n', ' *\n', ' * Maps have the following properties:\n', ' *\n', ' * - Entries are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableMap for EnumerableMap.UintToUintMap;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableMap.UintToUintMap private myMap;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only maps of type `uint256 -> uint256` (`UintToUintMap`) are\n', ' * supported.\n', ' */\n', 'library EnumerableMap {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Map type with\n', '    // bytes32 keys and values.\n', '    // The Map implementation uses private functions, and user-facing\n', '    // implementations (such as Uint256Touint256Map) are just wrappers around\n', '    // the underlying Map.\n', '    // This means that we can only create new EnumerableMaps for types that fit\n', '    // in bytes32.\n', '\n', '    struct MapEntry {\n', '        bytes32 _key;\n', '        bytes32 _value;\n', '    }\n', '\n', '    struct Map {\n', '        // Storage of map keys and values\n', '        MapEntry[] _entries;\n', '        // Position of the entry defined by a key in the `entries` array, plus 1\n', '        // because index 0 means a key is not in the map.\n', '        mapping(bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function _set(\n', '        Map storage map,\n', '        bytes32 key,\n', '        bytes32 value\n', '    ) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex == 0) {\n', '            // Equivalent to !contains(map, key)\n', '            map._entries.push(MapEntry({_key: key, _value: value}));\n', '            // The entry is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            map._indexes[key] = map._entries.length;\n', '            return true;\n', '        } else {\n', '            map._entries[keyIndex - 1]._value = value;\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a key-value pair from a map. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function _remove(Map storage map, bytes32 key) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex != 0) {\n', '            // Equivalent to contains(map, key)\n', '            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n', "            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = keyIndex - 1;\n', '            uint256 lastIndex = map._entries.length - 1;\n', '\n', '            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            MapEntry storage lastEntry = map._entries[lastIndex];\n', '\n', '            // Move the last entry to the index where the entry to delete is\n', '            map._entries[toDeleteIndex] = lastEntry;\n', '            // Update the index for the moved entry\n', '            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved entry was stored\n', '            map._entries.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete map._indexes[key];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n', '        return map._indexes[key] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of key-value pairs in the map. O(1).\n', '     */\n', '    function _length(Map storage map) private view returns (uint256) {\n', '        return map._entries.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of entries inside the\n', '     * array, and it may change when more entries are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n', '        require(map._entries.length > index, "EnumerableMap: index out of bounds");\n', '\n', '        MapEntry storage entry = map._entries[index];\n', '        return (entry._key, entry._value);\n', '    }\n', '\n', '    /**\n', '     * @dev Tries to returns the value associated with `key`.  O(1).\n', '     * Does not revert if `key` is not in the map.\n', '     */\n', '    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n', '        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, "EnumerableMap: nonexistent key"); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {_tryGet}.\n', '     */\n', '    function _get(\n', '        Map storage map,\n', '        bytes32 key,\n', '        string memory errorMessage\n', '    ) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    // UintToUintMap\n', '\n', '    struct UintToUintMap {\n', '        Map _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(\n', '        UintToUintMap storage map,\n', '        uint256 key,\n', '        uint256 value\n', '    ) internal returns (bool) {\n', '        return _set(map._inner, bytes32(key), bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(UintToUintMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the element stored at position `index` in the set. O(1).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (uint256(key), uint256(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Tries to returns the value associated with `key`.  O(1).\n', '     * Does not revert if `key` is not in the map.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n', '        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n', '        return (success, uint256(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n', '        return uint256(_get(map._inner, bytes32(key)));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryGet}.\n', '     */\n', '    function get(\n', '        UintToUintMap storage map,\n', '        uint256 key,\n', '        string memory errorMessage\n', '    ) internal view returns (uint256) {\n', '        return uint256(_get(map._inner, bytes32(key), errorMessage));\n', '    }\n', '}\n', '\n', '\n', 'contract StakingERC1155Receiver is ERC1155Receiver {\n', '    event OnERC1155Received(address operator, address from, uint256 id, uint256 value, bytes data);\n', '    event OnERC1155BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data);\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) public virtual override returns (bytes4) {\n', '        //return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));\n', '        emit OnERC1155Received(operator, from, id, value, data);\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    ) public virtual override returns (bytes4) {\n', '        //return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"));\n', '        emit OnERC1155BatchReceived(operator, from, ids, values, data);\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract StakingERC1155 is StakingBase, StakingERC1155Receiver {\n', '    using SafeMath for uint256;\n', '    using EnumerableMap for EnumerableMap.UintToUintMap;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '\n', '    uint256 constant ERC1155StakingMax = 5;\n', '\n', '    mapping(uint256 => mapping(address => EnumerableMap.UintToUintMap)) private _erc1155Pools;\n', '    EnumerableSet.UintSet private _erc1155PoolIdSet;\n', '\n', '    event DepositERC1155(address indexed user, uint256 indexed pid, uint256[] erc1155Id, uint256[] amount);\n', '    event WithdrawERC1155(address indexed user, uint256 indexed pid, uint256[] erc1155Id, uint256[] amount);\n', '\n', '    constructor() internal {}\n', '\n', '    /**\n', '     * @dev add a erc1155 pool\n', '     */\n', '    function addERC1155Pool(uint256 _allocPoint, address _1155TokenAddr) public onlyAdmin {\n', '        uint256 pId = _add(_allocPoint, _1155TokenAddr);\n', '        _erc1155PoolIdSet.add(pId);\n', '    }\n', '\n', '    /**\n', '     * @dev deposit erc1155 token to pool\n', '     */\n', '    function depositERC1155(\n', '        uint256 pId,\n', '        uint256[] calldata erc1155Ids,\n', '        uint256[] calldata amounts\n', '    ) public validAsERC1155PId(pId) {\n', '        require(erc1155Ids.length == amounts.length, "StakingERC1155: _ids and amounts length mismatch");\n', '        uint256 amountSum = 0;\n', '        EnumerableMap.UintToUintMap storage erc1155Entities = _erc1155Pools[pId][_msgSender()];\n', '\n', '        for (uint256 index = 0; index < erc1155Ids.length; ++index) {\n', '            (, uint256 count) = erc1155Entities.tryGet(erc1155Ids[index]);\n', '            erc1155Entities.set(erc1155Ids[index], count.add(amounts[index]));\n', '            amountSum = amountSum.add(amounts[index]);\n', '        }\n', '\n', '        require(_deposit(pId, amountSum) <= ERC1155StakingMax, "StakingERC1155: NFT staking count exceed its maximun");\n', '        IERC1155 tokenProdiver = IERC1155(poolInfo[pId].tokenAddress); // get token provider by id\n', '        tokenProdiver.safeBatchTransferFrom(_msgSender(), address(this), erc1155Ids, amounts, "");\n', '        emit DepositERC1155(_msgSender(), pId, erc1155Ids, amounts);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw erc1155 token from pool\n', '     */\n', '    function withdrawERC1155(\n', '        uint256 pId,\n', '        uint256[] calldata erc1155Ids,\n', '        uint256[] calldata amounts\n', '    ) public validAsERC1155PId(pId) {\n', '        require(erc1155Ids.length == amounts.length, "StakingERC1155: _ids and amounts length mismatch");\n', '        uint256 amountSum = 0;\n', '        EnumerableMap.UintToUintMap storage erc1155Entities = _erc1155Pools[pId][_msgSender()];\n', '\n', '        for (uint256 index = 0; index < erc1155Ids.length; ++index) {\n', '            uint256 id = erc1155Ids[index];\n', '            uint256 amount = amounts[index];\n', '\n', '            uint256 count = erc1155Entities.get(id);\n', '            uint256 rest = count.sub(amount);\n', '            if (rest > 0) erc1155Entities.set(id, rest);\n', '            else erc1155Entities.remove(id);\n', '            amountSum = amountSum.add(amount);\n', '        }\n', '\n', '        _withdraw(pId, amountSum);\n', '        IERC1155 tokenProdiver = IERC1155(poolInfo[pId].tokenAddress); // get token provider by id\n', '        tokenProdiver.safeBatchTransferFrom(address(this), _msgSender(), erc1155Ids, amounts, "");\n', '        emit WithdrawERC1155(_msgSender(), pId, erc1155Ids, amounts);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw all staked erc1155 tokens in emergency, without tansfer pending tokens\n', '     */\n', '    function emergencyWithdrawERC1155(uint256 pId) public onEmergency validAsERC1155PId(pId) {\n', '        (uint256[] memory erc1155Ids, uint256[] memory amounts) = pledgedERC1155(pId, _msgSender());\n', '        _emergencyWithdraw(pId);\n', '        IERC1155 tokenProdiver = IERC1155(poolInfo[pId].tokenAddress); // get token provider by id\n', '        tokenProdiver.safeBatchTransferFrom(address(this), _msgSender(), erc1155Ids, amounts, "");\n', '    }\n', '\n', '    /**\n', '     * @dev get user pledgedERC1155 tokens for all pools\n', '     */\n', '    function pledgedERC1155(uint256 pId, address user) public view validAsERC1155PId(pId) returns (uint256[] memory erc1155Ids, uint256[] memory amounts) {\n', '        EnumerableMap.UintToUintMap storage erc1155Entities = _erc1155Pools[pId][user];\n', '        uint256 count = erc1155Entities.length();\n', '        erc1155Ids = new uint256[](count);\n', '        amounts = new uint256[](count);\n', '        for (uint256 index = 0; index < count; ++index) (erc1155Ids[index], amounts[index]) = erc1155Entities.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev get all ERC1155 token pool ids\n', '     */\n', '    function listERC1155PoolIds() public view returns (uint256[] memory poolIds) {\n', '        poolIds = new uint256[](_erc1155PoolIdSet.length());\n', '        for (uint256 index = 0; index < poolIds.length; ++index) poolIds[index] = _erc1155PoolIdSet.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev valid a pool id is belonged to erc 20 pool\n', '     */\n', '    modifier validAsERC1155PId(uint256 pId) {\n', '        require(_erc1155PoolIdSet.contains(pId), "StakingERC1155: pool id not belong to defi ERC1155");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC721Receiver} interface.\n', ' *\n', ' * Accepts all token transfers.\n', ' * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n', ' */\n', 'contract StakingERC721Receiver is ERC165, IERC721Receiver {\n', '    \n', '    constructor() internal {\n', '        _registerInterface(StakingERC721Receiver(address(0)).onERC721Received.selector);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Receiver-onERC721Received}.\n', '     *\n', '     * Always returns `IERC721Receiver.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(\n', '        address,\n', '        address,\n', '        uint256,\n', '        bytes memory\n', '    ) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract StakingERC721 is StakingBase, StakingERC721Receiver {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '\n', '    uint256 constant ERC721StakingMax = 5;\n', '\n', '    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) private erc721Pools;\n', '    EnumerableSet.UintSet private erc721PoolIdSet;\n', '\n', '    event DepositERC721(address indexed user, uint256 indexed pid, uint256 indexed erc721Id);\n', '    event WithdrawERC721(address indexed user, uint256 indexed pid, uint256 indexed erc721Id);\n', '\n', '    constructor() internal {}\n', '\n', '    // Add a new erc721 token to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function addERC721Pool(uint256 _allocPoint, address _721TokenAddr) public onlyAdmin {\n', '        uint256 pId = _add(_allocPoint, _721TokenAddr);\n', '        erc721PoolIdSet.add(pId);\n', '    }\n', '\n', '    // Deposit ERC721s to MasterChef for XIAONAN allocation.\n', '    function depositERC721(uint256 pId, uint256 erc721Id) public validAsERC721PId(pId) {\n', '        EnumerableSet.UintSet storage erc721Entities = erc721Pools[pId][_msgSender()];\n', '        require(erc721Entities.add(erc721Id), "StakingERC721: erc721 token already deposited");\n', '        require(_deposit(pId, 1) <= ERC721StakingMax, "StakingERC721: NFT staking count exceed its maximun");\n', '        IERC721 tokenProdiver = IERC721(poolInfo[pId].tokenAddress);\n', '        tokenProdiver.safeTransferFrom(_msgSender(), address(this), erc721Id);\n', '        emit DepositERC721(_msgSender(), pId, erc721Id);\n', '    }\n', '\n', '    // Withdraw ERC721s from MasterChef.\n', '    function withdrawERC721(uint256 pId, uint256 erc721Id) public validAsERC721PId(pId) {\n', '        EnumerableSet.UintSet storage erc721Entities = erc721Pools[pId][_msgSender()];\n', '        require(erc721Entities.remove(erc721Id), "StakingERC721: erc721 token not existe");\n', '        _withdraw(pId, 1);\n', '        IERC721 tokenProdiver = IERC721(poolInfo[pId].tokenAddress);\n', '        tokenProdiver.safeTransferFrom(address(this), _msgSender(), erc721Id);\n', '        emit WithdrawERC721(_msgSender(), pId, erc721Id);\n', '    }\n', ' \n', '    /**\n', '     * @dev withdraw all staked erc1155 tokens in emergency, without tansfer pending tokens\n', '     */\n', '    function emergencyWithdrawERC721(uint256 pId) public onEmergency validAsERC721PId(pId) {\n', '        uint256[] memory erc721Ids = pledgedERC721(pId, _msgSender());\n', '        _emergencyWithdraw(pId);\n', '        IERC721 tokenProdiver = IERC721(poolInfo[pId].tokenAddress); // get token provider by id\n', '        for (uint256 index = 0; index < erc721Ids.length; ++index)\n', '            tokenProdiver.safeTransferFrom(address(this), _msgSender(), erc721Ids[index]);\n', '    }\n', '\n', '    function pledgedERC721(uint256 pId, address _user) public view validAsERC721PId(pId) returns (uint256[] memory erc721Ids) {\n', '        EnumerableSet.UintSet storage erc721Entities = erc721Pools[pId][_user];\n', '        uint256 count = erc721Entities.length();\n', '        erc721Ids = new uint256[](count);\n', '        for (uint256 index = 0; index < count; ++index) erc721Ids[index] = erc721Entities.at(index);\n', '    }\n', '\n', '    function listERC721PoolIds() public view returns (uint256[] memory poolIds) {\n', '        poolIds = new uint256[](erc721PoolIdSet.length());\n', '        for (uint256 index = 0; index < poolIds.length; ++index) poolIds[index] = erc721PoolIdSet.at(index);\n', '    }\n', '\n', '    modifier validAsERC721PId(uint256 pId) {\n', '        require(erc721PoolIdSet.contains(pId), "StakingERC721: pool id not belong to defi ERC721");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract StakingYao is Ownable, StakingBase, StakingERC1155, StakingERC721, TimeUtil {\n', '    constructor(IERC20 yao_) public StakingBase(yao_) {\n', '        prodInit();\n', '    } \n', '\n', '    function prodInit() private {\n', '        miningBeginBlock = 12527500; //2021/05/29 13:54:19\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(0 days), tokenPerBlock: calculeTokenPerBlock(60000 ether, 14 days)}));\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(14 days), tokenPerBlock: calculeTokenPerBlock(25000 ether, 90 days)}));\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(104 days), tokenPerBlock: calculeTokenPerBlock(10000 ether, 90 days)}));\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(194 days), tokenPerBlock: calculeTokenPerBlock(3750 ether, 90 days)}));\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(284 days), tokenPerBlock: calculeTokenPerBlock(1250 ether, 90 days)}));\n', '        periodes.push(PeriodeReleases({blockOffset: toBlocks(374 days), tokenPerBlock: 0}));\n', '\n', '        updateMiningTotal();\n', '    }\n', '\n', '    function updateMiningTotal() private {\n', '        uint256 sum = 0;\n', '        for (uint256 index = 1; index < periodes.length; ++index) {\n', '            sum += (periodes[index].blockOffset - periodes[index - 1].blockOffset) * periodes[index - 1].tokenPerBlock;\n', '        }\n', '        miningTotal = sum;\n', '    }\n', '\n', '    function calculeTokenPerBlock(uint256 amount, uint256 time) private pure returns (uint256) {\n', '        return amount / toBlocks(time);\n', '    }\n', '}']