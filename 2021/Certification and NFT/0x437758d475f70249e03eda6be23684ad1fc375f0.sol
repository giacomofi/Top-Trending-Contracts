['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', '/*******************************************************\n', ' *                       Interfaces                    *\n', ' *******************************************************/\n', 'interface IV2Registry {\n', '    function numTokens() external view returns (uint256);\n', '\n', '    function numVaults(address token) external view returns (uint256);\n', '\n', '    function tokens(uint256 tokenIdx) external view returns (address);\n', '\n', '    function latestVault(address token) external view returns (address);\n', '\n', '    function vaults(address token, uint256 tokenIdx)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'interface ManagementList {\n', '    function isManager(address accountAddress) external returns (bool);\n', '}\n', '\n', '/*******************************************************\n', ' *                     Management List                 *\n', ' *******************************************************/\n', '\n', 'contract Manageable {\n', '    ManagementList public managementList;\n', '\n', '    constructor(address _managementListAddress) {\n', '        managementList = ManagementList(_managementListAddress);\n', '    }\n', '\n', '    modifier onlyManagers() {\n', '        bool isManager = managementList.isManager(msg.sender);\n', '        require(isManager, "ManagementList: caller is not a manager");\n', '        _;\n', '    }\n', '}\n', '\n', '/*******************************************************\n', ' *                    Generator Logic                  *\n', ' *******************************************************/\n', 'contract AddressesGenerator_VAULT_V2 is Manageable {\n', '    mapping(address => bool) public assetDeprecated; // Support for deprecating assets. If an asset is deprecated it will not appear is results\n', '    uint256 public numberOfDeprecatedAssets; // Used to keep track of the number of deprecated assets for an adapter\n', '    address[] public positionSpenderAddresses; // A settable list of spender addresses with which to fetch asset allowances\n', '    IV2Registry public registry; // The registry is used to fetch the list of vaults and migration data\n', '\n', '    /**\n', '     * Information about the generator\n', '     */\n', '    struct GeneratorInfo {\n', '        address id; // Generator address\n', '        string typeId; // Generator typeId (for example "VAULT_V2" or "IRON_BANK_MARKET")\n', '        string categoryId; // Generator categoryId (for example "VAULT")\n', '    }\n', '\n', '    /**\n', '     * Configure generator\n', '     */\n', '    constructor(address _registryAddress, address _managementListAddress)\n', '        Manageable(_managementListAddress)\n', '    {\n', '        require(\n', '            _managementListAddress != address(0),\n', '            "Missing management list address"\n', '        );\n', '        require(_registryAddress != address(0), "Missing registry address");\n', '        registry = IV2Registry(_registryAddress);\n', '    }\n', '\n', '    /**\n', '     * Deprecate or undeprecate an asset. Deprecated assets will not appear in any adapter or generator method call responses\n', '     */\n', '    function setAssetDeprecated(address assetAddress, bool newDeprecationStatus)\n', '        public\n', '        onlyManagers\n', '    {\n', '        bool currentDeprecationStatus = assetDeprecated[assetAddress];\n', '        if (currentDeprecationStatus == newDeprecationStatus) {\n', '            revert("Generator: Unable to change asset deprecation status");\n', '        }\n', '        if (newDeprecationStatus == true) {\n', '            numberOfDeprecatedAssets++;\n', '        } else {\n', '            numberOfDeprecatedAssets--;\n', '        }\n', '        assetDeprecated[assetAddress] = newDeprecationStatus;\n', '    }\n', '\n', '    /**\n', '     * Set position spender addresses. Used by `adapter.assetAllowances(address,address)`.\n', '     */\n', '    function setPositionSpenderAddresses(address[] memory addresses)\n', '        public\n', '        onlyManagers\n', '    {\n', '        positionSpenderAddresses = addresses;\n', '    }\n', '\n', '    /**\n', '     * Fetch a list of position spender addresses\n', '     */\n', '    function getPositionSpenderAddresses()\n', '        external\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return positionSpenderAddresses;\n', '    }\n', '\n', '    /**\n', '     * Fetch generator info\n', '     */\n', '    function generatorInfo() public view returns (GeneratorInfo memory) {\n', '        return\n', '            GeneratorInfo({\n', '                id: address(this),\n', '                typeId: "VAULT_V2",\n', '                categoryId: "VAULT"\n', '            });\n', '    }\n', '\n', '    /**\n', '     * Fetch the total number of assets\n', '     */\n', '    function assetsLength() public view returns (uint256) {\n', '        uint256 numTokens = registry.numTokens();\n', '        uint256 numVaults;\n', '        for (uint256 tokenIdx = 0; tokenIdx < numTokens; tokenIdx++) {\n', '            address currentToken = registry.tokens(tokenIdx);\n', '            uint256 numVaultsForToken = registry.numVaults(currentToken);\n', '            numVaults += numVaultsForToken;\n', '        }\n', '        return numVaults - numberOfDeprecatedAssets;\n', '    }\n', '\n', '    /**\n', '     * Fetch all asset addresses\n', '     */\n', '    function assetsAddresses() public view returns (address[] memory) {\n', '        uint256 numVaults = assetsLength();\n', '        address[] memory _assetsAddresses = new address[](numVaults);\n', '        uint256 numTokens = registry.numTokens();\n', '        uint256 currentVaultIdx;\n', '        for (uint256 tokenIdx = 0; tokenIdx < numTokens; tokenIdx++) {\n', '            address currentTokenAddress = registry.tokens(tokenIdx);\n', '            uint256 numVaultsForToken = registry.numVaults(currentTokenAddress);\n', '            for (\n', '                uint256 vaultTokenIdx = 0;\n', '                vaultTokenIdx < numVaultsForToken;\n', '                vaultTokenIdx++\n', '            ) {\n', '                address currentAssetAddress =\n', '                    registry.vaults(currentTokenAddress, vaultTokenIdx);\n', '                bool assetIsNotDeprecated =\n', '                    assetDeprecated[currentAssetAddress] == false;\n', '                if (assetIsNotDeprecated) {\n', '                    _assetsAddresses[currentVaultIdx] = currentAssetAddress;\n', '                    currentVaultIdx++;\n', '                }\n', '            }\n', '        }\n', '        return _assetsAddresses;\n', '    }\n', '}']