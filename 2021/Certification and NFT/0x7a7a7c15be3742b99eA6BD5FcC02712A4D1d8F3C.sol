['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-23\n', '*/\n', '\n', '// SPDX-License-Identifier: NONE\n', '\n', 'pragma solidity 0.7.4;\n', '\n', '\n', '\n', '// Part: Gauge\n', '\n', 'interface Gauge {\n', '    function deposit(uint amount, address receiver) external;\n', '}\n', '\n', '// Part: IERC20\n', '\n', 'interface IERC20 {\n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', '// File: <stdin>.sol\n', '\n', 'contract GaugeDepositor {\n', '\n', '    function depositForMany(\n', '        IERC20 token,\n', '        Gauge gauge,\n', '        uint total,\n', '        address[] calldata receivers,\n', '        uint[] calldata amounts\n', '    ) external {\n', '        token.transferFrom(msg.sender, address(this), total);\n', '        for (uint i; i < receivers.length; i++) {\n', '            gauge.deposit(amounts[i], receivers[i]);\n', '        }\n', '    }\n', '\n', '    function approveGauges(IERC20[] calldata tokens, address[] calldata gauges) external {\n', '        require(msg.sender == 0xF96dA4775776ea43c42795b116C7a6eCcd6e71b5);\n', '        for (uint i; i < tokens.length; i++) {\n', '            tokens[i].approve(gauges[i], uint(-1));\n', '        }\n', '    }\n', '\n', '}']