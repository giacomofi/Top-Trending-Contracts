['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '// This file was originally take from dapphub DSGuard and modified. Original source code can be found\n', '// here: https://github.com/dapphub/ds-guard/blob/master/src/guard.sol\n', '// Changes are limited to updating the Solidity version and some stylistic modifications.\n', '\n', '// guard.sol -- simple whitelist implementation of DSAuthority\n', '\n', '// Copyright (C) 2017  DappHub, LLC\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'abstract contract DSAuthority {\n', '    function canCall(\n', '        address src,\n', '        address dst,\n', '        bytes4 sig\n', '    ) public view virtual returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(address(0))) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSGuardEvents {\n', '    event LogPermit(bytes32 indexed src, bytes32 indexed dst, bytes32 indexed sig);\n', '\n', '    event LogForbid(bytes32 indexed src, bytes32 indexed dst, bytes32 indexed sig);\n', '}\n', '\n', 'contract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\n', '    bytes32 public constant ANY = bytes32(type(uint256).max);\n', '\n', '    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\n', '\n', '    function canCall(\n', '        address src_,\n', '        address dst_,\n', '        bytes4 sig\n', '    ) public view override returns (bool) {\n', '        bytes32 src = bytes32(bytes20(src_));\n', '        bytes32 dst = bytes32(bytes20(dst_));\n', '\n', '        return\n', '            acl[src][dst][sig] ||\n', '            acl[src][dst][ANY] ||\n', '            acl[src][ANY][sig] ||\n', '            acl[src][ANY][ANY] ||\n', '            acl[ANY][dst][sig] ||\n', '            acl[ANY][dst][ANY] ||\n', '            acl[ANY][ANY][sig] ||\n', '            acl[ANY][ANY][ANY];\n', '    }\n', '\n', '    function permit(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public auth {\n', '        acl[src][dst][sig] = true;\n', '        emit LogPermit(src, dst, sig);\n', '    }\n', '\n', '    function forbid(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public auth {\n', '        acl[src][dst][sig] = false;\n', '        emit LogForbid(src, dst, sig);\n', '    }\n', '\n', '    function permit(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public {\n', '        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n', '    }\n', '\n', '    function forbid(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public {\n', '        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n', '    }\n', '}\n', '\n', 'contract DSGuardFactory {\n', '    mapping(address => bool) public isGuard;\n', '\n', '    function newGuard() public returns (DSGuard guard) {\n', '        guard = new DSGuard();\n', '        guard.setOwner(msg.sender);\n', '        isGuard[address(guard)] = true;\n', '    }\n', '}\n', '\n', '\n', 'contract converter{\n', '    function convert(address src_) public pure returns (bytes32){\n', '        return bytes32(bytes20(src_));\n', '    }\n', '}']