['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/// AdvancedTokenAdapters.sol\n', '\n', '// Copyright (C) 2018 Rain <[email\xa0protected]>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function modifyCollateralBalance(bytes32,address,int) virtual public;\n', '}\n', '\n', '// CollateralJoin1\n', 'abstract contract CollateralLike {\n', '    function decimals() virtual public view returns (uint);\n', '    function transfer(address,uint) virtual public returns (bool);\n', '    function transferFrom(address,address,uint) virtual public returns (bool);\n', '}\n', '\n', 'contract CollateralJoin1 {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "CollateralJoin1/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    SAFEEngineLike public safeEngine;\n', '    bytes32        public collateralType;\n', '    CollateralLike public collateral;\n', '    uint           public decimals;\n', '    uint           public contractEnabled;  // Access Flag\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event DisableContract();\n', '    event Join(address sender, address usr, uint wad);\n', '    event Exit(address sender, address usr, uint wad);\n', '\n', '    constructor(address safeEngine_, bytes32 collateralType_, address collateral_) public {\n', '        authorizedAccounts[msg.sender] = 1;\n', '        contractEnabled = 1;\n', '        safeEngine = SAFEEngineLike(safeEngine_);\n', '        collateralType = collateralType_;\n', '        collateral = CollateralLike(collateral_);\n', '        decimals = collateral.decimals();\n', '        require(decimals == 18, "CollateralJoin1/not-18-decimals");\n', '        emit AddAuthorization(msg.sender);\n', '    }\n', '\n', '    // --- Math ---\n', '    function addition(uint x, int y) internal pure returns (uint z) {\n', '        z = x + uint(y);\n', '        require(y >= 0 || z <= x);\n', '        require(y <= 0 || z >= x);\n', '    }\n', '\n', '    // --- Administration ---\n', '    function disableContract() external isAuthorized {\n', '        contractEnabled = 0;\n', '        emit DisableContract();\n', '    }\n', '\n', '    // --- Collateral Gateway ---\n', '    function join(address usr, uint wad) external {\n', '        require(contractEnabled == 1, "CollateralJoin1/not-contractEnabled");\n', '        require(int(wad) >= 0, "CollateralJoin1/overflow");\n', '        safeEngine.modifyCollateralBalance(collateralType, usr, int(wad));\n', '        require(collateral.transferFrom(msg.sender, address(this), wad), "CollateralJoin1/failed-transfer");\n', '        emit Join(msg.sender, usr, wad);\n', '    }\n', '    function exit(address usr, uint wad) external {\n', '        require(wad <= 2 ** 255, "CollateralJoin1/overflow");\n', '        safeEngine.modifyCollateralBalance(collateralType, msg.sender, -int(wad));\n', '        require(collateral.transfer(usr, wad), "CollateralJoin1/failed-transfer");\n', '        emit Exit(msg.sender, usr, wad);\n', '    }\n', '}']