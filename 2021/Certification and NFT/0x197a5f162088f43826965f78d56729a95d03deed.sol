['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal {}\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address _payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface PoolInterface {\n', '    function swapExactAmountIn(address, address, address, uint, address, uint) external returns (uint, uint);\n', '\n', '    function swapExactAmountOut(address, address, uint, address, uint, address, uint) external returns (uint, uint);\n', '\n', '    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '\n', '    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\n', '\n', '    function getDenormalizedWeight(address) external view returns (uint);\n', '\n', '    function getBalance(address) external view returns (uint);\n', '\n', '    function getSwapFee() external view returns (uint);\n', '\n', '    function gulp(address) external;\n', '\n', '    function calcDesireByGivenAmount(address, address, uint256, uint256) view external returns (uint);\n', '\n', '    function calcPoolSpotPrice(address, address, uint256, uint256) external view returns (uint256);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '\n', '    function allowance(address, address) external view returns (uint);\n', '\n', '    function approve(address, uint) external returns (bool);\n', '\n', '    function transfer(address, uint) external returns (bool);\n', '\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface RegistryInterface {\n', '    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\n', '}\n', '\n', 'contract ExchangeProxy is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Pool {\n', '        address pool;\n', '        uint tokenBalanceIn;\n', '        uint tokenWeightIn;\n', '        uint tokenBalanceOut;\n', '        uint tokenWeightOut;\n', '        uint swapFee;\n', '        uint effectiveLiquidity;\n', '    }\n', '\n', '    struct Swap {\n', '        address pool;\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint swapAmount; // tokenInAmount / tokenOutAmount\n', '        uint limitReturnAmount; // minAmountOut / maxAmountIn\n', '        uint maxPrice;\n', '    }\n', '\n', '    TokenInterface weth;\n', '    RegistryInterface registry;\n', '    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    uint private constant BONE = 10 ** 18;\n', '\n', '    constructor(address _weth) public {\n', '        weth = TokenInterface(_weth);\n', '    }\n', '\n', '    function setRegistry(address _registry) external onlyOwner {\n', '        registry = RegistryInterface(_registry);\n', '    }\n', '\n', '    function batchSwapExactIn(\n', '        Swap[] memory swaps,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    )\n', '    public payable\n', '    returns (uint totalAmountOut)\n', '    {\n', '        address from = msg.sender;\n', '        if (isETH(tokenIn)) {\n', '            require(msg.value >= totalAmountIn, "ERROR_ETH_IN");\n', '            weth.deposit.value(totalAmountIn)();\n', '            from = address(this);\n', '        }\n', '        uint _totalSwapIn = 0;\n', '        for (uint i = 0; i < swaps.length; i++) {\n', '            Swap memory swap = swaps[i];\n', '            require(swap.tokenIn == address(tokenIn) || (swap.tokenIn == address(weth) && isETH(tokenIn)), "ERR_TOKENIN_NOT_MATCH");\n', '            safeTransferFrom(swap.tokenIn, from, swap.pool, swap.swapAmount);\n', '            address _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\n', '            PoolInterface pool = PoolInterface(swap.pool);\n', '            (uint tokenAmountOut,) = pool.swapExactAmountIn(\n', '                msg.sender,\n', '                swap.tokenIn,\n', '                swap.tokenOut,\n', '                swap.limitReturnAmount,\n', '                _to,\n', '                swap.maxPrice\n', '            );\n', '            if (_to != msg.sender) {\n', '                transferAll(tokenOut, tokenAmountOut);\n', '            }\n', '            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n', '            _totalSwapIn = _totalSwapIn.add(swap.swapAmount);\n', '        }\n', '        require(_totalSwapIn == totalAmountIn, "ERR_TOTAL_AMOUNT_IN");\n', '        require(totalAmountOut >= minTotalAmountOut, "ERR_LIMIT_OUT");\n', '        if (isETH(tokenIn) && msg.value > _totalSwapIn) {\n', '            (bool xfer,) = msg.sender.call.value(msg.value.sub(_totalSwapIn))("");\n', '            require(xfer, "ERR_ETH_FAILED");\n', '        }\n', '    }\n', '\n', '    function batchSwapExactOut(\n', '        Swap[] memory swaps,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint maxTotalAmountIn\n', '    )\n', '    public payable\n', '    returns (uint totalAmountIn)\n', '    {\n', '        address from = msg.sender;\n', '        if (isETH(tokenIn)) {\n', '            weth.deposit.value(msg.value)();\n', '            from = address(this);\n', '        }\n', '        for (uint i = 0; i < swaps.length; i++) {\n', '            Swap memory swap = swaps[i];\n', '            uint tokenAmountIn = getAmountIn(swap);\n', '            swap.tokenIn = isETH(tokenIn) ? address(weth) : swap.tokenIn;\n', '            safeTransferFrom(swap.tokenIn, from, swap.pool, tokenAmountIn);\n', '            address _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\n', '            PoolInterface pool = PoolInterface(swap.pool);\n', '            pool.swapExactAmountOut(\n', '                msg.sender,\n', '                swap.tokenIn,\n', '                swap.limitReturnAmount,\n', '                swap.tokenOut,\n', '                swap.swapAmount,\n', '                _to,\n', '                swap.maxPrice\n', '            );\n', '            if (_to != msg.sender) {\n', '                transferAll(tokenOut, swap.swapAmount);\n', '            }\n', '            totalAmountIn = tokenAmountIn.add(totalAmountIn);\n', '        }\n', '        require(totalAmountIn <= maxTotalAmountIn, "ERR_LIMIT_IN");\n', '        if (isETH(tokenIn) && msg.value > totalAmountIn) {\n', '            transferAll(tokenIn, msg.value.sub(totalAmountIn));\n', '        }\n', '    }\n', '\n', '    function multihopBatchSwapExactIn(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint totalAmountIn,\n', '        uint minTotalAmountOut\n', '    )\n', '    public payable\n', '    returns (uint totalAmountOut)\n', '    {\n', '        uint totalSwapAmount = 0;\n', '        address from = msg.sender;\n', '        if (isETH(tokenIn)) {\n', '            require(msg.value >= totalAmountIn, "ERROR_ETH_IN");\n', '            weth.deposit.value(totalAmountIn)();\n', '            from = address(this);\n', '        }\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            totalSwapAmount = totalSwapAmount.add(swapSequences[i][0].swapAmount);\n', '            require(swapSequences[i][0].tokenIn == address(tokenIn) || (isETH(tokenIn) && swapSequences[i][0].tokenIn == address(weth)), "ERR_TOKENIN_NOT_MATCH");\n', '            safeTransferFrom(swapSequences[i][0].tokenIn, from, swapSequences[i][0].pool, swapSequences[i][0].swapAmount);\n', '\n', '            uint tokenAmountOut;\n', '            for (uint k = 0; k < swapSequences[i].length; k++) {\n', '                Swap memory swap = swapSequences[i][k];\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                address _to;\n', '                if (k < swapSequences[i].length - 1) {\n', '                    _to = swapSequences[i][k + 1].pool;\n', '                } else {\n', '                    require(swap.tokenOut == address(tokenOut) || (swap.tokenOut == address(weth) && isETH(tokenOut)), "ERR_OUTCOIN_NOT_MATCH");\n', '                    _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\n', '                }\n', '                (tokenAmountOut,) = pool.swapExactAmountIn(\n', '                    msg.sender,\n', '                    swap.tokenIn,\n', '                    swap.tokenOut,\n', '                    swap.limitReturnAmount,\n', '                    _to,\n', '                    swap.maxPrice\n', '                );\n', '                if (k == swapSequences[i].length - 1 && _to != msg.sender) {\n', '                    transferAll(tokenOut, tokenAmountOut);\n', '                }\n', '            }\n', '            // This takes the amountOut of the last swap\n', '            totalAmountOut = tokenAmountOut.add(totalAmountOut);\n', '        }\n', '        require(totalSwapAmount == totalAmountIn, "ERR_TOTAL_AMOUNT_IN");\n', '        require(totalAmountOut >= minTotalAmountOut, "ERR_LIMIT_OUT");\n', '        if (isETH(tokenIn) && msg.value > totalSwapAmount) {\n', '            (bool xfer,) = msg.sender.call.value(msg.value.sub(totalAmountIn))("");\n', '            require(xfer, "ERR_ETH_FAILED");\n', '        }\n', '    }\n', '\n', '    function multihopBatchSwapExactOut(\n', '        Swap[][] memory swapSequences,\n', '        TokenInterface tokenIn,\n', '        TokenInterface tokenOut,\n', '        uint maxTotalAmountIn\n', '    )\n', '    public payable\n', '    returns (uint totalAmountIn)\n', '    {\n', '        address from = msg.sender;\n', '        if (isETH(tokenIn)) {\n', '            require(msg.value >= maxTotalAmountIn, "ERROR_ETH_IN");\n', '            weth.deposit.value(msg.value)();\n', '            from = address(this);\n', '        }\n', '\n', '        for (uint i = 0; i < swapSequences.length; i++) {\n', '            uint[] memory amountIns = getAmountsIn(swapSequences[i]);\n', '            swapSequences[i][0].tokenIn = isETH(tokenIn) ? address(weth) : swapSequences[i][0].tokenIn;\n', '            safeTransferFrom(swapSequences[i][0].tokenIn, from, swapSequences[i][0].pool, amountIns[0]);\n', '\n', '            for (uint j = 0; j < swapSequences[i].length; j++) {\n', '                Swap memory swap = swapSequences[i][j];\n', '                PoolInterface pool = PoolInterface(swap.pool);\n', '                address _to;\n', '                if (j < swapSequences[i].length - 1) {\n', '                    _to = swapSequences[i][j + 1].pool;\n', '                } else {\n', '                    require(swap.tokenOut == address(tokenOut) || (swap.tokenOut == address(weth) && isETH(tokenOut)), "ERR_OUTCOIN_NOT_MATCH");\n', '                    _to = (swap.tokenOut == address(weth) && isETH(tokenOut)) ? address(this) : msg.sender;\n', '                }\n', '                uint _tokenOut = j < swapSequences[i].length - 1 ? amountIns[j + 1] : swap.swapAmount;\n', '                pool.swapExactAmountOut(\n', '                    msg.sender,\n', '                    swap.tokenIn,\n', '                    amountIns[j],\n', '                    swap.tokenOut,\n', '                    _tokenOut,\n', '                    _to,\n', '                    swap.maxPrice\n', '                );\n', '                if (j == swapSequences[i].length - 1 && _to != msg.sender) {\n', '                    transferAll(tokenOut, _tokenOut);\n', '                }\n', '            }\n', '            totalAmountIn = totalAmountIn.add(amountIns[0]);\n', '        }\n', '        require(totalAmountIn <= maxTotalAmountIn, "ERR_LIMIT_IN");\n', '        if (isETH(tokenIn) && msg.value > totalAmountIn) {\n', '            transferAll(tokenIn, msg.value.sub(totalAmountIn));\n', '        }\n', '    }\n', '\n', '    function getBalance(TokenInterface token) internal view returns (uint) {\n', '        if (isETH(token)) {\n', '            return weth.balanceOf(address(this));\n', '        } else {\n', '            return token.balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function transferAll(TokenInterface token, uint amount) internal{\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (isETH(token)) {\n', '            weth.withdraw(amount);\n', '            (bool xfer,) = msg.sender.call.value(amount)("");\n', '            require(xfer, "ERR_ETH_FAILED");\n', '        } else {\n', '            safeTransfer(address(token), msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    function isETH(TokenInterface token) internal pure returns (bool) {\n', '        return (address(token) == ETH_ADDRESS);\n', '    }\n', '\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::safeApprove: approve failed'\n", '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::safeTransfer: transfer failed'\n", '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::transferFrom: transferFrom failed'\n", '        );\n', '    }\n', '\n', '    // given an output amount of an asset and pool, returns a required input amount of the other asset\n', '    function getAmountIn(Swap memory swap) internal view returns (uint amountIn) {\n', "        require(swap.swapAmount > 0, 'ExchangeProxy: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        PoolInterface pool = PoolInterface(swap.pool);\n', '        amountIn = pool.calcDesireByGivenAmount(\n', '            swap.tokenIn,\n', '            swap.tokenOut,\n', '            0,\n', '            swap.swapAmount\n', '        );\n', '        uint256 spotPrice = pool.calcPoolSpotPrice(\n', '            swap.tokenIn,\n', '            swap.tokenOut,\n', '            0,\n', '            0\n', '        );\n', '        require(spotPrice <= swap.maxPrice, "ERR_LIMIT_PRICE");\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pools\n', '    function getAmountsIn(Swap[] memory swaps) internal view returns (uint[] memory amounts) {\n', "        require(swaps.length >= 1, 'ExchangeProxy: INVALID_PATH');\n", '        amounts = new uint[](swaps.length);\n', '        uint i = swaps.length - 1;\n', '        while (i > 0) {\n', '            Swap memory swap = swaps[i];\n', '            amounts[i] = getAmountIn(swap);\n', '            require(swaps[i].tokenIn == swaps[i - 1].tokenOut, "ExchangeProxy: INVALID_PATH");\n', '            swaps[i - 1].swapAmount = amounts[i];\n', '            i--;\n', '        }\n', '        amounts[0] = getAmountIn(swaps[0]);\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '}']