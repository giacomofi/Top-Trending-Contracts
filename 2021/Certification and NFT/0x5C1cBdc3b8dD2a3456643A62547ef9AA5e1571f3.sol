['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IDMMFactory.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IDMMFactory {\n', '    function createPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps\n', '    ) external returns (address pool);\n', '\n', '    function setFeeConfiguration(address feeTo, uint16 governmentFeeBps) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function getFeeConfiguration() external view returns (address feeTo, uint16 governmentFeeBps);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function allPools(uint256) external view returns (address pool);\n', '\n', '    function allPoolsLength() external view returns (uint256);\n', '\n', '    function getUnamplifiedPool(IERC20 token0, IERC20 token1) external view returns (address);\n', '\n', '    function getPools(IERC20 token0, IERC20 token1)\n', '        external\n', '        view\n', '        returns (address[] memory _tokenPools);\n', '\n', '    function isPool(\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        address pool\n', '    ) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/MathExt.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'library MathExt {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant PRECISION = (10**18);\n', '\n', '    /// @dev Returns x*y in precision\n', '    function mulInPrecision(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x.mul(y) / PRECISION;\n', '    }\n', '\n', '    /// @dev source: dsMath\n', '    /// @param xInPrecision should be < PRECISION, so this can not overflow\n', '    /// @return zInPrecision = (x/PRECISION) ^k * PRECISION\n', '    function unsafePowInPrecision(uint256 xInPrecision, uint256 k)\n', '        internal\n', '        pure\n', '        returns (uint256 zInPrecision)\n', '    {\n', '        require(xInPrecision <= PRECISION, "MathExt: x > PRECISION");\n', '        zInPrecision = k % 2 != 0 ? xInPrecision : PRECISION;\n', '\n', '        for (k /= 2; k != 0; k /= 2) {\n', '            xInPrecision = (xInPrecision * xInPrecision) / PRECISION;\n', '\n', '            if (k % 2 != 0) {\n', '                zInPrecision = (zInPrecision * xInPrecision) / PRECISION;\n', '            }\n', '        }\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint256 y) internal pure returns (uint256 z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint256 x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/FeeFomula.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'library FeeFomula {\n', '    using SafeMath for uint256;\n', '    using MathExt for uint256;\n', '\n', '    uint256 private constant PRECISION = 10**18;\n', '    uint256 private constant R0 = 1477405064814996100; // 1.4774050648149961\n', '\n', '    uint256 private constant C0 = (60 * PRECISION) / 10000;\n', '\n', '    uint256 private constant A = uint256(PRECISION * 20000) / 27;\n', '    uint256 private constant B = uint256(PRECISION * 250) / 9;\n', '    uint256 private constant C1 = uint256(PRECISION * 985) / 27;\n', '    uint256 private constant U = (120 * PRECISION) / 100;\n', '\n', '    uint256 private constant G = (836 * PRECISION) / 1000;\n', '    uint256 private constant F = 5 * PRECISION;\n', '    uint256 private constant L = (2 * PRECISION) / 10000;\n', '    // C2 = 25 * PRECISION - (F * (PRECISION - G)**2) / ((PRECISION - G)**2 + L * PRECISION)\n', '    uint256 private constant C2 = 20036905816356657810;\n', '\n', '    /// @dev calculate fee from rFactorInPrecision, see section 3.2 in dmmSwap white paper\n', '    /// @dev fee in [15, 60] bps\n', '    /// @return fee percentage in Precision\n', '    function getFee(uint256 rFactorInPrecision) internal pure returns (uint256) {\n', '        if (rFactorInPrecision >= R0) {\n', '            return C0;\n', '        } else if (rFactorInPrecision >= PRECISION) {\n', '            // C1 + A * (r-U)^3 + b * (r -U)\n', '            if (rFactorInPrecision > U) {\n', '                uint256 tmp = rFactorInPrecision - U;\n', '                uint256 tmp3 = tmp.unsafePowInPrecision(3);\n', '                return (C1.add(A.mulInPrecision(tmp3)).add(B.mulInPrecision(tmp))) / 10000;\n', '            } else {\n', '                uint256 tmp = U - rFactorInPrecision;\n', '                uint256 tmp3 = tmp.unsafePowInPrecision(3);\n', '                return C1.sub(A.mulInPrecision(tmp3)).sub(B.mulInPrecision(tmp)) / 10000;\n', '            }\n', '        } else {\n', '            // [ C2 + sign(r - G) *  F * (r-G) ^2 / (L + (r-G) ^2) ] / 10000\n', '            uint256 tmp = (\n', '                rFactorInPrecision > G ? (rFactorInPrecision - G) : (G - rFactorInPrecision)\n', '            );\n', '            tmp = tmp.unsafePowInPrecision(2);\n', '            uint256 tmp2 = F.mul(tmp).div(tmp.add(L));\n', '            if (rFactorInPrecision > G) {\n', '                return C2.add(tmp2) / 10000;\n', '            } else {\n', '                return C2.sub(tmp2) / 10000;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/interfaces/IERC20Permit.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IERC20Permit is IERC20 {\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File: contracts/libraries/ERC20Permit.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '/// @dev https://eips.ethereum.org/EIPS/eip-2612\n', 'contract ERC20Permit is ERC20, IERC20Permit {\n', '    /// @dev To make etherscan auto-verify new pool, this variable is not immutable\n', '    bytes32 public domainSeparator;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32\n', '        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '\n', '    mapping(address => uint256) public nonces;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        string memory version\n', '    ) public ERC20(name, symbol) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        domainSeparator = keccak256(\n', '            abi.encode(\n', '                keccak256(\n', '                    "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"\n', '                ),\n', '                keccak256(bytes(name)),\n', '                keccak256(bytes(version)),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external override {\n', '        require(deadline >= block.timestamp, "ERC20Permit: EXPIRED");\n', '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', '                "\\x19\\x01",\n', '                domainSeparator,\n', '                keccak256(\n', '                    abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)\n', '                )\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', '        require(\n', '            recoveredAddress != address(0) && recoveredAddress == owner,\n', '            "ERC20Permit: INVALID_SIGNATURE"\n', '        );\n', '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IDMMCallee.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IDMMCallee {\n', '    function dmmSwapCall(\n', '        address sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDMMPool.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'interface IDMMPool {\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function sync() external;\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\n', '\n', '    function getTradeInfo()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 _vReserve0,\n', '            uint112 _vReserve1,\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint256 feeInPrecision\n', '        );\n', '\n', '    function token0() external view returns (IERC20);\n', '\n', '    function token1() external view returns (IERC20);\n', '\n', '    function ampBps() external view returns (uint32);\n', '\n', '    function factory() external view returns (IDMMFactory);\n', '\n', '    function kLast() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IERC20Metadata.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts/VolumeTrendRecorder.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @dev contract to calculate volume trend. See secion 3.1 in the white paper\n', '/// @dev EMA stands for Exponential moving average\n', '/// @dev https://en.wikipedia.org/wiki/Moving_average\n', 'contract VolumeTrendRecorder {\n', '    using MathExt for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private constant MAX_UINT128 = 2**128 - 1;\n', '    uint256 internal constant PRECISION = 10**18;\n', '    uint256 private constant SHORT_ALPHA = (2 * PRECISION) / 5401;\n', '    uint256 private constant LONG_ALPHA = (2 * PRECISION) / 10801;\n', '\n', '    uint128 internal shortEMA;\n', '    uint128 internal longEMA;\n', '    // total volume in current block\n', '    uint128 internal currentBlockVolume;\n', '    uint128 internal lastTradeBlock;\n', '\n', '    event UpdateEMA(uint256 shortEMA, uint256 longEMA, uint128 lastBlockVolume, uint256 skipBlock);\n', '\n', '    constructor(uint128 _emaInit) public {\n', '        shortEMA = _emaInit;\n', '        longEMA = _emaInit;\n', '        lastTradeBlock = safeUint128(block.number);\n', '    }\n', '\n', '    function getVolumeTrendData()\n', '        external\n', '        view\n', '        returns (\n', '            uint128 _shortEMA,\n', '            uint128 _longEMA,\n', '            uint128 _currentBlockVolume,\n', '            uint128 _lastTradeBlock\n', '        )\n', '    {\n', '        _shortEMA = shortEMA;\n', '        _longEMA = longEMA;\n', '        _currentBlockVolume = currentBlockVolume;\n', '        _lastTradeBlock = lastTradeBlock;\n', '    }\n', '\n', '    /// @dev records a new trade, update ema and returns current rFactor for this trade\n', '    /// @return rFactor in Precision for this trade\n', '    function recordNewUpdatedVolume(uint256 blockNumber, uint256 value)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        // this can not be underflow because block.number always increases\n', '        uint256 skipBlock = blockNumber - lastTradeBlock;\n', '        if (skipBlock == 0) {\n', '            currentBlockVolume = safeUint128(\n', '                uint256(currentBlockVolume).add(value),\n', '                "volume exceeds valid range"\n', '            );\n', '            return calculateRFactor(uint256(shortEMA), uint256(longEMA));\n', '        }\n', '        uint128 _currentBlockVolume = currentBlockVolume;\n', '        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\n', '        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\n', '        // ema = ema * (1-aplha) ^(skipBlock -1)\n', '        _shortEMA = _shortEMA.mulInPrecision(\n', '            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\n', '        );\n', '        _longEMA = _longEMA.mulInPrecision(\n', '            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\n', '        );\n', '        shortEMA = safeUint128(_shortEMA);\n', '        longEMA = safeUint128(_longEMA);\n', '        currentBlockVolume = safeUint128(value);\n', '        lastTradeBlock = safeUint128(blockNumber);\n', '\n', '        emit UpdateEMA(_shortEMA, _longEMA, _currentBlockVolume, skipBlock);\n', '\n', '        return calculateRFactor(_shortEMA, _longEMA);\n', '    }\n', '\n', '    /// @return rFactor in Precision for this trade\n', '    function getRFactor(uint256 blockNumber) internal view returns (uint256) {\n', '        // this can not be underflow because block.number always increases\n', '        uint256 skipBlock = blockNumber - lastTradeBlock;\n', '        if (skipBlock == 0) {\n', '            return calculateRFactor(shortEMA, longEMA);\n', '        }\n', '        uint256 _shortEMA = newEMA(shortEMA, SHORT_ALPHA, currentBlockVolume);\n', '        uint256 _longEMA = newEMA(longEMA, LONG_ALPHA, currentBlockVolume);\n', '        _shortEMA = _shortEMA.mulInPrecision(\n', '            (PRECISION - SHORT_ALPHA).unsafePowInPrecision(skipBlock - 1)\n', '        );\n', '        _longEMA = _longEMA.mulInPrecision(\n', '            (PRECISION - LONG_ALPHA).unsafePowInPrecision(skipBlock - 1)\n', '        );\n', '        return calculateRFactor(_shortEMA, _longEMA);\n', '    }\n', '\n', '    function calculateRFactor(uint256 _shortEMA, uint256 _longEMA)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if (_longEMA == 0) {\n', '            return 0;\n', '        }\n', '        return (_shortEMA * MathExt.PRECISION) / _longEMA;\n', '    }\n', '\n', '    /// @dev return newEMA value\n', '    /// @param ema previous ema value in wei\n', '    /// @param alpha in Precicion (required < Precision)\n', '    /// @param value current value to update ema\n', '    /// @dev ema and value is uint128 and alpha < Percison\n', '    /// @dev so this function can not overflow and returned ema is not overflow uint128\n', '    function newEMA(\n', '        uint128 ema,\n', '        uint256 alpha,\n', '        uint128 value\n', '    ) internal pure returns (uint256) {\n', '        assert(alpha < PRECISION);\n', '        return ((PRECISION - alpha) * uint256(ema) + alpha * uint256(value)) / PRECISION;\n', '    }\n', '\n', '    function safeUint128(uint256 v) internal pure returns (uint128) {\n', '        require(v <= MAX_UINT128, "overflow uint128");\n', '        return uint128(v);\n', '    }\n', '\n', '    function safeUint128(uint256 v, string memory errorMessage) internal pure returns (uint128) {\n', '        require(v <= MAX_UINT128, errorMessage);\n', '        return uint128(v);\n', '    }\n', '}\n', '\n', '// File: contracts/DMMPool.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DMMPool is IDMMPool, ERC20Permit, ReentrancyGuard, VolumeTrendRecorder {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 internal constant MAX_UINT112 = 2**112 - 1;\n', '    uint256 internal constant BPS = 10000;\n', '\n', '    struct ReserveData {\n', '        uint256 reserve0;\n', '        uint256 reserve1;\n', '        uint256 vReserve0;\n', '        uint256 vReserve1; // only used when isAmpPool = true\n', '    }\n', '\n', '    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n', '    /// @dev To make etherscan auto-verify new pool, these variables are not immutable\n', '    IDMMFactory public override factory;\n', '    IERC20 public override token0;\n', '    IERC20 public override token1;\n', '\n', '    /// @dev uses single storage slot, accessible via getReservesData\n', '    uint112 internal reserve0;\n', '    uint112 internal reserve1;\n', '    uint32 public override ampBps;\n', '    /// @dev addition param only when amplification factor > 1\n', '    uint112 internal vReserve0;\n', '    uint112 internal vReserve1;\n', '\n', '    /// @dev vReserve0 * vReserve1, as of immediately after the most recent liquidity event\n', '    uint256 public override kLast;\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to,\n', '        uint256 feeInPrecision\n', '    );\n', '    event Sync(uint256 vReserve0, uint256 vReserve1, uint256 reserve0, uint256 reserve1);\n', '\n', '    constructor() public ERC20Permit("KyberDMM LP", "DMM-LP", "1") VolumeTrendRecorder(0) {\n', '        factory = IDMMFactory(msg.sender);\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(\n', '        IERC20 _token0,\n', '        IERC20 _token1,\n', '        uint32 _ampBps\n', '    ) external {\n', '        require(msg.sender == address(factory), "DMM: FORBIDDEN");\n', '        token0 = _token0;\n', '        token1 = _token1;\n', '        ampBps = _ampBps;\n', '    }\n', '\n', '    /// @dev this low-level function should be called from a contract\n', '    ///                 which performs important safety checks\n', '    function mint(address to) external override nonReentrant returns (uint256 liquidity) {\n', '        (bool isAmpPool, ReserveData memory data) = getReservesData();\n', '        ReserveData memory _data;\n', '        _data.reserve0 = token0.balanceOf(address(this));\n', '        _data.reserve1 = token1.balanceOf(address(this));\n', '        uint256 amount0 = _data.reserve0.sub(data.reserve0);\n', '        uint256 amount1 = _data.reserve1.sub(data.reserve1);\n', '\n', '        bool feeOn = _mintFee(isAmpPool, data);\n', '        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            if (isAmpPool) {\n', '                uint32 _ampBps = ampBps;\n', '                _data.vReserve0 = _data.reserve0.mul(_ampBps) / BPS;\n', '                _data.vReserve1 = _data.reserve1.mul(_ampBps) / BPS;\n', '            }\n', '            liquidity = MathExt.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '            _mint(address(-1), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n', '        } else {\n', '            liquidity = Math.min(\n', '                amount0.mul(_totalSupply) / data.reserve0,\n', '                amount1.mul(_totalSupply) / data.reserve1\n', '            );\n', '            if (isAmpPool) {\n', '                uint256 b = liquidity.add(_totalSupply);\n', '                _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\n', '                _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\n', '            }\n', '        }\n', '        require(liquidity > 0, "DMM: INSUFFICIENT_LIQUIDITY_MINTED");\n', '        _mint(to, liquidity);\n', '\n', '        _update(isAmpPool, _data);\n', '        if (feeOn) kLast = getK(isAmpPool, _data);\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    /// @dev this low-level function should be called from a contract\n', '    /// @dev which performs important safety checks\n', '    /// @dev user must transfer LP token to this contract before call burn\n', '    function burn(address to)\n', '        external\n', '        override\n', '        nonReentrant\n', '        returns (uint256 amount0, uint256 amount1)\n', '    {\n', '        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\n', '        IERC20 _token0 = token0; // gas savings\n', '        IERC20 _token1 = token1; // gas savings\n', '\n', '        uint256 balance0 = _token0.balanceOf(address(this));\n', '        uint256 balance1 = _token1.balanceOf(address(this));\n', '        require(balance0 >= data.reserve0 && balance1 >= data.reserve1, "DMM: UNSYNC_RESERVES");\n', '        uint256 liquidity = balanceOf(address(this));\n', '\n', '        bool feeOn = _mintFee(isAmpPool, data);\n', '        uint256 _totalSupply = totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n', '        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n', '        require(amount0 > 0 && amount1 > 0, "DMM: INSUFFICIENT_LIQUIDITY_BURNED");\n', '        _burn(address(this), liquidity);\n', '        _token0.safeTransfer(to, amount0);\n', '        _token1.safeTransfer(to, amount1);\n', '        ReserveData memory _data;\n', '        _data.reserve0 = _token0.balanceOf(address(this));\n', '        _data.reserve1 = _token1.balanceOf(address(this));\n', '        if (isAmpPool) {\n', '            uint256 b = Math.min(\n', '                _data.reserve0.mul(_totalSupply) / data.reserve0,\n', '                _data.reserve1.mul(_totalSupply) / data.reserve1\n', '            );\n', '            _data.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, _data.reserve0);\n', '            _data.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, _data.reserve1);\n', '        }\n', '        _update(isAmpPool, _data);\n', '        if (feeOn) kLast = getK(isAmpPool, _data); // data are up-to-date\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '\n', '    /// @dev this low-level function should be called from a contract\n', '    /// @dev which performs important safety checks\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata callbackData\n', '    ) external override nonReentrant {\n', '        require(amount0Out > 0 || amount1Out > 0, "DMM: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        (bool isAmpPool, ReserveData memory data) = getReservesData(); // gas savings\n', '        require(\n', '            amount0Out < data.reserve0 && amount1Out < data.reserve1,\n', '            "DMM: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '\n', '        ReserveData memory newData;\n', '        {\n', '            // scope for _token{0,1}, avoids stack too deep errors\n', '            IERC20 _token0 = token0;\n', '            IERC20 _token1 = token1;\n', '            require(to != address(_token0) && to != address(_token1), "DMM: INVALID_TO");\n', '            if (amount0Out > 0) _token0.safeTransfer(to, amount0Out); // optimistically transfer tokens\n', '            if (amount1Out > 0) _token1.safeTransfer(to, amount1Out); // optimistically transfer tokens\n', '            if (callbackData.length > 0)\n', '                IDMMCallee(to).dmmSwapCall(msg.sender, amount0Out, amount1Out, callbackData);\n', '            newData.reserve0 = _token0.balanceOf(address(this));\n', '            newData.reserve1 = _token1.balanceOf(address(this));\n', '            if (isAmpPool) {\n', '                newData.vReserve0 = data.vReserve0.add(newData.reserve0).sub(data.reserve0);\n', '                newData.vReserve1 = data.vReserve1.add(newData.reserve1).sub(data.reserve1);\n', '            }\n', '        }\n', '        uint256 amount0In = newData.reserve0 > data.reserve0 - amount0Out\n', '            ? newData.reserve0 - (data.reserve0 - amount0Out)\n', '            : 0;\n', '        uint256 amount1In = newData.reserve1 > data.reserve1 - amount1Out\n', '            ? newData.reserve1 - (data.reserve1 - amount1Out)\n', '            : 0;\n', '        require(amount0In > 0 || amount1In > 0, "DMM: INSUFFICIENT_INPUT_AMOUNT");\n', '        uint256 feeInPrecision = verifyBalanceAndUpdateEma(\n', '            amount0In,\n', '            amount1In,\n', '            isAmpPool ? data.vReserve0 : data.reserve0,\n', '            isAmpPool ? data.vReserve1 : data.reserve1,\n', '            isAmpPool ? newData.vReserve0 : newData.reserve0,\n', '            isAmpPool ? newData.vReserve1 : newData.reserve1\n', '        );\n', '\n', '        _update(isAmpPool, newData);\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to, feeInPrecision);\n', '    }\n', '\n', '    /// @dev force balances to match reserves\n', '    function skim(address to) external nonReentrant {\n', '        token0.safeTransfer(to, token0.balanceOf(address(this)).sub(reserve0));\n', '        token1.safeTransfer(to, token1.balanceOf(address(this)).sub(reserve1));\n', '    }\n', '\n', '    /// @dev force reserves to match balances\n', '    function sync() external override nonReentrant {\n', '        (bool isAmpPool, ReserveData memory data) = getReservesData();\n', '        bool feeOn = _mintFee(isAmpPool, data);\n', '        ReserveData memory newData;\n', '        newData.reserve0 = IERC20(token0).balanceOf(address(this));\n', '        newData.reserve1 = IERC20(token1).balanceOf(address(this));\n', '        // update virtual reserves if this is amp pool\n', '        if (isAmpPool) {\n', '            uint256 _totalSupply = totalSupply();\n', '            uint256 b = Math.min(\n', '                newData.reserve0.mul(_totalSupply) / data.reserve0,\n', '                newData.reserve1.mul(_totalSupply) / data.reserve1\n', '            );\n', '            newData.vReserve0 = Math.max(data.vReserve0.mul(b) / _totalSupply, newData.reserve0);\n', '            newData.vReserve1 = Math.max(data.vReserve1.mul(b) / _totalSupply, newData.reserve1);\n', '        }\n', '        _update(isAmpPool, newData);\n', '        if (feeOn) kLast = getK(isAmpPool, newData);\n', '    }\n', '\n', '    /// @dev returns data to calculate amountIn, amountOut\n', '    function getTradeInfo()\n', '        external\n', '        virtual\n', '        override\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint112 _vReserve0,\n', '            uint112 _vReserve1,\n', '            uint256 feeInPrecision\n', '        )\n', '    {\n', '        // gas saving to read reserve data\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        uint32 _ampBps = ampBps;\n', '        _vReserve0 = vReserve0;\n', '        _vReserve1 = vReserve1;\n', '        if (_ampBps == BPS) {\n', '            _vReserve0 = _reserve0;\n', '            _vReserve1 = _reserve1;\n', '        }\n', '        uint256 rFactorInPrecision = getRFactor(block.number);\n', '        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), _ampBps);\n', '    }\n', '\n', '    /// @dev returns reserve data to calculate amount to add liquidity\n', '    function getReserves() external override view returns (uint112 _reserve0, uint112 _reserve1) {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '    }\n', '\n', '    function name() public override view returns (string memory) {\n', '        IERC20Metadata _token0 = IERC20Metadata(address(token0));\n', '        IERC20Metadata _token1 = IERC20Metadata(address(token1));\n', '        return string(abi.encodePacked("KyberDMM LP ", _token0.symbol(), "-", _token1.symbol()));\n', '    }\n', '\n', '    function symbol() public override view returns (string memory) {\n', '        IERC20Metadata _token0 = IERC20Metadata(address(token0));\n', '        IERC20Metadata _token1 = IERC20Metadata(address(token1));\n', '        return string(abi.encodePacked("DMM-LP ", _token0.symbol(), "-", _token1.symbol()));\n', '    }\n', '\n', '    function verifyBalanceAndUpdateEma(\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 beforeReserve0,\n', '        uint256 beforeReserve1,\n', '        uint256 afterReserve0,\n', '        uint256 afterReserve1\n', '    ) internal virtual returns (uint256 feeInPrecision) {\n', '        // volume = beforeReserve0 * amount1In / beforeReserve1 + amount0In (normalized into amount in token 0)\n', '        uint256 volume = beforeReserve0.mul(amount1In).div(beforeReserve1).add(amount0In);\n', '        uint256 rFactorInPrecision = recordNewUpdatedVolume(block.number, volume);\n', '        feeInPrecision = getFinalFee(FeeFomula.getFee(rFactorInPrecision), ampBps);\n', '        // verify balance update matches with fomula\n', '        uint256 balance0Adjusted = afterReserve0.mul(PRECISION);\n', '        balance0Adjusted = balance0Adjusted.sub(amount0In.mul(feeInPrecision));\n', '        balance0Adjusted = balance0Adjusted / PRECISION;\n', '        uint256 balance1Adjusted = afterReserve1.mul(PRECISION);\n', '        balance1Adjusted = balance1Adjusted.sub(amount1In.mul(feeInPrecision));\n', '        balance1Adjusted = balance1Adjusted / PRECISION;\n', '        require(\n', '            balance0Adjusted.mul(balance1Adjusted) >= beforeReserve0.mul(beforeReserve1),\n', '            "DMM: K"\n', '        );\n', '    }\n', '\n', '    /// @dev update reserves\n', '    function _update(bool isAmpPool, ReserveData memory data) internal {\n', '        reserve0 = safeUint112(data.reserve0);\n', '        reserve1 = safeUint112(data.reserve1);\n', '        if (isAmpPool) {\n', '            assert(data.vReserve0 >= data.reserve0 && data.vReserve1 >= data.reserve1); // never happen\n', '            vReserve0 = safeUint112(data.vReserve0);\n', '            vReserve1 = safeUint112(data.vReserve1);\n', '        }\n', '        emit Sync(data.vReserve0, data.vReserve1, data.reserve0, data.reserve1);\n', '    }\n', '\n', '    /// @dev if fee is on, mint liquidity equivalent to configured fee of the growth in sqrt(k)\n', '    function _mintFee(bool isAmpPool, ReserveData memory data) internal returns (bool feeOn) {\n', '        (address feeTo, uint16 governmentFeeBps) = factory.getFeeConfiguration();\n', '        feeOn = feeTo != address(0);\n', '        uint256 _kLast = kLast; // gas savings\n', '        if (feeOn) {\n', '            if (_kLast != 0) {\n', '                uint256 rootK = MathExt.sqrt(getK(isAmpPool, data));\n', '                uint256 rootKLast = MathExt.sqrt(_kLast);\n', '                if (rootK > rootKLast) {\n', '                    uint256 numerator = totalSupply().mul(rootK.sub(rootKLast)).mul(\n', '                        governmentFeeBps\n', '                    );\n', '                    uint256 denominator = rootK.add(rootKLast).mul(5000);\n', '                    uint256 liquidity = numerator / denominator;\n', '                    if (liquidity > 0) _mint(feeTo, liquidity);\n', '                }\n', '            }\n', '        } else if (_kLast != 0) {\n', '            kLast = 0;\n', '        }\n', '    }\n', '\n', '    /// @dev gas saving to read reserve data\n', '    function getReservesData() internal view returns (bool isAmpPool, ReserveData memory data) {\n', '        data.reserve0 = reserve0;\n', '        data.reserve1 = reserve1;\n', '        isAmpPool = ampBps != BPS;\n', '        if (isAmpPool) {\n', '            data.vReserve0 = vReserve0;\n', '            data.vReserve1 = vReserve1;\n', '        }\n', '    }\n', '\n', '    function getFinalFee(uint256 feeInPrecision, uint32 _ampBps) internal pure returns (uint256) {\n', '        if (_ampBps <= 20000) {\n', '            return feeInPrecision;\n', '        } else if (_ampBps <= 50000) {\n', '            return (feeInPrecision * 20) / 30;\n', '        } else if (_ampBps <= 200000) {\n', '            return (feeInPrecision * 10) / 30;\n', '        } else {\n', '            return (feeInPrecision * 4) / 30;\n', '        }\n', '    }\n', '\n', '    function getK(bool isAmpPool, ReserveData memory data) internal pure returns (uint256) {\n', '        return isAmpPool ? data.vReserve0 * data.vReserve1 : data.reserve0 * data.reserve1;\n', '    }\n', '\n', '    function safeUint112(uint256 x) internal pure returns (uint112) {\n', '        require(x <= MAX_UINT112, "DMM: OVERFLOW");\n', '        return uint112(x);\n', '    }\n', '}\n', '\n', '// File: contracts/DMMFactory.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract DMMFactory is IDMMFactory {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    uint256 internal constant BPS = 10000;\n', '\n', '    address private feeTo;\n', '    uint16 private governmentFeeBps;\n', '    address public override feeToSetter;\n', '\n', '    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPools;\n', '    mapping(IERC20 => mapping(IERC20 => address)) public override getUnamplifiedPool;\n', '    address[] public override allPools;\n', '\n', '    event PoolCreated(\n', '        IERC20 indexed token0,\n', '        IERC20 indexed token1,\n', '        address pool,\n', '        uint32 ampBps,\n', '        uint256 totalPool\n', '    );\n', '    event SetFeeConfiguration(address feeTo, uint16 governmentFeeBps);\n', '    event SetFeeToSetter(address feeToSetter);\n', '\n', '    constructor(address _feeToSetter) public {\n', '        feeToSetter = _feeToSetter;\n', '    }\n', '\n', '    function createPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps\n', '    ) external override returns (address pool) {\n', '        require(tokenA != tokenB, "DMM: IDENTICAL_ADDRESSES");\n', '        (IERC20 token0, IERC20 token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(address(token0) != address(0), "DMM: ZERO_ADDRESS");\n', '        require(ampBps >= BPS, "DMM: INVALID_BPS");\n', '        // only exist 1 unamplified pool of a pool.\n', '        require(\n', '            ampBps != BPS || getUnamplifiedPool[token0][token1] == address(0),\n', '            "DMM: UNAMPLIFIED_POOL_EXISTS"\n', '        );\n', '        pool = address(new DMMPool());\n', '        DMMPool(pool).initialize(token0, token1, ampBps);\n', '        // populate mapping in the reverse direction\n', '        tokenPools[token0][token1].add(pool);\n', '        tokenPools[token1][token0].add(pool);\n', '        if (ampBps == BPS) {\n', '            getUnamplifiedPool[token0][token1] = pool;\n', '            getUnamplifiedPool[token1][token0] = pool;\n', '        }\n', '        allPools.push(pool);\n', '\n', '        emit PoolCreated(token0, token1, pool, ampBps, allPools.length);\n', '    }\n', '\n', '    function setFeeConfiguration(address _feeTo, uint16 _governmentFeeBps) external override {\n', '        require(msg.sender == feeToSetter, "DMM: FORBIDDEN");\n', '        require(_governmentFeeBps > 0 && _governmentFeeBps < 2000, "DMM: INVALID FEE");\n', '        feeTo = _feeTo;\n', '        governmentFeeBps = _governmentFeeBps;\n', '\n', '        emit SetFeeConfiguration(_feeTo, _governmentFeeBps);\n', '    }\n', '\n', '    function setFeeToSetter(address _feeToSetter) external override {\n', '        require(msg.sender == feeToSetter, "DMM: FORBIDDEN");\n', '        feeToSetter = _feeToSetter;\n', '\n', '        emit SetFeeToSetter(_feeToSetter);\n', '    }\n', '\n', '    function getFeeConfiguration()\n', '        external\n', '        override\n', '        view\n', '        returns (address _feeTo, uint16 _governmentFeeBps)\n', '    {\n', '        _feeTo = feeTo;\n', '        _governmentFeeBps = governmentFeeBps;\n', '    }\n', '\n', '    function allPoolsLength() external override view returns (uint256) {\n', '        return allPools.length;\n', '    }\n', '\n', '    function getPools(IERC20 token0, IERC20 token1)\n', '        external\n', '        override\n', '        view\n', '        returns (address[] memory _tokenPools)\n', '    {\n', '        uint256 length = tokenPools[token0][token1].length();\n', '        _tokenPools = new address[](length);\n', '        for (uint256 i = 0; i < length; i++) {\n', '            _tokenPools[i] = tokenPools[token0][token1].at(i);\n', '        }\n', '    }\n', '\n', '    function getPoolsLength(IERC20 token0, IERC20 token1) external view returns (uint256) {\n', '        return tokenPools[token0][token1].length();\n', '    }\n', '\n', '    function getPoolAtIndex(\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        uint256 index\n', '    ) external view returns (address pool) {\n', '        return tokenPools[token0][token1].at(index);\n', '    }\n', '\n', '    function isPool(\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        address pool\n', '    ) external override view returns (bool) {\n', '        return tokenPools[token0][token1].contains(pool);\n', '    }\n', '}']