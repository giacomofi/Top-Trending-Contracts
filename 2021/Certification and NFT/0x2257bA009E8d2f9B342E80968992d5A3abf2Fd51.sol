['pragma solidity ^0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./PriceOracle.sol";\n', 'import "./SErc20.sol";\n', 'import "./EIP20Interface.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'interface IStdReference {\n', '    /// A structure returned whenever someone requests for standard reference data.\n', '    struct ReferenceData {\n', '        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\n', '        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\n', '        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\n', '    }\n', '\n', '    /// Returns the price data for the given base/quote pair. Revert if not available.\n', '    function getReferenceData(string calldata _base, string calldata _quote) external view returns (ReferenceData memory);\n', '\n', '    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\n', '    function getReferenceDataBulk(string[] calldata _bases, string[] calldata _quotes) external view returns (ReferenceData[] memory);\n', '}\n', '\n', 'contract StrikePriceOracle is PriceOracle {\n', '    using SafeMath for uint256;\n', '    address public admin;\n', '\n', '    mapping(address => uint) prices;\n', '    event PricePosted(address asset, uint previousPriceMantissa, uint requestedPriceMantissa, uint newPriceMantissa);\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    IStdReference internal ref;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    function setRefAddress(IStdReference _ref) public {\n', '        require(msg.sender == admin, "only admin can set ref address");\n', '        ref = _ref;\n', '    }\n', '\n', '    function getRefAddress() public view returns (address) {\n', '        return address(ref);\n', '    }\n', '\n', '    function getUnderlyingPrice(SToken sToken) public view returns (uint) {\n', '        if (compareStrings(sToken.symbol(), "sETH")) {\n', '            IStdReference.ReferenceData memory data = ref.getReferenceData("ETH", "USD");\n', '            return data.rate;\n', '        }else if (compareStrings(sToken.symbol(), "STRK")) {\n', '            return prices[address(sToken)];\n', '        } else {\n', '            uint256 price;\n', '            EIP20Interface token = EIP20Interface(SErc20(address(sToken)).underlying());\n', '\n', '            if(prices[address(token)] != 0) {\n', '                price = prices[address(token)];\n', '            } else {\n', '                IStdReference.ReferenceData memory data = ref.getReferenceData(token.symbol(), "USD");\n', '                price = data.rate;\n', '            }\n', '\n', '            uint decimalDelta = 18-uint(token.decimals());\n', '            return price.mul(10**decimalDelta);\n', '        }\n', '    }\n', '\n', '    function setUnderlyingPrice(SToken sToken, uint underlyingPriceMantissa) public {\n', '        require(msg.sender == admin, "only admin can set underlying price");\n', '        address asset = address(SErc20(address(sToken)).underlying());\n', '        emit PricePosted(asset, prices[asset], underlyingPriceMantissa, underlyingPriceMantissa);\n', '        prices[asset] = underlyingPriceMantissa;\n', '    }\n', '\n', '    function setDirectPrice(address asset, uint price) public {\n', '        require(msg.sender == admin, "only admin can set price");\n', '        emit PricePosted(asset, prices[asset], price, price);\n', '        prices[asset] = price;\n', '    }\n', '\n', '    function assetPrices(address asset) external view returns (uint) {\n', '        return prices[asset];\n', '    }\n', '\n', '    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n', '        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n', '    }\n', '\n', '    function setAdmin(address newAdmin) external {\n', '        require(msg.sender == admin, "only admin can set new admin");\n', '        address oldAdmin = admin;\n', '        admin = newAdmin;\n', '\n', '        emit NewAdmin(oldAdmin, newAdmin);\n', '    }\n', '}']