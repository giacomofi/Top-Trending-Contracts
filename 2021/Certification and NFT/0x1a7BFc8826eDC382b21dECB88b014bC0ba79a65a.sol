['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { BondingCurve } from "./BondingCurve.sol";\n', 'import { IERC20 } from "./IERC20.sol";\n', '\n', 'contract BondingCurveFactory {\n', '  address public feeTo;\n', '  BondingCurve[] public allBondingToken;\n', '\n', '  /**\n', '   * @dev Constructor for the factory contract\n', '   * @param _feeTo The receiving address for fees that is generated from withdraw\n', '   */\n', '  constructor(address _feeTo) {\n', '    require(_feeTo != address(0), "Address must not be address(0)");\n', '    feeTo = _feeTo;\n', '  }\n', '\n', '  function bondingTokenCount() public view returns (uint256) {\n', '    return allBondingToken.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Create new bonding curve token\n', '   * @param _tokenToSell The address for the token to sell\n', '   * @param _token The address for the trading token\n', '   * @param _start The start time of token sale\n', '   * @param _end The end time of token sale\n', '   * @param _redeemInTime Whether the user can redeem immediately after the sale, instead of waiting for the end time.\n', '   * @param _maximumBalance the maximum number of tokens an account can hold\n', '   * @param _cap The amount of to raise \n', '   * @param _team The address for the token creator team\n', '   * @param _curve curve lib\n', '   * @param _params The params list for curve\n', '   */\n', '  function createBondingCurveToken(IERC20 _tokenToSell, IERC20 _token, uint256 _start, uint256 _end, bool _redeemInTime, uint256 _maximumBalance, uint256 _cap, address _team, address _curve, uint256[] memory _params) external {\n', '    BondingCurve newBondingCurve = new BondingCurve(_tokenToSell, _token, _start, _end, _redeemInTime, _maximumBalance, _cap, _team, _curve, _params);\n', '    bool success = _tokenToSell.transferFrom(msg.sender, address(newBondingCurve), _cap);\n', '    require(success, "Transfer failed");\n', '    newBondingCurve.initialize(this);\n', '    allBondingToken.push(newBondingCurve);\n', '  }\n', '}\n', '\n', '// 3570785']