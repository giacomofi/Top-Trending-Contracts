['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', 'pragma solidity ^0.8.1;\n', '\n', 'contract Proxy {\n', '  address public immutable implementation;\n', '\n', '  constructor(address _implementation) {\n', '    implementation = _implementation;\n', '  }\n', '\n', '  fallback () external payable {\n', '    address _impl = implementation;\n', '\n', '    assembly {\n', '      let ptr := mload(0x40)\n', '      calldatacopy(ptr, 0, calldatasize())\n', '      let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n', '      let size := returndatasize()\n', '      returndatacopy(ptr, 0, size)\n', '\n', '      switch result\n', '      case 0 { revert(ptr, size) }\n', '      default { return(ptr, size) }\n', '    }\n', '  }\n', '\n', '  receive () external payable { }\n', '}\n', '\n', '\n', 'contract Autem {\n', '  address public owner;\n', '  uint96  public lastPing;\n', '  address public beneficiary;\n', '  uint96  public window;\n', '\n', '  string  public metadata;\n', '\n', '  event Ping() anonymous;\n', '  event SetOwner(address indexed _owner);\n', '  event SetBeneficiary(address indexed _beneficiary);\n', '  event SetWindow(uint96 _window);\n', '  event Call(bool _success, bytes _result);\n', '\n', '  constructor() {\n', '    lastPing = uint96(1);\n', '  }\n', '\n', '  function setup(\n', '    address _owner,\n', '    address _beneficiary,\n', '    uint96  _window,\n', '    string calldata _metadata\n', '  ) external returns (bool) {\n', '    require(_owner != address(0), "E400");\n', '    require(owner == address(0) && lastPing == 0, "E405");\n', '\n', '    owner = _owner;\n', '    lastPing = uint96(block.timestamp);\n', '    beneficiary = _beneficiary;\n', '    window = _window;\n', '\n', '    emit Ping();\n', '    emit SetOwner(_owner);\n', '    emit SetBeneficiary(_beneficiary);\n', '    emit SetWindow(_window);\n', '\n', '    metadata = _metadata;\n', '\n', '    return true;\n', '  }\n', '\n', '  modifier auth() {\n', '    address m_owner = owner;\n', '\n', '    if (msg.sender != m_owner) {\n', '      if (msg.sender == beneficiary) {\n', '        require(block.timestamp - lastPing >= window, "E425");\n', '      } else {\n', '        revert("E401");\n', '      }\n', '    }\n', '\n', '    assert(msg.sender != address(0));\n', '\n', '    _;\n', '\n', '    if (m_owner == msg.sender) {\n', '      lastPing = uint96(block.timestamp);\n', '      emit Ping();\n', '    }\n', '  }\n', '\n', '  function setMetadata(string calldata _metadata) external auth {\n', '    metadata = _metadata;\n', '  }\n', '\n', '  function setOwner(address _owner) external auth {\n', '    require(_owner != address(0), "E400");\n', '    emit SetOwner(_owner);\n', '    owner = _owner;\n', '  }\n', '\n', '  function setBeneficiary(address _beneficiary) external auth {\n', '    emit SetBeneficiary(_beneficiary);\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  function setWindow(uint96 _window) external auth {\n', '    emit SetWindow(_window);\n', '    window = _window;\n', '  }\n', '\n', '  function execute(address payable _to, uint256 _val, bytes calldata _data) external auth {\n', '    if (_to == address(this)) return;\n', '\n', '    (bool success, bytes memory result) = _to.call{ value: _val }(_data);\n', '    emit Call(success, result);\n', '  }\n', '\n', '  fallback() external payable { }\n', '  receive() external payable { }\n', '}\n', '\n', 'contract Factory {\n', '  Autem public immutable implementation;\n', '\n', '  constructor() {\n', '    implementation = new Autem();\n', '  }\n', '\n', '  function create(\n', '    address _owner,\n', '    address _beneficiary,\n', '    uint96  _window,\n', '    string calldata _metadata\n', '  ) external {\n', '    bytes32 salt = keccak256(\n', '      abi.encode(\n', '        _owner,\n', '        _beneficiary,\n', '        _window,\n', '        _metadata\n', '      )\n', '    );\n', '\n', '    Proxy proxy = new Proxy{ salt: salt }(address(implementation));\n', '    assert(Autem(payable(proxy)).setup(_owner, _beneficiary, _window, _metadata));\n', '  }\n', '}']