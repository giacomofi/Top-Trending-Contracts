['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LiquidityLock {\n', '  address public owner;            // owner\n', '  address public lptoken;          // uniswap lp token address\n', '  uint256 public timelock;              \n', '  uint256 public numerator = 1 ether;\n', '\n', '  modifier restricted() {\n', '    require( msg.sender == owner, "this function is restricted to the contract\'s owner");\n', '    _;\n', '  }\n', '  \n', '  constructor(address _lptoken) {\n', '    require(_lptoken != address(0x0),"can\'t construct with 0x0 address");\n', '    owner = msg.sender;\n', '    lptoken = _lptoken;\n', '    timelock = block.timestamp + 6 days + 23 hours;\n', '  }  \n', '\n', '  function remove() public restricted {\n', '      require(block.timestamp > timelock, "removal call too soon" );\n', '      timelock = block.timestamp + 6 days + 23 hours;\n', '      IERC20(lptoken).transfer(msg.sender,  numerator * IERC20(lptoken).balanceOf(address(this)) / 100 ether);\n', '  }\n', '  \n', '  function setNumerator(uint256 _numerator) public restricted {\n', '      require(_numerator <= 5 ether,"numerator too large");\n', '      numerator = _numerator;\n', '  }\n', '  \n', '  function setOwner(address _owner) public restricted {\n', '      require(_owner != address(0x0), "owner can\'t be 0x0 address");\n', '      owner = _owner;\n', '  }\n', '}']