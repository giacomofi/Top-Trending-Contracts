['pragma solidity >=0.4.25 <0.6.0;\n', '\n', 'import "./ownable.sol";\n', 'import "./safemath.sol";\n', '\n', '//@title creates sales (ICOs) for ERC-20 tokens created on contract 0x0c199144D2952294daDBE14ea2D01155eE921232 only\n', '//@R^3\n', '//@notice create token sales for ERC-20 tokens\n', '\n', '//@dev sets up interface with ERC-20 token contract\n', 'contract ERCInterface {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function totalSupply() public view returns (uint256);\n', '   function balanceOf(address who) public view returns (uint256);\n', '   function owner() public view returns(address);\n', '   function decimals() public view returns (uint256);\n', '   function creator() public view returns(address);\n', '}\n', '\n', '//@dev token sale factory creates sales for ERC-20 tokens\n', 'contract TokenSaleFactory is Ownable{\n', '    //@logs all depoloyed sales\n', '    address[] public deployedSales;\n', '    TokenSales public newTokenSale;\n', '    //@allows checking of which sales are associated with a specific address\n', '    mapping (address => address) public mySales;\n', '\n', '\n', '    //@dev fee for generating Sale\n', '    uint public tokenFee = 0.01 ether;\n', '    //@dev set token fee (owner only)\n', '    function setTokenFee(uint _fee) external onlyOwner {\n', '      tokenFee = _fee;\n', '    }\n', '\n', '  ERCInterface tokenContract;\n', '\n', '    //@function that creates sale\n', '    function createTokenSale(address _tokenAddress) external payable returns (TokenSales) {\n', '      tokenContract = ERCInterface(_tokenAddress);\n', '       require(tokenContract.creator() == msg.sender);\n', '        require(msg.value == tokenFee);\n', '        newTokenSale = new TokenSales(msg.sender, _tokenAddress);\n', '        deployedSales.push(address(newTokenSale));\n', '        mySales[address(newTokenSale)] = msg.sender;\n', '        return(newTokenSale);\n', '    }\n', '\n', '    //@retreives all deployed sales\n', '    function getDeployedSales() public view returns (address[] memory) {\n', '        return deployedSales;\n', '    }\n', '\n', '    //@allows owner to withdraw fees\n', '    function withdraw() external onlyOwner {\n', '      address _owner = address(uint160(owner()));\n', '      _owner.transfer(address(this).balance);\n', '      }\n', '}\n', '\n', '//@ sets structure for token sale\n', 'contract TokenSales is Ownable {\n', '\n', '    constructor (address _creator, address _tokenAddress) public {\n', '        tokenOwner = _creator;\n', '        tokenAddress = _tokenAddress;\n', '         tokenContract = ERCInterface(_tokenAddress);\n', '\n', '    }\n', '    using SafeMath for uint256;\n', '  using SafeMath32 for uint32;\n', '  using SafeMath16 for uint16;\n', '\n', '    bool saleActive = false;\n', '      uint256 public tokenPrice;\n', '      uint256 public tokensSold;\n', '      address public tokenOwner;\n', '        address public tokenAddress;\n', '\n', '        event Sell(address _buyer, uint256 _amount);\n', '\n', '\n', '  ERCInterface tokenContract;\n', '\n', '   modifier onlyTokenOwner() {\n', '        require(msg.sender == tokenOwner);\n', '        _;\n', '    }\n', '\n', '    //@dev this function allows purchase of ERC-20 tokens\n', '      function buyTokens(uint256 _numberOfTokens) external payable {\n', '        require(msg.value == _numberOfTokens.mul(tokenPrice));\n', '        uint256 numberOfTokens = _numberOfTokens.mul(10**(tokenContract.decimals()));\n', '       //@mul only to prevent overflow\n', '        require(tokenContract.totalSupply() >= numberOfTokens);\n', '        require(saleActive == true);\n', '        tokenContract.transfer(msg.sender, numberOfTokens);\n', '        tokensSold += numberOfTokens;\n', '        emit Sell(msg.sender, _numberOfTokens);\n', '      }\n', '\n', '        //@dev function ends sale and send remaining tokens to sale creator\n', '      function endSale() public onlyTokenOwner {\n', '        tokenContract.transfer(msg.sender, (tokenContract.balanceOf(address(this))));\n', '        saleActive = false;\n', '      }\n', '\n', '        //@dev starts sale and initiates sale price\n', '       function startSale(uint _tokenPrice, uint _multiplier) public onlyTokenOwner {\n', '        //@dev e.g. multiplier 1 = wei, 9 = gwei, 18 = ether\n', '        tokenPrice = _tokenPrice.mul(10**_multiplier);\n', '        saleActive = true;\n', '      }\n', '\n', '    //@dev checks whether sale is active\n', '    //@returns true or false\n', '      function saleStatus() public view returns (bool) {\n', '        return saleActive;\n', '      }\n', '\n', '    //@dev allows sale creator to withdraw fees from token sale\n', '      function withdraw() external onlyTokenOwner {\n', '        address _owner = address(uint160(tokenOwner));\n', '        _owner.transfer(address(this).balance);\n', '        }\n', '\n', '        //@returns the owner of the sale\n', '        function tokenOwnerAdd() public view returns (address) {\n', '            return tokenOwner;\n', '        }\n', '\n', '}']