['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ISetToken.sol\n', '\n', '// pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       Position ENUM. Default is 0; External is 1\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's cash position details and external positions\n", "     * This data structure allows O(1) access to a component's cash position units and \n", '     * virtual units.\n', '     *\n', "     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n", '     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n', '     *                                  by dividing a "real" value by the "positionMultiplier"\n', '     * @param componentIndex            \n', '     * @param externalPositionModules   List of external modules attached to each external position. Each module\n', '     *                                  maps to an external position\n', '     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n', '     */\n', '    struct ComponentPosition {\n', '      int256 virtualUnit;\n', '      address[] externalPositionModules;\n', '      mapping(address => ExternalPosition) externalPositions;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's external position details including virtual unit and any\n", '     * auxiliary data.\n', '     *\n', "     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n", '     * @param data              Arbitrary data\n', '     */\n', '    struct ExternalPosition {\n', '      int256 virtualUnit;\n', '      bytes data;\n', '    }\n', '\n', '\n', '    /* ============ Functions ============ */\n', '    \n', '    function addComponent(address _component) external;\n', '    function removeComponent(address _component) external;\n', '    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n', '    function addExternalPositionModule(address _component, address _positionModule) external;\n', '    function removeExternalPositionModule(address _component, address _positionModule) external;\n', '    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n', '    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n', '    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n', '    function getComponents() external view returns(address[] memory);\n', '    function getExternalPositionModules(address _component) external view returns(address[] memory);\n', '    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n', '    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n', '    function isComponent(address _component) external view returns(bool);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getPositions() external view returns (Position[] memory);\n', '    function getTotalComponentRealUnits(address _component) external view returns(int256);\n', '\n', '    function isInitializedModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IIndexModule.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', 'interface IIndexModule {\n', '    function startRebalance(\n', '        address[] calldata _newComponents,\n', '        uint256[] calldata _newComponentsTargetUnits,\n', '        uint256[] calldata _oldComponentsTargetUnits,\n', '        uint256 _positionMultiplier\n', '    ) external;\n', '\n', '    function setTradeMaximums(\n', '        address[] calldata _components,\n', '        uint256[] calldata _tradeMaximums\n', '    ) external;\n', '\n', '    function setExchanges(\n', '        address[] calldata _components,\n', '        uint256[] calldata _exchanges\n', '    ) external;\n', '\n', '    function setCoolOffPeriods(\n', '        address[] calldata _components,\n', '        uint256[] calldata _coolOffPeriods\n', '    ) external;\n', '\n', '    function updateTraderStatus(address[] calldata _traders, bool[] calldata _statuses) external;\n', '\n', '    function updateAnyoneTrade(bool _status) external;\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IStreamingFeeModule.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', 'interface IStreamingFeeModule {\n', '    function getFee(ISetToken _setToken) external view returns (uint256);\n', '    function accrueFee(ISetToken _setToken) external;\n', '    function updateStreamingFee(ISetToken _setToken, uint256 _newFee) external;\n', '    function updateFeeRecipient(ISetToken _setToken, address _newFeeRecipient) external;\n', '}\n', '\n', '// Dependency file: contracts/lib/MutualUpgrade.sol\n', '\n', '/*\n', '    Copyright 2018 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title MutualUpgrade\n', ' * @author Set Protocol\n', ' *\n', ' * The MutualUpgrade contract contains a modifier for handling mutual upgrades between two parties\n', ' */\n', 'contract MutualUpgrade {\n', '    /* ============ State Variables ============ */\n', '\n', '    // Mapping of upgradable units and if upgrade has been initialized by other party\n', '    mapping(bytes32 => bool) public mutualUpgrades;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event MutualUpgradeRegistered(\n', '        bytes32 _upgradeHash\n', '    );\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier mutualUpgrade(address _signerOne, address _signerTwo) {\n', '        require(\n', '            msg.sender == _signerOne || msg.sender == _signerTwo,\n', '            "Must be authorized address"\n', '        );\n', '\n', '        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\n', '\n', '        // The upgrade hash is defined by the hash of the transaction call data and sender of msg,\n', '        // which uniquely identifies the function, arguments, and sender.\n', '        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\n', '\n', '        if (!mutualUpgrades[expectedHash]) {\n', '            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\n', '\n', '            mutualUpgrades[newHash] = true;\n', '\n', '            emit MutualUpgradeRegistered(newHash);\n', '\n', '            return;\n', '        }\n', '\n', '        delete mutualUpgrades[expectedHash];\n', '\n', '        // Run the rest of the upgrades\n', '        _;\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    function _getNonCaller(address _signerOne, address _signerTwo) internal view returns(address) {\n', '        return msg.sender == _signerOne ? _signerTwo : _signerOne;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Set Protocol\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/TimeLockUpgrade.sol\n', '\n', '/*\n', '    Copyright 2018 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @title TimeLockUpgrade\n', ' * @author Set Protocol\n', ' *\n', ' * The TimeLockUpgrade contract contains a modifier for handling minimum time period updates\n', ' */\n', 'contract TimeLockUpgrade is\n', '    Ownable\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Timelock Upgrade Period in seconds\n', '    uint256 public timeLockPeriod;\n', '\n', '    // Mapping of upgradable units and initialized timelock\n', '    mapping(bytes32 => uint256) public timeLockedUpgrades;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event UpgradeRegistered(\n', '        bytes32 _upgradeHash,\n', '        uint256 _timestamp\n', '    );\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier timeLockUpgrade() {\n', '        // If the time lock period is 0, then allow non-timebound upgrades.\n', '        // This is useful for initialization of the protocol and for testing.\n', '        if (timeLockPeriod == 0) {\n', '            _;\n', '\n', '            return;\n', '        }\n', '\n', '        // The upgrade hash is defined by the hash of the transaction call data,\n', '        // which uniquely identifies the function as well as the passed in arguments.\n', '        bytes32 upgradeHash = keccak256(\n', '            abi.encodePacked(\n', '                msg.data\n', '            )\n', '        );\n', '\n', '        uint256 registrationTime = timeLockedUpgrades[upgradeHash];\n', '\n', "        // If the upgrade hasn't been registered, register with the current time.\n", '        if (registrationTime == 0) {\n', '            timeLockedUpgrades[upgradeHash] = block.timestamp;\n', '\n', '            emit UpgradeRegistered(\n', '                upgradeHash,\n', '                block.timestamp\n', '            );\n', '\n', '            return;\n', '        }\n', '\n', '        require(\n', '            block.timestamp >= registrationTime.add(timeLockPeriod),\n', '            "TimeLockUpgrade: Time lock period must have elapsed."\n', '        );\n', '\n', '        // Reset the timestamp to 0\n', '        timeLockedUpgrades[upgradeHash] = 0;\n', '\n', '        // Run the rest of the upgrades\n', '        _;\n', '    }\n', '\n', '    /* ============ Function ============ */\n', '\n', '    /**\n', '     * Change timeLockPeriod period. Generally called after initially settings have been set up.\n', '     *\n', '     * @param  _timeLockPeriod   Time in seconds that upgrades need to be evaluated before execution\n', '     */\n', '    function setTimeLockPeriod(\n', '        uint256 _timeLockPeriod\n', '    )\n', '        virtual\n', '        external\n', '        onlyOwner\n', '    {\n', '        // Only allow setting of the timeLockPeriod if the period is greater than the existing\n', '        require(\n', '            _timeLockPeriod > timeLockPeriod,\n', '            "TimeLockUpgrade: New period must be greater than existing"\n', '        );\n', '\n', '        timeLockPeriod = _timeLockPeriod;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/manager/ICManager.sol\n', '\n', 'pragma solidity ^0.6.10;\n', '\n', '// import { Address } from "@openzeppelin/contracts/utils/Address.sol";\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { IIndexModule } from "contracts/interfaces/IIndexModule.sol";\n', '// import { IStreamingFeeModule } from "contracts/interfaces/IStreamingFeeModule.sol";\n', '// import { MutualUpgrade } from "contracts/lib/MutualUpgrade.sol";\n', '// import { PreciseUnitMath } from "contracts/lib/PreciseUnitMath.sol";\n', '// import { TimeLockUpgrade } from "contracts/lib/TimeLockUpgrade.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', 'contract ICManager is TimeLockUpgrade, MutualUpgrade {\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    using PreciseUnitMath for uint256;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event FeesAccrued(\n', '        uint256 _totalFees,\n', '        uint256 _operatorTake,\n', '        uint256 _methodologistTake\n', '    );\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    /**\n', '     * Throws if the sender is not the SetToken operator\n', '     */\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator, "Must be operator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Throws if the sender is not the SetToken methodologist\n', '     */\n', '    modifier onlyMethodologist() {\n', '        require(msg.sender == methodologist, "Must be methodologist");\n', '        _;\n', '    }\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Instance of SetToken\n', '    ISetToken public setToken;\n', '\n', '    // Address of IndexModule for managing rebalances\n', '    IIndexModule public indexModule;\n', '\n', '    // Address of StreamingFeeModule\n', '    IStreamingFeeModule public feeModule;\n', '\n', '    // Address of operator\n', '    address public operator;\n', '\n', '    // Address of methodologist\n', '    address public methodologist;\n', '\n', '    // Percent in 1e18 of streamingFees sent to operator\n', '    uint256 public operatorFeeSplit;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    constructor(\n', '        ISetToken _setToken,\n', '        IIndexModule _indexModule,\n', '        IStreamingFeeModule _feeModule,\n', '        address _operator,\n', '        address _methodologist,\n', '        uint256 _operatorFeeSplit\n', '    )\n', '        public\n', '    {\n', '        require(\n', '            _operatorFeeSplit <= PreciseUnitMath.preciseUnit(),\n', '            "Operator Fee Split must be less than 1e18"\n', '        );\n', '        \n', '        setToken = _setToken;\n', '        indexModule = _indexModule;\n', '        feeModule = _feeModule;\n', '        operator = _operator;\n', '        methodologist = _methodologist;\n', '        operatorFeeSplit = _operatorFeeSplit;\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * OPERATOR ONLY: Start rebalance in IndexModule. Set new target units, zeroing out any units for components being removed from index.\n', '     * Log position multiplier to adjust target units in case fees are accrued.\n', '     *\n', '     * @param _newComponents                    Array of new components to add to allocation\n', '     * @param _newComponentsTargetUnits         Array of target units at end of rebalance for new components, maps to same index of component\n', '     * @param _oldComponentsTargetUnits         Array of target units at end of rebalance for old component, maps to same index of component,\n', '     *                                              if component being removed set to 0.\n', '     * @param _positionMultiplier               Position multiplier when target units were calculated, needed in order to adjust target units\n', '     *                                              if fees accrued\n', '     */\n', '    function startRebalance(\n', '        address[] calldata _newComponents,\n', '        uint256[] calldata _newComponentsTargetUnits,\n', '        uint256[] calldata _oldComponentsTargetUnits,\n', '        uint256 _positionMultiplier\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        indexModule.startRebalance(_newComponents, _newComponentsTargetUnits, _oldComponentsTargetUnits, _positionMultiplier);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Set trade maximums for passed components\n', '     *\n', '     * @param _components            Array of components\n', '     * @param _tradeMaximums         Array of trade maximums mapping to correct component\n', '     */\n', '    function setTradeMaximums(\n', '        address[] calldata _components,\n', '        uint256[] calldata _tradeMaximums\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        indexModule.setTradeMaximums(_components, _tradeMaximums);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Set exchange for passed components\n', '     *\n', '     * @param _components        Array of components\n', '     * @param _exchanges         Array of exchanges mapping to correct component, uint256 used to signify exchange\n', '     */\n', '    function setAssetExchanges(\n', '        address[] calldata _components,\n', '        uint256[] calldata _exchanges\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        indexModule.setExchanges(_components, _exchanges);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Set exchange for passed components\n', '     *\n', '     * @param _components           Array of components\n', '     * @param _coolOffPeriods       Array of cool off periods to correct component\n', '     */\n', '    function setCoolOffPeriods(\n', '        address[] calldata _components,\n', '        uint256[] calldata _coolOffPeriods\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        indexModule.setCoolOffPeriods(_components, _coolOffPeriods);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Toggle ability for passed addresses to trade from current state \n', '     *\n', '     * @param _traders           Array trader addresses to toggle status\n', '     * @param _statuses          Booleans indicating if matching trader can trade\n', '     */\n', '    function updateTraderStatus(\n', '        address[] calldata _traders,\n', '        bool[] calldata _statuses\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        indexModule.updateTraderStatus(_traders, _statuses);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Toggle whether anyone can trade, bypassing the traderAllowList\n', '     *\n', '     * @param _status           Boolean indicating if anyone can trade\n', '     */\n', '    function updateAnyoneTrade(bool _status) external onlyOperator {\n', '        indexModule.updateAnyoneTrade(_status);\n', '    }\n', '\n', '    /**\n', '     * Accrue fees from streaming fee module and transfer tokens to operator / methodologist addresses based on fee split\n', '     */\n', '    function accrueFeeAndDistribute() public {\n', '        feeModule.accrueFee(setToken);\n', '\n', '        uint256 setTokenBalance = setToken.balanceOf(address(this));\n', '\n', '        uint256 operatorTake = setTokenBalance.preciseMul(operatorFeeSplit);\n', '        uint256 methodologistTake = setTokenBalance.sub(operatorTake);\n', '\n', '        setToken.transfer(operator, operatorTake);\n', '\n', '        setToken.transfer(methodologist, methodologistTake);\n', '\n', '        emit FeesAccrued(setTokenBalance, operatorTake, methodologistTake);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR OR METHODOLOGIST ONLY: Update the SetToken manager address. Operator and Methodologist must each call\n', '     * this function to execute the update.\n', '     *\n', '     * @param _newManager           New manager address\n', '     */\n', '    function updateManager(address _newManager) external mutualUpgrade(operator, methodologist) {\n', '        setToken.setManager(_newManager);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Add a new module to the SetToken.\n', '     *\n', '     * @param _module           New module to add\n', '     */\n', '    function addModule(address _module) external onlyOperator {\n', '        setToken.addModule(_module);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Interact with a module registered on the SetToken. Cannot be used to call functions in the\n', '     * fee module, due to ability to bypass methodologist permissions to update streaming fee.\n', '     *\n', '     * @param _module           Module to interact with\n', '     * @param _data             Byte data of function to call in module\n', '     */\n', '    function interactModule(address _module, bytes calldata _data) external onlyOperator {\n', '        require(_module != address(feeModule), "Must not be fee module");\n', '\n', '        // Invoke call to module, assume value will always be 0\n', '        _module.functionCallWithValue(_data, 0);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Remove a new module from the SetToken.\n', '     *\n', '     * @param _module           Module to remove\n', '     */\n', '    function removeModule(address _module) external onlyOperator {\n', '        setToken.removeModule(_module);\n', '    }\n', '\n', '    /**\n', '     * METHODOLOGIST ONLY: Update the streaming fee for the SetToken. Subject to timelock period agreed upon by the\n', '     * operator and methodologist\n', '     *\n', '     * @param _newFee           New streaming fee percentage\n', '     */\n', '    function updateStreamingFee(uint256 _newFee) external timeLockUpgrade onlyMethodologist {\n', '        feeModule.updateStreamingFee(setToken, _newFee);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR OR METHODOLOGIST ONLY: Update the fee recipient address. Operator and Methodologist must each call\n', '     * this function to execute the update.\n', '     *\n', '     * @param _newFeeRecipient           New fee recipient address\n', '     */\n', '    function updateFeeRecipient(address _newFeeRecipient) external mutualUpgrade(operator, methodologist) {\n', '        feeModule.updateFeeRecipient(setToken, _newFeeRecipient);\n', '    }\n', '\n', '    /**\n', '     * OPERATOR OR METHODOLOGIST ONLY: Update the fee split percentage. Operator and Methodologist must each call\n', '     * this function to execute the update.\n', '     *\n', '     * @param _newFeeSplit           New fee split percentage\n', '     */\n', '    function updateFeeSplit(uint256 _newFeeSplit) external mutualUpgrade(operator, methodologist) {    \n', '        require(\n', '            _newFeeSplit <= PreciseUnitMath.preciseUnit(),\n', '            "Operator Fee Split must be less than 1e18"\n', '        );\n', '\n', '        // Accrue fee to operator and methodologist prior to new fee split\n', '        accrueFeeAndDistribute();\n', '        operatorFeeSplit = _newFeeSplit;\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Update the index module\n', '     *\n', '     * @param _newIndexModule           New index module\n', '     */\n', '    function updateIndexModule(IIndexModule _newIndexModule) external onlyOperator {\n', '        indexModule = _newIndexModule;\n', '    }\n', '\n', '    /**\n', '     * METHODOLOGIST ONLY: Update the methodologist address\n', '     *\n', '     * @param _newMethodologist           New methodologist address\n', '     */\n', '    function updateMethodologist(address _newMethodologist) external onlyMethodologist {\n', '        methodologist = _newMethodologist;\n', '    }\n', '\n', '    /**\n', '     * OPERATOR ONLY: Update the operator address\n', '     *\n', '     * @param _newOperator           New operator address\n', '     */\n', '    function updateOperator(address _newOperator) external onlyOperator {\n', '        operator = _newOperator;\n', '    }\n', '\n', '    /**\n', '     * OPERATOR OR METHODOLOGIST ONLY: Update the timelock period for updating the streaming fee percentage.\n', '     * Operator and Methodologist must each call this function to execute the update.\n', '     *\n', '     * @param _newTimeLockPeriod           New timelock period in seconds\n', '     */\n', '    function setTimeLockPeriod(uint256 _newTimeLockPeriod) external override mutualUpgrade(operator, methodologist) {\n', '        timeLockPeriod = _newTimeLockPeriod;\n', '    }\n', '}']