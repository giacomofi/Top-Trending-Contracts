['// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/// @title IDerivativePriceFeed Interface\n', '/// @author Enzyme Council <[email\xa0protected]>\n', '/// @notice Simple interface for derivative price source oracle implementations\n', 'interface IDerivativePriceFeed {\n', '    function calcUnderlyingValues(address, uint256)\n', '        external\n', '        returns (address[] memory, uint256[] memory);\n', '\n', '    function isSupportedAsset(address) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "../IDerivativePriceFeed.sol";\n', '\n', '/// @title RevertingPriceFeed Contract\n', '/// @author Enzyme Council <[email\xa0protected]>\n', '/// @notice Price feed that always reverts on value conversion\n', '/// @dev Used purely for extraordinary circumstances where we want to prevent value calculations,\n', '/// while allowing an asset to continue to be in the asset universe\n', 'contract RevertingPriceFeed is IDerivativePriceFeed {\n', '    /// @notice Converts a given amount of a derivative to its underlying asset values\n', '    function calcUnderlyingValues(address, uint256)\n', '        external\n', '        override\n', '        returns (address[] memory, uint256[] memory)\n', '    {\n', '        revert("calcUnderlyingValues: RevertingPriceFeed");\n', '    }\n', '\n', '    /// @notice Checks whether an asset is a supported primitive of the price feed\n', '    /// @return isSupported_ True if the asset is a supported primitive\n', '    function isSupportedAsset(address) public view override returns (bool isSupported_) {\n', '        return true;\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "details": {\n', '      "constantOptimizer": true,\n', '      "cse": true,\n', '      "deduplicate": true,\n', '      "jumpdestRemover": true,\n', '      "orderLiterals": true,\n', '      "peephole": true,\n', '      "yul": false\n', '    },\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']