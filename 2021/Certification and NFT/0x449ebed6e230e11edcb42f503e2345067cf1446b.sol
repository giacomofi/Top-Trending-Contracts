['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !AddressUpgradeable.isContract(address(this));\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20Detailed { \n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract DeHiveTokensale is OwnableUpgradeable, PausableUpgradeable {\n', '\n', '    using SafeMathUpgradeable for uint256;\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '\n', '    /**\n', '     * EVENTS\n', '     **/\n', '    event DHVPurchased(address indexed user, address indexed purchaseToken, uint256 dhvAmount);\n', '    event TokensClaimed(address indexed user, uint256 dhvAmount);\n', '\n', '    /**\n', '     * CONSTANTS\n', '     **/\n', '\n', '    // *** TOKENSALE PARAMETERS START ***\n', '    uint256 public constant PRECISION = 1000000; //Up to 0.000001\n', '    uint256 public constant PRE_SALE_START =    1616590800; //Mar 24 2021 14:00:00 GMT\n', '    uint256 public constant PRE_SALE_END =      1616803140; //Mar 26 2021 23:59:00 GMT\n', '\n', '    uint256 public constant PUBLIC_SALE_START = 1618408800; //Apr 14 2021 14:00:00 GMT\n', '    uint256 public constant PUBLIC_SALE_END =   1618790340; //Apr 18 2021 23:59:00 GMT\n', '\n', '    uint256 public constant PRE_SALE_DHV_POOL =     450000 * 10 ** 18; // 5% DHV in total in presale pool\n', '    uint256 public constant PRE_SALE_DHV_NUX_POOL =  50000 * 10 ** 18; // \n', '    uint256 public PUBLIC_SALE_DHV_POOL;                               // 11% DHV in public sale pool\n', '    uint256 private constant WITHDRAWAL_PERIOD = 365 * 24 * 60 * 60; //1 year\n', '    // *** TOKENSALE PARAMETERS END ***\n', '\n', '\n', '    /***\n', '     * STORAGE\n', '     ***/\n', '\n', '    uint256 public maxTokensAmount;\n', '    uint256 public maxGasPrice;\n', '\n', '    // *** VESTING PARAMETERS START ***\n', '\n', '    uint256 public vestingStart;\n', '    uint256 public constant vestingDuration = 305 days; //305 days - until Apr 30 2021 00:00:00 GMT\n', '    \n', '    // *** VESTING PARAMETERS END ***\n', '    address public DHVToken;\n', '    address internal USDTToken; /*= 0xdAC17F958D2ee523a2206206994597C13D831ec7 */\n', '    address internal DAIToken; /*= 0x6B175474E89094C44Da98b954EedeAC495271d0F*/\n', '    address internal NUXToken; /*= 0x89bD2E7e388fAB44AE88BEf4e1AD12b4F1E0911c*/\n', '\n', '    mapping (address => uint256) public purchased;\n', '    mapping (address => uint256) internal _claimed;\n', '\n', '    uint256 public purchasedWithNUX;\n', '    uint256 public purchasedPreSale;\n', '    uint256 public purchasedPublicSale;\n', '    uint256 public ETHRate;\n', '    mapping (address => uint256) public rates;\n', '\n', '    address private _treasury;\n', '    \n', '    /***\n', '     * MODIFIERS\n', '     ***/\n', '\n', '    /**\n', '     * @dev Throws if called with not supported token.\n', '     */\n', '    modifier supportedCoin(address _token) {\n', '        require(_token == USDTToken || _token == DAIToken, "Token not supported");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called when no ongoing pre-sale or public sale.\n', '    */\n', '    modifier onlySale() {\n', '        require(_isPreSale() || _isPublicSale(), "Sale stages are over or not started");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called when no ongoing pre-sale or public sale.\n', '    */\n', '    modifier onlyPreSale() {\n', '        require(_isPreSale(), "Presale stages are over or not started");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if sale stage is ongoing.\n', '    */\n', '    modifier notOnSale() {\n', '        require(!_isPreSale(), "Presale is not over");\n', '        require(!_isPublicSale(), "Sale is not over");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if gas price exceeds gas limit.\n', '    */\n', '    modifier correctGas() {\n', '        require(maxGasPrice == 0 || tx.gasprice <= maxGasPrice, "Gas price exceeds limit");\n', '        _;\n', '    }\n', '\n', '    /***\n', '     * INITIALIZER AND SETTINGS\n', '     ***/\n', '\n', '    /**\n', '     * @notice Initializes the contract with correct addresses settings\n', "     * @param treasury Address of the DeHive protocol's treasury where funds from sale go to\n", '     * @param dhv DHVToken mainnet address\n', '     */\n', '    function initialize(address treasury, address dhv) public initializer {\n', '        require(treasury != address(0), "Zero address");\n', '        require(dhv != address(0), "Zero address");\n', '\n', '        __Ownable_init();\n', '        __Pausable_init();\n', '\n', '        _treasury = treasury;\n', '        DHVToken = dhv;\n', '\n', '        DAIToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '        USDTToken = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '        NUXToken = 0x89bD2E7e388fAB44AE88BEf4e1AD12b4F1E0911c;\n', '        vestingStart = 0;\n', '        maxTokensAmount = 49600 * (10 ** 18); // around 50 ETH \n', '        PUBLIC_SALE_DHV_POOL = 1100000 * 10 ** 18; // 11% of sale pool\n', '    }\n', '\n', '    /**\n', '     * @notice Updates current vesting start time. Can be used once\n', '     * @param _vestingStart New vesting start time\n', '     */\n', '    function adminSetVestingStart(uint256 _vestingStart) virtual external onlyOwner{\n', '        require(vestingStart == 0, "Vesting start is already set");\n', '        require(_vestingStart > PUBLIC_SALE_END && block.timestamp < _vestingStart, "Incorrect time provided");\n', '        vestingStart = _vestingStart;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the rate for the chosen token based on the contracts precision\n', '     * @param _token ERC20 token address or zero address for ETH\n', '     * @param _rate Exchange rate based on precision (e.g. _rate = PRECISION corresponds to 1:1)\n', '     */\n', '    function adminSetRates(address _token, uint256 _rate) external onlyOwner {\n', '        if (_token == address(0))\n', '            ETHRate = _rate;\n', '        else\n', '            rates[_token] = _rate;\n', '    }\n', '\n', '    /**\n', '    * @notice Allows owner to change the treasury address. Treasury is the address where all funds from sale go to\n', '    * @param treasury New treasury address\n', '    */\n', '    function adminSetTreasury(address treasury) external onlyOwner {\n', '        _treasury = treasury;\n', '    }\n', '\n', '    /**\n', '    * @notice Allows owner to change max allowed DHV token per address.\n', '    * @param _maxDHV New max DHV amount\n', '    */\n', '    function adminSetMaxDHV(uint256 _maxDHV) external onlyOwner {\n', '        maxTokensAmount = _maxDHV;\n', '    }\n', '\n', '    /**\n', '    * @notice Allows owner to change the max allowed gas price. Prevents gas wars\n', '    * @param _maxGasPrice New max gas price\n', '    */\n', '    function adminSetMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\n', '        maxGasPrice = _maxGasPrice;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates public sales pool maximum\n', '     * @param _publicPool New public pool DHV maximum value\n', '     */\n', '    function adminSetPublicPool(uint256 _publicPool) external onlyOwner {\n', '        PUBLIC_SALE_DHV_POOL = _publicPool;\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice Stops purchase functions. Owner only\n', '    */\n', '    function adminPause() external onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '    * @notice Unpauses purchase functions. Owner only\n', '    */\n', '    function adminUnpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '    /***\n', '     * PURCHASE FUNCTIONS\n', '     ***/\n', '\n', '    /**\n', '     * @notice For purchase with ETH\n', '     */\n', '    receive() external virtual payable onlySale whenNotPaused {\n', '        _purchaseDHVwithETH();\n', '    }\n', '\n', '    /**\n', '     * @notice For purchase with allowed stablecoin (USDT and DAI)\n', '     * @param ERC20token Address of the token to be paid in\n', '     * @param ERC20amount Amount of the token to be paid in\n', '     */\n', '    function purchaseDHVwithERC20(address ERC20token, uint256 ERC20amount) external onlySale supportedCoin(ERC20token) whenNotPaused correctGas {\n', '        require(ERC20amount > 0, "Zero amount");\n', '        uint256 purchaseAmount = _calcPurchaseAmount(ERC20token, ERC20amount);\n', '        require(purchaseAmount.add(purchased[msg.sender]) <= maxTokensAmount, "Maximum allowed exceeded");\n', '\n', '        \n', '        if (_isPreSale()) {\n', '            require(purchasedPreSale.add(purchaseAmount) <= PRE_SALE_DHV_POOL, "Not enough DHV in presale pool");\n', '            purchasedPreSale = purchasedPreSale.add(purchaseAmount);\n', '        } else {\n', '            require(purchaseAmount <= publicSaleAvailableDHV(), "Not enough DHV in sale pool");\n', '            purchasedPublicSale = purchasedPublicSale.add(purchaseAmount);\n', '        }\n', '            \n', '        purchased[_msgSender()] = purchased[_msgSender()].add(purchaseAmount);\n', '        IERC20Upgradeable(ERC20token).safeTransferFrom(_msgSender(), _treasury, ERC20amount); // send ERC20 to Treasury\n', '\n', '        emit DHVPurchased(_msgSender(), ERC20token, purchaseAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice For purchase with NUX token only. Available only for tokensale\n', '     * @param nuxAmount Amount of the NUX token\n', '     */\n', '    function purchaseDHVwithNUX(uint256 nuxAmount) external onlyPreSale whenNotPaused correctGas {\n', '        require(nuxAmount > 0, "Zero amount");\n', '        uint256 purchaseAmount = _calcPurchaseAmount(NUXToken, nuxAmount);\n', '        require(purchaseAmount.add(purchased[msg.sender]) <= maxTokensAmount, "Maximum allowed exceeded");\n', '\n', '\n', '        require(purchasedWithNUX.add(purchaseAmount) <= PRE_SALE_DHV_NUX_POOL, "Not enough DHV in NUX pool");\n', '        purchasedWithNUX = purchasedWithNUX.add(purchaseAmount);\n', '\n', '        purchased[_msgSender()] = purchased[_msgSender()].add(purchaseAmount);\n', '        IERC20Upgradeable(NUXToken).safeTransferFrom(_msgSender(), _treasury, nuxAmount);\n', '\n', '        emit DHVPurchased(_msgSender(), NUXToken, purchaseAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice For purchase with ETH. ETH is left on the contract until withdrawn to treasury\n', '     */\n', '    function purchaseDHVwithETH() external payable onlySale whenNotPaused {\n', '        require(msg.value > 0, "No ETH sent");\n', '        _purchaseDHVwithETH();\n', '    }\n', '\n', '    function _purchaseDHVwithETH() correctGas private {\n', '        uint256 purchaseAmount = _calcEthPurchaseAmount(msg.value);\n', '        require(purchaseAmount.add(purchased[msg.sender]) <= maxTokensAmount, "Maximum allowed exceeded");\n', '\n', '        if (_isPreSale()) {\n', '            require(purchasedPreSale.add(purchaseAmount) <= PRE_SALE_DHV_POOL, "Not enough DHV in presale pool");\n', '            purchasedPreSale = purchasedPreSale.add(purchaseAmount);\n', '        } else {\n', '            require(purchaseAmount <= publicSaleAvailableDHV(), "Not enough DHV in sale pool");\n', '            purchasedPublicSale = purchasedPublicSale.add(purchaseAmount);\n', '        }\n', '\n', '        purchased[_msgSender()] = purchased[_msgSender()].add(purchaseAmount);\n', '\n', '        payable(_treasury).transfer(msg.value);\n', '\n', '        emit DHVPurchased(_msgSender(), address(0), purchaseAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Function to get available on public sale amount of DHV\n', '     * @notice Unsold NUX pool and pre-sale pool go to public sale\n', '     * @return The amount of the token released.\n', '     */\n', '    function publicSaleAvailableDHV() public view returns(uint256) {\n', '        return (PUBLIC_SALE_DHV_POOL +\n', '               PRE_SALE_DHV_POOL.sub(purchasedPreSale) +\n', '               PRE_SALE_DHV_NUX_POOL.sub(purchasedWithNUX)).sub(purchasedPublicSale);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Function for the administrator to withdraw token (except DHV)\n', '     * @notice Withdrawals allowed only if there is no sale pending stage\n', '     * @param ERC20token Address of ERC20 token to withdraw from the contract\n', '     */\n', '    function adminWithdrawERC20(address ERC20token) external onlyOwner notOnSale {\n', '        require(ERC20token != DHVToken || _canWithdrawDHV(), "DHV withdrawal is forbidden");\n', '\n', '        uint256 tokenBalance = IERC20Upgradeable(ERC20token).balanceOf(address(this));\n', '        IERC20Upgradeable(ERC20token).safeTransfer(_treasury, tokenBalance);\n', '    }\n', '\n', '    /**\n', '     * @notice Function for the administrator to withdraw ETH for refunds\n', '     * @notice Withdrawals allowed only if there is no sale pending stage\n', '     */\n', '    function adminWithdraw() external onlyOwner notOnSale {\n', '        require(address(this).balance > 0, "Nothing to withdraw");\n', '\n', '        (bool success, ) = _treasury.call{value: address(this).balance}("");\n', '        require(success, "Transfer failed");\n', '    }\n', '\n', '    /**\n', '     * @notice Returns DHV amount for 1 external token\n', '     * @param _token External toke (DAI, USDT, NUX, 0 address for ETH)\n', '     */\n', '    function rateForToken(address _token) external view returns(uint256) {\n', '        if (_token == address(0)) {\n', '            return _calcEthPurchaseAmount(10**18);\n', '        }\n', '        else {\n', '            return _calcPurchaseAmount(_token, 10**( uint256(IERC20Detailed(_token).decimals()) ));\n', '        }\n', '    }\n', '\n', '    /***\n', '     * VESTING INTERFACE\n', '     ***/\n', '\n', '    /**\n', '     * @notice Transfers available for claim vested tokens to the user.\n', '     */\n', '    function claim() external {\n', '        require(vestingStart!=0, "Vesting start is not set");\n', '        require(_isPublicSaleOver(), "Not allowed to claim now");\n', '        uint256 unclaimed = claimable(_msgSender());\n', '        require(unclaimed > 0, "TokenVesting: no tokens are due");\n', '\n', '        _claimed[_msgSender()] = _claimed[_msgSender()].add(unclaimed);\n', '        IERC20Upgradeable(DHVToken).safeTransfer(_msgSender(), unclaimed);\n', '        emit TokensClaimed(_msgSender(), unclaimed);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the amount of tokens the user has already claimed\n', '     * @param _user Address of the user who purchased tokens\n', '     * @return The amount of the token claimed.\n', '     */\n', '    function claimed(address _user) external view returns (uint256) {\n', '        return _claimed[_user];\n', '    }\n', '\n', '    /**\n', "     * @notice Calculates the amount that has already vested but hasn't been claimed yet.\n", '     * @param _user Address of the user who purchased tokens\n', '     * @return The amount of the token vested and unclaimed.\n', '     */\n', '    function claimable(address _user) public view returns (uint256) {\n', '        return _vestedAmount(_user).sub(_claimed[_user]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param _user Address of the user who purchased tokens\n', '     * @return Amount of DHV already vested\n', '     */\n', '    function _vestedAmount(address _user) private view returns (uint256) {\n', '        if (block.timestamp >= vestingStart.add(vestingDuration)) {\n', '            return purchased[_user];\n', '        } else {\n', '            return purchased[_user].mul(block.timestamp.sub(vestingStart)).div(vestingDuration);\n', '        }\n', '    }\n', '\n', '    /***\n', '     * INTERNAL HELPERS\n', '     ***/\n', '\n', '\n', '    /**\n', '     * @dev Checks if presale stage is on-going.\n', '     * @return True is presale is active\n', '     */\n', '    function _isPreSale() virtual internal view returns (bool) {\n', '        return (block.timestamp >= PRE_SALE_START && block.timestamp < PRE_SALE_END);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if public sale stage is on-going.\n', '     * @return True is public sale is active\n', '     */\n', '    function _isPublicSale() virtual internal view returns (bool) {\n', '        return (block.timestamp >= PUBLIC_SALE_START && block.timestamp < PUBLIC_SALE_END);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if public sale stage is over.\n', '     * @return True is public sale is over\n', '     */\n', '    function _isPublicSaleOver() virtual internal view returns (bool) {\n', '        return (block.timestamp >= PUBLIC_SALE_END);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if public sale stage is over.\n', '     * @return True is public sale is over\n', '     */\n', '    function _canWithdrawDHV() virtual internal view returns (bool) {\n', '        return (block.timestamp >= vestingStart.add(WITHDRAWAL_PERIOD) );\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates DHV amount based on rate and token.\n', '     * @param _token Supported ERC20 token\n', '     * @param _amount Token amount to convert to DHV\n', '     * @return DHV amount\n', '     */\n', '    function _calcPurchaseAmount(address _token, uint256 _amount) private view returns (uint256) {\n', '        uint256 purchaseAmount = _amount.mul(rates[_token]).div(PRECISION);\n', '        require(purchaseAmount > 0, "Rates not set");\n', '\n', '        uint8 _decimals = IERC20Detailed(_token).decimals();\n', '        if (_decimals < 18) {\n', '            purchaseAmount = purchaseAmount.mul(10 ** (18 - uint256(_decimals)));\n', '        }\n', '        return purchaseAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates DHV amount based on rate and ETH amount.\n', '     * @param _amount ETH amount to convert to DHV\n', '     * @return DHV amount\n', '     */\n', '    function _calcEthPurchaseAmount(uint256 _amount) private view returns (uint256) {\n', '        uint256 purchaseAmount = _amount.mul(ETHRate).div(PRECISION);\n', '        require(purchaseAmount > 0, "Rates not set");\n', '        return purchaseAmount;\n', '    }\n', '\n', '\n', '}']