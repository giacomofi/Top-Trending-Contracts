['// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity ^0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', "import './ICompound.sol';\n", "import './CrowdProposal.sol';\n", '\n', 'contract CrowdProposalFactory {\n', '    /// @notice `COMP` token contract address\n', '    address public immutable comp;\n', '    /// @notice Compound protocol `GovernorBravo` contract address\n', '    address public immutable governor;\n', '    /// @notice Minimum Comp tokens required to create a crowd proposal\n', '    uint public immutable compStakeAmount;\n', '\n', '    /// @notice An event emitted when a crowd proposal is created\n', '    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\n', '\n', '     /**\n', '     * @notice Construct a proposal factory for crowd proposals\n', '     * @param comp_ `COMP` token contract address\n', '     * @param governor_ Compound protocol `GovernorBravo` contract address\n', '     * @param compStakeAmount_ The minimum amount of Comp tokes required for creation of a crowd proposal\n', '     */\n', '    constructor(address comp_,\n', '                address governor_,\n', '                uint compStakeAmount_) public {\n', '        comp = comp_;\n', '        governor = governor_;\n', '        compStakeAmount = compStakeAmount_;\n', '    }\n', '\n', '    /**\n', '    * @notice Create a new crowd proposal\n', '    * @notice Call `Comp.approve(factory_address, compStakeAmount)` before calling this method\n', '    * @param targets The ordered list of target addresses for calls to be made\n', '    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '    * @param signatures The ordered list of function signatures to be called\n', '    * @param calldatas The ordered list of calldata to be passed to each call\n', '    * @param description The block at which voting begins: holders must delegate their votes prior to this block\n', '    */\n', '    function createCrowdProposal(address[] memory targets,\n', '                                 uint[] memory values,\n', '                                 string[] memory signatures,\n', '                                 bytes[] memory calldatas,\n', '                                 string memory description) external {\n', '        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, comp, governor);\n', '        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\n', '\n', '        // Stake COMP and force proposal to delegate votes to itself\n', '        IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);\n', '    }\n', '}']