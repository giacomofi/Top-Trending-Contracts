['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-21\n', '*/\n', '\n', '/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '// File: @powerpool/poweroracle/contracts/interfaces/IPowerPoke.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IPowerPoke {\n', "  /*** CLIENT'S CONTRACT INTERFACE ***/\n", '  function authorizeReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporterWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinDeposit_\n', '  ) external view;\n', '\n', '  function authorizePoker(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizePokerWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinStake_\n', '  ) external view;\n', '\n', '  function slashReporter(uint256 slasherId_, uint256 times_) external;\n', '\n', '  function reward(\n', '    uint256 userId_,\n', '    uint256 gasUsed_,\n', '    uint256 compensationPlan_,\n', '    bytes calldata pokeOptions_\n', '  ) external;\n', '\n', '  /*** CLIENT OWNER INTERFACE ***/\n', '  function transferClientOwnership(address client_, address to_) external;\n', '\n', '  function addCredit(address client_, uint256 amount_) external;\n', '\n', '  function withdrawCredit(\n', '    address client_,\n', '    address to_,\n', '    uint256 amount_\n', '  ) external;\n', '\n', '  function setReportIntervals(\n', '    address client_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setSlasherHeartbeat(address client_, uint256 slasherHeartbeat_) external;\n', '\n', '  function setGasPriceLimit(address client_, uint256 gasPriceLimit_) external;\n', '\n', '  function setFixedCompensations(\n', '    address client_,\n', '    uint256 eth_,\n', '    uint256 cvp_\n', '  ) external;\n', '\n', '  function setBonusPlan(\n', '    address client_,\n', '    uint256 planId_,\n', '    bool active_,\n', '    uint64 bonusNominator_,\n', '    uint64 bonusDenominator_,\n', '    uint64 perGas_\n', '  ) external;\n', '\n', '  function setMinimalDeposit(address client_, uint256 defaultMinDeposit_) external;\n', '\n', '  /*** POKER INTERFACE ***/\n', '  function withdrawRewards(uint256 userId_, address to_) external;\n', '\n', '  function setPokerKeyRewardWithdrawAllowance(uint256 userId_, bool allow_) external;\n', '\n', '  /*** OWNER INTERFACE ***/\n', '  function addClient(\n', '    address client_,\n', '    address owner_,\n', '    bool canSlash_,\n', '    uint256 gasPriceLimit_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setClientActiveFlag(address client_, bool active_) external;\n', '\n', '  function setCanSlashFlag(address client_, bool canSlash) external;\n', '\n', '  function setOracle(address oracle_) external;\n', '\n', '  function pause() external;\n', '\n', '  function unpause() external;\n', '\n', '  /*** GETTERS ***/\n', '  function creditOf(address client_) external view returns (uint256);\n', '\n', '  function ownerOf(address client_) external view returns (address);\n', '\n', '  function getMinMaxReportIntervals(address client_) external view returns (uint256 min, uint256 max);\n', '\n', '  function getSlasherHeartbeat(address client_) external view returns (uint256);\n', '\n', '  function getGasPriceLimit(address client_) external view returns (uint256);\n', '\n', '  function getPokerBonus(\n', '    address client_,\n', '    uint256 bonusPlanId_,\n', '    uint256 gasUsed_,\n', '    uint256 userDeposit_\n', '  ) external view returns (uint256);\n', '\n', '  function getGasPriceFor(address client_) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IYearnVaultV2.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IYearnVaultV2 {\n', '  function token() external view returns (address);\n', '\n', '  function totalAssets() external view returns (uint256);\n', '\n', '  function pricePerShare() external view returns (uint256);\n', '\n', '  function deposit(uint256 amount) external;\n', '\n', '  function deposit(uint256 amount, address recipient) external;\n', '\n', '  function withdraw(uint256 maxShares) external;\n', '\n', '  function withdraw(uint256 maxShares, address recipient) external;\n', '\n', '  function withdraw(\n', '    uint256 maxShares,\n', '    address recipient,\n', '    uint256 maxLoss\n', '  ) external;\n', '\n', '  function report(\n', '    uint256 gain,\n', '    uint256 loss,\n', '    uint256 debtPayment\n', '  ) external returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexPoolControllerInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface PowerIndexPoolControllerInterface {\n', '  function rebindByStrategyAdd(\n', '    address token,\n', '    uint256 balance,\n', '    uint256 denorm,\n', '    uint256 deposit\n', '  ) external;\n', '\n', '  function rebindByStrategyRemove(\n', '    address token,\n', '    uint256 balance,\n', '    uint256 denorm\n', '  ) external;\n', '\n', '  function bindByStrategy(\n', '    address token,\n', '    uint256 balance,\n', '    uint256 denorm\n', '  ) external;\n', '\n', '  function unbindByStrategy(address token) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor {\n', '  function calc_withdraw_one_coin(uint256 _tokenAmount, int128 _index) external view returns (uint256);\n', '\n', '  function remove_liquidity_one_coin(\n', '    uint256 _token_amount,\n', '    int128 _i,\n', '    uint256 _min_amount\n', '  ) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor2 {\n', '  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[2] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor3.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor3 {\n', '  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[3] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveDepositor4.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveDepositor4 {\n', '  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n', '\n', '  function calc_token_amount(uint256[4] memory _amounts, bool _deposit) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor {\n', '  function calc_withdraw_one_coin(\n', '    address _pool,\n', '    uint256 _tokenAmount,\n', '    int128 _index\n', '  ) external view returns (uint256);\n', '\n', '  function remove_liquidity_one_coin(\n', '    address _pool,\n', '    uint256 _token_amount,\n', '    int128 _i,\n', '    uint256 _min_amount\n', '  ) external;\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor2 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[2] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[2] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor3.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor3 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[3] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[3] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurveZapDepositor4.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurveZapDepositor4 {\n', '  function add_liquidity(\n', '    address _pool,\n', '    uint256[4] memory _amounts,\n', '    uint256 _min_mint_amount\n', '  ) external;\n', '\n', '  function calc_token_amount(\n', '    address _pool,\n', '    uint256[4] memory _amounts,\n', '    bool _deposit\n', '  ) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ICurvePoolRegistry.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICurvePoolRegistry {\n', '  function get_virtual_price_from_lp_token(address _token) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/weight-strategies/blocks/SinglePoolManagement.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'abstract contract SinglePoolManagement is OwnableUpgradeSafe {\n', '  address public immutable pool;\n', '  address public poolController;\n', '\n', '  constructor(address _pool) public {\n', '    pool = _pool;\n', '  }\n', '\n', '  function __SinglePoolManagement_init(address _poolController) internal {\n', '    poolController = _poolController;\n', '  }\n', '}\n', '\n', '// File: contracts/balancer-core/BConst.sol\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract BConst {\n', '    uint public constant BONE              = 10**18;\n', '    // Minimum number of tokens in the pool\n', '    uint public constant MIN_BOUND_TOKENS  = 2;\n', '    // Maximum number of tokens in the pool\n', '    uint public constant MAX_BOUND_TOKENS  = 9;\n', '    // Minimum swap fee\n', '    uint public constant MIN_FEE           = BONE / 10**6;\n', '    // Maximum swap fee\n', '    uint public constant MAX_FEE           = BONE / 10;\n', '    // Minimum weight for token\n', '    uint public constant MIN_WEIGHT        = 1000000000;\n', '    // Maximum weight for token\n', '    uint public constant MAX_WEIGHT        = BONE * 50;\n', '    // Maximum total weight\n', '    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\n', '    // Minimum balance for a token\n', '    uint public constant MIN_BALANCE       = BONE / 10**12;\n', '    // Initial pool tokens supply\n', '    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\n', '\n', '    uint public constant MIN_BPOW_BASE     = 1 wei;\n', '    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n', '    uint public constant BPOW_PRECISION    = BONE / 10**10;\n', '    // Maximum input tokens balance ratio for swaps.\n', '    uint public constant MAX_IN_RATIO      = BONE / 2;\n', '    // Maximum output tokens balance ratio for swaps.\n', '    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\n', '}\n', '\n', '// File: contracts/balancer-core/BNum.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract BNum is BConst {\n', '\n', '    function btoi(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return a / BONE;\n', '    }\n', '\n', '    function bfloor(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return btoi(a) * BONE;\n', '    }\n', '\n', '    function badd(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsub(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        (uint c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsubSign(uint a, uint b)\n', '        internal pure\n', '        returns (uint, bool)\n', '    {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    function bmul(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    function bdiv(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b > 0, "ERR_DIV_ZERO");\n', '      return a / b;\n', '    }\n', '\n', '    // DSMath.wpow\n', '    function bpowi(uint a, uint n)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint z = n % 2 != 0 ? a : BONE;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            a = bmul(a, a);\n', '\n', '            if (n % 2 != 0) {\n', '                z = bmul(z, a);\n', '            }\n', '        }\n', '        return z;\n', '    }\n', '\n', '    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n', '    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n', '    // of approximation of b^0.w\n', '    function bpow(uint base, uint exp)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(base >= MIN_BPOW_BASE, "ERR_BPOW_BASE_TOO_LOW");\n', '        require(base <= MAX_BPOW_BASE, "ERR_BPOW_BASE_TOO_HIGH");\n', '\n', '        uint whole  = bfloor(exp);\n', '        uint remain = bsub(exp, whole);\n', '\n', '        uint wholePow = bpowi(base, btoi(whole));\n', '\n', '        if (remain == 0) {\n', '            return wholePow;\n', '        }\n', '\n', '        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n', '        return bmul(wholePow, partialResult);\n', '    }\n', '\n', '    function bpowApprox(uint base, uint exp, uint precision)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        // term 0:\n', '        uint a     = exp;\n', '        (uint x, bool xneg)  = bsubSign(base, BONE);\n', '        uint term = BONE;\n', '        uint sum   = term;\n', '        bool negative = false;\n', '\n', '\n', '        // term(k) = numer / denom\n', '        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n', '        // each iteration, multiply previous term by (a-(k-1)) * x / k\n', '        // continue until term is less than precision\n', '        for (uint i = 1; term >= precision; i++) {\n', '            uint bigK = i * BONE;\n', '            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n', '            term = bmul(term, bmul(c, x));\n', '            term = bdiv(term, bigK);\n', '            if (term == 0) break;\n', '\n', '            if (xneg) negative = !negative;\n', '            if (cneg) negative = !negative;\n', '            if (negative) {\n', '                sum = bsub(sum, term);\n', '            } else {\n', '                sum = badd(sum, term);\n', '            }\n', '        }\n', '\n', '        return sum;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/BMathInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BMathInterface {\n', '  function calcInGivenOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '\n', '  function calcSingleInGivenPoolOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '}\n', '\n', '// File: contracts/interfaces/BPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BPoolInterface is IERC20, BMathInterface {\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function getDenormalizedWeight(address) external view returns (uint256);\n', '\n', '  function getBalance(address) external view returns (uint256);\n', '\n', '  function getSwapFee() external view returns (uint256);\n', '\n', '  function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '  function getCommunityFee()\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      address\n', '    );\n', '\n', '  function calcAmountWithCommunityFee(\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external view returns (uint256, uint256);\n', '\n', '  function getRestrictions() external view returns (address);\n', '\n', '  function isPublicSwap() external view returns (bool);\n', '\n', '  function isFinalized() external view returns (bool);\n', '\n', '  function isBound(address t) external view returns (bool);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function setSwapFee(uint256) external;\n', '\n', '  function setCommunityFeeAndReceiver(\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external;\n', '\n', '  function setController(address) external;\n', '\n', '  function setPublicSwap(bool) external;\n', '\n', '  function finalize() external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function rebind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function unbind(address) external;\n', '\n', '  function gulp(address) external;\n', '\n', '  function callVoting(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  function getMinWeight() external view returns (uint256);\n', '\n', '  function getMaxBoundTokens() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface PowerIndexPoolInterface is BPoolInterface {\n', '  function initialize(\n', '    string calldata name,\n', '    string calldata symbol,\n', '    uint256 minWeightPerSecond,\n', '    uint256 maxWeightPerSecond\n', '  ) external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function setDynamicWeight(\n', '    address token,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) external;\n', '\n', '  function getDynamicWeightSettings(address token)\n', '    external\n', '    view\n', '    returns (\n', '      uint256 fromTimestamp,\n', '      uint256 targetTimestamp,\n', '      uint256 fromDenorm,\n', '      uint256 targetDenorm\n', '    );\n', '\n', '  function getMinWeight() external view override returns (uint256);\n', '\n', '  function getWeightPerSecondBounds() external view returns (uint256, uint256);\n', '\n', '  function setWeightPerSecondBounds(uint256, uint256) external;\n', '\n', '  function setWrapper(address, bool) external;\n', '\n', '  function getWrapperMode() external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IPowerOracle.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IPowerOracle {\n', '  function assetPrices(address _token) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/weight-strategies/WeightValueAbstract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'abstract contract WeightValueAbstract is BNum, OwnableUpgradeSafe {\n', '  event UpdatePoolWeights(\n', '    address indexed pool,\n', '    uint256 indexed timestamp,\n', '    address[] tokens,\n', '    uint256[3][] weightsChange,\n', '    uint256[] newTokenValues\n', '  );\n', '\n', '  event SetTotalWeight(uint256 totalWeight);\n', '\n', '  struct TokenConfigItem {\n', '    address token;\n', '    address[] excludeTokenBalances;\n', '  }\n', '\n', '  IPowerOracle public oracle;\n', '  uint256 public totalWeight;\n', '\n', '  function getTokenValue(PowerIndexPoolInterface _pool, address _token) public view virtual returns (uint256) {\n', '    return getTVL(_pool, _token);\n', '  }\n', '\n', '  function getTVL(PowerIndexPoolInterface _pool, address _token) public view virtual returns (uint256) {\n', '    uint256 balance = _pool.getBalance(_token);\n', '    return bdiv(bmul(balance, oracle.assetPrices(_token)), 1 ether);\n', '  }\n', '\n', '  function setTotalWeight(uint256 _totalWeight) external onlyOwner {\n', '    totalWeight = _totalWeight;\n', '    emit SetTotalWeight(_totalWeight);\n', '  }\n', '\n', '  function _computeWeightsChangeWithEvent(\n', '    PowerIndexPoolInterface _pool,\n', '    address[] memory _tokens,\n', '    address[] memory _piTokens,\n', '    uint256 _minWPS,\n', '    uint256 fromTimestamp,\n', '    uint256 toTimestamp\n', '  )\n', '    internal\n', '    returns (\n', '      uint256[3][] memory weightsChange,\n', '      uint256 lenToPush,\n', '      uint256[] memory newTokensValues\n', '    )\n', '  {\n', '    (weightsChange, lenToPush, newTokensValues, ) = computeWeightsChange(\n', '      _pool,\n', '      _tokens,\n', '      _piTokens,\n', '      _minWPS,\n', '      fromTimestamp,\n', '      toTimestamp\n', '    );\n', '    emit UpdatePoolWeights(address(_pool), block.timestamp, _tokens, weightsChange, newTokensValues);\n', '  }\n', '\n', '  function computeWeightsChange(\n', '    PowerIndexPoolInterface _pool,\n', '    address[] memory _tokens,\n', '    address[] memory _piTokens,\n', '    uint256 _minWPS,\n', '    uint256 fromTimestamp,\n', '    uint256 toTimestamp\n', '  )\n', '    public\n', '    view\n', '    returns (\n', '      uint256[3][] memory weightsChange,\n', '      uint256 lenToPush,\n', '      uint256[] memory newTokenValues,\n', '      uint256 newTokenValueSum\n', '    )\n', '  {\n', '    uint256 len = _tokens.length;\n', '    newTokenValues = new uint256[](len);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 value = getTokenValue(_pool, _tokens[i]);\n', '      newTokenValues[i] = value;\n', '      newTokenValueSum = badd(newTokenValueSum, value);\n', '    }\n', '\n', '    weightsChange = new uint256[3][](len);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 oldWeight;\n', '      if (_piTokens.length == _tokens.length) {\n', '        try _pool.getDenormalizedWeight(_piTokens[i]) returns (uint256 _weight) {\n', '          oldWeight = _weight;\n', '        } catch {\n', '          oldWeight = 0;\n', '        }\n', '      } else {\n', '        try _pool.getDenormalizedWeight(_tokens[i]) returns (uint256 _weight) {\n', '          oldWeight = _weight;\n', '        } catch {\n', '          oldWeight = 0;\n', '        }\n', '      }\n', '      uint256 newWeight = bmul(bdiv(newTokenValues[i], newTokenValueSum), totalWeight);\n', '      weightsChange[i] = [i, oldWeight, newWeight];\n', '    }\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 wps = getWeightPerSecond(weightsChange[i][1], weightsChange[i][2], fromTimestamp, toTimestamp);\n', '      if (wps >= _minWPS) {\n', '        lenToPush++;\n', '      }\n', '    }\n', '\n', '    if (lenToPush > 1) {\n', '      _sort(weightsChange);\n', '    }\n', '  }\n', '\n', '  function getWeightPerSecond(\n', '    uint256 fromDenorm,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) public pure returns (uint256) {\n', '    uint256 delta = targetDenorm > fromDenorm ? bsub(targetDenorm, fromDenorm) : bsub(fromDenorm, targetDenorm);\n', '    return div(delta, bsub(targetTimestamp, fromTimestamp));\n', '  }\n', '\n', '  function _quickSort(\n', '    uint256[3][] memory wightsChange,\n', '    int256 left,\n', '    int256 right\n', '  ) internal pure {\n', '    int256 i = left;\n', '    int256 j = right;\n', '    if (i == j) return;\n', '    uint256[3] memory pivot = wightsChange[uint256(left + (right - left) / 2)];\n', '    int256 pDiff = int256(pivot[2]) - int256(pivot[1]);\n', '    while (i <= j) {\n', '      while (int256(wightsChange[uint256(i)][2]) - int256(wightsChange[uint256(i)][1]) < pDiff) i++;\n', '      while (pDiff < int256(wightsChange[uint256(j)][2]) - int256(wightsChange[uint256(j)][1])) j--;\n', '      if (i <= j) {\n', '        (wightsChange[uint256(i)], wightsChange[uint256(j)]) = (wightsChange[uint256(j)], wightsChange[uint256(i)]);\n', '        i++;\n', '        j--;\n', '      }\n', '    }\n', '    if (left < j) _quickSort(wightsChange, left, j);\n', '    if (i < right) _quickSort(wightsChange, i, right);\n', '  }\n', '\n', '  function _sort(uint256[3][] memory weightsChange) internal pure {\n', '    _quickSort(weightsChange, int256(0), int256(weightsChange.length - 1));\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/weight-strategies/WeightValueChangeRateAbstract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'abstract contract WeightValueChangeRateAbstract is WeightValueAbstract {\n', '  mapping(address => uint256) public lastValue;\n', '  mapping(address => uint256) public valueChangeRate;\n', '\n', '  bool public rateChangeDisabled;\n', '\n', '  event UpdatePoolTokenValue(\n', '    address indexed token,\n', '    uint256 oldTokenValue,\n', '    uint256 newTokenValue,\n', '    uint256 lastChangeRate,\n', '    uint256 newChangeRate\n', '  );\n', '  event SetValueChangeRate(address indexed token, uint256 oldRate, uint256 newRate);\n', '  event SetRateChangeDisabled(bool rateChangeDisabled);\n', '\n', '  constructor() public WeightValueAbstract() {}\n', '\n', '  function _updatePoolByPoke(address _pool, address[] memory _tokens) internal {\n', '    uint256 len = _tokens.length;\n', '    uint256[] memory newTokenValues = new uint256[](len);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 oldValue = lastValue[_tokens[i]];\n', '      newTokenValues[i] = getTVL(PowerIndexPoolInterface(_pool), _tokens[i]);\n', '      lastValue[_tokens[i]] = newTokenValues[i];\n', '\n', '      uint256 lastChangeRate;\n', '      (lastChangeRate, valueChangeRate[_tokens[i]]) = getValueChangeRate(_tokens[i], oldValue, newTokenValues[i]);\n', '\n', '      emit UpdatePoolTokenValue(_tokens[i], oldValue, newTokenValues[i], lastChangeRate, valueChangeRate[_tokens[i]]);\n', '    }\n', '  }\n', '\n', '  function getValueChangeRate(\n', '    address _token,\n', '    uint256 oldTokenValue,\n', '    uint256 newTokenValue\n', '  ) public view returns (uint256 lastChangeRate, uint256 newChangeRate) {\n', '    lastChangeRate = valueChangeRate[_token] == 0 ? 1 ether : valueChangeRate[_token];\n', '    if (oldTokenValue == 0) {\n', '      newChangeRate = lastChangeRate;\n', '      return (lastChangeRate, newChangeRate);\n', '    }\n', '    newChangeRate = rateChangeDisabled ? lastChangeRate : bmul(bdiv(newTokenValue, oldTokenValue), lastChangeRate);\n', '  }\n', '\n', '  function getTokenValue(PowerIndexPoolInterface _pool, address _token)\n', '    public\n', '    view\n', '    virtual\n', '    override\n', '    returns (uint256 value)\n', '  {\n', '    value = getTVL(_pool, _token);\n', '    (, uint256 newValueChangeRate) = getValueChangeRate(_token, lastValue[_token], value);\n', '    if (newValueChangeRate != 0) {\n', '      value = bmul(value, newValueChangeRate);\n', '    }\n', '  }\n', '\n', '  function setValueChangeRates(address[] memory _tokens, uint256[] memory _newTokenRates) public onlyOwner {\n', '    uint256 len = _tokens.length;\n', '    require(len == _newTokenRates.length, "LENGTHS_MISMATCH");\n', '    for (uint256 i = 0; i < len; i++) {\n', '      emit SetValueChangeRate(_tokens[i], valueChangeRate[_tokens[i]], _newTokenRates[i]);\n', '\n', '      valueChangeRate[_tokens[i]] = _newTokenRates[i];\n', '    }\n', '  }\n', '\n', '  function setRateUpdateDisabled(bool _disabled) public onlyOwner {\n', '    rateChangeDisabled = _disabled;\n', '    emit SetRateChangeDisabled(rateChangeDisabled);\n', '  }\n', '}\n', '\n', '// File: contracts/weight-strategies/YearnVaultInstantRebindStrategy.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract YearnVaultInstantRebindStrategy is SinglePoolManagement, WeightValueChangeRateAbstract {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  uint256 internal constant COMPENSATION_PLAN_1_ID = 1;\n', '\n', '  event ChangePoolTokens(address[] poolTokensBefore, address[] poolTokensAfter);\n', '  event InstantRebind(uint256 poolCurrentTokensCount, uint256 usdcPulled, uint256 usdcRemainder);\n', '  event UpdatePool(address[] poolTokensBefore, address[] poolTokensAfter);\n', '  event VaultWithdrawFee(address indexed vaultToken, uint256 crvAmount);\n', '  event SeizeERC20(address indexed token, address indexed to, uint256 amount);\n', '  event SetMaxWithdrawalLoss(uint256 maxWithdrawalLoss);\n', '  event SetMinPulledUSDC(uint256 minPulledUSDC);\n', '\n', '  event PullLiquidity(\n', '    address indexed vaultToken,\n', '    address crvToken,\n', '    uint256 vaultAmount,\n', '    uint256 crvAmountExpected,\n', '    uint256 crvAmountActual,\n', '    uint256 usdcAmount,\n', '    uint256 vaultReserve\n', '  );\n', '\n', '  event PushLiquidity(\n', '    address indexed vaultToken,\n', '    address crvToken,\n', '    uint256 vaultAmount,\n', '    uint256 crvAmount,\n', '    uint256 usdcAmount\n', '  );\n', '\n', '  event SetPoolController(address indexed poolController);\n', '\n', '  event SetCurvePoolRegistry(address curvePoolRegistry);\n', '\n', '  event SetVaultConfig(\n', '    address indexed vault,\n', '    address indexed depositor,\n', '    uint8 depositorType,\n', '    uint8 depositorTokenLength,\n', '    int8 usdcIndex\n', '  );\n', '\n', '  event SetStrategyConstraints(uint256 minUSDCRemainder, bool useVirtualPriceEstimation);\n', '\n', '  struct RebindConfig {\n', '    address token;\n', '    uint256 newWeight;\n', '    uint256 oldBalance;\n', '    uint256 newBalance;\n', '  }\n', '\n', '  struct VaultConfig {\n', '    address depositor;\n', '    uint8 depositorType;\n', '    uint8 depositorTokenLength;\n', '    int8 usdcIndex;\n', '  }\n', '\n', '  struct StrategyConstraints {\n', '    uint256 minUSDCRemainder;\n', '    bool useVirtualPriceEstimation;\n', '  }\n', '\n', '  struct PullDataHelper {\n', '    address crvToken;\n', '    uint256 yDiff;\n', '    uint256 ycrvBalance;\n', '    uint256 crvExpected;\n', '    uint256 crvActual;\n', '    uint256 usdcBefore;\n', '    uint256 vaultReserve;\n', '  }\n', '\n', '  IERC20 public immutable USDC;\n', '\n', '  IPowerPoke public powerPoke;\n', '  ICurvePoolRegistry public curvePoolRegistry;\n', '  uint256 public lastUpdate;\n', '  uint256 public maxWithdrawalLoss;\n', '\n', '  StrategyConstraints public constraints;\n', '\n', '  address[] internal poolTokens;\n', '  mapping(address => VaultConfig) public vaultConfig;\n', '\n', '  uint256 public minPulledUSDC;\n', '\n', '  modifier onlyEOA() {\n', '    require(msg.sender == tx.origin, "ONLY_EOA");\n', '    _;\n', '  }\n', '\n', '  modifier onlyReporter(uint256 _reporterId, bytes calldata _rewardOpts) {\n', '    uint256 gasStart = gasleft();\n', '    powerPoke.authorizeReporter(_reporterId, msg.sender);\n', '    _;\n', '    _reward(_reporterId, gasStart, COMPENSATION_PLAN_1_ID, _rewardOpts);\n', '  }\n', '\n', '  modifier onlyNonReporter(uint256 _reporterId, bytes calldata _rewardOpts) {\n', '    uint256 gasStart = gasleft();\n', '    powerPoke.authorizeNonReporter(_reporterId, msg.sender);\n', '    _;\n', '    _reward(_reporterId, gasStart, COMPENSATION_PLAN_1_ID, _rewardOpts);\n', '  }\n', '\n', '  constructor(address _pool, address _usdc) public SinglePoolManagement(_pool) OwnableUpgradeSafe() {\n', '    USDC = IERC20(_usdc);\n', '  }\n', '\n', '  function initialize(\n', '    address _powerPoke,\n', '    address _curvePoolRegistry,\n', '    address _poolController,\n', '    uint256 _maxWithdrawalLoss,\n', '    StrategyConstraints memory _constraints\n', '  ) external initializer {\n', '    __Ownable_init();\n', '\n', '    __SinglePoolManagement_init(_poolController);\n', '\n', '    maxWithdrawalLoss = _maxWithdrawalLoss;\n', '    powerPoke = IPowerPoke(_powerPoke);\n', '    curvePoolRegistry = ICurvePoolRegistry(_curvePoolRegistry);\n', '    constraints = _constraints;\n', '    totalWeight = 25 * BONE;\n', '  }\n', '\n', '  /*** GETTERS ***/\n', '  function getTVL(PowerIndexPoolInterface, address _token) public view override returns (uint256) {\n', '    return getVaultVirtualPriceEstimation(_token, IYearnVaultV2(_token).totalAssets());\n', '  }\n', '\n', '  function getVaultVirtualPriceEstimation(address _token, uint256 _amount) public view returns (uint256) {\n', '    return\n', '      bmul(\n', '        ICurvePoolRegistry(curvePoolRegistry).get_virtual_price_from_lp_token(IYearnVaultV2(_token).token()),\n', '        _amount\n', '      );\n', '  }\n', '\n', '  function getVaultUsdcEstimation(\n', '    address _token,\n', '    address _crvToken,\n', '    uint256 _amount\n', '  ) public returns (uint256) {\n', '    VaultConfig memory vc = vaultConfig[_token];\n', '    if (vc.depositorType == 2) {\n', '      return ICurveZapDepositor(vc.depositor).calc_withdraw_one_coin(_crvToken, _amount, int128(vc.usdcIndex));\n', '    } else {\n', '      return ICurveDepositor(vc.depositor).calc_withdraw_one_coin(_amount, int128(vc.usdcIndex));\n', '    }\n', '  }\n', '\n', '  function getPoolTokens() public view returns (address[] memory) {\n', '    return poolTokens;\n', '  }\n', '\n', "  /*** OWNER'S SETTERS ***/\n", '  function setCurvePoolRegistry(address _curvePoolRegistry) external onlyOwner {\n', '    curvePoolRegistry = ICurvePoolRegistry(_curvePoolRegistry);\n', '    emit SetCurvePoolRegistry(_curvePoolRegistry);\n', '  }\n', '\n', '  function setVaultConfig(\n', '    address _vault,\n', '    address _depositor,\n', '    uint8 _depositorType,\n', '    uint8 _depositorTokenLength,\n', '    int8 _usdcIndex\n', '  ) external onlyOwner {\n', '    vaultConfig[_vault] = VaultConfig(_depositor, _depositorType, _depositorTokenLength, _usdcIndex);\n', '    IERC20 crvToken = IERC20(IYearnVaultV2(_vault).token());\n', '    _checkApprove(USDC.approve(_depositor, uint256(-1)));\n', '    _checkApprove(crvToken.approve(_vault, uint256(-1)));\n', '    _checkApprove(crvToken.approve(_depositor, uint256(-1)));\n', '    emit SetVaultConfig(_vault, _depositor, _depositorType, _depositorTokenLength, _usdcIndex);\n', '  }\n', '\n', '  function setPoolController(address _poolController) public onlyOwner {\n', '    poolController = _poolController;\n', '    _updatePool(poolController, _poolController);\n', '    emit SetPoolController(_poolController);\n', '  }\n', '\n', '  function syncPoolTokens() external onlyOwner {\n', '    address controller = poolController;\n', '    _updatePool(controller, controller);\n', '  }\n', '\n', '  function setMaxWithdrawalLoss(uint256 _maxWithdrawalLoss) external onlyOwner {\n', '    maxWithdrawalLoss = _maxWithdrawalLoss;\n', '    emit SetMaxWithdrawalLoss(_maxWithdrawalLoss);\n', '  }\n', '\n', '  function setMinPulledUSDC(uint256 _minPulledUSDC) external onlyOwner {\n', '    minPulledUSDC = _minPulledUSDC;\n', '    emit SetMinPulledUSDC(_minPulledUSDC);\n', '  }\n', '\n', '  function removeApprovals(IERC20[] calldata _tokens, address[] calldata _tos) external onlyOwner {\n', '    uint256 len = _tokens.length;\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _checkApprove(_tokens[i].approve(_tos[i], uint256(0)));\n', '    }\n', '  }\n', '\n', '  function seizeERC20(\n', '    address[] calldata _tokens,\n', '    address[] calldata _tos,\n', '    uint256[] calldata _amounts\n', '  ) external onlyOwner {\n', '    uint256 len = _tokens.length;\n', '    require(len == _tos.length && len == _amounts.length, "LENGTHS");\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      IERC20(_tokens[i]).safeTransfer(_tos[i], _amounts[i]);\n', '      emit SeizeERC20(_tokens[i], _tos[i], _amounts[i]);\n', '    }\n', '  }\n', '\n', '  function setStrategyConstraints(StrategyConstraints memory _constraints) external onlyOwner {\n', '    constraints = _constraints;\n', '    emit SetStrategyConstraints(_constraints.minUSDCRemainder, _constraints.useVirtualPriceEstimation);\n', '  }\n', '\n', '  function _checkApprove(bool _result) internal {\n', '    require(_result, "APPROVE_FAILED");\n', '  }\n', '\n', '  function _updatePool(address _oldController, address _newController) internal {\n', '    address[] memory poolTokensBefore = poolTokens;\n', '    uint256 len = poolTokensBefore.length;\n', '\n', '    if (_oldController != address(0)) {\n', '      // remove approval\n', '      for (uint256 i = 0; i < len; i++) {\n', '        _removeApprovalVault(poolTokensBefore[i], address(_oldController));\n', '      }\n', '    }\n', '\n', '    address[] memory poolTokensAfter = PowerIndexPoolInterface(pool).getCurrentTokens();\n', '    poolTokens = poolTokensAfter;\n', '\n', '    // approve\n', '    len = poolTokensAfter.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _approveVault(poolTokensAfter[i], address(_newController));\n', '    }\n', '\n', '    emit UpdatePool(poolTokensBefore, poolTokensAfter);\n', '  }\n', '\n', '  function _approveVault(address _vaultToken, address _controller) internal {\n', '    IERC20 vaultToken = IERC20(_vaultToken);\n', '    _checkApprove(vaultToken.approve(pool, uint256(-1)));\n', '    _checkApprove(vaultToken.approve(_controller, uint256(-1)));\n', '  }\n', '\n', '  function _removeApprovalVault(address _vaultToken, address _controller) internal {\n', '    IERC20 vaultToken = IERC20(_vaultToken);\n', '    _checkApprove(vaultToken.approve(pool, uint256(0)));\n', '    _checkApprove(vaultToken.approve(_controller, uint256(0)));\n', '  }\n', '\n', '  function changePoolTokens(address[] memory _newTokens) external onlyOwner {\n', '    address[] memory _currentTokens = BPoolInterface(pool).getCurrentTokens();\n', '    uint256 cLen = _currentTokens.length;\n', '    uint256 nLen = _newTokens.length;\n', '    for (uint256 i = 0; i < cLen; i++) {\n', '      bool existsInNewTokens = false;\n', '      for (uint256 j = 0; j < nLen; j++) {\n', '        if (_currentTokens[i] == _newTokens[j]) {\n', '          existsInNewTokens = true;\n', '        }\n', '      }\n', '      if (!existsInNewTokens) {\n', '        PowerIndexPoolControllerInterface(poolController).unbindByStrategy(_currentTokens[i]);\n', '        _vaultToUsdc(_currentTokens[i], IYearnVaultV2(_currentTokens[i]).token(), vaultConfig[_currentTokens[i]]);\n', '        _removeApprovalVault(_currentTokens[i], address(poolController));\n', '      }\n', '    }\n', '\n', '    for (uint256 j = 0; j < nLen; j++) {\n', '      if (!BPoolInterface(pool).isBound(_newTokens[j])) {\n', '        _approveVault(_newTokens[j], address(poolController));\n', '      }\n', '    }\n', '\n', '    _instantRebind(_newTokens, true);\n', '\n', '    emit ChangePoolTokens(_currentTokens, _newTokens);\n', '  }\n', '\n', '  /*** POKERS ***/\n', '  function pokeFromReporter(uint256 _reporterId, bytes calldata _rewardOpts)\n', '    external\n', '    onlyReporter(_reporterId, _rewardOpts)\n', '    onlyEOA\n', '  {\n', '    _poke(false);\n', '  }\n', '\n', '  function pokeFromSlasher(uint256 _reporterId, bytes calldata _rewardOpts)\n', '    external\n', '    onlyNonReporter(_reporterId, _rewardOpts)\n', '    onlyEOA\n', '  {\n', '    _poke(true);\n', '  }\n', '\n', '  function _poke(bool _bySlasher) internal {\n', '    (uint256 minInterval, uint256 maxInterval) = _getMinMaxReportInterval();\n', '    require(lastUpdate + minInterval < block.timestamp, "MIN_INTERVAL_NOT_REACHED");\n', '    if (_bySlasher) {\n', '      require(lastUpdate + maxInterval < block.timestamp, "MAX_INTERVAL_NOT_REACHED");\n', '    }\n', '    lastUpdate = block.timestamp;\n', '\n', '    _instantRebind(BPoolInterface(pool).getCurrentTokens(), false);\n', '  }\n', '\n', '  function _vaultToUsdc(\n', '    address _token,\n', '    address _crvToken,\n', '    VaultConfig memory _vc\n', '  )\n', '    internal\n', '    returns (\n', '      uint256 crvBalance,\n', '      uint256 crvReceived,\n', '      uint256 usdcBefore\n', '    )\n', '  {\n', '    crvBalance = IERC20(_token).balanceOf(address(this));\n', '    uint256 crvBefore = IERC20(_crvToken).balanceOf(address(this));\n', '\n', '    IYearnVaultV2(_token).withdraw(crvBalance, address(this), maxWithdrawalLoss);\n', '    crvReceived = IERC20(_crvToken).balanceOf(address(this)).sub(crvBefore);\n', '\n', '    usdcBefore = USDC.balanceOf(address(this));\n', '    if (_vc.depositorType == 2) {\n', '      ICurveZapDepositor(_vc.depositor).remove_liquidity_one_coin(_crvToken, crvReceived, _vc.usdcIndex, 0);\n', '    } else {\n', '      ICurveDepositor(_vc.depositor).remove_liquidity_one_coin(crvReceived, _vc.usdcIndex, 0);\n', '    }\n', '  }\n', '\n', '  function _usdcToVault(\n', '    address _token,\n', '    VaultConfig memory _vc,\n', '    uint256 _usdcAmount\n', '  )\n', '    internal\n', '    returns (\n', '      uint256 crvBalance,\n', '      uint256 vaultBalance,\n', '      address crvToken\n', '    )\n', '  {\n', '    crvToken = IYearnVaultV2(_token).token();\n', '\n', '    _addUSDC2CurvePool(crvToken, _vc, _usdcAmount);\n', '\n', '    // 2nd step. Vault.deposit()\n', '    crvBalance = IERC20(crvToken).balanceOf(address(this));\n', '    IYearnVaultV2(_token).deposit(crvBalance);\n', '\n', '    // 3rd step. Rebind\n', '    vaultBalance = IERC20(_token).balanceOf(address(this));\n', '  }\n', '\n', '  function _instantRebind(address[] memory _tokens, bool _allowNotBound) internal {\n', '    address poolController_ = poolController;\n', '    require(poolController_ != address(0), "CFG_NOT_SET");\n', '\n', '    RebindConfig[] memory configs = fetchRebindConfigs(PowerIndexPoolInterface(pool), _tokens, _allowNotBound);\n', '\n', '    uint256 toPushUSDCTotal;\n', '    uint256 len = configs.length;\n', '    uint256[] memory toPushUSDC = new uint256[](len);\n', '    VaultConfig[] memory vaultConfigs = new VaultConfig[](len);\n', '\n', '    for (uint256 si = 0; si < len; si++) {\n', '      RebindConfig memory cfg = configs[si];\n', '      VaultConfig memory vc = vaultConfig[cfg.token];\n', '      vaultConfigs[si] = vc;\n', '      require(vc.depositor != address(0), "DEPOSIT_CONTRACT_NOT_SET");\n', '\n', '      if (cfg.newBalance <= cfg.oldBalance) {\n', '        PullDataHelper memory mem;\n', '        mem.crvToken = IYearnVaultV2(cfg.token).token();\n', '        mem.vaultReserve = IERC20(mem.crvToken).balanceOf(cfg.token);\n', '\n', '        mem.yDiff = (cfg.oldBalance - cfg.newBalance);\n', '\n', '        // 1st step. Rebind\n', '        PowerIndexPoolControllerInterface(poolController_).rebindByStrategyRemove(\n', '          cfg.token,\n', '          cfg.newBalance,\n', '          cfg.newWeight\n', '        );\n', '\n', '        // 3rd step. CurvePool.remove_liquidity_one_coin()\n', '        (mem.ycrvBalance, mem.crvActual, mem.usdcBefore) = _vaultToUsdc(cfg.token, mem.crvToken, vc);\n', '\n', '        // 2nd step. Vault.withdraw()\n', '        mem.crvExpected = bmul(mem.ycrvBalance, IYearnVaultV2(cfg.token).pricePerShare());\n', '\n', '        emit PullLiquidity(\n', '          cfg.token,\n', '          mem.crvToken,\n', '          mem.yDiff,\n', '          mem.crvExpected,\n', '          mem.crvActual,\n', '          USDC.balanceOf(address(this)) - mem.usdcBefore,\n', '          mem.vaultReserve\n', '        );\n', '      } else {\n', '        uint256 yDiff = cfg.newBalance - cfg.oldBalance;\n', '        uint256 crvAmount = IYearnVaultV2(cfg.token).pricePerShare().mul(yDiff) / 1e18;\n', '        uint256 usdcIn;\n', '\n', '        address crvToken = IYearnVaultV2(cfg.token).token();\n', '        if (constraints.useVirtualPriceEstimation) {\n', '          uint256 virtualPrice = ICurvePoolRegistry(curvePoolRegistry).get_virtual_price_from_lp_token(crvToken);\n', '          // usdcIn = virtualPrice * crvAmount / 1e18\n', '          usdcIn = bmul(virtualPrice, crvAmount);\n', '        } else {\n', '          usdcIn = getVaultUsdcEstimation(cfg.token, crvToken, crvAmount);\n', '        }\n', '\n', '        // toPushUSDCTotal += usdcIn;\n', '        toPushUSDCTotal = toPushUSDCTotal.add(usdcIn);\n', '        toPushUSDC[si] = usdcIn;\n', '      }\n', '    }\n', '\n', '    uint256 usdcPulled = USDC.balanceOf(address(this));\n', '    require(usdcPulled > minPulledUSDC, "USDC_PULLED_NOT_ENOUGH");\n', '\n', '    for (uint256 si = 0; si < len; si++) {\n', '      if (toPushUSDC[si] > 0) {\n', '        RebindConfig memory cfg = configs[si];\n', '\n', '        // 1st step. Add USDC to Curve pool\n', '        // uint256 usdcAmount = (usdcPulled * toPushUSDC[si]) / toPushUSDCTotal;\n', '        uint256 usdcAmount = (usdcPulled.mul(toPushUSDC[si])) / toPushUSDCTotal;\n', '\n', '        (uint256 crvBalance, uint256 vaultBalance, address crvToken) =\n', '          _usdcToVault(cfg.token, vaultConfigs[si], usdcAmount);\n', '\n', '        // uint256 newBalance = IERC20(cfg.token).balanceOf(address(this)) + BPoolInterface(_pool).getBalance(cfg.token)\n', '        uint256 newBalance;\n', '        try BPoolInterface(pool).getBalance(cfg.token) returns (uint256 _poolBalance) {\n', '          newBalance = IERC20(cfg.token).balanceOf(address(this)).add(_poolBalance);\n', '        } catch {\n', '          newBalance = IERC20(cfg.token).balanceOf(address(this));\n', '        }\n', '        if (cfg.oldBalance == 0) {\n', '          require(_allowNotBound, "BIND_NOT_ALLOW");\n', '          PowerIndexPoolControllerInterface(poolController_).bindByStrategy(cfg.token, newBalance, cfg.newWeight);\n', '        } else {\n', '          PowerIndexPoolControllerInterface(poolController_).rebindByStrategyAdd(\n', '            cfg.token,\n', '            newBalance,\n', '            cfg.newWeight,\n', '            vaultBalance\n', '          );\n', '        }\n', '        emit PushLiquidity(cfg.token, crvToken, vaultBalance, crvBalance, usdcAmount);\n', '      }\n', '    }\n', '\n', '    uint256 usdcRemainder = USDC.balanceOf(address(this));\n', '    require(usdcRemainder <= constraints.minUSDCRemainder, "USDC_REMAINDER");\n', '\n', '    emit InstantRebind(len, usdcPulled, usdcRemainder);\n', '  }\n', '\n', '  function fetchRebindConfigs(\n', '    PowerIndexPoolInterface _pool,\n', '    address[] memory _tokens,\n', '    bool _allowNotBound\n', '  ) internal returns (RebindConfig[] memory configs) {\n', '    uint256 len = _tokens.length;\n', '    (uint256[] memory oldBalances, uint256[] memory vaultUSDCPrices, uint256 totalUSDCPool) =\n', '      getRebindConfigBalances(_pool, _tokens);\n', '\n', '    (uint256[3][] memory weightsChange, , , uint256 totalValueUSDC) =\n', '      computeWeightsChange(_pool, _tokens, new address[](0), 0, block.timestamp, block.timestamp + 1);\n', '\n', '    configs = new RebindConfig[](len);\n', '\n', '    for (uint256 si = 0; si < len; si++) {\n', '      uint256[3] memory wc = weightsChange[si];\n', '      require(wc[1] != 0 || _allowNotBound, "TOKEN_NOT_BOUND");\n', '\n', '      configs[si] = RebindConfig(\n', '        _tokens[wc[0]],\n', '        // (totalWeight * newTokenValuesUSDC[oi]) / totalValueUSDC,\n', '        wc[2],\n', '        oldBalances[wc[0]],\n', '        // (totalUSDCPool * weight / totalWeight) / vaultUSDCPrice)\n', '        bdiv(bdiv(bmul(totalUSDCPool, wc[2]), totalWeight), vaultUSDCPrices[wc[0]])\n', '      );\n', '    }\n', '\n', '    _updatePoolByPoke(pool, _tokens);\n', '  }\n', '\n', '  function getRebindConfigBalances(PowerIndexPoolInterface _pool, address[] memory _tokens)\n', '    internal\n', '    returns (\n', '      uint256[] memory oldBalances,\n', '      uint256[] memory vaultUSDCPrices,\n', '      uint256 totalUSDCPool\n', '    )\n', '  {\n', '    uint256 len = _tokens.length;\n', '    oldBalances = new uint256[](len);\n', '    vaultUSDCPrices = new uint256[](len);\n', '    totalUSDCPool = USDC.balanceOf(address(this)) * 1e12;\n', '\n', '    for (uint256 oi = 0; oi < len; oi++) {\n', '      uint256 vaultUSDCPrice =\n', '        bdiv(\n', '          getVaultVirtualPriceEstimation(_tokens[oi], IYearnVaultV2(_tokens[oi]).totalAssets()),\n', '          IERC20(_tokens[oi]).totalSupply()\n', '        );\n', '\n', '      try PowerIndexPoolInterface(address(_pool)).getBalance(_tokens[oi]) returns (uint256 _balance) {\n', '        oldBalances[oi] = _balance;\n', '        totalUSDCPool = totalUSDCPool.add(bmul(oldBalances[oi], vaultUSDCPrice));\n', '      } catch {\n', '        oldBalances[oi] = 0;\n', '      }\n', '      vaultUSDCPrices[oi] = vaultUSDCPrice;\n', '    }\n', '  }\n', '\n', '  function _addUSDC2CurvePool(\n', '    address _crvToken,\n', '    VaultConfig memory _vc,\n', '    uint256 _usdcAmount\n', '  ) internal {\n', '    if (_vc.depositorTokenLength == 2) {\n', '      uint256[2] memory amounts;\n', '      amounts[uint256(_vc.usdcIndex)] = _usdcAmount;\n', '      if (_vc.depositorType == 2) {\n', '        ICurveZapDepositor2(_vc.depositor).add_liquidity(_crvToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor2(_vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '\n', '    if (_vc.depositorTokenLength == 3) {\n', '      uint256[3] memory amounts;\n', '      amounts[uint256(_vc.usdcIndex)] = _usdcAmount;\n', '      if (_vc.depositorType == 2) {\n', '        ICurveZapDepositor3(_vc.depositor).add_liquidity(_crvToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor3(_vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '\n', '    if (_vc.depositorTokenLength == 4) {\n', '      uint256[4] memory amounts;\n', '      amounts[uint256(_vc.usdcIndex)] = _usdcAmount;\n', '      if (_vc.depositorType == 2) {\n', '        ICurveZapDepositor4(_vc.depositor).add_liquidity(_crvToken, amounts, 1);\n', '      } else {\n', '        ICurveDepositor4(_vc.depositor).add_liquidity(amounts, 1);\n', '      }\n', '    }\n', '  }\n', '\n', '  function _reward(\n', '    uint256 _reporterId,\n', '    uint256 _gasStart,\n', '    uint256 _compensationPlan,\n', '    bytes calldata _rewardOpts\n', '  ) internal {\n', '    powerPoke.reward(_reporterId, bsub(_gasStart, gasleft()), _compensationPlan, _rewardOpts);\n', '  }\n', '\n', '  function _getMinMaxReportInterval() internal view returns (uint256 min, uint256 max) {\n', '    (uint256 minInterval, uint256 maxInterval) = powerPoke.getMinMaxReportIntervals(address(this));\n', '    require(minInterval > 0 && maxInterval > 0, "INTERVALS_ARE_0");\n', '    return (minInterval, maxInterval);\n', '  }\n', '}']