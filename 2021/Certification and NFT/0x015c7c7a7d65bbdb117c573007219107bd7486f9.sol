['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', 'pragma solidity 0.6.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal virtual {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/* \n', ' * @author Patrick McCorry & Chris Buckland (ITX)\n', ' * @title Payment Deposit contract\n', ' * @notice Handles customers deposits and only the owner/child contracts can issue withdraws. \n', ' */\n', 'contract PaymentDeposit is Ownable {\n', '\n', '    // Every depositor has a unique identifier. Helps with off-chain tracking. \n', '    mapping(address => uint) public depositors;\n', '    uint public uniqueDepositors; \n', '\n', '    event Deposit(address indexed sender, uint amount, uint indexed index);\n', '    event Withdraw(address indexed depositor, address indexed recipient, uint amount);\n', '\n', '    /**\n', '     * @param _recipient Associate funds with this address. \n', '     * Supply a deposit for a specified recipient.\n', '     * Caution: The recipient must be an externally owned account as all jobs sent to \n', '     * any.sender must be signed and associated with a positive balance in this contract. \n', '     */\n', '    function depositFor(address _recipient) public payable { \n', '        require(msg.value > 0, "No value provided to depositFor.");\n', '        uint index = getDepositorIndex(_recipient);\n', '        emit Deposit(_recipient, msg.value, index);\n', '    }\n', '\n', '    /** \n', '     * @param _depositor Depositor address\n', '     * Sets the depositors index if necessary.\n', '     */\n', '    function getDepositorIndex(address _depositor) internal returns(uint) {\n', '        if(depositors[_depositor] == 0) {\n', '            uniqueDepositors = uniqueDepositors + 1;\n', '            depositors[_depositor] = uniqueDepositors;\n', '        }\n', '\n', '        return depositors[_depositor];\n', '    }\n', '\n', '    /*\n', '     * It is only intended for external users who want to deposit via a wallet.\n', '     */ \n', '    receive() external payable {\n', '        require(msg.value > 0, "No value provided to fallback.");\n', '        require(tx.origin == msg.sender, "Only EOA can deposit directly.");\n', '        uint index = getDepositorIndex(msg.sender);\n', '        emit Deposit(msg.sender, msg.value, index);\n', '    }\n', '\n', '    /**\n', '     * Internal function for sending funds. \n', '     */\n', '    function withdraw(address payable _depositor, address payable _recipient, uint _amount) internal {\n', '        _recipient.transfer(_amount);\n', '        emit Withdraw(_depositor, _recipient, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _depositor Funds being withdrawn from (e.g. deducts their balance). \n', '     * @param _recipient Receiver of the funds\n', '     * @param _amount Funds to send\n', '     * Move funds out of the contract\n', '     * Depositor is the OWNER of the funds being withdrawn. \n', '     * Recipient is the RECEIVER of the funds. \n', '     */\n', '    function withdrawFor(address payable _depositor, address payable _recipient, uint _amount) public onlyOwner {\n', '        withdraw(_depositor, _recipient, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _recipient Address that receives funds in the new PaymentDeposit\n', '     * @param _amount Funds to send\n', '     * @param _otherDeposit New Payment Deposit contract\n', "     * Use admin privileges to migrate a user's deposits to another deposit contract\n", '     */\n', '    function migrate(address payable _recipient, uint _amount, PaymentDeposit _otherDeposit) public onlyOwner {\n', '        require(address(this).balance >= _amount, "Not enough balance to migrate.");\n', '        require(address(_otherDeposit) != address(this), "Cannot migrate to same contract.");\n', '        _otherDeposit.depositFor.value(_amount)(_recipient); // We assume an upgraded contract has this interface.\n', '        emit Withdraw(address(this), _recipient, _amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @author Patrick McCorry & Chris Buckland (ITX)\n', ' * @title Relayer Manager contract\n', ' * @notice  Manage relayers and issue topups \n', ' */\n', 'contract RelayerManager is PaymentDeposit {\n', '\n', '    mapping(address => bool) public relayers;\n', '\n', '    event RelayerInstalled(address relayer);\n', '    event RelayerUninstalled(address relayer);\n', '\n', '    modifier onlyRelayer {\n', '        require(relayers[msg.sender], "Only relayer can call this function.");\n', '        _;\n', '    }\n', '\n', '    /** \n', '     * @param newOwner Owner of contract\n', '     * @dev Owner cannot be a relayer or this contract.\n', '     */\n', '    function transferOwnership(address newOwner) public override onlyOwner { \n', '        require(!relayers[newOwner], "Relayer cannot be an owner.");\n', '        require(newOwner != address(this), "Contract cannot own itself.");\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @param _relayer New relayer address\n', '     * @dev Only the owner can install a new relayer\n', '     */\n', '    function installRelayer(address _relayer) onlyOwner public {\n', '        require(!relayers[_relayer], "Relayer is already installed.");\n', '        require(_relayer != address(this), "The relay contract cannot be installed as a relayer.");\n', '        require(_relayer != owner(), "Avoid mixing relayer and owner roles.");\n', '\n', '        relayers[_relayer] = true;\n', '        emit RelayerInstalled(_relayer);\n', '    }\n', '\n', '    /** \n', '     * @param _relayer New relayer address\n', '     * @dev Only the owner can uninstall a new relayer\n', '     */ \n', '    function uninstallRelayer(address _relayer) onlyOwner public {\n', '        require(relayers[_relayer], "Relayer must be installed.");\n', '\n', '        relayers[_relayer] = false;\n', '        emit RelayerUninstalled(_relayer);\n', '    }\n', '\n', '\n', '    /** \n', '     * @param _recipient Receiver of the topup\n', '     * @param _maxBalance Maximum topup to send \n', '     * Called by a relayer to perform a relative top up.\n', '     * Only sends enough funds for relayer to reach max balance. \n', '     */  \n', '    function relativeTopUp(address payable _recipient, uint256 _maxBalance) public onlyRelayer {\n', '        require(relayers[_recipient], "Recipient must be a relayer to receive a top up.");\n', '        uint256 relayerBalance = address(_recipient).balance;\n', '\n', '        // The contract or relayer must be pre-collateralized with the\n', '        // max balance in advance. So if maxBalance = 3 ETH, then a new relayer\n', '        // should have a balance at or greater than 3 ETH.\n', '        if (_maxBalance > relayerBalance) {\n', '            uint256 toTopUp = _maxBalance - relayerBalance;\n', '            withdraw(msg.sender, _recipient, toTopUp);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param _recipient Receiver of the topup\n', '     * @param _topUp Funds to send\n', '     * Called by a relayer to perform an "absolute" top up.\n', '     * It can exceed the expected max balance of a relayer.\n', '     */ \n', '    function absoluteTopUp(address payable _recipient, uint256 _topUp) public onlyRelayer {\n', '        require(relayers[_recipient], "Recipient must be a relayer to receive an emergency topup.");\n', '        withdraw(msg.sender, _recipient, _topUp);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/** \n', ' * @author Patrick McCorry & Chris Buckland (ITX)\n', ' * @title Relay contract\n', ' * @notice Handles relaying transactions, managing the relayers & user deposits. \n', ' * @dev Two-stage deployment required. Deploy via CREATE2 and INIT() in the same transaction.\n', ' */\n', 'contract InstantRefundRelay is RelayerManager {\n', '    using SafeMath for uint256;\n', '\n', '    event RelayExecuted(bytes32 indexed relayTxId, bool success, address indexed to, uint gasUsed, uint gasPrice);\n', '    event OutOfCoins();\n', '\n', '    // @dev The relay transaction\n', '    struct RelayTx {\n', '        bytes32 id; // Off-chain identifier to track transaction & payment.\n', '        address to; // Address for external contract.\n', '        bytes data; // Call data that we need to send. Includes function call name, etc.\n', '        uint gasLimit; // How much gas is allocated to this function call?\n', '    }\n', '    \n', '    /** \n', '     * @param _relayTx A relay tx containing the job to execute\n', '     * @param _gasRefund Gas amount to refund\n', '     * @dev Only authorised relayer can execute relay jobs and they are refunded gas at the end of the call.\n', '     *     Critically, if the relay job fails, we can simply catch exception and continue with the refund. \n', '     */\n', '    function execute(RelayTx calldata _relayTx, uint _gasRefund) external {\n', '        uint gasStarted = gasleft();\n', '\n', '        // The msg.sender check protects against two problems:\n', '        // - Replay attacks across chains (chainid in transaction)\n', '        // - Re-entrancy attacks back into .execute() (signer required)\n', '        // - Stops external relayers spending the contract balance without any.sender authorisation\n', '        require(relayers[msg.sender], "Relayer must call this function.");\n', '\n', "        // In the worst case, the contract will only send 63/64 of the transaction's\n", '        // remaining gas due to https://eips.ethereum.org/EIPS/eip-150\n', '        // But this is problematic as outlined in https://eips.ethereum.org/EIPS/eip-1930\n', '        // so to fix... we need to make sure we supply 64/63 * gasLimit.\n', '        // Assumption: Underlying contract called did not have a minimum gas required check\n', '        // We add 1000 to cover the cost of calculating new gas limit - this should be a lot more than\n', '        // is required - measuring shows cost of 58\n', '        require(gasleft() > _relayTx.gasLimit.div(63).add(_relayTx.gasLimit).add(1000), "Not enough gas supplied.");\n', '\n', '        // execute the actual call\n', '        (bool success,) = _relayTx.to.call.gas(_relayTx.gasLimit)(_relayTx.data);\n', '\n', '        uint gasUsed = gasStarted.add(_gasRefund).sub(gasleft()); // Takes into account gas cost for refund. \n', '\n', '        if(_gasRefund > 0) {\n', '            if(!msg.sender.send(gasUsed*tx.gasprice)) {\n', '                // Notify admin we need to provide more refund to this contract\n', '                emit OutOfCoins();\n', '            }\n', '        }\n', '\n', '        emit RelayExecuted(_relayTx.id, success, _relayTx.to, gasUsed, tx.gasprice);\n', '    }\n', '}']