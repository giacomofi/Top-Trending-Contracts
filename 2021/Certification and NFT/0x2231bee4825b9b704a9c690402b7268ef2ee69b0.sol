['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library MathUpgradeable {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File interfaces/yearn/VaultApi.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient) external returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function guestList() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function setDepositLimit(uint256 limit) external;\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    function setGuestList(address guestlist) external;\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '\n', '// File interfaces/yearn/RegistryApi.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface RegistryAPI {\n', '    function governance() external view returns (address);\n', '\n', '    function latestVault(address token) external view returns (address);\n', '\n', '    function numVaults(address token) external view returns (uint256);\n', '\n', '    function vaults(address token, uint256 deploymentId) external view returns (address);\n', '}\n', '\n', '\n', '// File contracts/yearn/BaseWrapperUpgradeable.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract BaseWrapperUpgradeable is Initializable {\n', '    using MathUpgradeable for uint256;\n', '    using SafeMathUpgradeable for uint256;\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '\n', '    IERC20Upgradeable public token;\n', '\n', '    // Reduce number of external calls (SLOADs stay the same)\n', '    VaultAPI[] private _cachedVaults;\n', '\n', '    RegistryAPI public registry;\n', '\n', '    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\n', '    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\n', '    // Sentinal values used to save gas on deposit/withdraw/migrate\n', '    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\n', '    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\n', '    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\n', '    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\n', '    // VaultsAPI.depositLimit is unlimited\n', '    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\n', '\n', '    function _BaseWrapperUpgradeable_init(address _token, address _registry) internal initializer {\n', '        token = IERC20Upgradeable(_token);\n', '        // v2.registry.ychad.eth\n', '        registry = RegistryAPI(_registry);\n', '    }\n', '\n', '    function setRegistry(address _registry) external {\n', '        require(msg.sender == registry.governance());\n', '        // In case you want to override the registry instead of re-deploying\n', '        registry = RegistryAPI(_registry);\n', "        // Make sure there's no change in governance\n", '        // NOTE: Also avoid bricking the wrapper from setting a bad registry\n', '        require(msg.sender == registry.governance());\n', '    }\n', '\n', '    function bestVault() public virtual view returns (VaultAPI) {\n', '        return VaultAPI(registry.latestVault(address(token)));\n', '    }\n', '\n', '    function allVaults() public virtual view returns (VaultAPI[] memory) {\n', '        uint256 cache_length = _cachedVaults.length;\n', '        uint256 num_vaults = registry.numVaults(address(token));\n', '\n', '        // Use cached\n', '        if (cache_length == num_vaults) {\n', '            return _cachedVaults;\n', '        }\n', '\n', '        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\n', '\n', '        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\n', '            vaults[vault_id] = _cachedVaults[vault_id];\n', '        }\n', '\n', '        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\n', '            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\n', '        }\n', '\n', '        return vaults;\n', '    }\n', '\n', '    function _updateVaultCache(VaultAPI[] memory vaults) internal {\n', '        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\n', '        //       is that any future upgrades to the registry will replay the version\n', '        //       history so that this cached value does not get out of date.        if (vaults.length > _cachedVaults.length) {\n', '        if (vaults.length > _cachedVaults.length) {\n', '            _cachedVaults = vaults;\n', '        }\n', '    }\n', '\n', '    function totalVaultBalance(address account) public view returns (uint256 balance) {\n', '        VaultAPI[] memory vaults = allVaults();\n', '\n', '        for (uint256 id = 0; id < vaults.length; id++) {\n', '            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\n', '        }\n', '    }\n', '\n', '    function totalAssets() public view returns (uint256 assets) {\n', '        VaultAPI[] memory vaults = allVaults();\n', '\n', '        for (uint256 id = 0; id < vaults.length; id++) {\n', '            assets = assets.add(vaults[id].totalAssets());\n', '        }\n', '    }\n', '\n', '    function _deposit(\n', '        address depositor,\n', '        address receiver,\n', '        uint256 amount, // if `MAX_UINT256`, just deposit everything\n', '        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\n', '    ) internal returns (uint256 deposited) {\n', '        VaultAPI _bestVault = bestVault();\n', '\n', '        if (pullFunds) {\n', '            if (amount != DEPOSIT_EVERYTHING) {\n', '                token.safeTransferFrom(depositor, address(this), amount);\n', '            } else {\n', '                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\n', '            }\n', '        }\n', '\n', '        if (token.allowance(address(this), address(_bestVault)) < amount) {\n', '            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\n', '            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n', '        }\n', '\n', '        // Depositing returns number of shares deposited\n', '        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\n', '        //       number of shares credited, which helps avoid an occasional multiplication\n', '        //       overflow if trying to adjust the number of shares by the share price.\n', '        uint256 beforeBal = token.balanceOf(address(this));\n', '        if (receiver != address(this)) {\n', '            _bestVault.deposit(amount, receiver);\n', '        } else if (amount != DEPOSIT_EVERYTHING) {\n', '            _bestVault.deposit(amount);\n', '        } else {\n', '            _bestVault.deposit();\n', '        }\n', '\n', '        uint256 afterBal = token.balanceOf(address(this));\n', '        deposited = beforeBal.sub(afterBal);\n', '        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\n', '        // Issue a refund if not everything was deposited\n', '        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\n', '    }\n', '\n', '    function _withdraw(\n', '        address sender,\n', '        address receiver,\n', '        uint256 amount, // if `MAX_UINT256`, just withdraw everything\n', '        bool withdrawFromBest // If true, also withdraw from `_bestVault`\n', '    ) internal virtual returns (uint256 withdrawn) {\n', '        VaultAPI _bestVault = bestVault();\n', '\n', '        VaultAPI[] memory vaults = allVaults();\n', '        _updateVaultCache(vaults);\n', '\n', '        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\n', '        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\n', '        //       so it if there is a denial of service issue in withdrawing, the downstream usage\n', '        //       of this wrapper contract must give an alternative method of withdrawing using\n', '        //       this function so that `amount` is less than the full amount requested to withdraw\n', '        //       (e.g. "piece-wise withdrawals"), leading to less loop iterations such that the\n', '        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\n', '        for (uint256 id = 0; id < vaults.length; id++) {\n', '            if (!withdrawFromBest && vaults[id] == _bestVault) {\n', "                continue; // Don't withdraw from the best\n", '            }\n', '\n', '            // Start with the total shares that `sender` has\n', '            uint256 availableShares = vaults[id].balanceOf(sender);\n', '\n', '            // Restrict by the allowance that `sender` has to this contract\n', '            // NOTE: No need for allowance check if `sender` is this contract\n', '            if (sender != address(this)) {\n', '                availableShares = MathUpgradeable.min(availableShares, vaults[id].allowance(sender, address(this)));\n', '            }\n', '\n', '            // Limit by maximum withdrawal size from each vault\n', '            availableShares = MathUpgradeable.min(availableShares, vaults[id].maxAvailableShares());\n', '\n', '            if (availableShares > 0) {\n', '                // Intermediate step to move shares to this contract before withdrawing\n', '                // NOTE: No need for share transfer if this contract is `sender`\n', '                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\n', '\n', '                if (amount != WITHDRAW_EVERYTHING) {\n', '                    // Compute amount to withdraw fully to satisfy the request\n', '                    uint256 estimatedShares = amount\n', '                        .sub(withdrawn) // NOTE: Changes every iteration\n', '                        .mul(10**uint256(vaults[id].decimals()))\n', '                        .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\n', '\n', '                    // Limit amount to withdraw to the maximum made available to this contract\n', "                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\n", '                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\n', '                    if (estimatedShares > 0 && estimatedShares < availableShares) {\n', '                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\n', '                    } else {\n', '                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\n', '                    }\n', '                } else {\n', '                    withdrawn = withdrawn.add(vaults[id].withdraw());\n', '                }\n', '\n', '                // Check if we have fully satisfied the request\n', '                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\n', '                if (amount <= withdrawn) break; // withdrawn as much as we needed\n', '            }\n', '        }\n', '\n', '        // If we have extra, deposit back into `_bestVault` for `sender`\n', '        // NOTE: Invariant is `withdrawn <= amount`\n', '        if (withdrawn > amount) {\n', "            // Don't forget to approve the deposit\n", '            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\n', '                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n', '            }\n', '\n', '            _bestVault.deposit(withdrawn.sub(amount), sender);\n', '            withdrawn = amount;\n', '        }\n', '\n', '        // `receiver` now has `withdrawn` tokens as balance\n', '        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\n', '    }\n', '\n', '    function _migrate(address account) internal returns (uint256) {\n', '        return _migrate(account, MIGRATE_EVERYTHING);\n', '    }\n', '\n', '    function _migrate(address account, uint256 amount) internal returns (uint256) {\n', "        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\n", '        return _migrate(account, amount, 0);\n', '    }\n', '\n', '    function _migrate(\n', '        address account,\n', '        uint256 amount,\n', '        uint256 maxMigrationLoss\n', '    ) internal returns (uint256 migrated) {\n', '        VaultAPI _bestVault = bestVault();\n', '\n', "        // NOTE: Only override if we aren't migrating everything\n", '        uint256 _depositLimit = _bestVault.depositLimit();\n', '        uint256 _totalAssets = _bestVault.totalAssets();\n', '        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\n', '\n', '        uint256 _amount = amount;\n', '        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\n', '            // Can only deposit up to this amount\n', '            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\n', '            if (_amount > _depositLeft) _amount = _depositLeft;\n', '        }\n', '\n', '        if (_amount > 0) {\n', "            // NOTE: `false` = don't withdraw from `_bestVault`\n", '            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\n', '            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\n', '\n', "            // NOTE: `false` = don't do `transferFrom` because it's already local\n", '            migrated = _deposit(address(this), account, withdrawn, false);\n', '            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\n', '            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\n', '            //       value is made to be configurable to allow the user to specify how much is acceptable\n', '            require(withdrawn.sub(migrated) <= maxMigrationLoss);\n', '        } // else: nothing to migrate! (not a failure)\n', '    }\n', '}\n', '\n', '\n', '// File interfaces/yearn/GuestlistApi.sol\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface GuestListAPI {\n', '    function authorized(address guest, uint256 amount) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/yearn/AffiliateTokenGatedUpgradeable.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '/**\n', '    == Access Control ==\n', '    The Affiliate is the governance of the wrapper. It has \n', '    The manager is a representative set by governance to manage moderately sensitive operations. In this case, the sole permission is unpausing the contract.\n', '    The guardian is a representative that has pausing rights (but not unpausing). This is intended to allow for a fast response in the event of an active exploit or to prevent exploit in the case of a discovered vulnerability.\n', '\n', '    More Events\n', '    Each action emits events to faciliate easier logging and monitoring\n', ' */\n', 'contract AffiliateTokenGatedUpgradeable is ERC20Upgradeable, BaseWrapperUpgradeable, PausableUpgradeable {\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '    uint256 constant MAX_BPS = 10000;\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '\n', '    address public affiliate;\n', '\n', '    address public pendingAffiliate;\n', '\n', '    // ===== GatedUpgradeable additional parameters =====\n', '\n', '    GuestListAPI public guestList;\n', '\n', '    address public manager;\n', '\n', '    address public guardian;\n', '\n', '    uint256 public withdrawalFee;\n', '\n', '    /// @dev In experimental mode, the wrapper only deposits and withdraws from a single pre-connected vault (rather than the registry). The vault cache is not set in this mode. Once disabled, cannot be re-enabled.\n', '    bool public experimentalMode;\n', '\n', '    address public experimentalVault;\n', '\n', '    modifier onlyAffiliate() {\n', '        require(msg.sender == affiliate);\n', '        _;\n', '    }\n', '\n', '    event PendingAffiliate(address affiliate);\n', '    event AcceptAffiliate(address affiliate);\n', '    event SetGuardian(address guardian);\n', '    event SetManager(address manager);\n', '    event SetExperimentalVault(address vault);\n', '    event UpdateGuestList(address guestList);\n', '    event Deposit(address indexed account, uint256 amount);\n', '    event Withdraw(address indexed account, uint256 amount);\n', '    event WithdrawalFee(address indexed recipient, uint256 amount);\n', '    event Mint(address indexed account, uint256 shares);\n', '    event Burn(address indexed account, uint256 shares);\n', '\n', '    function initialize(\n', '        address _token,\n', '        address _registry,\n', '        string memory name,\n', '        string memory symbol,\n', '        address _guardian\n', '    ) external initializer {\n', '        _BaseWrapperUpgradeable_init(_token, _registry);\n', '        __ERC20_init(name, symbol);\n', '\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes("1")), _getChainId(), address(this)));\n', '        affiliate = msg.sender;\n', '        guardian = _guardian;\n', '        _setupDecimals(uint8(ERC20Upgradeable(address(token)).decimals()));\n', '\n', '        emit AcceptAffiliate(affiliate);\n', '        emit SetGuardian(guardian);\n', '    }\n', '\n', '    function bestVault() public override view returns (VaultAPI) {\n', '        if (experimentalMode) {\n', '            return VaultAPI(experimentalVault);\n', '        } else {\n', '            return super.bestVault();\n', '        }\n', '    }\n', '\n', '    function allVaults() public override view returns (VaultAPI[] memory) {\n', '        if (experimentalMode) {\n', '            VaultAPI[] memory vaults = new VaultAPI[](1);\n', '            vaults[0] = VaultAPI(experimentalVault);\n', '            return vaults;\n', '        } else {\n', '            return super.allVaults();\n', '        }\n', '    }\n', '\n', '    function setExperimentalVault(address _experimentalVault) external onlyAffiliate {\n', '        require(experimentalVault == address(0)); // Can only be set once\n', '        experimentalMode = true;\n', '        experimentalVault = _experimentalVault;\n', '\n', '        emit SetExperimentalVault(experimentalVault);\n', '    }\n', '\n', '    function disableExperimentalMode() external onlyAffiliate {\n', '        experimentalMode = false;\n', '    }\n', '\n', '    function _getChainId() internal view returns (uint256) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '\n', '    // ===== Access Control Setters =====\n', '    function setAffiliate(address _affiliate) external onlyAffiliate {\n', '        pendingAffiliate = _affiliate;\n', '\n', '        emit PendingAffiliate(pendingAffiliate);\n', '    }\n', '\n', '    function acceptAffiliate() external {\n', '        require(msg.sender == pendingAffiliate);\n', '        affiliate = msg.sender;\n', '\n', '        emit AcceptAffiliate(affiliate);\n', '    }\n', '\n', '    function setGuardian(address _guardian) external onlyAffiliate {\n', '        guardian = _guardian;\n', '\n', '        emit SetGuardian(guardian);\n', '    }\n', '\n', '    function setManager(address _manager) external onlyAffiliate {\n', '        manager = _manager;\n', '\n', '        emit SetManager(manager);\n', '    }\n', '\n', '    function setGuestList(address _guestList) external onlyAffiliate {\n', '        guestList = GuestListAPI(_guestList);\n', '        emit UpdateGuestList(_guestList);\n', '    }\n', '\n', '    function shareValue(uint256 numShares) external view returns (uint256) {\n', '        return _shareValue(numShares);\n', '    }\n', '\n', '    function _shareValue(uint256 numShares) internal view returns (uint256) {\n', '        uint256 totalShares = totalSupply();\n', '\n', '        if (totalShares > 0) {\n', '            return totalVaultBalance(address(this)).mul(numShares).div(totalShares);\n', '        } else {\n', '            return numShares;\n', '        }\n', '    }\n', '\n', '    function pricePerShare() public view returns (uint256) {\n', '        return totalVaultBalance(address(this)).mul(10**uint256(decimals())).div(totalSupply());\n', '    }\n', '\n', '    function totalWrapperBalance(address account) public view returns (uint256 balance) {\n', '        return balanceOf(account).mul(pricePerShare()).div(10**uint256(decimals()));\n', '    }\n', '\n', '    function _sharesForValue(uint256 amount) internal view returns (uint256) {\n', '        // total wrapper assets before deposit (assumes deposit already occured)\n', '        uint256 totalWrapperAssets = totalVaultBalance(address(this)).sub(amount);\n', '\n', '        if (totalWrapperAssets > 0) {\n', '            return totalSupply().mul(amount).div(totalWrapperAssets);\n', '        } else {\n', '            return amount;\n', '        }\n', '    }\n', '\n', '    function deposit() external whenNotPaused returns (uint256) {\n', '        uint256 allAssets = token.balanceOf(address(msg.sender));\n', '        return deposit(allAssets); // Deposit everything\n', '    }\n', '\n', '    function deposit(uint256 amount) public whenNotPaused returns (uint256 deposited) {\n', '        if (address(guestList) != address(0)) {\n', '            require(guestList.authorized(msg.sender, amount), "guest-list-authorization");\n', '        }\n', '\n', '        deposited = _deposit(msg.sender, address(this), amount, true); // `true` = pull from `msg.sender`\n', '        uint256 shares = _sharesForValue(deposited); // NOTE: Must be calculated after deposit is handled\n', '        _mint(msg.sender, shares);\n', '\n', '        emit Deposit(msg.sender, deposited);\n', '        emit Mint(msg.sender, shares);\n', '    }\n', '\n', '    function withdraw() external whenNotPaused returns (uint256) {\n', '        return withdraw(balanceOf(msg.sender));\n', '    }\n', '\n', '    function withdraw(uint256 shares) public whenNotPaused returns (uint256 withdrawn) {\n', '        withdrawn = _withdraw(address(this), msg.sender, _shareValue(shares), true); // `true` = withdraw from `bestVault`\n', '        _burn(msg.sender, shares);\n', '\n', '        // emit Withdraw(msg.sender, toReceiver);\n', '        // emit WithdrawalFee(affiliate, fee);\n', '        emit Burn(msg.sender, shares);\n', '    }\n', '\n', '    function migrate() external onlyAffiliate whenNotPaused returns (uint256) {\n', '        return _migrate(address(this));\n', '    }\n', '\n', '    function migrate(uint256 amount) external onlyAffiliate whenNotPaused returns (uint256) {\n', '        return _migrate(address(this), amount);\n', '    }\n', '\n', '    function migrate(uint256 amount, uint256 maxMigrationLoss) external onlyAffiliate whenNotPaused returns (uint256) {\n', '        return _migrate(address(this), amount, maxMigrationLoss);\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external {\n', '        require(owner != address(0), "permit: signature");\n', '        require(block.timestamp <= deadline, "permit: expired");\n', '\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory == owner, "permit: unauthorized");\n', '\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '    // @dev Pausing is optimized for speed of action. The guardian is intended to be the option with the least friction, though manager or affiliate can pause as well.\n', '    function pause() external {\n', '        require(msg.sender == guardian || msg.sender == manager || msg.sender == affiliate, "only-authorized-pausers");\n', '        _pause();\n', '    }\n', '\n', '    // @dev Unpausing requires a higher permission level than pausing, which is optimized for speed of action. The manager or affiliate can unpause\n', '    function unpause() external {\n', '        require(msg.sender == manager || msg.sender == affiliate, "only-authorized-unpausers");\n', '        _unpause();\n', '    }\n', '\n', '    function _withdraw(\n', '        address sender,\n', '        address receiver,\n', '        uint256 amount, // if `MAX_UINT256`, just withdraw everything\n', '        bool withdrawFromBest // If true, also withdraw from `_bestVault`\n', '    ) internal override returns (uint256 withdrawn) {\n', '        VaultAPI _bestVault = bestVault();\n', '\n', '        VaultAPI[] memory vaults = allVaults();\n', '\n', "        // Don't update cache in experimental mode, wait until we are referencing the registry data\n", '        if (!experimentalMode) {\n', '            _updateVaultCache(vaults);\n', '        }\n', '\n', '        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\n', '        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\n', '        //       so it if there is a denial of service issue in withdrawing, the downstream usage\n', '        //       of this wrapper contract must give an alternative method of withdrawing using\n', '        //       this function so that `amount` is less than the full amount requested to withdraw\n', '        //       (e.g. "piece-wise withdrawals"), leading to less loop iterations such that the\n', '        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\n', '        for (uint256 id = 0; id < vaults.length; id++) {\n', '            if (!withdrawFromBest && vaults[id] == _bestVault) {\n', "                continue; // Don't withdraw from the best\n", '            }\n', '\n', '            // Start with the total shares that `sender` has\n', '            uint256 availableShares = vaults[id].balanceOf(sender);\n', '\n', '            // Restrict by the allowance that `sender` has to this contract\n', '            // NOTE: No need for allowance check if `sender` is this contract\n', '            if (sender != address(this)) {\n', '                availableShares = MathUpgradeable.min(availableShares, vaults[id].allowance(sender, address(this)));\n', '            }\n', '\n', '            // Limit by maximum withdrawal size from each vault\n', '            availableShares = MathUpgradeable.min(availableShares, vaults[id].maxAvailableShares());\n', '\n', '            if (availableShares > 0) {\n', '                // Intermediate step to move shares to this contract before withdrawing\n', '                // NOTE: No need for share transfer if this contract is `sender`\n', '                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\n', '\n', '                if (amount != WITHDRAW_EVERYTHING) {\n', '                    // Compute amount to withdraw fully to satisfy the request\n', '                    uint256 estimatedShares = amount\n', '                        .sub(withdrawn) // NOTE: Changes every iteration\n', '                        .mul(10**uint256(vaults[id].decimals()))\n', '                        .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\n', '\n', '                    // Limit amount to withdraw to the maximum made available to this contract\n', "                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\n", '                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\n', '                    if (estimatedShares > 0 && estimatedShares < availableShares) {\n', '                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\n', '                    } else {\n', '                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\n', '                    }\n', '                } else {\n', '                    withdrawn = withdrawn.add(vaults[id].withdraw());\n', '                }\n', '\n', '                // Check if we have fully satisfied the request\n', '                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\n', '                if (amount <= withdrawn) break; // withdrawn as much as we needed\n', '            }\n', '        }\n', '\n', '        // If we have extra, deposit back into `_bestVault` for `sender`\n', '        // NOTE: Invariant is `withdrawn <= amount`\n', '        if (withdrawn > amount) {\n', "            // Don't forget to approve the deposit\n", '            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\n', '                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\n', '            }\n', '\n', '            _bestVault.deposit(withdrawn.sub(amount), sender);\n', '            withdrawn = amount;\n', '        }\n', '\n', '        // `receiver` now has `withdrawn` tokens as balance\n', '        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\n', '    }\n', '}']