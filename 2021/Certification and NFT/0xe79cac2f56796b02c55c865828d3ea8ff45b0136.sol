['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IStaking {\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '\n', '    function unstake(address staker, uint256 amount, bytes calldata data) external;\n', '\n', '    function totalStakedFor(address addr) external view returns (uint256);\n', '\n', '    function totalStaked() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function supportsHistory() external pure returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IStake {\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '    bool private _isTokenRescuable;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '        _isTokenRescuable = false;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function setRescuable(bool rescuable) public onlyOwner {\n', '        _isTokenRescuable = rescuable;\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return token.transfer(to, value);\n', '    }\n', '\n', '    function rescueFunds(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyOwner returns (bool) {\n', '        if (!_isTokenRescuable) {\n', '            require(\n', '                address(token) != tokenToRescue,\n', '                "TokenPool: Cannot claim token held by the contract"\n', '            );\n', '        }\n', '\n', '        return IERC20(tokenToRescue).transfer(to, amount);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Non Nft Token Geyser\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n', ' *      Compound and Uniswap.\n', ' *\n', ' *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\n', ' *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\n', ' *      claimed by users.\n', ' *\n', ' *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\n', ' *      is a function of the number of tokens deposited as well as the length of time deposited.\n', ' *      Specifically, a user\'s share of the currently-unlocked pool equals their "deposit-seconds"\n', ' *      divided by the global "deposit-seconds". This aligns the new token distribution with long\n', ' *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\n', ' *\n', ' *      More background and motivation available at:\n', ' *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n', ' */\n', 'contract TokenGeyserWithoutNFT is IStaking, IStake, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n', '    // amount: Unlocked tokens, total: Total locked tokens\n', '    event TokensUnlocked(uint256 amount, uint256 total);\n', '\n', '    TokenPool private _stakingPool;\n', '    TokenPool private _unlockedPool;\n', '    TokenPool private _lockedPool;\n', '\n', '    //\n', '    // Time-bonus params\n', '    //\n', '    uint256 public bonusDecimals = 2;\n', '    uint256 public startBonus = 0;\n', '    uint256 public bonusPeriodSec = 0;\n', '\n', '    //\n', '    // Global accounting state\n', '    //\n', '    uint256 public totalLockedShares = 0;\n', '    uint256 public totalStakingShares = 0;\n', '    uint256 private _totalStakingShareSeconds = 0;\n', '    uint256 private _lastAccountingTimestampSec = now;\n', '    uint256 private _maxUnlockSchedules = 0;\n', '    uint256 private _initialSharesPerToken = 0;\n', '\n', '    //\n', '    // User accounting state\n', '    //\n', '    // Represents a single stake for a user. A user may have multiple.\n', '    struct Stake {\n', '        uint256 stakingShares;\n', '        uint256 timestampSec;\n', '    }\n', '\n', '    // Caches aggregated values from the User->Stake[] map to save computation.\n', "    // If lastAccountingTimestampSec is 0, there's no entry for that user.\n", '    struct UserTotals {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastAccountingTimestampSec;\n', '    }\n', '\n', '    // Aggregated staking values per user\n', '    mapping(address => UserTotals) private _userTotals;\n', '\n', '    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\n', '    mapping(address => Stake[]) private _userStakes;\n', '\n', '    mapping(address => uint256) userEarnings;\n', '\n', '    //\n', '    // Locked/Unlocked Accounting state\n', '    //\n', '    struct UnlockSchedule {\n', '        uint256 initialLockedShares;\n', '        uint256 unlockedShares;\n', '        uint256 lastUnlockTimestampSec;\n', '        uint256 endAtSec;\n', '        uint256 durationSec;\n', '    }\n', '\n', '    UnlockSchedule[] public unlockSchedules;\n', '\n', '    address public geyserManager;\n', '\n', '    /**\n', '     * @param stakingToken The token users deposit as stake.\n', '     * @param distributionToken The token users receive as they unstake.\n', '     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n', '     * @param startBonus_ Starting time bonus\n', '     *                    e.g. 25% means user gets 25% of max distribution tokens.\n', '     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '     * @param bonusDecimals_ The number of decimals for shares\n', '     */\n', '    constructor(\n', '        IERC20 stakingToken,\n', '        IERC20 distributionToken,\n', '        uint256 maxUnlockSchedules,\n', '        uint256 startBonus_,\n', '        uint256 bonusPeriodSec_,\n', '        uint256 initialSharesPerToken,\n', '        uint256 bonusDecimals_,\n', '        address managerAddress\n', '    ) public {\n', '        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n', '        require(\n', '            startBonus_ <= 10**bonusDecimals_,\n', '            "TokenGeyser: start bonus too high"\n', '        );\n', '        // If no period is desired, instead set startBonus = 100%\n', '        // and bonusPeriod to a small value like 1sec.\n', '        require(bonusPeriodSec_ != 0, "TokenGeyser: bonus period is zero");\n', '        require(\n', '            initialSharesPerToken > 0,\n', '            "TokenGeyser: initialSharesPerToken is zero"\n', '        );\n', '\n', '        require(bonusDecimals_ > 0, "TokenGeyser: bonusDecimals_ is zero");\n', '\n', '        _stakingPool = new TokenPool(stakingToken);\n', '        _unlockedPool = new TokenPool(distributionToken);\n', '        _lockedPool = new TokenPool(distributionToken);\n', '        _unlockedPool.setRescuable(true);\n', '\n', '        geyserManager = managerAddress;\n', '        startBonus = startBonus_;\n', '        bonusDecimals = bonusDecimals_;\n', '        bonusPeriodSec = bonusPeriodSec_;\n', '        _maxUnlockSchedules = maxUnlockSchedules;\n', '        _initialSharesPerToken = initialSharesPerToken;\n', '    }\n', '\n', '    /**\n', '     * @return Total earnings for a user\n', '    */\n', '    function getEarnings(address user) public view returns (uint256) {\n', '        return userEarnings[user];\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue rewards\n', '     */\n', '    function rescueRewards(address user) external onlyOwner {\n', '        require(totalUnlocked() > 0, "TokenGeyser: Nothing to rescue");\n', '        require(\n', '            _unlockedPool.transfer(user, _unlockedPool.balance()),\n', '            "TokenGeyser: rescue rewards from rewards pool failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _stakingPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return The token users receive as they unstake.\n', '     */\n', '    function getDistributionToken() public view returns (IERC20) {\n', '        assert(_unlockedPool.token() == _lockedPool.token());\n', '        return _unlockedPool.token();\n', '    }\n', '\n', '    event log(string s);\n', '    event log(uint256 s);\n', '    event log(address s);\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the user.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n', '     * @param user User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override onlyOwner {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, user, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Private implementation of staking methods.\n', '     * @param staker User address who deposits tokens to stake.\n', '     * @param beneficiary User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     */\n', '    function _stakeFor(\n', '        address staker,\n', '        address beneficiary,\n', '        uint256 amount\n', '    ) private {\n', '        require(amount > 0, "TokenGeyser: stake amount is zero");\n', '        require(\n', '            beneficiary != address(0),\n', '            "TokenGeyser: beneficiary is zero address"\n', '        );\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do"\n', '        );\n', '\n', '\n', '        uint256 mintedStakingShares =\n', '            (totalStakingShares > 0)\n', '                ? totalStakingShares.mul(amount).div(totalStaked())\n', '                : amount.mul(_initialSharesPerToken);\n', '\n', '        require(\n', '            mintedStakingShares > 0,\n', '            "TokenGeyser: Stake amount is too small"\n', '        );\n', '\n', '        updateAccounting(beneficiary);\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[beneficiary];\n', '        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        Stake memory newStake = Stake(mintedStakingShares, now);\n', '        _userStakes[beneficiary].push(newStake);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '        // Already set in updateAccounting()\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.token().transferFrom(\n', '                staker,\n', '                address(_stakingPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into staking pool failed"\n', '        );\n', '\n', '        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), "");\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @param data Not used.\n', '     */\n', '    function unstake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens that would be rewarded.\n', '     */\n', '    function unstakeQuery(address staker, uint256 amount)\n', '        public\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        return _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens rewarded.\n', '     */\n', '    function _unstake(address user, uint256 amount) private returns (uint256) {\n', '        updateAccounting(user);\n', '\n', '        uint256 stakingSharesToBurn =\n', '            totalStakingShares.mul(amount).div(totalStaked());\n', '\n', '        require(\n', '            stakingSharesToBurn > 0,\n', '            "TokenGeyser: Unable to unstake amount this small"\n', '        );\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        Stake[] storage accountStakes = _userStakes[user];\n', '\n', '        // Redeem from most recent stake and go backwards in time.\n', '        uint256 stakingShareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 rewardAmount = 0;\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n', '            uint256 newStakingShareSecondsToBurn = 0;\n', '\n', '            if (lastStake.stakingShares <= sharesLeftToBurn) {\n', '                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(\n', '                    lastStake.stakingShares\n', '                );\n', '                accountStakes.pop();\n', '            } else {\n', '                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                lastStake.stakingShares = lastStake.stakingShares.sub(\n', '                    sharesLeftToBurn\n', '                );\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // totals.lastAccountingTimestampSec = now;\n', '\n', '        // 2. Global Accounting\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccountingF\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.transfer(user, amount),\n', '            "TokenGeyser: transfer out of staking pool failed"\n', '        );\n', '\n', '        //in case rescueRewards was called, there are no rewards to be transfered\n', '        if (totalUnlocked() >= rewardAmount) {\n', '            require(\n', '                _unlockedPool.transfer(user, rewardAmount),\n', '                "TokenGeyser: transfer out of unlocked pool failed"\n', '            );\n', '            emit TokensClaimed(user, rewardAmount);\n', '            \n', '             userEarnings[user] += rewardAmount;\n', '        }\n', '\n', '        emit Unstaked(user, amount, totalStakedFor(user), "");\n', '\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do"\n', '        );\n', '\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\n', '     *      encourage long-term deposits instead of constant unstake/restakes.\n', '     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\n', '     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n', '     * @param currentRewardTokens The current number of distribution tokens already alotted for this\n', '     *                            unstake op. Any bonuses are already applied.\n', '     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\n', '     *                            distribution tokens.\n', '     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\n', '     *                     the time-bonus.\n', '     * @return Updated amount of distribution tokens to award, with any bonus included on the\n', '     *         newly added tokens.\n', '     */\n', '    function computeNewReward(\n', '        uint256 currentRewardTokens,\n', '        uint256 stakingShareSeconds,\n', '        uint256 stakeTimeSec\n', '    ) private view returns (uint256) {\n', '        uint256 newRewardTokens =\n', '            totalUnlocked().mul(stakingShareSeconds).div(\n', '                _totalStakingShareSeconds\n', '            );\n', '\n', '        if (stakeTimeSec >= bonusPeriodSec) {\n', '            return currentRewardTokens.add(newRewardTokens);\n', '        }\n', '\n', '        uint256 oneHundredPct = 10**bonusDecimals;\n', '        uint256 bonusedReward =\n', '            startBonus\n', '                .add(\n', '                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\n', '                    bonusPeriodSec\n', '                )\n', '            )\n', '                .mul(newRewardTokens)\n', '                .div(oneHundredPct);\n', '\n', '        return currentRewardTokens.add(bonusedReward);\n', '    }\n', '\n', '    /**\n', '     * @param addr The user to look up staking information for.\n', '     * @return The number of staking tokens deposited for addr.\n', '     */\n', '    function totalStakedFor(address addr)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return\n', '            totalStakingShares > 0\n', '                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\n', '                    totalStakingShares\n', '                )\n', '                : 0;\n', '    }\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() public view override returns (uint256) {\n', '        return _stakingPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @dev Note that this application has a staking token as well as a distribution token, which\n', '     * may be different. This function is required by EIP-900.\n', '     * @return The deposit token used for staking.\n', '     */\n', '    function token() external view override returns (address) {\n', '        return address(getStakingToken());\n', '    }\n', '\n', '    /**\n', '     * @dev A globally callable function to update the accounting state of the system.\n', '     *      Global state and state for the caller are updated.\n', '     * @return [0] balance of the locked pool\n', '     * @return [1] balance of the unlocked pool\n', "     * @return [2] caller's staking share seconds\n", '     * @return [3] global staking share seconds\n', '     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\n', '     * @return [5] block timestamp\n', '     */\n', '    function updateAccounting(address user)\n', '        public\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        _unlockTokens();\n', '\n', '        // Global accounting\n', '        uint256 newStakingShareSeconds =\n', '            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\n', '            newStakingShareSeconds\n', '        );\n', '        _lastAccountingTimestampSec = now;\n', '\n', '        // User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        uint256 newUserStakingShareSeconds =\n', '            now.sub(totals.lastAccountingTimestampSec).mul(\n', '                totals.stakingShares\n', '            );\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\n', '            newUserStakingShareSeconds\n', '        );\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        uint256 totalUserRewards =\n', '            (_totalStakingShareSeconds > 0)\n', '                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\n', '                    _totalStakingShareSeconds\n', '                )\n', '                : 0;\n', '\n', '        return (\n', '            totalLocked(),\n', '            totalUnlocked(),\n', '            totals.stakingShareSeconds,\n', '            _totalStakingShareSeconds,\n', '            totalUserRewards,\n', '            now\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Total number of locked distribution tokens.\n', '     */\n', '    function totalLocked() public view returns (uint256) {\n', '        return _lockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Total number of unlocked distribution tokens.\n', '     */\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Number of unlock schedules.\n', '     */\n', '    function unlockScheduleCount() public view returns (uint256) {\n', '        return unlockSchedules.length;\n', '    }\n', '\n', '    /**\n', '     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\n', '     *      with the associated "unlock schedule". These locked tokens immediately begin unlocking\n', '     *      linearly over the duraction of durationSec timeframe.\n', '     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n', '     * @param durationSec Length of time to linear unlock the tokens.\n', '     */\n', '    function lockTokens(uint256 amount, uint256 durationSec)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            unlockSchedules.length < _maxUnlockSchedules,\n', '            "TokenGeyser: reached maximum unlock schedules"\n', '        );\n', '\n', '        // Update lockedTokens amount before using it in computations after.\n', '        updateAccounting(msg.sender);\n', '\n', '        uint256 lockedTokens = totalLocked();\n', '        uint256 mintedLockedShares =\n', '            (lockedTokens > 0)\n', '                ? totalLockedShares.mul(amount).div(lockedTokens)\n', '                : amount.mul(_initialSharesPerToken);\n', '\n', '        UnlockSchedule memory schedule;\n', '        schedule.initialLockedShares = mintedLockedShares;\n', '        schedule.lastUnlockTimestampSec = now;\n', '        schedule.endAtSec = now.add(durationSec);\n', '        schedule.durationSec = durationSec;\n', '        unlockSchedules.push(schedule);\n', '\n', '        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '        require(\n', '            _lockedPool.token().transferFrom(\n', '                msg.sender,\n', '                address(_lockedPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into locked pool failed"\n', '        );\n', '        emit TokensLocked(amount, durationSec, totalLocked());\n', '    }\n', '\n', '    /**\n', '     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\n', '     *      previously defined unlock schedules. Publicly callable.\n', '     * @return Number of newly unlocked distribution tokens.\n', '     */\n', '    function unlockTokens() public onlyOwner returns (uint256) {\n', '        _unlockTokens();\n', '    }\n', '\n', '    function _unlockTokens() private returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        uint256 lockedTokens = totalLocked();\n', '\n', '        if (totalLockedShares == 0) {\n', '            unlockedTokens = lockedTokens;\n', '        } else {\n', '            uint256 unlockedShares = 0;\n', '            for (uint256 s = 0; s < unlockSchedules.length; s++) {\n', '                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n', '            }\n', '            unlockedTokens = unlockedShares.mul(lockedTokens).div(\n', '                totalLockedShares\n', '            );\n', '            totalLockedShares = totalLockedShares.sub(unlockedShares);\n', '        }\n', '\n', '        if (unlockedTokens > 0) {\n', '            require(\n', '                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\n', '                "TokenGeyser: transfer out of locked pool failed"\n', '            );\n', '            emit TokensUnlocked(unlockedTokens, totalLocked());\n', '        }\n', '\n', '        return unlockedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of unlockable shares from a given schedule. The returned value\n', '     *      depends on the time since the last unlock. This function updates schedule accounting,\n', '     *      but does not actually transfer any tokens.\n', '     * @param s Index of the unlock schedule.\n', '     * @return The number of unlocked shares.\n', '     */\n', '    function unlockScheduleShares(uint256 s) private returns (uint256) {\n', '        UnlockSchedule storage schedule = unlockSchedules[s];\n', '\n', '        if (schedule.unlockedShares >= schedule.initialLockedShares) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 sharesToUnlock = 0;\n', '        // Special case to handle any leftover dust from integer division\n', '        if (now >= schedule.endAtSec) {\n', '            sharesToUnlock = (\n', '                schedule.initialLockedShares.sub(schedule.unlockedShares)\n', '            );\n', '            schedule.lastUnlockTimestampSec = schedule.endAtSec;\n', '        } else {\n', '            sharesToUnlock = now\n', '                .sub(schedule.lastUnlockTimestampSec)\n', '                .mul(schedule.initialLockedShares)\n', '                .div(schedule.durationSec);\n', '            schedule.lastUnlockTimestampSec = now;\n', '        }\n', '\n', '        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n', '        return sharesToUnlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the owner rescue funds air-dropped to the staking pool.\n', '     * @param tokenToRescue Address of the token to be rescued.\n', '     * @param to Address to which the rescued funds are to be sent.\n', '     * @param amount Amount of tokens to be rescued.\n', '     * @return Transfer success.\n', '     */\n', '    function rescueFundsFromStakingPool(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) public onlyOwner returns (bool) {\n', '        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\n', '    }\n', '\n', '    function supportsHistory() external pure override returns (bool) {\n', '        return false;\n', '    }\n', '}']