['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// "SPDX-License-Identifier: MIT"\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', 'contract PHCStakeContract is Ownable, Pausable {\n', '    // Library for safely handling uint256\n', '    using SafeMath for uint256;\n', '\n', '    uint256 ONE_DAY;\n', '    uint256 public stakeDays;\n', '    uint256 public maxStakedQuantity;\n', '    address public PhuketTokenAddress;\n', '    uint256 public ratio;\n', '    uint256 public totalStakedTokens;\n', '    uint256 public FEE;\n', '    address public fee_address;\n', '    \n', '\n', '    mapping(address => uint256) public stakerBalance;\n', '    mapping(uint256 => StakerData) public stakerData;\n', '    \n', '    mapping (address => Storetime)  Storetimes; \n', '    mapping(address=>uint256) public laststake;\n', '    \n', '    struct Storetime {\n', '        uint256[] invTime;\n', '    }\n', '\n', '    struct StakerData {\n', '        uint256 altQuantity;\n', '        uint256 initiationTimestamp;\n', '        uint256 durationTimestamp;\n', '        uint256 endTime;\n', '        uint256 rewardAmount;\n', '        address staker;\n', '        uint256 exactdate;\n', '        uint256 withdrawable;\n', '        uint256 rewardAmountdata;\n', '        bool isCompleted;\n', '    }\n', '    event StakeCompleted(\n', '        uint256 altQuantity,\n', '        uint256 initiationTimestamp,\n', '        uint256 durationTimestamp,\n', '        uint256 rewardAmount,\n', '        address staker,\n', '        address PhuketTokenAddress,\n', '        address portalAddress\n', '    );\n', '\n', '    event Unstake(\n', '        address staker,\n', '        address stakedToken,\n', '        address portalAddress,\n', '        uint256 altQuantity,\n', '        uint256 durationTimestamp,\n', '        uint256 rewardAmount\n', '    ); // When ERC20s are withdrawn\n', '    event BaseInterestUpdated(uint256 _newRate, uint256 _oldRate);\n', '\n', '    constructor(uint256 _ratio,address _phuketToken,uint256 _maxStkQty, address _feeaddress) public {\n', '        ratio = _ratio;\n', '        PhuketTokenAddress = _phuketToken;\n', '        maxStakedQuantity = _maxStkQty;\n', '        stakeDays = 365;\n', '        ONE_DAY = 86400;\n', '        FEE = 300;\n', '        fee_address = _feeaddress;\n', '    }\n', '    \n', '    function userInvesmentData(address _address) public view returns(uint256[] memory UserInv)\n', '    {\n', '        return Storetimes[_address].invTime;\n', '    }\n', '    \n', '    function earnedReward(uint256 _id) public view returns(uint256)\n', '    {\n', '        uint256 rewardAmount;\n', '         if(stakerData[_id].endTime <= block.timestamp){\n', '             uint256 exactDays = (stakerData[_id].exactdate).mul(ONE_DAY);\n', '              rewardAmount = _calculateReward(stakerData[_id].altQuantity, ratio, exactDays);\n', '         }\n', '         else\n', '         {\n', '             uint256 days_remaining = (block.timestamp).sub(stakerData[_id].initiationTimestamp);\n', '             rewardAmount = _calculateReward(stakerData[_id].altQuantity, ratio, days_remaining);\n', '         }\n', '         return rewardAmount;\n', '    }\n', '\n', '    /* @dev stake function which enable the user to stake Phuket Tokens.\n', '     *  @param _altQuantity, Phuket amount to be staked.\n', '     *  @param _days, how many days Phuket tokens are staked for (in days)\n', '     */\n', '    function stakeALT(uint256 _altQuantity, uint256 _days)\n', '        public\n', '        whenNotPaused\n', '        returns (uint256 rewardAmount)\n', '    {\n', '        require(_days <= stakeDays && _days > 0, "Invalid Days"); // To check days\n', '        require(\n', '            _altQuantity <= maxStakedQuantity && _altQuantity > 0,\n', '            "Invalid Phuket quantity"\n', '        ); // To verify Phuket quantity\n', '\n', '        IERC20(PhuketTokenAddress).transferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _altQuantity\n', '        );\n', '\n', '        rewardAmount = 0;\n', '\n', '        uint256 _timestamp = block.timestamp;\n', '\n', '        if (stakerData[_timestamp].staker != address(0)) {\n', '            _timestamp = _timestamp.add(1);\n', '        }\n', '\n', '        stakerData[_timestamp] = StakerData(\n', '            _altQuantity,\n', '            _timestamp,\n', '            _days.mul(ONE_DAY),\n', '            (_days.mul(ONE_DAY)).add(_timestamp),\n', '            rewardAmount,\n', '            msg.sender,\n', '            _days.mul(1e18),\n', '            0,\n', '            0,\n', '            false\n', '        );\n', '\n', '        stakerBalance[msg.sender] = stakerBalance[msg.sender].add(_altQuantity);\n', '\n', '        totalStakedTokens = totalStakedTokens.add(_altQuantity);\n', '\n', '        Storetimes[msg.sender].invTime.push(_timestamp);\n', '        \n', '        laststake[msg.sender]=_timestamp;\n', '\n', '        emit StakeCompleted(\n', '            _altQuantity,\n', '            _timestamp,\n', '            _days.mul(ONE_DAY),\n', '            rewardAmount,\n', '            msg.sender,\n', '            PhuketTokenAddress,\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    /*  @dev unStake function which enable the user to withdraw his Phuket Tokens.\n', '     *  @param _expiredTimestamps, time when Phuket tokens are unlocked.\n', '     *  @param _amount, amount to be withdrawn by the user.\n', '     */\n', '    function unstakeALT(uint256[] calldata _expiredTimestamps)\n', '        external\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '    \n', '        for (uint256 i = 0; i < _expiredTimestamps.length; i = i.add(1)) {\n', '            \n', '                uint256 withdrawAmount = 0;\n', '                uint256 rewardAmount=0;\n', '                uint256 timestamp = block.timestamp;\n', '               \n', '                 require(!(stakerData[_expiredTimestamps[i]].isCompleted),"Already Unstaked");\n', '                 withdrawAmount =  stakerData[_expiredTimestamps[i]].altQuantity;\n', '                 uint256 initiate_time = stakerData[_expiredTimestamps[i]].initiationTimestamp;\n', '                  \n', '             uint256 exactDays = (timestamp).sub(initiate_time);\n', '             \n', '               \n', '        \n', '                 rewardAmount = _calculateReward(withdrawAmount, ratio, exactDays);\n', '                IERC20(PhuketTokenAddress).transfer(msg.sender, rewardAmount);\n', '          \n', '\n', '          stakerData[_expiredTimestamps[i]].withdrawable=withdrawAmount;\n', '          \n', '            stakerBalance[msg.sender] = stakerBalance[msg.sender].sub(withdrawAmount);\n', '\n', '        totalStakedTokens = totalStakedTokens.sub(withdrawAmount);\n', '\n', '        IERC20(PhuketTokenAddress).transfer(msg.sender, withdrawAmount);\n', '                    \n', '     \n', '         emit Unstake( msg.sender,\n', '                            PhuketTokenAddress,\n', '                            address(this),\n', '                            stakerData[_expiredTimestamps[i]].altQuantity,\n', '                            _expiredTimestamps[i],\n', '                            rewardAmount\n', '                        );\n', '        \n', '        stakerData[_expiredTimestamps[i]].rewardAmountdata=rewardAmount;\n', '        stakerData[_expiredTimestamps[i]].isCompleted=true;\n', '    \n', '    }\n', '       \n', '        \n', '        return true;\n', '    }\n', '\n', '    /* @dev to calculate reward Amount\n', '     *  @param _altQuantity , amount of ALT tokens staked.\n', '     *@param _baseInterest rate\n', '     */\n', '    function _calculateReward(\n', '        uint256 _altQuantity,\n', '        uint256 _ratio,\n', '        uint256 _days\n', '    ) public view returns (uint256 rewardAmount) {\n', '        rewardAmount = (_altQuantity.mul(_ratio).mul(_days)).div(1e18);\n', '        rewardAmount = rewardAmount.div(ONE_DAY);\n', '    }\n', '\n', '   \n', '\n', '    /* @dev to set base interest rate. Can only be called by owner\n', '     *  @param _rate, interest rate (in wei)\n', '     */\n', '    function updateRatio(uint256 _rate) public onlyOwner whenNotPaused {\n', '        ratio = _rate;\n', '    }\n', '\n', '    function updateTime(uint256 _time) public onlyOwner whenNotPaused {\n', '        ONE_DAY = _time;\n', '    }\n', '    \n', '    \n', '     function updateFEE(uint256 _fee) public onlyOwner whenNotPaused {\n', '        FEE = _fee;\n', '    }\n', '    \n', '     function updateFeeaddress(address _feeaddress) public onlyOwner whenNotPaused {\n', '        fee_address = _feeaddress;\n', '    }\n', '\n', '    function updateQuantity(uint256 _quantity) public onlyOwner whenNotPaused {\n', '        maxStakedQuantity = _quantity;\n', '    }\n', '\n', '    /* @dev function to update stakeDays.\n', '     *@param _stakeDays, updated Days .\n', '     */\n', '    function updatestakeDays(uint256 _stakeDays) public onlyOwner {\n', '        stakeDays = _stakeDays;\n', '    }\n', '\n', '    /* @dev Funtion to withdraw all Phuket from contract incase of emergency, can only be called by owner.*/\n', '    function withdrawTokens() public onlyOwner {\n', '        IERC20(PhuketTokenAddress).transfer(\n', '            owner(),\n', '            IERC20(PhuketTokenAddress).balanceOf(address(this))\n', '        );\n', '        pause();\n', '    }\n', '\n', '    function getTotalrewardTokens() external view returns(uint256){\n', '        return IERC20(PhuketTokenAddress).balanceOf(address(this)).sub(totalStakedTokens);\n', '    }\n', '\n', '    /* @dev function to update Phuket contract address.\n', '     *@param _address, new address of the contract.\n', '     */\n', '    function setPhuketTokenAddress(address _address) public onlyOwner {\n', '        PhuketTokenAddress = _address;\n', '    }\n', '\n', '    /* @dev function which restricts the user from stakng Phuket tokens. */\n', '    function pause() public onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    /* @dev function which disables the Pause function. */\n', '    function unPause() public onlyOwner {\n', '        _unpause();\n', '    }\n', '}']