['pragma solidity ^0.7.4;\n', '// "SPDX-License-Identifier: MIT"\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract GovernanceToken is IERC20 {\n', '    string public constant name = "Polars";\n', '    string public constant symbol = "POL";\n', '    uint8 public constant decimals = 18;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    uint256 totalSupply_;\n', '    using SafeMath for uint256;\n', '    \n', '   constructor() {\n', '    totalSupply_ = 2 * 1e27;\n', '    balances[msg.sender] = totalSupply_;\n', '    }\n', '    \n', '    function totalSupply() public override view returns (uint256) {\n', '    return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '    \n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '}']