['// SPDX-License-Identifier: BUSL-1.1\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "../ControllerCommon.sol";\n', '\n', 'contract NullController is ControllerCommon {\n', '\n', '    /**\n', '     @notice this controller implementation supports the interface but does not intervene in any way\n', '     @dev the controller implementation can be extended but must implement the minimum interface\n', '     */\n', '    constructor(address oneTokenFactory_)\n', '       ControllerCommon(oneTokenFactory_, "Null Controller")\n', '     {} \n', '\n', '}\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "../interface/IController.sol";\n', 'import "../interface/IOneTokenFactory.sol";\n', '\n', 'abstract contract ControllerCommon is IController {\n', '\n', '    bytes32 constant public override MODULE_TYPE = keccak256(abi.encodePacked("ICHI V1 Controller"));\n', '\n', '    address public override oneTokenFactory;\n', '    string public override description;\n', '\n', '    event ControllerDeployed(address sender, address oneTokenFactory, string description);\n', '    event ControllerInitialized(address sender);\n', '    event ControllerPeriodic(address sender);\n', '\n', '    modifier onlyKnownToken {\n', '        require(IOneTokenFactory(oneTokenFactory).isOneToken(msg.sender), "ICHIModuleCommon: msg.sender is not a known oneToken");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     @notice Controllers rebalance funds and may execute strategies periodically.\n', '     */\n', '    \n', '    /**\n', '     @notice controllers are bound to factories at deployment time\n', '     @param oneTokenFactory_ factory to bind to\n', '     @param description_ human-readable, description only\n', '     */ \n', '    constructor(address oneTokenFactory_, string memory description_) {\n', '        oneTokenFactory = oneTokenFactory_;\n', '        description = description_;\n', '        emit ControllerDeployed(msg.sender, oneTokenFactory_, description);\n', '    }    \n', '    \n', '    /**\n', '     @notice oneTokens invoke periodic() to trigger periodic processes. Can be trigger externally.\n', '     @dev Acceptable access control will vary by implementation. \n', '     */  \n', '    function periodic() external virtual override {\n', '        emit ControllerPeriodic(msg.sender);\n', '    }  \n', '        \n', '    /**\n', '     @notice OneTokenBase (msg.sender) calls this when the controller is assigned. Must be re-initializeable.\n', '     */\n', '    function init() external onlyKnownToken virtual override {\n', '        emit ControllerInitialized(msg.sender);\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IController {\n', '    \n', '    function oneTokenFactory() external returns(address);\n', '    function description() external returns(string memory);\n', '    function init() external;\n', '    function periodic() external;\n', '    function MODULE_TYPE() external view returns(bytes32);    \n', '}\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '\n', 'pragma solidity 0.7.6;\n', 'pragma abicoder v2;\n', '\n', 'import "./InterfaceCommon.sol";\n', '\n', 'interface IOneTokenFactory is InterfaceCommon {\n', '\n', '    function oneTokenProxyAdmins(address) external returns(address);\n', '    function deployOneTokenProxy(\n', '        string memory name,\n', '        string memory symbol,\n', '        address governance, \n', '        address version,\n', '        address controller,\n', '        address mintMaster,              \n', '        address memberToken, \n', '        address collateral,\n', '        address oneTokenOracle\n', '    ) \n', '        external \n', '        returns(address newOneTokenProxy, address proxyAdmin);\n', '\n', '    function admitModule(address module, ModuleType moduleType, string memory name, string memory url) external;\n', '    function updateModule(address module, string memory name, string memory url) external;\n', '    function removeModule(address module) external;\n', '\n', '    function admitForeignToken(address foreignToken, bool collateral, address oracle) external;\n', '    function updateForeignToken(address foreignToken, bool collateral) external;\n', '    function removeForeignToken(address foreignToken) external;\n', '\n', '    function assignOracle(address foreignToken, address oracle) external;\n', '    function removeOracle(address foreignToken, address oracle) external; \n', '\n', '    /**\n', '     * View functions\n', '     */\n', '    \n', '    function MODULE_TYPE() external view returns(bytes32);\n', '\n', '    function oneTokenCount() external view returns(uint256);\n', '    function oneTokenAtIndex(uint256 index) external view returns(address);\n', '    function isOneToken(address oneToken) external view returns(bool);\n', ' \n', '    // modules\n', '\n', '    function moduleCount() external view returns(uint256);\n', '    function moduleAtIndex(uint256 index) external view returns(address module);\n', '    function isModule(address module) external view returns(bool);\n', '    function isValidModuleType(address module, ModuleType moduleType) external view returns(bool);\n', '\n', '    // foreign tokens\n', '\n', '    function foreignTokenCount() external view returns(uint256);\n', '    function foreignTokenAtIndex(uint256 index) external view returns(address);\n', '    function foreignTokenInfo(address foreignToken) external view returns(bool collateral, uint256 oracleCount);\n', '    function foreignTokenOracleCount(address foreignToken) external view returns(uint256);\n', '    function foreignTokenOracleAtIndex(address foreignToken, uint256 index) external view returns(address);\n', '    function isOracle(address foreignToken, address oracle) external view returns(bool);\n', '    function isForeignToken(address foreignToken) external view returns(bool);\n', '    function isCollateral(address foreignToken) external view returns(bool);\n', '}\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '\n', 'pragma solidity 0.7.6;\n', 'pragma abicoder v2;\n', '\n', 'interface InterfaceCommon {\n', '\n', '    enum ModuleType { Version, Controller, Strategy, MintMaster, Oracle }\n', '\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']