['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/interfaces/IDMMLiquidityRouter.sol\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/// @dev an simple interface for integration dApp to contribute liquidity\n', 'interface IDMMLiquidityRouter {\n', '    /**\n', '     * @param tokenA address of token in the pool\n', '     * @param tokenB address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param amountADesired the amount of tokenA users want to add to the pool\n', '     * @param amountBDesired the amount of tokenB users want to add to the pool\n', '     * @param amountAMin bounds to the extents to which amountB/amountA can go up\n', '     * @param amountBMin bounds to the extents to which amountB/amountA can go down\n', '     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\n', '     * @param to Recipient of the liquidity tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert.\n', '     */\n', '    function addLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256[2] calldata vReserveRatioBounds,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityNewPool(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        uint32 ampBps,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityNewPoolETH(\n', '        IERC20 token,\n', '        uint32 ampBps,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    /**\n', '     * @param token address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param amountTokenDesired the amount of token users want to add to the pool\n', '     * @dev   msg.value equals to amountEthDesired\n', '     * @param amountTokenMin bounds to the extents to which WETH/token can go up\n', '     * @param amountETHMin bounds to the extents to which WETH/token can go down\n', '     * @param vReserveRatioBounds bounds to the extents to which vReserveB/vReserveA can go (precision: 2 ** 112)\n', '     * @param to Recipient of the liquidity tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert.\n', '     */\n', '    function addLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        uint256[2] calldata vReserveRatioBounds,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    /**\n', '     * @param tokenA address of token in the pool\n', '     * @param tokenB address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param liquidity the amount of lp token users want to burn\n', '     * @param amountAMin the minimum token retuned after burning\n', '     * @param amountBMin the minimum token retuned after burning\n', '     * @param to Recipient of the returned tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert.\n', '     */\n', '    function removeLiquidity(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    /**\n', '     * @param tokenA address of token in the pool\n', '     * @param tokenB address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param liquidity the amount of lp token users want to burn\n', '     * @param amountAMin the minimum token retuned after burning\n', '     * @param amountBMin the minimum token retuned after burning\n', '     * @param to Recipient of the returned tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert.\n', '     * @param approveMax whether users permit the router spending max lp token or not.\n', '     * @param r s v Signature of user to permit the router spending lp token\n', '     */\n', '    function removeLiquidityWithPermit(\n', '        IERC20 tokenA,\n', '        IERC20 tokenB,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    /**\n', '     * @param token address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param liquidity the amount of lp token users want to burn\n', '     * @param amountTokenMin the minimum token retuned after burning\n', '     * @param amountETHMin the minimum eth in wei retuned after burning\n', '     * @param to Recipient of the returned tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert\n', '     */\n', '    function removeLiquidityETH(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    /**\n', '     * @param token address of token in the pool\n', '     * @param pool the address of the pool\n', '     * @param liquidity the amount of lp token users want to burn\n', '     * @param amountTokenMin the minimum token retuned after burning\n', '     * @param amountETHMin the minimum eth in wei retuned after burning\n', '     * @param to Recipient of the returned tokens.\n', '     * @param deadline Unix timestamp after which the transaction will revert\n', '     * @param approveMax whether users permit the router spending max lp token\n', '     * @param r s v signatures of user to permit the router spending lp token.\n', '     */\n', '    function removeLiquidityETHWithPermit(\n', '        IERC20 token,\n', '        address pool,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    /**\n', '     * @param amountA amount of 1 side token added to the pool\n', '     * @param reserveA current reserve of the pool\n', '     * @param reserveB current reserve of the pool\n', '     * @return amountB amount of the other token added to the pool\n', '     */\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '}\n', '\n', '// File: contracts/interfaces/IERC20Permit.sol\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IERC20Permit is IERC20 {\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File: contracts/wrapper/LiquidityMigrator.sol\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ILiquidityMigrator {\n', '    struct PermitData {\n', '        bool approveMax;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    struct PoolInfo {\n', '        address poolAddress;\n', '        uint32 poolAmp;\n', '        uint256[2] dmmVReserveRatioBounds;\n', '    }\n', '\n', '    event RemoveLiquidity(\n', '        address indexed tokenA,\n', '        address indexed tokenB,\n', '        address indexed uniPair,\n', '        uint256 liquidity,\n', '        uint256 amountA,\n', '        uint256 amountB\n', '    );\n', '\n', '    event Migrated(\n', '        address indexed tokenA,\n', '        address indexed tokenB,\n', '        uint256 dmmAmountA,\n', '        uint256 dmmAmountB,\n', '        uint256 dmmLiquidity,\n', '        PoolInfo info\n', '    );\n', '\n', '    /**\n', '     * @dev Migrate tokens from a pair to a Kyber Dmm Pool\n', '     *   Supporting both normal tokens and tokens with fee on transfer\n', '     *   Support create new pool with received tokens from removing, or\n', '     *       add tokens to a given pool address\n', '     * @param uniPair pair for token that user wants to migrate from\n', "     *   it should be compatible with UniswapPair's interface\n", '     * @param tokenA first token of the pool\n', '     * @param tokenB second token of the pool\n', '     * @param liquidity amount of LP tokens to migrate\n', '     * @param amountAMin min amount for tokenA when removing\n', '     * @param amountBMin min amount for tokenB when removing\n', '     * @param dmmAmountAMin min amount for tokenA when adding\n', '     * @param dmmAmountBMin min amount for tokenB when adding\n', '     * @param poolInfo info the the Kyber DMM Pool - (poolAddress, poolAmp)\n', '     *   if poolAddress is 0x0 -> create new pool with amp factor of poolAmp\n', '     *   otherwise add liquidity to poolAddress\n', '     * @param deadline only allow transaction to be executed before the deadline\n', '     */\n', '    function migrateLpToDmmPool(\n', '        address uniPair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256 dmmAmountAMin,\n', '        uint256 dmmAmountBMin,\n', '        PoolInfo calldata poolInfo,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 addedLiquidity\n', '        );\n', '\n', '    /**\n', '     * @dev Migrate tokens from a pair to a Kyber Dmm Pool with permit\n', "     *   User doesn't have to make an approve allowance transaction, just need to sign the data\n", '     *   Supporting both normal tokens and tokens with fee on transfer\n', '     *   Support create new pool with received tokens from removing, or\n', '     *       add tokens to a given pool address\n', '     * @param uniPair pair for token that user wants to migrate from\n', "     *   it should be compatible with UniswapPair's interface\n", '     * @param tokenA first token of the pool\n', '     * @param tokenB second token of the pool\n', '     * @param liquidity amount of LP tokens to migrate\n', '     * @param amountAMin min amount for tokenA when removing\n', '     * @param amountBMin min amount for tokenB when removing\n', '     * @param dmmAmountAMin min amount for tokenA when adding\n', '     * @param dmmAmountBMin min amount for tokenB when adding\n', '     * @param poolInfo info the the Kyber DMM Pool - (poolAddress, poolAmp)\n', '     *   if poolAddress is 0x0 -> create new pool with amp factor of poolAmp\n', '     *   otherwise add liquidity to poolAddress\n', '     * @param deadline only allow transaction to be executed before the deadline\n', '     * @param permitData data of approve allowance\n', '     */\n', '    function migrateLpToDmmPoolWithPermit(\n', '        address uniPair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256 dmmAmountAMin,\n', '        uint256 dmmAmountBMin,\n', '        PoolInfo calldata poolInfo,\n', '        uint256 deadline,\n', '        PermitData calldata permitData\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 addedLiquidity\n', '        );\n', '}\n', '\n', '/**\n', ' * @dev Liquidity Migrator contract to help migrating liquidity\n', ' *       from other sources to Kyber DMM Pool\n', ' */\n', 'contract LiquidityMigrator2 is ILiquidityMigrator, Ownable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    address public immutable dmmRouter;\n', '\n', '    constructor(address _dmmRouter) public {\n', '        require(_dmmRouter != address(0), "Migrator: INVALID_ROUTER");\n', '        dmmRouter = _dmmRouter;\n', '    }\n', '\n', '    /**\n', '     * @dev Use only for some special tokens\n', '     */\n', '    function manualApproveAllowance(\n', '        IERC20[] calldata tokens,\n', '        address[] calldata spenders,\n', '        uint256 allowance\n', '    ) external onlyOwner {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            for (uint256 j = 0; j < spenders.length; j++) {\n', '                tokens[i].safeApprove(spenders[j], allowance);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Migrate tokens from a pair to a Kyber Dmm Pool\n', '     *   Supporting both normal tokens and tokens with fee on transfer\n', '     *   Support create new pool with received tokens from removing, or\n', '     *       add tokens to a given pool address\n', '     * @param uniPair pair for token that user wants to migrate from\n', "     *   it should be compatible with UniswapPair's interface\n", '     * @param tokenA first token of the pool\n', '     * @param tokenB second token of the pool\n', '     * @param liquidity amount of LP tokens to migrate\n', '     * @param amountAMin min amount for tokenA when removing/adding\n', '     * @param amountBMin min amount for tokenB when removing/adding\n', '     * @param poolInfo info the the Kyber DMM Pool - (poolAddress, poolAmp)\n', '     *   if poolAddress is 0x0 -> create new pool with amp factor of poolAmp\n', '     *   otherwise add liquidity to poolAddress\n', '     * @param deadline only allow transaction to be executed before the deadline\n', '     * @param permitData data of approve allowance\n', '     */\n', '    function migrateLpToDmmPoolWithPermit(\n', '        address uniPair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256 dmmAmountAMin,\n', '        uint256 dmmAmountBMin,\n', '        PoolInfo calldata poolInfo,\n', '        uint256 deadline,\n', '        PermitData calldata permitData\n', '    )\n', '        external\n', '        override\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 addedLiquidity\n', '        )\n', '    {\n', '        IERC20Permit(uniPair).permit(\n', '            msg.sender,\n', '            address(this),\n', '            permitData.approveMax ? uint256(-1) : liquidity,\n', '            deadline,\n', '            permitData.v,\n', '            permitData.r,\n', '            permitData.s\n', '        );\n', '\n', '        (amountA, amountB, addedLiquidity) = migrateLpToDmmPool(\n', '            uniPair,\n', '            tokenA,\n', '            tokenB,\n', '            liquidity,\n', '            amountAMin,\n', '            amountBMin,\n', '            dmmAmountAMin,\n', '            dmmAmountBMin,\n', '            poolInfo,\n', '            deadline\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Migrate tokens from a pair to a Kyber Dmm Pool with permit\n', "     *   User doesn't have to make an approve allowance transaction, just need to sign the data\n", '     *   Supporting both normal tokens and tokens with fee on transfer\n', '     *   Support create new pool with received tokens from removing, or\n', '     *       add tokens to a given pool address\n', '     * @param uniPair pair for token that user wants to migrate from\n', "     *   it should be compatible with UniswapPair's interface\n", '     * @param tokenA first token of the pool\n', '     * @param tokenB second token of the pool\n', '     * @param liquidity amount of LP tokens to migrate\n', '     * @param amountAMin min amount for tokenA when removing/adding\n', '     * @param amountBMin min amount for tokenB when removing/adding\n', '     * @param poolInfo info the the Kyber DMM Pool - (poolAddress, poolAmp)\n', '     *   if poolAddress is 0x0 -> create new pool with amp factor of poolAmp\n', '     *   otherwise add liquidity to poolAddress\n', '     * @param deadline only allow transaction to be executed before the deadline\n', '     */\n', '    function migrateLpToDmmPool(\n', '        address uniPair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256 dmmAmountAMin,\n', '        uint256 dmmAmountBMin,\n', '        PoolInfo memory poolInfo,\n', '        uint256 deadline\n', '    )\n', '        public\n', '        override\n', '        returns (\n', '            uint256 dmmAmountA,\n', '            uint256 dmmAmountB,\n', '            uint256 dmmLiquidity\n', '        )\n', '    {\n', '        // support for both normal token and token with fee on transfer\n', '        {\n', '            uint256 balanceTokenA = IERC20(tokenA).balanceOf(address(this));\n', '            uint256 balanceTokenB = IERC20(tokenB).balanceOf(address(this));\n', '            _removeUniLiquidity(\n', '                uniPair,\n', '                tokenA,\n', '                tokenB,\n', '                liquidity,\n', '                amountAMin,\n', '                amountBMin,\n', '                deadline\n', '            );\n', '            dmmAmountA = IERC20(tokenA).balanceOf(address(this)).sub(balanceTokenA);\n', '            dmmAmountB = IERC20(tokenB).balanceOf(address(this)).sub(balanceTokenB);\n', '            require(dmmAmountA > 0 && dmmAmountB > 0, "Migrator: INVALID_AMOUNT");\n', '\n', '            emit RemoveLiquidity(tokenA, tokenB, uniPair, liquidity, dmmAmountA, dmmAmountB);\n', '        }\n', '\n', '        (dmmAmountA, dmmAmountB, dmmLiquidity) = _addLiquidityToDmmPool(\n', '            tokenA,\n', '            tokenB,\n', '            dmmAmountA,\n', '            dmmAmountB,\n', '            dmmAmountAMin,\n', '            dmmAmountBMin,\n', '            poolInfo,\n', '            deadline\n', '        );\n', '\n', '        emit Migrated(tokenA, tokenB, dmmAmountA, dmmAmountB, dmmLiquidity, poolInfo);\n', '    }\n', '\n', "    /** @dev Allow the Owner to withdraw any funds that have been 'wrongly'\n", '     *       transferred to the migrator contract\n', '     */\n', '    function withdrawFund(IERC20 token, uint256 amount) external onlyOwner {\n', '        if (token == IERC20(0)) {\n', '            (bool success, ) = owner().call{value: amount}("");\n', '            require(success, "Migrator: TRANSFER_ETH_FAILED");\n', '        } else {\n', '            token.safeTransfer(owner(), amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add liquidity to Kyber dmm pool, support adding to new pool or an existing pool\n', '     */\n', '    function _addLiquidityToDmmPool(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        PoolInfo memory poolInfo,\n', '        uint256 deadline\n', '    )\n', '        internal\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        // safe approve only if needed\n', '        _safeApproveAllowance(IERC20(tokenA), address(dmmRouter));\n', '        _safeApproveAllowance(IERC20(tokenB), address(dmmRouter));\n', '        if (poolInfo.poolAddress == address(0)) {\n', '            // add to new pool\n', '            (amountA, amountB, liquidity) = _addLiquidityNewPool(\n', '                tokenA,\n', '                tokenB,\n', '                amountADesired,\n', '                amountBDesired,\n', '                amountAMin,\n', '                amountBMin,\n', '                poolInfo.poolAmp,\n', '                deadline\n', '            );\n', '        } else {\n', '            (amountA, amountB, liquidity) = _addLiquidityExistingPool(\n', '                tokenA,\n', '                tokenB,\n', '                amountADesired,\n', '                amountBDesired,\n', '                amountAMin,\n', '                amountBMin,\n', '                poolInfo.poolAddress,\n', '                poolInfo.dmmVReserveRatioBounds,\n', '                deadline\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add liquidity to an existing pool, and return back tokens to users if any\n', '     */\n', '    function _addLiquidityExistingPool(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address dmmPool,\n', '        uint256[2] memory vReserveRatioBounds,\n', '        uint256 deadline\n', '    )\n', '        internal\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        (amountA, amountB, liquidity) = IDMMLiquidityRouter(dmmRouter).addLiquidity(\n', '            IERC20(tokenA),\n', '            IERC20(tokenB),\n', '            dmmPool,\n', '            amountADesired,\n', '            amountBDesired,\n', '            amountAMin,\n', '            amountBMin,\n', '            vReserveRatioBounds,\n', '            msg.sender,\n', '            deadline\n', '        );\n', '        // return back token if needed\n', '        if (amountA < amountADesired) {\n', '            IERC20(tokenA).safeTransfer(msg.sender, amountADesired - amountA);\n', '        }\n', '        if (amountB < amountBDesired) {\n', '            IERC20(tokenB).safeTransfer(msg.sender, amountBDesired - amountB);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add liquidity to a new pool, and return back tokens to users if any\n', '     */\n', '    function _addLiquidityNewPool(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint32 amps,\n', '        uint256 deadline\n', '    )\n', '        internal\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        )\n', '    {\n', '        (amountA, amountB, liquidity) = IDMMLiquidityRouter(dmmRouter).addLiquidityNewPool(\n', '            IERC20(tokenA),\n', '            IERC20(tokenB),\n', '            amps,\n', '            amountADesired,\n', '            amountBDesired,\n', '            amountAMin,\n', '            amountBMin,\n', '            msg.sender,\n', '            deadline\n', '        );\n', '        // return back token if needed\n', '        if (amountA < amountADesired) {\n', '            IERC20(tokenA).safeTransfer(msg.sender, amountADesired - amountA);\n', '        }\n', '        if (amountB < amountBDesired) {\n', '            IERC20(tokenB).safeTransfer(msg.sender, amountBDesired - amountB);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Re-write remove liquidity function from Uniswap\n', '     */\n', '    function _removeUniLiquidity(\n', '        address pair,\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        uint256 deadline\n', '    ) internal {\n', '        require(deadline >= block.timestamp, "Migratior: EXPIRED");\n', '        IERC20(pair).safeTransferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n', '        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(address(this));\n', '        (address token0, ) = _sortTokens(tokenA, tokenB);\n', '        (uint256 amountA, uint256 amountB) = tokenA == token0\n', '            ? (amount0, amount1)\n', '            : (amount1, amount0);\n', '        require(amountA >= amountAMin, "Migratior: UNI_INSUFFICIENT_A_AMOUNT");\n', '        require(amountB >= amountBMin, "Migratior: UNI_INSUFFICIENT_B_AMOUNT");\n', '    }\n', '\n', '    /**\n', '     * @dev only approve if the current allowance is 0\n', '     */\n', '    function _safeApproveAllowance(IERC20 token, address spender) internal {\n', '        if (token.allowance(address(this), spender) == 0) {\n', '            token.safeApprove(spender, uint256(-1));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Copy logic of sort token from Uniswap lib\n', '     */\n', '    function _sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "Migrator: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(token0 != address(0), "Migrator: ZERO_ADDRESS");\n', '    }\n', '}']