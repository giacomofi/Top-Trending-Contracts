['// SPDX-License-Identifier: No License\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./IERC165.sol";\n', 'import "./ERC165.sol";\n', 'import "./Address.sol";\n', 'import "./EnumerableMap.sol";\n', 'import "./EnumerableSet.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Strings.sol";\n', 'import "./Stringstrings.sol";\n', 'import "./Context.sol";\n', 'import "./Ownable.sol";\n', 'import "./IERC20.sol";\n', 'import "./IHotties.sol";\n', 'import "./IERC721Enumerable.sol";\n', 'import "./IERC721.sol";\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token metadata api uri.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '/**\n', ' * @title Hotties contract\n', ' * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n', ' */\n', 'contract Hotties is Context, Ownable, ERC165, IHotties, IERC721Metadata {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '    using Strings for uint256;\n', '    using Stringstrings for string;\n', '\n', '    // Public variables\n', '\n', '    // This is SHA256 hash of the provenance record of all HOTTIEs artworks\n', "    // It is derived by hashing every individual NFT's picture, and then concatenating all those hash, deriving yet another SHA256 from that.\n", '    // Learn more about this process at provenance.html\n', '    string public constant HOTTIES_PROVENANCE = "3547e95697ef6c0b274e28f9294f4893bb6a5982e21be8957121fbcf5cd0fab0";\n', '\n', '    // March 31, 2021 @ 12:00:00 AM UTC = 1617148800\n', '    uint256 public constant SALE_START_TIMESTAMP = 1617148800;\n', '\n', '    // Time after which HOTTIEs are randomized and allotted\n', '    uint256 public constant REVEAL_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 14);\n', '\n', '    uint256 public constant NAME_CHANGE_PRICE = 8369 * (10 ** 18);\n', '\n', '    uint256 public constant MAX_NFT_SUPPLY = 8369;\n', '\n', '    uint256 public startingIndexBlock;\n', '\n', '    uint256 public startingIndex;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from holder address to their (enumerable) set of owned tokens\n', '    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n', '\n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _tokenOwners;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from token ID to name\n', '    mapping (uint256 => string) private _tokenName;\n', '\n', '    // Mapping if certain name string has already been reserved\n', '    mapping (string => bool) private _nameReserved;\n', '\n', '    // Mapping from token ID to whether the Hottie was minted before reveal\n', '    mapping (uint256 => bool) private _mintedBeforeReveal;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Base Token URI\n', '    string public _baseURI;\n', '\n', '    // Love Your Hottie token address\n', '    address private _lyhAddress;\n', '\n', '    // Love Your Hottie accessories address\n', '    address public _lyhAccAddress;\n', '\n', '    // Hottie marketplace address\n', '    address public _marketplaceAddress;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 == 0x93254542\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '\n', '    // Events\n', '    event NameChange (uint256 indexed hottieIndex, string newName);\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name, string memory symbol, string memory baseURI, address _lyhAddress) {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _lyhAddress = _lyhAddress;\n', '        _baseURI = baseURI;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _holderTokens[owner].length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view override returns (address) {\n', '        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    // update baseURI allowed to owner only\n', '    function updateBaseURI(string memory baseURI) public onlyOwner {\n', '        _baseURI = baseURI;\n', '    }\n', '\n', '    // update _lyhAccAddress allowed to owner only\n', '    function updateAccessoriesAddress(address accAddress) public onlyOwner {\n', '        _lyhAccAddress = accAddress;\n', '    }\n', '\n', '     // update _marketplaceAddress allowed to owner only\n', '    function updateMarketplaceAddress(address mAddress) public onlyOwner {\n', '        _marketplaceAddress = mAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an URI for a given token ID.\n', '     * Throws if the token ID does not exist. May return an empty string.\n', '     * @param tokenId uint256 ID of the token to query\n', '     */\n', '    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '        return Stringstrings.strConcat(\n', '          _baseURI,\n', '          Stringstrings.uint2str(tokenId)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _holderTokens[owner].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n', '        return _tokenOwners.length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view override returns (uint256) {\n', '        (uint256 tokenId, ) = _tokenOwners.at(index);\n', '        return tokenId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns name of the NFT at index.\n', '     */\n', '    function tokenNameByIndex(uint256 index) public view returns (string memory) {\n', '        return _tokenName[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if the name has been reserved.\n', '     */\n', '    function isNameReserved(string memory nameString) public view returns (bool) {\n', '        return _nameReserved[toLower(nameString)];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if the NFT has been minted before reveal phase\n', '     */\n', '    function isMintedBeforeReveal(uint256 index) public view override returns (bool) {\n', '        return _mintedBeforeReveal[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets current Hottie Price\n', '     */\n', '    function getNFTPrice() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started");\n', '        require(totalSupply() < MAX_NFT_SUPPLY, "Sale has already ended");\n', '\n', '        uint currentSupply = totalSupply();\n', '\n', '        if (currentSupply >= 8365) {\n', '            return 4000000000000000000; // 8365 - 8369 4 ETH\n', '        } else if (currentSupply >= 8090) {\n', '            return 1500000000000000000; // 8090 - 8364 1.5 ETH\n', '        } else if (currentSupply >= 7400) {\n', '            return 1200000000000000000; // 7400  - 8089 1.2 ETH\n', '        } else if (currentSupply >= 6600) {\n', '            return 900000000000000000; // 6600 - 7399 0.9 ETH\n', '        } else if (currentSupply >= 5200) {\n', '            return 700000000000000000; // 5200 - 6599 0.7 ETH\n', '        } else if (currentSupply >= 3000) {\n', '            return 400000000000000000; // 3000 - 5199 0.4 ETH\n', '        } else {\n', '            return 200000000000000000; // 0 - 2999 0.2 ETH\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Mints Hotties\n', '    */\n', '    function mintNFT(uint256 numberOfNfts) public payable {\n', '        require(totalSupply() < MAX_NFT_SUPPLY, "Sale has already ended");\n', '        require(numberOfNfts > 0, "numberOfNfts cannot be 0");\n', '        require(numberOfNfts <= 50, "You may not buy more than 50 NFTs at once");\n', '        require(totalSupply().add(numberOfNfts) <= MAX_NFT_SUPPLY, "Exceeds MAX_NFT_SUPPLY");\n', '        require(getNFTPrice().mul(numberOfNfts) == msg.value, "Ether value sent is not correct");\n', '\n', '        for (uint i = 0; i < numberOfNfts; i++) {\n', '            uint mintIndex = totalSupply();\n', '            if (block.timestamp < REVEAL_TIMESTAMP) {\n', '                _mintedBeforeReveal[mintIndex] = true;\n', '            }\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '\n', '        /**\n', '        * Source of randomness. Theoretical miner withhold manipulation possible but should be sufficient in a pragmatic sense\n', '        */\n', '        if (startingIndexBlock == 0 && (totalSupply() == MAX_NFT_SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)) {\n', '            startingIndexBlock = block.number;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize starting index\n', '     */\n', '    function finalizeStartingIndex() public {\n', '        require(startingIndex == 0, "Starting index is already set");\n', '        require(startingIndexBlock != 0, "Starting index block must be set");\n', '\n', '        startingIndex = uint(blockhash(startingIndexBlock)) % MAX_NFT_SUPPLY;\n', '        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes)\n', '        if (block.number.sub(startingIndexBlock) > 255) {\n', '            startingIndex = uint(blockhash(block.number-1)) % MAX_NFT_SUPPLY;\n', '        }\n', '        // Prevent default sequence\n', '        if (startingIndex == 0) {\n', '            startingIndex = startingIndex.add(1);\n', '        }\n', '\n', '        if (startingIndex == 1) {\n', '            startingIndex = startingIndex.add(1);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the name for HOTTIE tokenId\n', '     */\n', '    function changeName(uint256 tokenId, string memory newName) public {\n', '        address owner = ownerOf(tokenId);\n', '\n', '        require(_msgSender() == owner, "ERC721: caller is not the owner");\n', '        require(validateName(newName) == true, "Not a valid new name");\n', '        require(sha256(bytes(newName)) != sha256(bytes(_tokenName[tokenId])), "New name is same as the current one");\n', '        require(isNameReserved(newName) == false, "Name already reserved");\n', '\n', '        IERC20(_lyhAddress).transferFrom(msg.sender, address(this), NAME_CHANGE_PRICE);\n', '        // If already named, dereserve old name\n', '        if (bytes(_tokenName[tokenId]).length > 0) {\n', '            toggleReserveName(_tokenName[tokenId], false);\n', '        }\n', '        toggleReserveName(newName, true);\n', '        _tokenName[tokenId] = newName;\n', '        IERC20(_lyhAddress).burn(NAME_CHANGE_PRICE);\n', '        emit NameChange(tokenId, newName);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw ether from this contract (Callable by owner)\n', '    */\n', '    function withdrawOwner() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _tokenOwners.contains(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     d*\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[owner].remove(tokenId);\n', '\n', '        _tokenOwners.remove(tokenId);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[from].remove(tokenId);\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ), "ERC721: transfer to non ERC721Receiver implementer");\n', '        bytes4 retval = abi.decode(returndata, (bytes4));\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _approve(address to, uint256 tokenId) private {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '\n', '    /**\n', '     * @dev Reserves the name if isReserve is set to true, de-reserves if set to false\n', '     */\n', '    function toggleReserveName(string memory str, bool isReserve) internal {\n', '        _nameReserved[toLower(str)] = isReserve;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the name string is valid (Alphanumeric and spaces without leading or trailing space)\n', '     */\n', '    function validateName(string memory str) public pure returns (bool){\n', '        bytes memory b = bytes(str);\n', '        if(b.length < 1) return false;\n', '        if(b.length > 25) return false; // Cannot be longer than 25 characters\n', '        if(b[0] == 0x20) return false; // Leading space\n', '        if (b[b.length - 1] == 0x20) return false; // Trailing space\n', '\n', '        bytes1 lastChar = b[0];\n', '\n', '        for(uint i; i<b.length; i++){\n', '            bytes1 char = b[i];\n', '\n', '            if (char == 0x20 && lastChar == 0x20) return false; // Cannot contain continous spaces\n', '\n', '            if(\n', '                !(char >= 0x30 && char <= 0x39) && //9-0\n', '                !(char >= 0x41 && char <= 0x5A) && //A-Z\n', '                !(char >= 0x61 && char <= 0x7A) && //a-z\n', '                !(char == 0x20) //space\n', '            )\n', '                return false;\n', '\n', '            lastChar = char;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Converts the string to lowercase\n', '     */\n', '    function toLower(string memory str) public pure returns (string memory){\n', '        bytes memory bStr = bytes(str);\n', '        bytes memory bLower = new bytes(bStr.length);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            // Uppercase character\n', '            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n', '                bLower[i] = bytes1(uint8(bStr[i]) + 32);\n', '            } else {\n', '                bLower[i] = bStr[i];\n', '            }\n', '        }\n', '        return string(bLower);\n', '    }\n', '}']