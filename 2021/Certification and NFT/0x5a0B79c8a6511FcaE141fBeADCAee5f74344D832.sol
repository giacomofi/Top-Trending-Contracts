['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', 'pragma solidity 0.6.11;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    // constructor () internal {\n', '    //     _status = _NOT_ENTERED;\n', '    // }\n', '\n', '    function _ReentrancyGuard() internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// \n', '// solhint-disable-next-line compiler-version\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// \n', 'interface IERC20Decimals {\n', '    function decimals() external pure returns (uint8);\n', '}\n', '\n', '// \n', 'interface IMintable {\n', '    function mint(address account, uint256 amount) external;\n', '}\n', '\n', '// \n', 'interface IBurnable {\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '// \n', 'interface IOracle {\n', '    function getLatestPrice() external view returns (uint256);\n', '}\n', '\n', '// \n', 'interface IWrappedNativeToken {\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// \n', 'interface IFlashLoanReceiver {\n', '    function execute(address token, uint256 amount, uint256 fee, address back, bytes calldata params) external;\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// \n', 'contract Admined is AccessControl {\n', '    function _Admined(address admin) internal {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(isAdmin(msg.sender), "Restricted to admins");\n', '        _;\n', '    }\n', '\n', '    function isAdmin(address account) public view returns (bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, account);\n', '    }\n', '\n', '    function getAdminCount() public view returns(uint256) {\n', '        return getRoleMemberCount(DEFAULT_ADMIN_ROLE);\n', '    }\n', '\n', '    function addAdmin(address account) public virtual onlyAdmin {\n', '        grantRole(DEFAULT_ADMIN_ROLE, account);\n', '    }\n', '\n', '    function renounceAdmin() public virtual {\n', '        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '        require(\n', '            getRoleMemberCount(DEFAULT_ADMIN_ROLE) >= 1,\n', '            "At least one admin required"\n', '        );\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// \n', 'contract Owned is Admined {\n', '    bytes32 public constant OWNER_ROLE = keccak256("OWNER_ROLE");\n', '\n', '    event AddedOwner(address indexed account);\n', '    event RemovedOwner(address indexed account);\n', '    event RenouncedOwner(address indexed account);\n', '\n', '    //constructor\n', '    function _Owned(address admin, address owner) internal {\n', '        _Admined(admin);\n', '        _setRoleAdmin(OWNER_ROLE, DEFAULT_ADMIN_ROLE);\n', '        _setupRole(OWNER_ROLE, owner);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender), "restricted-to-owners");\n', '        _;\n', '    }\n', '\n', '    function isOwner(address account) public view returns (bool) {\n', '        return hasRole(OWNER_ROLE, account);\n', '    }\n', '\n', '    function getOwners() public view returns (address[] memory) {\n', '        uint256 count = getRoleMemberCount(OWNER_ROLE);\n', '        address[] memory owners = new address[](count);\n', '        for (uint256 i = 0; i < count; ++i) {\n', '            owners[i] = getRoleMember(OWNER_ROLE, i);\n', '        }\n', '        return owners;\n', '    }\n', '\n', '    function addOwner(address account) public onlyAdmin {\n', '        grantRole(OWNER_ROLE, account);\n', '        emit AddedOwner(account);\n', '    }\n', '\n', '    function removeOwner(address account) public onlyAdmin {\n', '        revokeRole(OWNER_ROLE, account);\n', '        emit RemovedOwner(account);\n', '    }\n', '\n', '    function renounceOwner() public {\n', '        renounceRole(OWNER_ROLE, msg.sender);\n', '        emit RenouncedOwner(msg.sender);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// \n', 'contract Lockable is Owned {\n', '    \n', '    mapping(bytes4 => bool) public disabledList; \n', '    bool public globalDisable; \n', '\n', '    function _Lockable() internal {\n', '    }\n', '\n', '    modifier notLocked() {\n', '        require(!globalDisable && !disabledList[msg.sig], "locked");\n', '        _;\n', '    }\n', '\n', '    function enableListAccess(bytes4 sig) public onlyOwner {\n', '        disabledList[sig] = false;\n', '    }\n', '\n', '    function disableListAccess(bytes4 sig) public onlyOwner {\n', '        disabledList[sig] = true;\n', '    }\n', '\n', '    function enableGlobalAccess() public onlyOwner {\n', '        globalDisable = false;\n', '    }\n', '\n', '    function disableGlobalAccess() public onlyOwner {\n', '        globalDisable = true;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// \n', 'contract Vault is Initializable, ReentrancyGuard, Lockable {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event MintCollateral(address indexed sender, address indexed collateralToken, uint256 collateralAmount, uint256 mintAmount, uint256 mintFeeAmount);\n', '    event MintShare(address indexed sender, uint256 shareAmount, uint256 mintAmount);\n', '    event MintCollateralAndShare(address indexed sender, address indexed collateralToken, uint256 collateralAmount, uint256 shareAmount, uint256 mintAmount, uint256 mintFeeCollateralAmount, uint256 globalCollateralRatio);\n', '    event RedeemCollateral(address indexed sender, uint256 stableAmount, address indexed collateralToken, uint256 redeemAmount, uint256 redeemFeeAmount);\n', '    event RedeemShare(address indexed sender, uint256 shareAmount, uint256 redeemAmount);\n', '    event RedeemCollateralAndShare(address indexed sender, uint256 stableAmount, address indexed collateralToken, uint256 redeemCollateralAmount, uint256 redeemShareAmount, uint256 redeemCollateralFeeAmount, uint256 globalCollateralRatio);\n', '    event ExchangeShareBond(address indexed sender, uint256 shareBondAmount);\n', '    event Recollateralize(address indexed sender, uint256 recollateralizeAmount, address indexed collateralToken, uint256 paidbackShareAmount);\n', '    event Buyback(address indexed sender, uint256 shareAmount, address indexed receivedCollateralToken, uint256 buybackAmount, uint256 buybackFeeAmount);\n', '    event FlashLoan(address indexed receiver, address indexed token, uint256 amount, uint256 fee, uint256 timestamp);\n', '\n', '    address constant public NATIVE_TOKEN_ADDRESS = address(0x0000000000000000000000000000000000000000);\n', '    uint256 constant public TARGET_PRICE = 1000000000000000000; //$1\n', '    uint256 constant public SHARE_TOKEN_PRECISION = 1000000000000000000;    //1e18\n', '    uint256 constant public STABLE_TOKEN_PRECISION = 1000000000000000000;   //1e18\n', '    uint256 constant public DELAY_CLAIM_BLOCK = 3;  //prevent flash redeem!! \n', '\n', '    uint256 public redeemFee;               //赎回手续费率 [1e18] 0.45% => 4500000000000000\n', '    uint256 public mintFee;                 //增发手续费率 [1e18] 0.45% => 4500000000000000\n', '    uint256 public buybackFee;              //回购手续费率 [1e18] 0.45% => 4500000000000000\n', '    uint256 public globalCollateralRatio;   //全局质押率 [1e18] 1000000000000000000\n', '    uint256 public flashloanFee;            //闪电贷手续费率\n', '    uint256 public shareBondCeiling;        //股份币债券发行上限.\n', '    uint256 public shareBondSupply;         //股份币债券当前发行量\n', '    uint256 public lastRefreshTime;         //全局质押率的最后调节时间.\n', '\n', '    uint256 public refreshStep;             //全局质押率的单次调节幅度 [1e18] 0.05 => 50000000000000000\n', '    uint256 public refreshPeriod;           //全局质押率的调节周期(seconds)\n', '    uint256 public refreshBand;             //全局质押率的调节线 [1e18] 0.05 => 50000000000000000 \n', '\n', '    address public stableToken;             //stable token\n', '    address public shareToken;              //share token\n', '    address public stableBondToken;         //锚定稳定币的债券代币, 在适当的时候可以赎回. [废弃]\n', '    address public shareBondToken;          //锚定股份币的债券代币, 在适当的时候可以赎回 \n', '    address payable public protocolFund;    //收益基金\n', '\n', '    struct Collateral {\n', '        bool deprecated;                    //抵押物废弃标记 \n', '        uint256 recollateralizeFee;         //在抵押奖励率 [1e18]\n', '        uint256 ceiling;                    //抵押物的铸币上限\n', '        uint256 precision;                  //抵押物的精度\n', '        address oracle;                     //抵押物的预言机\n', '    }\n', '\n', '    mapping(address => uint256) public lastRedeemBlock;         //账户的最后赎回交易块号. account => block.number\n', '    mapping(address => uint256) public redeemedShareBonds;      //账户已赎回但未取回的share代币总量. account => shareAmount\n', '    mapping(address => uint256) public unclaimedCollaterals;    //系统内已赎回但未取回的某抵押物总量. collateralToken => collateralAmount\n', '    mapping(address => mapping(address => uint256)) public redeemedCollaterals; //账户已赎回但未取回的某抵押物总量. account => token => amount\n', '    \n', '    address public shareTokenOracle;\n', '    address public stableTokenOracle;\n', '    \n', '    EnumerableSet.AddressSet private collateralTokens;  //抵押物代币集合.\n', '    mapping(address => Collateral) public collaterals;  //抵押物配置. collateralToken => Collateral \n', '\n', '    address public wrappedNativeToken;    \n', '    bool public kbtToKunImmediately;\n', '    uint256 public buybackBonus;\n', '\n', '    function initialize(\n', '        address _stableToken,\n', '        address _shareToken,\n', '        address _shareBondToken,\n', '        address _wrappedNativeToken,\n', '        address _admin,\n', '        address _stableTokenOracle,\n', '        address _shareTokenOracle\n', '    ) public initializer {\n', '        _Owned(_admin, msg.sender); \n', '        _ReentrancyGuard();\n', '        stableToken = _stableToken;\n', '        shareToken = _shareToken;\n', '        wrappedNativeToken = _wrappedNativeToken;\n', '        shareBondToken = _shareBondToken;\n', '        stableTokenOracle = _stableTokenOracle;\n', '        shareTokenOracle = _shareTokenOracle;\n', '        globalCollateralRatio = 1e18;\n', '    }\n', '\n', '    //计算抵押物价值\n', '    function calculateCollateralValue(address collateralToken, uint256 collateralAmount) public view returns (uint256) {\n', '        return collateralAmount.mul(getCollateralPrice(collateralToken)).div(collaterals[collateralToken].precision); \n', '    }\n', '\n', '    //计算抵押物的铸币数量和手续费(以抵押物计)\n', '    function calculateCollateralMintAmount(address collateralToken, uint256 collateralAmount) public view returns (uint256, uint256) {\n', '        uint256 mintFeeAmount = collateralAmount.mul(mintFee).div(1e18);\n', '        collateralAmount = collateralAmount.sub(mintFeeAmount);\n', '        return (calculateCollateralValue(collateralToken, collateralAmount), mintFeeAmount);\n', '    }\n', '\n', '    //计算股份币的铸币数量\n', '    function calculateShareMintAmount(uint256 shareAmount) public view returns(uint256) {\n', '        return shareAmount.mul(getShareTokenPrice()).div(SHARE_TOKEN_PRECISION);\n', '    }\n', '\n', '    //计算抵押物和股份币的铸币数量\n', '    //@RETURN1 铸币量\n', '    //@RETURN2 所需的股份币的数量\n', '    //@RETURN3 抵押物部分的手续费(以抵押物计)\n', '\n', '    function calculateCollateralAndShareMintAmount(address collateralToken, uint256 collateralAmount) public view returns(uint256, uint256, uint256) {\n', '        uint256 collateralValue = calculateCollateralValue(collateralToken, collateralAmount);\n', '        uint256 shareTokenPrice = getShareTokenPrice();\n', '        //https://docs.qian.finance/qian-v2-whitepaper/minting\n', '        //(1 - Cr) * Cv = Cr * Sv\n', '        //Sv = ((1 - Cr) * Cv) / Cr\n', '        //   = (Cv - (Cv * Cr)) / Cr\n', '        //   = (Cv / Cr) - ((Cv * Cr) / Cr)\n', '        //   = (Cv / Cr) - Cv\n', '\n', '        uint256 shareValue = collateralValue.mul(1e18).div(globalCollateralRatio).sub(collateralValue);\n', '        uint256 shareAmount = shareValue.mul(SHARE_TOKEN_PRECISION).div(shareTokenPrice);\n', '\n', '        uint256 mintFeeValue = collateralValue.mul(mintFee).div(1e18);\n', '        uint256 mintFeeCollateralAmount = calculateEquivalentCollateralAmount(mintFeeValue, collateralToken);\n', '        \n', '        uint256 mintAmount = collateralValue.sub(mintFeeValue).add(shareValue); \n', '        return (mintAmount, shareAmount, mintFeeCollateralAmount);\n', '    }\n', '\n', '    //计算赎回抵押物的数量和手续费(以抵押物计)\n', '    function calculateCollateralRedeemAmount(uint256 stableAmount, address collateralToken) public view returns (uint256, uint256) {\n', '        uint256 redeemAmount = calculateEquivalentCollateralAmount(stableAmount, collateralToken);\n', '        uint256 redeemFeeAmount = redeemAmount.mul(redeemFee).div(1e18);\n', '        return (redeemAmount.sub(redeemFeeAmount), redeemFeeAmount);\n', '    }\n', '\n', '    //计算赎回股份币的数量(以股份币计)\n', '    function calculateShareRedeemAmount(uint256 stableAmount) public view returns (uint256) {\n', '        uint256 shareAmount = stableAmount.mul(SHARE_TOKEN_PRECISION).div(getShareTokenPrice());\n', '        return shareAmount;\n', '    }\n', '\n', '    //计算赎回股份币和抵押物的数量.\n', '    //@RETURN1 抵押物的数量\n', '    //@RETURN2 股份币的数量\n', '    //@RETURN4 抵押物部分的手续费\n', '\n', '    function calculateCollateralAndShareRedeemAmount(uint256 stableAmount, address collateralToken) public view returns (uint256, uint256, uint256) {\n', '        uint256 collateralValue = stableAmount.mul(globalCollateralRatio).div(1e18);\n', '        uint256 collateralAmount = calculateEquivalentCollateralAmount(collateralValue, collateralToken);\n', '\n', '        uint256 shareValue = stableAmount.sub(collateralValue);\n', '        uint256 shareAmount = shareValue.mul(SHARE_TOKEN_PRECISION).div(getShareTokenPrice());\n', '\n', '        uint256 redeemFeeCollateralAmount = collateralAmount.mul(redeemFee).div(1e18);\n', '        \n', '        return (collateralAmount.sub(redeemFeeCollateralAmount), shareAmount, redeemFeeCollateralAmount);\n', '    }\n', '\n', '    //计算同等美元价值的抵押物数量\n', '    //注: 系统中@stableToken的价格总是$1, 所以@stableAmount等价于相同数量的美元.\n', '    function calculateEquivalentCollateralAmount(uint256 stableAmount, address collateralToken) public view returns (uint256) {\n', '        //stableAmount / collateralPrice\n', '        return stableAmount.mul(collaterals[collateralToken].precision).div(getCollateralPrice(collateralToken));    //1e18\n', '    }\n', '\n', '    //100% collateral-backed\n', '    function mint(address collateralToken, uint256 collateralAmount, uint256 minimumReceived) external payable notLocked nonReentrant {\n', '        require(isCollateralToken(collateralToken) && !collaterals[collateralToken].deprecated, "invalid/deprecated-collateral-token");\n', '        require(globalCollateralRatio >= 1e18, "mint-not-allowed");\n', '        (uint256 mintAmount, uint256 mintFeeAmount) = calculateCollateralMintAmount(collateralToken, collateralAmount);\n', '        require(minimumReceived <= mintAmount, "slippage-limit-reached");\n', '        require(getCollateralizedBalance(collateralToken).add(collateralAmount) <= collaterals[collateralToken].ceiling, "ceiling-reached");\n', '\n', '        _depositFrom(collateralToken, msg.sender, collateralAmount);\n', '        _withdrawTo(collateralToken, protocolFund, mintFeeAmount);\n', '\n', '        IMintable(stableToken).mint(msg.sender, mintAmount);\n', '        emit MintCollateral(msg.sender, collateralToken, collateralAmount, mintAmount, mintFeeAmount);\n', '    }\n', '\n', '    // 0% collateral-backed\n', '    function mint(uint256 shareAmount, uint256 minimumReceived) external notLocked nonReentrant {\n', '        require(globalCollateralRatio == 0, "mint-not-allowed");\n', '        uint256 mintAmount = calculateShareMintAmount(shareAmount);\n', '        require(minimumReceived <= mintAmount, "slippage-limit-reached");\n', '        IBurnable(shareToken).burnFrom(msg.sender, shareAmount);\n', '        IMintable(stableToken).mint(msg.sender, mintAmount);\n', '        emit MintShare(msg.sender, shareAmount, mintAmount);\n', '    }\n', '\n', '    // > 0% and < 100% collateral-backed\n', '    function mint(address collateralToken, uint256 collateralAmount, uint256 shareAmount, uint256 minimumReceived) external payable notLocked nonReentrant {\n', '        require(isCollateralToken(collateralToken) && !collaterals[collateralToken].deprecated, "invalid/deprecated-collateral-token");\n', '        require(globalCollateralRatio < 1e18 && globalCollateralRatio > 0, "mint-not-allowed");\n', '        require(getCollateralizedBalance(collateralToken).add(collateralAmount) <= collaterals[collateralToken].ceiling, "ceiling-reached");\n', '        (uint256 mintAmount, uint256 shareNeeded, uint256 mintFeeCollateralAmount) = calculateCollateralAndShareMintAmount(collateralToken, collateralAmount);\n', '        require(minimumReceived <= mintAmount, "slippage-limit-reached");\n', '        require(shareNeeded <= shareAmount, "need-more-shares");\n', '        \n', '        IBurnable(shareToken).burnFrom(msg.sender, shareNeeded);\n', '\n', '        _depositFrom(collateralToken, msg.sender, collateralAmount);\n', '        _withdrawTo(collateralToken, protocolFund, mintFeeCollateralAmount);\n', '\n', '        IMintable(stableToken).mint(msg.sender, mintAmount);\n', '        emit MintCollateralAndShare(msg.sender, collateralToken, collateralAmount, shareNeeded, mintAmount, mintFeeCollateralAmount, globalCollateralRatio);\n', '    }\n', '\n', '    // Redeem collateral. 100% collateral-backed\n', '    function redeem(uint256 stableAmount, address receivedCollateralToken, uint256 minimumReceivedCollateralAmount) external notLocked nonReentrant {\n', '        require(globalCollateralRatio == 1e18, "redeem-not-allowed");\n', '        (uint256 redeemAmount, uint256 redeemFeeAmount) = calculateCollateralRedeemAmount(stableAmount, receivedCollateralToken);\n', '        require(redeemAmount.add(redeemFeeAmount) <= getCollateralizedBalance(receivedCollateralToken), "not-enough-collateral");\n', '        require(minimumReceivedCollateralAmount <= redeemAmount, "slippage-limit-reached");\n', '        redeemedCollaterals[msg.sender][receivedCollateralToken] = redeemedCollaterals[msg.sender][receivedCollateralToken].add(redeemAmount);\n', '        unclaimedCollaterals[receivedCollateralToken] = unclaimedCollaterals[receivedCollateralToken].add(redeemAmount);\n', '        lastRedeemBlock[msg.sender] = block.number;\n', '        IBurnable(stableToken).burnFrom(msg.sender, stableAmount);\n', '        _withdrawTo(receivedCollateralToken, protocolFund, redeemFeeAmount);\n', '        emit RedeemCollateral(msg.sender, stableAmount, receivedCollateralToken, redeemAmount, redeemFeeAmount);\n', '    }\n', '\n', '    // Redeem QSD for collateral and KUN. > 0% and < 100% collateral-backed\n', '    function redeem(uint256 stableAmount, address collateralToken, uint256 minimumReceivedCollateralAmount, uint256 minimumReceivedShareAmount) external notLocked nonReentrant {\n', '        require(globalCollateralRatio < 1e18 && globalCollateralRatio > 0, "redeem-not-allowed");\n', '        (uint256 collateralAmount, uint256 shareAmount, uint256 redeemFeeCollateralAmount) = calculateCollateralAndShareRedeemAmount(stableAmount, collateralToken);\n', '        require(collateralAmount.add(redeemFeeCollateralAmount) <= getCollateralizedBalance(collateralToken), "not-enough-collateral");\n', '        require(minimumReceivedCollateralAmount <= collateralAmount && minimumReceivedShareAmount <= shareAmount, "collaterals/shares-slippage-limit-reached");\n', '        redeemedCollaterals[msg.sender][collateralToken] = redeemedCollaterals[msg.sender][collateralToken].add(collateralAmount);\n', '        unclaimedCollaterals[collateralToken] = unclaimedCollaterals[collateralToken].add(collateralAmount);\n', '        redeemedShareBonds[msg.sender] = redeemedShareBonds[msg.sender].add(shareAmount);\n', '        shareBondSupply = shareBondSupply.add(shareAmount);\n', '        require(shareBondSupply <= shareBondCeiling, "sharebond-ceiling-reached");\n', '        lastRedeemBlock[msg.sender] = block.number;\n', '        IBurnable(stableToken).burnFrom(msg.sender, stableAmount);\n', '        _withdrawTo(collateralToken, protocolFund, redeemFeeCollateralAmount);\n', '        emit RedeemCollateralAndShare(msg.sender, stableAmount, collateralToken, collateralAmount, shareAmount, redeemFeeCollateralAmount, globalCollateralRatio);\n', '    }\n', '\n', '    // Redeem QSD for KUN. 0% collateral-backed\n', '    function redeem(uint256 stableAmount, uint256 minimumReceivedShareAmount) external notLocked nonReentrant {\n', '        require(globalCollateralRatio == 0, "redeem-not-allowed");\n', '        uint256 shareAmount = calculateShareRedeemAmount(stableAmount);\n', '        require(minimumReceivedShareAmount <= shareAmount, "slippage-limit-reached");\n', '        redeemedShareBonds[msg.sender] = redeemedShareBonds[msg.sender].add(shareAmount);\n', '        shareBondSupply = shareBondSupply.add(shareAmount);\n', '        require(shareBondSupply <= shareBondCeiling, "sharebond-ceiling-reached");\n', '        lastRedeemBlock[msg.sender] = block.number;\n', '        IBurnable(stableToken).burnFrom(msg.sender, stableAmount);\n', '        emit RedeemShare(msg.sender, stableAmount, shareAmount);\n', '    }\n', '\n', '    function claim() external notLocked nonReentrant {\n', '        require(lastRedeemBlock[msg.sender].add(DELAY_CLAIM_BLOCK) <= block.number,"not-delay-claim-redeemed");\n', '        uint256 length = collateralTokens.length();\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            address collateralToken = collateralTokens.at(i);\n', '            if (redeemedCollaterals[msg.sender][collateralToken] > 0) {\n', '                uint256 collateralAmount = redeemedCollaterals[msg.sender][collateralToken];\n', '                redeemedCollaterals[msg.sender][collateralToken] = 0;\n', '                unclaimedCollaterals[collateralToken] = unclaimedCollaterals[collateralToken].sub(collateralAmount);\n', '                _withdrawTo(collateralToken, msg.sender, collateralAmount);\n', '            }\n', '        }\n', '        if (redeemedShareBonds[msg.sender] > 0) {\n', '            uint256 shareAmount = redeemedShareBonds[msg.sender];\n', '            redeemedShareBonds[msg.sender] = 0;\n', '            IMintable(shareBondToken).mint(msg.sender, shareAmount);\n', '        }\n', '    }\n', '\n', '    //当系统的实际质押率低于全局质押率时, 需要用户向系统补充抵押物。 用户会获得相应价值的KUN债券和部分额外的KUN债券奖励.\n', '    function recollateralize(address collateralToken, uint256 collateralAmount, uint256 minimumReceivedShareAmount) external payable notLocked nonReentrant {\n', '        require(isCollateralToken(collateralToken) && !collaterals[collateralToken].deprecated, "deprecated-collateral-token");\n', '        \n', '        uint256 gapCollateralValue = getGapCollateralValue();\n', '        require(gapCollateralValue > 0, "no-gap-collateral-to-recollateralize");\n', '        uint256 recollateralizeValue = Math.min(gapCollateralValue, calculateCollateralValue(collateralToken, collateralAmount));\n', '        uint256 paidbackShareAmount = recollateralizeValue.mul(uint256(1e18).add(collaterals[collateralToken].recollateralizeFee)).div(getShareTokenPrice());\n', '        require(minimumReceivedShareAmount <= paidbackShareAmount, "slippage-limit-reached");\n', '       \n', '        uint256 recollateralizeAmount = recollateralizeValue.mul(1e18).div(getCollateralPrice(collateralToken));\n', '        require(getCollateralizedBalance(collateralToken).add(recollateralizeAmount) <= collaterals[collateralToken].ceiling, "ceiling-reached");\n', '        shareBondSupply = shareBondSupply.add(paidbackShareAmount);\n', '        require(shareBondSupply <= shareBondCeiling, "sharebond-ceiling-reached");\n', '        \n', '        _depositFrom(collateralToken, msg.sender, collateralAmount);\n', '        _withdrawTo(collateralToken, msg.sender, collateralAmount.sub(recollateralizeAmount));\n', '\n', '        IMintable(shareBondToken).mint(msg.sender, paidbackShareAmount);\n', '        emit Recollateralize(msg.sender, recollateralizeAmount, collateralToken, paidbackShareAmount);\n', '    }\n', '\n', '    //当系统的实际质押率高于全局质押率时, 需要可以使用KUN向系统购买抵押物。\n', '    function buyback(uint256 shareAmount, address receivedCollateralToken) external notLocked nonReentrant {\n', '        uint256 excessCollateralValue = getExcessCollateralValue();\n', '        require(excessCollateralValue > 0, "no-excess-collateral-to-buyback");\n', '        uint256 shareTokenPrice = getShareTokenPrice();\n', '        uint256 shareValue = shareAmount.mul(shareTokenPrice).div(1e18);\n', '        shareValue = shareValue.mul(uint256(1e18).add(buybackBonus)).div(1e18); //0.01e18\n', '        uint256 buybackValue = excessCollateralValue > shareValue ? shareValue : excessCollateralValue;\n', '        uint256 neededAmount = buybackValue.mul(1e18).div(shareTokenPrice);\n', '        neededAmount = neededAmount.mul(1e18).div(uint256(1e18).add(buybackBonus));\n', '        IBurnable(shareToken).burnFrom(msg.sender, neededAmount);\n', '        uint256 buybackAmount = calculateEquivalentCollateralAmount(buybackValue, receivedCollateralToken);\n', '        require(buybackAmount <= getCollateralizedBalance(receivedCollateralToken), "insufficient-collateral-amount");\n', '        uint256 buybackFeeAmount = buybackAmount.mul(buybackFee).div(1e18);\n', '        buybackAmount = buybackAmount.sub(buybackFeeAmount);\n', '\n', '        _withdrawTo(receivedCollateralToken, msg.sender, buybackAmount);\n', '        _withdrawTo(receivedCollateralToken, protocolFund, buybackFeeAmount);\n', '\n', '        emit Buyback(msg.sender, shareAmount, receivedCollateralToken, buybackAmount, buybackFeeAmount);\n', '    }\n', '\n', '    //在同时满足下面两个条件的时候, KUN债券可以1:1兑换为KUN:\n', '    //  1. 当系统的实际质押率高于全局质押率时\n', '    //  &&\n', '    //  2. QSD的价格在目标价格以上(>$1)\n', '    function exchangeShareBond(uint256 shareBondAmount) external notLocked nonReentrant {\n', '        if(!kbtToKunImmediately) {\n', '            uint256 excessCollateralValue = getExcessCollateralValue();\n', '            require(excessCollateralValue > 0, "no-excess-collateral-to-buyback");\n', '            uint256 stableTokenPrice = getStableTokenPrice(); \n', '            require(stableTokenPrice > TARGET_PRICE, "price-not-eligible-for-bond-redeem");\n', '        }\n', '        shareBondSupply = shareBondSupply.sub(shareBondAmount);\n', '        IBurnable(shareBondToken).burnFrom(msg.sender, shareBondAmount);\n', '        IMintable(shareToken).mint(msg.sender, shareBondAmount);\n', '        emit ExchangeShareBond(msg.sender, shareBondAmount);\n', '    }\n', '\n', '    //调节全局质押率.\n', '    function refreshCollateralRatio() public notLocked {\n', '        uint256 stableTokenPrice = getStableTokenPrice();\n', '        require(block.timestamp - lastRefreshTime >= refreshPeriod, "refresh-cooling-period");\n', '        if (stableTokenPrice > TARGET_PRICE.add(refreshBand)) { //decrease collateral ratio\n', '            if (globalCollateralRatio <= refreshStep) {  \n', '                globalCollateralRatio = 0;  //if within a step of 0, go to 0\n', '            } else {\n', '                globalCollateralRatio = globalCollateralRatio.sub(refreshStep);\n', '            }\n', '        } else if (stableTokenPrice < TARGET_PRICE.sub(refreshBand)) { //increase collateral ratio\n', '            if (globalCollateralRatio.add(refreshStep) >= 1e18) {  \n', '                globalCollateralRatio = 1e18; // cap collateral ratio at 1\n', '            } else {\n', '                globalCollateralRatio = globalCollateralRatio.add(refreshStep);\n', '            }\n', '        }\n', '        lastRefreshTime = block.timestamp; // Set the time of the last expansion\n', '    }\n', '\n', '    function flashloan(\n', '        address receiver,\n', '        address token,\n', '        uint256 amount,\n', '        bytes memory params\n', '    ) public notLocked nonReentrant {\n', '        require(isCollateralToken(token), "invalid-collateral-token");\n', '        require(amount > 0, "invalid-flashloan-amount");\n', '\n', '        address t = (token == NATIVE_TOKEN_ADDRESS) ? wrappedNativeToken : token;\n', '        uint256 balancesBefore = IERC20(t).balanceOf(address(this));\n', '        require(balancesBefore >= amount, "insufficient-balance");\n', '\n', '        uint256 balance = address(this).balance;\n', '\n', '        uint256 fee = amount.mul(flashloanFee).div(1e18);\n', '        require(fee > 0, "invalid-flashloan-fee");\n', '\n', '        IFlashLoanReceiver flashLoanReceiver = IFlashLoanReceiver(receiver);\n', '        address payable _receiver = address(uint160(receiver));\n', '\n', '        // withdraw ether from WXXX to _receiver\n', '        _withdrawTo(token, _receiver, amount);\n', '        flashLoanReceiver.execute(token, amount, fee, address(this), params);\n', '\n', '        if(token == NATIVE_TOKEN_ADDRESS) {\n', '            //move _receiver repaid ether to WXXX\n', '            require(address(this).balance >= balance.add(amount).add(fee), "ether-balance-exception");\n', '            IWrappedNativeToken(wrappedNativeToken).deposit{value: amount.add(fee)}();\n', '        }\n', '\n', '        uint256 balancesAfter = IERC20(t).balanceOf(address(this));\n', '        require(balancesAfter >= balancesBefore.add(fee), "balance-exception");\n', '\n', '        _withdrawTo(token, protocolFund, fee);\n', '        emit FlashLoan(receiver, token, amount, fee, block.timestamp);\n', '    }\n', '\n', '    function getNeededCollateralValue() public view returns(uint256) {\n', '        uint256 stableSupply = IERC20(stableToken).totalSupply();\n', '        // Calculates collateral needed to back each 1 QSD with $1 of collateral at current collat ratio\n', '        return stableSupply.mul(globalCollateralRatio).div(1e18);\n', '    }\n', '\n', '    // Returns the value of excess collateral held in this pool, compared to what is needed to maintain the global collateral ratio\n', '    function getExcessCollateralValue() public view returns (uint256) {\n', '        uint256 totalCollateralValue = getTotalCollateralValue(); \n', '        uint256 neededCollateralValue = getNeededCollateralValue();\n', '        if (totalCollateralValue > neededCollateralValue)\n', '            return totalCollateralValue.sub(neededCollateralValue);\n', '        return 0;\n', '    }\n', '\n', '    function getGapCollateralValue() public view returns(uint256) {\n', '        uint256 totalCollateralValue = getTotalCollateralValue();\n', '        uint256 neededCollateralValue = getNeededCollateralValue();\n', '        if(totalCollateralValue < neededCollateralValue)\n', '            return neededCollateralValue.sub(totalCollateralValue);\n', '        return 0;\n', '    }\n', '    \n', '    function getShareTokenPrice() public view returns(uint256) {\n', '        return IOracle(shareTokenOracle).getLatestPrice();\n', '    }\n', '    function getStableTokenPrice() public view returns(uint256) {\n', '        return IOracle(stableTokenOracle).getLatestPrice();\n', '    }\n', '    function getCollateralPrice(address token) public view returns (uint256) {\n', '        return IOracle(collaterals[token].oracle).getLatestPrice();\n', '    }\n', '\n', '    function getTotalCollateralValue() public view returns (uint256) {\n', '        uint256 totalCollateralValue = 0;\n', '        uint256 length = collateralTokens.length();\n', '        for (uint256 i = 0; i < length; ++i)\n', '            totalCollateralValue = totalCollateralValue.add(getCollateralValue(collateralTokens.at(i)));\n', '        return totalCollateralValue;\n', '    }\n', '\n', '    function getCollateralValue(address token) public view returns (uint256) {\n', '        if(isCollateralToken(token))\n', '            return getCollateralizedBalance(token).mul(getCollateralPrice(token)).div(collaterals[token].precision);\n', '        return 0;\n', '    }\n', '\n', '    function isCollateralToken(address token) public view returns (bool) {\n', '        return collateralTokens.contains(token);\n', '    }\n', '\n', '    function getCollateralTokens() public view returns (address[] memory) {\n', '        uint256 length = collateralTokens.length();\n', '        address[] memory tokens = new address[](length);\n', '        for (uint256 i = 0; i < length; ++i)\n', '            tokens[i] = collateralTokens.at(i);\n', '        return tokens;\n', '    }\n', '\n', '    function getCollateralizedBalance(address token) public view returns(uint256) {\n', '        address tt = (token == NATIVE_TOKEN_ADDRESS) ? wrappedNativeToken : token;\n', '        uint256 balance = IERC20(tt).balanceOf(address(this));\n', '        return balance.sub(Math.min(balance, unclaimedCollaterals[token]));\n', '    }\n', '\n', '    function setStableTokenOracle(address newStableTokenOracle) public onlyOwner {\n', '        stableTokenOracle = newStableTokenOracle;\n', '    }\n', '\n', '    function setShareTokenOracle(address newShareTokenOracle) public onlyOwner {\n', '        shareTokenOracle = newShareTokenOracle;\n', '    }\n', '\n', '    function setRedeemFee(uint256 newRedeemFee) external onlyOwner {\n', '        redeemFee = newRedeemFee;\n', '    }\n', '\n', '    function setMintFee(uint256 newMintFee) external onlyOwner {\n', '        mintFee = newMintFee;\n', '    }\n', '\n', '    function setBuybackFee(uint256 newBuybackFee) external onlyOwner {\n', '        buybackFee = newBuybackFee;\n', '    }\n', '\n', '    function addCollateralToken(address token, address oracle, uint256 ceiling, uint256 recollateralizeFee) external onlyOwner {\n', '        require(collateralTokens.add(token) || collaterals[token].deprecated, "duplicated-collateral-token");\n', '        if(token == NATIVE_TOKEN_ADDRESS) {\n', '            collaterals[token].precision = 10**18;\n', '        } else {\n', '            uint256 decimals = IERC20Decimals(token).decimals();\n', '            require(decimals <= 18, "unexpected-collateral-token");\n', '            collaterals[token].precision = 10**decimals;\n', '        }\n', '        collaterals[token].deprecated = false;\n', '        collaterals[token].oracle = oracle;\n', '        collaterals[token].ceiling = ceiling;\n', '        collaterals[token].recollateralizeFee = recollateralizeFee;\n', '    }\n', '\n', '    function deprecateCollateralToken(address token) external onlyOwner {\n', '        require(isCollateralToken(token), "not-found-collateral-token");\n', '        collaterals[token].deprecated = true;\n', '    }\n', '\n', '    function removeCollateralToken(address token) external onlyOwner {\n', '        require(collaterals[token].deprecated, "undeprecated-collateral-token");\n', '        require(collateralTokens.remove(token), "not-found-token");\n', '        delete collaterals[token];\n', '    }\n', '\n', '    function updateCollateralToken(address token, address newOracle, uint256 newCeiling, uint256 newRecollateralizeFee) public onlyOwner {\n', '        require(isCollateralToken(token), "not-found-collateral-token");\n', '        collaterals[token].ceiling = newCeiling;\n', '        collaterals[token].oracle = newOracle;\n', '        collaterals[token].recollateralizeFee = newRecollateralizeFee;\n', '    }\n', '\n', '    function setRefreshPeriod(uint256 newRefreshPeriod) external onlyOwner {\n', '        refreshPeriod = newRefreshPeriod;\n', '    }\n', '\n', '    function setRefreshStep(uint256 newRefreshStep) external onlyOwner {\n', '        refreshStep = newRefreshStep;\n', '    }\n', '\n', '    function setRefreshBand(uint256 newRefreshBand) external onlyOwner {\n', '        refreshBand = newRefreshBand;\n', '    }\n', '\n', '    function setProtocolFund(address payable newProtocolFund) public onlyOwner {\n', '        protocolFund =  newProtocolFund;\n', '    }\n', '\n', '    function setFlashloanFee(uint256 newFlashloanFee) public onlyOwner {\n', '        flashloanFee = newFlashloanFee;\n', '    }\n', '\n', '    function setGlobalCollateralRatio(uint256 newGlobalCollateralRatio) public onlyOwner {\n', '        globalCollateralRatio = newGlobalCollateralRatio;\n', '    }\n', '\n', '    function setShareBondCeiling(uint256 newShareBondCeiling) public onlyOwner {\n', '        shareBondCeiling = newShareBondCeiling;\n', '    }\n', '\n', '    function setBuybackBonus(uint256 newBuybackBonus) public onlyOwner {\n', '        buybackBonus = newBuybackBonus;\n', '    }\n', '    \n', '    function setKbtToKunImmediately() public onlyOwner {\n', '        kbtToKunImmediately = !kbtToKunImmediately;\n', '    }\n', '\n', '    function _withdrawTo(address token, address payable to, uint256 amount) internal {\n', '        if(token == NATIVE_TOKEN_ADDRESS) {\n', '            IWrappedNativeToken(wrappedNativeToken).withdraw(amount);\n', '            to.transfer(amount);\n', '        } else {\n', '           IERC20(token).transfer(to, amount);\n', '        }\n', '    }\n', '\n', '    function _depositFrom(address token, address from, uint256 amount) internal {\n', '        if(token == NATIVE_TOKEN_ADDRESS) {\n', '            require(msg.value == amount, "msg.value != amount");\n', '            IWrappedNativeToken(wrappedNativeToken).deposit{value: amount}();\n', '        } else {\n', '           IERC20(token).transferFrom(from, address(this), amount);\n', '        }\n', '    }\n', '\n', '    receive() external payable {\n', '        // require(msg.sender == wrappedNativeToken, "Only WXXX can send ether");\n', '    }   \n', '}']