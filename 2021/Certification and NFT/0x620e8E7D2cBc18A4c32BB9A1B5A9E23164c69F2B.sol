['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.2;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract DutchAuction{\n', '\n', '    IERC20 public token;\n', '    mapping (address => uint) public reserve;\n', '    mapping (address => uint) public committed;\n', '    mapping (address => bool) public whitelisted;\n', '    uint256 public startPrice;\n', '    uint256 public tokensLeft;\n', '    uint256 public minPrice;\n', '    address payable public owner;\n', '    uint256 public bought;\n', '    uint256 public price;\n', '    uint256 public tokensStart;\n', '    uint256 public finish;\n', '    uint256 public start;\n', '    bool public whitelistOnly;\n', '    bool public hasClaimed;\n', '    uint256 public open; // 0 = closed, 1 = open, 2 = ended;\n', '    address factory;\n', '\n', '    constructor() {\n', "        // Don't allow implementation to be initialized.\n", '        token = IERC20(address(1));\n', '    }\n', '\n', '    function initialize(IERC20 _token, address payable _owner, address factory_) external {\n', '        require(address(token) == address(0), "already initialized");\n', '        require(address(_token) != address(0), "token can not be null");\n', '\n', '        owner = _owner;\n', '        token = _token;\n', '        factory = factory_;\n', '    }\n', '\n', '    function changeOwner(address payable newOwner) external {\n', '        require(msg.sender == owner, "Not owner");\n', '        owner = newOwner;\n', '    }\n', '\n', '    function startAuction(\n', '        uint256 min,\n', '        uint256 _startPrice,\n', '        uint256 _start,\n', '        uint256 _finish,\n', '        address[] memory whitelistd,\n', '        bool whitelist\n', '    )\n', '    public\n', '    {\n', '        require(msg.sender == owner, "Not owner");\n', '        require(open == 0, "Auction has started");\n', '        require(_start < _finish, "Start time below finish time");\n', '        require(_finish > block.timestamp, "Finish time must be in the future");\n', '        require(_start >= block.timestamp, "Start time must be in the future");\n', '\n', '        finish = _finish;\n', '        start = _start;\n', '        startPrice = _startPrice;\n', '        minPrice = min;\n', '        tokensLeft = token.balanceOf(address(this));\n', '        tokensStart = token.balanceOf(address(this));\n', '        open = 1;\n', '        whitelistOnly = whitelist;\n', '\n', '        if (whitelist) {\n', '            for (uint i=0; i < whitelistd.length; i++) {\n', '                whitelisted[whitelistd[i]] = true;\n', '            }\n', '        }\n', '\n', '        updateCurrentPrice();\n', '    }\n', '\n', '    function getCurrentPrice() public view returns (uint256) {\n', '        uint256 returnPrice = startPrice;\n', '\n', '        if (open == 1 && block.timestamp >= start) {\n', '            returnPrice = startPrice*(finish - block.timestamp) / (finish - start);\n', '            if (returnPrice < minPrice){\n', '                returnPrice = minPrice;\n', '            }\n', '        }\n', '        if (open == 2) {\n', '            returnPrice = price;\n', '        }\n', '\n', '        return returnPrice;\n', '    }\n', '\n', '    function updateCurrentPrice() public returns (uint256) {\n', '        require (open != 0, "Auction has not started");\n', '\n', '        if (open == 1) {\n', '            if (finish <= block.timestamp){\n', '                open = 2;\n', '            }\n', '            if (block.timestamp >= start) {\n', '                price = startPrice*(finish - block.timestamp) / (finish - start);\n', '                if (price < minPrice){\n', '                    price = minPrice;\n', '                }\n', '            }\n', '        }\n', '\n', '        return price;\n', '    }\n', '\n', '    function closeAuction() public {\n', '        require (open == 1, "Not active");\n', '        require ((msg.sender == owner && bought == 0) || (block.timestamp > finish),\n', '            "Either not owner and no current bid or auction finish time not reached");\n', '\n', '        open = 2;\n', '    }\n', '\n', '    function updateWhitelist(address[] memory whitelistd) public{\n', '        require (msg.sender == owner, "Not owner");\n', '\n', '        for (uint256 i=0; i < whitelistd.length; i++) {\n', '            whitelisted[whitelistd[i]] = true;\n', '        }\n', '    }\n', '\n', '    function bid(uint256 amount) public payable {\n', '        require (open == 1 && block.timestamp >= start, "Not active auction or start time not reached");\n', '        require (msg.value >= updateCurrentPrice() * amount / 10 ** 18, "Not enough payment");\n', '        require (msg.value > 0, "Cant bid with 0");\n', '\n', '        if (whitelistOnly){\n', '            require(whitelisted[msg.sender]);\n', '        }\n', '\n', '        if (tokensLeft < amount){\n', '            amount = tokensLeft;\n', '        }\n', '\n', '        tokensLeft = tokensLeft - amount;\n', '        reserve[msg.sender] += amount;\n', '        committed[msg.sender] += msg.value;\n', '        bought += amount;\n', '\n', '        if (tokensLeft == 0){\n', '            open = 2;\n', '        }\n', '    }\n', '\n', '    function claim() public {\n', '        require(open == 2, "Not closed");\n', '        uint256 refund;\n', '        uint256 tokens;\n', '        tokens = reserve[msg.sender];\n', '        committed[msg.sender] -= reserve[msg.sender] * price / 10 ** 18;\n', '        reserve[msg.sender] = 0;\n', '        refund = committed[msg.sender];\n', '        committed[msg.sender] = 0;\n', '        token.transfer(msg.sender, tokens);\n', '        payable(msg.sender).transfer(refund);\n', '    }\n', '\n', '    fallback () external payable {\n', '        if (open == 1 && block.timestamp >= start){\n', '            bid(msg.value * 10 ** 18 / updateCurrentPrice());\n', '        }\n', '        else if (open == 2){\n', '            require(msg.value == 0);\n', '            claim();\n', '            if (msg.sender == owner){\n', '                withdraw();\n', '            }\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(hasClaimed == false, "Has been claimed");\n', '        require(open == 2, "Not closed");\n', '\n', '        hasClaimed = true;\n', '        uint256 withdrawAmount = price * bought / 10**18;\n', '        uint256 withdrawFee = withdrawAmount / 200;\n', '\n', '        address payable alchemyRouter = IDutchAuctionFactory(factory).getRouter();\n', '\n', '        // send a 0.5% fee to the router\n', '        IAlchemyRouter(alchemyRouter).deposit{value: withdrawFee}();\n', '\n', '        owner.transfer(withdrawAmount - withdrawFee);\n', '        token.transfer(owner, tokensLeft);\n', '    }\n', '}\n', '\n', 'interface IDutchAuctionFactory {\n', '    function getRouter() external view returns (address payable);\n', '}\n', '\n', '\n', 'interface IAlchemyRouter {\n', '    function deposit() external payable;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']