['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '//////////////////////////////////////////////////\n', '// CUSTOM LOGIC STARTS HERE, PURE OZ CODE ABOVE //\n', '//////////////////////////////////////////////////\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IERC20L is IERC20 {\n', '    function transferLocked(address recipient, uint256 amount, uint32 hardLockUntil, uint32 softLockUntil, uint8 allowedHops) external returns (bool);\n', '}\n', '\n', 'contract LockedQANX is Ownable {\n', '\n', '    // THE CONTRACT ADDRESS OF QANX AND USDT\n', '    IERC20L private _qanx = IERC20L(0xAAA7A10a8ee237ea61E8AC46C50A8Db8bCC1baaa);\n', '    IERC20  private _usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '\n', "    // THIS REPRESENTS AN OFFER'S PROPERTIES GIVEN TO A BUYER\n", '    struct Offer {\n', '        uint256 qanxAmount;     // HOW MANY QANX TOKENS ARE OFFERED FOR SALE\n', '        uint256 usdtAmount;     // HOW MUCH USDT TO SEND TO CLAIM THE OFFERED TOKENS\n', '        uint32 claimableHours;  // UNTIL WHEN THIS OFFER IS CLAIMABLE FROM NOW (HOURS)\n', '        uint32 hardLockUntil;   // UNTIL WHEN THE BOUGHT TOKENS WILL BE LOCKED\n', '        uint32 softLockUntil;   // UNTIL WHEN THE BOUGHT TOKENS WILL BE GRADUALLY RELEASED\n', '        uint8 allowedHops;      // HOW MANY FURTHER TRANSFERS ARE ALLOWED\n', '    }\n', '\n', '    // THIS MAPS THE BUYER ADDRESSES TO THE OFFERS GIVEN TO THEM\n', '    mapping (address => Offer) public offers;\n', '\n', '    // MAKE AN OFFER TO A BUYER\n', '    function makeOffer(\n', '        address _toBuyer,\n', '        uint256 _qanxAmount,\n', '        uint256 _usdtAmount,\n', '        uint32 _claimableHours,\n', '        uint32 _hardLockUntil,\n', '        uint32 _softLockUntil,\n', '        uint8 _allowedHops) public onlyOwner {\n', '        \n', '        // IF ABOVE CONDITIONS WERE MET, REGISTER OFFER\n', '        offers[_toBuyer] = Offer({\n', '            qanxAmount: _qanxAmount * (10 ** 18),   // QANX TOKEN HAS 18 DECIMALS\n', '            usdtAmount: _usdtAmount * (10 ** 6),    // USDT TOKEN HAS 6  DECIMALS\n', '            claimableHours: uint32(block.timestamp + _claimableHours * 3600),\n', '            hardLockUntil: _hardLockUntil,\n', '            softLockUntil: _softLockUntil,\n', '            allowedHops: _allowedHops\n', '        });\n', '    }\n', '\n', '    // NON-CLAIMED OFFERS CAN BE CANCELLED\n', '    function cancelOffer(address _ofBuyer) public onlyOwner {\n', '\n', "        // REMOVE BUYER'S OFFER FROM MAPPING\n", '        delete offers[_ofBuyer];\n', '    }\n', '\n', '    // BUYERS NEED TO SEND A ZERO ETH TX TO SWAP USDT -> QANX\n', '    fallback() external payable {\n', '\n', '        // OFFER MUST BE STILL CLAIMABLE\n', '        require(offers[_msgSender()].claimableHours > block.timestamp, "Offer expired!");\n', '\n', '        // MAKE SURE THIS CONTRACT CAN SEND ENOUGH QANX TO BUYER\n', '        uint256 qanxAllowance = _qanx.allowance(owner(), address(this));\n', '        require(offers[_msgSender()].qanxAmount <= qanxAllowance, "Not enough QANX tokens approved");\n', '\n', '        // REQUIRE THAT BUYER HAS APPROVED CORRECT USDT PURCHASE PRICE\n', '        uint256 usdtAllowance = _usdt.allowance(_msgSender(), address(this));\n', '        require(offers[_msgSender()].usdtAmount == usdtAllowance, "Incorrect purchase price approved");\n', '\n', '        // TRANSFER USDT FROM BUYER TO THIS CONTRACT\n', '        _usdt.transferFrom(_msgSender(), address(this), usdtAllowance);\n', '\n', '        // TRANSFER UNLOCKED QANX TO THIS CONTRACT\n', '        _qanx.transferFrom(owner(), address(this), offers[_msgSender()].qanxAmount);\n', '        _qanx.transferLocked(\n', '            _msgSender(),\n', '            offers[_msgSender()].qanxAmount,\n', '            offers[_msgSender()].hardLockUntil,\n', '            offers[_msgSender()].softLockUntil,\n', '            offers[_msgSender()].allowedHops\n', '        );\n', '\n', "        // REMOVE BUYER'S OFFER FROM MAPPING\n", '        delete offers[_msgSender()];\n', '    }\n', '\n', '    // SELLER CAN CLAIM THE AMOUNT PAID BY THE BUYER\n', '    function claimPurchasePrice(address _beneficiary) public onlyOwner {\n', '        _usdt.transfer(_beneficiary, _usdt.balanceOf(address(this)));\n', '    }\n', '}']