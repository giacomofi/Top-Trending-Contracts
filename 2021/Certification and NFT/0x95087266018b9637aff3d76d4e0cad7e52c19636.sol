['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// Sources flattened with hardhat v2.4.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/extensions/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', '// File @api3-dao/api3-voting/interfaces/v0.8.4/[email\xa0protected]\n', '\n', 'pragma solidity 0.8.4;\n', '\n', 'interface IApi3Voting {\n', '     enum VoterState { Absent, Yea, Nay }\n', '\n', '    function votesLength()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getVote(uint256 _voteId)\n', '        external\n', '        view\n', '        returns (\n', '            bool open,\n', '            bool executed,\n', '            uint64 startDate,\n', '            uint64 snapshotBlock,\n', '            uint64 supportRequired,\n', '            uint64 minAcceptQuorum,\n', '            uint256 yea,\n', '            uint256 nay,\n', '            uint256 votingPower,\n', '            bytes memory script\n', '        );\n', '\n', '    function getVoterState(uint256 _voteId, address _voter)\n', '        external\n', '        view\n', '        returns (VoterState);\n', '\n', '    function minAcceptQuorumPct()\n', '        external\n', '        view\n', '        returns (uint64);\n', '\n', '    function voteTime()\n', '        external\n', '        view\n', '        returns (uint64);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IApi3PoolExtended.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', 'interface IApi3PoolExtended {\n', '    function api3Token()\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function agentAppPrimary()\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function agentAppSecondary()\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function votingAppPrimary()\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function votingAppSecondary()\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function apr()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalStake()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function stakeTarget()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function proposalVotingPowerThreshold()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalShares()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function userStake(address userAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getUser(address userAddress)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 unstaked,\n', '            uint256 vesting,\n', '            uint256 unstakeShares,\n', '            uint256 unstakeAmount,\n', '            uint256 unstakeScheduledFor,\n', '            uint256 lastDelegationUpdateTimestamp,\n', '            uint256 lastProposalTimestamp\n', '            );\n', '\n', '    function userLocked(address userAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function userVotingPowerAt(\n', '        address userAddress,\n', '        uint256 _block\n', '        )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function userVotingPower(address userAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function delegatedToUser(address userAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function userDelegateAt(\n', '        address userAddress,\n', '        uint256 _block\n', '        )\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function userDelegate(address userAddress)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', '\n', '// File contracts/Convenience.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '\n', '\n', '\n', '/// @title Convenience contract used to make batch view calls to DAO contracts\n', 'contract Convenience is Ownable  {\n', '    enum VotingAppType { Primary, Secondary }\n', '\n', '    /// @notice Governance token of the DAO\n', '    IERC20Metadata public immutable api3Token;\n', '    /// @notice Staking pool of the DAO\n', '    IApi3PoolExtended public immutable api3Pool;\n', '    /// @notice List of ERC20 addresses that will be displayed in the DAO\n', '    /// treasury. The ETH balance will also be displayed by default.\n', '    /// @dev These are set by the owner of this contract\n', '    address[] public erc20Addresses;\n', '    /// @notice Links to the discussion venues for each vote\n', '    /// @dev These are set by the owner of this contract, for example by\n', '    /// running a bot that automatically creates a forum thread with the vote\n', '    /// type and ID and writes its URL to the chain\n', '    mapping(VotingAppType => mapping(uint256 => string)) public votingAppTypeToVoteIdToDiscussionUrl;\n', '\n', '    event SetErc20Addresses(address[] erc20Addresses);\n', '\n', '    event SetDiscussionUrl(\n', '        VotingAppType indexed votingAppType,\n', '        uint256 indexed voteId,\n', '        string discussionUrl\n', '        );\n', '\n', '    /// @param api3PoolAddress Staking pool address of the DAO \n', '    constructor(address api3PoolAddress)\n', '    {\n', '        api3Pool = IApi3PoolExtended(api3PoolAddress);\n', '        api3Token = IERC20Metadata(address(IApi3PoolExtended(api3PoolAddress).api3Token()));\n', '    }\n', '\n', '    /// @notice Called by the owner to update the addresses of the contract\n', '    /// addresses of the ERC20 tokens that will be displayed in the treasury\n', '    /// @dev The owner privileges here do not pose a serious security risk, the\n', '    /// worst that can happen is that the treasury display will malfunction\n', '    /// @param _erc20Addresses ERC20 addresses\n', '    function setErc20Addresses(address[] calldata _erc20Addresses)\n', '        external\n', '        onlyOwner()\n', '    {\n', '        erc20Addresses = _erc20Addresses;\n', '        emit SetErc20Addresses(_erc20Addresses);\n', '    }\n', '\n', '    /// @notice Called by the owner to update the discussion URL of a specific\n', '    /// vote to be displayed on the DAO dashboard\n', '    /// @dev The owner privileges here do not pose a serious security risk, the\n', '    /// worst that can happen is that the discussion URL will malfunction\n', '    /// @param votingAppType Enumerated voting app type (primary or secondary)\n', '    /// @param voteId Vote ID for which discussion URL will be updated\n', '    /// @param discussionUrl Discussion URL\n', '    function setDiscussionUrl(\n', '        VotingAppType votingAppType,\n', '        uint256 voteId,\n', '        string calldata discussionUrl\n', '        )\n', '        external\n', '        onlyOwner()\n', '    {\n', '        votingAppTypeToVoteIdToDiscussionUrl[votingAppType][voteId] = discussionUrl;\n', '        emit SetDiscussionUrl(votingAppType, voteId, discussionUrl);\n', '    }\n', '\n', '    /// @notice Used by the DAO dashboard client to retrieve user staking data\n', '    /// @param userAddress User address\n', '    /// @return apr Staking reward APR\n', '    /// @return api3Supply API3 total supply\n', '    /// @return totalStake Total amount staked at the pool\n', '    /// @return totalShares Total pool shares (also represents total voting\n', '    /// power)\n', '    /// @return stakeTarget Pool stake target in percentages\n', '    /// @return userApi3Balance User API3 balance\n', '    /// @return userStaked Amount of staked tokens the user has at the pool\n', '    /// @return userUnstaked Amount of non-staked tokens the user has at the\n', '    /// pool\n', '    /// @return userVesting Amount of tokens not yet vested to the user (it is\n', '    /// not withdrawable, similar to `userLocked`)\n', '    /// @return userUnstakeAmount Amount of tokens the user scheduled to\n', '    /// unstake\n', '    /// @return userUnstakeShares Amount of shares the user gave up to schedule\n', '    /// the unstaking\n', '    /// @return userUnstakeScheduledFor Time when the scheduled unstake will\n', '    /// mature\n', '    /// @return userLocked Amount of rewards the user has received that are not\n', '    /// withdrawable yet\n', '    function getUserStakingData(address userAddress)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 apr,\n', '            uint256 api3Supply,\n', '            uint256 totalStake,\n', '            uint256 totalShares,\n', '            uint256 stakeTarget,\n', '            uint256 userApi3Balance,\n', '            uint256 userStaked,\n', '            uint256 userUnstaked,\n', '            uint256 userVesting,\n', '            uint256 userUnstakeAmount,\n', '            uint256 userUnstakeShares,\n', '            uint256 userUnstakeScheduledFor,\n', '            uint256 userLocked\n', '            )\n', '    {\n', '        apr = api3Pool.apr();\n', '        api3Supply = api3Token.totalSupply();\n', '        totalStake = api3Pool.totalStake();\n', '        totalShares = api3Pool.totalShares();\n', '        stakeTarget = api3Pool.stakeTarget();\n', '        userApi3Balance = api3Token.balanceOf(userAddress);\n', '        userStaked = api3Pool.userStake(userAddress);\n', '        (\n', '            userUnstaked,\n', '            userVesting,\n', '            userUnstakeAmount,\n', '            userUnstakeShares,\n', '            userUnstakeScheduledFor,\n', '            , // lastDelegationUpdateTimestamp\n', '            // lastProposalTimestamp\n', '            ) = api3Pool.getUser(userAddress);\n', '        userLocked = api3Pool.userLocked(userAddress);\n', '    }\n', '\n', '    /// @notice Used by the DAO dashboard client to retrieve the treasury and\n', '    /// user delegation data\n', '    /// @dev In addition to the ERC20 tokens, it returns the ETH balances of\n', '    /// the treasuries\n', '    /// @param userAddress User address\n', '    /// @return names ERC20 (+ Ethereum) names\n', '    /// @return symbols ERC20 (+ Ethereum) symbols\n', '    /// @return decimals ERC20 (+ Ethereum) decimals\n', '    /// @return balancesOfPrimaryAgent ERC20 (+ Ethereum) balances of the\n', '    /// primary agent\n', '    /// @return balancesOfSecondaryAgent ERC20 (+ Ethereum) balances of the\n', '    /// secondary agent\n', '    /// @return proposalVotingPowerThreshold Proposal voting power threshold in\n', '    /// percentages\n', '    /// @return userVotingPower Voting power of the user, including delegations\n', '    /// @return delegatedToUser Voting power delegated to user\n', '    /// @return delegate Address that the user has delegated to\n', '    /// @return lastDelegationUpdateTimestamp When the user has last updated\n', '    /// their delegation\n', '    /// @return lastProposalTimestamp When the user has last made a proposal\n', '    function getTreasuryAndUserDelegationData(address userAddress)\n', '        external\n', '        view\n', '        returns (\n', '            string[] memory names,\n', '            string[] memory symbols,\n', '            uint8[] memory decimals,\n', '            uint256[] memory balancesOfPrimaryAgent,\n', '            uint256[] memory balancesOfSecondaryAgent,\n', '            uint256 proposalVotingPowerThreshold,\n', '            uint256 userVotingPower,\n', '            uint256 delegatedToUser,\n', '            address delegate,\n', '            uint256 lastDelegationUpdateTimestamp,\n', '            uint256 lastProposalTimestamp\n', '            )\n', '    {\n', '        names = new string[](erc20Addresses.length + 1);\n', '        symbols = new string[](erc20Addresses.length + 1);\n', '        decimals = new uint8[](erc20Addresses.length + 1);\n', '        balancesOfPrimaryAgent = new uint256[](erc20Addresses.length + 1);\n', '        balancesOfSecondaryAgent = new uint256[](erc20Addresses.length + 1);\n', '        for (uint256 i = 0; i < erc20Addresses.length; i++)\n', '        {\n', '            IERC20Metadata erc20 = IERC20Metadata(erc20Addresses[i]);\n', '            names[i] = erc20.name();\n', '            symbols[i] = erc20.symbol();\n', '            decimals[i] = erc20.decimals();\n', '            balancesOfPrimaryAgent[i] = erc20.balanceOf(api3Pool.agentAppPrimary());\n', '            balancesOfSecondaryAgent[i] = erc20.balanceOf(api3Pool.agentAppSecondary());\n', '        }\n', '        names[erc20Addresses.length] = "Ethereum";\n', '        symbols[erc20Addresses.length] = "ETH";\n', '        decimals[erc20Addresses.length] = 18;\n', '        balancesOfPrimaryAgent[erc20Addresses.length] = address(api3Pool.agentAppPrimary()).balance;\n', '        balancesOfSecondaryAgent[erc20Addresses.length] = address(api3Pool.agentAppSecondary()).balance;\n', '        proposalVotingPowerThreshold = api3Pool.proposalVotingPowerThreshold();\n', '        userVotingPower = api3Pool.userVotingPower(userAddress);\n', '        delegatedToUser = api3Pool.delegatedToUser(userAddress);\n', '        delegate = api3Pool.userDelegate(userAddress);   \n', '        (\n', '            , // unstaked\n', '            , // vesting\n', '            , // unstakeAmount\n', '            , // unstakeShares\n', '            , // unstakeScheduledFor\n', '            lastDelegationUpdateTimestamp,\n', '            lastProposalTimestamp\n', '            ) = api3Pool.getUser(userAddress);\n', '    }\n', '\n', '    /// @notice Used by the DAO dashboard client to retrieve static vote data\n', '    /// @dev `discussionUrl` is not actually static but can be treated as such\n', '    /// @param votingAppType Enumerated voting app type (primary or secondary)\n', '    /// @param userAddress User address\n', '    /// @param voteIds Array of vote IDs for which data will be retrieved\n', '    /// @return startDate Start date of the vote\n', '    /// @return supportRequired Support required for the vote to pass in\n', '    /// percentages\n', '    /// @return minAcceptQuorum Minimum acceptance quorum required for the vote\n', '    /// to pass in percentages\n', '    /// @return votingPower Total voting power at the time the vote was created\n', '    /// @return script The EVMScript that will be run if the vote passes\n', "    /// @return userVotingPowerAt User's voting power at the time the vote was\n", '    /// created\n', '    /// @return discussionUrl Discussion URL set for the vote by the contract\n', '    /// owner\n', '    function getStaticVoteData(\n', '        VotingAppType votingAppType,\n', '        address userAddress,\n', '        uint256[] calldata voteIds\n', '        )\n', '        external\n', '        view\n', '        returns (\n', '            uint64[] memory startDate,\n', '            uint64[] memory supportRequired,\n', '            uint64[] memory minAcceptQuorum,\n', '            uint256[] memory votingPower,\n', '            bytes[] memory script,\n', '            uint256[] memory userVotingPowerAt,\n', '            string[] memory discussionUrl\n', '            )\n', '    {\n', '        IApi3Voting api3Voting;\n', '        if (votingAppType == VotingAppType.Primary)\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\n', '        }\n', '        else\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\n', '        }\n', '        startDate = new uint64[](voteIds.length);\n', '        supportRequired = new uint64[](voteIds.length);\n', '        minAcceptQuorum = new uint64[](voteIds.length);\n', '        votingPower = new uint256[](voteIds.length);\n', '        script = new bytes[](voteIds.length);\n', '        userVotingPowerAt = new uint256[](voteIds.length);\n', '        discussionUrl = new string[](voteIds.length);\n', '        for (uint256 i = 0; i < voteIds.length; i++)\n', '        {\n', '            uint64 snapshotBlock;\n', '            (\n', '                , // open\n', '                , // executed\n', '                startDate[i],\n', '                snapshotBlock,\n', '                supportRequired[i],\n', '                minAcceptQuorum[i],\n', '                , // yea\n', '                , // nay\n', '                votingPower[i],\n', '                script[i]\n', '                ) = api3Voting.getVote(voteIds[i]);\n', '            userVotingPowerAt[i] = api3Pool.userVotingPowerAt(userAddress, snapshotBlock);\n', '            discussionUrl[i] = votingAppTypeToVoteIdToDiscussionUrl[votingAppType][voteIds[i]];\n', '        }\n', '    }\n', '\n', '    /// @notice Used by the DAO dashboard client to retrieve dynamic vote data\n', '    /// @dev `delegateAt` is actually static but we already have to fetch it\n', '    /// to fetch the related dynamic data so we also return it in this mtehod\n', '    /// @param votingAppType Enumerated voting app type (primary or secondary)\n', '    /// @param userAddress User address\n', '    /// @param voteIds Array of vote IDs for which data will be retrieved\n', '    /// @return executed If the vote has been executed\n', '    /// @return yea Total voting power voted for "For"\n', '    /// @return nay Total voting power voted for "Against"\n', '    /// @return voterState Vote cast by the user\n', '    /// @return delegateAt Address the user has delegated to at the time the\n', '    /// vote was created\n', '    /// @return delegateState Vote cast by the delegate of the user\n', '    function getDynamicVoteData(\n', '        VotingAppType votingAppType,\n', '        address userAddress,\n', '        uint256[] calldata voteIds\n', '        )\n', '        external\n', '        view\n', '        returns (\n', '            bool[] memory executed,\n', '            uint256[] memory yea,\n', '            uint256[] memory nay,\n', '            IApi3Voting.VoterState[] memory voterState,\n', '            address[] memory delegateAt,\n', '            IApi3Voting.VoterState[] memory delegateState\n', '            )\n', '    {\n', '        IApi3Voting api3Voting;\n', '        if (votingAppType == VotingAppType.Primary)\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\n', '        }\n', '        else\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\n', '        }\n', '        executed = new bool[](voteIds.length);\n', '        yea = new uint256[](voteIds.length);\n', '        nay = new uint256[](voteIds.length);\n', '        voterState = new IApi3Voting.VoterState[](voteIds.length);\n', '        delegateAt = new address[](voteIds.length);\n', '        delegateState = new IApi3Voting.VoterState[](voteIds.length);\n', '        for (uint256 i = 0; i < voteIds.length; i++)\n', '        {\n', '            uint64 snapshotBlock;\n', '            (\n', '                , // open\n', '                executed[i],\n', '                , // startDate\n', '                snapshotBlock,\n', '                , // supportRequired\n', '                , // minAcceptQuorum\n', '                yea[i],\n', '                nay[i],\n', '                , // votingPower\n', '                // script\n', '                ) = api3Voting.getVote(voteIds[i]);\n', '            delegateAt[i] = api3Pool.userDelegateAt(userAddress, snapshotBlock);\n', '            if (delegateAt[i] == address(0))\n', '            {\n', '                voterState[i] = api3Voting.getVoterState(voteIds[i], userAddress);\n', '            }\n', '            else\n', '            {\n', '                delegateState[i] = api3Voting.getVoterState(voteIds[i], delegateAt[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Used by the DAO dashboard client to retrieve the IDs of the\n', '    /// votes that are currently open\n', '    /// @param votingAppType Enumerated voting app type (primary or secondary)\n', '    /// @return voteIds Array of vote IDs for which data will be retrieved\n', '    function getOpenVoteIds(VotingAppType votingAppType)\n', '        external\n', '        view\n', '        returns (uint256[] memory voteIds)\n', '    {\n', '        IApi3Voting api3Voting;\n', '        if (votingAppType == VotingAppType.Primary)\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppPrimary());\n', '        }\n', '        else\n', '        {\n', '            api3Voting = IApi3Voting(api3Pool.votingAppSecondary());\n', '        }\n', '        uint256 votesLength = api3Voting.votesLength();\n', '        if (votesLength == 0)\n', '        {\n', '            return new uint256[](0);\n', '        }\n', '        uint256 countOpenVote = 0;\n', '        for (uint256 i = votesLength; i > 0; i--)\n', '        {\n', '            (\n', '                bool open,\n', '                , // executed\n', '                uint64 startDate,\n', '                , //snapshotBlock\n', '                , // supportRequired\n', '                , // minAcceptQuorum\n', '                , // yea\n', '                , // nay\n', '                , // votingPower\n', '                // script\n', '                ) = api3Voting.getVote(i - 1);\n', '            if (open)\n', '            {\n', '                countOpenVote++;\n', '            }\n', '            if (startDate < block.timestamp - api3Voting.voteTime())\n', '            {\n', '                break;\n', '            }\n', '        }\n', '        if (countOpenVote == 0)\n', '        {\n', '            return new uint256[](0);\n', '        }\n', '        voteIds = new uint256[](countOpenVote);\n', '        uint256 countAddedVote = 0;\n', '        for (uint256 i = votesLength; i > 0; i--)\n', '        {\n', '            if (countOpenVote == countAddedVote)\n', '            {\n', '                break;\n', '            }\n', '            (\n', '                bool open,\n', '                , // executed\n', '                , // startDate\n', '                , // snapshotBlock\n', '                , // supportRequired\n', '                , // minAcceptQuorum\n', '                , // yea\n', '                , // nay\n', '                , // votingPower\n', '                // script\n', '                ) = api3Voting.getVote(i - 1);\n', '            if (open)\n', '            {\n', '                voteIds[countAddedVote] = i - 1;\n', '                countAddedVote++;\n', '            }\n', '        }\n', '    }\n', '}']