['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// File: contracts/interfaces/ISaffronBase.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronBase {\n', '  enum Tranche {S, AA, A}\n', '  enum LPTokenType {dsec, principal}\n', '\n', '  // Store values (balances, dsec, vdsec) with TrancheUint256\n', '  struct TrancheUint256 {\n', '    uint256 S;\n', '    uint256 AA;\n', '    uint256 A;\n', '  }\n', '\n', '  struct epoch_params {\n', '    uint256 start_date;       // Time when the platform launched\n', '    uint256 duration;         // Duration of epoch\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/ISaffronStrategy.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', 'interface ISaffronStrategy is ISaffronBase{\n', '  function deploy_all_capital() external;\n', '  function select_adapter_for_liquidity_removal() external returns(address);\n', '  function add_adapter(address adapter_address) external;\n', '  function add_pool(address pool_address) external;\n', '  function delete_adapters() external;\n', '  function set_governance(address to) external;\n', '  function get_adapter_address(uint256 adapter_index) external view returns(address);\n', '  function set_pool_SFI_reward(uint256 poolIndex, uint256 reward) external;\n', '}\n', '\n', '// File: contracts/interfaces/ISaffronPool.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronPool is ISaffronBase {\n', '  function add_liquidity(uint256 amount, Tranche tranche) external;\n', '  function remove_liquidity(address v1_dsec_token_address, uint256 dsec_amount, address v1_principal_token_address, uint256 principal_amount) external;\n', '  function get_base_asset_address() external view returns(address);\n', '  function hourly_strategy(address adapter_address) external;\n', '  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) external;\n', '  function set_governance(address to) external;\n', '  function get_epoch_cycle_params() external view returns (uint256, uint256);\n', '  function shutdown() external;\n', '}\n', '\n', '// File: contracts/interfaces/ISaffronAdapter.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronAdapter is ISaffronBase {\n', '    function deploy_capital(uint256 amount) external;\n', '    function return_capital(uint256 base_asset_amount, address to) external;\n', '    function approve_transfer(address addr,uint256 amount) external;\n', '    function get_base_asset_address() external view returns(address);\n', '    function set_base_asset(address addr) external;\n', '    function get_holdings() external returns(uint256);\n', '    function get_interest(uint256 principal) external returns(uint256);\n', '    function set_governance(address to) external;\n', '}\n', '\n', '// File: contracts/lib/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/Address.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '  }\n', '\n', '  /**\n', '   * @dev Deprecated. This function has issues similar to the ones found in\n', '   * {IERC20-approve}, and its usage is discouraged.\n', '   *\n', '   * Whenever possible, use {safeIncreaseAllowance} and\n', '   * {safeDecreaseAllowance} instead.\n', '   */\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    // solhint-disable-next-line max-line-length\n', '    require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '      "SafeERC20: approve from non-zero to non-zero allowance"\n', '    );\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  /**\n', '   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '   * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '   * @param token The token targeted by the call.\n', '   * @param data The call data (encoded using abi.encode or one of its variants).\n', '   */\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '    // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '    bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '    if (returndata.length > 0) { // Return data is optional\n', '      // solhint-disable-next-line max-line-length\n', '      require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/lib/Context.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/SFI.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', 'contract SFI is ERC20 {\n', '  using SafeERC20 for IERC20;\n', '\n', '  address public governance;\n', '  address public SFI_minter;\n', '  uint256 public MAX_TOKENS = 100000 ether;\n', '\n', '  constructor (string memory name, string memory symbol) ERC20(name, symbol) {\n', '    // Initial governance is Saffron Deployer\n', '    governance = msg.sender;\n', '  }\n', '\n', '  function mint_SFI(address to, uint256 amount) public {\n', '    require(msg.sender == SFI_minter, "must be SFI_minter");\n', '    require(this.totalSupply() + amount < MAX_TOKENS, "cannot mint more than MAX_TOKENS");\n', '    _mint(to, amount);\n', '  }\n', '\n', '  function set_minter(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    SFI_minter = to;\n', '  }\n', '\n', '  function set_governance(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    governance = to;\n', '  }\n', '\n', '  event ErcSwept(address who, address to, address token, uint256 amount);\n', '  function erc_sweep(address _token, address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '\n', '    IERC20 tkn = IERC20(_token);\n', '    uint256 tBal = tkn.balanceOf(address(this));\n', '    tkn.safeTransfer(_to, tBal);\n', '\n', '    emit ErcSwept(msg.sender, _to, _token, tBal);\n', '  }\n', '}\n', '\n', '// File: contracts/SaffronStrategy.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// v0: all functions returns the only adapter that exists\n', '// v1: evaluate adapters by interest rate and return the best one possible per currency\n', 'contract SaffronStrategy is ISaffronStrategy {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  address public governance;\n', '  address public team_address;\n', '  address public SFI_address;\n', '  address[] public pools;\n', '  address[] public adapters;\n', '  mapping(address=>uint256) private adapter_indexes;\n', '  mapping(uint256=>address) private adapter_addresses;\n', '  uint256[] public pool_SFI_rewards = [\n', '\t16406250000000000000, // \t16.40625 SFI -- dai comp\n', '\t46875000000000000000, // \t46.875   SFI -- sfi/eth uni\n', '\t35156250000000000000, // \t35.15625 SFI -- sfi stake\n', '\t5156250000000000000,  //   \t 5.15625 SFI -- sfi/btse\n', '\t16406250000000000000, // \t16.40625 SFI -- wbtc comp\n', '\t2812500000000000000,  // \t 2.8125  SFI -- sfi/geeq\n', '\t5156250000000000000,  // \t 5.15625 SFI -- sfi/esd\n', '\t46875000000000000000, // \t46.875   SFI -- sfi/eth sushi\n', '\t5156250000000000000,  // \t 5.15625 SFI -- ibeth/alpha\n', '\t16406250000000000000, // \t16.40625 SFI -- dai rari\n', '\t5156250000000000000,  // \t 5.15625 SFI -- sfi/prt\n', '\t16406250000000000000, // \t16.40625 SFI -- usdt comp\n', '\t16406250000000000000 // \t16.40625 SFI -- usdc comp\n', '  ];\n', '\n', '  // True if epoch has been wound down already\n', '  mapping(uint256=>bool) public epoch_wound_down;\n', '\n', '  uint256 public last_deploy;     // Last run of Hourly Deploy\n', '  uint256 public deploy_interval; // Hourly deploy interval\n', '\n', '  epoch_params public epoch_cycle = epoch_params({\n', '    start_date: 1604239200,   // 11/01/2020 @ 2:00pm (UTC)\n', '    duration:   14 days       // 1210000 seconds\n', '  });\n', '\n', '  constructor(address _sfi_address, address _team_address, bool epoch_cycle_reset) {\n', '    governance = msg.sender;\n', '    team_address = _team_address;\n', '    SFI_address = _sfi_address;\n', '    deploy_interval = 1 hours;\n', '    epoch_cycle.duration = (epoch_cycle_reset ? 30 minutes : 14 days); // Make testing previous epochs easier\n', '    epoch_cycle.start_date = (epoch_cycle_reset ? (block.timestamp) - (4 * epoch_cycle.duration) : 1604239200); // Make testing previous epochs easier\n', '  }\n', '\n', '  function wind_down_epoch(uint256 epoch) external {\n', '    require(epoch == 7, "v1.7: only epoch 7");\n', '    require(!epoch_wound_down[epoch], "epoch already wound down");\n', '    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");\n', '    uint256 current_epoch = get_current_epoch();\n', '    require(epoch < current_epoch, "cannot wind down future epoch");\n', '    epoch_wound_down[epoch] = true;\n', '\n', '    // Team Funds\n', '    uint256 team_sfi = (10000 * 1 ether) >> epoch;\n', '    SFI(SFI_address).mint_SFI(team_address, team_sfi);\n', '\n', '    for (uint256 i = 0; i < pools.length; i++) {\n', '      uint256 rewardSFI = 0;\n', '      if (i < pool_SFI_rewards.length) {\n', '        rewardSFI = pool_SFI_rewards[i];\n', '        SFI(SFI_address).mint_SFI(pools[i], rewardSFI);\n', '      }\n', '      ISaffronPool(pools[i]).wind_down_epoch(epoch, rewardSFI);\n', '    }\n', '  }\n', '\n', '  // Wind down pool exists just in case one of the pools is broken\n', '  function wind_down_pool(uint256 pool, uint256 epoch) external {\n', '    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");\n', '    require(epoch == 7, "v1.7: only epoch 7");\n', '    uint256 current_epoch = get_current_epoch();\n', '    require(epoch < current_epoch, "cannot wind down future epoch");\n', '\n', '    if (pool == uint(-1)) {\n', '      require(!epoch_wound_down[epoch], "epoch already wound down");\n', '      epoch_wound_down[epoch] = true;\n', '\n', '      // Team Funds\n', '      uint256 team_sfi = (10000 * 1 ether) >> epoch;\n', '      SFI(SFI_address).mint_SFI(team_address, team_sfi);\n', '    } else {\n', '      uint256 rewardSFI = 0;\n', '      if (pool < pool_SFI_rewards.length) {\n', '        rewardSFI = pool_SFI_rewards[pool];\n', '        SFI(SFI_address).mint_SFI(pools[pool], rewardSFI);\n', '      }\n', '      ISaffronPool(pools[pool]).wind_down_epoch(epoch, rewardSFI);\n', '    }\n', '  }\n', '\n', '  // Deploy all capital in pool (funnel 100% of pooled base assets into best adapter)\n', '  function deploy_all_capital() external override {\n', '    require(block.timestamp >= last_deploy + (deploy_interval), "deploy call too soon" );\n', '    last_deploy = block.timestamp;\n', '\n', '    // DAI/Compound\n', '    ISaffronPool pool = ISaffronPool(pools[0]);\n', '    IERC20 base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[0]) > 0) pool.hourly_strategy(adapters[0]);\n', '\n', '    // DAI/Rari\n', '    pool = ISaffronPool(pools[9]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[9]) > 0) pool.hourly_strategy(adapters[1]);\n', '\n', '    // wBTC/Compound\n', '    pool = ISaffronPool(pools[4]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[4]) > 0) pool.hourly_strategy(adapters[2]);\n', '\n', '    // USDT/Compound\n', '    pool = ISaffronPool(pools[11]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[11]) > 0) pool.hourly_strategy(adapters[3]);\n', '    \n', '    // USDC/Compound\n', '    pool = ISaffronPool(pools[12]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[12]) > 0) pool.hourly_strategy(adapters[4]);\n', '  }\n', '\n', '  function deploy_all_capital_single_pool(uint256 pool_index, uint256 adapter_index) public {\n', '    require(msg.sender == governance, "must be governance");\n', '    ISaffronPool pool = ISaffronPool(pools[pool_index]);\n', '    IERC20 base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[pool_index]) > 0) pool.hourly_strategy(adapters[adapter_index]);\n', '  }\n', '\n', '  function v01_final_deploy() external {\n', '    require(msg.sender == governance, "must be governance");\n', '    // DAI Compound\n', '    ISaffronPool pool = ISaffronPool(pools[0]);\n', '    IERC20 base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[0]) > 0) pool.hourly_strategy(adapters[0]);\n', '\n', '    // Rari\n', '    pool = ISaffronPool(pools[9]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[9]) > 0) pool.hourly_strategy(adapters[1]);\n', '\n', '    // wBTC/Compound\n', '    pool = ISaffronPool(pools[4]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[4]) > 0) pool.hourly_strategy(adapters[2]);\n', '\n', '    // USDT/Compound\n', '    pool = ISaffronPool(pools[11]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[11]) > 0) pool.hourly_strategy(adapters[3]);\n', '\n', '    // USDC/Compound\n', '    pool = ISaffronPool(pools[12]);\n', '    base_asset = IERC20(pool.get_base_asset_address());\n', '    if (base_asset.balanceOf(pools[12]) > 0) pool.hourly_strategy(adapters[4]);\n', '\n', '    for (uint256 i = 0; i < pools.length; i++) {\n', '      ISaffronPool(pools[i]).shutdown();\n', '    }\n', '  }\n', '\n', '  // Add adapters to a list of adapters passed in\n', '  function add_adapter(address adapter_address) external override {\n', '    require(msg.sender == governance, "add_adapter: must be governance");\n', '    adapter_indexes[adapter_address] = adapters.length;\n', '    adapters.push(adapter_address);\n', '  }\n', '\n', "  // Get an adapter's address by index\n", '  function get_adapter_index(address adapter_address) public view returns(uint256) {\n', '    return adapter_indexes[adapter_address];\n', '  }\n', '\n', "  // Get an adapter's address by index\n", '  function get_adapter_address(uint256 index) external view override returns(address) {\n', '    return address(adapters[index]);\n', '  }\n', '\n', '  function add_pool(address pool_address) external override {\n', '    require(msg.sender == governance, "add_pool: must be governance");\n', '    pools.push(pool_address);\n', '  }\n', '\n', '  function delete_adapters() external override {\n', '    require(msg.sender == governance, "delete_adapters: must be governance");\n', '    delete adapters;\n', '  }\n', '\n', '  function set_team_address(address to) public {\n', '    require(msg.sender == governance || msg.sender == team_address, "permission");\n', '    team_address = to;\n', '  }\n', '\n', '  function set_governance(address to) external override {\n', '    require(msg.sender == governance, "set_governance: must be governance");\n', '    governance = to;\n', '  }\n', '\n', '  function set_pool_SFI_reward(uint256 poolIndex, uint256 reward) external override {\n', '    require(msg.sender == governance, "set_governance: must be governance");\n', '    pool_SFI_rewards[poolIndex] = reward;\n', '  }\n', '\n', '  function shutdown_pool(uint256 poolIndex) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    ISaffronPool(pools[poolIndex]).shutdown();\n', '  }\n', '\n', '  function select_adapter_for_liquidity_removal() external view override returns(address) {\n', '    return adapters[0]; // v0: only one adapter\n', '  }\n', '  // v1.5 add replace adapter function\n', '  // v1.5 add remove adapter function\n', '\n', '  /*** TIME UTILITY FUNCTIONS ***/\n', '  function get_epoch_end(uint256 epoch) public view returns (uint256) {\n', '    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration));\n', '  }\n', '\n', '  function get_current_epoch() public view returns (uint256) {\n', '    require(block.timestamp > epoch_cycle.start_date, "before epoch 0");\n', '    return (block.timestamp - epoch_cycle.start_date) / epoch_cycle.duration;\n', '  }\n', '\n', '  function get_seconds_until_epoch_end(uint256 epoch) public view returns (uint256) {\n', '    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration)).sub(block.timestamp);\n', '  }\n', '\n', '  event ErcSwept(address who, address to, address token, uint256 amount);\n', '  function erc_sweep(address _token, address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '\n', '    IERC20 tkn = IERC20(_token);\n', '    uint256 tBal = tkn.balanceOf(address(this));\n', '    tkn.safeTransfer(_to, tBal);\n', '\n', '    emit ErcSwept(msg.sender, _to, _token, tBal);\n', '  }\n', '}']