['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a - b : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function __Governable_init_unchained(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', "//import '@uniswap/lib/contracts/libraries/FixedPoint.sol';\n", "//import './FullMath.sol';\n", '\n', '// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n', '// license is CC-BY-4.0\n', 'library FullMath {\n', '    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n', '        uint256 mm = mulmod(x, y, uint256(-1));\n', '        l = x * y;\n', '        h = mm - l;\n', '        if (mm < l) h -= 1;\n', '    }\n', '\n', '    function fullDiv(\n', '        uint256 l,\n', '        uint256 h,\n', '        uint256 d\n', '    ) private pure returns (uint256) {\n', '        uint256 pow2 = d & -d;\n', '        d /= pow2;\n', '        l /= pow2;\n', '        l += h * ((-pow2) / pow2 + 1);\n', '        uint256 r = 1;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        return l * r;\n', '    }\n', '\n', '    function mulDiv(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 d\n', '    ) internal pure returns (uint256) {\n', '        (uint256 l, uint256 h) = fullMul(x, y);\n', '\n', '        uint256 mm = mulmod(x, y, d);\n', '        if (mm > l) h -= 1;\n', '        l -= mm;\n', '\n', '        if (h == 0) return l / d;\n', '\n', "        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n", '        return fullDiv(l, h, d);\n', '    }\n', '}\n', '\n', '\n', "//import './Babylonian.sol';\n", '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    // credit for this implementation goes to\n', '    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '    function sqrt(uint256 x) internal pure returns (uint256) {\n', '        if (x == 0) return 0;\n', '        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n', '        // however that code costs significantly more gas\n', '        uint256 xx = x;\n', '        uint256 r = 1;\n', '        if (xx >= 0x100000000000000000000000000000000) {\n', '            xx >>= 128;\n', '            r <<= 64;\n', '        }\n', '        if (xx >= 0x10000000000000000) {\n', '            xx >>= 64;\n', '            r <<= 32;\n', '        }\n', '        if (xx >= 0x100000000) {\n', '            xx >>= 32;\n', '            r <<= 16;\n', '        }\n', '        if (xx >= 0x10000) {\n', '            xx >>= 16;\n', '            r <<= 8;\n', '        }\n', '        if (xx >= 0x100) {\n', '            xx >>= 8;\n', '            r <<= 4;\n', '        }\n', '        if (xx >= 0x10) {\n', '            xx >>= 4;\n', '            r <<= 2;\n', '        }\n', '        if (xx >= 0x8) {\n', '            r <<= 1;\n', '        }\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1; // Seven iterations should be enough\n', '        uint256 r1 = x / r;\n', '        return (r < r1 ? r : r1);\n', '    }\n', '}\n', '\n', "//import './BitMath.sol';\n", 'library BitMath {\n', '    // returns the 0 indexed position of the most significant bit of the input x\n', '    // s.t. x >= 2**msb and x < 2**(msb+1)\n', '    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::mostSignificantBit: zero');\n", '\n', '        if (x >= 0x100000000000000000000000000000000) {\n', '            x >>= 128;\n', '            r += 128;\n', '        }\n', '        if (x >= 0x10000000000000000) {\n', '            x >>= 64;\n', '            r += 64;\n', '        }\n', '        if (x >= 0x100000000) {\n', '            x >>= 32;\n', '            r += 32;\n', '        }\n', '        if (x >= 0x10000) {\n', '            x >>= 16;\n', '            r += 16;\n', '        }\n', '        if (x >= 0x100) {\n', '            x >>= 8;\n', '            r += 8;\n', '        }\n', '        if (x >= 0x10) {\n', '            x >>= 4;\n', '            r += 4;\n', '        }\n', '        if (x >= 0x4) {\n', '            x >>= 2;\n', '            r += 2;\n', '        }\n', '        if (x >= 0x2) r += 1;\n', '    }\n', '\n', '    // returns the 0 indexed position of the least significant bit of the input x\n', '    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\n', '    // i.e. the bit at the index is set and the mask of all lower bits is 0\n', '    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::leastSignificantBit: zero');\n", '\n', '        r = 255;\n', '        if (x & uint128(-1) > 0) {\n', '            r -= 128;\n', '        } else {\n', '            x >>= 128;\n', '        }\n', '        if (x & uint64(-1) > 0) {\n', '            r -= 64;\n', '        } else {\n', '            x >>= 64;\n', '        }\n', '        if (x & uint32(-1) > 0) {\n', '            r -= 32;\n', '        } else {\n', '            x >>= 32;\n', '        }\n', '        if (x & uint16(-1) > 0) {\n', '            r -= 16;\n', '        } else {\n', '            x >>= 16;\n', '        }\n', '        if (x & uint8(-1) > 0) {\n', '            r -= 8;\n', '        } else {\n', '            x >>= 8;\n', '        }\n', '        if (x & 0xf > 0) {\n', '            r -= 4;\n', '        } else {\n', '            x >>= 4;\n', '        }\n', '        if (x & 0x3 > 0) {\n', '            r -= 2;\n', '        } else {\n', '            x >>= 2;\n', '        }\n', '        if (x & 0x1 > 0) r -= 1;\n', '    }\n', '}\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 public constant RESOLUTION = 112;\n', '    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\n', '    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\n', '    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n', '        uint256 z = 0;\n', "        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\n", '        return uq144x112(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by an int and decode, returning an int\n', '    // reverts on overflow\n', '    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\n', '        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\n', "        require(z < 2**255, 'FixedPoint::muli: overflow');\n", '        return y < 0 ? -int256(z) : int256(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    // lossy\n', '    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', '        if (self._x == 0 || other._x == 0) {\n', '            return uq112x112(0);\n', '        }\n', '        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\n', '        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\n', '\n', '        // partial products\n', '        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\n', '        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\n', '        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\n', '        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\n', '\n', '        // so the bit shift does not overflow\n', "        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\n", '\n', '        // this cannot exceed 256 bits, all values are 224 bits\n', '        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\n', '\n', '        // so the cast does not overflow\n', "        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\n", '\n', '        return uq112x112(uint224(sum));\n', '    }\n', '\n', '    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', "        require(other._x > 0, 'FixedPoint::divuq: division by zero');\n", '        if (self._x == other._x) {\n', '            return uq112x112(uint224(Q112));\n', '        }\n', '        if (self._x <= uint144(-1)) {\n', '            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\n', "            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '            return uq112x112(uint224(value));\n', '        }\n', '\n', '        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\n', "        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '        return uq112x112(uint224(result));\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // can be lossy\n', '    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n', "        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n", '        if (numerator == 0) return FixedPoint.uq112x112(0);\n', '\n', '        if (numerator <= uint144(-1)) {\n', '            uint256 result = (numerator << RESOLUTION) / denominator;\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        } else {\n', '            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        }\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    // reverts on overflow\n', '    // lossy\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\n", "        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    // lossy between 0/1 and 40 bits\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        if (self._x <= uint144(-1)) {\n', '            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n', '        }\n', '\n', '        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n', '        safeShiftBits -= safeShiftBits % 2;\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n', '    }\n', '}\n', '\n', "//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\n", 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', "//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n", 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', "//import '../libraries/UniswapV2Library.sol';\n", 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', 'library EmaOracle {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint;\n', '\n', '    struct Observation {\n', '        uint timestamp;\n', '        uint price0Cumulative;\n', '        uint price1Cumulative;\n', '        uint emaPrice0;\n', '        uint emaPrice1;\n', '    }\n', '    \n', '    struct Observations {\n', '        address factory;\n', '        mapping(uint => mapping(address => Observation)) ppos;\n', '    }\n', '    \n', '    function initialize(Observations storage os, address factory, uint period, address tokenA, address tokenB) internal {\n', '        os.factory = factory;\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        Observation storage o = os.ppos[period][pair];\n', '        o.timestamp = blockTimestampLast;\n', '        o.price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        o.price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '        o.emaPrice0 = FixedPoint.fraction(reserve1, reserve0)._x;\n', '        o.emaPrice1 = FixedPoint.fraction(reserve0, reserve1)._x;\n', '    }\n', '    \n', '    function calcEmaPrice(uint period, uint timestampStart, uint priceCumulativeStart, uint emaPriceStart, uint timestampEnd, uint priceCumulativeEnd) internal pure returns (uint) {\n', '        uint timeElapsed = timestampEnd.sub(timestampStart);\n', '        if(timeElapsed == 0)\n', '            return emaPriceStart;\n', '        uint priceAverage = priceCumulativeEnd.sub(priceCumulativeStart).div(timeElapsed);\n', '        if(timeElapsed >= period)\n', '            return priceAverage;\n', '        else\n', '            return period.sub(timeElapsed).mul(emaPriceStart).add(timeElapsed.mul(priceAverage)) / period;\n', '    }\n', '    \n', '    function update(Observations storage os, uint period, address tokenA, address tokenB) internal {\n', '        address pair = UniswapV2Library.pairFor(os.factory, tokenA, tokenB);\n', '        Observation storage o = os.ppos[period][pair];\n', '        uint timeElapsed = block.timestamp.sub(o.timestamp);\n', '        if (timeElapsed > period) {\n', '            (uint price0Cumulative, uint price1Cumulative, ) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '            o.emaPrice0    = calcEmaPrice(period, o.timestamp, o.price0Cumulative, o.emaPrice0, block.timestamp, price0Cumulative);\n', '            o.emaPrice1    = calcEmaPrice(period, o.timestamp, o.price1Cumulative, o.emaPrice1, block.timestamp, price1Cumulative);\n', '            o.timestamp = block.timestamp;\n', '            o.price0Cumulative = price0Cumulative;\n', '            o.price1Cumulative = price1Cumulative;\n', '        }\n', '    }\n', '\n', '    function consultEma(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\n', '        address pair = UniswapV2Library.pairFor(os.factory, tokenIn, tokenOut);\n', '        Observation storage o = os.ppos[period][pair];\n', '        (address token0, ) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '        if (token0 == tokenIn)\n', '            amountOut = FixedPoint.uq112x112(uint224(o.emaPrice0)).mul(amountIn).decode144();\n', '        else\n', '            amountOut = FixedPoint.uq112x112(uint224(o.emaPrice1)).mul(amountIn).decode144();\n', '    }\n', '\n', '    function consultNow(Observations storage os, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\n', '        address pair = UniswapV2Library.pairFor(os.factory, tokenIn, tokenOut);\n', '        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair).getReserves();\n', '        (address token0, ) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '        if (token0 == tokenIn)\n', '            amountOut = FixedPoint.fraction(reserve1, reserve0).mul(amountIn).decode144();\n', '        else\n', '            amountOut = FixedPoint.fraction(reserve0, reserve1).mul(amountIn).decode144();\n', '    }\n', '\n', '    function consultHi(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\n', '        uint amountOutEma = consultEma(os, period, tokenIn, amountIn, tokenOut);\n', '        uint amountOutNow = consultNow(os, tokenIn, amountIn, tokenOut);\n', '        amountOut = Math.max(amountOutEma, amountOutNow);\n', '    }\n', '\n', '    function consultLo(Observations storage os, uint period, address tokenIn, uint amountIn, address tokenOut) internal view returns (uint amountOut) {\n', '        uint amountOutEma = consultEma(os, period, tokenIn, amountIn, tokenOut);\n', '        uint amountOutNow = consultNow(os, tokenIn, amountIn, tokenOut);\n', '        amountOut = Math.min(amountOutEma, amountOutNow);\n', '    }\n', '}\n', '\n', '// fixed window oracle that recomputes the average price for the entire period once every period\n', '// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\n', 'contract ExampleOracleSimple {\n', '    using FixedPoint for *;\n', '\n', '    uint public constant PERIOD = 24 hours;\n', '\n', '    IUniswapV2Pair immutable pair;\n', '    address public immutable token0;\n', '    address public immutable token1;\n', '\n', '    uint    public price0CumulativeLast;\n', '    uint    public price1CumulativeLast;\n', '    uint32  public blockTimestampLast;\n', '    FixedPoint.uq112x112 public price0Average;\n', '    FixedPoint.uq112x112 public price1Average;\n', '\n', '    constructor(address factory, address tokenA, address tokenB) public {\n', '        IUniswapV2Pair _pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\n', '        //IUniswapV2Pair _pair = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB));\n', "        //require(address(_pair) != address(0), 'Not exist pair');\n", '        pair = _pair;\n', '        token0 = _pair.token0();\n', '        token1 = _pair.token1();\n', '        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n', '        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'ExampleOracleSimple: NO_RESERVES'); // ensure that there's liquidity in the pair\n", '    }\n', '\n', '    function update() external {\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // ensure that at least one full period has passed since the last update\n', "        require(timeElapsed >= PERIOD, 'ExampleOracleSimple: PERIOD_NOT_ELAPSED');\n", '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n', '        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n', '\n', '        price0CumulativeLast = price0Cumulative;\n', '        price1CumulativeLast = price1Cumulative;\n', '        blockTimestampLast = blockTimestamp;\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(address token, uint amountIn) external view returns (uint amountOut) {\n', '        if (token == token0) {\n', '            amountOut = price0Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(token == token1, 'ExampleOracleSimple: INVALID_TOKEN');\n", '            amountOut = price1Average.mul(amountIn).decode144();\n', '        }\n', '    }\n', '}\n', '\n', '// sliding window oracle that uses observations collected over a window to provide moving price averages in the past\n', '// `windowSize` with a precision of `windowSize / granularity`\n', '// note this is a singleton oracle and only needs to be deployed once per desired parameters, which\n', '// differs from the simple oracle which must be deployed once per pair.\n', 'contract ExampleSlidingWindowOracle {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint;\n', '\n', '    struct Observation {\n', '        uint timestamp;\n', '        uint price0Cumulative;\n', '        uint price1Cumulative;\n', '    }\n', '\n', '    address public immutable factory;\n', '    // the desired amount of time over which the moving average should be computed, e.g. 24 hours\n', '    uint public immutable windowSize;\n', '    // the number of observations stored for each pair, i.e. how many price observations are stored for the window.\n', '    // as granularity increases from 1, more frequent updates are needed, but moving averages become more precise.\n', '    // averages are computed over intervals with sizes in the range:\n', '    //   [windowSize - (windowSize / granularity) * 2, windowSize]\n', '    // e.g. if the window size is 24 hours, and the granularity is 24, the oracle will return the average price for\n', '    //   the period:\n', '    //   [now - [22 hours, 24 hours], now]\n', '    uint8 public immutable granularity;\n', '    // this is redundant with granularity and windowSize, but stored for gas savings & informational purposes.\n', '    uint public immutable periodSize;\n', '\n', '    // mapping from pair address to a list of price observations of that pair\n', '    mapping(address => Observation[]) public pairObservations;\n', '\n', '    constructor(address factory_, uint windowSize_, uint8 granularity_) public {\n', "        require(granularity_ > 1, 'SlidingWindowOracle: GRANULARITY');\n", '        require(\n', '            (periodSize = windowSize_ / granularity_) * granularity_ == windowSize_,\n', "            'SlidingWindowOracle: WINDOW_NOT_EVENLY_DIVISIBLE'\n", '        );\n', '        factory = factory_;\n', '        windowSize = windowSize_;\n', '        granularity = granularity_;\n', '    }\n', '\n', '    // returns the index of the observation corresponding to the given timestamp\n', '    function observationIndexOf(uint timestamp) public view returns (uint8 index) {\n', '        uint epochPeriod = timestamp / periodSize;\n', '        return uint8(epochPeriod % granularity);\n', '    }\n', '\n', '    // returns the observation from the oldest epoch (at the beginning of the window) relative to the current time\n', '    function getFirstObservationInWindow(address pair) private view returns (Observation storage firstObservation) {\n', '        uint8 observationIndex = observationIndexOf(block.timestamp);\n', '        // no overflow issue. if observationIndex + 1 overflows, result is still zero.\n', '        uint8 firstObservationIndex = (observationIndex + 1) % granularity;\n', '        firstObservation = pairObservations[pair][firstObservationIndex];\n', '    }\n', '\n', '    // update the cumulative price for the observation at the current timestamp. each observation is updated at most\n', '    // once per epoch period.\n', '    function update(address tokenA, address tokenB) external {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n', '\n', '        // populate the array with empty observations (first call only)\n', '        for (uint i = pairObservations[pair].length; i < granularity; i++) {\n', '            pairObservations[pair].push();\n', '        }\n', '\n', '        // get the observation for the current period\n', '        uint8 observationIndex = observationIndexOf(block.timestamp);\n', '        Observation storage observation = pairObservations[pair][observationIndex];\n', '\n', '        // we only want to commit updates once per period (i.e. windowSize / granularity)\n', '        uint timeElapsed = block.timestamp - observation.timestamp;\n', '        if (timeElapsed > periodSize) {\n', '            (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '            observation.timestamp = block.timestamp;\n', '            observation.price0Cumulative = price0Cumulative;\n', '            observation.price1Cumulative = price1Cumulative;\n', '        }\n', '    }\n', '\n', '    // given the cumulative prices of the start and end of a period, and the length of the period, compute the average\n', '    // price in terms of how much amount out is received for the amount in\n', '    function computeAmountOut(\n', '        uint priceCumulativeStart, uint priceCumulativeEnd,\n', '        uint timeElapsed, uint amountIn\n', '    ) private pure returns (uint amountOut) {\n', '        // overflow is desired.\n', '        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '            uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\n', '        );\n', '        amountOut = priceAverage.mul(amountIn).decode144();\n', '    }\n', '\n', '    // returns the amount out corresponding to the amount in for a given token using the moving average over the time\n', '    // range [now - [windowSize, windowSize - periodSize * 2], now]\n', '    // update must have been called for the bucket corresponding to timestamp `now - windowSize`\n', '    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut) {\n', '        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\n', '        Observation storage firstObservation = getFirstObservationInWindow(pair);\n', '\n', '        uint timeElapsed = block.timestamp - firstObservation.timestamp;\n', "        require(timeElapsed <= windowSize, 'SlidingWindowOracle: MISSING_HISTORICAL_OBSERVATION');\n", '        // should never happen.\n', "        require(timeElapsed >= windowSize - periodSize * 2, 'SlidingWindowOracle: UNEXPECTED_TIME_ELAPSED');\n", '\n', '        (uint price0Cumulative, uint price1Cumulative,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n', '        (address token0,) = UniswapV2Library.sortTokens(tokenIn, tokenOut);\n', '\n', '        if (token0 == tokenIn) {\n', '            return computeAmountOut(firstObservation.price0Cumulative, price0Cumulative, timeElapsed, amountIn);\n', '        } else {\n', '            return computeAmountOut(firstObservation.price1Cumulative, price1Cumulative, timeElapsed, amountIn);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ApprovedERC20 is ERC20UpgradeSafe, Configurable {\n', '    address public operator;\n', '\n', '\tfunction __ApprovedERC20_init_unchained(address operator_) public governance {\n', '\t\toperator = operator_;\n', '\t}\n', '\t\n', '\tmodifier onlyOperator {\n', "\t    require(msg.sender == operator, 'called only by operator');\n", '\t    _;\n', '\t}\n', '\n', '    function transferFrom_(address sender, address recipient, uint256 amount) external onlyOperator returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MintableERC20 is ApprovedERC20 {\n', '\tfunction mint_(address acct, uint amt) external onlyOperator {\n', '\t    _mint(acct, amt);\n', '\t}\n', '\t\n', '\tfunction burn_(address acct, uint amt) external onlyOperator {\n', '\t    _burn(acct, amt);\n', '\t}\n', '}\n', '\n', 'contract ONE is MintableERC20 {\n', '\tfunction __ONE_init(address governor_, address vault_, address oneMine) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained("One Eth", "ONE");\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__ApprovedERC20_init_unchained(vault_);\n', '\t\t__ONE_init_unchained(oneMine);\n', '\t}\n', '\t\n', '\tfunction __ONE_init_unchained(address oneMine) public governance {\n', '\t\t_mint(oneMine, 100 * 10 ** uint256(decimals()));\n', '\t}\n', '\t\n', '}\n', '\n', 'contract ONS is ApprovedERC20 {\n', '\tfunction __ONS_init(address governor_, address oneMinter_, address onsMine, address offering, address timelock) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init("One Share", "ONS");\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__ApprovedERC20_init_unchained(oneMinter_);\n', '\t\t__ONS_init_unchained(onsMine, offering, timelock);\n', '\t}\n', '\t\n', '\tfunction __ONS_init_unchained(address onsMine, address offering, address timelock) public governance {\n', '\t\t_mint(onsMine, 90000 * 10 ** uint256(decimals()));\t\t// 90%\n', '\t\t_mint(offering, 5000 * 10 ** uint256(decimals()));\t\t//  5%\n', '\t\t_mint(timelock, 5000 * 10 ** uint256(decimals()));\t\t//  5%\n', '\t}\n', '\n', '}\n', '\n', 'contract ONB is MintableERC20 {\n', '\tfunction __ONB_init(address governor_, address vault_) virtual external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init("One Bond", "ONB");\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__ApprovedERC20_init_unchained(vault_);\n', '\t}\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256) internal virtual override {\n', "        require(from == address(0) || to == address(0), 'ONB is untransferable');\n", '    }\n', '}\n', '\n', 'contract Offering is Configurable {\n', '\tusing SafeMath for uint;\n', '\tusing SafeERC20 for IERC20;\n', '\t\n', "\tbytes32 internal constant _quota_      = 'quota';\n", "\tbytes32 internal _quota_0              = '';            // placeholder\n", '\t\n', '\tIERC20 public token;\n', '\tIERC20 public currency;\n', '\tuint public price;\n', '\taddress public vault;\n', '\tuint public begin;\n', '\tuint public span;\n', '\tmapping (address => uint) public offeredOf;\n', '\t\n', '\tfunction __Offering_init(address governor_, address _token, address _currency, uint _price, uint _quota, address _vault, uint _begin, uint _span) external initializer {\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__Offering_init_unchained(_token, _currency, _price, _quota, _vault, _begin, _span);\n', '\t}\n', '\t\n', '\tfunction __Offering_init_unchained(address _token, address _currency, uint _price, uint _quota, address _vault, uint _begin, uint _span) public governance {\n', '\t\ttoken = IERC20(_token);\n', '\t\tcurrency = IERC20(_currency);\n', '\t\tprice = _price;\n', '\t\tvault = _vault;\n', '\t\tbegin = _begin;\n', '\t\tspan = _span;\n', '\t\tconfig[_quota_] = _quota;\n', '\t}\n', '\t\n', '\tfunction offer(uint vol) external {\n', "\t\trequire(now >= begin, 'Not begin');\n", '\t\tif(now > begin.add(span))\n', '\t\t\tif(token.balanceOf(address(this)) > 0)\n', '\t\t\t\ttoken.safeTransfer(vault, token.balanceOf(address(this)));\n', '\t\t\telse\n', "\t\t\t\trevert('offer over');\n", "\t\trequire(offeredOf[msg.sender] < config[_quota_], 'out of quota');\n", '\t\tvol = Math.min(Math.min(vol, config[_quota_].sub(offeredOf[msg.sender])), token.balanceOf(address(this)));\n', '\t\tofferedOf[msg.sender] = offeredOf[msg.sender].add(vol);\n', '\t\tuint amt = vol.mul(price).div(1e18);\n', '\t\tcurrency.safeTransferFrom(msg.sender, address(this), amt);\n', '\t\tcurrency.approve(vault, amt);\n', '\t\tIVault(vault).receiveAEthFrom(address(this), amt);\n', '\t\ttoken.safeTransfer(msg.sender, vol);\n', '\t}\n', '}\n', '\n', 'interface IVault {\n', '    function receiveAEthFrom(address from, uint vol) external;\n', '}\n', '\n', 'contract Timelock is Configurable {\n', '\tusing SafeMath for uint;\n', '\tusing SafeERC20 for IERC20;\n', '\t\n', '\tIERC20 public token;\n', '\taddress public recipient;\n', '\tuint public begin;\n', '\tuint public span;\n', '\tuint public times;\n', '\tuint public total;\n', '\t\n', '\tfunction start(address _token, address _recipient, uint _begin, uint _span, uint _times) external governance {\n', "\t\trequire(address(token) == address(0), 'already start');\n", '\t\ttoken = IERC20(_token);\n', '\t\trecipient = _recipient;\n', '\t\tbegin = _begin;\n', '\t\tspan = _span;\n', '\t\ttimes = _times;\n', '\t\ttotal = token.balanceOf(address(this));\n', '\t}\n', '\n', '    function unlockCapacity() public view returns (uint) {\n', '       if(begin == 0 || now < begin)\n', '            return 0;\n', '            \n', '        for(uint i=1; i<=times; i++)\n', '            if(now < span.mul(i).div(times).add(begin))\n', '                return token.balanceOf(address(this)).sub(total.mul(times.sub(i)).div(times));\n', '                \n', '        return token.balanceOf(address(this));\n', '    }\n', '    \n', '    function unlock() public {\n', '        token.safeTransfer(recipient, unlockCapacity());\n', '    }\n', '    \n', '    fallback() external {\n', '        unlock();\n', '    }\n', '}\n', '\n', 'interface IAETH is IERC20 {\n', '    function ratio() external view returns (uint256);\n', '}\n', '\n', 'contract Constant {\n', "    bytes32 internal constant _ratioAEthWhenMint_       = 'ratioAEthWhenMint';\n", '}\n', '\n', 'contract Vault is Constant, Configurable {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '    using EmaOracle for EmaOracle.Observations;\n', '    \n', "    bytes32 internal constant _periodTwapOne_           = 'periodTwapOne';\n", "    bytes32 internal constant _periodTwapOns_           = 'periodTwapOns';\n", "    bytes32 internal constant _periodTwapAEth_          = 'periodTwapAEth';\n", "    //bytes32 internal constant _thresholdReserve_        = 'thresholdReserve';\n", "    bytes32 internal constant _initialMintQuota_        = 'initialMintQuota';\n", "    bytes32 internal constant _rebaseInterval_          = 'rebaseInterval';\n", "    bytes32 internal constant _rebaseThreshold_         = 'rebaseThreshold';\n", "    bytes32 internal constant _rebaseCap_               = 'rebaseCap';\n", '    \n', '    address public oneMinter;\n', '    ONE public one;\n', '    ONS public ons;\n', '    address public onb;\n', '    IAETH public aEth;\n', '    address public WETH;\n', '    uint public begin;\n', '    uint public span;\n', '    EmaOracle.Observations public twapOne;\n', '    EmaOracle.Observations public twapOns;\n', '    EmaOracle.Observations public twapAEth;\n', '    uint public totalEthValue;\n', '    uint public rebaseTime;\n', '    \n', '\tfunction __Vault_init(address governor_, address _oneMinter, ONE _one, ONS _ons, address _onb, IAETH _aEth, address _WETH, uint _begin, uint _span) external initializer {\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__Vault_init_unchained(_oneMinter, _one, _ons, _onb, _aEth, _WETH, _begin, _span);\n', '\t}\n', '\t\n', '\tfunction __Vault_init_unchained(address _oneMinter, ONE _one, ONS _ons, address _onb, IAETH _aEth, address _WETH, uint _begin, uint _span) public governance {\n', '\t\toneMinter = _oneMinter;\n', '\t\tone = _one;\n', '\t\tons = _ons;\n', '\t\tonb = _onb;\n', '\t\taEth = _aEth;\n', '\t\tWETH = _WETH;\n', '\t\tbegin = _begin;\n', '\t\tspan = _span;\n', '\t\t//config[_thresholdReserve_]  = 0.8 ether;\n', '\t\tconfig[_ratioAEthWhenMint_] = 0.9 ether;\n', '\t\tconfig[_periodTwapOne_]     =  8 hours;\n', '\t\tconfig[_periodTwapOns_]     = 15 minutes;\n', '\t\tconfig[_periodTwapAEth_]    = 15 minutes;\n', '\t\tconfig[_initialMintQuota_]  = 10000 ether;\n', '\t\tconfig[_rebaseInterval_]    = 8 hours;\n', '\t\tconfig[_rebaseThreshold_]   = 1.05 ether;\n', '\t\tconfig[_rebaseCap_]         = 0.05 ether;   // 5%\n', '\t\trebaseTime = now;\n', '\t}\n', '\t\n', '\tfunction twapInit(address swapFactory) external governance {\n', '\t\ttwapOne.initialize(swapFactory, config[_periodTwapOne_], address(one), address(aEth));\n', '\t\ttwapOns.initialize(swapFactory, config[_periodTwapOns_], address(ons), address(aEth));\n', '\t\ttwapAEth.initialize(swapFactory, config[_periodTwapAEth_], address(aEth), WETH);\n', '\t}\n', '\t\t\n', '    modifier updateTwap {\n', '        twapOne.update(config[_periodTwapOne_], address(one), address(aEth));\n', '        twapOns.update(config[_periodTwapOns_], address(ons), address(aEth));\n', '        twapAEth.update(config[_periodTwapAEth_], address(aEth), WETH);\n', '        _;\n', '    }\n', '    \n', '    //function updateTWAP() external updateTwap {\n', '    //    \n', '    //}\n', '    \n', '    //function mintONE(uint amt) external updateTwap {\n', '    //    if(now < begin || now > begin.add(span)) {\n', '    //        uint quota = IERC20(one).totalSupply().sub0(IERC20(aEth).balanceOf(address(this)).mul(1e18).div(config[_thresholdReserve_]));\n', "    //        require(quota > 0 , 'mintONE only when aEth.balanceOf(this)/one.totalSupply() < 80%');\n", '    //        amt = Math.min(amt, quota);\n', '    //    }\n', '    //    \n', '    //    IERC20(aEth).safeTransferFrom(msg.sender, address(this), amt.mul(config[_ratioAEthWhenMint_]).div(1e18));\n', '    //    \n', '    //    uint vol = amt.mul(uint(1e18).sub(config[_ratioAEthWhenMint_])).div(1e18);\n', '    //    vol = twapOns.consultHi(config[_periodTwapOns_], address(aEth), vol, address(ons));\n', '    //    ons.transferFrom_(msg.sender, address(this), vol);\n', '    //    \n', '    //    one.mint_(msg.sender, amt);\n', '    //}\n', '    \n', '    function E2B(uint vol) external {\n', '        \n', '    }\n', '    \n', '    function B2E(uint vol) external {\n', '        \n', '    }\n', '    \n', '    function burnONE(uint amt) external {\n', '        \n', '    }\n', '    \n', '    function burnONB(uint vol) external {\n', '        \n', '    }\n', '    \n', '    function onePriceNow() public view returns (uint price) {\n', '        price = twapOne.consultNow( address(one), 1 ether, address(aEth));\n', '        price = twapAEth.consultNow(address(aEth), price,  address(WETH));\n', '    }\n', '    function onePriceEma() public view returns (uint price) {\n', '        price = twapOne.consultEma( config[_periodTwapOne_],  address(one), 1 ether, address(aEth));\n', '        price = twapAEth.consultEma(config[_periodTwapAEth_], address(aEth), price,  address(WETH));\n', '    }\n', '    function onePriceHi() public view returns (uint) {\n', '        return Math.max(onePriceNow(), onePriceEma());\n', '    }\n', '    function onePriceLo() public view returns (uint) {\n', '        return Math.min(onePriceNow(), onePriceEma());\n', '    }\n', '    \n', '    function onsPriceNow() public view returns (uint price) {\n', '        price = twapOns.consultNow( address(ons), 1 ether, address(aEth));\n', '        price = twapAEth.consultNow(address(aEth), price,  address(WETH));\n', '    }\n', '    function onsPriceEma() public view returns (uint price) {\n', '        price = twapOns.consultEma( config[_periodTwapOns_],  address(ons), 1 ether, address(aEth));\n', '        price = twapAEth.consultEma(config[_periodTwapAEth_], address(aEth), price,  address(WETH));\n', '    }\n', '    function onsPriceHi() public view returns (uint) {\n', '        return Math.max(onsPriceNow(), onsPriceEma());\n', '    }\n', '    function onsPriceLo() public view returns (uint) {\n', '        return Math.min(onsPriceNow(), onsPriceEma());\n', '    }\n', '    \n', '    function rebaseable() public view returns (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) {\n', '        uint aEthPrice = 1e36 / aEth.ratio();\n', '        uint onsPrice  = onsPriceLo();\n', '        uint aEthBalance = aEth.balanceOf(oneMinter);\n', '        uint onsBalance  = ons.balanceOf(oneMinter);\n', '        uint oneVolAEth = aEthBalance.mul(aEthPrice).div(config[_ratioAEthWhenMint_]);\n', '        uint oneVolOns  = onsBalance.mul(onsPrice).div(uint(1e18).sub(config[_ratioAEthWhenMint_]));\n', '        oneVol = one.totalSupply().mul(config[_rebaseCap_]).div(1e18);\n', '        oneVol = Math.min(Math.min(oneVol, oneVolAEth), oneVolOns);\n', '        if(oneVol == 0)\n', '            return (0, 0, 0, 0, 0);\n', '        //aEthVol = oneVol.mul(config[_ratioAEthWhenMint_]).div(aEthPrice);\n', '        //onsVol  = oneVol.mul(uint(1e18).sub(config[_ratioAEthWhenMint_])).div(onsPrice);\n', '        aEthRatio = oneVol.mul(1e18).div(oneVolAEth);\n', '        onsRatio  = oneVol.mul(1e18).div(oneVolOns);\n', '        aEthVol = aEthBalance.mul(aEthRatio).div(1e18);\n', '        onsVol  = onsBalance.mul(onsRatio).div(1e18);\n', '    }\n', '    \n', '    function rebase() public updateTwap returns (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) {\n', '        if(now < begin)\n', '            return (0, 0, 0, 0, 0);\n', '        else if (now > begin.add(span) || one.totalSupply() >= config[_initialMintQuota_]) {\n', '            uint interval = config[_rebaseInterval_];\n', '            if(now / interval <= rebaseTime / interval)\n', '                return (0, 0, 0, 0, 0);\n', '            uint price = onePriceLo();\n', '            if(price < config[_rebaseThreshold_])\n', '                return (0, 0, 0, 0, 0);\n', '        }        \n', '        (aEthVol, aEthRatio, onsVol, onsRatio, oneVol) = rebaseable();\n', '        if(oneVol == 0)\n', '            return (0, 0, 0, 0, 0);\n', '            \n', '        receiveAEthFrom(address(oneMinter), aEthVol);\n', '        ons.transferFrom(address(oneMinter), address(this), onsVol);\n', '        one.mint_(address(oneMinter), oneVol);\n', '        rebaseTime = now;\n', '        emit Rebase(aEthVol, aEthRatio, onsVol, onsRatio, oneVol);\n', '    }\n', '    event Rebase(uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol);\n', '    \n', '    function receiveAEthFrom(address from, uint vol) public {\n', '        aEth.transferFrom(from, address(this), vol);\n', '        totalEthValue = totalEthValue.add(vol.mul(1e18).div(aEth.ratio()));\n', '    }\n', '    \n', '    function _sendAEthTo(address to, uint vol) internal {\n', '        totalEthValue = totalEthValue.sub(vol.mul(1e18).div(aEth.ratio()));\n', '        aEth.transfer(to, vol);\n', '    }\n', '    \n', '    function interests() public view returns (uint) {\n', '        return aEth.balanceOf(address(this)).mul(1e18).div(aEth.ratio()).sub(totalEthValue);\n', '    }\n', '}\n', '\n', 'contract OneMinter is Constant, Configurable {\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint internal constant INITIAL_INPUT = 1e27;\n', '\n', '    Vault public vault;\n', '    ONE public one;\n', '    ONS public ons;\n', '    IAETH public aEth;\n', '    \n', '    mapping (address => uint) internal _aEthBalances;\n', '    mapping (address => uint) internal _onsBalances;\n', '    mapping (address => uint) internal _aEthRIOs;\n', '    mapping (address => uint) internal _onsRIOs;\n', '    mapping (uint => uint) internal _aEthRioIn;\n', '    mapping (uint => uint) internal _onsRioIn;\n', '    uint internal _aEthRound;\n', '    uint internal _onsRound;\n', '\n', '    function __OneMinter_init(address governor_, address vault_) external initializer {\n', '        __Governable_init_unchained(governor_);\n', '        __OneMinter_init_unchained(vault_);\n', '    }\n', '    \n', '\tfunction __OneMinter_init_unchained(address vault_) public governance {\n', '\t\tvault = Vault(vault_);\n', '\t\tone = ONE(vault.one());\n', '\t\tons = ONS(vault.ons());\n', '\t\taEth = IAETH(vault.aEth());\n', '\t\taEth.approve(address(vault), uint(-1));\n', '\t\tons.approve(address(vault), uint(-1));\n', '        _aEthRound = _onsRound = 1;\n', '        _aEthRioIn[1] = packRIO(1, INITIAL_INPUT, 0);\n', '        _onsRioIn [1] = packRIO(1, INITIAL_INPUT, 0);\n', '\t}\n', '\t\n', '    //struct RIO {\n', '    //    uint32  round;\n', '    //    uint112 input;\n', '    //    uint112 output;\n', '    //}\n', '\n', '    function packRIO(uint256 round, uint256 input, uint256 output) internal pure virtual returns (uint256) {\n', "        require(round <= uint32(-1) && input <= uint112(-1) && output <= uint112(-1), 'RIO OVERFLOW');\n", '        return round << 224 | input << 112 | output;\n', '    }\n', '    \n', '    function unpackRIO(uint256 rio) internal pure virtual returns (uint256 round, uint256 input, uint256 output) {\n', '        round  = rio >> 224;\n', '        input  = uint112(rio >> 112);\n', '        output = uint112(rio);\n', '    }\n', '    \n', '    function totalSupply() external view returns (uint aEthSupply, uint onsSupply) {\n', '        aEthSupply = aEth.balanceOf(address(this));\n', '        onsSupply  =  ons.balanceOf(address(this));\n', '    }\n', '    \n', '    function balanceOf_(address acct) public returns (uint aEthBal, uint onsBal) {\n', '        _rebase();\n', '        return balanceOf(acct);\n', '    }\n', '    \n', '    function balanceOf(address acct) public view returns (uint aEthBal, uint onsBal) {\n', '        uint rio = _aEthRIOs[acct];\n', '        (uint r, uint i, ) = unpackRIO(rio);\n', '        uint RIO = _aEthRioIn[r];\n', '        if(RIO != rio) {\n', '            (, uint I, ) = unpackRIO(RIO);\n', '            aEthBal = _aEthBalances[acct].mul(I).div(i);\n', '        } else\n', '            aEthBal = _aEthBalances[acct];\n', '\n', '        rio = _onsRIOs[acct];\n', '        (r, i, ) = unpackRIO(rio);\n', '        RIO = _onsRioIn[r];\n', '        if(RIO != rio) {\n', '            (, uint I, ) = unpackRIO(RIO);\n', '            onsBal = _onsBalances[acct].mul(I).div(i);\n', '        } else\n', '            onsBal = _onsBalances[acct];\n', '    }\n', '    \n', '    function mintInitial(uint aEthVol, uint onsVol) external {\n', '        purchase(aEthVol, onsVol);\n', '        //mint();\n', '        cancel(uint(-1), uint(-1));\n', '    }\n', '    \n', '    function purchase(uint aEthVol, uint onsVol) public {\n', '        mint();\n', '        \n', '        aEth.transferFrom(msg.sender, address(this), aEthVol);\n', '        ons.transferFrom_(msg.sender, address(this), onsVol);\n', '        _aEthBalances[msg.sender] = _aEthBalances[msg.sender].add(aEthVol);\n', '        _onsBalances [msg.sender] = _onsBalances [msg.sender].add(onsVol);\n', '        \n', '        emit Purchase(msg.sender, aEthVol, onsVol);\n', '    }\n', '    event Purchase(address acct, uint aEthVol, uint onsVol);\n', '    \n', '    function cancel(uint aEthVol, uint onsVol) public {\n', '        mint();\n', '        \n', '        if(aEthVol == uint(-1))\n', '            aEthVol = _aEthBalances[msg.sender];\n', '        if(onsVol == uint(-1))\n', '            onsVol = _onsBalances[msg.sender];\n', '        _aEthBalances[msg.sender] = _aEthBalances[msg.sender].sub(aEthVol);\n', '        _onsBalances [msg.sender] = _onsBalances [msg.sender].sub(onsVol);\n', '        aEth.transfer(msg.sender, aEthVol);\n', '        ons.transfer (msg.sender, onsVol);\n', '        \n', '        emit Cancel(msg.sender, aEthVol, onsVol);\n', '    }\n', '    event Cancel(address acct, uint aEthVol, uint onsVol);\n', '    \n', '    function mintable_(address acct) public returns (uint) {\n', '        _rebase();\n', '        return mintable(acct);\n', '    }\n', '    \n', '    function mintable(address acct) public view returns (uint vol) {\n', '        uint rio = _aEthRIOs[acct];\n', '        (uint r, uint i, uint o) = unpackRIO(rio);\n', '        uint RIO = _aEthRioIn[r];\n', '        if(rio == RIO)\n', '            return 0;\n', '        \n', '        uint bal = _aEthBalances[acct];\n', '        (, , uint O) = unpackRIO(RIO);\n', '        vol = O.sub(o).mul(bal).div(i);\n', '\n', '        rio = _onsRIOs[acct];\n', '        (r, i, o) = unpackRIO(rio);\n', '        RIO = _onsRioIn[r];\n', '        (, , O) = unpackRIO(RIO);\n', '        vol = O.sub(o).mul(bal).div(i).add(vol);\n', '    }\n', '    \n', '    function mint() public {\n', '        _rebase();\n', '        \n', '        (uint aEthBal, uint onsBal) = balanceOf(msg.sender);\n', '        uint oneVol = mintable(msg.sender);\n', '        \n', '        uint RIO = _aEthRioIn[_aEthRound];\n', '        uint rio = _aEthRIOs[msg.sender];\n', '        if(rio != RIO) {\n', '            _aEthRIOs[msg.sender] = RIO;\n', '            _onsRIOs [msg.sender] = _onsRioIn[_onsRound];\n', '        }\n', '            \n', '        _aEthBalances[msg.sender] = aEthBal;\n', '        _onsBalances [msg.sender] = onsBal;\n', '        one.transfer(msg.sender, oneVol);\n', '        emit Mint(msg.sender, oneVol);\n', '    }\n', '    event Mint(address acct, uint oneVol);\n', '    \n', '    function _rebase() internal {\n', '        (uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol) = vault.rebase();\n', '        if(oneVol == 0)\n', '            return;\n', '            \n', '        uint ratioAEthWhenMint = vault.getConfig(_ratioAEthWhenMint_);\n', '        (uint round, uint input, uint output) = unpackRIO(_aEthRioIn[_aEthRound]);\n', '        output = oneVol.mul(ratioAEthWhenMint).div(aEthVol).mul(input.mul(aEthRatio).div(1e18)).div(1e18).add(output);\n', '        input = uint(1e18).sub(aEthRatio).mul(input).div(1e18);\n', '        _aEthRioIn[round] = packRIO(round, input, output);\n', '        if(input == 0)\n', '            _aEthRioIn[++_aEthRound] = packRIO(++round, INITIAL_INPUT, 0);\n', '            \n', '        (round, input, output) = unpackRIO(_onsRioIn[_onsRound]);\n', '        output = oneVol.mul(uint(1e18).sub(ratioAEthWhenMint)).div(onsVol).mul(input.mul(onsRatio).div(1e18)).div(1e18).add(output);\n', '        input = uint(1e18).sub(onsRatio).mul(input).div(1e18);\n', '        _onsRioIn[round] = packRIO(round, input, output);\n', '        if(input == 0)\n', '            _onsRioIn[++_onsRound] = packRIO(++round, INITIAL_INPUT, 0);\n', '            \n', '        emit Rebase(aEthVol, aEthRatio, onsVol, onsRatio, oneVol);\n', '    }\n', '    event Rebase(uint aEthVol, uint aEthRatio, uint onsVol, uint onsRatio, uint oneVol);\n', '}']