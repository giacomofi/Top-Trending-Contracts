['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.6.11 >=0.5.12 >=0.6.11 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/CollateralOpts.sol\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'struct CollateralOpts {\n', '    bytes32 ilk;\n', '    address gem;\n', '    address join;\n', '    address flip;\n', '    address pip;\n', '    bool    isLiquidatable;\n', '    bool    isOSM;\n', '    bool    whitelistOSM;\n', '    uint256 ilkDebtCeiling;\n', '    uint256 minVaultAmount;\n', '    uint256 maxLiquidationAmount;\n', '    uint256 liquidationPenalty;\n', '    uint256 ilkStabilityFee;\n', '    uint256 bidIncrease;\n', '    uint256 bidDuration;\n', '    uint256 auctionDuration;\n', '    uint256 liquidationRatio;\n', '}\n', '\n', '////// lib/dss-exec-lib/src/MathLib.sol\n', '//\n', '// MathLib.sol -- Math Functions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'library MathLib {\n', '\n', '    uint256 constant internal WAD      = 10 ** 18;\n', '    uint256 constant internal RAY      = 10 ** 27;\n', '    uint256 constant internal RAD      = 10 ** 45;\n', '    uint256 constant internal THOUSAND = 10 ** 3;\n', '    uint256 constant internal MILLION  = 10 ** 6;\n', '\n', '    uint256 constant internal BPS_ONE_PCT             = 100;\n', '    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n', '    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n', '\n', '    // --- SafeMath Functions ---\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.11; */\n', '\n', '/* import "./MathLib.sol"; */\n', '\n', 'interface Initializable {\n', '    function init(bytes32) external;\n', '}\n', '\n', 'interface Authorizable {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', 'interface Drippable {\n', '    function drip() external returns (uint256);\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface Pricing {\n', '    function poke(bytes32) external;\n', '}\n', '\n', 'interface ERC20 {\n', '    function decimals() external returns (uint8);\n', '}\n', '\n', 'interface DssVat {\n', '    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n', '    function Line() external view returns (uint256);\n', '}\n', '\n', 'interface AuctionLike {\n', '    function vat() external returns (address);\n', '    function cat() external returns (address); // Only flip\n', '    function beg() external returns (uint256);\n', '    function pad() external returns (uint256); // Only flop\n', '    function ttl() external returns (uint256);\n', '    function tau() external returns (uint256);\n', '    function ilk() external returns (bytes32); // Only flip\n', '    function gem() external returns (bytes32); // Only flap/flop\n', '}\n', '\n', 'interface JoinLike {\n', '    function vat() external returns (address);\n', '    function ilk() external returns (bytes32);\n', '    function gem() external returns (address);\n', '    function dec() external returns (uint256);\n', '}\n', '\n', '// Includes Median and OSM functions\n', 'interface OracleLike {\n', '    function src() external view returns (address);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', 'interface MomLike {\n', '    function setOsm(bytes32, address) external;\n', '}\n', '\n', 'interface RegistryLike {\n', '    function add(address) external;\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, address, address, address, address\n', '    );\n', '    function ilkData(bytes32) external view returns (\n', '        uint256       pos,\n', '        address       gem,\n', '        address       pip,\n', '        address       join,\n', '        address       flip,\n', '        uint256       dec,\n', '        string memory name,\n', '        string memory symbol\n', '    );\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface IAMLike {\n', '    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n', '    function setIlk(bytes32,uint256,uint256,uint256) external;\n', '    function remIlk(bytes32) external;\n', '    function exec(bytes32) external returns (uint256);\n', '}\n', '\n', '\n', 'library DssExecLib {\n', '\n', '    using MathLib for *;\n', '\n', '    /****************************/\n', '    /*** Changelog Management ***/\n', '    /****************************/\n', '    /**\n', '        @dev Set an address in the MCD on-chain changelog.\n', '        @param _log Address of the chainlog contract\n', '        @param _key Access key for the address (e.g. "MCD_VAT")\n', '        @param _val The address associated with the _key\n', '    */\n', '    function setChangelogAddress(address _log, bytes32 _key, address _val) public {\n', '        ChainlogLike(_log).setAddress(_key, _val);\n', '    }\n', '\n', '    /**\n', '        @dev Set version in the MCD on-chain changelog.\n', '        @param _log Address of the chainlog contract\n', '        @param _version Changelog version (e.g. "1.1.2")\n', '    */\n', '    function setChangelogVersion(address _log, string memory _version) public {\n', '        ChainlogLike(_log).setVersion(_version);\n', '    }\n', '    /**\n', '        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\n', '        @param _log Address of the chainlog contract\n', '        @param _ipfsHash IPFS hash (e.g. "QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW")\n', '    */\n', '    function setChangelogIPFS(address _log, string memory _ipfsHash) public {\n', '        ChainlogLike(_log).setIPFS(_ipfsHash);\n', '    }\n', '    /**\n', '        @dev Set SHA256 hash in MCD on-chain changelog.\n', '        @param _log Address of the chainlog contract\n', '        @param _SHA256Sum SHA256 hash (e.g. "e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b")\n', '    */\n', '    function setChangelogSHA256(address _log, string memory _SHA256Sum) public {\n', '        ChainlogLike(_log).setSha256sum(_SHA256Sum);\n', '    }\n', '\n', '\n', '    /**********************/\n', '    /*** Authorizations ***/\n', '    /**********************/\n', '    /**\n', '        @dev Give an address authorization to perform auth actions on the contract.\n', '        @param _base   The address of the contract where the authorization will be set\n', '        @param _ward   Address to be authorized\n', '    */\n', '    function authorize(address _base, address _ward) public {\n', '        Authorizable(_base).rely(_ward);\n', '    }\n', '    /**\n', '        @dev Revoke contract authorization from an address.\n', '        @param _base   The address of the contract where the authorization will be revoked\n', '        @param _ward   Address to be deauthorized\n', '    */\n', '    function deauthorize(address _base, address _ward) public {\n', '        Authorizable(_base).deny(_ward);\n', '    }\n', '\n', '    /**************************/\n', '    /*** Accumulating Rates ***/\n', '    /**************************/\n', '    /**\n', '        @dev Update rate accumulation for the Dai Savings Rate (DSR).\n', '        @param _pot   Address of the MCD_POT core contract\n', '    */\n', '    function accumulateDSR(address _pot) public {\n', '        Drippable(_pot).drip();\n', '    }\n', '    /**\n', '        @dev Update rate accumulation for the stability fees of a given collateral type.\n', '        @param _jug   Address of the MCD_JUG core contract\n', '        @param _ilk   Collateral type\n', '    */\n', '    function accumulateCollateralStabilityFees(address _jug, bytes32 _ilk) public {\n', '        Drippable(_jug).drip(_ilk);\n', '    }\n', '\n', '    /*********************/\n', '    /*** Price Updates ***/\n', '    /*********************/\n', '    /**\n', '        @dev Update price of a given collateral type.\n', '        @param _spot  Spotter contract address\n', '        @param _ilk   Collateral type\n', '    */\n', '    function updateCollateralPrice(address _spot, bytes32 _ilk) public {\n', '        Pricing(_spot).poke(_ilk);\n', '    }\n', '\n', '    /****************************/\n', '    /*** System Configuration ***/\n', '    /****************************/\n', '    /**\n', '        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\n', '        @param _base   The address of the contract where the new contract address will be filed\n', '        @param _what   Name of contract to file\n', '        @param _addr   Address of contract to file\n', '    */\n', '    function setContract(address _base, bytes32 _what, address _addr) public {\n', '        Fileable(_base).file(_what, _addr);\n', '    }\n', '    /**\n', '        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\n', '        @param _base   The address of the contract where the new contract address will be filed\n', '        @param _ilk    Collateral type\n', '        @param _what   Name of contract to file\n', '        @param _addr   Address of contract to file\n', '    */\n', '    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\n', '        Fileable(_base).file(_ilk, _what, _addr);\n', '    }\n', '\n', '    /******************************/\n', '    /*** System Risk Parameters ***/\n', '    /******************************/\n', '    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\n', '    /**\n', '        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setGlobalDebtCeiling(address _vat, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-global-Line-precision"\n', '        Fileable(_vat).file("Line", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function increaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-Line-increase-precision"\n', '        Fileable(_vat).file("Line", MathLib.add(DssVat(_vat).Line(), _amount * MathLib.RAD));\n', '    }\n', '    /**\n', '        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function decreaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-Line-decrease-precision"\n', '        Fileable(_vat).file("Line", MathLib.sub(DssVat(_vat).Line(), _amount * MathLib.RAD));\n', '    }\n', '    /**\n', '        @dev Set the Dai Savings Rate. See: docs/rates.txt\n', '        @param _pot    The address of the Pot core contract\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '    */\n', '    function setDSR(address _pot, uint256 _rate) public {\n', '        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // "LibDssExec/dsr-out-of-bounds"\n', '        Fileable(_pot).file("dsr", _rate);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\n', '        @param _vow    The address of the Vow core contract\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setSurplusAuctionAmount(address _vow, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-vow-bump-precision"\n', '        Fileable(_vow).file("bump", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\n', '        @param _vow    The address of the Vow core contract\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setSurplusBuffer(address _vow, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-vow-hump-precision"\n', '        Fileable(_vow).file("hump", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _flap    The address of the Flapper core contract\n', '        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setMinSurplusAuctionBidIncrease(address _flap, uint256 _pct_bps) public {\n', '        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-flap-beg-precision"\n', '        Fileable(_flap).file("beg", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for surplus auctions.\n', '        @param _flap   The address of the Flapper core contract\n', '        @param _duration Amount of time for bids.\n', '    */\n', '    function setSurplusAuctionBidDuration(address _flap, uint256 _duration) public {\n', '        Fileable(_flap).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set total auction duration for surplus auctions.\n', '        @param _flap   The address of the Flapper core contract\n', '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setSurplusAuctionDuration(address _flap, uint256 _duration) public {\n', '        Fileable(_flap).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\n', '        @param _vow    The address of the Vow core contract\n', '        @param _duration Duration in seconds\n', '    */\n', '    function setDebtAuctionDelay(address _vow, uint256 _duration) public {\n', '        Fileable(_vow).file("wait", _duration);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\n', '        @param _vow    The address of the Vow core contract\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setDebtAuctionDAIAmount(address _vow, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-vow-sump-precision"\n', '        Fileable(_vow).file("sump", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\n', '        @param _vow    The address of the Vow core contract\n', '        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\n', '    */\n', '    function setDebtAuctionMKRAmount(address _vow, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-vow-dump-precision"\n', '        Fileable(_vow).file("dump", _amount * MathLib.WAD);\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _flop   The address of the Flopper core contract\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setMinDebtAuctionBidIncrease(address _flop, uint256 _pct_bps) public {\n', '        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-flap-beg-precision"\n', '        Fileable(_flop).file("beg", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for debt auctions.\n', '        @param _flop   The address of the Flopper core contract\n', '        @param _duration Amount of time for bids.\n', '    */\n', '    function setDebtAuctionBidDuration(address _flop, uint256 _duration) public {\n', '        Fileable(_flop).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set total auction duration for debt auctions.\n', '        @param _flop   The address of the Flopper core contract\n', '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setDebtAuctionDuration(address _flop, uint256 _duration) public {\n', '        Fileable(_flop).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\n', '        @dev MKR amount is increased by this rate every "tick" (if auction duration has passed and no one has bid on the MKR)\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _flop   The address of the Flopper core contract\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setDebtAuctionMKRIncreaseRate(address _flop, uint256 _pct_bps) public {\n', '        Fileable(_flop).file("pad", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\n', '        @param _cat    The address of the Cat core contract\n', '        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\n', '    */\n', '    function setMaxTotalDAILiquidationAmount(address _cat, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-vow-dump-precision"\n', '        Fileable(_cat).file("box", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\n', '        @param _end    The address of the End core contract\n', '        @param _duration Time in seconds to set for ES processing time\n', '    */\n', '    function setEmergencyShutdownProcessingTime(address _end, uint256 _duration) public {\n', '        Fileable(_end).file("wait", _duration);\n', '    }\n', '    /**\n', '        @dev Set the global stability fee (is not typically used, currently is 0).\n', '            Many of the settings that change weekly rely on the rate accumulator\n', '            described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '            To check this yourself, use the following rate calculation (example 8%):\n', '\n', "            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '\n', '            A table of rates can also be found at:\n', '            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '        @param _jug    The address of the Jug core accounting contract\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '    */\n', '    function setGlobalStabilityFee(address _jug, uint256 _rate) public {\n', '        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // "LibDssExec/global-stability-fee-out-of-bounds"\n', '        Fileable(_jug).file("base", _rate);\n', '    }\n', '    /**\n', '        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is value * RAY / 1000\n', '        @param _spot   The address of the Spot core contract\n', '        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\n', '    */\n', '    function setDAIReferenceValue(address _spot, uint256 _value) public {\n', '        require(_value < MathLib.WAD);  // "LibDssExec/incorrect-ilk-dunk-precision"\n', '        Fileable(_spot).file("par", MathLib.rdiv(_value, 1000));\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Management ***/\n', '    /*****************************/\n', '    /**\n', '        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        Fileable(_vat).file(_ilk, "line", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\n', '        @param _global If true, increases the global debt ceiling by _amount\n', '    */\n', '    function increaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\n', '        Fileable(_vat).file(_ilk, "line", MathLib.add(line_, _amount * MathLib.RAD));\n', '        if (_global) { increaseGlobalDebtCeiling(_vat, _amount); }\n', '    }\n', '    /**\n', '        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\n', '        @param _global If true, decreases the global debt ceiling by _amount\n', '    */\n', '    function decreaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\n', '        Fileable(_vat).file(_ilk, "line", MathLib.sub(line_, _amount * MathLib.RAD));\n', '        if (_global) { decreaseGlobalDebtCeiling(_vat, _amount); }\n', '    }\n', '    /**\n', '        @dev Set the parameters for an ilk in the "MCD_IAM_AUTO_LINE" auto-line\n', '        @param _iam    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\n', '        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\n', '        @param _ttl    The amount of time (in seconds)\n', '    */\n', '    function setIlkAutoLineParameters(address _iam, bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-auto-line-amount-precision"\n', '        require(_gap < MathLib.WAD);  // "LibDssExec/incorrect-auto-line-gap-precision"\n', '        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, _gap * MathLib.RAD, _ttl);\n', '    }\n', '    /**\n', '        @dev Set the debt ceiling for an ilk in the "MCD_IAM_AUTO_LINE" auto-line without updating the time values\n', '        @param _iam    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkAutoLineDebtCeiling(address _iam, bytes32 _ilk, uint256 _amount) public {\n', '        (, uint256 gap, uint48 ttl,,) = IAMLike(_iam).ilks(_ilk);\n', '        require(gap != 0 && ttl != 0);  // "LibDssExec/auto-line-not-configured"\n', '        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, uint256(gap), uint256(ttl));\n', '    }\n', '    /**\n', '        @dev Remove an ilk in the "MCD_IAM_AUTO_LINE" auto-line\n', '        @param _iam    The address of the MCD_IAM_AUTO_LINE core accounting contract\n', '        @param _ilk    The ilk to remove (ex. bytes32("ETH-A"))\n', '    */\n', '    function removeIlkFromAutoLine(address _iam, bytes32 _ilk) public {\n', '        IAMLike(_iam).remIlk(_ilk);\n', '    }\n', '    /**\n', '        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\n', '        @param _vat    The address of the Vat core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkMinVaultAmount(address _vat, bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-ilk-dust-precision"\n', '        Fileable(_vat).file(_ilk, "dust", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\n', '    */\n', '    function setIlkLiquidationPenalty(address _cat, bytes32 _ilk, uint256 _pct_bps) public {\n', '        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-ilk-chop-precision"\n', '        Fileable(_cat).file(_ilk, "chop", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\n', '        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkMaxLiquidationAmount(address _cat, bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < MathLib.WAD);  // "LibDssExec/incorrect-ilk-dunk-precision"\n', '        Fileable(_cat).file(_ilk, "dunk", _amount * MathLib.RAD);\n', '    }\n', '    /**\n', '        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is pct * RAY / 10,000\n', '        @param _spot   The address of the Spot core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\n', '    */\n', '    function setIlkLiquidationRatio(address _spot, bytes32 _ilk, uint256 _pct_bps) public {\n', '        require(_pct_bps < 10 * MathLib.BPS_ONE_HUNDRED_PCT); // "LibDssExec/incorrect-ilk-mat-precision" // Fails if pct >= 1000%\n', '        require(_pct_bps >= MathLib.BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\n', '        Fileable(_spot).file(_ilk, "mat", MathLib.rdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT));\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', "        @param _flip   The address of the ilk's flip core accounting contract\n", '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setIlkMinAuctionBidIncrease(address _flip, uint256 _pct_bps) public {\n', '        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-ilk-chop-precision"\n', '        Fileable(_flip).file("beg", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for a collateral type.\n', "        @param _flip   The address of the ilk's flip core accounting contract\n", '        @param _duration Amount of time for bids.\n', '    */\n', '    function setIlkBidDuration(address _flip, uint256 _duration) public {\n', '        Fileable(_flip).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set auction duration for a collateral type.\n', "        @param _flip   The address of the ilk's flip core accounting contract\n", '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setIlkAuctionDuration(address _flip, uint256 _duration) public {\n', '        Fileable(_flip).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the stability fee for a given ilk.\n', '            Many of the settings that change weekly rely on the rate accumulator\n', '            described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '            To check this yourself, use the following rate calculation (example 8%):\n', '\n', "            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '\n', '            A table of rates can also be found at:\n', '            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '\n', '        @param _jug    The address of the Jug core accounting contract\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A") )\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '        @param _doDrip `true` to accumulate stability fees for the collateral\n', '    */\n', '    function setIlkStabilityFee(address _jug, bytes32 _ilk, uint256 _rate, bool _doDrip) public {\n', '        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // "LibDssExec/ilk-stability-fee-out-of-bounds"\n', '        if (_doDrip) Drippable(_jug).drip(_ilk);\n', '\n', '        Fileable(_jug).file(_ilk, "duty", _rate);\n', '    }\n', '\n', '    /***********************/\n', '    /*** Core Management ***/\n', '    /***********************/\n', '    /**\n', '        @dev Update collateral auction contracts.\n', '        @param _vat        Vat core contract address\n', '        @param _cat        Cat core contract address\n', '        @param _end        End core contract address\n', '        @param _flipperMom Flipper Mom core contract address\n', "        @param _ilk        The collateral's auction contract to update\n", '        @param _newFlip    New auction contract address\n', '        @param _oldFlip    Old auction contract address\n', '    */\n', '    function updateCollateralAuctionContract(\n', '        address _vat,\n', '        address _cat,\n', '        address _end,\n', '        address _flipperMom,\n', '        bytes32 _ilk,\n', '        address _newFlip,\n', '        address _oldFlip\n', '    ) public {\n', '        // Add new flip address to Cat\n', '        setContract(_cat, _ilk, "flip", _newFlip);\n', '\n', '        // Authorize MCD contracts for new flip\n', '        authorize(_newFlip, _cat);\n', '        authorize(_newFlip, _end);\n', '        authorize(_newFlip, _flipperMom);\n', '\n', '        // Deauthorize MCD contracts for old flip\n', '        deauthorize(_oldFlip, _cat);\n', '        deauthorize(_oldFlip, _end);\n', '        deauthorize(_oldFlip, _flipperMom);\n', '\n', '        // Transfer auction params from old flip to new flip\n', '        Fileable(_newFlip).file("beg", AuctionLike(_oldFlip).beg());\n', '        Fileable(_newFlip).file("ttl", AuctionLike(_oldFlip).ttl());\n', '        Fileable(_newFlip).file("tau", AuctionLike(_oldFlip).tau());\n', '\n', '        // Sanity checks\n', '        require(AuctionLike(_newFlip).ilk() == _ilk);  // "non-matching-ilk"\n', '        require(AuctionLike(_newFlip).vat() == _vat);  // "non-matching-vat"\n', '    }\n', '    /**\n', '        @dev Update surplus auction contracts.\n', '        @param _vat     Vat core contract address\n', '        @param _vow     Vow core contract address\n', '        @param _newFlap New surplus auction contract address\n', '        @param _oldFlap Old surplus auction contract address\n', '    */\n', '    function updateSurplusAuctionContract(address _vat, address _vow, address _newFlap, address _oldFlap) public {\n', '\n', '        // Add new flap address to Vow\n', '        setContract(_vow, "flapper", _newFlap);\n', '\n', '        // Authorize MCD contracts for new flap\n', '        authorize(_newFlap, _vow);\n', '\n', '        // Deauthorize MCD contracts for old flap\n', '        deauthorize(_oldFlap, _vow);\n', '\n', '        // Transfer auction params from old flap to new flap\n', '        Fileable(_newFlap).file("beg", AuctionLike(_oldFlap).beg());\n', '        Fileable(_newFlap).file("ttl", AuctionLike(_oldFlap).ttl());\n', '        Fileable(_newFlap).file("tau", AuctionLike(_oldFlap).tau());\n', '\n', '        // Sanity checks\n', '        require(AuctionLike(_newFlap).gem() == AuctionLike(_oldFlap).gem());  // "non-matching-gem"\n', '        require(AuctionLike(_newFlap).vat() == _vat);  // "non-matching-vat"\n', '    }\n', '    /**\n', '        @dev Update debt auction contracts.\n', '        @param _vat          Vat core contract address\n', '        @param _vow          Vow core contract address\n', '        @param _mkrAuthority MKRAuthority core contract address\n', '        @param _newFlop      New debt auction contract address\n', '        @param _oldFlop      Old debt auction contract address\n', '    */\n', '    function updateDebtAuctionContract(address _vat, address _vow, address _mkrAuthority, address _newFlop, address _oldFlop) public {\n', '        // Add new flop address to Vow\n', '        setContract(_vow, "flopper", _newFlop);\n', '\n', '        // Authorize MCD contracts for new flop\n', '        authorize(_newFlop, _vow);\n', '        authorize(_vat, _newFlop);\n', '        authorize(_mkrAuthority, _newFlop);\n', '\n', '        // Deauthorize MCD contracts for old flop\n', '        deauthorize(_oldFlop, _vow);\n', '        deauthorize(_vat, _oldFlop);\n', '        deauthorize(_mkrAuthority, _oldFlop);\n', '\n', '        // Transfer auction params from old flop to new flop\n', '        Fileable(_newFlop).file("beg", AuctionLike(_oldFlop).beg());\n', '        Fileable(_newFlop).file("pad", AuctionLike(_oldFlop).pad());\n', '        Fileable(_newFlop).file("ttl", AuctionLike(_oldFlop).ttl());\n', '        Fileable(_newFlop).file("tau", AuctionLike(_oldFlop).tau());\n', '\n', '        // Sanity checks\n', '        require(AuctionLike(_newFlop).gem() == AuctionLike(_oldFlop).gem()); // "non-matching-gem"\n', '        require(AuctionLike(_newFlop).vat() == _vat);  // "non-matching-vat"\n', '    }\n', '\n', '    /*************************/\n', '    /*** Oracle Management ***/\n', '    /*************************/\n', '    /**\n', "        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\n", '        @param _median Median core contract address\n', '        @param _feeds      Array of oracle feed addresses to add to whitelist\n', '    */\n', '    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\n', '        OracleLike(_median).lift(_feeds);\n', '    }\n', '    /**\n', "        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\n", '        @param _median Median core contract address\n', '        @param _feeds      Array of oracle feed addresses to remove from whitelist\n', '    */\n', '    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\n', '        OracleLike(_median).drop(_feeds);\n', '    }\n', '    /**\n', "        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _readers    Array of addresses to add to whitelist\n', '    */\n', '    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\n', '        OracleLike(_median).kiss(_readers);\n', '    }\n', '    /**\n', "        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _reader     Address to add to whitelist\n', '    */\n', '    function addReaderToMedianWhitelist(address _median, address _reader) public {\n', '        OracleLike(_median).kiss(_reader);\n', '    }\n', '    /**\n', "        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _readers    Array of addresses to remove from whitelist\n', '    */\n', '    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\n', '        OracleLike(_median).diss(_readers);\n', '    }\n', '    /**\n', "        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _reader     Address to remove from whitelist\n', '    */\n', '    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\n', '        OracleLike(_median).diss(_reader);\n', '    }\n', '    /**\n', '        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\n', '        @param _median Median core contract address\n', '        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\n', '    */\n', '    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\n', '        OracleLike(_median).setBar(_minQuorum);\n', '    }\n', '    /**\n', "        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\n", '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _reader     Address to add to whitelist\n', '    */\n', '    function addReaderToOSMWhitelist(address _osm, address _reader) public {\n', '        OracleLike(_osm).kiss(_reader);\n', '    }\n', '    /**\n', "        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\n", '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _reader     Address to remove from whitelist\n', '    */\n', '    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\n', '        OracleLike(_osm).diss(_reader);\n', '    }\n', '    /**\n', '        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\n', '        @param _osmMom     OSM Mom core contract address\n', '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _ilk        Collateral type using OSM\n', '    */\n', '    function allowOSMFreeze(address _osmMom, address _osm, bytes32 _ilk) public {\n', '        MomLike(_osmMom).setOsm(_ilk, _osm);\n', '    }\n', '\n', '\n', '    /*****************************/\n', '    /*** Collateral Onboarding ***/\n', '    /*****************************/\n', '\n', '    /**\n', '        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\n', '        @param _vat      MCD_VAT\n', '        @param _cat      MCD_CAT\n', '        @param _jug      MCD_JUG\n', '        @param _end      MCD_END\n', '        @param _spot     MCD_SPOT\n', '        @param _reg      ILK_REGISTRY\n', '        @param _ilk      Collateral type key code [Ex. "ETH-A"]\n', '        @param _gem      Address of token contract\n', '        @param _join     Address of join adapter\n', '        @param _flip     Address of flipper\n', '        @param _pip      Address of price feed\n', '    */\n', '    function addCollateralBase(\n', '        address _vat,\n', '        address _cat,\n', '        address _jug,\n', '        address _end,\n', '        address _spot,\n', '        address _reg,\n', '        bytes32 _ilk,\n', '        address _gem,\n', '        address _join,\n', '        address _flip,\n', '        address _pip\n', '    ) public {\n', '        // Sanity checks\n', '        require(JoinLike(_join).vat() == _vat);     // "join-vat-not-match"\n', '        require(JoinLike(_join).ilk() == _ilk);     // "join-ilk-not-match"\n', '        require(JoinLike(_join).gem() == _gem);     // "join-gem-not-match"\n', '        require(JoinLike(_join).dec() ==\n', '                   ERC20(_gem).decimals());         // "join-dec-not-match"\n', '        require(AuctionLike(_flip).vat() == _vat);  // "flip-vat-not-match"\n', '        require(AuctionLike(_flip).cat() == _cat);  // "flip-cat-not-match"\n', '        require(AuctionLike(_flip).ilk() == _ilk);  // "flip-ilk-not-match"\n', '\n', '        // Set the token PIP in the Spotter\n', '        setContract(_spot, _ilk, "pip", _pip);\n', '\n', '        // Set the ilk Flipper in the Cat\n', '        setContract(_cat, _ilk, "flip", _flip);\n', '\n', '        // Init ilk in Vat & Jug\n', '        Initializable(_vat).init(_ilk);  // Vat\n', '        Initializable(_jug).init(_ilk);  // Jug\n', '\n', '        // Allow ilk Join to modify Vat registry\n', '        authorize(_vat, _join);\n', '\t\t// Allow the ilk Flipper to reduce the Cat litterbox on deal()\n', '        authorize(_cat, _flip);\n', '        // Allow Cat to kick auctions in ilk Flipper\n', '        authorize(_flip, _cat);\n', '        // Allow End to yank auctions in ilk Flipper\n', '        authorize(_flip, _end);\n', '\n', '        // Add new ilk to the IlkRegistry\n', '        RegistryLike(_reg).add(_join);\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', '/* import "./CollateralOpts.sol"; */\n', '/* import "./DssExecLib.sol"; */\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    bool    public immutable officeHours;\n', '\n', '    // Changelog address applies to MCD deployments on\n', '    //        mainnet, kovan, rinkeby, ropsten, and goerli\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '\n', '    constructor(bool officeHours_) public {\n', '        officeHours = officeHours_;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Modifier required to\n', '    modifier limited {\n', '        if (officeHours) {\n', '            uint day = (block.timestamp / 1 days + 3) % 7;\n', '            require(day < 5, "Can only be cast on a weekday");\n', '            uint hour = block.timestamp / 1 hours % 24;\n', '            require(hour >= 14 && hour < 21, "Outside office hours");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /****************************/\n', '    /*** Core Address Helpers ***/\n', '    /****************************/\n', '    function vat()        internal view returns (address) { return getChangelogAddress("MCD_VAT"); }\n', '    function cat()        internal view returns (address) { return getChangelogAddress("MCD_CAT"); }\n', '    function jug()        internal view returns (address) { return getChangelogAddress("MCD_JUG"); }\n', '    function pot()        internal view returns (address) { return getChangelogAddress("MCD_POT"); }\n', '    function vow()        internal view returns (address) { return getChangelogAddress("MCD_VOW"); }\n', '    function end()        internal view returns (address) { return getChangelogAddress("MCD_END"); }\n', '    function reg()        internal view returns (address) { return getChangelogAddress("ILK_REGISTRY"); }\n', '    function spot()       internal view returns (address) { return getChangelogAddress("MCD_SPOT"); }\n', '    function flap()       internal view returns (address) { return getChangelogAddress("MCD_FLAP"); }\n', '    function flop()       internal view returns (address) { return getChangelogAddress("MCD_FLOP"); }\n', '    function osmMom()     internal view returns (address) { return getChangelogAddress("OSM_MOM"); }\n', '    function govGuard()   internal view returns (address) { return getChangelogAddress("GOV_GUARD"); }\n', '    function flipperMom() internal view returns (address) { return getChangelogAddress("FLIPPER_MOM"); }\n', '    function autoLine()   internal view returns (address) { return getChangelogAddress("MCD_IAM_AUTO_LINE"); }\n', '\n', '    function flip(bytes32 ilk) internal view returns (address) {\n', '        (,,,, address _flip,,,) = RegistryLike(reg()).ilkData(ilk);\n', '        return _flip;\n', '    }\n', '\n', '    function getChangelogAddress(bytes32 key) internal view returns (address) {\n', '        return ChainlogLike(LOG).getAddress(key);\n', '    }\n', '\n', '\n', '    /****************************/\n', '    /*** Changelog Management ***/\n', '    /****************************/\n', '    function setChangelogAddress(bytes32 key, address value) internal {\n', '        DssExecLib.setChangelogAddress(LOG, key, value);\n', '    }\n', '\n', '    function setChangelogVersion(string memory version) internal {\n', '        DssExecLib.setChangelogVersion(LOG, version);\n', '    }\n', '\n', '    function setChangelogIPFS(string memory ipfs) internal {\n', '        DssExecLib.setChangelogIPFS(LOG, ipfs);\n', '    }\n', '\n', '    function setChangelogSHA256(string memory SHA256) internal {\n', '        DssExecLib.setChangelogSHA256(LOG, SHA256);\n', '    }\n', '\n', '    /**********************/\n', '    /*** Authorizations ***/\n', '    /**********************/\n', '    function authorize(address base, address ward) internal virtual {\n', '        DssExecLib.authorize(base, ward);\n', '    }\n', '\n', '    function deauthorize(address base, address ward) internal {\n', '        DssExecLib.deauthorize(base, ward);\n', '    }\n', '\n', '    /**************************/\n', '    /*** Accumulating Rates ***/\n', '    /**************************/\n', '    function accumulateDSR() internal {\n', '        DssExecLib.accumulateDSR(pot());\n', '    }\n', '\n', '    function accumulateCollateralStabilityFees(bytes32 ilk) internal {\n', '        DssExecLib.accumulateCollateralStabilityFees(jug(), ilk);\n', '    }\n', '\n', '    /*********************/\n', '    /*** Price Updates ***/\n', '    /*********************/\n', '    function updateCollateralPrice(bytes32 ilk) internal {\n', '        DssExecLib.updateCollateralPrice(spot(), ilk);\n', '    }\n', '\n', '    /****************************/\n', '    /*** System Configuration ***/\n', '    /****************************/\n', '    function setContract(address base, bytes32 what, address addr) internal {\n', '        DssExecLib.setContract(base, what, addr);\n', '    }\n', '\n', '    function setContract(address base, bytes32 ilk, bytes32 what, address addr) internal {\n', '        DssExecLib.setContract(base, ilk, what, addr);\n', '    }\n', '\n', '    /******************************/\n', '    /*** System Risk Parameters ***/\n', '    /******************************/\n', '    function setGlobalDebtCeiling(uint256 amount) internal {\n', '        DssExecLib.setGlobalDebtCeiling(vat(), amount);\n', '    }\n', '\n', '    function increaseGlobalDebtCeiling(uint256 amount) internal {\n', '        DssExecLib.increaseGlobalDebtCeiling(vat(), amount);\n', '    }\n', '\n', '    function decreaseGlobalDebtCeiling(uint256 amount) internal {\n', '        DssExecLib.decreaseGlobalDebtCeiling(vat(), amount);\n', '    }\n', '\n', '    function setDSR(uint256 rate) internal {\n', '        DssExecLib.setDSR(pot(), rate);\n', '    }\n', '\n', '    function setSurplusAuctionAmount(uint256 amount) internal {\n', '        DssExecLib.setSurplusAuctionAmount(vow(), amount);\n', '    }\n', '\n', '    function setSurplusBuffer(uint256 amount) internal {\n', '        DssExecLib.setSurplusBuffer(vow(), amount);\n', '    }\n', '\n', '    function setMinSurplusAuctionBidIncrease(uint256 pct_bps) internal {\n', '        DssExecLib.setMinSurplusAuctionBidIncrease(flap(), pct_bps);\n', '    }\n', '\n', '    function setSurplusAuctionBidDuration(uint256 duration) internal {\n', '        DssExecLib.setSurplusAuctionBidDuration(flap(), duration);\n', '    }\n', '\n', '    function setSurplusAuctionDuration(uint256 duration) internal {\n', '        DssExecLib.setSurplusAuctionDuration(flap(), duration);\n', '    }\n', '\n', '    function setDebtAuctionDelay(uint256 duration) internal {\n', '        DssExecLib.setDebtAuctionDelay(vow(), duration);\n', '    }\n', '\n', '    function setDebtAuctionDAIAmount(uint256 amount) internal {\n', '        DssExecLib.setDebtAuctionDAIAmount(vow(), amount);\n', '    }\n', '\n', '    function setDebtAuctionMKRAmount(uint256 amount) internal {\n', '        DssExecLib.setDebtAuctionMKRAmount(vow(), amount);\n', '    }\n', '\n', '    function setMinDebtAuctionBidIncrease(uint256 pct_bps) internal {\n', '        DssExecLib.setMinDebtAuctionBidIncrease(flop(), pct_bps);\n', '    }\n', '\n', '    function setDebtAuctionBidDuration(uint256 duration) internal {\n', '        DssExecLib.setDebtAuctionBidDuration(flop(), duration);\n', '    }\n', '\n', '    function setDebtAuctionDuration(uint256 duration) internal {\n', '        DssExecLib.setDebtAuctionDuration(flop(), duration);\n', '    }\n', '\n', '    function setDebtAuctionMKRIncreaseRate(uint256 pct_bps) internal {\n', '        DssExecLib.setDebtAuctionMKRIncreaseRate(flop(), pct_bps);\n', '    }\n', '\n', '    function setMaxTotalDAILiquidationAmount(uint256 amount) internal {\n', '        DssExecLib.setMaxTotalDAILiquidationAmount(cat(), amount);\n', '    }\n', '\n', '    function setEmergencyShutdownProcessingTime(uint256 duration) internal {\n', '        DssExecLib.setEmergencyShutdownProcessingTime(end(), duration);\n', '    }\n', '\n', '    function setGlobalStabilityFee(uint256 rate) internal {\n', '        DssExecLib.setGlobalStabilityFee(jug(), rate);\n', '    }\n', '\n', '    function setDAIReferenceValue(uint256 value) internal {\n', '        DssExecLib.setDAIReferenceValue(spot(), value);\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Management ***/\n', '    /*****************************/\n', '    function setIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.setIlkDebtCeiling(vat(), ilk, amount);\n', '    }\n', '\n', '    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount, bool global) internal {\n', '        DssExecLib.increaseIlkDebtCeiling(vat(), ilk, amount, global);\n', '    }\n', '\n', '    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.increaseIlkDebtCeiling(vat(), ilk, amount, true);\n', '    }\n', '\n', '    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount, bool global) internal {\n', '        DssExecLib.decreaseIlkDebtCeiling(vat(), ilk, amount, global);\n', '    }\n', '\n', '    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.decreaseIlkDebtCeiling(vat(), ilk, amount, true);\n', '    }\n', '\n', '    function setIlkAutoLineParameters(bytes32 ilk, uint256 amount, uint256 gap, uint256 ttl) internal {\n', '        DssExecLib.setIlkAutoLineParameters(autoLine(), ilk, amount, gap, ttl);\n', '    }\n', '\n', '    function setIlkAutoLineDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.setIlkAutoLineDebtCeiling(autoLine(), ilk, amount);\n', '    }\n', '\n', '    function removeIlkFromAutoLine(bytes32 ilk) internal {\n', '        DssExecLib.removeIlkFromAutoLine(autoLine(), ilk);\n', '    }\n', '\n', '    function setIlkMinVaultAmount(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.setIlkMinVaultAmount(vat(), ilk, amount);\n', '    }\n', '\n', '    function setIlkLiquidationPenalty(bytes32 ilk, uint256 pct_bps) internal {\n', '        DssExecLib.setIlkLiquidationPenalty(cat(), ilk, pct_bps);\n', '    }\n', '\n', '    function setIlkMaxLiquidationAmount(bytes32 ilk, uint256 amount) internal {\n', '        DssExecLib.setIlkMaxLiquidationAmount(cat(), ilk, amount);\n', '    }\n', '\n', '    function setIlkLiquidationRatio(bytes32 ilk, uint256 pct_bps) internal {\n', '        DssExecLib.setIlkLiquidationRatio(spot(), ilk, pct_bps);\n', '    }\n', '\n', '    function setIlkMinAuctionBidIncrease(bytes32 ilk, uint256 pct_bps) internal {\n', '        DssExecLib.setIlkMinAuctionBidIncrease(flip(ilk), pct_bps);\n', '    }\n', '\n', '    function setIlkBidDuration(bytes32 ilk, uint256 duration) internal {\n', '        DssExecLib.setIlkBidDuration(flip(ilk), duration);\n', '    }\n', '\n', '    function setIlkAuctionDuration(bytes32 ilk, uint256 duration) internal {\n', '        DssExecLib.setIlkAuctionDuration(flip(ilk), duration);\n', '    }\n', '\n', '    function setIlkStabilityFee(bytes32 ilk, uint256 rate, bool doDrip) internal {\n', '        DssExecLib.setIlkStabilityFee(jug(), ilk, rate, doDrip);\n', '    }\n', '\n', '    function setIlkStabilityFee(bytes32 ilk, uint256 rate) internal {\n', '        DssExecLib.setIlkStabilityFee(jug(), ilk, rate, true);\n', '    }\n', '\n', '    /***********************/\n', '    /*** Core Management ***/\n', '    /***********************/\n', '    function updateCollateralAuctionContract(bytes32 ilk, address newFlip, address oldFlip) internal {\n', '        DssExecLib.updateCollateralAuctionContract(vat(), cat(), end(), flipperMom(), ilk, newFlip, oldFlip);\n', '    }\n', '\n', '    function updateSurplusAuctionContract(address newFlap, address oldFlap) internal {\n', '        DssExecLib.updateSurplusAuctionContract(vat(), vow(), newFlap, oldFlap);\n', '    }\n', '\n', '    function updateDebtAuctionContract(address newFlop, address oldFlop) internal {\n', '        DssExecLib.updateDebtAuctionContract(vat(), vow(), govGuard(), newFlop, oldFlop);\n', '    }\n', '\n', '    /*************************/\n', '    /*** Oracle Management ***/\n', '    /*************************/\n', '    function addWritersToMedianWhitelist(address medianizer, address[] memory feeds) internal {\n', '        DssExecLib.addWritersToMedianWhitelist(medianizer, feeds);\n', '    }\n', '\n', '    function removeWritersFromMedianWhitelist(address medianizer, address[] memory feeds) internal {\n', '        DssExecLib.removeWritersFromMedianWhitelist(medianizer, feeds);\n', '    }\n', '\n', '    function addReadersToMedianWhitelist(address medianizer, address[] memory readers) internal {\n', '        DssExecLib.addReadersToMedianWhitelist(medianizer, readers);\n', '    }\n', '\n', '    function addReaderToMedianWhitelist(address medianizer, address reader) internal {\n', '        DssExecLib.addReaderToMedianWhitelist(medianizer, reader);\n', '    }\n', '\n', '    function removeReadersFromMedianWhitelist(address medianizer, address[] memory readers) internal {\n', '        DssExecLib.removeReadersFromMedianWhitelist(medianizer, readers);\n', '    }\n', '\n', '    function removeReaderFromMedianWhitelist(address medianizer, address reader) internal {\n', '        DssExecLib.removeReaderFromMedianWhitelist(medianizer, reader);\n', '    }\n', '\n', '    function setMedianWritersQuorum(address medianizer, uint256 minQuorum) internal {\n', '        DssExecLib.setMedianWritersQuorum(medianizer, minQuorum);\n', '    }\n', '\n', '    function addReaderToOSMWhitelist(address osm, address reader) internal {\n', '        DssExecLib.addReaderToOSMWhitelist(osm, reader);\n', '    }\n', '\n', '    function removeReaderFromOSMWhitelist(address osm, address reader) internal {\n', '        DssExecLib.removeReaderFromOSMWhitelist(osm, reader);\n', '    }\n', '\n', '    function allowOSMFreeze(address osm, bytes32 ilk) internal {\n', '        DssExecLib.allowOSMFreeze(osmMom(), osm, ilk);\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Onboarding ***/\n', '    /*****************************/\n', '\n', '    // Minimum actions to onboard a collateral to the system with 0 line.\n', '    function addCollateralBase(bytes32 ilk, address gem, address join, address flipper, address pip) internal {\n', '        DssExecLib.addCollateralBase(vat(), cat(), jug(), end(), spot(), reg(), ilk, gem, join, flipper, pip);\n', '    }\n', '\n', '    // Complete collateral onboarding logic.\n', '    function addNewCollateral(CollateralOpts memory co) internal {\n', '        // Add the collateral to the system.\n', '        addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\n', '\n', '        // Allow FlipperMom to access to the ilk Flipper\n', '        authorize(co.flip, flipperMom());\n', '        // Disallow Cat to kick auctions in ilk Flipper\n', '        if(!co.isLiquidatable) deauthorize(flipperMom(), co.flip);\n', '\n', '        if(co.isOSM) { // If pip == OSM\n', '            // Allow OsmMom to access to the TOKEN OSM\n', '            authorize(co.pip, osmMom());\n', '            if (co.whitelistOSM) { // If median is src in OSM\n', '                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\n', '                addReaderToMedianWhitelist(address(OracleLike(co.pip).src()), co.pip);\n', '            }\n', '            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            addReaderToOSMWhitelist(co.pip, spot());\n', '            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            addReaderToOSMWhitelist(co.pip, end());\n', '            // Set TOKEN OSM in the OsmMom for new ilk\n', '            allowOSMFreeze(co.pip, co.ilk);\n', '        }\n', '        // Increase the global debt ceiling by the ilk ceiling\n', '        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\n', '        // Set the ilk debt ceiling\n', '        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\n', '        // Set the ilk dust\n', '        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\n', '        // Set the dunk size\n', '        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\n', '        // Set the ilk liquidation penalty\n', '        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\n', '\n', '        // Set the ilk stability fee\n', '        setIlkStabilityFee(co.ilk, co.ilkStabilityFee);\n', '\n', '        // Set the ilk percentage between bids\n', '        setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\n', '        // Set the ilk time max time between bids\n', '        setIlkBidDuration(co.ilk, co.bidDuration);\n', '        // Set the ilk max auction duration\n', '        setIlkAuctionDuration(co.ilk, co.auctionDuration);\n', '        // Set the ilk min collateralization ratio\n', '        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\n', '\n', '        // Update ilk spot value in Vat\n', '        updateCollateralPrice(co.ilk);\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        require(eta != 0, "DssExec/spell-not-scheduled");\n', '        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\n', '\n', '        if (SpellAction(action).officeHours()) {\n', '            uint256 day    = (castTime / 1 days + 3) % 7;\n', '            uint256 hour   = castTime / 1 hours % 24;\n', '            uint256 minute = castTime / 1 minutes % 60;\n', '            uint256 second = castTime % 60;\n', '\n', '            if (day >= 5) {\n', '                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\n', '                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\n', '                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\n', '            } else {\n', '                if (hour >= 21) {\n', '                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\n', '                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                } else if (hour < 14) {\n', '                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/DaiAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/dai.sol\n', 'interface DaiAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function version() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '    function allowance(address, address) external view returns (uint256);\n', '    function nonces(address) external view returns (uint256);\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external view returns (bytes32);\n', '    function transfer(address, uint256) external;\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function mint(address, uint256) external;\n', '    function burn(address, uint256) external;\n', '    function approve(address, uint256) external returns (bool);\n', '    function push(address, uint256) external;\n', '    function pull(address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/join.sol\n', 'interface DaiJoinAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function vat() external view returns (address);\n', '    function dai() external view returns (address);\n', '    function live() external view returns (uint256);\n', '    function cage() external;\n', '    function join(address, uint256) external;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VatAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function can(address, address) external view returns (uint256);\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function sin(address) external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function cage() external;\n', '    function slip(bytes32, address, int256) external;\n', '    function flux(bytes32, address, address, uint256) external;\n', '    function move(address, address, uint256) external;\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function fork(bytes32, address, address, int256, int256) external;\n', '    function grab(bytes32, address, address, address, int256, int256) external;\n', '    function heal(uint256) external;\n', '    function suck(address, address, uint256) external;\n', '    function fold(bytes32, address, int256) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/VatAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/DaiJoinAbstract.sol"; */\n', '/* import "lib/dss-interfaces/src/dss/DaiAbstract.sol"; */\n', '\n', 'interface ChainlogAbstract_2 {\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface LPOracle {\n', '    function orb0() external view returns (address);\n', '    function orb1() external view returns (address);\n', '}\n', '\n', 'interface GnosisAllowanceModule {\n', '    function executeAllowanceTransfer(address safe, address token, address to, uint96 amount, address paymentToken, uint96 payment, address delegate, bytes memory signature) external;\n', '}\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/9b7eba966a6f43e95935276313cac2490ec44e71/governance/votes/Executive%20vote%20-%20February%2012%2C%202021.md -q -O - 2>/dev/null)"\n', '    string public constant description =\n', '        "2021-02-12 MakerDAO Executive Spell | Hash: 0x82215e761ec28f92aa02ac1c3533a9315a9accc2847b9dac99ae2aa65d9a9b27";\n', '\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '    uint256 constant TWO_PCT            = 1000000000627937192491029810;\n', '    uint256 constant TWO_PT_FIVE_PCT    = 1000000000782997609082909351;\n', '    uint256 constant THREE_PCT          = 1000000000937303470807876289;\n', '    uint256 constant THREE_PT_FIVE_PCT  = 1000000001090862085746321732;\n', '    uint256 constant FOUR_PCT           = 1000000001243680656318820312;\n', '    uint256 constant FOUR_PT_FIVE_PCT   = 1000000001395766281313196627;\n', '    uint256 constant FIVE_PT_FIVE_PCT   = 1000000001697766583380253701;\n', '    uint256 constant SIX_PCT            = 1000000001847694957439350562;\n', '    uint256 constant SEVEN_PT_FIVE_PCT  = 1000000002293273137447730714;\n', '\n', '    /**\n', '        @dev constructor (required)\n', '        @param officeHours true if officehours enabled\n', '    */\n', '    constructor(bool officeHours) public DssAction(officeHours) {}\n', '\n', '    uint256 constant WAD        = 10**18;\n', '    uint256 constant RAD        = 10**45;\n', '    uint256 constant MILLION    = 10**6;\n', '\n', '    bytes32 constant ETH_A_ILK          = "ETH-A";\n', '    bytes32 constant ETH_B_ILK          = "ETH-B";\n', '    bytes32 constant UNI_ILK            = "UNI-A";\n', '    bytes32 constant AAVE_ILK           = "AAVE-A";\n', '    bytes32 constant COMP_ILK           = "COMP-A";\n', '    bytes32 constant LINK_ILK           = "LINK-A";\n', '    bytes32 constant WBTC_ILK           = "WBTC-A";\n', '    bytes32 constant YFI_ILK            = "YFI-A";\n', '    bytes32 constant BAL_ILK            = "BAL-A";\n', '    bytes32 constant BAT_ILK            = "BAT-A";\n', '    bytes32 constant UNIV2DAIETH_ILK    = "UNIV2DAIETH-A";\n', '    bytes32 constant UNIV2USDCETH_ILK   = "UNIV2USDCETH-A";\n', '    bytes32 constant UNIV2WBTCETH_ILK   = "UNIV2WBTCETH-A";\n', '\n', '    bytes32 constant UNIV2LINKETH_ILK   = "UNIV2LINKETH-A";\n', '    address constant UNIV2LINKETH_GEM   = 0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974;\n', '    address constant UNIV2LINKETH_JOIN  = 0xDae88bDe1FB38cF39B6A02b595930A3449e593A6;\n', '    address constant UNIV2LINKETH_FLIP  = 0xb79f818E3c73FCA387845f892356224CA75eac4b;\n', '    address constant UNIV2LINKETH_PIP   = 0x628009F5F5029544AE84636Ef676D3Cc5755238b;\n', '\n', '    bytes32 constant UNIV2UNIETH_ILK    = "UNIV2UNIETH-A";\n', '    address constant UNIV2UNIETH_GEM    = 0xd3d2E2692501A5c9Ca623199D38826e513033a17;\n', '    address constant UNIV2UNIETH_JOIN   = 0xf11a98339FE1CdE648e8D1463310CE3ccC3d7cC1;\n', '    address constant UNIV2UNIETH_FLIP   = 0xe5ED7da0483e291485011D5372F3BF46235EB277;\n', '    address constant UNIV2UNIETH_PIP    = 0x8Ce9E9442F2791FC63CD6394cC12F2dE4fbc1D71;\n', '\n', '    // Interim Budget Addresses\n', '    address constant DAO_MULTISIG       = 0x73f09254a81e1F835Ee442d1b3262c1f1d7A13ff;\n', '    address constant ALLOWANCE_MODULE   = 0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134;\n', '\n', '    function actions() public override {\n', '        // DC-IAM\n', '        setIlkAutoLineParameters(UNI_ILK, 50 * MILLION, 3 * MILLION, 12 hours);\n', '        setIlkAutoLineParameters(AAVE_ILK, 25 * MILLION, 2 * MILLION, 12 hours);\n', '        setIlkAutoLineParameters(COMP_ILK, 10 * MILLION, 2 * MILLION, 12 hours);\n', '        setIlkAutoLineParameters(LINK_ILK, 140 * MILLION, 7 * MILLION, 12 hours);\n', '        setIlkAutoLineParameters(WBTC_ILK, 350 * MILLION, 15 * MILLION, 12 hours);\n', '        setIlkAutoLineParameters(YFI_ILK, 45 * MILLION, 5 * MILLION, 12 hours);\n', '\n', '        // add UNI-V2-LINK-ETH-A collateral type\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2LINKETH_PIP).orb0(),\n', '            UNIV2LINKETH_PIP\n', '        );\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2LINKETH_PIP).orb1(),\n', '            UNIV2LINKETH_PIP\n', '        );\n', '        CollateralOpts memory UNIV2LINKETH_A = CollateralOpts({\n', '            ilk: UNIV2LINKETH_ILK,\n', '            gem: UNIV2LINKETH_GEM,\n', '            join: UNIV2LINKETH_JOIN,\n', '            flip: UNIV2LINKETH_FLIP,\n', '            pip: UNIV2LINKETH_PIP,\n', '            isLiquidatable: true,\n', '            isOSM: true,\n', '            whitelistOSM: false,\n', '            ilkDebtCeiling: 3 * MILLION, // initially 3 million\n', '            minVaultAmount: 2000,\n', '            maxLiquidationAmount: 50000,\n', '            liquidationPenalty: 1300,\n', '            ilkStabilityFee: FOUR_PCT, // 4%\n', '            bidIncrease: 300, // 3%\n', '            bidDuration: 6 hours,\n', '            auctionDuration: 6 hours,\n', '            liquidationRatio: 16500 // 165%\n', '        });\n', '        addNewCollateral(UNIV2LINKETH_A);\n', '\n', '        // add UNI-V2-ETH-USDT-A collateral type\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2UNIETH_PIP).orb0(),\n', '            UNIV2UNIETH_PIP\n', '        );\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2UNIETH_PIP).orb1(),\n', '            UNIV2UNIETH_PIP\n', '        );\n', '        CollateralOpts memory UNIV2UNIETH_A = CollateralOpts({\n', '            ilk: UNIV2UNIETH_ILK,\n', '            gem: UNIV2UNIETH_GEM,\n', '            join: UNIV2UNIETH_JOIN,\n', '            flip: UNIV2UNIETH_FLIP,\n', '            pip: UNIV2UNIETH_PIP,\n', '            isLiquidatable: true,\n', '            isOSM: true,\n', '            whitelistOSM: false,\n', '            ilkDebtCeiling: 3 * MILLION, // initially 3 million\n', '            minVaultAmount: 2000,\n', '            maxLiquidationAmount: 50000,\n', '            liquidationPenalty: 1300,\n', '            ilkStabilityFee: FOUR_PCT, // 4%\n', '            bidIncrease: 300, // 3%\n', '            bidDuration: 6 hours,\n', '            auctionDuration: 6 hours,\n', '            liquidationRatio: 16500 // 165%\n', '        });\n', '        addNewCollateral(UNIV2UNIETH_A);\n', '\n', '        // Rates changes\n', '        setIlkStabilityFee(ETH_A_ILK, FOUR_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(ETH_B_ILK, SEVEN_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(WBTC_ILK, FOUR_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(LINK_ILK, THREE_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(COMP_ILK, THREE_PCT, true);\n', '        setIlkStabilityFee(BAL_ILK, THREE_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(UNIV2DAIETH_ILK, TWO_PCT, true);\n', '        setIlkStabilityFee(UNIV2USDCETH_ILK, TWO_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(UNIV2WBTCETH_ILK, THREE_PT_FIVE_PCT, true);\n', '        setIlkStabilityFee(BAT_ILK, SIX_PCT, true);\n', '        setIlkStabilityFee(YFI_ILK, FIVE_PT_FIVE_PCT, true);\n', '\n', "        // Interim DAO Budget (Note: we are leaving daiJoin hope'd from the Pause Proxy for future payments)\n", '        // Sending 100,001 DAI to the DAO multi-sig (1 extra to test retrieval)\n', '        address MCD_JOIN_DAI    = getChangelogAddress("MCD_JOIN_DAI");\n', '        address MCD_DAI         = getChangelogAddress("MCD_DAI");\n', '        address MCD_PAUSE_PROXY = getChangelogAddress("MCD_PAUSE_PROXY");\n', '        VatAbstract(vat()).suck(vow(), address(this), 100_001 * RAD);\n', '        VatAbstract(vat()).hope(MCD_JOIN_DAI);\n', '        DaiJoinAbstract(MCD_JOIN_DAI).exit(DAO_MULTISIG, 100_001 * WAD);\n', '        // Testing the ability for governance to retrieve funds from the multi-sig\n', '        GnosisAllowanceModule(ALLOWANCE_MODULE).executeAllowanceTransfer(\n', '            DAO_MULTISIG,\n', '            MCD_DAI,\n', '            MCD_PAUSE_PROXY,\n', '            uint96(1 * WAD),\n', '            address(0),\n', '            uint96(0),\n', '            address(this),\n', '            ""\n', '        );\n', '        DaiAbstract(MCD_DAI).approve(MCD_JOIN_DAI, 1 * WAD);\n', '        DaiJoinAbstract(MCD_JOIN_DAI).join(vow(), 1 * WAD);\n', '\n', '        // add UNIV2LINKETH to Changelog\n', '        setChangelogAddress("UNIV2LINKETH",             UNIV2LINKETH_GEM);\n', '        setChangelogAddress("MCD_JOIN_UNIV2LINKETH_A",  UNIV2LINKETH_JOIN);\n', '        setChangelogAddress("MCD_FLIP_UNIV2LINKETH_A",  UNIV2LINKETH_FLIP);\n', '        setChangelogAddress("PIP_UNIV2LINKETH",         UNIV2LINKETH_PIP);\n', '\n', '        // add UNIV2UNIETH to Changelog\n', '        setChangelogAddress("UNIV2UNIETH",             UNIV2UNIETH_GEM);\n', '        setChangelogAddress("MCD_JOIN_UNIV2UNIETH_A",  UNIV2UNIETH_JOIN);\n', '        setChangelogAddress("MCD_FLIP_UNIV2UNIETH_A",  UNIV2UNIETH_FLIP);\n', '        setChangelogAddress("PIP_UNIV2UNIETH",         UNIV2UNIETH_PIP);\n', '\n', '        // bump Changelog version\n', '        setChangelogVersion("1.2.6");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction public spell = new DssSpellAction(true);\n', '    constructor() DssExec(spell.description(), now + 30 days, address(spell)) public {}\n', '}']