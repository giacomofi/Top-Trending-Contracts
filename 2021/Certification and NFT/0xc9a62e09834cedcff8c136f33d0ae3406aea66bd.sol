['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Global Enums and Structs\n', '\n', '\n', 'library VestingEntries {\n', '    struct VestingEntry {\n', '        uint64 endTime;\n', '        uint256 escrowAmount;\n', '    }\n', '    struct VestingEntryWithID {\n', '        uint64 endTime;\n', '        uint256 escrowAmount;\n', '        uint256 entryID;\n', '    }\n', '}\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', '// Part: IAddressResolver\n', '\n', 'interface IAddressResolver {\n', '    function getAddress(bytes32 name) external view returns (address);\n', '\n', '    function getSynth(bytes32 key) external view returns (address);\n', '\n', '    function requireAndGetAddress(bytes32 name, string calldata reason)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', '// Part: IExchangeRates\n', '\n', 'interface IExchangeRates {\n', '    // Structs\n', '    struct RateAndUpdatedTime {\n', '        uint216 rate;\n', '        uint40 time;\n', '    }\n', '\n', '    struct InversePricing {\n', '        uint256 entryPoint;\n', '        uint256 upperLimit;\n', '        uint256 lowerLimit;\n', '        bool frozenAtUpperLimit;\n', '        bool frozenAtLowerLimit;\n', '    }\n', '\n', '    function owner() external view returns (address);\n', '\n', '    function setOracle(address _oracle) external;\n', '\n', '    function removeAggregator(bytes32 currencyKey) external;\n', '\n', '    // Views\n', '    function aggregators(bytes32 currencyKey) external view returns (address);\n', '\n', '    function aggregatorWarningFlags() external view returns (address);\n', '\n', '    function anyRateIsInvalid(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function currentRoundForRate(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function currenciesUsingAggregator(address aggregator)\n', '        external\n', '        view\n', '        returns (bytes32[] memory);\n', '\n', '    function effectiveValue(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external view returns (uint256 value);\n', '\n', '    function effectiveValueAndRates(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 value,\n', '            uint256 sourceRate,\n', '            uint256 destinationRate\n', '        );\n', '\n', '    function effectiveValueAtRound(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        uint256 roundIdForSrc,\n', '        uint256 roundIdForDest\n', '    ) external view returns (uint256 value);\n', '\n', '    function getCurrentRoundId(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getLastRoundIdBeforeElapsedSecs(\n', '        bytes32 currencyKey,\n', '        uint256 startingRoundId,\n', '        uint256 startingTimestamp,\n', '        uint256 timediff\n', '    ) external view returns (uint256);\n', '\n', '    function inversePricing(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 entryPoint,\n', '            uint256 upperLimit,\n', '            uint256 lowerLimit,\n', '            bool frozenAtUpperLimit,\n', '            bool frozenAtLowerLimit\n', '        );\n', '\n', '    function lastRateUpdateTimes(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function oracle() external view returns (address);\n', '\n', '    function rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 time);\n', '\n', '    function rateAndUpdatedTime(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 time);\n', '\n', '    function rateAndInvalid(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256 rate, bool isInvalid);\n', '\n', '    function rateForCurrency(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateStalePeriod() external view returns (uint256);\n', '\n', '    function ratesAndUpdatedTimeForCurrencyLastNRounds(\n', '        bytes32 currencyKey,\n', '        uint256 numRounds\n', '    ) external view returns (uint256[] memory rates, uint256[] memory times);\n', '\n', '    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (uint256[] memory rates, bool anyRateInvalid);\n', '\n', '    function ratesForCurrencies(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (uint256[] memory);\n', '\n', '    // Mutative functions\n', '    function freezeRate(bytes32 currencyKey) external;\n', '}\n', '\n', '// Part: IFeePool\n', '\n', 'interface IFeePool {\n', '    // Views\n', '\n', '    function FEE_ADDRESS() external view returns (address);\n', '\n', '    function feesAvailable(address account)\n', '        external\n', '        view\n', '        returns (uint256, uint256);\n', '\n', '    function feePeriodDuration() external view returns (uint256);\n', '\n', '    function isFeesClaimable(address account) external view returns (bool);\n', '\n', '    function targetThreshold() external view returns (uint256);\n', '\n', '    function totalFeesAvailable() external view returns (uint256);\n', '\n', '    function totalRewardsAvailable() external view returns (uint256);\n', '\n', '    // Mutative Functions\n', '    function claimFees() external returns (bool);\n', '\n', '    function claimOnBehalf(address claimingForAddress) external returns (bool);\n', '\n', '    function closeCurrentFeePeriod() external;\n', '}\n', '\n', '// Part: IIssuer\n', '\n', 'interface IIssuer {\n', '    // Views\n', '    function anySynthOrSNXRateIsInvalid()\n', '        external\n', '        view\n', '        returns (bool anyRateInvalid);\n', '\n', '    function availableCurrencyKeys() external view returns (bytes32[] memory);\n', '\n', '    function availableSynthCount() external view returns (uint256);\n', '\n', '    function canBurnSynths(address account) external view returns (bool);\n', '\n', '    function collateral(address account) external view returns (uint256);\n', '\n', '    function collateralisationRatio(address issuer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n', '        external\n', '        view\n', '        returns (uint256 cratio, bool anyRateIsInvalid);\n', '\n', '    function debtBalanceOf(address issuer, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256 debtBalance);\n', '\n', '    function issuanceRatio() external view returns (uint256);\n', '\n', '    function lastIssueEvent(address account) external view returns (uint256);\n', '\n', '    function maxIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (uint256 maxIssuable);\n', '\n', '    function minimumStakeTime() external view returns (uint256);\n', '\n', '    function remainingIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 maxIssuable,\n', '            uint256 alreadyIssued,\n', '            uint256 totalSystemDebt\n', '        );\n', '\n', '    function synthsByAddress(address synthAddress)\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferableSynthetixAndAnyRateIsInvalid(\n', '        address account,\n', '        uint256 balance\n', '    ) external view returns (uint256 transferable, bool anyRateIsInvalid);\n', '\n', '    // Restricted: used internally to Synthetix\n', '    function issueSynths(address from, uint256 amount) external;\n', '\n', '    function issueSynthsOnBehalf(\n', '        address issueFor,\n', '        address from,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function issueMaxSynths(address from) external;\n', '\n', '    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\n', '\n', '    function burnSynths(address from, uint256 amount) external;\n', '\n', '    function burnSynthsOnBehalf(\n', '        address burnForAddress,\n', '        address from,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function burnSynthsToTarget(address from) external;\n', '\n', '    function burnSynthsToTargetOnBehalf(address burnForAddress, address from)\n', '        external;\n', '}\n', '\n', '// Part: IReadProxy\n', '\n', 'interface IReadProxy {\n', '    function target() external view returns (address);\n', '}\n', '\n', '// Part: IRewardEscrowV2\n', '\n', 'interface IRewardEscrowV2 {\n', '    // Views\n', '    function nextEntryId() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function numVestingEntries(address account) external view returns (uint256);\n', '\n', '    function totalEscrowedAccountBalance(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalVestedAccountBalance(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getVestingQuantity(address account, uint256[] calldata entryIDs)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getVestingSchedules(\n', '        address account,\n', '        uint256 index,\n', '        uint256 pageSize\n', '    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n', '\n', '    function getAccountVestingEntryIDs(\n', '        address account,\n', '        uint256 index,\n', '        uint256 pageSize\n', '    ) external view returns (uint256[] memory);\n', '\n', '    function getVestingEntryClaimable(address account, uint256 entryID)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getVestingEntry(address account, uint256 entryID)\n', '        external\n', '        view\n', '        returns (uint64, uint256);\n', '\n', '    // Mutative functions\n', '    function vest(uint256[] calldata entryIDs) external;\n', '\n', '    function createEscrowEntry(\n', '        address beneficiary,\n', '        uint256 deposit,\n', '        uint256 duration\n', '    ) external;\n', '\n', '    function appendVestingEntry(\n', '        address account,\n', '        uint256 quantity,\n', '        uint256 duration\n', '    ) external;\n', '\n', '    function migrateVestingSchedule(address _addressToMigrate) external;\n', '\n', '    function migrateAccountEscrowBalances(\n', '        address[] calldata accounts,\n', '        uint256[] calldata escrowBalances,\n', '        uint256[] calldata vestedBalances\n', '    ) external;\n', '\n', '    // Account Merging\n', '    function startMergingWindow() external;\n', '\n', '    function mergeAccount(address accountToMerge, uint256[] calldata entryIDs)\n', '        external;\n', '\n', '    function nominateAccountToMerge(address account) external;\n', '\n', '    function accountMergingIsOpen() external view returns (bool);\n', '\n', '    // L2 Migration\n', '    function importVestingEntries(\n', '        address account,\n', '        uint256 escrowedAmount,\n', '        VestingEntries.VestingEntry[] calldata vestingEntries\n', '    ) external;\n', '\n', '    // Return amount of SNX transfered to SynthetixBridgeToOptimism deposit contract\n', '    function burnForMigration(address account, uint256[] calldata entryIDs)\n', '        external\n', '        returns (\n', '            uint256 escrowedAccountBalance,\n', '            VestingEntries.VestingEntry[] memory vestingEntries\n', '        );\n', '}\n', '\n', '// Part: ISushiRouter\n', '\n', 'interface ISushiRouter {\n', '    function swapExactTokensForTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] memory path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// Part: ISynthetix\n', '\n', 'interface ISynthetix {\n', '        function anySynthOrSNXRateIsInvalid()\n', '        external\n', '        view\n', '        returns (bool anyRateInvalid);\n', '\n', '    function availableCurrencyKeys() external view returns (bytes32[] memory);\n', '\n', '    function availableSynthCount() external view returns (uint256);\n', '\n', '    function collateral(address account) external view returns (uint256);\n', '\n', '    function collateralisationRatio(address issuer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function debtBalanceOf(address issuer, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function maxIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (uint256 maxIssuable);\n', '\n', '    function remainingIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 maxIssuable,\n', '            uint256 alreadyIssued,\n', '            uint256 totalSystemDebt\n', '        );\n', '\n', '    function synthsByAddress(address synthAddress)\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function totalIssuedSynths(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferableSynthetix(address account)\n', '        external\n', '        view\n', '        returns (uint256 transferable);\n', '\n', '    // Mutative Functions\n', '    function burnSynths(uint256 amount) external;\n', '\n', '    function burnSynthsOnBehalf(address burnForAddress, uint256 amount)\n', '        external;\n', '\n', '    function burnSynthsToTarget() external;\n', '\n', '    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n', '\n', '    function exchange(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalf(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeWithTracking(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalfWithTracking(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function issueMaxSynths() external;\n', '\n', '    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n', '\n', '    function issueSynths(uint256 amount) external;\n', '\n', '    function issueSynthsOnBehalf(address issueForAddress, uint256 amount)\n', '        external;\n', '\n', '    function mint() external returns (bool);\n', '\n', '    function settle(bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint256 reclaimed,\n', '            uint256 refunded,\n', '            uint256 numEntries\n', '        );\n', '\n', '    // Liquidations\n', '    function liquidateDelinquentAccount(address account, uint256 susdAmount)\n', '        external\n', '        returns (bool);\n', '\n', '    // Restricted Functions\n', '\n', '    function mintSecondary(address account, uint256 amount) external;\n', '\n', '    function mintSecondaryRewards(uint256 amount) external;\n', '\n', '    function burnSecondary(address account, uint256 amount) external;\n', '\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Math\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/HealthCheck\n', '\n', 'interface HealthCheck {\n', '    function check(\n', '        uint256 profit,\n', '        uint256 loss,\n', '        uint256 debtPayment,\n', '        uint256 debtOutstanding,\n', '        uint256 totalDebt\n', '    ) external view returns (bool);\n', '}\n', '\n', '// Part: IVault\n', '\n', 'interface IVault is IERC20 {\n', '    function deposit() external;\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function withdraw() external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function withdraw(\n', '        uint256 amount,\n', '        address account,\n', '        uint256 maxLoss\n', '    ) external;\n', '\n', '    function availableDepositLimit() external view returns (uint256);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/VaultAPI\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient) external returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/BaseStrategy\n', '\n', '/**\n', ' * @title Yearn Base Strategy\n', ' * @author yearn.finance\n', ' * @notice\n', ' *  BaseStrategy implements all of the required functionality to interoperate\n', ' *  closely with the Vault contract. This contract should be inherited and the\n', ' *  abstract methods implemented to adapt the Strategy to the particular needs\n', ' *  it has to create a return.\n', ' *\n', ' *  Of special interest is the relationship between `harvest()` and\n', " *  `vault.report()'. `harvest()` may be called simply because enough time has\n", ' *  elapsed since the last report, and not because any funds need to be moved\n', ' *  or positions adjusted. This is critical so that the Vault may maintain an\n', " *  accurate picture of the Strategy's performance. See  `vault.report()`,\n", ' *  `harvest()`, and `harvestTrigger()` for further details.\n', ' */\n', '\n', 'abstract contract BaseStrategy {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    string public metadataURI;\n', '\n', '    // health checks\n', '    bool public doHealthCheck;\n', '    address public healthCheck;\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to track which version of `StrategyAPI` this Strategy\n', '     *  implements.\n', "     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n", '     * @return A string which holds the current API version of this contract.\n', '     */\n', '    function apiVersion() public pure returns (string memory) {\n', '        return "0.4.2";\n', '    }\n', '\n', '    /**\n', "     * @notice This Strategy's name.\n", '     * @dev\n', '     *  You can use this field to manage the "version" of this Strategy, e.g.\n', '     *  `StrategySomethingOrOtherV1`. However, "API Version" is managed by\n', '     *  `apiVersion()` function above.\n', "     * @return This Strategy's name.\n", '     */\n', '    function name() external view virtual returns (string memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  The amount (priced in want) of the total assets managed by this strategy should not count\n', "     *  towards Yearn's TVL calculations.\n", '     * @dev\n', '     *  You can override this field to set it to a non-zero value if some of the assets of this\n', "     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n", '     *  Note that this value must be strictly less than or equal to the amount provided by\n', '     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n', '     *  Also note that this value is used to determine the total assets under management by this\n', '     *  strategy, for the purposes of computing the management fee in `Vault`\n', '     * @return\n', "     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n", "     *  Locked (TVL) calculation across it's ecosystem.\n", '     */\n', '    function delegatedAssets() external view virtual returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    VaultAPI public vault;\n', '    address public strategist;\n', '    address public rewards;\n', '    address public keeper;\n', '\n', '    IERC20 public want;\n', '\n', '    // So indexers can keep track of this\n', '    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n', '\n', '    event UpdatedStrategist(address newStrategist);\n', '\n', '    event UpdatedKeeper(address newKeeper);\n', '\n', '    event UpdatedRewards(address rewards);\n', '\n', '    event UpdatedMinReportDelay(uint256 delay);\n', '\n', '    event UpdatedMaxReportDelay(uint256 delay);\n', '\n', '    event UpdatedProfitFactor(uint256 profitFactor);\n', '\n', '    event UpdatedDebtThreshold(uint256 debtThreshold);\n', '\n', '    event EmergencyExitEnabled();\n', '\n', '    event UpdatedMetadataURI(string metadataURI);\n', '\n', '    // The minimum number of seconds between harvest calls. See\n', '    // `setMinReportDelay()` for more details.\n', '    uint256 public minReportDelay;\n', '\n', '    // The maximum number of seconds between harvest calls. See\n', '    // `setMaxReportDelay()` for more details.\n', '    uint256 public maxReportDelay;\n', '\n', '    // The minimum multiple that `callCost` must be above the credit/profit to\n', '    // be "justifiable". See `setProfitFactor()` for more details.\n', '    uint256 public profitFactor;\n', '\n', '    // Use this to adjust the threshold at which running a debt causes a\n', '    // harvest trigger. See `setDebtThreshold()` for more details.\n', '    uint256 public debtThreshold;\n', '\n', '    // See note on `setEmergencyExit()`.\n', '    bool public emergencyExit;\n', '\n', '    // modifiers\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == strategist || msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyEmergencyAuthorized() {\n', '        require(\n', '            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        require(msg.sender == strategist, "!strategist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyKeepers() {\n', '        require(\n', '            msg.sender == keeper ||\n', '                msg.sender == strategist ||\n', '                msg.sender == governance() ||\n', '                msg.sender == vault.guardian() ||\n', '                msg.sender == vault.management(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyVaultManagers() {\n', '        require(msg.sender == vault.management() || msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    constructor(address _vault) public {\n', '        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Initializes the Strategy, this is called only once, when the\n', '     *  contract is deployed.\n', '     * @dev `_vault` should implement `VaultAPI`.\n', '     * @param _vault The address of the Vault responsible for this Strategy.\n', '     * @param _strategist The address to assign as `strategist`.\n', '     * The strategist is able to change the reward address\n', '     * @param _rewards  The address to use for pulling rewards.\n', '     * @param _keeper The adddress of the _keeper. _keeper\n', '     * can harvest and tend a strategy.\n', '     */\n', '    function _initialize(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper\n', '    ) internal {\n', '        require(address(want) == address(0), "Strategy already initialized");\n', '\n', '        vault = VaultAPI(_vault);\n', '        want = IERC20(vault.token());\n', '        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n', '        strategist = _strategist;\n', '        rewards = _rewards;\n', '        keeper = _keeper;\n', '\n', '        // initialize variables\n', '        minReportDelay = 0;\n', '        maxReportDelay = 86400;\n', '        profitFactor = 100;\n', '        debtThreshold = 0;\n', '\n', '        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n', '    }\n', '\n', '    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n', '        healthCheck = _healthCheck;\n', '    }\n', '\n', '    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n', '        doHealthCheck = _doHealthCheck;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `strategist`.\n', '     *\n', '     *  This may only be called by governance or the existing strategist.\n', '     * @param _strategist The new address to assign as `strategist`.\n', '     */\n', '    function setStrategist(address _strategist) external onlyAuthorized {\n', '        require(_strategist != address(0));\n', '        strategist = _strategist;\n', '        emit UpdatedStrategist(_strategist);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `keeper`.\n', '     *\n', '     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n', '     *  other than `governance()` or `strategist`. However, unlike\n', '     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n', '     *  and `harvest()`, and no other authorized functions, following the\n', '     *  principle of least privilege.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _keeper The new address to assign as `keeper`.\n', '     */\n', '    function setKeeper(address _keeper) external onlyAuthorized {\n', '        require(_keeper != address(0));\n', '        keeper = _keeper;\n', '        emit UpdatedKeeper(_keeper);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `rewards`. EOA or smart contract which has the permission\n', '     *  to pull rewards from the vault.\n', '     *\n', '     *  This may only be called by the strategist.\n', '     * @param _rewards The address to use for pulling rewards.\n', '     */\n', '    function setRewards(address _rewards) external onlyStrategist {\n', '        require(_rewards != address(0));\n', '        vault.approve(rewards, 0);\n', '        rewards = _rewards;\n', '        vault.approve(rewards, uint256(-1));\n', '        emit UpdatedRewards(_rewards);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the minimum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The minimum number of seconds to wait between harvests.\n', '     */\n', '    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n', '        minReportDelay = _delay;\n', '        emit UpdatedMinReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the maximum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The maximum number of seconds to wait between harvests.\n', '     */\n', '    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n', '        maxReportDelay = _delay;\n', '        emit UpdatedMaxReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `profitFactor`. `profitFactor` is used to determine\n', "     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n", '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _profitFactor A ratio to multiply anticipated\n', '     * `harvest()` gas cost against.\n', '     */\n', '    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n', '        profitFactor = _profitFactor;\n', '        emit UpdatedProfitFactor(_profitFactor);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Sets how far the Strategy can go into loss without a harvest and report\n', '     *  being required.\n', '     *\n', '     *  By default this is 0, meaning any losses would cause a harvest which\n', '     *  will subsequently report the loss to the Vault for tracking. (See\n', '     *  `harvestTrigger()` for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _debtThreshold How big of a loss this Strategy may carry without\n', '     * being required to report to the Vault.\n', '     */\n', '    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n', '        debtThreshold = _debtThreshold;\n', '        emit UpdatedDebtThreshold(_debtThreshold);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n', '     * of the file describing the strategy.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _metadataURI The URI that describe the strategy.\n', '     */\n', '    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n', '        metadataURI = _metadataURI;\n', '        emit UpdatedMetadataURI(_metadataURI);\n', '    }\n', '\n', '    /**\n', '     * Resolve governance address from Vault contract, used to make assertions\n', '     * on protected functions in the Strategy.\n', '     */\n', '    function governance() internal view returns (address) {\n', '        return vault.governance();\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\n', '     *  to `want` (using the native decimal characteristics of `want`).\n', '     * @dev\n', '     *  Care must be taken when working with decimals to assure that the conversion\n', '     *  is compatible. As an example:\n', '     *\n', '     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\n', '     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\n', '     *\n', '     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\n', '     * @return The amount in `want` of `_amtInEth` converted to `want`\n', '     **/\n', '    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide an accurate estimate for the total amount of assets\n', '     *  (principle + return) that this Strategy is currently managing,\n', '     *  denominated in terms of `want` tokens.\n', '     *\n', '     *  This total should be "realizable" e.g. the total value that could\n', '     *  *actually* be obtained from this Strategy if it were to divest its\n', '     *  entire position based on current on-chain conditions.\n', '     * @dev\n', '     *  Care must be taken in using this function, since it relies on external\n', '     *  systems, which could be manipulated by the attacker to give an inflated\n', '     *  (or reduced) value produced by this function, based on current on-chain\n', '     *  conditions (e.g. this function is possible to influence through\n', '     *  flashloan attacks, oracle manipulations, or other DeFi attack\n', '     *  mechanisms).\n', '     *\n', '     *  It is up to governance to use this function to correctly order this\n', '     *  Strategy relative to its peers in the withdrawal queue to minimize\n', '     *  losses for the Vault based on sudden withdrawals. This value should be\n', '     *  higher than the total debt of the Strategy and higher than its expected\n', '     *  value to be "safe".\n', '     * @return The estimated total assets in this Strategy.\n', '     */\n', '    function estimatedTotalAssets() public view virtual returns (uint256);\n', '\n', '    /*\n', '     * @notice\n', '     *  Provide an indication of whether this strategy is currently "active"\n', '     *  in that it is managing an active position, or will manage a position in\n', '     *  the future. This should correlate to `harvest()` activity, so that Harvest\n', '     *  events can be tracked externally by indexing agents.\n', '     * @return True if the strategy is actively managing a position.\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n', '    }\n', '\n', '    /**\n', '     * Perform any Strategy unwinding or other calls necessary to capture the\n', '     * "free return" this Strategy has generated since the last time its core\n', '     * position(s) were adjusted. Examples include unwrapping extra rewards.\n', '     * This call is only used during "normal operation" of a Strategy, and\n', '     * should be optimized to minimize losses as much as possible.\n', '     *\n', '     * This method returns any realized profits and/or realized losses\n', '     * incurred, and should return the total amounts of profits/losses/debt\n', "     * payments (in `want` tokens) for the Vault's accounting (e.g.\n", '     * `want.balanceOf(this) >= _debtPayment + _profit`).\n', '     *\n', '     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n', '     * debt limit, otherwise its value will be how far past the debt limit\n', "     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n", '     *\n', '     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n', '     *       It is okay for it to be less than `_debtOutstanding`, as that\n', '     *       should only used as a guide for how much is left to pay back.\n', '     *       Payments should be made to minimize loss from slippage, debt,\n', '     *       withdrawal fees, etc.\n', '     *\n', '     * See `vault.debtOutstanding()`.\n', '     */\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        virtual\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        );\n', '\n', '    /**\n', '     * Perform any adjustments to the core position(s) of this Strategy given\n', '     * what change the Vault made in the "investable capital" available to the\n', '     * Strategy. Note that all "free capital" in the Strategy after the report\n', '     * was made is available for reinvestment. Also note that this number\n', '     * could be 0, and you should handle that scenario accordingly.\n', '     *\n', '     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n', '     */\n', '    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n', '\n', '    /**\n', "     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n", '     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n', '     * This function should return the amount of `want` tokens made available by the\n', '     * liquidation. If there is a difference between them, `_loss` indicates whether the\n', '     * difference is due to a realized loss, or if there is some other sitution at play\n', '     * (e.g. locked funds) where the amount made available is less than what is needed.\n', '     *\n', '     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n', '     */\n', '    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n', '\n', '    /**\n', '     * Liquidate everything and returns the amount that got freed.\n', '     * This function is used during emergency exit instead of `prepareReturn()` to\n', "     * liquidate all of the Strategy's positions back to the Vault.\n", '     */\n', '\n', '    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `tend()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `tend()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `tend()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be\n', '     *  "at a loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n', '     *\n', '     *  This call and `harvestTrigger()` should never return `true` at the same\n', '     *  time.\n', "     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\n", '     * @return `true` if `tend()` should be called, `false` otherwise.\n', '     */\n', '    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n', "        // We usually don't need tend, but if there are positions that need\n", '        // active maintainence, overriding this function is how you would\n', '        // signal for that.\n', '        uint256 callCost = ethToWant(callCostInWei);\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', "     *  Adjust the Strategy's position. The purpose of tending isn't to\n", '     *  realize gains, but to maximize yield by reinvesting any returns.\n', '     *\n', '     *  See comments on `adjustPosition()`.\n', '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     */\n', '    function tend() external onlyKeepers {\n', "        // Don't take profits with this call, but adjust for better gains\n", '        adjustPosition(vault.debtOutstanding());\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `harvest()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `harvest()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `harvest()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be "at a\n', '     *  loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\n', '     *\n', '     *  This call and `tendTrigger` should never return `true` at the\n', '     *  same time.\n', '     *\n', '     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n', '     *  strategist-controlled parameters that will influence whether this call\n', '     *  returns `true` or not. These parameters will be used in conjunction\n', '     *  with the parameters reported to the Vault (see `params`) to determine\n', '     *  if calling `harvest()` is merited.\n', '     *\n', '     *  It is expected that an external system will check `harvestTrigger()`.\n', '     *  This could be a script run off a desktop or cloud bot (e.g.\n', '     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\n', '     *  or via an integration with the Keep3r network (e.g.\n', '     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n', "     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\n", '     * @return `true` if `harvest()` should be called, `false` otherwise.\n', '     */\n', '    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\n', '        uint256 callCost = ethToWant(callCostInWei);\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // Should not trigger if Strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should not trigger if we haven't waited long enough since previous harvest\n", '        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n', '\n', "        // Should trigger if hasn't been called in a while\n", '        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n', '        //       changes to the value from triggering a harvest directly through user\n', '        //       behavior. This should ensure reasonable resistance to manipulation\n', '        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > debtThreshold) return true;\n', '\n', '        // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        // Trigger if we have a loss to report\n', '        if (total.add(debtThreshold) < params.totalDebt) return true;\n', '\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // Otherwise, only trigger if it "makes sense" economically (gas cost\n', '        // is <N% of value moved)\n', '        uint256 credit = vault.creditAvailable();\n', '        return (profitFactor.mul(callCost) < credit.add(profit));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n', "     *  the Strategy's position.\n", '     *\n', '     *  In the rare case the Strategy is in emergency shutdown, this will exit\n', "     *  the Strategy's position.\n", '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     * @dev\n', '     *  When `harvest()` is called, the Strategy reports to the Vault (via\n', '     *  `vault.report()`), so in some cases `harvest()` must be called in order\n', '     *  to take in profits, to borrow newly available funds from the Vault, or\n', '     *  otherwise adjust its position. In other cases `harvest()` must be\n', "     *  called to report to the Vault on the Strategy's position, especially if\n", '     *  any losses have occurred.\n', '     */\n', '    function harvest() external onlyKeepers {\n', '        uint256 profit = 0;\n', '        uint256 loss = 0;\n', '        uint256 debtOutstanding = vault.debtOutstanding();\n', '        uint256 debtPayment = 0;\n', '        if (emergencyExit) {\n', '            // Free up as much capital as possible\n', '            uint256 amountFreed = liquidateAllPositions();\n', '            if (amountFreed < debtOutstanding) {\n', '                loss = debtOutstanding.sub(amountFreed);\n', '            } else if (amountFreed > debtOutstanding) {\n', '                profit = amountFreed.sub(debtOutstanding);\n', '            }\n', '            debtPayment = debtOutstanding.sub(loss);\n', '        } else {\n', '            // Free up returns for Vault to pull\n', '            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n', '        }\n', '\n', '        // Allow Vault to take up to the "harvested" balance of this contract,\n', '        // which is the amount it has earned since the last time it reported to\n', '        // the Vault.\n', '        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n', '        debtOutstanding = vault.report(profit, loss, debtPayment);\n', '\n', '        // Check if free returns are left, and re-invest them\n', '        adjustPosition(debtOutstanding);\n', '\n', '        // call healthCheck contract\n', '        if (doHealthCheck && healthCheck != address(0)) {\n', '            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), "!healthcheck");\n', '        } else {\n', '            doHealthCheck = true;\n', '        }\n', '\n', '        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Withdraws `_amountNeeded` to `vault`.\n', '     *\n', '     *  This may only be called by the Vault.\n', '     * @param _amountNeeded How much `want` to withdraw.\n', '     * @return _loss Any realized losses\n', '     */\n', '    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n', '        require(msg.sender == address(vault), "!vault");\n', '        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n', '        uint256 amountFreed;\n', '        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n', '        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n', '        want.safeTransfer(msg.sender, amountFreed);\n', '        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n', '    }\n', '\n', '    /**\n', '     * Do anything necessary to prepare this Strategy for migration, such as\n', '     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n', '     * value.\n', '     */\n', '    function prepareMigration(address _newStrategy) internal virtual;\n', '\n', '    /**\n', '     * @notice\n', '     *  Transfers all `want` from this Strategy to `_newStrategy`.\n', '     *\n', '     *  This may only be called by the Vault.\n', '     * @dev\n', "     * The new Strategy's Vault must be the same as this Strategy's Vault.\n", '     *  The migration process should be carefully performed to make sure all\n', '     * the assets are migrated to the new address, which should have never\n', '     * interacted with the vault before.\n', '     * @param _newStrategy The Strategy to migrate to.\n', '     */\n', '    function migrate(address _newStrategy) external {\n', '        require(msg.sender == address(vault));\n', '        require(BaseStrategy(_newStrategy).vault() == vault);\n', '        prepareMigration(_newStrategy);\n', '        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Activates emergency exit. Once activated, the Strategy will exit its\n', '     *  position upon the next harvest, depositing all funds into the Vault as\n', '     *  quickly as is reasonable given on-chain conditions.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @dev\n', '     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n', '     */\n', '    function setEmergencyExit() external onlyEmergencyAuthorized {\n', '        emergencyExit = true;\n', '        vault.revokeStrategy();\n', '\n', '        emit EmergencyExitEnabled();\n', '    }\n', '\n', '    /**\n', '     * Override this to add all tokens/tokenized positions this contract\n', '     * manages on a *persistent* basis (e.g. not just for swapping back to\n', '     * want ephemerally).\n', '     *\n', '     * NOTE: Do *not* include `want`, already included in `sweep` below.\n', '     *\n', '     * Example:\n', '     * ```\n', '     *    function protectedTokens() internal override view returns (address[] memory) {\n', '     *      address[] memory protected = new address[](3);\n', '     *      protected[0] = tokenA;\n', '     *      protected[1] = tokenB;\n', '     *      protected[2] = tokenC;\n', '     *      return protected;\n', '     *    }\n', '     * ```\n', '     */\n', '    function protectedTokens() internal view virtual returns (address[] memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  Removes tokens from this Strategy that are not the type of tokens\n', '     *  managed by this Strategy. This may be used in case of accidentally\n', '     *  sending the wrong kind of token to this Strategy.\n', '     *\n', '     *  Tokens will be sent to `governance()`.\n', '     *\n', '     *  This will fail if an attempt is made to sweep `want`, or any tokens\n', '     *  that are protected by this Strategy.\n', '     *\n', '     *  This may only be called by governance.\n', '     * @dev\n', '     *  Implement `protectedTokens()` to specify any additional tokens that\n', '     *  should be protected from sweeping in addition to `want`.\n', '     * @param _token The token to transfer out of this vault.\n', '     */\n', '    function sweep(address _token) external onlyGovernance {\n', '        require(_token != address(want), "!want");\n', '        require(_token != address(vault), "!shares");\n', '\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// File: Strategy.sol\n', '\n', 'contract Strategy is BaseStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant MIN_ISSUE = 50 * 1e18;\n', '    uint256 public ratioThreshold = 1e15;\n', '    uint256 public constant MAX_RATIO = type(uint256).max;\n', '    uint256 public constant MAX_BPS = 10_000;\n', '    uint256 public maxLoss = 1;\n', '    address public constant susd =\n', '        address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\n', '    IReadProxy public constant readProxy =\n', '        IReadProxy(address(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2));\n', '    address public constant WETH =\n', '        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    ISushiRouter public constant sushiswap =\n', '        ISushiRouter(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\n', '    ISushiRouter public constant uniswap =\n', '        ISushiRouter(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n', '    ISushiRouter public router =\n', '        ISushiRouter(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n', '\n', '    uint256 public targetRatioMultiplier = 12_500;\n', '    IVault public susdVault;\n', '\n', '    // to keep track of next entry to vest\n', '    uint256 public entryIDIndex = 0;\n', '    // entryIDs of escrow rewards claimed and to be claimed by the Strategy\n', '    uint256[] public entryIDs;\n', '\n', '    bytes32 private constant CONTRACT_SYNTHETIX = "Synthetix";\n', '    bytes32 private constant CONTRACT_EXRATES = "ExchangeRates";\n', '    bytes32 private constant CONTRACT_REWARDESCROW_V2 = "RewardEscrowV2";\n', '    bytes32 private constant CONTRACT_ISSUER = "Issuer";\n', '    bytes32 private constant CONTRACT_FEEPOOL = "FeePool";\n', '\n', '    // ********************** EVENTS **********************\n', '\n', '    event RepayDebt(uint256 repaidAmount, uint256 debtAfterRepayment);\n', '\n', '    // ********************** CONSTRUCTOR **********************\n', '\n', '    constructor(address _vault, address _susdVault)\n', '        public\n', '        BaseStrategy(_vault)\n', '    {\n', '        susdVault = IVault(_susdVault);\n', '\n', '        // max time between harvest to collect rewards from each epoch\n', '        maxReportDelay = 7 * 24 * 3600;\n', '\n', '        // To deposit sUSD in the sUSD vault\n', '        IERC20(susd).safeApprove(address(_susdVault), type(uint256).max);\n', '        // To exchange sUSD for SNX\n', '        IERC20(susd).safeApprove(address(uniswap), type(uint256).max);\n', '        IERC20(susd).safeApprove(address(sushiswap), type(uint256).max);\n', '        // To exchange SNX for sUSD\n', '        IERC20(want).safeApprove(address(uniswap), type(uint256).max);\n', '        IERC20(want).safeApprove(address(sushiswap), type(uint256).max);\n', '\n', '        // healthcheck\n', '        healthCheck = 0xDDCea799fF1699e98EDF118e0629A974Df7DF012;\n', '        doHealthCheck = true;\n', '    }\n', '\n', '    // ********************** SETTERS **********************\n', '    function setRouter(uint256 _isSushi) external onlyAuthorized {\n', '        if (_isSushi == uint256(1)) {\n', '            router = sushiswap;\n', '        } else if (_isSushi == uint256(0)) {\n', '            router = uniswap;\n', '        } else {\n', '            revert("!invalid-arg. Use 1 for sushi. 0 for uni");\n', '        }\n', '    }\n', '\n', '    function setTargetRatioMultiplier(uint256 _targetRatioMultiplier) external {\n', '        require(\n', '            msg.sender == governance() ||\n', '                msg.sender == VaultAPI(address(vault)).management()\n', '        );\n', '        targetRatioMultiplier = _targetRatioMultiplier;\n', '    }\n', '\n', '    function setMaxLoss(uint256 _maxLoss) external {\n', '        require(\n', '            msg.sender == governance() ||\n', '                msg.sender == VaultAPI(address(vault)).management()\n', '        );\n', '        maxLoss = _maxLoss;\n', '    }\n', '\n', '    function setRatioThreshold(uint256 _ratioThreshold) external {\n', '        require(\n', '            msg.sender == governance() ||\n', '                msg.sender == VaultAPI(address(vault)).management()\n', '        );\n', '        ratioThreshold = _ratioThreshold;\n', '    }\n', '\n', '    // This method is used to migrate the vault where we deposit the sUSD for yield. It should be rarely used\n', '    function migrateSusdVault(IVault newSusdVault, uint256 _maxLoss)\n', '        external\n', '        onlyGovernance\n', '    {\n', "        // we tolerate losses to avoid being locked in the vault if things don't work out\n", '        // governance must take this into account before migrating\n', '        susdVault.withdraw(\n', '            susdVault.balanceOf(address(this)),\n', '            address(this),\n', '            _maxLoss\n', '        );\n', '        IERC20(susd).safeApprove(address(susdVault), 0);\n', '\n', '        susdVault = newSusdVault;\n', '        IERC20(susd).safeApprove(address(newSusdVault), type(uint256).max);\n', '        newSusdVault.deposit();\n', '    }\n', '\n', '    // ********************** MANUAL **********************\n', '\n', '    function manuallyRepayDebt(uint256 amount) external onlyAuthorized {\n', '        // To be used in case of emergencies, to operate the vault manually\n', '        repayDebt(amount);\n', '    }\n', '\n', '    // ********************** YEARN STRATEGY **********************\n', '\n', '    function name() external view override returns (string memory) {\n', '        return "StrategySynthetixSusdMinter";\n', '    }\n', '\n', '    function estimatedTotalAssets() public view override returns (uint256) {\n', '        uint256 totalAssets =\n', '            balanceOfWant().add(\n', '                sUSDToWant(balanceOfSusdInVault().add(balanceOfSusd()))\n', '            );\n', '        uint256 totalLiabilities = sUSDToWant(balanceOfDebt());\n', '        // NOTE: the ternary operator is required because debt can be higher than assets\n', '        // due to i) increase in debt or ii) losses in invested assets\n', '        return\n', '            totalAssets > totalLiabilities\n', '                ? totalAssets.sub(totalLiabilities)\n', '                : 0;\n', '    }\n', '\n', '    function delegatedAssets() external view override returns (uint256) {\n', '        return sUSDToWant(balanceOfSusdInVault());\n', '    }\n', '\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        override\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        )\n', '    {\n', '        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n', '\n', '        claimProfits();\n', '        vestNextRewardsEntry();\n', '\n', '        uint256 totalAssetsAfterProfit = estimatedTotalAssets();\n', '\n', '        _profit = totalAssetsAfterProfit > totalDebt\n', '            ? totalAssetsAfterProfit.sub(totalDebt)\n', '            : 0;\n', '\n', '        // if the vault is claiming repayment of debt\n', '        if (_debtOutstanding > 0) {\n', '            uint256 _amountFreed = 0;\n', '            (_amountFreed, _loss) = liquidatePosition(_debtOutstanding);\n', '            _debtPayment = Math.min(_debtOutstanding, _amountFreed);\n', '\n', '            if (_loss > 0) {\n', '                _profit = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function adjustPosition(uint256 _debtOutstanding) internal override {\n', '        if (emergencyExit) {\n', '            return;\n', '        }\n', '\n', '        if (_debtOutstanding >= balanceOfWant()) {\n', '            return;\n', '        }\n', '\n', '        // compare current ratio with target ratio\n', '        uint256 _currentRatio = getCurrentRatio();\n', '        // NOTE: target debt ratio is over 20% to maximize APY\n', '        uint256 _targetRatio = getTargetRatio();\n', '        uint256 _issuanceRatio = getIssuanceRatio();\n', '        // burn debt (sUSD) if the ratio is too high\n', '        // collateralisation_ratio = debt / collat\n', '\n', '        if (\n', '            _currentRatio > _targetRatio &&\n', '            _currentRatio.sub(_targetRatio) >= ratioThreshold\n', '        ) {\n', '            // NOTE: min threshold to act on differences = 1e16 (ratioThreshold)\n', '            // current debt ratio might be unhealthy\n', '            // we need to repay some debt to get back to the optimal range\n', '            uint256 _debtToRepay =\n', '                balanceOfDebt().sub(getTargetDebt(_collateral()));\n', '            repayDebt(_debtToRepay);\n', '        } else if (\n', '            _issuanceRatio > _currentRatio &&\n', '            _issuanceRatio.sub(_currentRatio) >= ratioThreshold\n', '        ) {\n', '            // NOTE: min threshold to act on differences = 1e16 (ratioThreshold)\n', '            // if there is enough collateral to issue Synth, issue it\n', '            // this should put the c-ratio around 500% (i.e. debt ratio around 20%)\n', '            uint256 _maxSynths = _synthetix().maxIssuableSynths(address(this));\n', '            uint256 _debtBalance = balanceOfDebt();\n', '            // only issue new debt if it is going to be used\n', '            if (\n', '                _maxSynths > _debtBalance &&\n', '                _maxSynths.sub(_debtBalance) >= MIN_ISSUE\n', '            ) {\n', '                _synthetix().issueMaxSynths();\n', '            }\n', '        }\n', '\n', '        // If there is susd in the strategy, send it to the susd vault\n', '        // We do MIN_ISSUE instead of 0 since it might be dust\n', '        if (balanceOfSusd() >= MIN_ISSUE) {\n', '            susdVault.deposit();\n', '        }\n', '    }\n', '\n', '    function liquidatePosition(uint256 _amountNeeded)\n', '        internal\n', '        override\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        // if unlocked collateral balance is not enough, repay debt to unlock\n', '        // enough `want` to repay debt.\n', '        // unlocked collateral includes profit just claimed in `prepareReturn`\n', '        uint256 unlockedWant = _unlockedWant();\n', '        if (unlockedWant < _amountNeeded) {\n', '            // NOTE: we use _unlockedWant because `want` balance is the total amount of staked + unstaked want (SNX)\n', '            reduceLockedCollateral(_amountNeeded.sub(unlockedWant));\n', '        }\n', '\n', '        // Fetch the unlocked collateral for a second time\n', '        // to update after repaying debt\n', '        unlockedWant = _unlockedWant();\n', '        // if not enough want in balance, it means the strategy lost `want`\n', '        if (_amountNeeded > unlockedWant) {\n', '            _liquidatedAmount = unlockedWant;\n', '            _loss = _amountNeeded.sub(unlockedWant);\n', '        } else {\n', '            _liquidatedAmount = _amountNeeded;\n', '        }\n', '    }\n', '\n', '    function prepareMigration(address _newStrategy) internal override {\n', '        // totalDebt is 0 at this point\n', '        liquidatePosition(balanceOfWant());\n', '    }\n', '\n', '    // ********************** OPERATIONS FUNCTIONS **********************\n', '\n', '    function reduceLockedCollateral(uint256 amountToFree) internal {\n', '        // amountToFree cannot be higher than the amount that is unlockable\n', '        amountToFree = Math.min(amountToFree, _unlockableWant());\n', '\n', '        if (amountToFree == 0) {\n', '            return;\n', '        }\n', '        uint256 _currentDebt = balanceOfDebt();\n', '        uint256 _newCollateral = balanceOfWant().sub(amountToFree); // in want (SNX)\n', '        uint256 _targetDebt =\n', '            wantToSUSD(_newCollateral).mul(getIssuanceRatio()).div(1e18); // in sUSD\n', '\n', '        // NOTE: _newCollateral will always be < _lockedCollateral() so _targetDebt will always be < _currentDebt\n', '        uint256 _amountToRepay = _currentDebt.sub(_targetDebt);\n', '\n', '        repayDebt(_amountToRepay);\n', '    }\n', '\n', '    function repayDebt(uint256 amountToRepay) internal {\n', '        // debt can grow over the amount of sUSD minted (see Synthetix docs)\n', '        // if that happens, we might not have enough sUSD to repay debt\n', '        // if we withdraw in this situation, we need to sell `want` to repay debt and would have losses\n', '        // this can only be done if c-Ratio is over 272% (otherwise there is not enough unlocked)\n', '        if (amountToRepay == 0) {\n', '            return;\n', '        }\n', '        uint256 repaidAmount = 0;\n', '        uint256 _debtBalance = balanceOfDebt();\n', '        // max amount to be repaid is the total balanceOfDebt\n', '        amountToRepay = Math.min(_debtBalance, amountToRepay);\n', '\n', '        // in case the strategy is going to repay almost all debt, it should repay the total amount of debt\n', '        if (\n', '            _debtBalance > amountToRepay &&\n', '            _debtBalance.sub(amountToRepay) <= MIN_ISSUE\n', '        ) {\n', '            amountToRepay = _debtBalance;\n', '        }\n', '\n', '        uint256 currentSusdBalance = balanceOfSusd();\n', '        if (amountToRepay > currentSusdBalance) {\n', '            // there is not enough balance in strategy to repay debt\n', '\n', '            // we withdraw from susdvault\n', '            uint256 _withdrawAmount = amountToRepay.sub(currentSusdBalance);\n', '            withdrawFromSUSDVault(_withdrawAmount);\n', '            // we fetch sUSD balance for a second time and check if now there is enough\n', '            currentSusdBalance = balanceOfSusd();\n', '            if (amountToRepay > currentSusdBalance) {\n', '                // there was not enough balance in strategy and sUSDvault to repay debt\n', '\n', '                // debt is too high to be repaid using current funds, the strategy should:\n', '                // 1. repay max amount of debt\n', '                // 2. sell unlocked want to buy required sUSD to pay remaining debt\n', '                // 3. repay debt\n', '\n', '                if (currentSusdBalance > 0) {\n', '                    // we burn the full sUSD balance to unlock `want` (SNX) in order to sell\n', '                    if (burnSusd(currentSusdBalance)) {\n', '                        // subject to minimumStakePeriod\n', '                        // if successful burnt, update remaining amountToRepay\n', '                        // repaidAmount is previous debt minus current debt\n', '                        repaidAmount = _debtBalance.sub(balanceOfDebt());\n', '                    }\n', '                }\n', '                // buy enough sUSD to repay outstanding debt, selling `want` (SNX)\n', '                // or maximum sUSD with `want` available\n', '                uint256 amountToBuy =\n', '                    Math.min(\n', '                        _getSusdForWant(_unlockedWant()),\n', '                        amountToRepay.sub(repaidAmount)\n', '                    );\n', '                if (amountToBuy > 0) {\n', '                    buySusdWithWant(amountToBuy);\n', '                }\n', '                // amountToRepay should equal balanceOfSusd() (we just bought `amountToRepay` sUSD)\n', '            }\n', '        }\n', '\n', '        // repay sUSD debt by burning the synth\n', '        if (amountToRepay > repaidAmount) {\n', '            if (burnSusd(amountToRepay.sub(repaidAmount))) {\n', '                // this method is subject to minimumStakePeriod (see Synthetix docs)\n', '                repaidAmount = amountToRepay;\n', '            }\n', '        }\n', '        emit RepayDebt(repaidAmount, balanceOfDebt());\n', '    }\n', '\n', '    // two profit sources: Synthetix protocol and Yearn sUSD Vault\n', '    function claimProfits() internal returns (bool) {\n', '        uint256 feesAvailable;\n', '        uint256 rewardsAvailable;\n', '        (feesAvailable, rewardsAvailable) = _getFeesAvailable();\n', '\n', '        if (feesAvailable > 0 || rewardsAvailable > 0) {\n', '            // claim fees from Synthetix\n', '            // claim fees (in sUSD) and rewards (in want (SNX))\n', '            // Synthetix protocol requires issuers to have a c-ratio above 500%\n', '            // to be able to claim fees so we need to burn some sUSD\n', '\n', '            // NOTE: we use issuanceRatio because that is what will put us on 500% c-ratio (i.e. 20% debt ratio)\n', '            uint256 _targetDebt =\n', '                getIssuanceRatio().mul(wantToSUSD(_collateral())).div(1e18);\n', '            uint256 _balanceOfDebt = balanceOfDebt();\n', '            bool claim = true;\n', '\n', '            if (_balanceOfDebt > _targetDebt) {\n', '                uint256 _requiredPayment = _balanceOfDebt.sub(_targetDebt);\n', '                uint256 _maxCash =\n', '                    balanceOfSusd().add(balanceOfSusdInVault()).mul(50).div(\n', '                        100\n', '                    );\n', '                // only claim rewards if the required payment to burn debt up to c-ratio 500%\n', '                // is less than 50% of available cash (both in strategy and in sUSD vault)\n', '                claim = _requiredPayment <= _maxCash;\n', '            }\n', '\n', '            if (claim) {\n', '                // we need to burn sUSD to target\n', '                burnSusdToTarget();\n', '\n', '                // if a vesting entry is going to be created,\n', '                // we save its ID to keep track of its vesting\n', '                if (rewardsAvailable > 0) {\n', '                    entryIDs.push(_rewardEscrowV2().nextEntryId());\n', '                }\n', '                // claimFees() will claim both sUSD fees and put SNX rewards in the escrow (in the prev. saved entry)\n', '                _feePool().claimFees();\n', '            }\n', '        }\n', '\n', '        // claim profits from Yearn sUSD Vault\n', '        if (balanceOfDebt() < balanceOfSusdInVault()) {\n', '            // balance\n', '            uint256 _valueToWithdraw =\n', '                balanceOfSusdInVault().sub(balanceOfDebt());\n', '            withdrawFromSUSDVault(_valueToWithdraw);\n', '        }\n', '\n', '        // sell profits in sUSD for want (SNX) using router\n', '        uint256 _balance = balanceOfSusd();\n', '        if (_balance > 0) {\n', '            buyWantWithSusd(_balance);\n', '        }\n', '    }\n', '\n', '    function vestNextRewardsEntry() internal {\n', '        // Synthetix protocol sends SNX staking rewards to a escrow contract that keeps them 52 weeks, until they vest\n', '        // each time we claim the SNX rewards, a VestingEntry is created in the escrow contract for the amount that was owed\n', '        // we need to keep track of those VestingEntries to know when they vest and claim them\n', "        // after they vest and we claim them, we will receive them in our balance (strategy's balance)\n", '        if (entryIDs.length == 0) {\n', '            return;\n', '        }\n', '\n', '        // The strategy keeps track of the next VestingEntry expected to vest and only when it has vested, it checks the next one\n', '        // this works because the VestingEntries record has been saved in chronological order and they will vest in chronological order too\n', '        IRewardEscrowV2 re = _rewardEscrowV2();\n', '        uint256 nextEntryID = entryIDs[entryIDIndex];\n', '        uint256 _claimable =\n', '            re.getVestingEntryClaimable(address(this), nextEntryID);\n', '        // check if we need to vest\n', '        if (_claimable == 0) {\n', '            return;\n', '        }\n', '\n', '        // vest entryID\n', '        uint256[] memory params = new uint256[](1);\n', '        params[0] = nextEntryID;\n', '        re.vest(params);\n', '\n', '        // we update the nextEntryID to point to the next VestingEntry\n', '        entryIDIndex++;\n', '    }\n', '\n', '    function tendTrigger(uint256 callCost) public view override returns (bool) {\n', '        uint256 _currentRatio = getCurrentRatio(); // debt / collateral\n', '        uint256 _targetRatio = getTargetRatio(); // max debt ratio. over this number, we consider debt unhealthy\n', '        uint256 _issuanceRatio = getIssuanceRatio(); // preferred debt ratio by Synthetix (See protocol docs)\n', '\n', '        if (_currentRatio < _issuanceRatio) {\n', '            // strategy needs to take more debt\n', '            // only return true if the difference is greater than a threshold\n', '            return _issuanceRatio.sub(_currentRatio) >= ratioThreshold;\n', '        } else if (_currentRatio <= _targetRatio) {\n', '            // strategy is in optimal range (a bit undercollateralised)\n', '            return false;\n', '        } else if (_currentRatio > _targetRatio) {\n', '            // the strategy needs to repay debt to exit the danger zone\n', '            // only return true if the difference is greater than a threshold\n', '            return _currentRatio.sub(_targetRatio) >= ratioThreshold;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function protectedTokens()\n', '        internal\n', '        view\n', '        override\n', '        returns (address[] memory)\n', '    {}\n', '\n', '    // ********************** SUPPORT FUNCTIONS  **********************\n', '\n', '    function burnSusd(uint256 _amount) internal returns (bool) {\n', '        // returns false if unsuccessful\n', '        if (_issuer().canBurnSynths(address(this))) {\n', '            _synthetix().burnSynths(_amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function burnSusdToTarget() internal returns (uint256) {\n', '        // we use this method to be able to avoid the waiting period\n', '        // (see Synthetix Protocol)\n', '        // it burns enough Synths to get back to 500% c-ratio\n', '        // we need to have enough sUSD to burn to target\n', '        uint256 _debtBalance = balanceOfDebt();\n', '        // NOTE: amount of synths at 500% c-ratio (with current collateral)\n', '        uint256 _maxSynths = _synthetix().maxIssuableSynths(address(this));\n', '        if (_debtBalance <= _maxSynths) {\n', "            // we are over the 500% c-ratio (i.e. below 20% debt ratio), we don't need to burn sUSD\n", '            return 0;\n', '        }\n', '        uint256 _amountToBurn = _debtBalance.sub(_maxSynths);\n', '        uint256 _balance = balanceOfSusd();\n', '        if (_balance < _amountToBurn) {\n', '            // if we do not have enough in balance, we withdraw funds from sUSD vault\n', '            withdrawFromSUSDVault(_amountToBurn.sub(_balance));\n', '        }\n', '\n', '        if (_amountToBurn > 0) _synthetix().burnSynthsToTarget();\n', '        return _amountToBurn;\n', '    }\n', '\n', '    function withdrawFromSUSDVault(uint256 _amount) internal {\n', "        // Don't leave less than MIN_ISSUE sUSD in the vault\n", '        if (\n', '            _amount > balanceOfSusdInVault() ||\n', '            balanceOfSusdInVault().sub(_amount) <= MIN_ISSUE\n', '        ) {\n', '            // NOTE: maxLoss can be set to a higher value to be able to withdraw from lossy vault\n', '            susdVault.withdraw(\n', '                susdVault.balanceOf(address(this)),\n', '                address(this),\n', '                maxLoss\n', '            );\n', '        } else {\n', '            // NOTE: maxLoss can be set to a higher value to be able to withdraw from lossy vault\n', '            uint256 _sharesToWithdraw =\n', '                _amount.mul(1e18).div(susdVault.pricePerShare());\n', '            susdVault.withdraw(_sharesToWithdraw, address(this), maxLoss);\n', '        }\n', '    }\n', '\n', '    function buyWantWithSusd(uint256 _amount) internal {\n', '        if (_amount == 0) {\n', '            return;\n', '        }\n', '\n', '        address[] memory path = new address[](3);\n', '        path[0] = address(susd);\n', '        path[1] = address(WETH);\n', '        path[2] = address(want);\n', '\n', '        router.swapExactTokensForTokens(_amount, 0, path, address(this), now);\n', '    }\n', '\n', '    function buySusdWithWant(uint256 _amount) internal {\n', '        if (_amount == 0) {\n', '            return;\n', '        }\n', '\n', '        address[] memory path = new address[](3);\n', '        path[0] = address(want);\n', '        path[1] = address(WETH);\n', '        path[2] = address(susd);\n', '\n', '        // we use swapTokensForExactTokens because we need an exact sUSD amount\n', '        router.swapTokensForExactTokens(\n', '            _amount,\n', '            type(uint256).max,\n', '            path,\n', '            address(this),\n', '            now\n', '        );\n', '    }\n', '\n', '    // ********************** CALCS **********************\n', '    function ethToWant(uint256 _amtInWei)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        if (_amtInWei == 0) {\n', '            return 0;\n', '        }\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(want);\n', '        path[1] = address(WETH);\n', '\n', '        uint256[] memory amounts = router.getAmountsOut(_amtInWei, path);\n', '        return amounts[amounts.length - 1];\n', '    }\n', '\n', '    function liquidateAllPositions()\n', '        internal\n', '        override\n', '        returns (uint256 _amountFreed)\n', '    {\n', '        // NOTE: we try to unlock all of the collateral in the strategy (which should be == totalDebt)\n', '        (_amountFreed, ) = liquidatePosition(vault.debtOutstanding());\n', '    }\n', '\n', '    function estimatedProfit() public view returns (uint256) {\n', '        uint256 availableFees; // in sUSD\n', '\n', '        (availableFees, ) = _getFeesAvailable();\n', '\n', '        return sUSDToWant(availableFees);\n', '    }\n', '\n', '    function getTargetDebt(uint256 _targetCollateral)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 _targetRatio = getTargetRatio();\n', '        uint256 _collateralInSUSD = wantToSUSD(_targetCollateral);\n', '        return _targetRatio.mul(_collateralInSUSD).div(1e18);\n', '    }\n', '\n', '    function sUSDToWant(uint256 _amount) internal view returns (uint256) {\n', '        if (_amount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return _amount.mul(1e18).div(_exchangeRates().rateForCurrency("SNX"));\n', '    }\n', '\n', '    function wantToSUSD(uint256 _amount) internal view returns (uint256) {\n', '        if (_amount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return _amount.mul(_exchangeRates().rateForCurrency("SNX")).div(1e18);\n', '    }\n', '\n', '    function _getSusdForWant(uint256 _wantAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_wantAmount == 0) {\n', '            return 0;\n', '        }\n', '        address[] memory path = new address[](3);\n', '        path[0] = address(want);\n', '        path[1] = address(WETH);\n', '        path[2] = address(susd);\n', '\n', '        uint256[] memory amounts = router.getAmountsOut(_wantAmount, path);\n', '        return amounts[amounts.length - 1];\n', '    }\n', '\n', '    // ********************** BALANCES & RATIOS **********************\n', '    function _lockedCollateral() internal view returns (uint256) {\n', '        // collateral includes `want` balance (both locked and unlocked) AND escrowed balance\n', '        uint256 _collateral = _synthetix().collateral(address(this));\n', '\n', '        return _collateral.sub(_unlockedWant());\n', '    }\n', '\n', '    // amount of `want` (SNX) that can be transferred, sold, ...\n', '    function _unlockedWant() internal view returns (uint256) {\n', '        return _synthetix().transferableSynthetix(address(this));\n', '    }\n', '\n', '    function _unlockableWant() internal view returns (uint256) {\n', '        // collateral includes escrowed SNX, we may not be able to unlock the full\n', '        // we can only unlock this by repaying debt\n', '        return balanceOfWant().sub(_unlockedWant());\n', '    }\n', '\n', '    function _collateral() internal view returns (uint256) {\n', '        return _synthetix().collateral(address(this));\n', '    }\n', '\n', '    // returns fees and rewards\n', '    function _getFeesAvailable() internal view returns (uint256, uint256) {\n', '        // fees in sUSD\n', '        // rewards in `want` (SNX)\n', '        return _feePool().feesAvailable(address(this));\n', '    }\n', '\n', '    function getCurrentRatio() public view returns (uint256) {\n', '        // ratio = debt / collateral\n', '        // i.e. ratio is 0 if debt is 0\n', '        // NOTE: collateral includes SNX in account + escrowed balance\n', '        return _issuer().collateralisationRatio(address(this));\n', '    }\n', '\n', '    function getIssuanceRatio() public view returns (uint256) {\n', '        return _issuer().issuanceRatio();\n', '    }\n', '\n', '    function getTargetRatio() public view returns (uint256) {\n', '        return getIssuanceRatio().mul(targetRatioMultiplier).div(MAX_BPS);\n', '    }\n', '\n', '    function balanceOfEscrowedWant() public view returns (uint256) {\n', '        return _rewardEscrowV2().balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfSusd() public view returns (uint256) {\n', '        return IERC20(susd).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfDebt() public view returns (uint256) {\n', '        return _synthetix().debtBalanceOf(address(this), "sUSD");\n', '    }\n', '\n', '    function balanceOfSusdInVault() public view returns (uint256) {\n', '        return\n', '            susdVault\n', '                .balanceOf(address(this))\n', '                .mul(susdVault.pricePerShare())\n', '                .div(1e18);\n', '    }\n', '\n', '    // ********************** ADDRESS RESOLVER SHORTCUTS **********************\n', '\n', '    function resolver() public view returns (IAddressResolver) {\n', '        return IAddressResolver(readProxy.target());\n', '    }\n', '\n', '    function _synthetix() internal view returns (ISynthetix) {\n', '        return ISynthetix(resolver().getAddress(CONTRACT_SYNTHETIX));\n', '    }\n', '\n', '    function _feePool() internal view returns (IFeePool) {\n', '        return IFeePool(resolver().getAddress(CONTRACT_FEEPOOL));\n', '    }\n', '\n', '    function _issuer() internal view returns (IIssuer) {\n', '        return IIssuer(resolver().getAddress(CONTRACT_ISSUER));\n', '    }\n', '\n', '    function _exchangeRates() internal view returns (IExchangeRates) {\n', '        return IExchangeRates(resolver().getAddress(CONTRACT_EXRATES));\n', '    }\n', '\n', '    function _rewardEscrowV2() internal view returns (IRewardEscrowV2) {\n', '        return IRewardEscrowV2(resolver().getAddress(CONTRACT_REWARDESCROW_V2));\n', '    }\n', '}']