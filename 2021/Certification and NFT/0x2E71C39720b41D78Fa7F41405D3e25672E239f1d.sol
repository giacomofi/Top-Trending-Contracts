['// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', '// Audit-1: ok\n', 'interface IModule {\n', '  enum VotingStatus {\n', '    UNKNOWN,\n', '    OPEN,\n', '    CLOSED,\n', '    PASSED\n', '  }\n', '\n', '  function onCreateProposal (\n', '    bytes32 communityId,\n', '    uint256 totalMemberCount,\n', '    uint256 totalValueLocked,\n', '    address proposer,\n', '    uint256 proposerBalance,\n', '    uint256 startDate,\n', '    bytes calldata internalActions,\n', '    bytes calldata externalActions\n', '  ) external view;\n', '\n', '  function onProcessProposal (\n', '    bytes32 proposalId,\n', '    bytes32 communityId,\n', '    uint256 totalMemberCount,\n', '    uint256 totalVoteCount,\n', '    uint256 totalVotingShares,\n', '    uint256 totalVotingSignal,\n', '    uint256 totalValueLocked,\n', '    uint256 secondsPassed\n', '  ) external view returns (VotingStatus, uint256 secondsTillClose, uint256 quorumPercent);\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', "import '../IModule.sol';\n", '\n', '/// @notice This Module has a 2/3 TVL voting threshold with at least 1% of TVL required to create proposals.\n', '/// This is useful for acting as multisigs.\n', '// Audit-1: ok\n', 'contract TwoThirdVotingThreshold is IModule {\n', '  /// @notice Called if a proposal gets created.\n', '  /// Requirements:\n', '  /// - proposerBalance needs to be at least 1% of TVL.\n', '  function onCreateProposal (\n', '    bytes32 /*communityId*/,\n', '    uint256 /*totalMemberCount*/,\n', '    uint256 totalValueLocked,\n', '    address /*proposer*/,\n', '    uint256 proposerBalance,\n', '    uint256 /*startDate*/,\n', '    bytes calldata /*internalActions*/,\n', '    bytes calldata /*externalActions*/\n', '  ) external pure override\n', '  {\n', '    uint256 minProposerBalance = totalValueLocked / 100;\n', '    require(\n', '      proposerBalance >= minProposerBalance,\n', "      'Not enough balance'\n", '    );\n', '  }\n', '\n', '  /// @notice A proposal is open until at least 2/3 from `totalValueLocked` are voted on the proposal.\n', '  /// Depending on the average voting signal, the proposal passes if `averageSignal` > 50.\n', '  function onProcessProposal (\n', '    bytes32 /*proposalId*/,\n', '    bytes32 /*communityId*/,\n', '    uint256 /*totalMemberCount*/,\n', '    uint256 totalVoteCount,\n', '    uint256 totalVotingShares,\n', '    uint256 totalVotingSignal,\n', '    uint256 totalValueLocked,\n', '    uint256 secondsPassed\n', '  ) external pure override returns (VotingStatus, uint256, uint256) {\n', '\n', '    uint256 twoThird = (totalValueLocked / 3) * 2;\n', '\n', '    if (totalVoteCount == 0 || twoThird == 0 || secondsPassed < 1) {\n', '      return (VotingStatus.OPEN, uint256(-1), 0);\n', '    }\n', '\n', '    // assuming this does not overflow\n', '    uint256 quorum = (totalVotingShares * 100) / twoThird;\n', '\n', '    if (quorum > 99) {\n', '      uint256 averageSignal = totalVotingSignal / totalVoteCount;\n', '      if (averageSignal > 50) {\n', '        return (VotingStatus.PASSED, 0, quorum);\n', '      } else {\n', '        return (VotingStatus.CLOSED, 0, quorum);\n', '      }\n', '    }\n', '\n', '    return (VotingStatus.OPEN, 0, quorum);\n', '  }\n', '}\n', '\n', '{\n', '  "evmVersion": "berlin",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "optimizer": {\n', '    "details": {\n', '      "constantOptimizer": true,\n', '      "cse": true,\n', '      "deduplicate": true,\n', '      "jumpdestRemover": true,\n', '      "orderLiterals": false,\n', '      "peephole": true,\n', '      "yul": false\n', '    },\n', '    "runs": 256\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']