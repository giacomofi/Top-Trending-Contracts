['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '// Subset of ERC20, only view functions.\n', 'interface IERC20View {\n', '    function balanceOf(address) external view returns (uint256);\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function totalSupply() external view returns (uint256);\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract BalanceScaler is IERC20View {\n', '    IERC20View public erc20; \n', '    uint32 public scalingFactor;\n', '    address public governor = msg.sender;\n', '    \n', '    modifier onlyGovernor {\n', '      require(msg.sender == governor);\n', '      _;\n', '    }\n', '    \n', '    constructor(IERC20View _erc20, uint32 _scalingFactor) {\n', '        erc20 = _erc20;\n', '        scalingFactor = _scalingFactor;\n', '    }\n', '    \n', '    function balanceOf(address _beneficiary) external override view returns (uint256) {\n', '        return scalingFactor * erc20.balanceOf(_beneficiary);\n', '    }\n', '    \n', '    function name() external override view returns (string memory)  {\n', '        return erc20.name();\n', '    }\n', '    \n', '    function symbol() external override view returns (string memory) {\n', '        return erc20.symbol();\n', '    }\n', '    \n', '    function totalSupply() external override view returns (uint256) {\n', '      return erc20.totalSupply();\n', '    }\n', '    \n', '    function decimals() external override view returns (uint8) {\n', '        return erc20.decimals();\n', '    }\n', '    \n', '    function setGovernor(address _newGovernor) external onlyGovernor {\n', '        governor = _newGovernor;\n', '    }\n', '    \n', '    function setERC20(IERC20View _newERC20) external onlyGovernor {\n', '        erc20 = _newERC20;\n', '    }\n', '    \n', '    function setScalingFactor(uint32 _newScalingFactor) external onlyGovernor {\n', '        scalingFactor = _newScalingFactor;\n', '    }\n', '}']