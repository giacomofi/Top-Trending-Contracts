['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '/*\n', ' * SPDX-License-Identifier: MIT\n', ' */\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract Verify {\n', '\n', '  function recoverSigner(bytes32 message, bytes memory sig)\n', '       public\n', '       pure\n', '       returns (address)\n', '    {\n', '       uint8 v;\n', '       bytes32 r;\n', '       bytes32 s;\n', '\n', '       (v, r, s) = splitSignature(sig);\n', '\n', '       if (v != 27 && v != 28) {\n', '           return (address(0));\n', '       } else {\n', '           // solium-disable-next-line arg-overflow\n', '           return ecrecover(message, v, r, s);\n', '       }\n', '  }\n', '\n', '  function splitSignature(bytes memory sig)\n', '       public\n', '       pure\n', '       returns (uint8, bytes32, bytes32)\n', '   {\n', '       require(sig.length == 65);\n', '\n', '       bytes32 r;\n', '       bytes32 s;\n', '       uint8 v;\n', '\n', '       assembly {\n', '           // first 32 bytes, after the length prefix\n', '           r := mload(add(sig, 32))\n', '           // second 32 bytes\n', '           s := mload(add(sig, 64))\n', '           // final byte (first byte of the next 32 bytes)\n', '           v := byte(0, mload(add(sig, 96)))\n', '       }\n', '\n', '       if (v < 27)\n', '           v += 27;\n', '\n', '       return (v, r, s);\n', '   }\n', '}\n', '\n', '\n', 'library Endian {\n', '    /* https://ethereum.stackexchange.com/questions/83626/how-to-reverse-byte-order-in-uint256-or-bytes32 */\n', '    function reverse64(uint64 input) internal pure returns (uint64 v) {\n', '        v = input;\n', '\n', '        // swap bytes\n', '        v = ((v & 0xFF00FF00FF00FF00) >> 8) |\n', '            ((v & 0x00FF00FF00FF00FF) << 8);\n', '\n', '        // swap 2-byte long pairs\n', '        v = ((v & 0xFFFF0000FFFF0000) >> 16) |\n', '            ((v & 0x0000FFFF0000FFFF) << 16);\n', '\n', '        // swap 4-byte long pairs\n', '        v = (v >> 32) | (v << 32);\n', '    }\n', '    function reverse32(uint32 input) internal pure returns (uint32 v) {\n', '        v = input;\n', '\n', '        // swap bytes\n', '        v = ((v & 0xFF00FF00) >> 8) |\n', '            ((v & 0x00FF00FF) << 8);\n', '\n', '        // swap 2-byte long pairs\n', '        v = (v >> 16) | (v << 16);\n', '    }\n', '    function reverse16(uint16 input) internal pure returns (uint16 v) {\n', '        v = input;\n', '\n', '        // swap bytes\n', '        v = (v >> 8) | (v << 8);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() virtual public view returns (uint);\n', '    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) virtual public returns (bool success);\n', '    function approve(address spender, uint tokens) virtual public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract Oracled is Owned {\n', '    mapping(address => bool) public oracles;\n', '\n', '    modifier onlyOracle {\n', '        require(oracles[msg.sender] == true, "Account is not a registered oracle");\n', '\n', '        _;\n', '    }\n', '\n', '    function regOracle(address _newOracle) public onlyOwner {\n', '        require(!oracles[_newOracle], "Oracle is already registered");\n', '\n', '        oracles[_newOracle] = true;\n', '    }\n', '\n', '    function unregOracle(address _remOracle) public onlyOwner {\n', '        require(oracles[_remOracle] == true, "Oracle is not registered");\n', '\n', '        delete oracles[_remOracle];\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply, added teleport method\n', '// ----------------------------------------------------------------------------\n', 'contract TeleportToken is ERC20Interface, Owned, Oracled, Verify {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint8 public threshold;\n', '    uint8 public thisChainId;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    mapping(uint64 => mapping(address => bool)) signed;\n', '    mapping(uint64 => bool) public claimed;\n', '\n', '    event Teleport(address indexed from, string to, uint tokens, uint chainId);\n', '    event Claimed(uint64 id, address to, uint tokens);\n', '\n', '    struct TeleportData {\n', '        uint64 id;\n', '        uint32 ts;\n', '        uint64 fromAddr;\n', '        uint64 quantity;\n', '        uint64 symbolRaw;\n', '        uint8 chainId;\n', '        address toAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "TLM";\n', '        name = "Alien Worlds Trilium";\n', '        decimals = 4;\n', '        _totalSupply = 10000000000 * 10**uint(decimals);\n', '        balances[address(0)] = _totalSupply;\n', '        threshold = 3;\n', '        thisChainId = 1;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() override public view returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) override public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) override public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) override public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) override public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Moves tokens to the inaccessible account and then sends event for the oracles\n', '    // to monitor and issue on other chain\n', '    // to : EOS address\n', '    // tokens : number of tokens in satoshis\n', '    // chainId : The chain id that they will be sent to\n', '    // ------------------------------------------------------------------------\n', '\n', '    function teleport(string memory to, uint tokens, uint chainid) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[address(0)] = balances[address(0)].add(tokens);\n', '        emit Teleport(msg.sender, to, tokens, chainid);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Claim tokens sent using signatures supplied to the other chain\n', '    // ------------------------------------------------------------------------\n', '\n', '\n', '    function verifySigData(bytes memory sigData) private returns (TeleportData memory) {\n', '        TeleportData memory td;\n', '\n', '        uint64 id;\n', '        uint32 ts;\n', '        uint64 fromAddr;\n', '        uint64 quantity;\n', '        uint64 symbolRaw;\n', '        uint8 chainId;\n', '        address toAddress;\n', '\n', '        assembly {\n', '            id := mload(add(add(sigData, 0x8), 0))\n', '            ts := mload(add(add(sigData, 0x4), 8))\n', '            fromAddr := mload(add(add(sigData, 0x8), 12))\n', '            quantity := mload(add(add(sigData, 0x8), 20))\n', '            symbolRaw := mload(add(add(sigData, 0x8), 28))\n', '            chainId := mload(add(add(sigData, 0x1), 36))\n', '            toAddress := mload(add(add(sigData, 0x14), 37))\n', '        }\n', '\n', '        td.id = Endian.reverse64(id);\n', '        td.ts = Endian.reverse32(ts);\n', '        td.fromAddr = Endian.reverse64(fromAddr);\n', '        td.quantity = Endian.reverse64(quantity);\n', '        td.symbolRaw = Endian.reverse64(symbolRaw);\n', '        td.chainId = chainId;\n', '        td.toAddress = toAddress;\n', '\n', '        require(thisChainId == td.chainId, "Invalid Chain ID");\n', '        require(block.timestamp < SafeMath.add(td.ts, (60 * 60 * 24 * 30)), "Teleport has expired");\n', '\n', '        require(!claimed[td.id], "Already Claimed");\n', '\n', '        claimed[td.id] = true;\n', '\n', '        return td;\n', '    }\n', '\n', '    function claim(bytes memory sigData, bytes[] calldata signatures) public returns (address toAddress) {\n', '        TeleportData memory td = verifySigData(sigData);\n', '\n', '        // verify signatures\n', '        require(sigData.length == 69, "Signature data is the wrong size");\n', '        require(signatures.length <= 10, "Maximum of 10 signatures can be provided");\n', '\n', '        bytes32 message = keccak256(sigData);\n', '\n', '        uint8 numberSigs = 0;\n', '\n', '        for (uint8 i = 0; i < signatures.length; i++){\n', '            address potential = Verify.recoverSigner(message, signatures[i]);\n', '\n', "            // Check that they are an oracle and they haven't signed twice\n", '            if (oracles[potential] && !signed[td.id][potential]){\n', '                signed[td.id][potential] = true;\n', '                numberSigs++;\n', '\n', '                if (numberSigs >= 10){\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '\n', '        require(numberSigs >= threshold, "Not enough valid signatures provided");\n', '\n', '        balances[address(0)] = balances[address(0)].sub(td.quantity);\n', '        balances[td.toAddress] = balances[td.toAddress].add(td.quantity);\n', '\n', '        emit Claimed(td.id, td.toAddress, td.quantity);\n', '        emit Transfer(address(0), td.toAddress, td.quantity);\n', '\n', '        return td.toAddress;\n', '    }\n', '\n', '    function updateThreshold(uint8 newThreshold) public onlyOwner returns (bool success) {\n', '        if (newThreshold > 0){\n', '            require(newThreshold <= 10, "Threshold has maximum of 10");\n', '\n', '            threshold = newThreshold;\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function updateChainId(uint8 newChainId) public onlyOwner returns (bool success) {\n', '        if (newChainId > 0){\n', '            require(newChainId <= 100, "ChainID is too big");\n', '            thisChainId = newChainId;\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    receive () external payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']