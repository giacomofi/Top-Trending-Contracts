['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-21\n', '*/\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '// SPDX-License-Identifier: MIT\n', '// Source code: https://github.com/DeCash-Official/smart-contracts\n', '\n', 'interface DeCashProxyInterface {\n', '    function initialize(string memory _tokenName, address _tokenAddr) external;\n', '\n', '    function upgrade(address _new) external;\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', '                "Address: low-level static call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'interface DeCashStorageInterface {\n', '    // Getters\n', '    function getAddress(bytes32 _key) external view returns (address);\n', '\n', '    function getUint(bytes32 _key) external view returns (uint256);\n', '\n', '    function getString(bytes32 _key) external view returns (string memory);\n', '\n', '    function getBytes(bytes32 _key) external view returns (bytes memory);\n', '\n', '    function getBool(bytes32 _key) external view returns (bool);\n', '\n', '    function getInt(bytes32 _key) external view returns (int256);\n', '\n', '    function getBytes32(bytes32 _key) external view returns (bytes32);\n', '\n', '    // Setters\n', '    function setAddress(bytes32 _key, address _value) external;\n', '\n', '    function setUint(bytes32 _key, uint256 _value) external;\n', '\n', '    function setString(bytes32 _key, string calldata _value) external;\n', '\n', '    function setBytes(bytes32 _key, bytes calldata _value) external;\n', '\n', '    function setBool(bytes32 _key, bool _value) external;\n', '\n', '    function setInt(bytes32 _key, int256 _value) external;\n', '\n', '    function setBytes32(bytes32 _key, bytes32 _value) external;\n', '\n', '    // Deleters\n', '    function deleteAddress(bytes32 _key) external;\n', '\n', '    function deleteUint(bytes32 _key) external;\n', '\n', '    function deleteString(bytes32 _key) external;\n', '\n', '    function deleteBytes(bytes32 _key) external;\n', '\n', '    function deleteBool(bytes32 _key) external;\n', '\n', '    function deleteInt(bytes32 _key) external;\n', '\n', '    function deleteBytes32(bytes32 _key) external;\n', '}\n', '\n', '/// @title Base settings / modifiers for each contract in DeCash Token (Credits David Rugendyke/Rocket Pool)\n', '/// @author Fabrizio Amodio (ZioFabry)\n', '\n', 'abstract contract DeCashBase {\n', '    // Version of the contract\n', '    uint8 public version;\n', '\n', '    // The main storage contract where primary persistant storage is maintained\n', '    DeCashStorageInterface internal _decashStorage = DeCashStorageInterface(0);\n', '\n', '    /**\n', "     * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\n", '     */\n', '    modifier onlyLatestContract(\n', '        string memory _contractName,\n', '        address _contractAddress\n', '    ) {\n', '        require(\n', '            _contractAddress ==\n', '                _getAddress(\n', '                    keccak256(\n', '                        abi.encodePacked("contract.address", _contractName)\n', '                    )\n', '                ),\n', '            "Invalid or outdated contract"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_isOwner(msg.sender), "Account is not the owner");\n', '        _;\n', '    }\n', '    modifier onlyAdmin() {\n', '        require(_isAdmin(msg.sender), "Account is not an admin");\n', '        _;\n', '    }\n', '    modifier onlySuperUser() {\n', '        require(_isSuperUser(msg.sender), "Account is not a super user");\n', '        _;\n', '    }\n', '    modifier onlyDelegator(address _address) {\n', '        require(_isDelegator(_address), "Account is not a delegator");\n', '        _;\n', '    }\n', '    modifier onlyFeeRecipient(address _address) {\n', '        require(_isFeeRecipient(_address), "Account is not a fee recipient");\n', '        _;\n', '    }\n', '    modifier onlyRole(string memory _role) {\n', '        require(_roleHas(_role, msg.sender), "Account does not match the role");\n', '        _;\n', '    }\n', '\n', '    /// @dev Set the main DeCash Storage address\n', '    constructor(address _decashStorageAddress) {\n', '        // Update the contract address\n', '        _decashStorage = DeCashStorageInterface(_decashStorageAddress);\n', '    }\n', '\n', '    function isOwner(address _address) external view returns (bool) {\n', '        return _isOwner(_address);\n', '    }\n', '\n', '    function isAdmin(address _address) external view returns (bool) {\n', '        return _isAdmin(_address);\n', '    }\n', '\n', '    function isSuperUser(address _address) external view returns (bool) {\n', '        return _isSuperUser(_address);\n', '    }\n', '\n', '    function isDelegator(address _address) external view returns (bool) {\n', '        return _isDelegator(_address);\n', '    }\n', '\n', '    function isFeeRecipient(address _address) external view returns (bool) {\n', '        return _isFeeRecipient(_address);\n', '    }\n', '\n', '    function isBlacklisted(address _address) external view returns (bool) {\n', '        return _isBlacklisted(_address);\n', '    }\n', '\n', '    /// @dev Get the address of a network contract by name\n', '    function _getContractAddress(string memory _contractName)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        // Get the current contract address\n', '        address contractAddress =\n', '            _getAddress(\n', '                keccak256(abi.encodePacked("contract.address", _contractName))\n', '            );\n', '        // Check it\n', '        require(contractAddress != address(0x0), "Contract not found");\n', '        // Return\n', '        return contractAddress;\n', '    }\n', '\n', '    /// @dev Get the name of a network contract by address\n', '    function _getContractName(address _contractAddress)\n', '        internal\n', '        view\n', '        returns (string memory)\n', '    {\n', '        // Get the contract name\n', '        string memory contractName =\n', '            _getString(\n', '                keccak256(abi.encodePacked("contract.name", _contractAddress))\n', '            );\n', '        // Check it\n', '        require(\n', '            keccak256(abi.encodePacked(contractName)) !=\n', '                keccak256(abi.encodePacked("")),\n', '            "Contract not found"\n', '        );\n', '        // Return\n', '        return contractName;\n', '    }\n', '\n', '    /// @dev Role Management\n', '    function _roleHas(string memory _role, address _address)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return\n', '            _getBool(\n', '                keccak256(abi.encodePacked("access.role", _role, _address))\n', '            );\n', '    }\n', '\n', '    function _isOwner(address _address) internal view returns (bool) {\n', '        return _roleHas("owner", _address);\n', '    }\n', '\n', '    function _isAdmin(address _address) internal view returns (bool) {\n', '        return _roleHas("admin", _address);\n', '    }\n', '\n', '    function _isSuperUser(address _address) internal view returns (bool) {\n', '        return _roleHas("admin", _address) || _isOwner(_address);\n', '    }\n', '\n', '    function _isDelegator(address _address) internal view returns (bool) {\n', '        return _roleHas("delegator", _address) || _isOwner(_address);\n', '    }\n', '\n', '    function _isFeeRecipient(address _address) internal view returns (bool) {\n', '        return _roleHas("fee", _address) || _isOwner(_address);\n', '    }\n', '\n', '    function _isBlacklisted(address _address) internal view returns (bool) {\n', '        return _roleHas("blacklisted", _address) && !_isOwner(_address);\n', '    }\n', '\n', '    /// @dev Storage get methods\n', '    function _getAddress(bytes32 _key) internal view returns (address) {\n', '        return _decashStorage.getAddress(_key);\n', '    }\n', '\n', '    function _getUint(bytes32 _key) internal view returns (uint256) {\n', '        return _decashStorage.getUint(_key);\n', '    }\n', '\n', '    function _getString(bytes32 _key) internal view returns (string memory) {\n', '        return _decashStorage.getString(_key);\n', '    }\n', '\n', '    function _getBytes(bytes32 _key) internal view returns (bytes memory) {\n', '        return _decashStorage.getBytes(_key);\n', '    }\n', '\n', '    function _getBool(bytes32 _key) internal view returns (bool) {\n', '        return _decashStorage.getBool(_key);\n', '    }\n', '\n', '    function _getInt(bytes32 _key) internal view returns (int256) {\n', '        return _decashStorage.getInt(_key);\n', '    }\n', '\n', '    function _getBytes32(bytes32 _key) internal view returns (bytes32) {\n', '        return _decashStorage.getBytes32(_key);\n', '    }\n', '\n', '    function _getAddressS(string memory _key) internal view returns (address) {\n', '        return _decashStorage.getAddress(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getUintS(string memory _key) internal view returns (uint256) {\n', '        return _decashStorage.getUint(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getStringS(string memory _key)\n', '        internal\n', '        view\n', '        returns (string memory)\n', '    {\n', '        return _decashStorage.getString(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getBytesS(string memory _key)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return _decashStorage.getBytes(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getBoolS(string memory _key) internal view returns (bool) {\n', '        return _decashStorage.getBool(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getIntS(string memory _key) internal view returns (int256) {\n', '        return _decashStorage.getInt(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _getBytes32S(string memory _key) internal view returns (bytes32) {\n', '        return _decashStorage.getBytes32(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    /// @dev Storage set methods\n', '    function _setAddress(bytes32 _key, address _value) internal {\n', '        _decashStorage.setAddress(_key, _value);\n', '    }\n', '\n', '    function _setUint(bytes32 _key, uint256 _value) internal {\n', '        _decashStorage.setUint(_key, _value);\n', '    }\n', '\n', '    function _setString(bytes32 _key, string memory _value) internal {\n', '        _decashStorage.setString(_key, _value);\n', '    }\n', '\n', '    function _setBytes(bytes32 _key, bytes memory _value) internal {\n', '        _decashStorage.setBytes(_key, _value);\n', '    }\n', '\n', '    function _setBool(bytes32 _key, bool _value) internal {\n', '        _decashStorage.setBool(_key, _value);\n', '    }\n', '\n', '    function _setInt(bytes32 _key, int256 _value) internal {\n', '        _decashStorage.setInt(_key, _value);\n', '    }\n', '\n', '    function _setBytes32(bytes32 _key, bytes32 _value) internal {\n', '        _decashStorage.setBytes32(_key, _value);\n', '    }\n', '\n', '    function _setAddressS(string memory _key, address _value) internal {\n', '        _decashStorage.setAddress(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setUintS(string memory _key, uint256 _value) internal {\n', '        _decashStorage.setUint(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setStringS(string memory _key, string memory _value) internal {\n', '        _decashStorage.setString(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setBytesS(string memory _key, bytes memory _value) internal {\n', '        _decashStorage.setBytes(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setBoolS(string memory _key, bool _value) internal {\n', '        _decashStorage.setBool(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setIntS(string memory _key, int256 _value) internal {\n', '        _decashStorage.setInt(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    function _setBytes32S(string memory _key, bytes32 _value) internal {\n', '        _decashStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value);\n', '    }\n', '\n', '    /// @dev Storage delete methods\n', '    function _deleteAddress(bytes32 _key) internal {\n', '        _decashStorage.deleteAddress(_key);\n', '    }\n', '\n', '    function _deleteUint(bytes32 _key) internal {\n', '        _decashStorage.deleteUint(_key);\n', '    }\n', '\n', '    function _deleteString(bytes32 _key) internal {\n', '        _decashStorage.deleteString(_key);\n', '    }\n', '\n', '    function _deleteBytes(bytes32 _key) internal {\n', '        _decashStorage.deleteBytes(_key);\n', '    }\n', '\n', '    function _deleteBool(bytes32 _key) internal {\n', '        _decashStorage.deleteBool(_key);\n', '    }\n', '\n', '    function _deleteInt(bytes32 _key) internal {\n', '        _decashStorage.deleteInt(_key);\n', '    }\n', '\n', '    function _deleteBytes32(bytes32 _key) internal {\n', '        _decashStorage.deleteBytes32(_key);\n', '    }\n', '\n', '    function _deleteAddressS(string memory _key) internal {\n', '        _decashStorage.deleteAddress(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteUintS(string memory _key) internal {\n', '        _decashStorage.deleteUint(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteStringS(string memory _key) internal {\n', '        _decashStorage.deleteString(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteBytesS(string memory _key) internal {\n', '        _decashStorage.deleteBytes(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteBoolS(string memory _key) internal {\n', '        _decashStorage.deleteBool(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteIntS(string memory _key) internal {\n', '        _decashStorage.deleteInt(keccak256(abi.encodePacked(_key)));\n', '    }\n', '\n', '    function _deleteBytes32S(string memory _key) internal {\n', '        _decashStorage.deleteBytes32(keccak256(abi.encodePacked(_key)));\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n', ' * be specified by overriding the virtual {_implementation} function.\n', ' *\n', ' * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n', ' * different contract through the {_delegate} function.\n', ' *\n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'abstract contract Proxy {\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive() external payable {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback() external payable {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     *\n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _delegate(address implementation) internal {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(\n', '                gas(),\n', '                implementation,\n', '                0,\n', '                calldatasize(),\n', '                0,\n', '                0\n', '            )\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '                // delegatecall returns 0 on error.\n', '                case 0 {\n', '                    revert(0, returndatasize())\n', '                }\n', '                default {\n', '                    return(0, returndatasize())\n', '                }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n', '     * and {_fallback} should delegate.\n', '     */\n', '    function _implementation() internal view virtual returns (address);\n', '\n', '    /**\n', '     * @dev Delegates the current call to the address returned by `_implementation()`.\n', '     *\n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal {\n', '        _beforeFallback();\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n', '     * call, or as part of the Solidity `fallback` or `receive` functions.\n', '     *\n', '     * If overriden should call `super._beforeFallback()`.\n', '     */\n', '    function _beforeFallback() internal virtual {}\n', '}\n', '\n', '/// @title DeCash Proxy Contract\n', '/// @author Fabrizio Amodio (ZioFabry)\n', '\n', 'contract DeCashProxy is DeCashBase, Proxy {\n', '    bytes32 private constant _IMPLEMENTATION_SLOT =\n', '        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    event ProxyInitiated(address indexed implementation);\n', '    event ProxyUpgraded(address indexed implementation);\n', '\n', '    // Construct\n', '    constructor(address _decashStorageAddress)\n', '        DeCashBase(_decashStorageAddress)\n', '    {\n', '        assert(\n', '            _IMPLEMENTATION_SLOT ==\n', '                bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1)\n', '        );\n', '        version = 1;\n', '    }\n', '\n', '    function upgrade(address _address)\n', '        public\n', '        onlyLatestContract("upgrade", msg.sender)\n', '    {\n', '        _setImplementation(_address);\n', '\n', '        emit ProxyUpgraded(_address);\n', '    }\n', '\n', '    function initialize(address _address) external onlyOwner {\n', '        require(\n', '            !_getBool(keccak256(abi.encodePacked("proxy.init", address(this)))),\n', '            "Proxy already initialized"\n', '        );\n', '\n', '        _setImplementation(_address);\n', '        _setBool(keccak256(abi.encodePacked("proxy.init", address(this))), true);\n', '\n', '        emit ProxyInitiated(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address _address) private {\n', '        require(Address.isContract(_address), "address is not a contract");\n', '\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, _address)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _implementation() internal view override returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            impl := sload(slot)\n', '        }\n', '    }\n', '}\n', '\n', 'contract GBPDProxy is DeCashProxy {\n', '    constructor(address _storage) DeCashProxy(_storage) {}\n', '}']