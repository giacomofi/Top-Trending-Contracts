['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ElasticERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev This contract is based on the OpenZeppelin ERC20 implementation,\n', ' * basically adding the elastic extensions.\n', ' */\n', 'contract ElasticERC20 is Context, IERC20\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint8 constant UNSCALED_DECIMALS = 24;\n', '\tuint256 constant UNSCALED_FACTOR = 10 ** uint256(UNSCALED_DECIMALS);\n', '\n', '\tmapping (address => mapping (address => uint256)) private allowances_;\n', '\n', '\tmapping (address => uint256) private unscaledBalances_;\n', '\tuint256 private unscaledTotalSupply_;\n', '\n', '\tstring private name_;\n', '\tstring private symbol_;\n', '\tuint8 private decimals_;\n', '\n', '\tuint256 private scalingFactor_;\n', '\n', '\tconstructor (string memory _name, string memory _symbol) public\n', '\t{\n', '\t\tname_ = _name;\n', '\t\tsymbol_ = _symbol;\n', '\t\t_setupDecimals(18);\n', '\t}\n', '\n', '\tfunction name() public view returns (string memory _name)\n', '\t{\n', '\t\treturn name_;\n', '\t}\n', '\n', '\tfunction symbol() public view returns (string memory _symbol)\n', '\t{\n', '\t\treturn symbol_;\n', '\t}\n', '\n', '\tfunction decimals() public view returns (uint8 _decimals)\n', '\t{\n', '\t\treturn decimals_;\n', '\t}\n', '\n', '\tfunction totalSupply() public view override returns (uint256 _supply)\n', '\t{\n', '\t\treturn _scale(unscaledTotalSupply_, scalingFactor_);\n', '\t}\n', '\n', '\tfunction balanceOf(address _account) public view override returns (uint256 _balance)\n', '\t{\n', '\t\treturn _scale(unscaledBalances_[_account], scalingFactor_);\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) public view virtual override returns (uint256 _allowance)\n', '\t{\n', '\t\treturn allowances_[_owner][_spender];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _amount) public virtual override returns (bool _success)\n', '\t{\n', '\t\t_approve(_msgSender(), _spender, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool _success)\n', '\t{\n', '\t\t_approve(_msgSender(), _spender, allowances_[_msgSender()][_spender].add(_addedValue));\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool _success)\n', '\t{\n', '\t\t_approve(_msgSender(), _spender, allowances_[_msgSender()][_spender].sub(_subtractedValue, "ERC20: decreased allowance below zero"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transfer(address _recipient, uint256 _amount) public virtual override returns (bool _success)\n', '\t{\n', '\t\t_transfer(_msgSender(), _recipient, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _sender, address _recipient, uint256 _amount) public virtual override returns (bool _success)\n', '\t{\n', '\t\t_transfer(_sender, _recipient, _amount);\n', '\t\t_approve(_sender, _msgSender(), allowances_[_sender][_msgSender()].sub(_amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction _approve(address _owner, address _spender, uint256 _amount) internal virtual\n', '\t{\n', '\t\trequire(_owner != address(0), "ERC20: approve from the zero address");\n', '\t\trequire(_spender != address(0), "ERC20: approve to the zero address");\n', '\t\tallowances_[_owner][_spender] = _amount;\n', '\t\temit Approval(_owner, _spender, _amount);\n', '\t}\n', '\n', '\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal virtual\n', '\t{\n', '\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\n', '\t\trequire(_sender != address(0), "ERC20: transfer from the zero address");\n', '\t\trequire(_recipient != address(0), "ERC20: transfer to the zero address");\n', '\t\t_beforeTokenTransfer(_sender, _recipient, _amount);\n', '\t\tunscaledBalances_[_sender] = unscaledBalances_[_sender].sub(_unscaledAmount, "ERC20: transfer amount exceeds balance");\n', '\t\tunscaledBalances_[_recipient] = unscaledBalances_[_recipient].add(_unscaledAmount);\n', '\t\temit Transfer(_sender, _recipient, _amount);\n', '\t}\n', '\n', '\tfunction _mint(address _account, uint256 _amount) internal virtual\n', '\t{\n', '\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\n', '\t\trequire(_account != address(0), "ERC20: mint to the zero address");\n', '\t\t_beforeTokenTransfer(address(0), _account, _amount);\n', '\t\tunscaledTotalSupply_ = unscaledTotalSupply_.add(_unscaledAmount);\n', '\t\tuint256 _maxScalingFactor = _calcMaxScalingFactor(unscaledTotalSupply_);\n', '\t\trequire(scalingFactor_ <= _maxScalingFactor, "unsupported scaling factor");\n', '\t\tunscaledBalances_[_account] = unscaledBalances_[_account].add(_unscaledAmount);\n', '\t\temit Transfer(address(0), _account, _amount);\n', '\t}\n', '\n', '\tfunction _burn(address _account, uint256 _amount) internal virtual\n', '\t{\n', '\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\n', '\t\trequire(_account != address(0), "ERC20: burn from the zero address");\n', '\t\t_beforeTokenTransfer(_account, address(0), _amount);\n', '\t\tunscaledBalances_[_account] = unscaledBalances_[_account].sub(_unscaledAmount, "ERC20: burn amount exceeds balance");\n', '\t\tunscaledTotalSupply_ = unscaledTotalSupply_.sub(_unscaledAmount);\n', '\t\temit Transfer(_account, address(0), _amount);\n', '\t}\n', '\n', '\tfunction _setupDecimals(uint8 _decimals) internal\n', '\t{\n', '\t\tdecimals_ = _decimals;\n', '\t\tscalingFactor_ = 10 ** uint256(_decimals);\n', '\t}\n', '\n', '\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual { }\n', '\n', '\tfunction unscaledTotalSupply() public view returns (uint256 _supply)\n', '\t{\n', '\t\treturn unscaledTotalSupply_;\n', '\t}\n', '\n', '\tfunction unscaledBalanceOf(address _account) public view returns (uint256 _balance)\n', '\t{\n', '\t\treturn unscaledBalances_[_account];\n', '\t}\n', '\n', '\tfunction scalingFactor() public view returns (uint256 _scalingFactor)\n', '\t{\n', '\t\treturn scalingFactor_;\n', '\t}\n', '\n', '\tfunction maxScalingFactor() public view returns (uint256 _maxScalingFactor)\n', '\t{\n', '\t\treturn _calcMaxScalingFactor(unscaledTotalSupply_);\n', '\t}\n', '\n', '\tfunction _calcMaxScalingFactor(uint256 _unscaledTotalSupply) internal pure returns (uint256 _maxScalingFactor)\n', '\t{\n', '\t\treturn uint256(-1).div(_unscaledTotalSupply);\n', '\t}\n', '\n', '\tfunction _scale(uint256 _unscaledAmount, uint256 _scalingFactor) internal pure returns (uint256 _amount)\n', '\t{\n', '\t\treturn _unscaledAmount.mul(_scalingFactor).div(UNSCALED_FACTOR);\n', '\t}\n', '\n', '\tfunction _unscale(uint256 _amount, uint256 _scalingFactor) internal pure returns (uint256 _unscaledAmount)\n', '\t{\n', '\t\treturn _amount.mul(UNSCALED_FACTOR).div(_scalingFactor);\n', '\t}\n', '\n', '\tfunction _setScalingFactor(uint256 _scalingFactor) internal\n', '\t{\n', '\t\tuint256 _maxScalingFactor = _calcMaxScalingFactor(unscaledTotalSupply_);\n', '\t\trequire(0 < _scalingFactor && _scalingFactor <= _maxScalingFactor, "unsupported scaling factor");\n', '\t\tscalingFactor_ = _scalingFactor;\n', '\t}\n', '}\n', '\n', '// File: contracts/Executor.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library provides support for the dynamic execution of external\n', ' * contract calls.\n', ' */\n', 'library Executor\n', '{\n', '\tstruct Target {\n', '\t\taddress to;\n', '\t\tbytes data;\n', '\t}\n', '\n', '\tfunction addTarget(Target[] storage _targets, address _to, bytes memory _data) internal\n', '\t{\n', '\t\t_targets.push(Target({ to: _to, data: _data }));\n', '\t}\n', '\n', '\tfunction removeTarget(Target[] storage _targets, uint256 _index) internal\n', '\t{\n', '\t\trequire(_index < _targets.length, "invalid index");\n', '\t\t_targets[_index] = _targets[_targets.length - 1];\n', '\t\t_targets.pop();\n', '\t}\n', '\n', '\tfunction executeAll(Target[] storage _targets) internal\n', '\t{\n', '\t\tfor (uint256 _i = 0; _i < _targets.length; _i++) {\n', '\t\t\tTarget storage _target = _targets[_i];\n', '\t\t\tbool _success = _externalCall(_target.to, _target.data);\n', '\t\t\trequire(_success, "call failed");\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _externalCall(address _to, bytes memory _data) private returns (bool _success)\n', '\t{\n', '\t\tassembly {\n', '\t\t\t_success := call(gas(), _to, 0, add(_data, 0x20), mload(_data), 0, 0)\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: contracts/GElastic.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This interface exposes the base functionality of GElasticToken.\n', ' */\n', 'interface GElastic\n', '{\n', '\t// view functions\n', '\tfunction referenceToken() external view returns (address _referenceToken);\n', '\tfunction treasury() external view returns (address _treasury);\n', '\tfunction rebaseMinimumDeviation() external view returns (uint256 _rebaseMinimumDeviation);\n', '\tfunction rebaseDampeningFactor() external view returns (uint256 _rebaseDampeningFactor);\n', '\tfunction rebaseTreasuryMintPercent() external view returns (uint256 _rebaseTreasuryMintPercent);\n', '\tfunction rebaseTimingParameters() external view returns (uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength);\n', '\tfunction rebaseActive() external view returns (bool _rebaseActive);\n', '\tfunction rebaseAvailable() external view returns (bool _available);\n', '\tfunction lastRebaseTime() external view returns (uint256 _lastRebaseTime);\n', '\tfunction epoch() external view returns (uint256 _epoch);\n', '\tfunction lastExchangeRate() external view returns (uint256 _exchangeRate);\n', '\tfunction currentExchangeRate() external view returns (uint256 _exchangeRate);\n', '\tfunction pair() external view returns (address _pair);\n', '\n', '\t// open functions\n', '\tfunction rebase() external;\n', '\n', '\t// priviledged functions\n', '\tfunction activateOracle(address _pair) external;\n', '\tfunction activateRebase() external;\n', '\tfunction setTreasury(address _newTreasury) external;\n', '\tfunction setRebaseMinimumDeviation(uint256 _newRebaseMinimumDeviation) external;\n', '\tfunction setRebaseDampeningFactor(uint256 _newRebaseDampeningFactor) external;\n', '\tfunction setRebaseTreasuryMintPercent(uint256 _newRebaseTreasuryMintPercent) external;\n', '\tfunction setRebaseTimingParameters(uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength) external;\n', '\tfunction addPostRebaseTarget(address _to, bytes memory _data) external;\n', '\tfunction removePostRebaseTarget(uint256 _index) external;\n', '\n', '\t// emitted events\n', '\tevent Rebase(uint256 indexed _epoch, uint256 _oldScalingFactor, uint256 _newScalingFactor);\n', '\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\n', '\tevent ChangeRebaseMinimumDeviation(uint256 _oldRebaseMinimumDeviation, uint256 _newRebaseMinimumDeviation);\n', '\tevent ChangeRebaseDampeningFactor(uint256 _oldRebaseDampeningFactor, uint256 _newRebaseDampeningFactor);\n', '\tevent ChangeRebaseTreasuryMintPercent(uint256 _oldRebaseTreasuryMintPercent, uint256 _newRebaseTreasuryMintPercent);\n', '\tevent ChangeRebaseTimingParameters(uint256 _oldRebaseMinimumInterval, uint256 _oldRebaseWindowOffset, uint256 _oldRebaseWindowLength, uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength);\n', '\tevent AddPostRebaseTarget(address indexed _to, bytes _data);\n', '\tevent RemovePostRebaseTarget(address indexed _to, bytes _data);\n', '}\n', '\n', '// File: contracts/GElasticTokenManager.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev This library helps managing rebase parameters and calculations.\n', ' */\n', 'library GElasticTokenManager\n', '{\n', '\tusing SafeMath for uint256;\n', '\tusing GElasticTokenManager for GElasticTokenManager.Self;\n', '\n', '\tuint256 constant MAXIMUM_REBASE_TREASURY_MINT_PERCENT = 25e16; // 25%\n', '\n', '\tuint256 constant DEFAULT_REBASE_MINIMUM_INTERVAL = 24 hours;\n', '\tuint256 constant DEFAULT_REBASE_WINDOW_OFFSET = 17 hours; // 5PM UTC\n', '\tuint256 constant DEFAULT_REBASE_WINDOW_LENGTH = 1 hours;\n', '\tuint256 constant DEFAULT_REBASE_MINIMUM_DEVIATION = 5e16; // 5%\n', '\tuint256 constant DEFAULT_REBASE_DAMPENING_FACTOR = 10; // 10x to reach 100%\n', '\tuint256 constant DEFAULT_REBASE_TREASURY_MINT_PERCENT = 10e16; // 10%\n', '\n', '\tstruct Self {\n', '\t\taddress treasury;\n', '\n', '\t\tuint256 rebaseMinimumDeviation;\n', '\t\tuint256 rebaseDampeningFactor;\n', '\t\tuint256 rebaseTreasuryMintPercent;\n', '\n', '\t\tuint256 rebaseMinimumInterval;\n', '\t\tuint256 rebaseWindowOffset;\n', '\t\tuint256 rebaseWindowLength;\n', '\n', '\t\tbool rebaseActive;\n', '\t\tuint256 lastRebaseTime;\n', '\t\tuint256 epoch;\n', '\t}\n', '\n', '\tfunction init(Self storage _self, address _treasury) public\n', '\t{\n', '\t\t_self.treasury = _treasury;\n', '\n', '\t\t_self.rebaseMinimumDeviation = DEFAULT_REBASE_MINIMUM_DEVIATION;\n', '\t\t_self.rebaseDampeningFactor = DEFAULT_REBASE_DAMPENING_FACTOR;\n', '\t\t_self.rebaseTreasuryMintPercent = DEFAULT_REBASE_TREASURY_MINT_PERCENT;\n', '\n', '\t\t_self.rebaseMinimumInterval = DEFAULT_REBASE_MINIMUM_INTERVAL;\n', '\t\t_self.rebaseWindowOffset = DEFAULT_REBASE_WINDOW_OFFSET;\n', '\t\t_self.rebaseWindowLength = DEFAULT_REBASE_WINDOW_LENGTH;\n', '\n', '\t\t_self.rebaseActive = false;\n', '\t\t_self.lastRebaseTime = 0;\n', '\t\t_self.epoch = 0;\n', '\t}\n', '\n', '\tfunction activateRebase(Self storage _self) public\n', '\t{\n', '\t\trequire(!_self.rebaseActive, "already active");\n', '\t\t_self.rebaseActive = true;\n', '\t\t_self.lastRebaseTime = now.sub(now.mod(_self.rebaseMinimumInterval)).add(_self.rebaseWindowOffset);\n', '\t}\n', '\n', '\tfunction setTreasury(Self storage _self, address _treasury) public\n', '\t{\n', '\t\trequire(_treasury != address(0), "invalid treasury");\n', '\t\t_self.treasury = _treasury;\n', '\t}\n', '\n', '\tfunction setRebaseMinimumDeviation(Self storage _self, uint256 _rebaseMinimumDeviation) public\n', '\t{\n', '\t\trequire(_rebaseMinimumDeviation > 0, "invalid minimum deviation");\n', '\t\t_self.rebaseMinimumDeviation = _rebaseMinimumDeviation;\n', '\t}\n', '\n', '\tfunction setRebaseDampeningFactor(Self storage _self, uint256 _rebaseDampeningFactor) public\n', '\t{\n', '\t\trequire(_rebaseDampeningFactor > 0, "invalid dampening factor");\n', '\t\t_self.rebaseDampeningFactor = _rebaseDampeningFactor;\n', '\t}\n', '\n', '\tfunction setRebaseTreasuryMintPercent(Self storage _self, uint256 _rebaseTreasuryMintPercent) public\n', '\t{\n', '\t\trequire(_rebaseTreasuryMintPercent <= MAXIMUM_REBASE_TREASURY_MINT_PERCENT, "invalid percent");\n', '\t\t_self.rebaseTreasuryMintPercent = _rebaseTreasuryMintPercent;\n', '\t}\n', '\n', '\tfunction setRebaseTimingParameters(Self storage _self, uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength) public\n', '\t{\n', '\t\trequire(_rebaseMinimumInterval > 0, "invalid interval");\n', '\t\trequire(_rebaseWindowOffset.add(_rebaseWindowLength) <= _rebaseMinimumInterval, "invalid window");\n', '\t\t_self.rebaseMinimumInterval = _rebaseMinimumInterval;\n', '\t\t_self.rebaseWindowOffset = _rebaseWindowOffset;\n', '\t\t_self.rebaseWindowLength = _rebaseWindowLength;\n', '\t}\n', '\n', '\tfunction rebaseAvailable(Self storage _self) public view returns (bool _available)\n', '\t{\n', '\t\treturn _self._rebaseAvailable();\n', '\t}\n', '\n', '\tfunction rebase(Self storage _self, uint256 _exchangeRate, uint256 _totalSupply) public returns (uint256 _delta, bool _positive, uint256 _mintAmount)\n', '\t{\n', '\t\trequire(_self._rebaseAvailable(), "not available");\n', '\n', '\t\t_self.lastRebaseTime = now.sub(now.mod(_self.rebaseMinimumInterval)).add(_self.rebaseWindowOffset);\n', '\t\t_self.epoch = _self.epoch.add(1);\n', '\n', '\t\t_positive = _exchangeRate > 1e18;\n', '\n', '\t\tuint256 _deviation = _positive ? _exchangeRate.sub(1e18) : uint256(1e18).sub(_exchangeRate);\n', '\t\tif (_deviation < _self.rebaseMinimumDeviation) {\n', '\t\t\t_deviation = 0;\n', '\t\t\t_positive = false;\n', '\t\t}\n', '\n', '\t\t_delta = _deviation.div(_self.rebaseDampeningFactor);\n', '\n', '\t\t_mintAmount = 0;\n', '\t\tif (_positive) {\n', '\t\t\tuint256 _mintPercent = _delta.mul(_self.rebaseTreasuryMintPercent).div(1e18);\n', '\t\t\t_delta = _delta.sub(_mintPercent);\n', '\t\t\t_mintAmount = _totalSupply.mul(_mintPercent).div(1e18);\n', '\t\t}\n', '\n', '\t\treturn (_delta, _positive, _mintAmount);\n', '\t}\n', '\n', '\tfunction _rebaseAvailable(Self storage _self) internal view returns (bool _available)\n', '\t{\n', '\t\tif (!_self.rebaseActive) return false;\n', '\t\tif (now < _self.lastRebaseTime.add(_self.rebaseMinimumInterval)) return false;\n', '\t\tuint256 _offset = now.mod(_self.rebaseMinimumInterval);\n', '\t\treturn _self.rebaseWindowOffset <= _offset && _offset < _self.rebaseWindowOffset.add(_self.rebaseWindowLength);\n', '\t}\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/FullMath.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n', '// license is CC-BY-4.0\n', 'library FullMath {\n', '    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n', '        uint256 mm = mulmod(x, y, uint256(-1));\n', '        l = x * y;\n', '        h = mm - l;\n', '        if (mm < l) h -= 1;\n', '    }\n', '\n', '    function fullDiv(\n', '        uint256 l,\n', '        uint256 h,\n', '        uint256 d\n', '    ) private pure returns (uint256) {\n', '        uint256 pow2 = d & -d;\n', '        d /= pow2;\n', '        l /= pow2;\n', '        l += h * ((-pow2) / pow2 + 1);\n', '        uint256 r = 1;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        return l * r;\n', '    }\n', '\n', '    function mulDiv(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 d\n', '    ) internal pure returns (uint256) {\n', '        (uint256 l, uint256 h) = fullMul(x, y);\n', '\n', '        uint256 mm = mulmod(x, y, d);\n', '        if (mm > l) h -= 1;\n', '        l -= mm;\n', '\n', '        if (h == 0) return l / d;\n', '\n', "        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n", '        return fullDiv(l, h, d);\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/Babylonian.sol\n', '\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    // credit for this implementation goes to\n', '    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '    function sqrt(uint256 x) internal pure returns (uint256) {\n', '        if (x == 0) return 0;\n', '        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n', '        // however that code costs significantly more gas\n', '        uint256 xx = x;\n', '        uint256 r = 1;\n', '        if (xx >= 0x100000000000000000000000000000000) {\n', '            xx >>= 128;\n', '            r <<= 64;\n', '        }\n', '        if (xx >= 0x10000000000000000) {\n', '            xx >>= 64;\n', '            r <<= 32;\n', '        }\n', '        if (xx >= 0x100000000) {\n', '            xx >>= 32;\n', '            r <<= 16;\n', '        }\n', '        if (xx >= 0x10000) {\n', '            xx >>= 16;\n', '            r <<= 8;\n', '        }\n', '        if (xx >= 0x100) {\n', '            xx >>= 8;\n', '            r <<= 4;\n', '        }\n', '        if (xx >= 0x10) {\n', '            xx >>= 4;\n', '            r <<= 2;\n', '        }\n', '        if (xx >= 0x8) {\n', '            r <<= 1;\n', '        }\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1; // Seven iterations should be enough\n', '        uint256 r1 = x / r;\n', '        return (r < r1 ? r : r1);\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/BitMath.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'library BitMath {\n', '    // returns the 0 indexed position of the most significant bit of the input x\n', '    // s.t. x >= 2**msb and x < 2**(msb+1)\n', '    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::mostSignificantBit: zero');\n", '\n', '        if (x >= 0x100000000000000000000000000000000) {\n', '            x >>= 128;\n', '            r += 128;\n', '        }\n', '        if (x >= 0x10000000000000000) {\n', '            x >>= 64;\n', '            r += 64;\n', '        }\n', '        if (x >= 0x100000000) {\n', '            x >>= 32;\n', '            r += 32;\n', '        }\n', '        if (x >= 0x10000) {\n', '            x >>= 16;\n', '            r += 16;\n', '        }\n', '        if (x >= 0x100) {\n', '            x >>= 8;\n', '            r += 8;\n', '        }\n', '        if (x >= 0x10) {\n', '            x >>= 4;\n', '            r += 4;\n', '        }\n', '        if (x >= 0x4) {\n', '            x >>= 2;\n', '            r += 2;\n', '        }\n', '        if (x >= 0x2) r += 1;\n', '    }\n', '\n', '    // returns the 0 indexed position of the least significant bit of the input x\n', '    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\n', '    // i.e. the bit at the index is set and the mask of all lower bits is 0\n', '    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::leastSignificantBit: zero');\n", '\n', '        r = 255;\n', '        if (x & uint128(-1) > 0) {\n', '            r -= 128;\n', '        } else {\n', '            x >>= 128;\n', '        }\n', '        if (x & uint64(-1) > 0) {\n', '            r -= 64;\n', '        } else {\n', '            x >>= 64;\n', '        }\n', '        if (x & uint32(-1) > 0) {\n', '            r -= 32;\n', '        } else {\n', '            x >>= 32;\n', '        }\n', '        if (x & uint16(-1) > 0) {\n', '            r -= 16;\n', '        } else {\n', '            x >>= 16;\n', '        }\n', '        if (x & uint8(-1) > 0) {\n', '            r -= 8;\n', '        } else {\n', '            x >>= 8;\n', '        }\n', '        if (x & 0xf > 0) {\n', '            r -= 4;\n', '        } else {\n', '            x >>= 4;\n', '        }\n', '        if (x & 0x3 > 0) {\n', '            r -= 2;\n', '        } else {\n', '            x >>= 2;\n', '        }\n', '        if (x & 0x1 > 0) r -= 1;\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 public constant RESOLUTION = 112;\n', '    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\n', '    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\n', '    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n', '        uint256 z = 0;\n', "        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\n", '        return uq144x112(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by an int and decode, returning an int\n', '    // reverts on overflow\n', '    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\n', '        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\n', "        require(z < 2**255, 'FixedPoint::muli: overflow');\n", '        return y < 0 ? -int256(z) : int256(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    // lossy\n', '    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', '        if (self._x == 0 || other._x == 0) {\n', '            return uq112x112(0);\n', '        }\n', '        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\n', '        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\n', '\n', '        // partial products\n', '        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\n', '        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\n', '        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\n', '        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\n', '\n', '        // so the bit shift does not overflow\n', "        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\n", '\n', '        // this cannot exceed 256 bits, all values are 224 bits\n', '        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\n', '\n', '        // so the cast does not overflow\n', "        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\n", '\n', '        return uq112x112(uint224(sum));\n', '    }\n', '\n', '    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', "        require(other._x > 0, 'FixedPoint::divuq: division by zero');\n", '        if (self._x == other._x) {\n', '            return uq112x112(uint224(Q112));\n', '        }\n', '        if (self._x <= uint144(-1)) {\n', '            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\n', "            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '            return uq112x112(uint224(value));\n', '        }\n', '\n', '        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\n', "        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '        return uq112x112(uint224(result));\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // can be lossy\n', '    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n', "        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n", '        if (numerator == 0) return FixedPoint.uq112x112(0);\n', '\n', '        if (numerator <= uint144(-1)) {\n', '            uint256 result = (numerator << RESOLUTION) / denominator;\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        } else {\n', '            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        }\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    // reverts on overflow\n', '    // lossy\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\n", "        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    // lossy between 0/1 and 40 bits\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        if (self._x <= uint144(-1)) {\n', '            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n', '        }\n', '\n', '        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n', '        safeShiftBits -= safeShiftBits % 2;\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interop/UniswapV2.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Minimal set of declarations for Uniswap V2 interoperability.\n', ' */\n', 'interface Factory\n', '{\n', '\tfunction getPair(address _tokenA, address _tokenB) external view returns (address _pair);\n', '\tfunction createPair(address _tokenA, address _tokenB) external returns (address _pair);\n', '}\n', '\n', 'interface PoolToken is IERC20\n', '{\n', '}\n', '\n', 'interface Pair is PoolToken\n', '{\n', '\tfunction token0() external view returns (address _token0);\n', '\tfunction token1() external view returns (address _token1);\n', '\tfunction price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);\n', '\tfunction price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);\n', '\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\n', '\tfunction mint(address _to) external returns (uint256 _liquidity);\n', '\tfunction sync() external;\n', '}\n', '\n', 'interface Router01\n', '{\n', '\tfunction WETH() external pure returns (address _token);\n', '\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\n', '\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\n', '\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\n', '\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\n', '\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\n', '}\n', '\n', 'interface Router02 is Router01\n', '{\n', '}\n', '\n', '// File: contracts/GPriceOracle.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev This library implements a TWAP oracle on Uniswap V2. Based on\n', ' * https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\n', ' */\n', 'library GPriceOracle\n', '{\n', '\tusing FixedPoint for FixedPoint.uq112x112;\n', '\tusing FixedPoint for FixedPoint.uq144x112;\n', '\tusing GPriceOracle for GPriceOracle.Self;\n', '\n', '\tuint256 constant DEFAULT_MINIMUM_INTERVAL = 23 hours;\n', '\n', '\tstruct Self {\n', '\t\taddress pair;\n', '\t\tbool use0;\n', '\n', '\t\tuint256 minimumInterval;\n', '\n', '\t\tuint256 priceCumulativeLast;\n', '\t\tuint32 blockTimestampLast;\n', '\t\tFixedPoint.uq112x112 priceAverage;\n', '\t}\n', '\n', '\tfunction init(Self storage _self) public\n', '\t{\n', '\t\t_self.pair = address(0);\n', '\n', '\t\t_self.minimumInterval = DEFAULT_MINIMUM_INTERVAL;\n', '\t}\n', '\n', '\tfunction active(Self storage _self) public view returns (bool _isActive)\n', '\t{\n', '\t\treturn _self._active();\n', '\t}\n', '\n', '\tfunction activate(Self storage _self, address _pair, bool _use0) public\n', '\t{\n', '\t\trequire(!_self._active(), "already active");\n', '\t\trequire(_pair != address(0), "invalid pair");\n', '\n', '\t\t_self.pair = _pair;\n', '\t\t_self.use0 = _use0;\n', '\n', '\t\t_self.priceCumulativeLast = _use0 ? Pair(_pair).price0CumulativeLast() : Pair(_pair).price1CumulativeLast();\n', '\n', '\t\tuint112 reserve0;\n', '\t\tuint112 reserve1;\n', '\t\t(reserve0, reserve1, _self.blockTimestampLast) = Pair(_pair).getReserves();\n', '\t\trequire(reserve0 > 0 && reserve1 > 0, "no reserves"); // ensure that there\'s liquidity in the pair\n', '\t}\n', '\n', '\tfunction changeMinimumInterval(Self storage _self, uint256 _minimumInterval) public\n', '\t{\n', '\t\trequire(_minimumInterval > 0, "invalid interval");\n', '\t\t_self.minimumInterval = _minimumInterval;\n', '\t}\n', '\n', '\tfunction consultLastPrice(Self storage _self, uint256 _amountIn) public view returns (uint256 _amountOut)\n', '\t{\n', '\t\trequire(_self._active(), "not active");\n', '\n', '\t\treturn _self.priceAverage.mul(_amountIn).decode144();\n', '\t}\n', '\n', '\tfunction consultCurrentPrice(Self storage _self, uint256 _amountIn) public view returns (uint256 _amountOut)\n', '\t{\n', '\t\trequire(_self._active(), "not active");\n', '\n', '\t\t(,, FixedPoint.uq112x112 memory _priceAverage) = _self._estimatePrice(false);\n', '\t\treturn _priceAverage.mul(_amountIn).decode144();\n', '\t}\n', '\n', '\tfunction updatePrice(Self storage _self) public\n', '\t{\n', '\t\trequire(_self._active(), "not active");\n', '\n', '\t\t(_self.priceCumulativeLast, _self.blockTimestampLast, _self.priceAverage) = _self._estimatePrice(true);\n', '\t}\n', '\n', '\tfunction _active(Self storage _self) internal view returns (bool _isActive)\n', '\t{\n', '\t\treturn _self.pair != address(0);\n', '\t}\n', '\n', '\tfunction _estimatePrice(Self storage _self, bool _enforceTimeElapsed) internal view returns (uint256 _priceCumulative, uint32 _blockTimestamp, FixedPoint.uq112x112 memory _priceAverage)\n', '\t{\n', '\t\tuint256 _price0Cumulative;\n', '\t\tuint256 _price1Cumulative;\n', '\t\t(_price0Cumulative, _price1Cumulative, _blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(_self.pair);\n', '\t\t_priceCumulative = _self.use0 ? _price0Cumulative : _price1Cumulative;\n', '\n', '\t\tuint32 _timeElapsed = _blockTimestamp - _self.blockTimestampLast; // overflow is desired\n', '\n', '\t\t// ensure that at least one full interval has passed since the last update\n', '\t\tif (_enforceTimeElapsed) {\n', '\t\t\trequire(_timeElapsed >= _self.minimumInterval, "minimum interval not elapsed");\n', '\t\t}\n', '\n', '\t\t// overflow is desired, casting never truncates\n', '\t\t// cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '\t\t_priceAverage = FixedPoint.uq112x112(uint224((_priceCumulative - _self.priceCumulativeLast) / _timeElapsed));\n', '\t}\n', '}\n', '\n', '// File: contracts/modules/Math.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library implements auxiliary math definitions.\n', ' */\n', 'library Math\n', '{\n', '\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n', '\t{\n', '\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\n', '\t}\n', '\n', '\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n', '\t{\n', '\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\n', '\t}\n', '}\n', '\n', '// File: contracts/GElasticToken.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice This contract implements an ERC20 compatible elastic token that\n', ' * rebases according to the TWAP of another token. Inspired by AMPL and YAM.\n', ' */\n', 'contract GElasticToken is ElasticERC20, Ownable, ReentrancyGuard, GElastic\n', '{\n', '\tusing SafeMath for uint256;\n', '\tusing GElasticTokenManager for GElasticTokenManager.Self;\n', '\tusing GPriceOracle for GPriceOracle.Self;\n', '\tusing Executor for Executor.Target[];\n', '\n', '\taddress public immutable override referenceToken;\n', '\n', '\tGElasticTokenManager.Self etm;\n', '\tGPriceOracle.Self oracle;\n', '\n', '\tExecutor.Target[] public targets;\n', '\n', '\tmodifier onlyEOA()\n', '\t{\n', '\t\trequire(tx.origin == _msgSender(), "not an externally owned account");\n', '\t\t_;\n', '\t}\n', '\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _referenceToken, uint256 _initialSupply)\n', '\t\tElasticERC20(_name, _symbol) public\n', '\t{\n', '\t\taddress _treasury = msg.sender;\n', '\t\t_setupDecimals(_decimals);\n', '\t\tassert(_referenceToken != address(0));\n', '\t\treferenceToken = _referenceToken;\n', '\t\tetm.init(_treasury);\n', '\t\toracle.init();\n', '\t\t_mint(_treasury, _initialSupply);\n', '\t}\n', '\n', '\tfunction treasury() external view override returns (address _treasury)\n', '\t{\n', '\t\treturn etm.treasury;\n', '\t}\n', '\n', '\tfunction rebaseMinimumDeviation() external view override returns (uint256 _rebaseMinimumDeviation)\n', '\t{\n', '\t\treturn etm.rebaseMinimumDeviation;\n', '\t}\n', '\n', '\tfunction rebaseDampeningFactor() external view override returns (uint256 _rebaseDampeningFactor)\n', '\t{\n', '\t\treturn etm.rebaseDampeningFactor;\n', '\t}\n', '\n', '\tfunction rebaseTreasuryMintPercent() external view override returns (uint256 _rebaseTreasuryMintPercent)\n', '\t{\n', '\t\treturn etm.rebaseTreasuryMintPercent;\n', '\t}\n', '\n', '\tfunction rebaseTimingParameters() external view override returns (uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength)\n', '\t{\n', '\t\treturn (etm.rebaseMinimumInterval, etm.rebaseWindowOffset, etm.rebaseWindowLength);\n', '\t}\n', '\n', '\tfunction rebaseAvailable() external view override returns (bool _rebaseAvailable)\n', '\t{\n', '\t\treturn etm.rebaseAvailable();\n', '\t}\n', '\n', '\tfunction rebaseActive() external view override returns (bool _rebaseActive)\n', '\t{\n', '\t\treturn etm.rebaseActive;\n', '\t}\n', '\n', '\tfunction lastRebaseTime() external view override returns (uint256 _lastRebaseTime)\n', '\t{\n', '\t\treturn etm.lastRebaseTime;\n', '\t}\n', '\n', '\tfunction epoch() external view override returns (uint256 _epoch)\n', '\t{\n', '\t\treturn etm.epoch;\n', '\t}\n', '\n', '\tfunction lastExchangeRate() external view override returns (uint256 _exchangeRate)\n', '\t{\n', '\t\treturn oracle.consultLastPrice(10 ** uint256(decimals()));\n', '\t}\n', '\n', '\tfunction currentExchangeRate() external view override returns (uint256 _exchangeRate)\n', '\t{\n', '\t\treturn oracle.consultCurrentPrice(10 ** uint256(decimals()));\n', '\t}\n', '\n', '\tfunction pair() external view override returns (address _pair)\n', '\t{\n', '\t\treturn oracle.pair;\n', '\t}\n', '\n', '\tfunction rebase() external override onlyEOA nonReentrant\n', '\t{\n', '\t\toracle.updatePrice();\n', '\n', '\t\tuint256 _exchangeRate = oracle.consultLastPrice(10 ** uint256(decimals()));\n', '\n', '\t\tuint256 _totalSupply = totalSupply();\n', '\n', '\t\t(uint256 _delta, bool _positive, uint256 _mintAmount) = etm.rebase(_exchangeRate, _totalSupply);\n', '\n', '\t\t_rebase(etm.epoch, _delta, _positive);\n', '\n', '\t\tif (_mintAmount > 0) {\n', '\t\t\t_mint(etm.treasury, _mintAmount);\n', '\t\t}\n', '\n', '\t\t// updates cached reserve balances wherever necessary\n', '\t\tPair(oracle.pair).sync();\n', '\t\ttargets.executeAll();\n', '\t}\n', '\n', '\tfunction activateOracle(address _pair) external override onlyOwner nonReentrant\n', '\t{\n', '\t\taddress _token0 = Pair(_pair).token0();\n', '\t\taddress _token1 = Pair(_pair).token1();\n', '\t\trequire(_token0 == address(this) && _token1 == referenceToken || _token1 == address(this) && _token0 == referenceToken, "invalid pair");\n', '\t\toracle.activate(_pair, _token0 == address(this));\n', '\t}\n', '\n', '\tfunction activateRebase() external override onlyOwner nonReentrant\n', '\t{\n', '\t\trequire(oracle.active(), "not available");\n', '\t\tetm.activateRebase();\n', '\t}\n', '\n', '\tfunction setTreasury(address _newTreasury) external override onlyOwner nonReentrant\n', '\t{\n', '\t\taddress _oldTreasury = etm.treasury;\n', '\t\tetm.setTreasury(_newTreasury);\n', '\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\n', '\t}\n', '\n', '\tfunction setRebaseMinimumDeviation(uint256 _newRebaseMinimumDeviation) external override onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _oldRebaseMinimumDeviation = etm.rebaseMinimumDeviation;\n', '\t\tetm.setRebaseMinimumDeviation(_newRebaseMinimumDeviation);\n', '\t\temit ChangeRebaseMinimumDeviation(_oldRebaseMinimumDeviation, _newRebaseMinimumDeviation);\n', '\t}\n', '\n', '\tfunction setRebaseDampeningFactor(uint256 _newRebaseDampeningFactor) external override onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _oldRebaseDampeningFactor = etm.rebaseDampeningFactor;\n', '\t\tetm.setRebaseDampeningFactor(_newRebaseDampeningFactor);\n', '\t\temit ChangeRebaseDampeningFactor(_oldRebaseDampeningFactor, _newRebaseDampeningFactor);\n', '\t}\n', '\n', '\tfunction setRebaseTreasuryMintPercent(uint256 _newRebaseTreasuryMintPercent) external override onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _oldRebaseTreasuryMintPercent = etm.rebaseTreasuryMintPercent;\n', '\t\tetm.setRebaseTreasuryMintPercent(_newRebaseTreasuryMintPercent);\n', '\t\temit ChangeRebaseTreasuryMintPercent(_oldRebaseTreasuryMintPercent, _newRebaseTreasuryMintPercent);\n', '\t}\n', '\n', '\tfunction setRebaseTimingParameters(uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength) external override onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _oldRebaseMinimumInterval = etm.rebaseMinimumInterval;\n', '\t\tuint256 _oldRebaseWindowOffset = etm.rebaseWindowOffset;\n', '\t\tuint256 _oldRebaseWindowLength = etm.rebaseWindowLength;\n', '\t\tetm.setRebaseTimingParameters(_newRebaseMinimumInterval, _newRebaseWindowOffset, _newRebaseWindowLength);\n', '\t\toracle.changeMinimumInterval(_newRebaseMinimumInterval.sub(_newRebaseWindowLength));\n', '\t\temit ChangeRebaseTimingParameters(_oldRebaseMinimumInterval, _oldRebaseWindowOffset, _oldRebaseWindowLength, _newRebaseMinimumInterval, _newRebaseWindowOffset, _newRebaseWindowLength);\n', '\t}\n', '\n', '\tfunction addPostRebaseTarget(address _to, bytes memory _data) external override onlyOwner nonReentrant\n', '\t{\n', '\t\t_addPostRebaseTarget(_to, _data);\n', '\t}\n', '\n', '\tfunction removePostRebaseTarget(uint256 _index) external override onlyOwner nonReentrant\n', '\t{\n', '\t\t_removePostRebaseTarget(_index);\n', '\t}\n', '\n', '\tfunction addBalancerPostRebaseTarget(address _pool) external onlyOwner nonReentrant\n', '\t{\n', '\t\t_addPostRebaseTarget(_pool, abi.encodeWithSignature("gulp(address)", address(this)));\n', '\t}\n', '\n', '\tfunction addUniswapV2PostRebaseTarget(address _pair) external onlyOwner nonReentrant\n', '\t{\n', '\t\t_addPostRebaseTarget(_pair, abi.encodeWithSignature("sync()"));\n', '\t}\n', '\n', '\tfunction _addPostRebaseTarget(address _to, bytes memory _data) internal\n', '\t{\n', '\t\ttargets.addTarget(_to, _data);\n', '\t\temit AddPostRebaseTarget(_to, _data);\n', '\t}\n', '\n', '\tfunction _removePostRebaseTarget(uint256 _index) internal\n', '\t{\n', '\t\tExecutor.Target storage _target = targets[_index];\n', '\t\taddress _to = _target.to;\n', '\t\tbytes memory _data = _target.data;\n', '\t\ttargets.removeTarget(_index);\n', '\t\temit RemovePostRebaseTarget(_to, _data);\n', '\t}\n', '\n', '\tfunction _rebase(uint256 _epoch, uint256 _delta, bool _positive) internal virtual\n', '\t{\n', '\t\tuint256 _oldScalingFactor = scalingFactor();\n', '\t\tuint256 _newScalingFactor;\n', '\t\tif (_delta == 0) {\n', '\t\t\t_newScalingFactor = _oldScalingFactor;\n', '\t\t} else {\n', '\t\t\tif (_positive) {\n', '\t\t\t\t_newScalingFactor = _oldScalingFactor.mul(uint256(1e18).add(_delta)).div(1e18);\n', '\t\t\t} else {\n', '\t\t\t\t_newScalingFactor = _oldScalingFactor.mul(uint256(1e18).sub(_delta)).div(1e18);\n', '\t\t\t}\n', '\t\t}\n', '\t\tif (_newScalingFactor > _oldScalingFactor) {\n', '\t\t\t_newScalingFactor = Math._min(_newScalingFactor, maxScalingFactor());\n', '\t\t}\n', '\t\t_setScalingFactor(_newScalingFactor);\n', '\t\temit Rebase(_epoch, _oldScalingFactor, _newScalingFactor);\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/GLPMining.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This interface exposes the base functionality of GLPMiningToken.\n', ' */\n', 'interface GLPMining\n', '{\n', '\t// view functions\n', '\tfunction reserveToken() external view returns (address _reserveToken);\n', '\tfunction rewardsToken() external view returns (address _rewardsToken);\n', '\tfunction treasury() external view returns (address _treasury);\n', '\tfunction performanceFee() external view returns (uint256 _performanceFee);\n', '\tfunction rewardRatePerWeek() external view returns (uint256 _rewardRatePerWeek);\n', '\tfunction calcSharesFromCost(uint256 _cost) external view returns (uint256 _shares);\n', '\tfunction calcCostFromShares(uint256 _shares) external view returns (uint256 _cost);\n', '\tfunction calcSharesFromTokenAmount(address _token, uint256 _amount) external view returns (uint256 _shares);\n', '\tfunction calcTokenAmountFromShares(address _token, uint256 _shares) external view returns (uint256 _amount);\n', '\tfunction totalReserve() external view returns (uint256 _totalReserve);\n', '\tfunction rewardInfo() external view returns (uint256 _lockedReward, uint256 _unlockedReward, uint256 _rewardPerBlock);\n', '\tfunction pendingFees() external view returns (uint256 _feeShares);\n', '\n', '\t// open functions\n', '\tfunction deposit(uint256 _cost) external;\n', '\tfunction withdraw(uint256 _shares) external;\n', '\tfunction depositToken(address _token, uint256 _amount, uint256 _minShares) external;\n', '\tfunction withdrawToken(address _token, uint256 _shares, uint256 _minAmount) external;\n', '\tfunction gulpRewards(uint256 _minCost) external;\n', '\tfunction gulpFees() external;\n', '\n', '\t// priviledged functions\n', '\tfunction setTreasury(address _treasury) external;\n', '\tfunction setPerformanceFee(uint256 _performanceFee) external;\n', '\tfunction setRewardRatePerWeek(uint256 _rewardRatePerWeek) external;\n', '\n', '\t// emitted events\n', '\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\n', '\tevent ChangePerformanceFee(uint256 _oldPerformanceFee, uint256 _newPerformanceFee);\n', '\tevent ChangeRewardRatePerWeek(uint256 _oldRewardRatePerWeek, uint256 _newRewardRatePerWeek);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/modules/Transfers.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev This library abstracts ERC-20 operations in the context of the current\n', ' * contract.\n', ' */\n', 'library Transfers\n', '{\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\t/**\n', '\t * @dev Retrieves a given ERC-20 token balance for the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @return _balance The current contract balance of the given ERC-20 token.\n', '\t */\n', '\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\n', '\t{\n', '\t\treturn IERC20(_token).balanceOf(address(this));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _to The spender address.\n', '\t * @param _amount The exact spending allowance amount.\n', '\t */\n', '\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\n', '\t\tif (_allowance > _amount) {\n', '\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\n', '\t\t}\n', '\t\telse\n', '\t\tif (_allowance < _amount) {\n', '\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer a given ERC-20 token amount into the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _from The source address.\n', '\t * @param _amount The amount to be transferred.\n', '\t */\n', '\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\n', '\t{\n', '\t\tif (_amount == 0) return;\n', '\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer a given ERC-20 token amount from the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _to The target address.\n', '\t * @param _amount The amount to be transferred.\n', '\t */\n', '\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tif (_amount == 0) return;\n', '\t\tIERC20(_token).safeTransfer(_to, _amount);\n', '\t}\n', '}\n', '\n', '// File: contracts/network/$.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library is provided for convenience. It is the single source for\n', ' *      the current network and all related hardcoded contract addresses.\n', ' */\n', 'library $\n', '{\n', '\taddress constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n', '\n', '\taddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '\taddress constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\n', '\taddress constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '}\n', '\n', '// File: contracts/modules/UniswapV2LiquidityPoolAbstraction.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev This library provides functionality to facilitate adding/removing\n', ' * single-asset liquidity to/from a Uniswap V2 pool.\n', ' */\n', 'library UniswapV2LiquidityPoolAbstraction\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tfunction _estimateJoinPool(address _pair, address _token, uint256 _amount) internal view returns (uint256 _shares)\n', '\t{\n', '\t\tif (_amount == 0) return 0;\n', '\t\taddress _router = $.UniswapV2_ROUTER02;\n', '\t\taddress _token0 = Pair(_pair).token0();\n', '\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\n', '\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\n', '\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\n', '\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\n', '\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_balance, _amount);\n', '\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\n', '\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\n', '\t\tuint256 _otherAmount = Router02(_router).getAmountOut(_swapAmount, _balance, _otherBalance);\n', '\t\t_shares = Math._min(_totalSupply.mul(_leftAmount) / _balance.add(_swapAmount), _totalSupply.mul(_otherAmount) / _otherBalance.sub(_otherAmount));\n', '\t\treturn _shares;\n', '\t}\n', '\n', '\tfunction _estimateExitPool(address _pair, address _token, uint256 _shares) internal view returns (uint256 _amount)\n', '\t{\n', '\t\tif (_shares == 0) return 0;\n', '\t\taddress _router = $.UniswapV2_ROUTER02;\n', '\t\taddress _token0 = Pair(_pair).token0();\n', '\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\n', '\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\n', '\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\n', '\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\n', '\t\tuint256 _baseAmount = _balance.mul(_shares) / _totalSupply;\n', '\t\tuint256 _swapAmount = _otherBalance.mul(_shares) / _totalSupply;\n', '\t\tuint256 _additionalAmount = Router02(_router).getAmountOut(_swapAmount, _otherBalance.sub(_swapAmount), _balance.sub(_baseAmount));\n', '\t\t_amount = _baseAmount.add(_additionalAmount);\n', '\t\treturn _amount;\n', '\t}\n', '\n', '\tfunction _joinPool(address _pair, address _token, uint256 _amount, uint256 _minShares) internal returns (uint256 _shares)\n', '\t{\n', '\t\tif (_amount == 0) return 0;\n', '\t\taddress _router = $.UniswapV2_ROUTER02;\n', '\t\taddress _token0 = Pair(_pair).token0();\n', '\t\taddress _token1 = Pair(_pair).token1();\n', '\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\n', '\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\n', '\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_token == _token0 ? _reserve0 : _reserve1, _amount);\n', '\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\n', '\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\n', '\t\tTransfers._approveFunds(_token, _router, _amount);\n', '\t\taddress[] memory _path = new address[](2);\n', '\t\t_path[0] = _token;\n', '\t\t_path[1] = _otherToken;\n', '\t\tuint256 _otherAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\n', '\t\tTransfers._approveFunds(_otherToken, _router, _otherAmount);\n', '\t\t(,,_shares) = Router02(_router).addLiquidity(_token, _otherToken, _leftAmount, _otherAmount, 1, 1, address(this), uint256(-1));\n', '\t\trequire(_shares >= _minShares, "high slippage");\n', '\t\treturn _shares;\n', '\t}\n', '\n', '\tfunction _exitPool(address _pair, address _token, uint256 _shares, uint256 _minAmount) internal returns (uint256 _amount)\n', '\t{\n', '\t\tif (_shares == 0) return 0;\n', '\t\taddress _router = $.UniswapV2_ROUTER02;\n', '\t\taddress _token0 = Pair(_pair).token0();\n', '\t\taddress _token1 = Pair(_pair).token1();\n', '\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\n', '\t\tTransfers._approveFunds(_pair, _router, _shares);\n', '\t\t(uint256 _baseAmount, uint256 _swapAmount) = Router02(_router).removeLiquidity(_token, _otherToken, _shares, 1, 1, address(this), uint256(-1));\n', '\t\tTransfers._approveFunds(_otherToken, _router, _swapAmount);\n', '\t\taddress[] memory _path = new address[](2);\n', '\t\t_path[0] = _otherToken;\n', '\t\t_path[1] = _token;\n', '\t\tuint256 _additionalAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\n', '\t\t_amount = _baseAmount.add(_additionalAmount);\n', '\t        require(_amount >= _minAmount, "high slippage");\n', '\t\treturn _amount;\n', '\t}\n', '\n', '\tfunction _calcSwapOutputFromInput(uint256 _reserveAmount, uint256 _inputAmount) private pure returns (uint256)\n', '\t{\n', '\t\treturn Babylonian.sqrt(_reserveAmount.mul(_inputAmount.mul(3988000).add(_reserveAmount.mul(3988009)))).sub(_reserveAmount.mul(1997)) / 1994;\n', '\t}\n', '}\n', '\n', '// File: contracts/GLPMiningToken.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice This contract implements liquidity mining for staking Uniswap V2\n', ' * shares.\n', ' */\n', 'contract GLPMiningToken is ERC20, Ownable, ReentrancyGuard, GLPMining\n', '{\n', '\tuint256 constant MAXIMUM_PERFORMANCE_FEE = 50e16; // 50%\n', '\n', '\tuint256 constant BLOCKS_PER_WEEK = 7 days / uint256(13 seconds);\n', '\tuint256 constant DEFAULT_PERFORMANCE_FEE = 10e16; // 10%\n', '\tuint256 constant DEFAULT_REWARD_RATE_PER_WEEK = 10e16; // 10%\n', '\n', '\taddress public immutable override reserveToken;\n', '\taddress public immutable override rewardsToken;\n', '\n', '\taddress public override treasury;\n', '\n', '\tuint256 public override performanceFee = DEFAULT_PERFORMANCE_FEE;\n', '\tuint256 public override rewardRatePerWeek = DEFAULT_REWARD_RATE_PER_WEEK;\n', '\n', '\tuint256 lastContractBlock = block.number;\n', '\tuint256 lastRewardPerBlock = 0;\n', '\tuint256 lastUnlockedReward = 0;\n', '\tuint256 lastLockedReward = 0;\n', '\n', '\tuint256 lastTotalSupply = 1;\n', '\tuint256 lastTotalReserve = 1;\n', '\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _reserveToken, address _rewardsToken)\n', '\t\tERC20(_name, _symbol) public\n', '\t{\n', '\t\taddress _treasury = msg.sender;\n', '\t\t_setupDecimals(_decimals);\n', '\t\tassert(_reserveToken != address(0));\n', '\t\tassert(_rewardsToken != address(0));\n', '\t\tassert(_reserveToken != _rewardsToken);\n', '\t\treserveToken = _reserveToken;\n', '\t\trewardsToken = _rewardsToken;\n', '\t\ttreasury = _treasury;\n', '\t\t// just after creation it must transfer 1 wei from reserveToken\n', '\t\t// into this contract\n', '\t\t// this must be performed manually because we cannot approve\n', '\t\t// the spending by this contract before it exists\n', '\t\t// Transfers._pullFunds(_reserveToken, _from, 1);\n', '\t\t_mint(address(this), 1);\n', '\t}\n', '\n', '\tfunction calcSharesFromCost(uint256 _cost) public view override returns (uint256 _shares)\n', '\t{\n', '\t\treturn _cost.mul(totalSupply()).div(totalReserve());\n', '\t}\n', '\n', '\tfunction calcCostFromShares(uint256 _shares) public view override returns (uint256 _cost)\n', '\t{\n', '\t\treturn _shares.mul(totalReserve()).div(totalSupply());\n', '\t}\n', '\n', '\tfunction calcSharesFromTokenAmount(address _token, uint256 _amount) external view override returns (uint256 _shares)\n', '\t{\n', '\t\tuint256 _cost = UniswapV2LiquidityPoolAbstraction._estimateJoinPool(reserveToken, _token, _amount);\n', '\t\treturn calcSharesFromCost(_cost);\n', '\t}\n', '\n', '\tfunction calcTokenAmountFromShares(address _token, uint256 _shares) external view override returns (uint256 _amount)\n', '\t{\n', '\t\tuint256 _cost = calcCostFromShares(_shares);\n', '\t\treturn UniswapV2LiquidityPoolAbstraction._estimateExitPool(reserveToken, _token, _cost);\n', '\t}\n', '\n', '\tfunction totalReserve() public view override returns (uint256 _totalReserve)\n', '\t{\n', '\t\treturn Transfers._getBalance(reserveToken);\n', '\t}\n', '\n', '\tfunction rewardInfo() external view override returns (uint256 _lockedReward, uint256 _unlockedReward, uint256 _rewardPerBlock)\n', '\t{\n', '\t\t(, _rewardPerBlock, _unlockedReward, _lockedReward) = _calcCurrentRewards();\n', '\t\treturn (_lockedReward, _unlockedReward, _rewardPerBlock);\n', '\t}\n', '\n', '\tfunction pendingFees() external view override returns (uint256 _feeShares)\n', '\t{\n', '\t\treturn _calcFees();\n', '\t}\n', '\n', '\tfunction deposit(uint256 _cost) external override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tuint256 _shares = calcSharesFromCost(_cost);\n', '\t\tTransfers._pullFunds(reserveToken, _from, _cost);\n', '\t\t_mint(_from, _shares);\n', '\t}\n', '\n', '\tfunction withdraw(uint256 _shares) external override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tuint256 _cost = calcCostFromShares(_shares);\n', '\t\tTransfers._pushFunds(reserveToken, _from, _cost);\n', '\t\t_burn(_from, _shares);\n', '\t}\n', '\n', '\tfunction depositToken(address _token, uint256 _amount, uint256 _minShares) external override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tuint256 _minCost = calcCostFromShares(_minShares);\n', '\t\tTransfers._pullFunds(_token, _from, _amount);\n', '\t\tuint256 _cost = UniswapV2LiquidityPoolAbstraction._joinPool(reserveToken, _token, _amount, _minCost);\n', '\t\tuint256 _shares = _cost.mul(totalSupply()).div(totalReserve().sub(_cost));\n', '\t\t_mint(_from, _shares);\n', '\t}\n', '\n', '\tfunction withdrawToken(address _token, uint256 _shares, uint256 _minAmount) external override nonReentrant\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tuint256 _cost = calcCostFromShares(_shares);\n', '\t\tuint256 _amount = UniswapV2LiquidityPoolAbstraction._exitPool(reserveToken, _token, _cost, _minAmount);\n', '\t\tTransfers._pushFunds(_token, _from, _amount);\n', '\t\t_burn(_from, _shares);\n', '\t}\n', '\n', '\tfunction gulpRewards(uint256 _minCost) external override nonReentrant\n', '\t{\n', '\t\t_updateRewards();\n', '\t\tUniswapV2LiquidityPoolAbstraction._joinPool(reserveToken, rewardsToken, lastUnlockedReward, _minCost);\n', '\t\tlastUnlockedReward = 0;\n', '\t}\n', '\n', '\tfunction gulpFees() external override nonReentrant\n', '\t{\n', '\t\tuint256 _feeShares = _calcFees();\n', '\t\tif (_feeShares > 0) {\n', '\t\t\tlastTotalSupply = totalSupply();\n', '\t\t\tlastTotalReserve = totalReserve();\n', '\t\t\t_mint(treasury, _feeShares);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction setTreasury(address _newTreasury) external override onlyOwner nonReentrant\n', '\t{\n', '\t\trequire(_newTreasury != address(0), "invalid address");\n', '\t\taddress _oldTreasury = treasury;\n', '\t\ttreasury = _newTreasury;\n', '\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\n', '\t}\n', '\n', '\tfunction setPerformanceFee(uint256 _newPerformanceFee) external override onlyOwner nonReentrant\n', '\t{\n', '\t\trequire(_newPerformanceFee <= MAXIMUM_PERFORMANCE_FEE, "invalid rate");\n', '\t\tuint256 _oldPerformanceFee = performanceFee;\n', '\t\tperformanceFee = _newPerformanceFee;\n', '\t\temit ChangePerformanceFee(_oldPerformanceFee, _newPerformanceFee);\n', '\t}\n', '\n', '\tfunction setRewardRatePerWeek(uint256 _newRewardRatePerWeek) external override onlyOwner nonReentrant\n', '\t{\n', '\t\trequire(_newRewardRatePerWeek <= 1e18, "invalid rate");\n', '\t\tuint256 _oldRewardRatePerWeek = rewardRatePerWeek;\n', '\t\trewardRatePerWeek = _newRewardRatePerWeek;\n', '\t\temit ChangeRewardRatePerWeek(_oldRewardRatePerWeek, _newRewardRatePerWeek);\n', '\t}\n', '\n', '\tfunction _updateRewards() internal\n', '\t{\n', '\t\t(lastContractBlock, lastRewardPerBlock, lastUnlockedReward, lastLockedReward) = _calcCurrentRewards();\n', '\t\tuint256 _balanceReward = Transfers._getBalance(rewardsToken);\n', '\t\tuint256 _totalReward = lastLockedReward.add(lastUnlockedReward);\n', '\t\tif (_balanceReward > _totalReward) {\n', '\t\t\tuint256 _newLockedReward = _balanceReward.sub(_totalReward);\n', '\t\t\tuint256 _newRewardPerBlock = _calcRewardPerBlock(_newLockedReward);\n', '\t\t\tlastRewardPerBlock = lastRewardPerBlock.add(_newRewardPerBlock);\n', '\t\t\tlastLockedReward = lastLockedReward.add(_newLockedReward);\n', '\t\t}\n', '\t\telse\n', '\t\tif (_balanceReward < _totalReward) {\n', '\t\t\tuint256 _removedLockedReward = _totalReward.sub(_balanceReward);\n', '\t\t\tif (_removedLockedReward >= lastLockedReward) {\n', '\t\t\t\t_removedLockedReward = lastLockedReward;\n', '\t\t\t}\n', '\t\t\tuint256 _removedRewardPerBlock = _calcRewardPerBlock(_removedLockedReward);\n', '\t\t\tif (_removedLockedReward >= lastLockedReward) {\n', '\t\t\t\t_removedRewardPerBlock = lastRewardPerBlock;\n', '\t\t\t}\n', '\t\t\tlastRewardPerBlock = lastRewardPerBlock.sub(_removedRewardPerBlock);\n', '\t\t\tlastLockedReward = lastLockedReward.sub(_removedLockedReward);\n', '\t\t\tlastUnlockedReward = _balanceReward.sub(lastLockedReward);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _calcFees() internal view returns (uint256 _feeShares)\n', '\t{\n', '\t\tuint256 _oldTotalSupply = lastTotalSupply;\n', '\t\tuint256 _oldTotalReserve = lastTotalReserve;\n', '\n', '\t\tuint256 _newTotalSupply = totalSupply();\n', '\t\tuint256 _newTotalReserve = totalReserve();\n', '\n', '\t\t// calculates the profit using the following formula\n', '\t\t// ((P1 - P0) * S1 * f) / P1\n', '\t\t// where P1 = R1 / S1 and P0 = R0 / S0\n', '\t\tuint256 _positive = _oldTotalSupply.mul(_newTotalReserve);\n', '\t\tuint256 _negative = _newTotalSupply.mul(_oldTotalReserve);\n', '\t\tif (_positive > _negative) {\n', '\t\t\tuint256 _profitCost = _positive.sub(_negative).div(_oldTotalSupply);\n', '\t\t\tuint256 _feeCost = _profitCost.mul(performanceFee).div(1e18);\n', '\t\t\treturn calcSharesFromCost(_feeCost);\n', '\t\t}\n', '\n', '\t\treturn 0;\n', '\t}\n', '\n', '\tfunction _calcCurrentRewards() internal view returns (uint256 _currentContractBlock, uint256 _currentRewardPerBlock, uint256 _currentUnlockedReward, uint256 _currentLockedReward)\n', '\t{\n', '\t\tuint256 _contractBlock = lastContractBlock;\n', '\t\tuint256 _rewardPerBlock = lastRewardPerBlock;\n', '\t\tuint256 _unlockedReward = lastUnlockedReward;\n', '\t\tuint256 _lockedReward = lastLockedReward;\n', '\t\tif (_contractBlock < block.number) {\n', '\t\t\tuint256 _week = _contractBlock.div(BLOCKS_PER_WEEK);\n', '\t\t\tuint256 _offset = _contractBlock.mod(BLOCKS_PER_WEEK);\n', '\n', '\t\t\t_contractBlock = block.number;\n', '\t\t\tuint256 _currentWeek = _contractBlock.div(BLOCKS_PER_WEEK);\n', '\t\t\tuint256 _currentOffset = _contractBlock.mod(BLOCKS_PER_WEEK);\n', '\n', '\t\t\twhile (_week < _currentWeek) {\n', '\t\t\t\tuint256 _blocks = BLOCKS_PER_WEEK.sub(_offset);\n', '\t\t\t\tuint256 _reward = _blocks.mul(_rewardPerBlock);\n', '\t\t\t\t_unlockedReward = _unlockedReward.add(_reward);\n', '\t\t\t\t_lockedReward = _lockedReward.sub(_reward);\n', '\t\t\t\t_rewardPerBlock = _calcRewardPerBlock(_lockedReward);\n', '\t\t\t\t_week++;\n', '\t\t\t\t_offset = 0;\n', '\t\t\t}\n', '\n', '\t\t\tuint256 _blocks = _currentOffset.sub(_offset);\n', '\t\t\tuint256 _reward = _blocks.mul(_rewardPerBlock);\n', '\t\t\t_unlockedReward = _unlockedReward.add(_reward);\n', '\t\t\t_lockedReward = _lockedReward.sub(_reward);\n', '\t\t}\n', '\t\treturn (_contractBlock, _rewardPerBlock, _unlockedReward, _lockedReward);\n', '\t}\n', '\n', '\tfunction _calcRewardPerBlock(uint256 _lockedReward) internal view returns (uint256 _rewardPerBlock)\n', '\t{\n', '\t\treturn _lockedReward.mul(rewardRatePerWeek).div(1e18).div(BLOCKS_PER_WEEK);\n', '\t}\n', '}\n', '\n', '// File: contracts/interop/WrappedEther.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Minimal set of declarations for WETH interoperability.\n', ' */\n', 'interface WETH is IERC20\n', '{\n', '\tfunction deposit() external payable;\n', '\tfunction withdraw(uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/modules/Wrapping.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev This library abstracts Wrapped Ether operations.\n', ' */\n', 'library Wrapping\n', '{\n', '\t/**\n', '\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\n', '\t * @param _amount The amount of ETH to be wrapped.\n', '\t */\n', '\tfunction _wrap(uint256 _amount) internal\n', '\t{\n', '\t\tWETH($.WETH).deposit{value: _amount}();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\n', '\t *      Note that the contract using this library function must declare a\n', '\t *      payable receive/fallback function.\n', '\t * @param _amount The amount of ETH to be unwrapped.\n', '\t */\n', '\tfunction _unwrap(uint256 _amount) internal\n', '\t{\n', '\t\tWETH($.WETH).withdraw(_amount);\n', '\t}\n', '}\n', '\n', '// File: contracts/GEtherBridge.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract GEtherBridge\n', '{\n', '\tfunction deposit(address _stakeToken, uint256 _minShares) external payable\n', '\t{\n', '\t\taddress _from = msg.sender;\n', '\t\tuint256 _amount = msg.value;\n', '\t\taddress _token = $.WETH;\n', '\t\tWrapping._wrap(_amount);\n', '\t\tTransfers._approveFunds(_token, _stakeToken, _amount);\n', '\t\tGLPMining(_stakeToken).depositToken(_token, _amount, _minShares);\n', '\t\tuint256 _shares = Transfers._getBalance(_stakeToken);\n', '\t\tTransfers._pushFunds(_stakeToken, _from, _shares);\n', '\t}\n', '\n', '\tfunction withdraw(address _stakeToken, uint256 _shares, uint256 _minAmount) external\n', '\t{\n', '\t\taddress payable _from = msg.sender;\n', '\t\taddress _token = $.WETH;\n', '\t\tTransfers._pullFunds(_stakeToken, _from, _shares);\n', '\t\tGLPMining(_stakeToken).withdrawToken(_token, _shares, _minAmount);\n', '\t\tuint256 _amount = Transfers._getBalance(_token);\n', '\t\tWrapping._unwrap(_amount);\n', '\t\t_from.transfer(_amount);\n', '\t}\n', '\n', '\treceive() external payable {} // not to be used directly\n', '}\n', '\n', '// File: contracts/GTokens.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice Definition of rAAVE. It is an elastic supply token that uses AAVE\n', ' * as reference token.\n', ' */\n', 'contract rAAVE is GElasticToken\n', '{\n', '\tconstructor (uint256 _initialSupply)\n', '\t\tGElasticToken("rebase AAVE", "rAAVE", 18, $.AAVE, _initialSupply) public\n', '\t{\n', '\t}\n', '}\n', '\n', '/**\n', ' * @notice Definition of stkAAVE/rAAVE. It provides mining or reward rAAVE when\n', ' * providing liquidity to the AAVE/rAAVE pool.\n', ' */\n', 'contract stkAAVE_rAAVE is GLPMiningToken\n', '{\n', '\tconstructor (address _AAVE_rAAVE, address _rAAVE)\n', '\t\tGLPMiningToken("staked AAVE/rAAVE", "stkAAVE/rAAVE", 18, _AAVE_rAAVE, _rAAVE) public\n', '\t{\n', '\t}\n', '}\n', '\n', '/**\n', ' * @notice Definition of stkGRO/rAAVE. It provides mining or reward rAAVE when\n', ' * providing liquidity to the GRO/rAAVE pool.\n', ' */\n', 'contract stkGRO_rAAVE is GLPMiningToken\n', '{\n', '\tconstructor (address _GRO_rAAVE, address _rAAVE)\n', '\t\tGLPMiningToken("staked GRO/rAAVE", "stkGRO/rAAVE", 18, _GRO_rAAVE, _rAAVE) public\n', '\t{\n', '\t}\n', '}\n', '\n', '/**\n', ' * @notice Definition of stkETH/rAAVE. It provides mining or reward rAAVE when\n', ' * providing liquidity to the WETH/rAAVE pool.\n', ' */\n', 'contract stkETH_rAAVE is GLPMiningToken\n', '{\n', '\tconstructor (address _ETH_rAAVE, address _rAAVE)\n', '\t\tGLPMiningToken("staked ETH/rAAVE", "stkETH/rAAVE", 18, _ETH_rAAVE, _rAAVE) public\n', '\t{\n', '\t}\n', '}\n', '\n', '// File: contracts/GTokenRegistry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @notice This contract allows external agents to detect when new GTokens\n', ' *         are deployed to the network.\n', ' */\n', 'contract GTokenRegistry is Ownable\n', '{\n', '\t/**\n', '\t * @notice Registers a new gToken.\n', '\t * @param _growthToken The address of the token being registered.\n', '\t * @param _oldGrowthToken The address of the token implementation\n', '\t *                        being replaced, for upgrades, or 0x0 0therwise.\n', '\t */\n', '\tfunction registerNewToken(address _growthToken, address _oldGrowthToken) public onlyOwner\n', '\t{\n', '\t\temit NewToken(_growthToken, _oldGrowthToken);\n', '\t}\n', '\n', '\tevent NewToken(address indexed _growthToken, address indexed _oldGrowthToken);\n', '}']