['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC721 {\n', '    function getTokenDetails(uint256 index) external view returns (uint32 aType, uint32 customDetails, uint32 lastTx, uint32 lastPayment, uint256 initialvalue, string memory coin);\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address private owner;\n', '    \n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '\n', '    function changeOwner(address newOwner) public onlyOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract MarketFees is Ownable {\n', '    IERC721 nftContract;\n', '    struct FeeFactor {\n', '        uint256 mulFactor;\n', '        uint256 divFactor;\n', '    }\n', '    mapping (uint32 => bool) public zerofeeAssets;\n', '    mapping (address => FeeFactor) public tokenFee;\n', '    \n', '    uint256 public ethFeeFactor;\n', '    \n', '    constructor() {\n', '        nftContract = IERC721(0xB20217bf3d89667Fa15907971866acD6CcD570C8);\n', '        zerofeeAssets[24] = true;\n', '    }\n', '    \n', '    \n', '    function calcByToken(address _seller, address _token, uint256 _amount) public view returns (uint256 fee) {\n', '        if (tokenFee[_token].mulFactor == 0) {\n', '            return (0);\n', '        } else {\n', '            if (checkZeroFeeAsset(_seller)) {\n', '                return (0);\n', '            } else {\n', '                return ((_amount*tokenFee[_token].mulFactor)/tokenFee[_token].divFactor);\n', '            }\n', '        }\n', '        \n', '    }\n', '    \n', '    function checkZeroFeeAsset(address _seller) private view returns (bool free) {\n', '        uint256 assetCount = nftContract.balanceOf(_seller);\n', '        bool freeTrade;\n', '  \n', '        for (uint i=0; i<assetCount; i++) {\n', '            (uint32 assetType,,,,,) = (nftContract.getTokenDetails(nftContract.tokenOfOwnerByIndex(_seller, i)));\n', '            if (zerofeeAssets[assetType] == true) {\n', '                freeTrade = true;\n', '                break;\n', '            }\n', '        }\n', '        return (freeTrade);\n', '    }\n', '    \n', '    function calcByEth(address _seller, uint256 _amount) public view returns (uint256 fee) {\n', '        if (ethFeeFactor == 0) {\n', '            return (0);\n', '        } else {\n', '            if (checkZeroFeeAsset(_seller)) {\n', '                return (0);\n', '            } else {\n', '                return ((_amount*ethFeeFactor)/1000);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function setTokenFee(address _token, uint256 _mulFactor, uint256 _divFactor) public onlyOwner {\n', '        tokenFee[_token].mulFactor = _mulFactor;\n', '        tokenFee[_token].divFactor = _divFactor;\n', '    }\n', '    \n', '    function setEthFee(uint256 _fee) public onlyOwner {\n', '        ethFeeFactor = _fee;\n', '    }\n', '    \n', '    \n', '    \n', '}']