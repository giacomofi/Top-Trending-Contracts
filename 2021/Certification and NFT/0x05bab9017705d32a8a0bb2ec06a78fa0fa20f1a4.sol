['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '// File: @openzeppelin/upgrades/contracts/upgradeability/Proxy.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'contract Proxy {\n', '  /**\n', '   * @dev Fallback function.\n', '   * Implemented entirely in `_fallback`.\n', '   */\n', '  function () payable external {\n', '    _fallback();\n', '  }\n', '\n', '  /**\n', '   * @return The Address of the implementation.\n', '   */\n', '  function _implementation() internal view returns (address);\n', '\n', '  /**\n', '   * @dev Delegates execution to an implementation contract.\n', "   * This is a low level function that doesn't return to its internal call site.\n", '   * It will return to the external caller whatever the implementation returns.\n', '   * @param implementation Address to delegate.\n', '   */\n', '  function _delegate(address implementation) internal {\n', '    assembly {\n', '      // Copy msg.data. We take full control of memory in this inline assembly\n', '      // block because it will not return to Solidity code. We overwrite the\n', '      // Solidity scratch pad at memory position 0.\n', '      calldatacopy(0, 0, calldatasize)\n', '\n', '      // Call the implementation.\n', "      // out and outsize are 0 because we don't know the size yet.\n", '      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n', '\n', '      // Copy the returned data.\n', '      returndatacopy(0, 0, returndatasize)\n', '\n', '      switch result\n', '      // delegatecall returns 0 on error.\n', '      case 0 { revert(0, returndatasize) }\n', '      default { return(0, returndatasize) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is run as the first thing in the fallback function.\n', '   * Can be redefined in derived contracts to add functionality.\n', '   * Redefinitions must call super._willFallback().\n', '   */\n', '  function _willFallback() internal {\n', '  }\n', '\n', '  /**\n', '   * @dev fallback implementation.\n', '   * Extracted to enable manual triggering.\n', '   */\n', '  function _fallback() internal {\n', '    _willFallback();\n', '    _delegate(_implementation());\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/upgrades/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' *\n', ' * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\n', ' * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\n', ' * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\n', ' * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\n', ' */\n', 'library OpenZeppelinUpgradesAddress {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title BaseUpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'contract BaseUpgradeabilityProxy is Proxy {\n', '  /**\n', '   * @dev Emitted when the implementation is upgraded.\n', '   * @param implementation Address of the new implementation.\n', '   */\n', '  event Upgraded(address indexed implementation);\n', '\n', '  /**\n', '   * @dev Storage slot with the address of the current implementation.\n', '   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return Address of the current implementation\n', '   */\n', '  function _implementation() internal view returns (address impl) {\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '    assembly {\n', '      impl := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the proxy to a new implementation.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _upgradeTo(address newImplementation) internal {\n', '    _setImplementation(newImplementation);\n', '    emit Upgraded(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the implementation address of the proxy.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _setImplementation(address newImplementation) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newImplementation)\n', '    }\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\n', ' * implementation and init data.\n', ' */\n', 'contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _logic, bytes memory _data) public payable {\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/external/Decimal.sol\n', '\n', '/*\n', '    Copyright 2019 dYdX Trading Inc.\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.7;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title Decimal\n', ' * @author dYdX\n', ' *\n', ' * Library that defines a fixed-point number with 18 decimal places.\n', ' */\n', 'library Decimal {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constants ============\n', '\n', '    uint256 constant BASE = 10**18;\n', '\n', '    // ============ Structs ============\n', '\n', '\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Static Functions ============\n', '\n', '    function zero()\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: 0 });\n', '    }\n', '\n', '    function one()\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: BASE });\n', '    }\n', '\n', '    function from(\n', '        uint256 a\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: a.mul(BASE) });\n', '    }\n', '\n', '    function ratio(\n', '        uint256 a,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: getPartial(a, BASE, b) });\n', '    }\n', '\n', '    // ============ Self Functions ============\n', '\n', '    function add(\n', '        D256 memory self,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.add(b.mul(BASE)) });\n', '    }\n', '\n', '    function sub(\n', '        D256 memory self,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.sub(b.mul(BASE)) });\n', '    }\n', '\n', '    function mul(\n', '        D256 memory self,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.mul(b) });\n', '    }\n', '\n', '    function div(\n', '        D256 memory self,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.div(b) });\n', '    }\n', '\n', '    function pow(\n', '        D256 memory self,\n', '        uint256 b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        if (b == 0) {\n', '            return from(1);\n', '        }\n', '\n', '        D256 memory temp = D256({ value: self.value });\n', '        for (uint256 i = 1; i < b; i++) {\n', '            temp = mul(temp, self);\n', '        }\n', '\n', '        return temp;\n', '    }\n', '\n', '    function add(\n', '        D256 memory self,\n', '        D256 memory b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.add(b.value) });\n', '    }\n', '\n', '    function sub(\n', '        D256 memory self,\n', '        D256 memory b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: self.value.sub(b.value) });\n', '    }\n', '\n', '    function mul(\n', '        D256 memory self,\n', '        D256 memory b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: getPartial(self.value, b.value, BASE) });\n', '    }\n', '\n', '    function div(\n', '        D256 memory self,\n', '        D256 memory b\n', '    )\n', '    internal\n', '    pure\n', '    returns (D256 memory)\n', '    {\n', '        return D256({ value: getPartial(self.value, BASE, b.value) });\n', '    }\n', '\n', '    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\n', '        return self.value == b.value;\n', '    }\n', '\n', '    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\n', '        return compareTo(self, b) == 2;\n', '    }\n', '\n', '    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\n', '        return compareTo(self, b) == 0;\n', '    }\n', '\n', '    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\n', '        return compareTo(self, b) > 0;\n', '    }\n', '\n', '    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\n', '        return compareTo(self, b) < 2;\n', '    }\n', '\n', '    function isZero(D256 memory self) internal pure returns (bool) {\n', '        return self.value == 0;\n', '    }\n', '\n', '    function asUint256(D256 memory self) internal pure returns (uint256) {\n', '        return self.value.div(BASE);\n', '    }\n', '\n', '    // ============ Core Methods ============\n', '\n', '    function getPartial(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    )\n', '    private\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return target.mul(numerator).div(denominator);\n', '    }\n', '\n', '    function compareTo(\n', '        D256 memory a,\n', '        D256 memory b\n', '    )\n', '    private\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        if (a.value == b.value) {\n', '            return 1;\n', '        }\n', '        return a.value > b.value ? 2 : 0;\n', '    }\n', '}\n', '\n', '// File: contracts/Constants.sol\n', '\n', '/*\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '    Copyright 2021 vsdcrew <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', 'library Constants {\n', '    /* Chain */\n', '    uint256 private constant CHAIN_ID = 1; // Mainnet\n', '\n', '    /* Bootstrapping */\n', '    uint256 private constant BOOTSTRAPPING_PERIOD = 5;\n', '\n', '    /* Oracle */\n', '    address private constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    uint256 private constant ORACLE_RESERVE_MINIMUM = 1e22; // 10,000 VSD\n', '    address private constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    /* Epoch */\n', '    struct EpochStrategy {\n', '        uint256 offset;\n', '        uint256 start;\n', '        uint256 period;\n', '    }\n', '\n', '    uint256 private constant CURRENT_EPOCH_OFFSET = 0;\n', '    uint256 private constant CURRENT_EPOCH_START = 1612324800;\n', '    uint256 private constant CURRENT_EPOCH_PERIOD = 28800;\n', '\n', '    /* Governance */\n', '    uint256 private constant GOVERNANCE_PERIOD = 9; // 9 epochs\n', '    uint256 private constant GOVERNANCE_EXPIRATION = 2; // 2 + 1 epochs\n', '    uint256 private constant GOVERNANCE_QUORUM = 10e16; // 10%\n', '    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 5e15; // 0.5%\n', '    uint256 private constant GOVERNANCE_SUPER_MAJORITY = 66e16; // 66%\n', '    uint256 private constant GOVERNANCE_EMERGENCY_DELAY = 6; // 6 epochs\n', '\n', '    /* DAO */\n', '    uint256 private constant ADVANCE_INCENTIVE = 1e20; // 100 VSD\n', '    uint256 private constant DAO_EXIT_LOCKUP_EPOCHS = 15; // 15 epochs fluid\n', '\n', '    /* Market */\n', '    uint256 private constant COUPON_EXPIRATION = 30; // 10 days\n', '    uint256 private constant DEBT_RATIO_CAP = 15e16; // 15%\n', '\n', '    /* Regulator */\n', '    uint256 private constant COUPON_SUPPLY_CHANGE_LIMIT = 6e16; // 6%\n', '    uint256 private constant SUPPLY_INCREASE_FUND_RATIO = 1500; // 15%\n', '    uint256 private constant SUPPLY_INCREASE_PRICE_THRESHOLD = 105e16; // 1.05\n', '    uint256 private constant SUPPLY_INCREASE_PRICE_TARGET = 105e16; // 1.05\n', '    uint256 private constant SUPPLY_DECREASE_PRICE_THRESHOLD = 95e16; // 0.95\n', '    uint256 private constant SUPPLY_DECREASE_PRICE_TARGET = 95e16; // 0.95\n', '\n', '    /* Collateral */\n', '    uint256 private constant REDEMPTION_RATE = 9500; // 95%\n', '    uint256 private constant FUND_DEV_PCT = 70; // 70%\n', '    uint256 private constant COLLATERAL_RATIO = 9000; // 90%\n', '\n', '    /* Deployed */\n', '    address private constant TREASURY_ADDRESS = address(0x4b23854ed531f82Dfc9888aF54076aeC5F92DE07);\n', '    address private constant DEV_ADDRESS = address(0x5bC47D40F69962d1a9Db65aC88f4b83537AF5Dc2);\n', '    address private constant MINTER_ADDRESS = address(0x6Ff1DbcF2996D8960E24F16C193EA42853995d32);\n', '    address private constant GOVERNOR = address(0xB64A5630283CCBe0C3cbF887a9f7B9154aEf38c3);\n', '\n', '    /**\n', '     * Getters\n', '     */\n', '\n', '    function getUsdcAddress() internal pure returns (address) {\n', '        return USDC;\n', '    }\n', '\n', '    function getDaiAddress() internal pure returns (address) {\n', '        return DAI;\n', '    }\n', '\n', '    function getOracleReserveMinimum() internal pure returns (uint256) {\n', '        return ORACLE_RESERVE_MINIMUM;\n', '    }\n', '\n', '    function getCurrentEpochStrategy() internal pure returns (EpochStrategy memory) {\n', '        return EpochStrategy({\n', '            offset: CURRENT_EPOCH_OFFSET,\n', '            start: CURRENT_EPOCH_START,\n', '            period: CURRENT_EPOCH_PERIOD\n', '        });\n', '    }\n', '\n', '    function getBootstrappingPeriod() internal pure returns (uint256) {\n', '        return BOOTSTRAPPING_PERIOD;\n', '    }\n', '\n', '    function getGovernancePeriod() internal pure returns (uint256) {\n', '        return GOVERNANCE_PERIOD;\n', '    }\n', '\n', '    function getGovernanceExpiration() internal pure returns (uint256) {\n', '        return GOVERNANCE_EXPIRATION;\n', '    }\n', '\n', '    function getGovernanceQuorum() internal pure returns (Decimal.D256 memory) {\n', '        return Decimal.D256({value: GOVERNANCE_QUORUM});\n', '    }\n', '\n', '    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\n', '        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\n', '    }\n', '\n', '    function getGovernanceSuperMajority() internal pure returns (Decimal.D256 memory) {\n', '        return Decimal.D256({value: GOVERNANCE_SUPER_MAJORITY});\n', '    }\n', '\n', '    function getGovernanceEmergencyDelay() internal pure returns (uint256) {\n', '        return GOVERNANCE_EMERGENCY_DELAY;\n', '    }\n', '\n', '    function getAdvanceIncentive() internal pure returns (uint256) {\n', '        return ADVANCE_INCENTIVE;\n', '    }\n', '\n', '    function getDAOExitLockupEpochs() internal pure returns (uint256) {\n', '        return DAO_EXIT_LOCKUP_EPOCHS;\n', '    }\n', '\n', '    function getCouponExpiration() internal pure returns (uint256) {\n', '        return COUPON_EXPIRATION;\n', '    }\n', '\n', '    function getDebtRatioCap() internal pure returns (Decimal.D256 memory) {\n', '        return Decimal.D256({value: DEBT_RATIO_CAP});\n', '    }\n', '\n', '    function getCouponSupplyChangeLimit() internal pure returns (Decimal.D256 memory) {\n', '        return Decimal.D256({value: COUPON_SUPPLY_CHANGE_LIMIT});\n', '    }\n', '\n', '    function getSupplyIncreaseFundRatio() internal pure returns (uint256) {\n', '        return SUPPLY_INCREASE_FUND_RATIO;\n', '    }\n', '\n', '    function getSupplyIncreasePriceThreshold() internal pure returns (uint256) {\n', '        return SUPPLY_INCREASE_PRICE_THRESHOLD;\n', '    }\n', '\n', '    function getSupplyIncreasePriceTarget() internal pure returns (uint256) {\n', '        return SUPPLY_INCREASE_PRICE_TARGET;\n', '    }\n', '\n', '    function getSupplyDecreasePriceThreshold() internal pure returns (uint256) {\n', '        return SUPPLY_DECREASE_PRICE_THRESHOLD;\n', '    }\n', '\n', '    function getSupplyDecreasePriceTarget() internal pure returns (uint256) {\n', '        return SUPPLY_DECREASE_PRICE_TARGET;\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        return CHAIN_ID;\n', '    }\n', '\n', '    function getTreasuryAddress() internal pure returns (address) {\n', '        return TREASURY_ADDRESS;\n', '    }\n', '\n', '    function getDevAddress() internal pure returns (address) {\n', '        return DEV_ADDRESS;\n', '    }\n', '\n', '    function getMinterAddress() internal pure returns (address) {\n', '        return MINTER_ADDRESS;\n', '    }\n', '\n', '    function getFundDevPct() internal pure returns (uint256) {\n', '        return FUND_DEV_PCT;\n', '    }\n', '\n', '    function getRedemptionRate() internal pure returns (uint256) {\n', '        return REDEMPTION_RATE;\n', '    }\n', '\n', '    function getGovernor() internal pure returns (address) {\n', '        return GOVERNOR;\n', '    }\n', '\n', '    function getCollateralRatio() internal pure returns (uint256) {\n', '        return COLLATERAL_RATIO;\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/IDollar.sol\n', '\n', '/*\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', 'contract IDollar is IERC20 {\n', '    function burn(uint256 amount) public;\n', '    function burnFrom(address account, uint256 amount) public;\n', '    function mint(address account, uint256 amount) public returns (bool);\n', '}\n', '\n', '// File: contracts/oracle/IOracle.sol\n', '\n', '/*\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', 'contract IOracle {\n', '    function capture() public returns (Decimal.D256 memory, bool);\n', '}\n', '\n', '// File: contracts/dao/State.sol\n', '\n', '/*\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '    Copyright 2021 vsdcrew <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Account {\n', '    enum Status {\n', '        Frozen,\n', '        Fluid,\n', '        Locked\n', '    }\n', '\n', '    struct State {\n', '        uint256 lockedUntil;\n', '\n', '        mapping(uint256 => uint256) coupons;\n', '        mapping(address => uint256) couponAllowances;\n', '    }\n', '\n', '    struct PoolState {\n', '        uint256 staged;\n', '        uint256 bonded;\n', '        uint256 fluidUntil;\n', '        uint256 rewardDebt;\n', '        uint256 shareDebt;\n', '    }\n', '}\n', '\n', 'contract Epoch {\n', '    struct Global {\n', '        uint256 start;\n', '        uint256 period;\n', '        uint256 current;\n', '    }\n', '\n', '    struct Coupons {\n', '        uint256 outstanding;\n', '        uint256 couponRedeemed;\n', '        uint256 vsdRedeemable;\n', '    }\n', '\n', '    struct State {\n', '        uint256 totalDollarSupply;\n', '        Coupons coupons;\n', '    }\n', '}\n', '\n', 'contract Candidate {\n', '    enum Vote {\n', '        UNDECIDED,\n', '        APPROVE,\n', '        REJECT\n', '    }\n', '\n', '    struct VoteInfo {\n', '        Vote vote;\n', '        uint256 bondedVotes;\n', '    }\n', '\n', '    struct State {\n', '        uint256 start;\n', '        uint256 period;\n', '        uint256 approve;\n', '        uint256 reject;\n', '        mapping(address => VoteInfo) votes;\n', '        bool initialized;\n', '    }\n', '}\n', '\n', 'contract Storage {\n', '    struct Provider {\n', '        IDollar dollar;\n', '        IOracle oracle;\n', '    }\n', '\n', '    struct Balance {\n', '        uint256 redeemable;\n', '        uint256 clippable;\n', '        uint256 debt;\n', '        uint256 coupons;\n', '    }\n', '\n', '    struct PoolInfo {\n', '        uint256 bonded;\n', '        uint256 staged;\n', '        mapping (address => Account.PoolState) accounts;\n', '        uint256 accDollarPerLP; // Accumulated dollar per LP token, times 1e18.\n', '        uint256 accSharePerLP; // Accumulated share per LP token, times 1e18.\n', '        uint256 allocPoint;\n', '        uint256 flags;\n', '    }\n', '\n', '    struct State {\n', '        Epoch.Global epoch;\n', '        Balance balance;\n', '        Provider provider;\n', '\n', '        /*\n', '         * Global state variable\n', '         */\n', '        uint256 totalAllocPoint;\n', '        uint256 collateralRatio;\n', '\n', '        mapping(uint256 => Epoch.State) epochs;\n', '        mapping(uint256 => Candidate.State) candidates;\n', '        mapping(address => Account.State) accounts;\n', '\n', '        mapping(address => PoolInfo) pools;\n', '        address[] poolList;\n', '\n', '        address[] collateralAssetList;\n', '    }\n', '}\n', '\n', 'contract State {\n', '    Storage.State _state;\n', '}\n', '\n', '// File: contracts/dao/Root.sol\n', '\n', '/*\n', '    Copyright 2020 Empty Set Squad <[email\xa0protected]>\n', '    Copyright 2021 vsdcrew <[email\xa0protected]>\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Root is State, UpgradeabilityProxy {\n', '    constructor (address implementation, address dollar, address oracle, address[] memory collaterals, address[] memory pools) UpgradeabilityProxy(\n', '        implementation,\n', '        abi.encodeWithSignature("initialize()")\n', '    ) public {\n', '        _state.provider.dollar = IDollar(dollar);\n', '        _state.provider.oracle = IOracle(oracle);\n', '\n', '        _state.collateralAssetList = collaterals;\n', '        _state.poolList = pools;\n', '        _state.collateralRatio = Constants.getCollateralRatio();\n', '    }\n', '}']