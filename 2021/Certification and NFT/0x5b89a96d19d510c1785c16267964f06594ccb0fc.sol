['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20Token {\n', '    function transfer(address _to, uint256 _value) external  returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'interface IERC721 {\n', '\n', '    function mint(address to, uint32 _assetType, uint32 _customDetails) external returns (bool success);\n', '\n', '}\n', 'contract Ownable {\n', '\n', '    address private owner;\n', '    \n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '\n', '    function changeOwner(address newOwner) public onlyOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract POLNSeller is Ownable {\n', '    \n', '    address public tokenAddress;\n', '    address public nftAddress;\n', '    address public sellingWallet;\n', '    \n', '    mapping(uint => uint) public assetPrice;\n', '    \n', '    constructor() {\n', '        sellingWallet = 0xAD334543437EF71642Ee59285bAf2F4DAcBA613F;\n', '        nftAddress = 0x57E9a39aE8eC404C08f88740A9e6E306f50c937f;\n', '        tokenAddress = 0xaA8330FB2B4D5D07ABFE7A72262752a8505C6B37;\n', '        assetPrice[1] = 1500 ether;\n', '        assetPrice[2] = 3000 ether;\n', '        assetPrice[3] = 7500 ether;\n', '        assetPrice[4] = 10000 ether;\n', '        assetPrice[5] = 15000 ether;\n', '        assetPrice[6] = 75000 ether;\n', '        assetPrice[7] = 65500 ether;\n', '        assetPrice[8] = 40000 ether;\n', '        assetPrice[9] = 90000 ether;\n', '        assetPrice[10] = 55000 ether;\n', '        assetPrice[11] = 105000 ether;\n', '        assetPrice[12] = 50000 ether;\n', '        assetPrice[13] = 22500 ether;\n', '        assetPrice[14] = 30000 ether;\n', '        assetPrice[15] = 45000 ether;\n', '    }\n', '    \n', '    \n', '    function bytesToUint(bytes memory b) private pure returns (uint256){\n', '        uint256 number;\n', '        for(uint i=0;i<b.length;i++){\n', '            number = number + uint(uint8(b[i]))*(2**(8*(b.length-(i+1))));\n', '        }\n', '        return number;\n', '    }\n', '    \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public returns (bool success) {\n', '        require(tokenAddress == _token);\n', '        uint assetType = bytesToUint(_extraData);\n', '        require(assetPrice[assetType] <= _value);\n', '        IERC20Token token = IERC20Token(tokenAddress);\n', '        require(token.transferFrom(_from, sellingWallet, assetPrice[assetType]), "ERC20 Transfer error");\n', '        IERC721 nft = IERC721(nftAddress);\n', '        uint32 assetDetail = uint32(assetType * 1000000);\n', '        require(nft.mint(_from, uint32(assetType), assetDetail));\n', '        return true;\n', '    }\n', '    \n', '    function setPrice(uint256 _assetId, uint256 _newPrice) public onlyOwner {\n', '        assetPrice[_assetId] = _newPrice;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '}']