['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '// File: localhost/contracts/interfaces/IOracleEth.sol\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', 'interface IOracleEth {\n', '\n', '    // returns Q112-encoded value\n', '    // returned value 10**18 * 2**112 is 1 Ether\n', '    function assetToEth(address asset, uint amount) external view returns (uint);\n', '\n', '    // returns the value "as is"\n', '    function ethToUsd(uint amount) external view returns (uint);\n', '\n', '    // returns the value "as is"\n', '    function usdToEth(uint amount) external view returns (uint);\n', '}\n', '// File: localhost/contracts/interfaces/IOracleRegistry.sol\n', '\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IOracleRegistry {\n', '\n', '    struct Oracle {\n', '        uint oracleType;\n', '        address oracleAddress;\n', '    }\n', '\n', '    function WETH (  ) external view returns ( address );\n', '    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\n', '    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\n', '    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\n', '    function maxOracleType (  ) external view returns ( uint256 );\n', '    function oracleByAsset ( address asset ) external view returns ( address );\n', '    function oracleByType ( uint256 ) external view returns ( address );\n', '    function oracleTypeByAsset ( address ) external view returns ( uint256 );\n', '    function oracleTypeByOracle ( address ) external view returns ( uint256 );\n', '    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\n', '    function setOracle ( uint256 oracleType, address oracle ) external;\n', '    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\n', '    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\n', '    function unsetOracle ( uint256 oracleType ) external;\n', '    function unsetOracleForAsset ( address asset ) external;\n', '    function unsetOracleForAssets ( address[] memory assets ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '}\n', '\n', '// File: localhost/contracts/VaultParameters.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '/**\n', ' * @title Auth\n', " * @dev Manages USDP's system access\n", ' **/\n', 'contract Auth {\n', '\n', '    // address of the the contract with vault parameters\n', '    VaultParameters public vaultParameters;\n', '\n', '    constructor(address _parameters) {\n', '        vaultParameters = VaultParameters(_parameters);\n', '    }\n', '\n', "    // ensures tx's sender is a manager\n", '    modifier onlyManager() {\n', '        require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is able to modify the Vault\n", '    modifier hasVaultAccess() {\n', '        require(vaultParameters.canModifyVault(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is the Vault\n", '    modifier onlyVault() {\n', '        require(msg.sender == vaultParameters.vault(), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title VaultParameters\n', ' **/\n', 'contract VaultParameters is Auth {\n', '\n', '    // map token to stability fee percentage; 3 decimals\n', '    mapping(address => uint) public stabilityFee;\n', '\n', '    // map token to liquidation fee percentage, 0 decimals\n', '    mapping(address => uint) public liquidationFee;\n', '\n', '    // map token to USDP mint limit\n', '    mapping(address => uint) public tokenDebtLimit;\n', '\n', '    // permissions to modify the Vault\n', '    mapping(address => bool) public canModifyVault;\n', '\n', '    // managers\n', '    mapping(address => bool) public isManager;\n', '\n', '    // enabled oracle types\n', '    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\n', '\n', '    // address of the Vault\n', '    address payable public vault;\n', '\n', '    // The foundation address\n', '    address public foundation;\n', '\n', '    /**\n', '     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\n', '     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\n', '     * hashed with Keccak-256.\n', '     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\n', '    **/\n', '    constructor(address payable _vault, address _foundation) Auth(address(this)) {\n', '        require(_vault != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        require(_foundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        isManager[msg.sender] = true;\n', '        vault = _vault;\n', '        foundation = _foundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', "     * @dev Grants and revokes manager's status of any address\n", '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setManager(address who, bool permit) external onlyManager {\n', '        isManager[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the foundation address\n', '     * @param newFoundation The new foundation address\n', '     **/\n', '    function setFoundation(address newFoundation) external onlyManager {\n', '        require(newFoundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        foundation = newFoundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets ability to use token as the main collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\n', '     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\n', '     * @param usdpLimit The USDP token issue limit\n', '     * @param oracles The enables oracle types\n', '     **/\n', '    function setCollateral(\n', '        address asset,\n', '        uint stabilityFeeValue,\n', '        uint liquidationFeeValue,\n', '        uint usdpLimit,\n', '        uint[] calldata oracles\n', '    ) external onlyManager {\n', '        setStabilityFee(asset, stabilityFeeValue);\n', '        setLiquidationFee(asset, liquidationFeeValue);\n', '        setTokenDebtLimit(asset, usdpLimit);\n', '        for (uint i=0; i < oracles.length; i++) {\n', '            setOracleType(oracles[i], asset, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets a permission for an address to modify the Vault\n', '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setVaultAccess(address who, bool permit) external onlyManager {\n', '        canModifyVault[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the year stability fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The stability fee percentage (3 decimals)\n', '     **/\n', '    function setStabilityFee(address asset, uint newValue) public onlyManager {\n', '        stabilityFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the liquidation fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The liquidation fee percentage (0 decimals)\n', '     **/\n', '    function setLiquidationFee(address asset, uint newValue) public onlyManager {\n', '        require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");\n', '        liquidationFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Enables/disables oracle types\n', '     * @param _type The type of the oracle\n', '     * @param asset The address of the main collateral token\n', '     * @param enabled The control flag\n', '     **/\n', '    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\n', '        isOracleTypeEnabled[_type][asset] = enabled;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets USDP limit for a specific collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param limit The limit number\n', '     **/\n', '    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\n', '        tokenDebtLimit[asset] = limit;\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/helpers/ERC20Like.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', 'interface ERC20Like {\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint8);\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IOracleUsd.sol\n', '\n', 'interface IOracleUsd {\n', '\n', '    // returns Q112-encoded value\n', '    // returned value 10**18 * 2**112 is $1\n', '    function assetToUsd(address asset, uint amount) external view returns (uint);\n', '}\n', '// File: localhost/contracts/oracles/BearingAssetOracle.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title BearingAssetOracle\n', ' * @dev Wrapper to quote bearing assets like xSUSHI\n', ' **/\n', 'contract BearingAssetOracle is IOracleUsd, Auth  {\n', '\n', '    IOracleRegistry public immutable oracleRegistry;\n', '\n', '    mapping (address => address) underlyings;\n', '\n', '    event NewUnderlying(address indexed bearing, address indexed underlying);\n', '\n', '    constructor(address _vaultParameters, address _oracleRegistry) Auth(_vaultParameters) {\n', '        require(_vaultParameters != address(0) && _oracleRegistry != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        oracleRegistry = IOracleRegistry(_oracleRegistry);\n', '    }\n', '\n', '    function setUnderlying(address bearing, address underlying) external onlyManager {\n', '        underlyings[bearing] = underlying;\n', '        emit NewUnderlying(bearing, underlying);\n', '    }\n', '\n', '    // returns Q112-encoded value\n', '    function assetToUsd(address bearing, uint amount) public override view returns (uint) {\n', '        if (amount == 0) return 0;\n', '        (address underlying, uint underlyingAmount) = bearingToUnderlying(bearing, amount);\n', '        IOracleUsd _oracleForUnderlying = IOracleUsd(oracleRegistry.oracleByAsset(underlying));\n', '        require(address(_oracleForUnderlying) != address(0), "Unit Protocol: ORACLE_NOT_FOUND");\n', '        return _oracleForUnderlying.assetToUsd(underlying, underlyingAmount);\n', '    }\n', '\n', '    function bearingToUnderlying(address bearing, uint amount) public view returns (address, uint) {\n', '        address _underlying = underlyings[bearing];\n', '        require(_underlying != address(0), "Unit Protocol: UNDEFINED_UNDERLYING");\n', '        uint _reserve = ERC20Like(_underlying).balanceOf(address(bearing));\n', '        uint _totalSupply = ERC20Like(bearing).totalSupply();\n', '        require(amount <= _totalSupply, "Unit Protocol: AMOUNT_EXCEEDS_SUPPLY");\n', '        return (_underlying, amount * _reserve / _totalSupply);\n', '    }\n', '\n', '}']