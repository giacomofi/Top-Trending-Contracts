['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/LynSale.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract LynSale is Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 private marketPrice;\n', '    address public usdtToken;\n', '    address public lynToken;\n', '\n', '    bool private buyable;\n', '    \n', '    uint256 private constant LYN_DECIMAL = 10**18;\n', "    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", "    bytes4 private constant TRANSFER_FROM_SELECTOR = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", "    bytes4 private constant BALANCE_OF_SELECTOR = bytes4(keccak256(bytes('balanceOf(address)')));\n", '\n', '    event Buy(address indexed buyer, uint256 usdtAmount, uint256 lynAmount);\n', '    event ChangePrice(uint256 newPrice);\n', '    event ChangeBuyalbe(bool isBuyable);\n', '\n', '    modifier onlyBuyable() {\n', '        require(buyable, "Not buyable");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Price is the usdt per lyn.\n', '     * 1lyn = 5USDT --> Price = 5*10^6\n', '     * 1lyn = 0.5USDT --> Price = 0.5*10^6\n', '     */\n', '    constructor(\n', '        address _usdtTokenAddr,\n', '        address _lynTokenAddr,\n', '        uint256 _price\n', '    ) public {\n', '        usdtToken = _usdtTokenAddr;\n', '        lynToken = _lynTokenAddr;\n', '        marketPrice = _price;\n', '        emit ChangePrice(_price);\n', '    }\n', '\n', '    //////////////////////////////////////\n', '    // OPERATION FUNCTIONS\n', '    //////////////////////////////////////\n', '\n', '    /**\n', '     * The input must be multiplied by 10^decimals\n', '     */\n', '    function changePrice(uint256 _newPrice) external onlyOwner() {\n', '        require(_newPrice > 0 && _newPrice != marketPrice, "Invalid price");\n', '        marketPrice = _newPrice;\n', '        emit ChangePrice(_newPrice);\n', '    }\n', '\n', '    function setBuyable(bool _isBuyable) external onlyOwner() {\n', '        buyable = _isBuyable;\n', '        emit ChangeBuyalbe(_isBuyable);\n', '    }\n', '\n', '    // Transfer LYN to owner address\n', '    function drainLyn() external onlyOwner() {\n', '        uint256 balance = _getBalanceOf(lynToken, address(this));\n', '        _safeTransfer(lynToken, msg.sender, balance);\n', '    }\n', '\n', '    // Transfer USDT to owner address\n', '    function drainUSDT() external onlyOwner() {\n', '        uint256 balance = _getBalanceOf(usdtToken, address(this));\n', '        _safeTransfer(usdtToken, msg.sender, balance);\n', '    }\n', '\n', '    //////////////////////////////////////\n', '    // PUBLIC FUNCTIONS\n', '    //////////////////////////////////////\n', '\n', '    /**\n', '     * This function transfer `_usdtAmount` USDT to the smart contract\n', '     * and calculate the amount of Lyn then send Lyn to the buyer\n', '     */\n', '    function buy(uint256 _usdtAmount) onlyBuyable() external {\n', '        // Calculate lyn amount\n', '        uint256 lynAmount = _usdtAmount.mul(LYN_DECIMAL).div(marketPrice);\n', '\n', '        // Transfer usdt to this contract\n', '        _safeTransferFrom(address(usdtToken), msg.sender, address(this), _usdtAmount);\n', '\n', '        // Transfer lyn to buyer\n', '        _safeTransfer(lynToken, msg.sender, lynAmount);\n', '\n', '        emit Buy(msg.sender, _usdtAmount, lynAmount);\n', '    }\n', '\n', '    //////////////////////////////////////\n', '    // GET FUNCTIONS\n', '    //////////////////////////////////////\n', '    function checkPrice() public view returns(uint256) {\n', '        return marketPrice;\n', '    }\n', '\n', '    function checkLynAmount() public view returns(uint256) {\n', '        return _getBalanceOf(lynToken, address(this));\n', '    }\n', '\n', '    function checkUSDTAmount() public view returns(uint256) {\n', '        return _getBalanceOf(usdtToken, address(this));\n', '    }\n', '\n', '    function checkBuyable() public view returns(bool) {\n', '        return buyable;\n', '    }\n', '\n', '    //////////////////////////////////////\n', '    // UTILITY FUNCTIONS\n', '    //////////////////////////////////////\n', '\n', '    // ERC20:\n', '    // Functions `transfer`, `transferFrom` should return bool\n', '    // but some token returns void instead of following the standard\n', '    // Since, we need to accept void return as a successful transfer\n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\n", '    }\n', '\n', '    function _safeTransferFrom(address token, address from, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_FROM_SELECTOR, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function _getBalanceOf(address token, address account) private view returns(uint256) {\n', '        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(BALANCE_OF_SELECTOR, account));\n', "        require(success, 'BALACE_OF_FAILED');\n", '        uint256 balance = abi.decode(data,(uint256));\n', '        return balance;\n', '    }\n', '}']