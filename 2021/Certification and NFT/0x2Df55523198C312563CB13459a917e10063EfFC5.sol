['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '// Root file: contracts/protocol/integration/SnapshotGovernanceAdapter.sol\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '/**\n', ' * @title SnapshotGovernanceAdapter\n', ' * @author Noah Citron\n', ' *\n', ' * Governance adapter for Snapshot delegation that returns data delegating and revoking delegations\n', ' */\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '\n', 'contract SnapshotGovernanceAdapter {\n', '\n', '    /* ============ Constants ============ */\n', '    \n', '    // Signature of the delegate function for Snapshot\n', '    string public constant SET_DELEGATE_SIGNATURE = "setDelegate(bytes32,address)";\n', '\n', '    // Signature of the clear delegate function for Snapshot\n', '    string public constant CLEAR_DELEGATE_SIGNATURE = "clearDelegate(bytes32)";\n', '\n', '    // Zero bytes32 is used as the id parameter for DelegateRegistry to denote delegating for all spaces\n', '    bytes32 private constant ZERO_BYTES32 = bytes32(0);\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    address public delegateRegistry;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _delegateRegistry    Address of the Snapshot DelegateRegistry\n', '     */\n', '    constructor(address _delegateRegistry) public {\n', '        delegateRegistry = _delegateRegistry;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Generates the calldata to delegate Snapshot votes to another ETH address\n', '     *\n', '     * @param _delegatee            Address of the delegatee\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Delegate calldata\n', '     */\n', '    function getDelegateCalldata(address _delegatee) external view returns (address, uint256, bytes memory) {\n', '        // setDelegate(bytes32 _id, address _delegatee)\n', '        bytes memory callData = abi.encodeWithSignature(SET_DELEGATE_SIGNATURE, ZERO_BYTES32, _delegatee);\n', '\n', '        return (address(delegateRegistry), 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to remove delegate\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Revoke calldata\n', '     */\n', '     function getRevokeCalldata() external view returns (address, uint256, bytes memory) {\n', '         // clearDelegate(bytes32 _id)\n', '         bytes memory callData = abi.encodeWithSignature(CLEAR_DELEGATE_SIGNATURE, ZERO_BYTES32);\n', '\n', '         return (address(delegateRegistry), 0, callData);\n', '     }\n', '}']