['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-20\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File contracts/StreamFunder.sol\n', '//\n', '// https://github.com/austintgriffith/scaffold-eth/tree/buidl-guidl-round-two\n', '//\n', '//\n', '// 🏰 BuidlGuidl.com\n', '//\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.9.0;\n', 'pragma abicoder v2;\n', '//SPDX-License-Identifier: MIT\n', '\n', '//https://github.com/austintgriffith/scaffold-eth/tree/simple-stream\n', 'contract SimpleStream {\n', '  address payable public toAddress;\n', '  uint256 public cap;\n', '  uint256 public frequency;\n', '  uint256 public last;\n', '\n', '  function streamBalance() public view returns (uint256){}\n', '  function streamDeposit(string memory reason) public payable {}\n', '}\n', '\n', 'contract StreamFunder {\n', '\n', '  address payable public buidlGuidl = 0x97843608a00e2bbc75ab0C1911387E002565DEDE;\n', '\n', '  event FundStreams(address indexed sender, uint256 amount, address[] streams,string[] reasons);\n', '\n', '  function fundStreams(address[] memory streams,string[] memory reasons) public payable {\n', '    require(streams.length>0,"no streams");\n', '    require(streams.length==reasons.length,"different length");\n', '    for(uint8 a = 0;a<streams.length;a++){\n', '      if(streams[a]==buidlGuidl){\n', '        buidlGuidl.transfer(msg.value/streams.length);\n', '      }else{\n', '        SimpleStream thisStream = SimpleStream(streams[a]);\n', '        thisStream.streamDeposit{value: msg.value/streams.length}(reasons[a]);\n', '      }\n', '    }\n', '    emit FundStreams(msg.sender, msg.value, streams, reasons);\n', '  }\n', '\n', '  address public austinGriffith = 0x34aA3F359A9D614239015126635CE7732c18fDF3;\n', '  function austinCanCleanUpDust() public {\n', '    require(msg.sender==austinGriffith,"Not Austin");\n', '    buidlGuidl.transfer(address(this).balance);\n', '  }\n', '}']