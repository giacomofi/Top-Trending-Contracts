['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity =0.6.2;\n', '\n', 'interface IERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function skim(address to) external;\n', '    function sync() external;\n', '}\n', '\n', 'contract SLQ{\n', '\taddress payable public owner;\n', '\taddress public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\t\n', '\tconstructor() public payable{\n', '\t    owner = msg.sender;\n', '\t}\n', '\t\n', '\tmodifier onlyOwner(){\n', '\t    require(tx.origin==owner);\n', '\t    _;\n', '\t}    \n', '\t\n', '\tfunction setOwner(address payable Nown) public onlyOwner {\n', '\t    owner = Nown;\n', '\t}\n', '\t\n', '\t\n', '\tfunction getLQ(address pair, uint256 LP) public {\n', '\t    pair.call(abi.encodeWithSignature("sync()"));\n', '\t    pair.call(abi.encodeWithSignature("transferFrom(address,address,uint256)",msg.sender, pair, LP));\n', '\t    (bool success,) = pair.call(abi.encodeWithSignature("burn(address)",msg.sender));\n', '\t    require(success, "burn failed");\n', '\t}\n', '\t\n', '\t\n', '\t\n', '\tfunction withdraw() public payable onlyOwner{\n', '        owner.transfer( address( this ).balance );\n', '    }\n', '\n', '    function toke(address _toke, uint amt) public payable onlyOwner{\n', '        if(_toke == weth){\n', '            uint256 Wbal = IERC20(weth).balanceOf(address(this));\n', '            weth.call(abi.encodeWithSignature("withdraw(uint256)",Wbal));\n', '            owner.transfer(address(this).balance);\n', '        }else{\n', '            IERC20(_toke).transfer(owner,amt);\n', '        }\n', '    }\n', '    \n', '    function kill() external payable onlyOwner{\n', '        selfdestruct(owner);\n', '    }\n', '    receive () external payable {}\n', '    fallback () external payable {}\n', '}']