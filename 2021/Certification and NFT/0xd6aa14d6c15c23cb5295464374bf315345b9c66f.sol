['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferGovernance(address newOwner) internal virtual onlyGovernance {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/ReethMonetaryPolicyV1.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '// This monetary policy controls the rebase mechanism in the reeth token\n', '// Rebase can only be called once a day by a non-contract\n', '\n', 'interface PriceOracle {\n', '    function getLatestREETHPrice() external view returns (uint256);\n', '    function updateREETHPrice() external; // Update price oracle upon every token transfer\n', '    function mainLiquidity() external view returns (address); // Returns address of REETH/ETH LP pair\n', '}\n', '\n', 'interface UniswapLikeLPToken {\n', '    function sync() external; // Call sync right after rebase call\n', '}\n', '\n', 'interface ReethToken {\n', '    function isRebaseable() external view returns (bool);\n', '    function reethScalingFactor() external view returns (uint256);\n', '    function maxScalingFactor() external view returns (uint256);\n', '    function rebase(uint256 _price, uint256 _indexDelta, bool _positive) external returns (uint256); // Epoch is stored in the token\n', '}\n', '\n', 'interface SpentOracle{\n', '    function addUserETHSpent(address _add, uint256 _ethback) external;\n', '}\n', '\n', 'contract ReethMonetaryPolicyV1 is Ownable, ReentrancyGuard {\n', '    // Adopted from YamRebaserV2\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice an event emitted when deviationThreshold is changed\n', '    event NewDeviationThreshold(uint256 oldDeviationThreshold, uint256 newDeviationThreshold);\n', '    \n', '    /// @notice Spreads out getting to the target price\n', '    uint256 public rebaseLag;\n', '\n', '    /// @notice Peg target\n', '    uint256 public targetRate;\n', '    \n', '    // If the current exchange rate is within this fractional distance from the target, no supply\n', '    // update is performed. Fixed point number--same format as the rate.\n', '    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\n', '    uint256 public deviationThreshold;\n', '    \n', '    /// @notice More than this much time must pass between rebase operations.\n', '    uint256 public minRebaseTimeIntervalSec;\n', '\n', '    /// @notice Block timestamp of last rebase operation\n', '    uint256 public lastRebaseTimestampSec;\n', '\n', '    /// @notice The rebase window begins this many seconds into the minRebaseTimeInterval period.\n', '    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\n', '    uint256 public rebaseWindowOffsetSec;\n', '\n', '    /// @notice The length of the time window where a rebase operation is allowed to execute, in seconds.\n', '    uint256 public rebaseWindowLengthSec;\n', '\n', '    /// @notice The number of rebase cycles since inception\n', '    uint256 public epoch;\n', '    \n', '    /// @notice Reeth token address\n', '    address public reethAddress;\n', '    \n', '    // price oracle address\n', '    address public reethPriceOracle;\n', '    \n', '    // spent eth oracle\n', '    address public spentEthOracle;\n', '    \n', '    /// @notice list of uniswap like pairs to sync\n', '    address[] public uniSyncPairs;\n', '    \n', '    // Used for division scaling math\n', '    uint256 constant BASE = 1e18;\n', '    \n', '    constructor(\n', '        address _reethAddress,\n', '        address _priceOracle,\n', '        address _spentOracle\n', '    )\n', '        public\n', '    {\n', '        reethAddress = _reethAddress;\n', '        reethPriceOracle = _priceOracle;\n', '        spentEthOracle = _spentOracle;\n', '        \n', '        minRebaseTimeIntervalSec = 1 days;\n', '        rebaseWindowOffsetSec = 12 hours; // 12:00 UTC rebase\n', '        \n', '        // 1 REETH = 1 ETH\n', '        targetRate = BASE;\n', '        \n', '        // once daily rebase, with targeting reaching peg in 10 days\n', '        rebaseLag = 10;\n', '        \n', '        // 5%\n', '        deviationThreshold = 5 * 10**16;\n', '        \n', '        // 60 minutes\n', '        rebaseWindowLengthSec = 1 hours;\n', '\n', '    }\n', '    \n', '    // This is an optional function that is ran anytime a reeth transfer is made\n', '    function reethTransferActions() external {\n', '        require(_msgSender() == reethAddress, "Not sent from REETH token");\n', '        // We are running the price oracle update\n', '        if(reethPriceOracle != address(0)){\n', '            PriceOracle oracle = PriceOracle(reethPriceOracle);\n', '            oracle.updateREETHPrice(); // Update the price of reeth            \n', '        }\n', '    }\n', '    \n', '    // Rebase function\n', '    /**\n', '     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '     *\n', '     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\n', '     *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\n', '     *      and targetRate is 1e18\n', '     */\n', '     // Users can give their gas spent to another user if they choose to (in case of bot calls)\n', '    function rebase(address _delegateCaller)\n', '        public\n', '    {\n', '        // Users will be recognized for 1.5x the eth they spend when using this oracle\n', '        uint256 gasUsed = gasleft(); // Start calculate gas spent\n', '        \n', '        if(_delegateCaller == address(0)){\n', '            _delegateCaller = _msgSender();\n', '        }\n', '        \n', '        // EOA only or gov\n', '        require(_msgSender() == tx.origin || _msgSender() == governance(), "Contract call not allowed unless governance");\n', '        // ensure rebasing at correct time\n', '        require(inRebaseWindow() == true, "Not in rebase window");\n', '\n', '        // This comparison also ensures there is no reentrancy.\n', '        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now, "Call already executed for this epoch");\n', '\n', '        // Snap the rebase time to the start of this window.\n', '        lastRebaseTimestampSec = now.sub(\n', '            now.mod(minRebaseTimeIntervalSec)).add(rebaseWindowOffsetSec);\n', '\n', '        PriceOracle oracle = PriceOracle(reethPriceOracle);\n', '        oracle.updateREETHPrice(); // Update the price of reeth\n', '        \n', '        uint256 exchangeRate = oracle.getLatestREETHPrice();\n', '        require(exchangeRate > 0, "Bad oracle price");\n', '\n', '        // calculates % change to supply\n', '        (uint256 offPegPerc, bool positive) = computeOffPegPerc(exchangeRate);\n', '\n', '        uint256 indexDelta = offPegPerc;\n', '\n', '        // Apply the Dampening factor.\n', '        indexDelta = indexDelta.div(rebaseLag);\n', '\n', '        ReethToken reeth = ReethToken(reethAddress);\n', '\n', '        if (positive) {\n', '            require(reeth.reethScalingFactor().mul(BASE.add(indexDelta)).div(BASE) < reeth.maxScalingFactor(), "new scaling factor will be too big");\n', '        }\n', '\n', '        // rebase the token\n', '        reeth.rebase(exchangeRate, indexDelta, positive);\n', '\n', '        // sync the pools\n', '        // first sync the main pool\n', '        address mainLP = oracle.mainLiquidity();\n', '        UniswapLikeLPToken lp = UniswapLikeLPToken(mainLP);\n', '        lp.sync(); // Sync this pool post rebase\n', '        \n', '        // And any additional pairs to sync\n', '        for(uint256 i = 0; i < uniSyncPairs.length; i++){\n', '            lp = UniswapLikeLPToken(uniSyncPairs[i]);\n', '            lp.sync();\n', '        }\n', '\n', '        if(spentEthOracle != address(0)){\n', '            // Factor this gas usage to stake into the oracle\n', '            SpentOracle spent = SpentOracle(spentEthOracle);\n', '            gasUsed = gasUsed.sub(gasleft()).mul(tx.gasprice); // The amount of ETH used for this transaction\n', '            gasUsed = gasUsed.mul(3).div(2); // Give a bonus 50%\n', '            spent.addUserETHSpent(_delegateCaller, gasUsed);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return If the latest block timestamp is within the rebase time window it, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function inRebaseWindow() public view returns (bool) {\n', '        // First check if reeth token is active for rebasing\n', '        if(ReethToken(reethAddress).isRebaseable() == false){return false;}\n', '        \n', '        return (block.timestamp.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\n', '            block.timestamp.mod(minRebaseTimeIntervalSec) <\n', '            (rebaseWindowOffsetSec.add(rebaseWindowLengthSec)));\n', '    }\n', '\n', '    /**\n', '     * @return Computes in % how far off market is from peg\n', '     */\n', '    function computeOffPegPerc(uint256 rate)\n', '        private\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        if (withinDeviationThreshold(rate)) {\n', '            return (0, false);\n', '        }\n', '\n', '        // indexDelta =  (rate - targetRate) / targetRate\n', '        if (rate > targetRate) {\n', '            return (rate.sub(targetRate).mul(BASE).div(targetRate), true);\n', '        } else {\n', '            return (targetRate.sub(rate).mul(BASE).div(targetRate), false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param rate The current exchange rate, an 18 decimal fixed point number.\n', '     * @return If the rate is within the deviation threshold from the target rate, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function withinDeviationThreshold(uint256 rate)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold)\n', '            .div(10 ** 18);\n', '\n', '        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\n', '            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\n', '    }\n', '\n', '    // Governance only functions\n', '    \n', '    // Timelock variables\n', '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    address private _timelock_address;\n', '    uint256[3] private _timelock_data;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        require(now >= _timelockStart + TIMELOCK_DURATION, "Timelock time not met");\n', '        _;\n', '    }\n', '    \n', '    // Change the owner of the token contract\n', '    // --------------------\n', '    function startGovernanceChange(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address = _address;       \n', '    }\n', '    \n', '    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\n', '        transferGovernance(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    // Add to the synced pairs\n', '    // --------------------\n', '    function startAddSyncPair(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishAddSyncPair() external onlyGovernance timelockConditionsMet(2) {\n', '        uniSyncPairs.push(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    // Remove from synced pairs\n', '    // --------------------\n', '    function startRemoveSyncPair(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 3;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishRemoveSyncPair() external onlyGovernance timelockConditionsMet(3) {\n', '        uint256 length = uniSyncPairs.length;\n', '        for(uint256 i = 0; i < length; i++){\n', '            if(uniSyncPairs[i] == _timelock_address){\n', '                for(uint256 i2 = i; i2 < length-1; i2++){\n', '                    uniSyncPairs[i2] =uniSyncPairs[i2 + 1]; // Shift the data down one\n', '                }\n', '                uniSyncPairs.pop(); //Remove last element\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the deviation threshold\n', '    // --------------------\n', '    function startChangeDeviationThreshold(uint256 _threshold) external onlyGovernance {\n', '        require(_threshold > 0);\n', '        _timelockStart = now;\n', '        _timelockType = 4;\n', '        _timelock_data[0] = _threshold;\n', '    }\n', '    \n', '    function finishChangeDeviationThreshold() external onlyGovernance timelockConditionsMet(4) {\n', '        deviationThreshold = _timelock_data[0];\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the rebase lag\n', '    // --------------------\n', '    function startChangeRebaseLag(uint256 _lag) external onlyGovernance {\n', '        require(_lag > 1);\n', '        _timelockStart = now;\n', '        _timelockType = 5;\n', '        _timelock_data[0] = _lag;\n', '    }\n', '    \n', '    function finishChangeRebaseLag() external onlyGovernance timelockConditionsMet(5) {\n', '        rebaseLag = _timelock_data[0];\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the target rate\n', '    // --------------------\n', '    function startChangeTargetRate(uint256 _rate) external onlyGovernance {\n', '        require(_rate > 0);\n', '        _timelockStart = now;\n', '        _timelockType = 6;\n', '        _timelock_data[0] = _rate;\n', '    }\n', '    \n', '    function finishChangeTargetRate() external onlyGovernance timelockConditionsMet(6) {\n', '        targetRate = _timelock_data[0];\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the rebase times\n', '    // --------------------\n', '    function startChangeRebaseTimes(uint256 _UTCOffset, uint256 _windowLength, uint256 _frequency) external onlyGovernance {\n', '        require(_frequency > 0);\n', '        require(_UTCOffset < _frequency);\n', '        require(_UTCOffset + _windowLength < _frequency);\n', '        _timelockStart = now;\n', '        _timelockType = 7;\n', '        _timelock_data[0] = _UTCOffset;\n', '        _timelock_data[1] = _windowLength;\n', '        _timelock_data[2] = _frequency;\n', '    }\n', '    \n', '    function finishChangeRebaseTimes() external onlyGovernance timelockConditionsMet(7) {\n', '        rebaseWindowOffsetSec = _timelock_data[0];\n', '        rebaseWindowLengthSec = _timelock_data[1];\n', '        minRebaseTimeIntervalSec = _timelock_data[2];\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the eth spent oracle\n', '    // --------------------\n', '    function startChangeSpentOracle(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 8;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeSpentOracle() external onlyGovernance timelockConditionsMet(8) {\n', '        spentEthOracle = _timelock_address;\n', '    }\n', '    // --------------------\n', '   \n', '}']