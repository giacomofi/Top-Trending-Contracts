['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', "import './libraries/SafeMath.sol';\n", "import './interfaces/ICentaurFactory.sol';\n", "import './interfaces/ICentaurPool.sol';\n", "import './interfaces/ICentaurSettlement.sol';\n", '\n', 'contract CentaurSettlement is ICentaurSettlement {\n', '\n', '\tusing SafeMath for uint;\n', '\n', "\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '\taddress public override factory;\n', '\tuint public override settlementDuration;\n', '\n', '\t// User address -> Token address -> Settlement\n', '\tmapping(address => mapping (address => Settlement)) pendingSettlement;\n', '\n', '\tmodifier onlyFactory() {\n', "        require(msg.sender == factory, 'CentaurSwap: ONLY_FACTORY_ALLOWED');\n", '        _;\n', '    }\n', '\n', '\tconstructor (address _factory, uint _settlementDuration) public {\n', '\t\tfactory = _factory;\n', '\t\tsettlementDuration = _settlementDuration;\n', '\t}\n', '\n', '\tfunction _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CentaurSwap: TRANSFER_FAILED');\n", '    }\n', '\n', '\tfunction addSettlement(\n', '\t\taddress _sender,\n', '\t\tSettlement memory _pendingSettlement\n', '\t) external override {\n', "\t\trequire(ICentaurFactory(factory).isValidPool(_pendingSettlement.fPool), 'CentaurSwap: POOL_NOT_FOUND');\n", "\t\trequire(ICentaurFactory(factory).isValidPool(_pendingSettlement.tPool), 'CentaurSwap: POOL_NOT_FOUND');\n", '\n', "\t\trequire(msg.sender == _pendingSettlement.tPool, 'CentaurSwap: INVALID_POOL');\n", '\n', "\t\trequire(pendingSettlement[_sender][_pendingSettlement.fPool].settlementTimestamp == 0, 'CentaurSwap: SETTLEMENT_EXISTS');\n", "\t\trequire(pendingSettlement[_sender][_pendingSettlement.tPool].settlementTimestamp == 0, 'CentaurSwap: SETTLEMENT_EXISTS');\n", '\n', '\t\tpendingSettlement[_sender][_pendingSettlement.fPool] = _pendingSettlement;\n', '\t\tpendingSettlement[_sender][_pendingSettlement.tPool] = _pendingSettlement;\n', '\n', '\t}\n', '\n', '\tfunction removeSettlement(\n', '\t\taddress _sender,\n', '\t\taddress _fPool,\n', '\t\taddress _tPool\n', '\t) external override {\n', "\t\trequire(msg.sender == _tPool, 'CentaurSwap: INVALID_POOL');\n", '\n', "\t\trequire(pendingSettlement[_sender][_fPool].settlementTimestamp != 0, 'CentaurSwap: SETTLEMENT_DOES_NOT_EXISTS');\n", "\t\trequire(pendingSettlement[_sender][_tPool].settlementTimestamp != 0, 'CentaurSwap: SETTLEMENT_DOES_NOT_EXISTS');\n", '\n', "\t\trequire(block.timestamp >= pendingSettlement[_sender][_fPool].settlementTimestamp, 'CentaurSwap: SETTLEMENT_PENDING');\n", '\n', '\t\t_safeTransfer(ICentaurPool(_tPool).baseToken(), _tPool, pendingSettlement[_sender][_fPool].maxAmountOut);\n', '\n', '\t\tdelete pendingSettlement[_sender][_fPool];\n', '\t\tdelete pendingSettlement[_sender][_tPool];\n', '\t}\n', '\n', '\tfunction getPendingSettlement(address _sender, address _pool) external override view returns (Settlement memory) {\n', '\t\treturn pendingSettlement[_sender][_pool];\n', '\t}\n', '\t\n', '\tfunction hasPendingSettlement(address _sender, address _pool) external override view returns (bool) {\n', '\t\treturn (pendingSettlement[_sender][_pool].settlementTimestamp != 0);\n', '\t}\n', '\n', '\t// Helper Functions\n', '\tfunction setSettlementDuration(uint _settlementDuration) onlyFactory external override {\n', '\t\tsettlementDuration = _settlementDuration;\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ICentaurFactory {\n', '    event PoolCreated(address indexed token, address pool, uint);\n', '\n', '    function poolFee() external view returns (uint);\n', '\n', '    function poolLogic() external view returns (address);\n', '    function cloneFactory() external view returns (address);\n', '    function settlement() external view returns (address);\n', '    function router() external view returns (address payable);\n', '\n', '    function getPool(address token) external view returns (address pool);\n', '    function allPools(uint) external view returns (address pool);\n', '    function allPoolsLength() external view returns (uint);\n', '    function isValidPool(address pool) external view returns (bool);\n', '\n', '    function createPool(address token, address oracle, uint poolUtilizationPercentage) external returns (address pool);\n', '    function addPool(address pool) external;\n', '    function removePool(address pool) external;\n', '\n', '    function setPoolLiquidityParameter(address, uint) external;\n', '    function setPoolTradeEnabled(address, bool) external;\n', '    function setPoolDepositEnabled(address, bool) external;\n', '    function setPoolWithdrawEnabled(address, bool) external;\n', '    function setAllPoolsTradeEnabled(bool) external;\n', '    function setAllPoolsDepositEnabled(bool) external;\n', '    function setAllPoolsWithdrawEnabled(bool) external;\n', '    function emergencyWithdrawFromPool(address, address, uint, address) external;\n', '\n', '    function setRouterOnlyEOAEnabled(bool) external;\n', '    function setRouterContractWhitelist(address, bool) external;\n', '\n', '    function setSettlementDuration(uint) external;\n', '\n', '    function setPoolFee(uint) external;\n', '    function setPoolLogic(address) external;\n', '    function setCloneFactory(address) external;\n', '    function setSettlement(address) external;\n', '    function setRouter(address payable) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ICentaurPool {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    event Mint(address indexed sender, uint amount);\n', '    event Burn(address indexed sender, uint amount, address indexed to);\n', '    event AmountIn(address indexed sender, uint amount);\n', '    event AmountOut(address indexed sender, uint amount, address indexed to);\n', '    event EmergencyWithdraw(uint256 _timestamp, address indexed _token, uint256 _amount, address indexed _to);\n', '\n', '    function factory() external view returns (address);\n', '    function settlement() external view returns (address);\n', '    function baseToken() external view returns (address);\n', '    function baseTokenDecimals() external view returns (uint);\n', '    function oracle() external view returns (address);\n', '    function oracleDecimals() external view returns (uint);\n', '    function baseTokenTargetAmount() external view returns (uint);\n', '    function baseTokenBalance() external view returns (uint);\n', '    function liquidityParameter() external view returns (uint);\n', '\n', '    function init(address, address, address, uint) external;\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount);\n', '\n', '    function swapTo(address _sender, address _fromToken, uint _amountIn, uint _value, address _receiver) external returns (uint maxAmount);\n', '    function swapFrom(address _sender) external returns (uint amount, uint value);\n', '    function swapSettle(address _sender) external returns (uint);\n', '\n', '    function getOraclePrice() external view returns (uint price);\n', '    function getAmountOutFromValue(uint _value) external view returns (uint amount);\n', '    function getValueFromAmountIn(uint _amount) external view returns (uint value);\n', '    function getAmountInFromValue(uint _value) external view returns (uint amount);\n', '    function getValueFromAmountOut(uint _amount) external view returns (uint value);\n', '\n', '    function setFactory(address) external;\n', '    function setTradeEnabled(bool) external;\n', '    function setDepositEnabled(bool) external;\n', '    function setWithdrawEnabled(bool) external;\n', '    function setLiquidityParameter(uint) external;\n', '    function emergencyWithdraw(address, uint, address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ICentaurSettlement {\n', '    // event SettlementAdded(address indexed sender, address indexed _fromToken, uint _amountIn, address indexed _toToken, uint _amountOut);\n', '    // event SettlementRemoved(address indexed sender, address indexed _fromToken, address indexed _toToken);\n', '    struct Settlement {\n', '        address fPool;\n', '        uint amountIn;\n', '        uint fPoolBaseTokenTargetAmount;\n', '        uint fPoolBaseTokenBalance;\n', '        uint fPoolLiquidityParameter;\n', '        address tPool;\n', '        uint maxAmountOut;\n', '        uint tPoolBaseTokenTargetAmount;\n', '        uint tPoolBaseTokenBalance;\n', '        uint tPoolLiquidityParameter;\n', '        address receiver;\n', '        uint settlementTimestamp;\n', '    }\n', '\n', '    function factory() external pure returns (address);\n', '    function settlementDuration() external pure returns (uint);\n', '\n', '    function addSettlement(\n', '        address _sender,\n', '        Settlement memory _pendingSettlement\n', '    ) external;\n', '    function removeSettlement(address _sender, address _fPool, address _tPool) external;\n', '    \n', '    function getPendingSettlement(address _sender, address _pool) external view returns (Settlement memory);\n', '    function hasPendingSettlement(address _sender, address _pool) external view returns (bool);\n', '\n', '    function setSettlementDuration(uint) external;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']