['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/Uint256Helpers.sol\n', '// Adapted to use pragma ^0.5.17 and satisfy our linter rules\n', 'library Uint256Helpers {\n', '    uint256 private constant MAX_UINT8 = uint8(-1);\n', '    uint256 private constant MAX_UINT64 = uint64(-1);\n', '\n', '    string private constant ERROR_UINT8_NUMBER_TOO_BIG = "UINT8_NUMBER_TOO_BIG";\n', '    string private constant ERROR_UINT64_NUMBER_TOO_BIG = "UINT64_NUMBER_TOO_BIG";\n', '\n', '    function toUint8(uint256 a) internal pure returns (uint8) {\n', '        require(a <= MAX_UINT8, ERROR_UINT8_NUMBER_TOO_BIG);\n', '        return uint8(a);\n', '    }\n', '\n', '    function toUint64(uint256 a) internal pure returns (uint64) {\n', '        require(a <= MAX_UINT64, ERROR_UINT64_NUMBER_TOO_BIG);\n', '        return uint64(a);\n', '    }\n', '}\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _who) external view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', 'interface IArbitrator {\n', '    /**\n', '    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\n', '    * @param _possibleRulings Number of possible rulings allowed for the dispute\n', '    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\n', '    * @return Dispute identification number\n', '    */\n', '    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\n', '\n', '    /**\n', '    * @dev Submit evidence for a dispute\n', '    * @param _disputeId Id of the dispute in the Court\n', '    * @param _submitter Address of the account submitting the evidence\n', '    * @param _evidence Data submitted for the evidence related to the dispute\n', '    */\n', '    function submitEvidence(uint256 _disputeId, address _submitter, bytes calldata _evidence) external;\n', '\n', '    /**\n', '    * @dev Close the evidence period of a dispute\n', '    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n', '    */\n', '    function closeEvidencePeriod(uint256 _disputeId) external;\n', '\n', '    /**\n', '    * @notice Rule dispute #`_disputeId` if ready\n', '    * @param _disputeId Identification number of the dispute to be ruled\n', '    * @return subject Subject associated to the dispute\n', '    * @return ruling Ruling number computed for the given dispute\n', '    */\n', '    function rule(uint256 _disputeId) external returns (address subject, uint256 ruling);\n', '\n', '    /**\n', '    * @dev Tell the dispute fees information to create a dispute\n', '    * @return recipient Address where the corresponding dispute fees must be transferred to\n', '    * @return feeToken ERC20 token used for the fees\n', '    * @return feeAmount Total amount of fees that must be allowed to the recipient\n', '    */\n', '    function getDisputeFees() external view returns (address recipient, IERC20 feeToken, uint256 feeAmount);\n', '\n', '    /**\n', '    * @dev Tell the payments recipient address\n', '    * @return Address of the payments recipient module\n', '    */\n', '    function getPaymentsRecipient() external view returns (address);\n', '}\n', '\n', '/*\n', ' * SPDX-License-Identifier:    MIT\n', ' */\n', '/**\n', "* @dev The Arbitrable instances actually don't require to follow any specific interface.\n", '*      Note that this is actually optional, although it does allow the Court to at least have a way to identify a specific set of instances.\n', '*/\n', 'contract IArbitrable {\n', '    /**\n', "    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\n", '    * @param arbitrator IArbitrator instance ruling the dispute\n', '    * @param disputeId Identification number of the dispute being ruled by the arbitrator\n', '    * @param ruling Ruling given by the arbitrator\n', '    */\n', '    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\n', '}\n', '\n', '// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/IsContract.sol\n', '// Adapted to use pragma ^0.5.17 and satisfy our linter rules\n', 'contract IsContract {\n', '    /*\n', '    * NOTE: this should NEVER be used for authentication\n', '    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n', '    *\n', '    * This is only intended to be used as a sanity check that an address is actually a contract,\n', '    * RATHER THAN an address not being a contract.\n', '    */\n', '    function isContract(address _target) internal view returns (bool) {\n', '        if (_target == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 size;\n', '        assembly { size := extcodesize(_target) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', 'contract ACL {\n', '    string private constant ERROR_BAD_FREEZE = "ACL_BAD_FREEZE";\n', '    string private constant ERROR_ROLE_ALREADY_FROZEN = "ACL_ROLE_ALREADY_FROZEN";\n', '    string private constant ERROR_INVALID_BULK_INPUT = "ACL_INVALID_BULK_INPUT";\n', '\n', '    enum BulkOp { Grant, Revoke, Freeze }\n', '\n', '    address internal constant FREEZE_FLAG = address(1);\n', '    address internal constant ANY_ADDR = address(-1);\n', '\n', '    // List of all roles assigned to different addresses\n', '    mapping (bytes32 => mapping (address => bool)) public roles;\n', '\n', '    event Granted(bytes32 indexed id, address indexed who);\n', '    event Revoked(bytes32 indexed id, address indexed who);\n', '    event Frozen(bytes32 indexed id);\n', '\n', '    /**\n', '    * @dev Tell whether an address has a role assigned\n', '    * @param _who Address being queried\n', '    * @param _id ID of the role being checked\n', '    * @return True if the requested address has assigned the given role, false otherwise\n', '    */\n', '    function hasRole(address _who, bytes32 _id) public view returns (bool) {\n', '        return roles[_id][_who] || roles[_id][ANY_ADDR];\n', '    }\n', '\n', '    /**\n', '    * @dev Tell whether a role is frozen\n', '    * @param _id ID of the role being checked\n', '    * @return True if the given role is frozen, false otherwise\n', '    */\n', '    function isRoleFrozen(bytes32 _id) public view returns (bool) {\n', '        return roles[_id][FREEZE_FLAG];\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to grant a role to a given address\n', '    * @param _id ID of the role to be granted\n', '    * @param _who Address to grant the role to\n', '    */\n', '    function _grant(bytes32 _id, address _who) internal {\n', '        require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);\n', '        require(_who != FREEZE_FLAG, ERROR_BAD_FREEZE);\n', '\n', '        if (!hasRole(_who, _id)) {\n', '            roles[_id][_who] = true;\n', '            emit Granted(_id, _who);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to revoke a role from a given address\n', '    * @param _id ID of the role to be revoked\n', '    * @param _who Address to revoke the role from\n', '    */\n', '    function _revoke(bytes32 _id, address _who) internal {\n', '        require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);\n', '\n', '        if (hasRole(_who, _id)) {\n', '            roles[_id][_who] = false;\n', '            emit Revoked(_id, _who);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to freeze a role\n', '    * @param _id ID of the role to be frozen\n', '    */\n', '    function _freeze(bytes32 _id) internal {\n', '        require(!isRoleFrozen(_id), ERROR_ROLE_ALREADY_FROZEN);\n', '        roles[_id][FREEZE_FLAG] = true;\n', '        emit Frozen(_id);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to enact a bulk list of ACL operations\n', '    */\n', '    function _bulk(BulkOp[] memory _op, bytes32[] memory _id, address[] memory _who) internal {\n', '        require(_op.length == _id.length && _op.length == _who.length, ERROR_INVALID_BULK_INPUT);\n', '\n', '        for (uint256 i = 0; i < _op.length; i++) {\n', '            BulkOp op = _op[i];\n', '            if (op == BulkOp.Grant) {\n', '                _grant(_id[i], _who[i]);\n', '            } else if (op == BulkOp.Revoke) {\n', '                _revoke(_id[i], _who[i]);\n', '            } else if (op == BulkOp.Freeze) {\n', '                _freeze(_id[i]);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract ModuleIds {\n', '    // DisputeManager module ID - keccak256(abi.encodePacked("DISPUTE_MANAGER"))\n', '    bytes32 internal constant MODULE_ID_DISPUTE_MANAGER = 0x14a6c70f0f6d449c014c7bbc9e68e31e79e8474fb03b7194df83109a2d888ae6;\n', '\n', '    // GuardiansRegistry module ID - keccak256(abi.encodePacked("GUARDIANS_REGISTRY"))\n', '    bytes32 internal constant MODULE_ID_GUARDIANS_REGISTRY = 0x8af7b7118de65da3b974a3fd4b0c702b66442f74b9dff6eaed1037254c0b79fe;\n', '\n', '    // Voting module ID - keccak256(abi.encodePacked("VOTING"))\n', '    bytes32 internal constant MODULE_ID_VOTING = 0x7cbb12e82a6d63ff16fe43977f43e3e2b247ecd4e62c0e340da8800a48c67346;\n', '\n', '    // PaymentsBook module ID - keccak256(abi.encodePacked("PAYMENTS_BOOK"))\n', '    bytes32 internal constant MODULE_ID_PAYMENTS_BOOK = 0xfa275b1417437a2a2ea8e91e9fe73c28eaf0a28532a250541da5ac0d1892b418;\n', '\n', '    // Treasury module ID - keccak256(abi.encodePacked("TREASURY"))\n', '    bytes32 internal constant MODULE_ID_TREASURY = 0x06aa03964db1f7257357ef09714a5f0ca3633723df419e97015e0c7a3e83edb7;\n', '}\n', '\n', 'interface IModulesLinker {\n', '    /**\n', '    * @notice Update the implementations of a list of modules\n', '    * @param _ids List of IDs of the modules to be updated\n', '    * @param _addresses List of module addresses to be updated\n', '    */\n', '    function linkModules(bytes32[] calldata _ids, address[] calldata _addresses) external;\n', '}\n', '\n', '// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/math/SafeMath64.sol\n', '// Adapted to use pragma ^0.5.17 and satisfy our linter rules\n', '/**\n', ' * @title SafeMath64\n', ' * @dev Math operations for uint64 with safety checks that revert on error\n', ' */\n', 'library SafeMath64 {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH64_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH64_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH64_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH64_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint256 c = uint256(_a) * uint256(_b);\n', '        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n', '\n', '        return uint64(c);\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint64 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint64 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '        uint64 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/TimeHelpers.sol\n', '// Adapted to use pragma ^0.5.17 and satisfy our linter rules\n', 'contract TimeHelpers {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /**\n', '    * @dev Returns the current block number.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current block number, converted to uint64.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber64() internal view returns (uint64) {\n', '        return getBlockNumber().toUint64();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp() internal view returns (uint256) {\n', '        return block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current timestamp, converted to uint64.\n', '    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n', '    *      tests.\n', '    */\n', '    function getTimestamp64() internal view returns (uint64) {\n', '        return getTimestamp().toUint64();\n', '    }\n', '}\n', '\n', 'interface IClock {\n', '    /**\n', '    * @dev Ensure that the current term of the clock is up-to-date\n', '    * @return Identification number of the current term\n', '    */\n', '    function ensureCurrentTerm() external returns (uint64);\n', '\n', '    /**\n', '    * @dev Transition up to a certain number of terms to leave the clock up-to-date\n', '    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\n', '    * @return Identification number of the term ID after executing the heartbeat transitions\n', '    */\n', '    function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64);\n', '\n', '    /**\n', '    * @dev Ensure that a certain term has its randomness set\n', '    * @return Randomness of the current term\n', '    */\n', '    function ensureCurrentTermRandomness() external returns (bytes32);\n', '\n', '    /**\n', '    * @dev Tell the last ensured term identification number\n', '    * @return Identification number of the last ensured term\n', '    */\n', '    function getLastEnsuredTermId() external view returns (uint64);\n', '\n', '    /**\n', '    * @dev Tell the current term identification number. Note that there may be pending term transitions.\n', '    * @return Identification number of the current term\n', '    */\n', '    function getCurrentTermId() external view returns (uint64);\n', '\n', '    /**\n', '    * @dev Tell the number of terms the clock should transition to be up-to-date\n', '    * @return Number of terms the clock should transition to be up-to-date\n', '    */\n', '    function getNeededTermTransitions() external view returns (uint64);\n', '\n', '    /**\n', '    * @dev Tell the information related to a term based on its ID\n', '    * @param _termId ID of the term being queried\n', '    * @return startTime Term start time\n', '    * @return randomnessBN Block number used for randomness in the requested term\n', '    * @return randomness Randomness computed for the requested term\n', '    */\n', '    function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness);\n', '\n', '    /**\n', "    * @dev Tell the randomness of a term even if it wasn't computed yet\n", '    * @param _termId Identification number of the term being queried\n', '    * @return Randomness of the requested term\n', '    */\n', '    function getTermRandomness(uint64 _termId) external view returns (bytes32);\n', '}\n', '\n', 'contract CourtClock is IClock, TimeHelpers {\n', '    using SafeMath64 for uint64;\n', '\n', '    string private constant ERROR_TERM_DOES_NOT_EXIST = "CLK_TERM_DOES_NOT_EXIST";\n', '    string private constant ERROR_TERM_DURATION_TOO_LONG = "CLK_TERM_DURATION_TOO_LONG";\n', '    string private constant ERROR_TERM_RANDOMNESS_NOT_YET = "CLK_TERM_RANDOMNESS_NOT_YET";\n', '    string private constant ERROR_TERM_RANDOMNESS_UNAVAILABLE = "CLK_TERM_RANDOMNESS_UNAVAILABLE";\n', '    string private constant ERROR_BAD_FIRST_TERM_START_TIME = "CLK_BAD_FIRST_TERM_START_TIME";\n', '    string private constant ERROR_TOO_MANY_TRANSITIONS = "CLK_TOO_MANY_TRANSITIONS";\n', '    string private constant ERROR_INVALID_TRANSITION_TERMS = "CLK_INVALID_TRANSITION_TERMS";\n', '    string private constant ERROR_CANNOT_DELAY_STARTED_COURT = "CLK_CANNOT_DELAY_STARTED_PROT";\n', '    string private constant ERROR_CANNOT_DELAY_PAST_START_TIME = "CLK_CANNOT_DELAY_PAST_START_TIME";\n', '\n', '    // Maximum number of term transitions a callee may have to assume in order to call certain functions that require the Court being up-to-date\n', '    uint64 internal constant MAX_AUTO_TERM_TRANSITIONS_ALLOWED = 1;\n', '\n', '    // Max duration in seconds that a term can last\n', '    uint64 internal constant MAX_TERM_DURATION = 365 days;\n', '\n', '    // Max time until first term starts since contract is deployed\n', '    uint64 internal constant MAX_FIRST_TERM_DELAY_PERIOD = 2 * MAX_TERM_DURATION;\n', '\n', '    struct Term {\n', '        uint64 startTime;              // Timestamp when the term started\n', '        uint64 randomnessBN;           // Block number for entropy\n', '        bytes32 randomness;            // Entropy from randomnessBN block hash\n', '    }\n', '\n', '    // Duration in seconds for each term of the Court\n', '    uint64 private termDuration;\n', '\n', '    // Last ensured term id\n', '    uint64 private termId;\n', '\n', '    // List of Court terms indexed by id\n', '    mapping (uint64 => Term) private terms;\n', '\n', '    event Heartbeat(uint64 previousTermId, uint64 currentTermId);\n', '    event StartTimeDelayed(uint64 previousStartTime, uint64 currentStartTime);\n', '\n', '    /**\n', '    * @dev Ensure a certain term has already been processed\n', '    * @param _termId Identification number of the term to be checked\n', '    */\n', '    modifier termExists(uint64 _termId) {\n', '        require(_termId <= termId, ERROR_TERM_DOES_NOT_EXIST);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    * @param _termParams Array containing:\n', '    *        0. _termDuration Duration in seconds per term\n', '    *        1. _firstTermStartTime Timestamp in seconds when the court will open (to give time for guardian on-boarding)\n', '    */\n', '    constructor(uint64[2] memory _termParams) public {\n', '        uint64 _termDuration = _termParams[0];\n', '        uint64 _firstTermStartTime = _termParams[1];\n', '\n', '        require(_termDuration < MAX_TERM_DURATION, ERROR_TERM_DURATION_TOO_LONG);\n', '        require(_firstTermStartTime >= getTimestamp64() + _termDuration, ERROR_BAD_FIRST_TERM_START_TIME);\n', '        require(_firstTermStartTime <= getTimestamp64() + MAX_FIRST_TERM_DELAY_PERIOD, ERROR_BAD_FIRST_TERM_START_TIME);\n', '\n', '        termDuration = _termDuration;\n', '\n', '        // No need for SafeMath: we already checked values above\n', '        terms[0].startTime = _firstTermStartTime - _termDuration;\n', '    }\n', '\n', '    /**\n', '    * @notice Ensure that the current term of the Court is up-to-date. If the Court is outdated by more than `MAX_AUTO_TERM_TRANSITIONS_ALLOWED`\n', '    *         terms, the heartbeat function must be called manually instead.\n', '    * @return Identification number of the current term\n', '    */\n', '    function ensureCurrentTerm() external returns (uint64) {\n', '        return _ensureCurrentTerm();\n', '    }\n', '\n', '    /**\n', '    * @notice Transition up to `_maxRequestedTransitions` terms\n', '    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\n', '    * @return Identification number of the term ID after executing the heartbeat transitions\n', '    */\n', '    function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64) {\n', '        return _heartbeat(_maxRequestedTransitions);\n', '    }\n', '\n', '    /**\n', '    * @notice Ensure that a certain term has its randomness set. As we allow to draft disputes requested for previous terms, if there\n', '    *      were mined more than 256 blocks for the current term, the blockhash of its randomness BN is no longer available, given\n', '    *      round will be able to be drafted in the following term.\n', '    * @return Randomness of the current term\n', '    */\n', '    function ensureCurrentTermRandomness() external returns (bytes32) {\n', '        // If the randomness for the given term was already computed, return\n', '        uint64 currentTermId = termId;\n', '        Term storage term = terms[currentTermId];\n', '        bytes32 termRandomness = term.randomness;\n', '        if (termRandomness != bytes32(0)) {\n', '            return termRandomness;\n', '        }\n', '\n', '        // Compute term randomness\n', '        bytes32 newRandomness = _computeTermRandomness(currentTermId);\n', '        require(newRandomness != bytes32(0), ERROR_TERM_RANDOMNESS_UNAVAILABLE);\n', '        term.randomness = newRandomness;\n', '        return newRandomness;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the term duration of the Court\n', '    * @return Duration in seconds of the Court term\n', '    */\n', '    function getTermDuration() external view returns (uint64) {\n', '        return termDuration;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the last ensured term identification number\n', '    * @return Identification number of the last ensured term\n', '    */\n', '    function getLastEnsuredTermId() external view returns (uint64) {\n', '        return _lastEnsuredTermId();\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the current term identification number. Note that there may be pending term transitions.\n', '    * @return Identification number of the current term\n', '    */\n', '    function getCurrentTermId() external view returns (uint64) {\n', '        return _currentTermId();\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the number of terms the Court should transition to be up-to-date\n', '    * @return Number of terms the Court should transition to be up-to-date\n', '    */\n', '    function getNeededTermTransitions() external view returns (uint64) {\n', '        return _neededTermTransitions();\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information related to a term based on its ID. Note that if the term has not been reached, the\n', "    *      information returned won't be computed yet. This function allows querying future terms that were not computed yet.\n", '    * @param _termId ID of the term being queried\n', '    * @return startTime Term start time\n', '    * @return randomnessBN Block number used for randomness in the requested term\n', '    * @return randomness Randomness computed for the requested term\n', '    */\n', '    function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness) {\n', '        Term storage term = terms[_termId];\n', '        return (term.startTime, term.randomnessBN, term.randomness);\n', '    }\n', '\n', '    /**\n', "    * @dev Tell the randomness of a term even if it wasn't computed yet\n", '    * @param _termId Identification number of the term being queried\n', '    * @return Randomness of the requested term\n', '    */\n', '    function getTermRandomness(uint64 _termId) external view termExists(_termId) returns (bytes32) {\n', '        return _computeTermRandomness(_termId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to ensure that the current term of the Court is up-to-date. If the Court is outdated by more than\n', '    *      `MAX_AUTO_TERM_TRANSITIONS_ALLOWED` terms, the heartbeat function must be called manually.\n', '    * @return Identification number of the resultant term ID after executing the corresponding transitions\n', '    */\n', '    function _ensureCurrentTerm() internal returns (uint64) {\n', '        // Check the required number of transitions does not exceeds the max allowed number to be processed automatically\n', '        uint64 requiredTransitions = _neededTermTransitions();\n', '        require(requiredTransitions <= MAX_AUTO_TERM_TRANSITIONS_ALLOWED, ERROR_TOO_MANY_TRANSITIONS);\n', '\n', '        // If there are no transitions pending, return the last ensured term id\n', '        if (uint256(requiredTransitions) == 0) {\n', '            return termId;\n', '        }\n', '\n', '        // Process transition if there is at least one pending\n', '        return _heartbeat(requiredTransitions);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to transition the Court terms up to a requested number of terms\n', '    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\n', '    * @return Identification number of the resultant term ID after executing the requested transitions\n', '    */\n', '    function _heartbeat(uint64 _maxRequestedTransitions) internal returns (uint64) {\n', '        // Transition the minimum number of terms between the amount requested and the amount actually needed\n', '        uint64 neededTransitions = _neededTermTransitions();\n', '        uint256 transitions = uint256(_maxRequestedTransitions < neededTransitions ? _maxRequestedTransitions : neededTransitions);\n', '        require(transitions > 0, ERROR_INVALID_TRANSITION_TERMS);\n', '\n', '        uint64 blockNumber = getBlockNumber64();\n', '        uint64 previousTermId = termId;\n', '        uint64 currentTermId = previousTermId;\n', '        for (uint256 transition = 1; transition <= transitions; transition++) {\n', '            // Term IDs are incremented by one based on the number of time periods since the Court started. Since time is represented in uint64,\n', '            // even if we chose the minimum duration possible for a term (1 second), we can ensure terms will never reach 2^64 since time is\n', '            // already assumed to fit in uint64.\n', '            Term storage previousTerm = terms[currentTermId++];\n', '            Term storage currentTerm = terms[currentTermId];\n', '            _onTermTransitioned(currentTermId);\n', '\n', '            // Set the start time of the new term. Note that we are using a constant term duration value to guarantee\n', '            // equally long terms, regardless of heartbeats.\n', '            currentTerm.startTime = previousTerm.startTime.add(termDuration);\n', '\n', '            // In order to draft a random number of guardians in a term, we use a randomness factor for each term based on a\n', '            // block number that is set once the term has started. Note that this information could not be known beforehand.\n', '            currentTerm.randomnessBN = blockNumber + 1;\n', '        }\n', '\n', '        termId = currentTermId;\n', '        emit Heartbeat(previousTermId, currentTermId);\n', '        return currentTermId;\n', '    }\n', '\n', '    /**\n', "    * @dev Internal function to delay the first term start time only if it wasn't reached yet\n", '    * @param _newFirstTermStartTime New timestamp in seconds when the court will open\n', '    */\n', '    function _delayStartTime(uint64 _newFirstTermStartTime) internal {\n', '        require(_currentTermId() == 0, ERROR_CANNOT_DELAY_STARTED_COURT);\n', '\n', '        Term storage term = terms[0];\n', '        uint64 currentFirstTermStartTime = term.startTime.add(termDuration);\n', '        require(_newFirstTermStartTime > currentFirstTermStartTime, ERROR_CANNOT_DELAY_PAST_START_TIME);\n', '\n', '        // No need for SafeMath: we already checked above that `_newFirstTermStartTime` > `currentFirstTermStartTime` >= `termDuration`\n', '        term.startTime = _newFirstTermStartTime - termDuration;\n', '        emit StartTimeDelayed(currentFirstTermStartTime, _newFirstTermStartTime);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to notify when a term has been transitioned. This function must be overridden to provide custom behavior.\n', '    * @param _termId Identification number of the new current term that has been transitioned\n', '    */\n', '    function _onTermTransitioned(uint64 _termId) internal;\n', '\n', '    /**\n', '    * @dev Internal function to tell the last ensured term identification number\n', '    * @return Identification number of the last ensured term\n', '    */\n', '    function _lastEnsuredTermId() internal view returns (uint64) {\n', '        return termId;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to tell the current term identification number. Note that there may be pending term transitions.\n', '    * @return Identification number of the current term\n', '    */\n', '    function _currentTermId() internal view returns (uint64) {\n', '        return termId.add(_neededTermTransitions());\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to tell the number of terms the Court should transition to be up-to-date\n', '    * @return Number of terms the Court should transition to be up-to-date\n', '    */\n', '    function _neededTermTransitions() internal view returns (uint64) {\n', "        // Note that the Court is always initialized providing a start time for the first-term in the future. If that's the case,\n", '        // no term transitions are required.\n', '        uint64 currentTermStartTime = terms[termId].startTime;\n', '        if (getTimestamp64() < currentTermStartTime) {\n', '            return uint64(0);\n', '        }\n', '\n', '        // No need for SafeMath: we already know that the start time of the current term is in the past\n', '        return (getTimestamp64() - currentTermStartTime) / termDuration;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to compute the randomness that will be used to draft guardians for the given term. This\n', '    *      function assumes the given term exists. To determine the randomness factor for a term we use the hash of a\n', '    *      block number that is set once the term has started to ensure it cannot be known beforehand. Note that the\n', '    *      hash function being used only works for the 256 most recent block numbers.\n', '    * @param _termId Identification number of the term being queried\n', '    * @return Randomness computed for the given term\n', '    */\n', '    function _computeTermRandomness(uint64 _termId) internal view returns (bytes32) {\n', '        Term storage term = terms[_termId];\n', '        require(getBlockNumber64() > term.randomnessBN, ERROR_TERM_RANDOMNESS_NOT_YET);\n', '        return blockhash(term.randomnessBN);\n', '    }\n', '}\n', '\n', '// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/math/SafeMath.sol\n', '// Adapted to use pragma ^0.5.17 and satisfy our linter rules\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library PctHelpers {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant PCT_BASE = 10000; // ‱ (1 / 10,000)\n', '\n', '    function isValid(uint16 _pct) internal pure returns (bool) {\n', '        return _pct <= PCT_BASE;\n', '    }\n', '\n', '    function pct(uint256 self, uint16 _pct) internal pure returns (uint256) {\n', '        return self.mul(uint256(_pct)) / PCT_BASE;\n', '    }\n', '\n', '    function pct256(uint256 self, uint256 _pct) internal pure returns (uint256) {\n', '        return self.mul(_pct) / PCT_BASE;\n', '    }\n', '\n', '    function pctIncrease(uint256 self, uint16 _pct) internal pure returns (uint256) {\n', '        // No need for SafeMath: for addition note that `PCT_BASE` is lower than (2^256 - 2^16)\n', '        return self.mul(PCT_BASE + uint256(_pct)) / PCT_BASE;\n', '    }\n', '}\n', '\n', 'interface IConfig {\n', '\n', '    /**\n', '    * @dev Tell the full Court configuration parameters at a certain term\n', '    * @param _termId Identification number of the term querying the Court config of\n', '    * @return token Address of the token used to pay for fees\n', '    * @return fees Array containing:\n', '    *         0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *         1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *         2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *         0. evidenceTerms Max submitting evidence period duration in terms\n', '    *         1. commitTerms Commit period duration in terms\n', '    *         2. revealTerms Reveal period duration in terms\n', '    *         3. appealTerms Appeal period duration in terms\n', '    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @return pcts Array containing:\n', '    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @return roundParams Array containing params for rounds:\n', '    *         0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *         1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    * @return appealCollateralParams Array containing params for appeal collateral:\n', '    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    * @return minActiveBalance Minimum amount of tokens guardians have to activate to participate in the Court\n', '    */\n', '    function getConfig(uint64 _termId) external view\n', '        returns (\n', '            IERC20 feeToken,\n', '            uint256[3] memory fees,\n', '            uint64[5] memory roundStateDurations,\n', '            uint16[2] memory pcts,\n', '            uint64[4] memory roundParams,\n', '            uint256[2] memory appealCollateralParams,\n', '            uint256 minActiveBalance\n', '        );\n', '\n', '    /**\n', '    * @dev Tell the draft config at a certain term\n', '    * @param _termId Identification number of the term querying the draft config of\n', '    * @return feeToken Address of the token used to pay for fees\n', '    * @return draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    */\n', '    function getDraftConfig(uint64 _termId) external view returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct);\n', '\n', '    /**\n', '    * @dev Tell the min active balance config at a certain term\n', '    * @param _termId Term querying the min active balance config of\n', '    * @return Minimum amount of tokens guardians have to activate to participate in the Court\n', '    */\n', '    function getMinActiveBalance(uint64 _termId) external view returns (uint256);\n', '}\n', '\n', 'contract CourtConfigData {\n', '    struct Config {\n', '        FeesConfig fees;                        // Full fees-related config\n', '        DisputesConfig disputes;                // Full disputes-related config\n', '        uint256 minActiveBalance;               // Minimum amount of tokens guardians have to activate to participate in the Court\n', '    }\n', '\n', '    struct FeesConfig {\n', '        IERC20 token;                           // ERC20 token to be used for the fees of the Court\n', '        uint16 finalRoundReduction;             // Permyriad of fees reduction applied for final appeal round (‱ - 1/10,000)\n', '        uint256 guardianFee;                    // Amount of tokens paid to draft a guardian to adjudicate a dispute\n', '        uint256 draftFee;                       // Amount of tokens paid per round to cover the costs of drafting guardians\n', '        uint256 settleFee;                      // Amount of tokens paid per round to cover the costs of slashing guardians\n', '    }\n', '\n', '    struct DisputesConfig {\n', '        uint64 evidenceTerms;                   // Max submitting evidence period duration in terms\n', '        uint64 commitTerms;                     // Committing period duration in terms\n', '        uint64 revealTerms;                     // Revealing period duration in terms\n', '        uint64 appealTerms;                     // Appealing period duration in terms\n', '        uint64 appealConfirmTerms;              // Confirmation appeal period duration in terms\n', '        uint16 penaltyPct;                      // Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '        uint64 firstRoundGuardiansNumber;       // Number of guardians drafted on first round\n', '        uint64 appealStepFactor;                // Factor in which the guardians number is increased on each appeal\n', '        uint64 finalRoundLockTerms;             // Period a coherent guardian in the final round will remain locked\n', '        uint256 maxRegularAppealRounds;         // Before the final appeal\n', '        uint256 appealCollateralFactor;         // Permyriad multiple of dispute fees required to appeal a preliminary ruling (‱ - 1/10,000)\n', '        uint256 appealConfirmCollateralFactor;  // Permyriad multiple of dispute fees required to confirm appeal (‱ - 1/10,000)\n', '    }\n', '\n', '    struct DraftConfig {\n', '        IERC20 feeToken;                         // ERC20 token to be used for the fees of the Court\n', '        uint16 penaltyPct;                      // Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '        uint256 draftFee;                       // Amount of tokens paid per round to cover the costs of drafting guardians\n', '    }\n', '}\n', '\n', 'contract CourtConfig is IConfig, CourtConfigData {\n', '    using SafeMath64 for uint64;\n', '    using PctHelpers for uint256;\n', '\n', '    string private constant ERROR_TOO_OLD_TERM = "CONF_TOO_OLD_TERM";\n', '    string private constant ERROR_INVALID_PENALTY_PCT = "CONF_INVALID_PENALTY_PCT";\n', '    string private constant ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT = "CONF_INVALID_FINAL_ROUND_RED_PCT";\n', '    string private constant ERROR_INVALID_MAX_APPEAL_ROUNDS = "CONF_INVALID_MAX_APPEAL_ROUNDS";\n', '    string private constant ERROR_LARGE_ROUND_PHASE_DURATION = "CONF_LARGE_ROUND_PHASE_DURATION";\n', '    string private constant ERROR_BAD_INITIAL_GUARDIANS_NUMBER = "CONF_BAD_INITIAL_GUARDIAN_NUMBER";\n', '    string private constant ERROR_BAD_APPEAL_STEP_FACTOR = "CONF_BAD_APPEAL_STEP_FACTOR";\n', '    string private constant ERROR_ZERO_COLLATERAL_FACTOR = "CONF_ZERO_COLLATERAL_FACTOR";\n', '    string private constant ERROR_ZERO_MIN_ACTIVE_BALANCE = "CONF_ZERO_MIN_ACTIVE_BALANCE";\n', '\n', '    // Max number of terms that each of the different adjudication states can last (if lasted 1h, this would be a year)\n', '    uint64 internal constant MAX_ADJ_STATE_DURATION = 8670;\n', '\n', '    // Cap the max number of regular appeal rounds\n', '    uint256 internal constant MAX_REGULAR_APPEAL_ROUNDS_LIMIT = 10;\n', '\n', '    // Future term ID in which a config change has been scheduled\n', '    uint64 private configChangeTermId;\n', '\n', '    // List of all the configs used in the Court\n', '    Config[] private configs;\n', '\n', '    // List of configs indexed by id\n', '    mapping (uint64 => uint256) private configIdByTerm;\n', '\n', '    event NewConfig(uint64 fromTermId, uint64 courtConfigId);\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    * @param _feeToken Address of the token contract that is used to pay for fees\n', '    * @param _fees Array containing:\n', '    *        0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *        1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *        2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *        0. evidenceTerms Max submitting evidence period duration in terms\n', '    *        1. commitTerms Commit period duration in terms\n', '    *        2. revealTerms Reveal period duration in terms\n', '    *        3. appealTerms Appeal period duration in terms\n', '    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @param _pcts Array containing:\n', '    *        0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @param _roundParams Array containing params for rounds:\n', '    *        0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *        1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *        3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @param _appealCollateralParams Array containing params for appeal collateral:\n', '    *        0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *        1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    * @param _minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    constructor(\n', '        IERC20 _feeToken,\n', '        uint256[3] memory _fees,\n', '        uint64[5] memory _roundStateDurations,\n', '        uint16[2] memory _pcts,\n', '        uint64[4] memory _roundParams,\n', '        uint256[2] memory _appealCollateralParams,\n', '        uint256 _minActiveBalance\n', '    )\n', '        public\n', '    {\n', '        // Leave config at index 0 empty for non-scheduled config changes\n', '        configs.length = 1;\n', '        _setConfig(\n', '            0,\n', '            0,\n', '            _feeToken,\n', '            _fees,\n', '            _roundStateDurations,\n', '            _pcts,\n', '            _roundParams,\n', '            _appealCollateralParams,\n', '            _minActiveBalance\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the full Court configuration parameters at a certain term\n', '    * @param _termId Identification number of the term querying the Court config of\n', '    * @return token Address of the token used to pay for fees\n', '    * @return fees Array containing:\n', '    *         0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *         1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *         2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *         0. evidenceTerms Max submitting evidence period duration in terms\n', '    *         1. commitTerms Commit period duration in terms\n', '    *         2. revealTerms Reveal period duration in terms\n', '    *         3. appealTerms Appeal period duration in terms\n', '    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @return pcts Array containing:\n', '    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @return roundParams Array containing params for rounds:\n', '    *         0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *         1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    * @return appealCollateralParams Array containing params for appeal collateral:\n', '    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    * @return minActiveBalance Minimum amount of tokens guardians have to activate to participate in the Court\n', '    */\n', '    function getConfig(uint64 _termId) external view\n', '        returns (\n', '            IERC20 feeToken,\n', '            uint256[3] memory fees,\n', '            uint64[5] memory roundStateDurations,\n', '            uint16[2] memory pcts,\n', '            uint64[4] memory roundParams,\n', '            uint256[2] memory appealCollateralParams,\n', '            uint256 minActiveBalance\n', '        );\n', '\n', '    /**\n', '    * @dev Tell the draft config at a certain term\n', '    * @param _termId Identification number of the term querying the draft config of\n', '    * @return feeToken Address of the token used to pay for fees\n', '    * @return draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    */\n', '    function getDraftConfig(uint64 _termId) external view returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct);\n', '\n', '    /**\n', '    * @dev Tell the min active balance config at a certain term\n', '    * @param _termId Term querying the min active balance config of\n', '    * @return Minimum amount of tokens guardians have to activate to participate in the Court\n', '    */\n', '    function getMinActiveBalance(uint64 _termId) external view returns (uint256);\n', '\n', '    /**\n', '    * @dev Tell the term identification number of the next scheduled config change\n', '    * @return Term identification number of the next scheduled config change\n', '    */\n', '    function getConfigChangeTermId() external view returns (uint64) {\n', '        return configChangeTermId;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal to make sure to set a config for the new term, it will copy the previous term config if none\n', '    * @param _termId Identification number of the new current term that has been transitioned\n', '    */\n', '    function _ensureTermConfig(uint64 _termId) internal {\n', '        // If the term being transitioned had no config change scheduled, keep the previous one\n', '        uint256 currentConfigId = configIdByTerm[_termId];\n', '        if (currentConfigId == 0) {\n', '            uint256 previousConfigId = configIdByTerm[_termId.sub(1)];\n', '            configIdByTerm[_termId] = previousConfigId;\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @dev Assumes that sender it's allowed (either it's from governor or it's on init)\n", '    * @param _termId Identification number of the current Court term\n', '    * @param _fromTermId Identification number of the term in which the config will be effective at\n', '    * @param _feeToken Address of the token contract that is used to pay for fees.\n', '    * @param _fees Array containing:\n', '    *        0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *        1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *        2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *        0. evidenceTerms Max submitting evidence period duration in terms\n', '    *        1. commitTerms Commit period duration in terms\n', '    *        2. revealTerms Reveal period duration in terms\n', '    *        3. appealTerms Appeal period duration in terms\n', '    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @param _pcts Array containing:\n', '    *        0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @param _roundParams Array containing params for rounds:\n', '    *        0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *        1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *        3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @param _appealCollateralParams Array containing params for appeal collateral:\n', '    *        0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *        1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    * @param _minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    function _setConfig(\n', '        uint64 _termId,\n', '        uint64 _fromTermId,\n', '        IERC20 _feeToken,\n', '        uint256[3] memory _fees,\n', '        uint64[5] memory _roundStateDurations,\n', '        uint16[2] memory _pcts,\n', '        uint64[4] memory _roundParams,\n', '        uint256[2] memory _appealCollateralParams,\n', '        uint256 _minActiveBalance\n', '    )\n', '        internal\n', '    {\n', '        // If the current term is not zero, changes must be scheduled at least after the current period.\n', '        // No need to ensure delays for on-going disputes since these already use their creation term for that.\n', '        require(_termId == 0 || _fromTermId > _termId, ERROR_TOO_OLD_TERM);\n', '\n', '        // Make sure appeal collateral factors are greater than zero\n', '        require(_appealCollateralParams[0] > 0 && _appealCollateralParams[1] > 0, ERROR_ZERO_COLLATERAL_FACTOR);\n', '\n', '        // Make sure the given penalty and final round reduction pcts are not greater than 100%\n', '        require(PctHelpers.isValid(_pcts[0]), ERROR_INVALID_PENALTY_PCT);\n', '        require(PctHelpers.isValid(_pcts[1]), ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT);\n', '\n', '        // Disputes must request at least one guardian to be drafted initially\n', '        require(_roundParams[0] > 0, ERROR_BAD_INITIAL_GUARDIANS_NUMBER);\n', '\n', '        // Prevent that further rounds have zero guardians\n', '        require(_roundParams[1] > 0, ERROR_BAD_APPEAL_STEP_FACTOR);\n', '\n', '        // Make sure the max number of appeals allowed does not reach the limit\n', '        uint256 _maxRegularAppealRounds = _roundParams[2];\n', '        bool isMaxAppealRoundsValid = _maxRegularAppealRounds > 0 && _maxRegularAppealRounds <= MAX_REGULAR_APPEAL_ROUNDS_LIMIT;\n', '        require(isMaxAppealRoundsValid, ERROR_INVALID_MAX_APPEAL_ROUNDS);\n', '\n', '        // Make sure each adjudication round phase duration is valid\n', '        for (uint i = 0; i < _roundStateDurations.length; i++) {\n', '            require(_roundStateDurations[i] > 0 && _roundStateDurations[i] < MAX_ADJ_STATE_DURATION, ERROR_LARGE_ROUND_PHASE_DURATION);\n', '        }\n', '\n', '        // Make sure min active balance is not zero\n', '        require(_minActiveBalance > 0, ERROR_ZERO_MIN_ACTIVE_BALANCE);\n', '\n', '        // If there was a config change already scheduled, reset it (in that case we will overwrite last array item).\n', '        // Otherwise, schedule a new config.\n', '        if (configChangeTermId > _termId) {\n', '            configIdByTerm[configChangeTermId] = 0;\n', '        } else {\n', '            configs.length++;\n', '        }\n', '\n', '        uint64 courtConfigId = uint64(configs.length - 1);\n', '        Config storage config = configs[courtConfigId];\n', '\n', '        config.fees = FeesConfig({\n', '            token: _feeToken,\n', '            guardianFee: _fees[0],\n', '            draftFee: _fees[1],\n', '            settleFee: _fees[2],\n', '            finalRoundReduction: _pcts[1]\n', '        });\n', '\n', '        config.disputes = DisputesConfig({\n', '            evidenceTerms: _roundStateDurations[0],\n', '            commitTerms: _roundStateDurations[1],\n', '            revealTerms: _roundStateDurations[2],\n', '            appealTerms: _roundStateDurations[3],\n', '            appealConfirmTerms: _roundStateDurations[4],\n', '            penaltyPct: _pcts[0],\n', '            firstRoundGuardiansNumber: _roundParams[0],\n', '            appealStepFactor: _roundParams[1],\n', '            maxRegularAppealRounds: _maxRegularAppealRounds,\n', '            finalRoundLockTerms: _roundParams[3],\n', '            appealCollateralFactor: _appealCollateralParams[0],\n', '            appealConfirmCollateralFactor: _appealCollateralParams[1]\n', '        });\n', '\n', '        config.minActiveBalance = _minActiveBalance;\n', '\n', '        configIdByTerm[_fromTermId] = courtConfigId;\n', '        configChangeTermId = _fromTermId;\n', '\n', '        emit NewConfig(_fromTermId, courtConfigId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to get the Court config for a given term\n', '    * @param _termId Identification number of the term querying the Court config of\n', '    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\n', '    * @return token Address of the token used to pay for fees\n', '    * @return fees Array containing:\n', '    *         0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *         1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *         2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *         0. evidenceTerms Max submitting evidence period duration in terms\n', '    *         1. commitTerms Commit period duration in terms\n', '    *         2. revealTerms Reveal period duration in terms\n', '    *         3. appealTerms Appeal period duration in terms\n', '    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @return pcts Array containing:\n', '    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @return roundParams Array containing params for rounds:\n', '    *         0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *         1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *         3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @return appealCollateralParams Array containing params for appeal collateral:\n', '    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    * @return minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    function _getConfigAt(uint64 _termId, uint64 _lastEnsuredTermId) internal view\n', '        returns (\n', '            IERC20 feeToken,\n', '            uint256[3] memory fees,\n', '            uint64[5] memory roundStateDurations,\n', '            uint16[2] memory pcts,\n', '            uint64[4] memory roundParams,\n', '            uint256[2] memory appealCollateralParams,\n', '            uint256 minActiveBalance\n', '        )\n', '    {\n', '        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\n', '\n', '        FeesConfig storage feesConfig = config.fees;\n', '        feeToken = feesConfig.token;\n', '        fees = [feesConfig.guardianFee, feesConfig.draftFee, feesConfig.settleFee];\n', '\n', '        DisputesConfig storage disputesConfig = config.disputes;\n', '        roundStateDurations = [\n', '            disputesConfig.evidenceTerms,\n', '            disputesConfig.commitTerms,\n', '            disputesConfig.revealTerms,\n', '            disputesConfig.appealTerms,\n', '            disputesConfig.appealConfirmTerms\n', '        ];\n', '        pcts = [disputesConfig.penaltyPct, feesConfig.finalRoundReduction];\n', '        roundParams = [\n', '            disputesConfig.firstRoundGuardiansNumber,\n', '            disputesConfig.appealStepFactor,\n', '            uint64(disputesConfig.maxRegularAppealRounds),\n', '            disputesConfig.finalRoundLockTerms\n', '        ];\n', '        appealCollateralParams = [disputesConfig.appealCollateralFactor, disputesConfig.appealConfirmCollateralFactor];\n', '\n', '        minActiveBalance = config.minActiveBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the draft config at a certain term\n', '    * @param _termId Identification number of the term querying the draft config of\n', '    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\n', '    * @return feeToken Address of the token used to pay for fees\n', '    * @return draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    */\n', '    function _getDraftConfig(uint64 _termId,  uint64 _lastEnsuredTermId) internal view\n', '        returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct)\n', '    {\n', '        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\n', '        return (config.fees.token, config.fees.draftFee, config.disputes.penaltyPct);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to get the min active balance config for a given term\n', '    * @param _termId Identification number of the term querying the min active balance config of\n', '    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\n', '    * @return Minimum amount of guardian tokens that can be activated at the given term\n', '    */\n', '    function _getMinActiveBalance(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (uint256) {\n', '        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\n', '        return config.minActiveBalance;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to get the Court config for a given term\n', '    * @param _termId Identification number of the term querying the min active balance config of\n', '    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\n', '    * @return Court config for the given term\n', '    */\n', '    function _getConfigFor(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (Config storage) {\n', '        uint256 id = _getConfigIdFor(_termId, _lastEnsuredTermId);\n', '        return configs[id];\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to get the Court config ID for a given term\n', '    * @param _termId Identification number of the term querying the Court config of\n', '    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\n', '    * @return Identification number of the config for the given terms\n', '    */\n', '    function _getConfigIdFor(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (uint256) {\n', '        // If the given term is lower or equal to the last ensured Court term, it is safe to use a past Court config\n', '        if (_termId <= _lastEnsuredTermId) {\n', '            return configIdByTerm[_termId];\n', '        }\n', '\n', '        // If the given term is in the future but there is a config change scheduled before it, use the incoming config\n', '        uint64 scheduledChangeTermId = configChangeTermId;\n', '        if (scheduledChangeTermId <= _termId) {\n', '            return configIdByTerm[scheduledChangeTermId];\n', '        }\n', '\n', '        // If no changes are scheduled, use the Court config of the last ensured term\n', '        return configIdByTerm[_lastEnsuredTermId];\n', '    }\n', '}\n', '\n', 'interface IDisputeManager {\n', '    enum DisputeState {\n', '        PreDraft,\n', '        Adjudicating,\n', '        Ruled\n', '    }\n', '\n', '    enum AdjudicationState {\n', '        Invalid,\n', '        Committing,\n', '        Revealing,\n', '        Appealing,\n', '        ConfirmingAppeal,\n', '        Ended\n', '    }\n', '\n', '    /**\n', '    * @dev Create a dispute to be drafted in a future term\n', '    * @param _subject Arbitrable instance creating the dispute\n', '    * @param _possibleRulings Number of possible rulings allowed for the drafted guardians to vote on the dispute\n', '    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\n', '    * @return Dispute identification number\n', '    */\n', '    function createDispute(IArbitrable _subject, uint8 _possibleRulings, bytes calldata _metadata) external returns (uint256);\n', '\n', '    /**\n', '    * @dev Submit evidence for a dispute\n', '    * @param _subject Arbitrable instance submitting the dispute\n', '    * @param _disputeId Identification number of the dispute receiving new evidence\n', '    * @param _submitter Address of the account submitting the evidence\n', '    * @param _evidence Data submitted for the evidence of the dispute\n', '    */\n', '    function submitEvidence(IArbitrable _subject, uint256 _disputeId, address _submitter, bytes calldata _evidence) external;\n', '\n', '    /**\n', '    * @dev Close the evidence period of a dispute\n', '    * @param _subject IArbitrable instance requesting to close the evidence submission period\n', '    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n', '    */\n', '    function closeEvidencePeriod(IArbitrable _subject, uint256 _disputeId) external;\n', '\n', '    /**\n', '    * @dev Draft guardians for the next round of a dispute\n', '    * @param _disputeId Identification number of the dispute to be drafted\n', '    */\n', '    function draft(uint256 _disputeId) external;\n', '\n', '    /**\n', '    * @dev Appeal round of a dispute in favor of a certain ruling\n', '    * @param _disputeId Identification number of the dispute being appealed\n', '    * @param _roundId Identification number of the dispute round being appealed\n', '    * @param _ruling Ruling appealing a dispute round in favor of\n', '    */\n', '    function createAppeal(uint256 _disputeId, uint256 _roundId, uint8 _ruling) external;\n', '\n', '    /**\n', '    * @dev Confirm appeal for a round of a dispute in favor of a ruling\n', '    * @param _disputeId Identification number of the dispute confirming an appeal of\n', '    * @param _roundId Identification number of the dispute round confirming an appeal of\n', '    * @param _ruling Ruling being confirmed against a dispute round appeal\n', '    */\n', '    function confirmAppeal(uint256 _disputeId, uint256 _roundId, uint8 _ruling) external;\n', '\n', '    /**\n', '    * @dev Compute the final ruling for a dispute\n', '    * @param _disputeId Identification number of the dispute to compute its final ruling\n', '    * @return subject Arbitrable instance associated to the dispute\n', '    * @return finalRuling Final ruling decided for the given dispute\n', '    */\n', '    function computeRuling(uint256 _disputeId) external returns (IArbitrable subject, uint8 finalRuling);\n', '\n', '    /**\n', '    * @dev Settle penalties for a round of a dispute\n', '    * @param _disputeId Identification number of the dispute to settle penalties for\n', '    * @param _roundId Identification number of the dispute round to settle penalties for\n', '    * @param _guardiansToSettle Maximum number of guardians to be slashed in this call\n', '    */\n', '    function settlePenalties(uint256 _disputeId, uint256 _roundId, uint256 _guardiansToSettle) external;\n', '\n', '    /**\n', '    * @dev Claim rewards for a round of a dispute for guardian\n', '    * @dev For regular rounds, it will only reward winning guardians\n', '    * @param _disputeId Identification number of the dispute to settle rewards for\n', '    * @param _roundId Identification number of the dispute round to settle rewards for\n', '    * @param _guardian Address of the guardian to settle their rewards\n', '    */\n', '    function settleReward(uint256 _disputeId, uint256 _roundId, address _guardian) external;\n', '\n', '    /**\n', '    * @dev Settle appeal deposits for a round of a dispute\n', '    * @param _disputeId Identification number of the dispute to settle appeal deposits for\n', '    * @param _roundId Identification number of the dispute round to settle appeal deposits for\n', '    */\n', '    function settleAppealDeposit(uint256 _disputeId, uint256 _roundId) external;\n', '\n', '    /**\n', '    * @dev Tell the amount of token fees required to create a dispute\n', '    * @return feeToken ERC20 token used for the fees\n', '    * @return feeAmount Total amount of fees to be paid for a dispute at the given term\n', '    */\n', '    function getDisputeFees() external view returns (IERC20 feeToken, uint256 feeAmount);\n', '\n', '    /**\n', '    * @dev Tell information of a certain dispute\n', '    * @param _disputeId Identification number of the dispute being queried\n', '    * @return subject Arbitrable subject being disputed\n', '    * @return possibleRulings Number of possible rulings allowed for the drafted guardians to vote on the dispute\n', '    * @return state Current state of the dispute being queried: pre-draft, adjudicating, or ruled\n', '    * @return finalRuling The winning ruling in case the dispute is finished\n', '    * @return lastRoundId Identification number of the last round created for the dispute\n', '    * @return createTermId Identification number of the term when the dispute was created\n', '    */\n', '    function getDispute(uint256 _disputeId) external view\n', '        returns (IArbitrable subject, uint8 possibleRulings, DisputeState state, uint8 finalRuling, uint256 lastRoundId, uint64 createTermId);\n', '\n', '    /**\n', '    * @dev Tell information of a certain adjudication round\n', '    * @param _disputeId Identification number of the dispute being queried\n', '    * @param _roundId Identification number of the round being queried\n', '    * @return draftTerm Term from which the requested round can be drafted\n', '    * @return delayedTerms Number of terms the given round was delayed based on its requested draft term id\n', '    * @return guardiansNumber Number of guardians requested for the round\n', '    * @return selectedGuardians Number of guardians already selected for the requested round\n', '    * @return settledPenalties Whether or not penalties have been settled for the requested round\n', '    * @return collectedTokens Amount of guardian tokens that were collected from slashed guardians for the requested round\n', '    * @return coherentGuardians Number of guardians that voted in favor of the final ruling in the requested round\n', '    * @return state Adjudication state of the requested round\n', '    */\n', '    function getRound(uint256 _disputeId, uint256 _roundId) external view\n', '        returns (\n', '            uint64 draftTerm,\n', '            uint64 delayedTerms,\n', '            uint64 guardiansNumber,\n', '            uint64 selectedGuardians,\n', '            uint256 guardianFees,\n', '            bool settledPenalties,\n', '            uint256 collectedTokens,\n', '            uint64 coherentGuardians,\n', '            AdjudicationState state\n', '        );\n', '\n', '    /**\n', '    * @dev Tell appeal-related information of a certain adjudication round\n', '    * @param _disputeId Identification number of the dispute being queried\n', '    * @param _roundId Identification number of the round being queried\n', '    * @return maker Address of the account appealing the given round\n', '    * @return appealedRuling Ruling confirmed by the appealer of the given round\n', '    * @return taker Address of the account confirming the appeal of the given round\n', '    * @return opposedRuling Ruling confirmed by the appeal taker of the given round\n', '    */\n', '    function getAppeal(uint256 _disputeId, uint256 _roundId) external view\n', '        returns (address maker, uint64 appealedRuling, address taker, uint64 opposedRuling);\n', '\n', '    /**\n', '    * @dev Tell information related to the next round due to an appeal of a certain round given.\n', '    * @param _disputeId Identification number of the dispute being queried\n', '    * @param _roundId Identification number of the round requesting the appeal details of\n', '    * @return nextRoundStartTerm Term ID from which the next round will start\n', '    * @return nextRoundGuardiansNumber Guardians number for the next round\n', '    * @return newDisputeState New state for the dispute associated to the given round after the appeal\n', '    * @return feeToken ERC20 token used for the next round fees\n', '    * @return guardianFees Total amount of fees to be distributed between the winning guardians of the next round\n', '    * @return totalFees Total amount of fees for a regular round at the given term\n', '    * @return appealDeposit Amount to be deposit of fees for a regular round at the given term\n', '    * @return confirmAppealDeposit Total amount of fees for a regular round at the given term\n', '    */\n', '    function getNextRoundDetails(uint256 _disputeId, uint256 _roundId) external view\n', '        returns (\n', '            uint64 nextRoundStartTerm,\n', '            uint64 nextRoundGuardiansNumber,\n', '            DisputeState newDisputeState,\n', '            IERC20 feeToken,\n', '            uint256 totalFees,\n', '            uint256 guardianFees,\n', '            uint256 appealDeposit,\n', '            uint256 confirmAppealDeposit\n', '        );\n', '\n', '    /**\n', '    * @dev Tell guardian-related information of a certain adjudication round\n', '    * @param _disputeId Identification number of the dispute being queried\n', '    * @param _roundId Identification number of the round being queried\n', '    * @param _guardian Address of the guardian being queried\n', '    * @return weight Guardian weight drafted for the requested round\n', '    * @return rewarded Whether or not the given guardian was rewarded based on the requested round\n', '    */\n', '    function getGuardian(uint256 _disputeId, uint256 _roundId, address _guardian) external view returns (uint64 weight, bool rewarded);\n', '}\n', '\n', 'contract Controller is IsContract, ModuleIds, CourtClock, CourtConfig, ACL {\n', '    string private constant ERROR_SENDER_NOT_GOVERNOR = "CTR_SENDER_NOT_GOVERNOR";\n', '    string private constant ERROR_INVALID_GOVERNOR_ADDRESS = "CTR_INVALID_GOVERNOR_ADDRESS";\n', '    string private constant ERROR_MODULE_NOT_SET = "CTR_MODULE_NOT_SET";\n', '    string private constant ERROR_MODULE_ALREADY_ENABLED = "CTR_MODULE_ALREADY_ENABLED";\n', '    string private constant ERROR_MODULE_ALREADY_DISABLED = "CTR_MODULE_ALREADY_DISABLED";\n', '    string private constant ERROR_DISPUTE_MANAGER_NOT_ACTIVE = "CTR_DISPUTE_MANAGER_NOT_ACTIVE";\n', '    string private constant ERROR_CUSTOM_FUNCTION_NOT_SET = "CTR_CUSTOM_FUNCTION_NOT_SET";\n', '    string private constant ERROR_IMPLEMENTATION_NOT_CONTRACT = "CTR_IMPLEMENTATION_NOT_CONTRACT";\n', '    string private constant ERROR_INVALID_IMPLS_INPUT_LENGTH = "CTR_INVALID_IMPLS_INPUT_LENGTH";\n', '\n', '    address private constant ZERO_ADDRESS = address(0);\n', '\n', '    /**\n', '    * @dev Governor of the whole system. Set of three addresses to recover funds, change configuration settings and setup modules\n', '    */\n', '    struct Governor {\n', '        address funds;      // This address can be unset at any time. It is allowed to recover funds from the ControlledRecoverable modules\n', '        address config;     // This address is meant not to be unset. It is allowed to change the different configurations of the whole system\n', '        address modules;    // This address can be unset at any time. It is allowed to plug/unplug modules from the system\n', '    }\n', '\n', '    /**\n', '    * @dev Module information\n', '    */\n', '    struct Module {\n', '        bytes32 id;         // ID associated to a module\n', '        bool disabled;      // Whether the module is disabled\n', '    }\n', '\n', '    // Governor addresses of the system\n', '    Governor private governor;\n', '\n', '    // List of current modules registered for the system indexed by ID\n', '    mapping (bytes32 => address) internal currentModules;\n', '\n', '    // List of all historical modules registered for the system indexed by address\n', '    mapping (address => Module) internal allModules;\n', '\n', '    // List of custom function targets indexed by signature\n', '    mapping (bytes4 => address) internal customFunctions;\n', '\n', '    event ModuleSet(bytes32 id, address addr);\n', '    event ModuleEnabled(bytes32 id, address addr);\n', '    event ModuleDisabled(bytes32 id, address addr);\n', '    event CustomFunctionSet(bytes4 signature, address target);\n', '    event FundsGovernorChanged(address previousGovernor, address currentGovernor);\n', '    event ConfigGovernorChanged(address previousGovernor, address currentGovernor);\n', '    event ModulesGovernorChanged(address previousGovernor, address currentGovernor);\n', '\n', '    /**\n', '    * @dev Ensure the msg.sender is the funds governor\n', '    */\n', '    modifier onlyFundsGovernor {\n', '        require(msg.sender == governor.funds, ERROR_SENDER_NOT_GOVERNOR);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Ensure the msg.sender is the modules governor\n', '    */\n', '    modifier onlyConfigGovernor {\n', '        require(msg.sender == governor.config, ERROR_SENDER_NOT_GOVERNOR);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Ensure the msg.sender is the modules governor\n', '    */\n', '    modifier onlyModulesGovernor {\n', '        require(msg.sender == governor.modules, ERROR_SENDER_NOT_GOVERNOR);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Ensure the given dispute manager is active\n', '    */\n', '    modifier onlyActiveDisputeManager(IDisputeManager _disputeManager) {\n', '        require(!_isModuleDisabled(address(_disputeManager)), ERROR_DISPUTE_MANAGER_NOT_ACTIVE);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    * @param _termParams Array containing:\n', '    *        0. _termDuration Duration in seconds per term\n', '    *        1. _firstTermStartTime Timestamp in seconds when the court will open (to give time for guardian on-boarding)\n', '    * @param _governors Array containing:\n', '    *        0. _fundsGovernor Address of the funds governor\n', '    *        1. _configGovernor Address of the config governor\n', '    *        2. _modulesGovernor Address of the modules governor\n', '    * @param _feeToken Address of the token contract that is used to pay for fees\n', '    * @param _fees Array containing:\n', '    *        0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *        1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *        2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *        0. evidenceTerms Max submitting evidence period duration in terms\n', '    *        1. commitTerms Commit period duration in terms\n', '    *        2. revealTerms Reveal period duration in terms\n', '    *        3. appealTerms Appeal period duration in terms\n', '    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @param _pcts Array containing:\n', '    *        0. penaltyPct Permyriad of min active tokens balance to be locked to each drafted guardians (‱ - 1/10,000)\n', '    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @param _roundParams Array containing params for rounds:\n', '    *        0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *        1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *        3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @param _appealCollateralParams Array containing params for appeal collateral:\n', '    *        1. appealCollateralFactor Permyriad multiple of dispute fees required to appeal a preliminary ruling\n', '    *        2. appealConfirmCollateralFactor Permyriad multiple of dispute fees required to confirm appeal\n', '    * @param _minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    constructor(\n', '        uint64[2] memory _termParams,\n', '        address[3] memory _governors,\n', '        IERC20 _feeToken,\n', '        uint256[3] memory _fees,\n', '        uint64[5] memory _roundStateDurations,\n', '        uint16[2] memory _pcts,\n', '        uint64[4] memory _roundParams,\n', '        uint256[2] memory _appealCollateralParams,\n', '        uint256 _minActiveBalance\n', '    )\n', '        public\n', '        CourtClock(_termParams)\n', '        CourtConfig(_feeToken, _fees, _roundStateDurations, _pcts, _roundParams, _appealCollateralParams, _minActiveBalance)\n', '    {\n', '        _setFundsGovernor(_governors[0]);\n', '        _setConfigGovernor(_governors[1]);\n', '        _setModulesGovernor(_governors[2]);\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function allows to forward calls to a specific address in case it was previously registered\n', '    *      Note the sender will be always the controller in case it is forwarded\n', '    */\n', '    function () external payable {\n', '        address target = customFunctions[msg.sig];\n', '        require(target != address(0), ERROR_CUSTOM_FUNCTION_NOT_SET);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success,) = address(target).call.value(msg.value)(msg.data);\n', '        assembly {\n', '            let size := returndatasize\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            let result := success\n', '            switch result case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Change Court configuration params\n', '    * @param _fromTermId Identification number of the term in which the config will be effective at\n', '    * @param _feeToken Address of the token contract that is used to pay for fees\n', '    * @param _fees Array containing:\n', '    *        0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *        1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *        2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *        0. evidenceTerms Max submitting evidence period duration in terms\n', '    *        1. commitTerms Commit period duration in terms\n', '    *        2. revealTerms Reveal period duration in terms\n', '    *        3. appealTerms Appeal period duration in terms\n', '    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @param _pcts Array containing:\n', '    *        0. penaltyPct Permyriad of min active tokens balance to be locked to each drafted guardians (‱ - 1/10,000)\n', '    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @param _roundParams Array containing params for rounds:\n', '    *        0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *        1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *        3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @param _appealCollateralParams Array containing params for appeal collateral:\n', '    *        1. appealCollateralFactor Permyriad multiple of dispute fees required to appeal a preliminary ruling\n', '    *        2. appealConfirmCollateralFactor Permyriad multiple of dispute fees required to confirm appeal\n', '    * @param _minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    function setConfig(\n', '        uint64 _fromTermId,\n', '        IERC20 _feeToken,\n', '        uint256[3] calldata _fees,\n', '        uint64[5] calldata _roundStateDurations,\n', '        uint16[2] calldata _pcts,\n', '        uint64[4] calldata _roundParams,\n', '        uint256[2] calldata _appealCollateralParams,\n', '        uint256 _minActiveBalance\n', '    )\n', '        external\n', '        onlyConfigGovernor\n', '    {\n', '        uint64 currentTermId = _ensureCurrentTerm();\n', '        _setConfig(\n', '            currentTermId,\n', '            _fromTermId,\n', '            _feeToken,\n', '            _fees,\n', '            _roundStateDurations,\n', '            _pcts,\n', '            _roundParams,\n', '            _appealCollateralParams,\n', '            _minActiveBalance\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Delay the Court start time to `_newFirstTermStartTime`\n', '    * @param _newFirstTermStartTime New timestamp in seconds when the court will open\n', '    */\n', '    function delayStartTime(uint64 _newFirstTermStartTime) external onlyConfigGovernor {\n', '        _delayStartTime(_newFirstTermStartTime);\n', '    }\n', '\n', '    /**\n', '    * @notice Change funds governor address to `_newFundsGovernor`\n', '    * @param _newFundsGovernor Address of the new funds governor to be set\n', '    */\n', '    function changeFundsGovernor(address _newFundsGovernor) external onlyFundsGovernor {\n', '        require(_newFundsGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\n', '        _setFundsGovernor(_newFundsGovernor);\n', '    }\n', '\n', '    /**\n', '    * @notice Change config governor address to `_newConfigGovernor`\n', '    * @param _newConfigGovernor Address of the new config governor to be set\n', '    */\n', '    function changeConfigGovernor(address _newConfigGovernor) external onlyConfigGovernor {\n', '        require(_newConfigGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\n', '        _setConfigGovernor(_newConfigGovernor);\n', '    }\n', '\n', '    /**\n', '    * @notice Change modules governor address to `_newModulesGovernor`\n', '    * @param _newModulesGovernor Address of the new governor to be set\n', '    */\n', '    function changeModulesGovernor(address _newModulesGovernor) external onlyModulesGovernor {\n', '        require(_newModulesGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\n', '        _setModulesGovernor(_newModulesGovernor);\n', '    }\n', '\n', '    /**\n', '    * @notice Remove the funds governor. Set the funds governor to the zero address.\n', '    * @dev This action cannot be rolled back, once the funds governor has been unset, funds cannot be recovered from recoverable modules anymore\n', '    */\n', '    function ejectFundsGovernor() external onlyFundsGovernor {\n', '        _setFundsGovernor(ZERO_ADDRESS);\n', '    }\n', '\n', '    /**\n', '    * @notice Remove the modules governor. Set the modules governor to the zero address.\n', '    * @dev This action cannot be rolled back, once the modules governor has been unset, system modules cannot be changed anymore\n', '    */\n', '    function ejectModulesGovernor() external onlyModulesGovernor {\n', '        _setModulesGovernor(ZERO_ADDRESS);\n', '    }\n', '\n', '    /**\n', '    * @notice Grant `_id` role to `_who`\n', '    * @param _id ID of the role to be granted\n', '    * @param _who Address to grant the role to\n', '    */\n', '    function grant(bytes32 _id, address _who) external onlyConfigGovernor {\n', '        _grant(_id, _who);\n', '    }\n', '\n', '    /**\n', '    * @notice Revoke `_id` role from `_who`\n', '    * @param _id ID of the role to be revoked\n', '    * @param _who Address to revoke the role from\n', '    */\n', '    function revoke(bytes32 _id, address _who) external onlyConfigGovernor {\n', '        _revoke(_id, _who);\n', '    }\n', '\n', '    /**\n', '    * @notice Freeze `_id` role\n', '    * @param _id ID of the role to be frozen\n', '    */\n', '    function freeze(bytes32 _id) external onlyConfigGovernor {\n', '        _freeze(_id);\n', '    }\n', '\n', '    /**\n', '    * @notice Enact a bulk list of ACL operations\n', '    */\n', '    function bulk(BulkOp[] calldata _op, bytes32[] calldata _id, address[] calldata _who) external onlyConfigGovernor {\n', '        _bulk(_op, _id, _who);\n', '    }\n', '\n', '    /**\n', '    * @notice Set module `_id` to `_addr`\n', '    * @param _id ID of the module to be set\n', '    * @param _addr Address of the module to be set\n', '    */\n', '    function setModule(bytes32 _id, address _addr) external onlyModulesGovernor {\n', '        _setModule(_id, _addr);\n', '    }\n', '\n', '    /**\n', '    * @notice Set and link many modules at once\n', '    * @param _newModuleIds List of IDs of the new modules to be set\n', '    * @param _newModuleAddresses List of addresses of the new modules to be set\n', '    * @param _newModuleLinks List of IDs of the modules that will be linked in the new modules being set\n', '    * @param _currentModulesToBeSynced List of addresses of current modules to be re-linked to the new modules being set\n', '    */\n', '    function setModules(\n', '        bytes32[] calldata _newModuleIds,\n', '        address[] calldata _newModuleAddresses,\n', '        bytes32[] calldata _newModuleLinks,\n', '        address[] calldata _currentModulesToBeSynced\n', '    )\n', '        external\n', '        onlyModulesGovernor\n', '    {\n', '        // We only care about the modules being set, links are optional\n', '        require(_newModuleIds.length == _newModuleAddresses.length, ERROR_INVALID_IMPLS_INPUT_LENGTH);\n', '\n', '        // First set the addresses of the new modules or the modules to be updated\n', '        for (uint256 i = 0; i < _newModuleIds.length; i++) {\n', '            _setModule(_newModuleIds[i], _newModuleAddresses[i]);\n', '        }\n', '\n', '        // Then sync the links of the new modules based on the list of IDs specified (ideally the IDs of their dependencies)\n', '        _syncModuleLinks(_newModuleAddresses, _newModuleLinks);\n', '\n', '        // Finally sync the links of the existing modules to be synced to the new modules being set\n', '        _syncModuleLinks(_currentModulesToBeSynced, _newModuleIds);\n', '    }\n', '\n', '    /**\n', '    * @notice Sync modules for a list of modules IDs based on their current implementation address\n', '    * @param _modulesToBeSynced List of addresses of connected modules to be synced\n', '    * @param _idsToBeSet List of IDs of the modules included in the sync\n', '    */\n', '    function syncModuleLinks(address[] calldata _modulesToBeSynced, bytes32[] calldata _idsToBeSet)\n', '        external\n', '        onlyModulesGovernor\n', '    {\n', '        require(_idsToBeSet.length > 0 && _modulesToBeSynced.length > 0, ERROR_INVALID_IMPLS_INPUT_LENGTH);\n', '        _syncModuleLinks(_modulesToBeSynced, _idsToBeSet);\n', '    }\n', '\n', '    /**\n', '    * @notice Disable module `_addr`\n', '    * @dev Current modules can be disabled to allow pausing the court. However, these can be enabled back again, see `enableModule`\n', '    * @param _addr Address of the module to be disabled\n', '    */\n', '    function disableModule(address _addr) external onlyModulesGovernor {\n', '        Module storage module = allModules[_addr];\n', '        _ensureModuleExists(module);\n', '        require(!module.disabled, ERROR_MODULE_ALREADY_DISABLED);\n', '\n', '        module.disabled = true;\n', '        emit ModuleDisabled(module.id, _addr);\n', '    }\n', '\n', '    /**\n', '    * @notice Enable module `_addr`\n', '    * @param _addr Address of the module to be enabled\n', '    */\n', '    function enableModule(address _addr) external onlyModulesGovernor {\n', '        Module storage module = allModules[_addr];\n', '        _ensureModuleExists(module);\n', '        require(module.disabled, ERROR_MODULE_ALREADY_ENABLED);\n', '\n', '        module.disabled = false;\n', '        emit ModuleEnabled(module.id, _addr);\n', '    }\n', '\n', '    /**\n', '    * @notice Set custom function `_sig` for `_target`\n', '    * @param _sig Signature of the function to be set\n', '    * @param _target Address of the target implementation to be registered for the given signature\n', '    */\n', '    function setCustomFunction(bytes4 _sig, address _target) external onlyModulesGovernor {\n', '        customFunctions[_sig] = _target;\n', '        emit CustomFunctionSet(_sig, _target);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the full Court configuration parameters at a certain term\n', '    * @param _termId Identification number of the term querying the Court config of\n', '    * @return token Address of the token used to pay for fees\n', '    * @return fees Array containing:\n', '    *         0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *         1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *         2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *         0. evidenceTerms Max submitting evidence period duration in terms\n', '    *         1. commitTerms Commit period duration in terms\n', '    *         2. revealTerms Reveal period duration in terms\n', '    *         3. appealTerms Appeal period duration in terms\n', '    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @return pcts Array containing:\n', '    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @return roundParams Array containing params for rounds:\n', '    *         0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *         1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *         3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @return appealCollateralParams Array containing params for appeal collateral:\n', '    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\n', '    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\n', '    */\n', '    function getConfig(uint64 _termId) external view\n', '        returns (\n', '            IERC20 feeToken,\n', '            uint256[3] memory fees,\n', '            uint64[5] memory roundStateDurations,\n', '            uint16[2] memory pcts,\n', '            uint64[4] memory roundParams,\n', '            uint256[2] memory appealCollateralParams,\n', '            uint256 minActiveBalance\n', '        )\n', '    {\n', '        uint64 lastEnsuredTermId = _lastEnsuredTermId();\n', '        return _getConfigAt(_termId, lastEnsuredTermId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the draft config at a certain term\n', '    * @param _termId Identification number of the term querying the draft config of\n', '    * @return feeToken Address of the token used to pay for fees\n', '    * @return draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted guardian (‱ - 1/10,000)\n', '    */\n', '    function getDraftConfig(uint64 _termId) external view returns (IERC20 feeToken, uint256 draftFee, uint16 penaltyPct) {\n', '        uint64 lastEnsuredTermId = _lastEnsuredTermId();\n', '        return _getDraftConfig(_termId, lastEnsuredTermId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the min active balance config at a certain term\n', '    * @param _termId Identification number of the term querying the min active balance config of\n', '    * @return Minimum amount of tokens guardians have to activate to participate in the Court\n', '    */\n', '    function getMinActiveBalance(uint64 _termId) external view returns (uint256) {\n', '        uint64 lastEnsuredTermId = _lastEnsuredTermId();\n', '        return _getMinActiveBalance(_termId, lastEnsuredTermId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the address of the funds governor\n', '    * @return Address of the funds governor\n', '    */\n', '    function getFundsGovernor() external view returns (address) {\n', '        return governor.funds;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the address of the config governor\n', '    * @return Address of the config governor\n', '    */\n', '    function getConfigGovernor() external view returns (address) {\n', '        return governor.config;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the address of the modules governor\n', '    * @return Address of the modules governor\n', '    */\n', '    function getModulesGovernor() external view returns (address) {\n', '        return governor.modules;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell if a given module is active\n', '    * @param _id ID of the module to be checked\n', '    * @param _addr Address of the module to be checked\n', '    * @return True if the given module address has the requested ID and is enabled\n', '    */\n', '    function isActive(bytes32 _id, address _addr) external view returns (bool) {\n', '        Module storage module = allModules[_addr];\n', '        return module.id == _id && !module.disabled;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the current ID and disable status of a module based on a given address\n', '    * @param _addr Address of the requested module\n', '    * @return id ID of the module being queried\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getModuleByAddress(address _addr) external view returns (bytes32 id, bool disabled) {\n', '        Module storage module = allModules[_addr];\n', '        id = module.id;\n', '        disabled = module.disabled;\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the current address and disable status of a module based on a given ID\n', '    * @param _id ID of the module being queried\n', '    * @return addr Current address of the requested module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getModule(bytes32 _id) external view returns (address addr, bool disabled) {\n', '        return _getModule(_id);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for the current DisputeManager module\n', '    * @return addr Current address of the DisputeManager module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getDisputeManager() external view returns (address addr, bool disabled) {\n', '        return _getModule(MODULE_ID_DISPUTE_MANAGER);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for  the current GuardiansRegistry module\n', '    * @return addr Current address of the GuardiansRegistry module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getGuardiansRegistry() external view returns (address addr, bool disabled) {\n', '        return _getModule(MODULE_ID_GUARDIANS_REGISTRY);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for the current Voting module\n', '    * @return addr Current address of the Voting module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getVoting() external view returns (address addr, bool disabled) {\n', '        return _getModule(MODULE_ID_VOTING);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for the current PaymentsBook module\n', '    * @return addr Current address of the PaymentsBook module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getPaymentsBook() external view returns (address addr, bool disabled) {\n', '        return _getModule(MODULE_ID_PAYMENTS_BOOK);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the information for the current Treasury module\n', '    * @return addr Current address of the Treasury module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function getTreasury() external view returns (address addr, bool disabled) {\n', '        return _getModule(MODULE_ID_TREASURY);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the target registered for a custom function\n', '    * @param _sig Signature of the function being queried\n', '    * @return Address of the target where the function call will be forwarded\n', '    */\n', '    function getCustomFunction(bytes4 _sig) external view returns (address) {\n', '        return customFunctions[_sig];\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to set the address of the funds governor\n', '    * @param _newFundsGovernor Address of the new config governor to be set\n', '    */\n', '    function _setFundsGovernor(address _newFundsGovernor) internal {\n', '        emit FundsGovernorChanged(governor.funds, _newFundsGovernor);\n', '        governor.funds = _newFundsGovernor;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to set the address of the config governor\n', '    * @param _newConfigGovernor Address of the new config governor to be set\n', '    */\n', '    function _setConfigGovernor(address _newConfigGovernor) internal {\n', '        emit ConfigGovernorChanged(governor.config, _newConfigGovernor);\n', '        governor.config = _newConfigGovernor;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to set the address of the modules governor\n', '    * @param _newModulesGovernor Address of the new modules governor to be set\n', '    */\n', '    function _setModulesGovernor(address _newModulesGovernor) internal {\n', '        emit ModulesGovernorChanged(governor.modules, _newModulesGovernor);\n', '        governor.modules = _newModulesGovernor;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to set an address as the current implementation for a module\n', '    *      Note that the disabled condition is not affected, if the module was not set before it will be enabled by default\n', '    * @param _id Id of the module to be set\n', '    * @param _addr Address of the module to be set\n', '    */\n', '    function _setModule(bytes32 _id, address _addr) internal {\n', '        require(isContract(_addr), ERROR_IMPLEMENTATION_NOT_CONTRACT);\n', '\n', '        currentModules[_id] = _addr;\n', '        allModules[_addr].id = _id;\n', '        emit ModuleSet(_id, _addr);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to sync the modules for a list of modules IDs based on their current implementation address\n', '    * @param _modulesToBeSynced List of addresses of connected modules to be synced\n', '    * @param _idsToBeSet List of IDs of the modules to be linked\n', '    */\n', '    function _syncModuleLinks(address[] memory _modulesToBeSynced, bytes32[] memory _idsToBeSet) internal {\n', '        address[] memory addressesToBeSet = new address[](_idsToBeSet.length);\n', '\n', '        // Load the addresses associated with the requested module ids\n', '        for (uint256 i = 0; i < _idsToBeSet.length; i++) {\n', '            address moduleAddress = _getModuleAddress(_idsToBeSet[i]);\n', '            Module storage module = allModules[moduleAddress];\n', '            _ensureModuleExists(module);\n', '            addressesToBeSet[i] = moduleAddress;\n', '        }\n', '\n', '        // Update the links of all the requested modules\n', '        for (uint256 j = 0; j < _modulesToBeSynced.length; j++) {\n', '            IModulesLinker(_modulesToBeSynced[j]).linkModules(_idsToBeSet, addressesToBeSet);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to notify when a term has been transitioned\n', '    * @param _termId Identification number of the new current term that has been transitioned\n', '    */\n', '    function _onTermTransitioned(uint64 _termId) internal {\n', '        _ensureTermConfig(_termId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to check if a module was set\n', '    * @param _module Module to be checked\n', '    */\n', '    function _ensureModuleExists(Module storage _module) internal view {\n', '        require(_module.id != bytes32(0), ERROR_MODULE_NOT_SET);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to tell the information for a module based on a given ID\n', '    * @param _id ID of the module being queried\n', '    * @return addr Current address of the requested module\n', '    * @return disabled Whether the module has been disabled\n', '    */\n', '    function _getModule(bytes32 _id) internal view returns (address addr, bool disabled) {\n', '        addr = _getModuleAddress(_id);\n', '        disabled = _isModuleDisabled(addr);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the current address for a module by ID\n', '    * @param _id ID of the module being queried\n', '    * @return Current address of the requested module\n', '    */\n', '    function _getModuleAddress(bytes32 _id) internal view returns (address) {\n', '        return currentModules[_id];\n', '    }\n', '\n', '    /**\n', '    * @dev Tell whether a module is disabled\n', '    * @param _addr Address of the module being queried\n', '    * @return True if the module is disabled, false otherwise\n', '    */\n', '    function _isModuleDisabled(address _addr) internal view returns (bool) {\n', '        return allModules[_addr].disabled;\n', '    }\n', '}\n', '\n', 'contract AragonCourt is IArbitrator, Controller {\n', '    using Uint256Helpers for uint256;\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    * @param _termParams Array containing:\n', '    *        0. _termDuration Duration in seconds per term\n', '    *        1. _firstTermStartTime Timestamp in seconds when the court will open (to give time for guardian on-boarding)\n', '    * @param _governors Array containing:\n', '    *        0. _fundsGovernor Address of the funds governor\n', '    *        1. _configGovernor Address of the config governor\n', '    *        2. _modulesGovernor Address of the modules governor\n', '    * @param _feeToken Address of the token contract that is used to pay for fees\n', '    * @param _fees Array containing:\n', '    *        0. guardianFee Amount of fee tokens that is paid per guardian per dispute\n', '    *        1. draftFee Amount of fee tokens per guardian to cover the drafting cost\n', '    *        2. settleFee Amount of fee tokens per guardian to cover round settlement cost\n', '    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\n', '    *        0. evidenceTerms Max submitting evidence period duration in terms\n', '    *        1. commitTerms Commit period duration in terms\n', '    *        2. revealTerms Reveal period duration in terms\n', '    *        3. appealTerms Appeal period duration in terms\n', '    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\n', '    * @param _pcts Array containing:\n', '    *        0. penaltyPct Permyriad of min active tokens balance to be locked to each drafted guardians (‱ - 1/10,000)\n', '    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\n', '    * @param _roundParams Array containing params for rounds:\n', '    *        0. firstRoundGuardiansNumber Number of guardians to be drafted for the first round of disputes\n', '    *        1. appealStepFactor Increasing factor for the number of guardians of each round of a dispute\n', '    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\n', '    *        3. finalRoundLockTerms Number of terms that a coherent guardian in a final round is disallowed to withdraw (to prevent 51% attacks)\n', '    * @param _appealCollateralParams Array containing params for appeal collateral:\n', '    *        1. appealCollateralFactor Permyriad multiple of dispute fees required to appeal a preliminary ruling\n', '    *        2. appealConfirmCollateralFactor Permyriad multiple of dispute fees required to confirm appeal\n', '    * @param _minActiveBalance Minimum amount of guardian tokens that can be activated\n', '    */\n', '    constructor(\n', '        uint64[2] memory _termParams,\n', '        address[3] memory _governors,\n', '        IERC20 _feeToken,\n', '        uint256[3] memory _fees,\n', '        uint64[5] memory _roundStateDurations,\n', '        uint16[2] memory _pcts,\n', '        uint64[4] memory _roundParams,\n', '        uint256[2] memory _appealCollateralParams,\n', '        uint256 _minActiveBalance\n', '    )\n', '        public\n', '        Controller(\n', '            _termParams,\n', '            _governors,\n', '            _feeToken,\n', '            _fees,\n', '            _roundStateDurations,\n', '            _pcts,\n', '            _roundParams,\n', '            _appealCollateralParams,\n', '            _minActiveBalance\n', '        )\n', '    {\n', '        // solium-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '    * @notice Create a dispute with `_possibleRulings` possible rulings\n', '    * @param _possibleRulings Number of possible rulings allowed for the drafted guardians to vote on the dispute\n', '    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\n', '    * @return Dispute identification number\n', '    */\n', '    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256) {\n', '        IArbitrable subject = IArbitrable(msg.sender);\n', '        return _disputeManager().createDispute(subject, _possibleRulings.toUint8(), _metadata);\n', '    }\n', '\n', '    /**\n', '    * @notice Submit `_evidence` as evidence from `_submitter` for dispute #`_disputeId`\n', '    * @param _disputeId Id of the dispute in the Court\n', '    * @param _submitter Address of the account submitting the evidence\n', '    * @param _evidence Data submitted for the evidence related to the dispute\n', '    */\n', '    function submitEvidence(uint256 _disputeId, address _submitter, bytes calldata _evidence) external {\n', '        _submitEvidence(_disputeManager(), _disputeId, _submitter, _evidence);\n', '    }\n', '\n', '    /**\n', '    * @notice Submit `_evidence` as evidence from `_submitter` for dispute #`_disputeId`\n', '    * @dev This entry point can be used to submit evidences to previous Dispute Manager instances\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Id of the dispute in the Court\n', '    * @param _submitter Address of the account submitting the evidence\n', '    * @param _evidence Data submitted for the evidence related to the dispute\n', '    */\n', '    function submitEvidenceForModule(IDisputeManager _disputeManager, uint256 _disputeId, address _submitter, bytes calldata _evidence)\n', '        external\n', '        onlyActiveDisputeManager(_disputeManager)\n', '    {\n', '        _submitEvidence(_disputeManager, _disputeId, _submitter, _evidence);\n', '    }\n', '\n', '    /**\n', '    * @notice Close the evidence period of dispute #`_disputeId`\n', '    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n', '    */\n', '    function closeEvidencePeriod(uint256 _disputeId) external {\n', '        _closeEvidencePeriod(_disputeManager(), _disputeId);\n', '    }\n', '\n', '    /**\n', '    * @notice Close the evidence period of dispute #`_disputeId`\n', '    * @dev This entry point can be used to close evidence periods on previous Dispute Manager instances\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n', '    */\n', '    function closeEvidencePeriodForModule(IDisputeManager _disputeManager, uint256 _disputeId)\n', '        external\n', '        onlyActiveDisputeManager(_disputeManager)\n', '    {\n', '        _closeEvidencePeriod(_disputeManager, _disputeId);\n', '    }\n', '\n', '    /**\n', '    * @notice Rule dispute #`_disputeId` if ready\n', '    * @param _disputeId Identification number of the dispute to be ruled\n', '    * @return subject Arbitrable instance associated to the dispute\n', '    * @return ruling Ruling number computed for the given dispute\n', '    */\n', '    function rule(uint256 _disputeId) external returns (address subject, uint256 ruling) {\n', '        return _rule(_disputeManager(), _disputeId);\n', '    }\n', '\n', '    /**\n', '    * @notice Rule dispute #`_disputeId` if ready\n', '    * @dev This entry point can be used to rule disputes on previous Dispute Manager instances\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Identification number of the dispute to be ruled\n', '    * @return subject Arbitrable instance associated to the dispute\n', '    * @return ruling Ruling number computed for the given dispute\n', '    */\n', '    function ruleForModule(IDisputeManager _disputeManager, uint256 _disputeId)\n', '        external\n', '        onlyActiveDisputeManager(_disputeManager)\n', '        returns (address subject, uint256 ruling)\n', '    {\n', '        return _rule(_disputeManager, _disputeId);\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the dispute fees information to create a dispute\n', '    * @return recipient Address where the corresponding dispute fees must be transferred to\n', '    * @return feeToken ERC20 token used for the fees\n', '    * @return feeAmount Total amount of fees that must be allowed to the recipient\n', '    */\n', '    function getDisputeFees() external view returns (address recipient, IERC20 feeToken, uint256 feeAmount) {\n', '        IDisputeManager disputeManager = _disputeManager();\n', '        recipient = address(disputeManager);\n', '        (feeToken, feeAmount) = disputeManager.getDisputeFees();\n', '    }\n', '\n', '    /**\n', '    * @dev Tell the payments recipient address\n', '    * @return Address of the payments recipient module\n', '    */\n', '    function getPaymentsRecipient() external view returns (address) {\n', '        return currentModules[MODULE_ID_PAYMENTS_BOOK];\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to submit evidence for a dispute\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Id of the dispute in the Court\n', '    * @param _submitter Address of the account submitting the evidence\n', '    * @param _evidence Data submitted for the evidence related to the dispute\n', '    */\n', '    function _submitEvidence(IDisputeManager _disputeManager, uint256 _disputeId, address _submitter, bytes memory _evidence) internal {\n', '        IArbitrable subject = IArbitrable(msg.sender);\n', '        _disputeManager.submitEvidence(subject, _disputeId, _submitter, _evidence);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to close the evidence period of a dispute\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n', '    */\n', '    function _closeEvidencePeriod(IDisputeManager _disputeManager, uint256 _disputeId) internal {\n', '        IArbitrable subject = IArbitrable(msg.sender);\n', '        _disputeManager.closeEvidencePeriod(subject, _disputeId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to rule a dispute\n', '    * @param _disputeManager Dispute manager to be used\n', '    * @param _disputeId Identification number of the dispute to be ruled\n', '    * @return subject Arbitrable instance associated to the dispute\n', '    * @return ruling Ruling number computed for the given dispute\n', '    */\n', '    function _rule(IDisputeManager _disputeManager, uint256 _disputeId) internal returns (address subject, uint256 ruling) {\n', '        (IArbitrable _subject, uint8 _ruling) = _disputeManager.computeRuling(_disputeId);\n', '        return (address(_subject), uint256(_ruling));\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to tell the current DisputeManager module\n', '    * @return Current DisputeManager module\n', '    */\n', '    function _disputeManager() internal view returns (IDisputeManager) {\n', '        return IDisputeManager(_getModuleAddress(MODULE_ID_DISPUTE_MANAGER));\n', '    }\n', '}']