['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', '\n', 'abstract contract Boss is Context {\n', '\n', '    address public boss;\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyBoss() {\n', '        require(boss == _msgSender(), "Ownable: caller is not the boss");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract withdrawUSDT is Boss {\n', '    address public USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '\n', '    constructor (address bossaddress) {\n', '        boss = bossaddress;\n', '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function currentbalanceOf() public view returns (uint256) {\n', '        uint256 amount = IERC20(USDT).balanceOf(address(this));\n', '        return amount;\n', '    }\n', '\n', '    function withdraw(address to) public onlyBoss returns (bool) {\n', '        safeTransfer(USDT,to,currentbalanceOf());\n', '    }\n', '\n', '}']