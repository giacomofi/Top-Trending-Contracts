['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "../common/GSN/Context.sol";\n', '\n', 'interface IERC20Permit {\n', '    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n', '        bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'interface IDaiBridge {\n', '    function relayTokens(address _from, address _receiver, uint256 _amount) external;\n', '}\n', '\n', 'contract DaiBridgeProxy is Context {\n', '    address private _daiToken;\n', '    address private _daiBridge;\n', '\n', '    constructor(address daiToken_, address daiBridge_) public {\n', '        _daiToken = daiToken_;\n', '        _daiBridge = daiBridge_;\n', '    }\n', '\n', '    function daiToken() public view returns (address) {\n', '        return _daiToken;\n', '    }\n', '\n', '    function daiBridge() public view returns (address) {\n', '        return _daiBridge;\n', '    }\n', '\n', '    function depositFor(\n', '        uint amount,\n', '        address recipient,\n', '        uint256 permitNonce,\n', '        uint256 permitExpiry,\n', '        uint8 v, bytes32 r, bytes32 s\n', '    ) external {\n', '        IERC20Permit(_daiToken).permit(_msgSender(), _daiBridge, permitNonce, permitExpiry, true, v, r, s);\n', '        IDaiBridge(_daiBridge).relayTokens(_msgSender(), recipient, amount);\n', '    }\n', '}']