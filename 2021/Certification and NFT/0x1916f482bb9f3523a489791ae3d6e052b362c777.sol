['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract MoonCatKeyVote {\n', '\n', '    // Should the MoonCatRescue developers destroy their private key so that no future Genesis MoonCats can ever be released?\n', '    // true  = Yes\n', '    // false = No\n', '\n', '    event VoteSubmitted(address voter, bool vote);\n', '\n', '    uint public voteStartTime = 0;\n', '    bool public voteCancelled = false;\n', '    mapping (address => bool) public hasVoted;\n', '    uint32 public yesVotes = 0;\n', '    uint32 public noVotes = 0;\n', '\n', '    //bytes32 public immutable voterRollSha256;\n', '    bytes32 public immutable merkleRoot;\n', '    address public immutable owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Owner Only");\n', '        _;\n', '    }\n', '\n', '    modifier voteContractIsPending {\n', '        require(!voteCancelled, "Vote Contract Cancelled");\n', '        require(voteStartTime == 0, "Vote Already Started");\n', '        _;\n', '    }\n', '\n', '    modifier voteContractIsActive {\n', '        require(!voteCancelled, "Vote Contract Cancelled");\n', '        require(voteStartTime > 0, "Vote Not Started");\n', '        require(block.timestamp < (voteStartTime + 48 hours), "Vote Ended");\n', '        _;\n', '    }\n', '\n', '    modifier voteContractIsComplete {\n', '        require(!voteCancelled, "Vote Contract Cancelled");\n', '        require(voteStartTime > 0, "Vote Not Started");\n', '        require(block.timestamp > (voteStartTime + 48 hours), "Vote Not Ended");\n', '        _;\n', '    }\n', '\n', '    constructor(bytes32 merkleRoot_) {\n', '        merkleRoot = merkleRoot_;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function startVote() public onlyOwner voteContractIsPending  {\n', '        voteStartTime = block.timestamp;\n', '    }\n', '\n', '    function cancelVote() public onlyOwner voteContractIsPending {\n', '        voteCancelled = true;\n', '    }\n', '\n', '    function getResult() public view voteContractIsComplete returns (bool) {\n', '        return (yesVotes > noVotes);\n', '    }\n', '\n', '    uint24 empty = 0;\n', '\n', '    function submitVote(bytes32[] calldata eligibilityProof, bool vote) public voteContractIsActive  {\n', '        require(!hasVoted[msg.sender], "Duplicate Vote");\n', '\n', '        // https://github.com/miguelmota/merkletreejs-solidity/blob/master/contracts/MerkleProof.sol\n', '        bytes32 computedHash = keccak256(abi.encodePacked(msg.sender));\n', '        for (uint256 i = 0; i < eligibilityProof.length; i++) {\n', '            bytes32 proofElement = eligibilityProof[i];\n', '\n', '            if (computedHash < proofElement) {\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        require(computedHash == merkleRoot, "Ineligible Voter");\n', '\n', '        hasVoted[msg.sender] = true;\n', '\n', '        if(vote){\n', '            yesVotes++;\n', '        } else {\n', '            noVotes++;\n', '        }\n', '\n', '        emit VoteSubmitted(msg.sender, vote);\n', '\n', '    }\n', '}']