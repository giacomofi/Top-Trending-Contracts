['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/staking/StakingRewardsAdapterRegistry.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/// @notice The stakingRewardsAdapter registry database for Furucombo\n', 'contract StakingRewardsAdapterRegistry is Ownable {\n', '    mapping(address => bytes32) public adapters;\n', '\n', '    bytes32 constant DEPRECATED = bytes10(0x64657072656361746564);\n', '\n', '    /**\n', '     * @notice Transfer ownership to tx.origin since we are\n', '     * using a create2 factory to deploy contract, and the\n', '     * owner will be the factory if we do not transfer.\n', '     * Ref: https://eips.ethereum.org/EIPS/eip-2470\n', '     */\n', '    constructor() public {\n', '        transferOwnership(tx.origin);\n', '    }\n', '\n', '    /**\n', '     * @notice Register an adapter with a bytes32 information.\n', '     * @param registration Adapter address.\n', '     * @param info Info string.\n', '     */\n', '    function register(address registration, bytes32 info) external onlyOwner {\n', '        require(registration != address(0), "zero address");\n', '        require(adapters[registration] == bytes32(0), "registered");\n', '        adapters[registration] = info;\n', '    }\n', '\n', '    /**\n', '     * @notice Unregister an adapter. The adapter will be deprecated.\n', '     * @param registration The adapter to be unregistered.\n', '     */\n', '    function unregister(address registration) external onlyOwner {\n', '        require(registration != address(0), "zero address");\n', '        require(adapters[registration] != bytes32(0), "no registration");\n', '        require(adapters[registration] != DEPRECATED, "unregistered");\n', '        adapters[registration] = DEPRECATED;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the info of a valid adapter.\n', '     * @param adapter The adapter to be updating info.\n', '     * @param info New info to be updated.\n', '     */\n', '    function updateInfo(address adapter, bytes32 info) external onlyOwner {\n', '        require(adapter != address(0), "zero address");\n', '        require(info != bytes32(0), "update info to 0 is prohibited");\n', '        require(adapters[adapter] != bytes32(0), "no registration");\n', '        require(adapters[adapter] != DEPRECATED, "unregistered");\n', '        adapters[adapter] = info;\n', '    }\n', '\n', '    /**\n', '     * @notice Check if the adapter is valid.\n', '     * @param adapter The adapter to be verified.\n', '     */\n', '    function isValid(address adapter) external view returns (bool result) {\n', '        if (adapters[adapter] == 0 || adapters[adapter] == DEPRECATED)\n', '            return false;\n', '        else return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the information of a registration.\n', '     * @param adapter The adapter address to be queried.\n', '     */\n', '    function getInfo(address adapter) external view returns (bytes32 info) {\n', '        return adapters[adapter];\n', '    }\n', '}']