['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface InstaMakerMerkleInterface {\n', '    function claim(\n', '        uint256 index,\n', '        uint256 vaultId,\n', '        address dsa, \n', '        address owner,\n', '        uint256 rewardAmount,\n', '        uint256 networthAmount,\n', '        bytes32[] calldata merkleProof\n', '    ) external;\n', '}\n', '\n', 'interface ManagerLike {\n', '    function ilks(uint256) external view returns (bytes32);\n', '    function owns(uint256) external view returns (address);\n', '    function urns(uint256) external view returns (address);\n', '    function give(uint, address) external;\n', '}\n', '\n', 'interface InstaListInterface {\n', '    function accountID(address) external view returns (uint64);\n', '}\n', '\n', 'interface InstaAccountInterface {\n', '    function isAuth(address) external view returns (bool);\n', '    function version() external view returns (uint256);\n', '}\n', '\n', '\n', 'contract Variables {\n', '    ManagerLike public constant managerContract =\n', '        ManagerLike(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\n', '\n', '    InstaListInterface public constant instaList = \n', '        InstaListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\n', '\n', '    InstaMakerMerkleInterface public immutable instaMakerMerkle;\n', '\n', '    constructor(address _instaMakerMerkle) {\n', '        instaMakerMerkle = InstaMakerMerkleInterface(_instaMakerMerkle);\n', '    }\n', '}\n', '\n', 'contract VaultResolver is Variables {\n', '    constructor(address _instaMakerMerkle) Variables(_instaMakerMerkle) {}\n', '\n', '    function transfer (\n', '        uint256 index,\n', '        uint256 vaultId,\n', '        address dsa,\n', '        address owner,\n', '        uint256 rewardAmount,\n', '        uint256 networthAmount,\n', '        bytes32[] calldata merkleProof\n', '    ) public {\n', '        require(instaList.accountID(dsa) != 0 && InstaAccountInterface(dsa).version() == 2, "InstaMakerDAOMerkleClaimer:: not a dsa");\n', '        require(InstaAccountInterface(dsa).isAuth(msg.sender), "InstaMakerdaoMerkleDistributor:: msg.sender is not owner of DSAv2 wallet");\n', '\n', '        managerContract.give(vaultId, dsa);\n', '        instaMakerMerkle.claim(\n', '            index,\n', '            vaultId,\n', '            dsa,\n', '            owner,\n', '            rewardAmount,\n', '            networthAmount,\n', '            merkleProof\n', '        );\n', '    }\n', '}\n', '\n', 'contract InstaDSProxyMakerDAOClaimer is VaultResolver {\n', '    constructor(address _instaMakerMerkle) public VaultResolver(_instaMakerMerkle) {}\n', '\n', '    string public constant name = "DSProxy-MakerDAO-Merkle-Claimer-v1.0";\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']