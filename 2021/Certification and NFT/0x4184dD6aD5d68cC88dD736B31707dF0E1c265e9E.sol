['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-late\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', 'pragma solidity 0.6.8;\n', '\n', 'interface IENSResolver {\n', '    event AddrChanged(bytes32 indexed _node, address _addr);\n', '    event NameChanged(bytes32 indexed _node, string _name);\n', '\n', '    function addr(bytes32 _node) external view returns (address);\n', '    function setAddr(bytes32 _node, address _addr) external;\n', '    function name(bytes32 _node) external view returns (string memory);\n', '    function setName(bytes32 _node, string calldata _name) external;\n', '}\n', 'pragma solidity >=0.5.4;\n', '\n', '\n', 'contract MirrorENSResolver is Ownable, IENSResolver {\n', '    // ============ Constants ============\n', '\n', '    bytes4 constant SUPPORT_INTERFACE_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '\n', '    // ============ Structs ============\n', '\n', '    struct Record {\n', '        address addr;\n', '        string name;\n', '    }\n', '\n', '    // ============ Mappings ============\n', '\n', '    // mapping between namehash and resolved records\n', '    mapping(bytes32 => Record) records;\n', '\n', '    // ============ Public Functions ============\n', '\n', '    /**\n', '     * @notice Lets the manager set the address associated with an ENS node.\n', '     * @param _node The node to update.\n', '     * @param _addr The address to set.\n', '     */\n', '    function setAddr(bytes32 _node, address _addr) public override onlyOwner {\n', '        records[_node].addr = _addr;\n', '        emit AddrChanged(_node, _addr);\n', '    }\n', '\n', '    /**\n', '     * @notice Lets the manager set the name associated with an ENS node.\n', '     * @param _node The node to update.\n', '     * @param _name The name to set.\n', '     */\n', '    function setName(bytes32 _node, string memory _name)\n', '        public\n', '        override\n', '        onlyOwner\n', '    {\n', '        records[_node].name = _name;\n', '        emit NameChanged(_node, _name);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the address associated to an ENS node.\n', '     * @param _node The target node.\n', '     * @return the address of the target node.\n', '     */\n', '    function addr(bytes32 _node) public view override returns (address) {\n', '        return records[_node].addr;\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the name associated to an ENS node.\n', '     * @param _node The target ENS node.\n', '     * @return the name of the target ENS node.\n', '     */\n', '    function name(bytes32 _node) public view override returns (string memory) {\n', '        return records[_node].name;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param _interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '        return\n', '            _interfaceID == SUPPORT_INTERFACE_ID ||\n', '            _interfaceID == ADDR_INTERFACE_ID ||\n', '            _interfaceID == NAME_INTERFACE_ID;\n', '    }\n', '}']