['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface ICirculatingMarketCapOracle {\n', '  function getCirculatingMarketCap(address) external view returns (uint256);\n', '\n', '  function getCirculatingMarketCaps(address[] calldata) external view returns (uint256[] memory);\n', '\n', '  function updateCirculatingMarketCaps(address[] calldata) external;\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IScoringStrategy {\n', '  function getTokenScores(address[] calldata tokens) external view returns (uint256[] memory scores);\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'import "../interfaces/IScoringStrategy.sol";\n', 'import "../interfaces/ICirculatingMarketCapOracle.sol";\n', '\n', '\n', 'contract ScoreBySqrtCMC is Ownable, IScoringStrategy {\n', '  // Chainlink or other circulating market cap oracle\n', '  address public circulatingMarketCapOracle;\n', '\n', '  constructor(address circulatingMarketCapOracle_) public Ownable() {\n', '    circulatingMarketCapOracle = circulatingMarketCapOracle_;\n', '  }\n', '\n', '  function getTokenScores(address[] calldata tokens)\n', '    external\n', '    view\n', '    override\n', '    returns (uint256[] memory scores)\n', '  {\n', '    scores = ICirculatingMarketCapOracle(circulatingMarketCapOracle).getCirculatingMarketCaps(tokens);\n', '    for (uint256 i = 0; i < scores.length; i++) {\n', '      scores[i] = sqrt(scores[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Update the address of the circulating market cap oracle.\n', '   */\n', '  function setCirculatingMarketCapOracle(address circulatingMarketCapOracle_) external onlyOwner {\n', '    circulatingMarketCapOracle = circulatingMarketCapOracle_;\n', '  }\n', '\n', '  function sqrt(uint256 y) internal pure returns (uint256 z) {\n', '    if (y > 3) {\n', '      z = y;\n', '      uint256 x = (y + 1) / 2;\n', '      while (x < z) {\n', '        z = x;\n', '        x = (y / x + x) / 2;\n', '      }\n', '    } else if (y != 0) {\n', '      z = 1;\n', '    }\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']