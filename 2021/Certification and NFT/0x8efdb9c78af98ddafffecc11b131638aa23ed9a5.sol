['pragma solidity 0.4.24;\n', '//import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";\n', '//import "openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol";\n', '//import "openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol";\n', '//import "openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol";\n', 'import "Crowdsale.sol";\n', '//import "openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol";\n', '//import "openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol";\n', '//import "openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol";\n', '//import "openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol";\n', '//import "openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol";\n', '\n', 'contract EgroweedManasrCrowdsale is Crowdsale {\n', '\n', '  // Min and max cap user invest\n', '  uint256 public investorMinCap =    100000000000000000;\n', '  uint256 public investorHardCap = 70000000000000000000;\n', '\n', '  mapping(address => uint256) public contributions;\n', '\n', '  constructor(uint256 _rate, address _wallet)\n', '    Crowdsale(_rate, _wallet)\n', '    public\n', '  {\n', '    \n', '  }\n', '\n', '  // obtener la contribucion de un e-grower en el crowdfunding\n', '  function getUserContribution(address _beneficiary)public view returns (uint256){\n', '    return contributions[_beneficiary];\n', '  }\n', ' \n', '  // Obtener fondos\n', '  function _forwardFunds() internal {\n', '    super._forwardFunds();\n', '  }\n', '  \n', '  // Validar los datos del e-grower, cantidad enviada y capacidad de invertir (min 0.1, maximo 700)\n', '  function _preValidatePurchase(address _beneficiary,uint256 _weiAmount)internal{\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    // Obtener contribucion\n', '    uint256 _existingContribution = contributions[_beneficiary];\n', '    uint256 _newContribution = _existingContribution.add(_weiAmount); // sumar lo enviado\n', '    //Validar los limites\n', '    require(_newContribution >= investorMinCap && _newContribution <= investorHardCap);\n', '    //Nueva contribucion\n', '    contributions[_beneficiary] = _newContribution;\n', '  }\n', '}']