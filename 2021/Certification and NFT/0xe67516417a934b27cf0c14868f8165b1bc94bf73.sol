['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/cryptography/MerkleProof.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IMerkleBox.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IMerkleBox {\n', '    event NewMerkle(\n', '        address indexed sender,\n', '        address indexed erc20,\n', '        uint256 amount,\n', '        bytes32 indexed merkleRoot,\n', '        uint256 claimGroupId,\n', '        uint256 withdrawUnlockTime,\n', '        string memo\n', '    );\n', '    event MerkleClaim(address indexed account, address indexed erc20, uint256 amount);\n', '    event MerkleFundUpdate(address indexed funder, bytes32 indexed merkleRoot, uint256 claimGroupId, uint256 amount, bool withdraw);\n', '\n', '    function addFunds(uint256 claimGroupId, uint256 amount) external;\n', '\n', '    function addFundsWithPermit(\n', '        uint256 claimGroupId,\n', '        address funder,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    function withdrawFunds(uint256 claimGroupId, uint256 amount) external;\n', '\n', '    function newClaimsGroup(\n', '        address erc20,\n', '        uint256 amount,\n', '        bytes32 merkleRoot,\n', '        uint256 withdrawUnlockTime,\n', '        string calldata memo\n', '    ) external returns (uint256);\n', '\n', '    function isClaimable(\n', '        uint256 claimGroupId,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] memory proof\n', '    ) external view returns (bool);\n', '\n', '    function claim(\n', '        uint256 claimGroupId,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] memory proof\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/IERC20WithPermit.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IERC20WithPermit is IERC20 {\n', '    function permit(\n', '        address,\n', '        address,\n', '        uint256,\n', '        uint256,\n', '        uint8,\n', '        bytes32,\n', '        bytes32\n', '    ) external;\n', '}\n', '\n', '// File: contracts/MerkleBox.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MerkleBox is IMerkleBox {\n', '    using MerkleProof for MerkleProof;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for IERC20WithPermit;\n', '    using SafeMath for uint256;\n', '\n', '    struct Holding {\n', '        address owner; // account that contributed funds\n', '        address erc20; // claim-able ERC20 asset\n', '        uint256 balance; // amount of token held currently\n', '        bytes32 merkleRoot; // root of claims merkle tree\n', '        uint256 withdrawUnlockTime; // withdraw forbidden before this time\n', '        string memo; // an string to store arbitary notes about the holding\n', '    }\n', '\n', '    mapping(uint256 => Holding) public holdings;\n', '    mapping(address => uint256[]) public claimGroupIds;\n', '    mapping(uint256 => mapping(bytes32 => bool)) public leafClaimed;\n', '    uint256 public constant LOCKING_PERIOD = 30 days;\n', '    uint256 public claimGroupCount;\n', '\n', '    function addFunds(uint256 claimGroupId, uint256 amount) external override {\n', '        // prelim. parameter checks\n', '        require(amount != 0, "Invalid amount");\n', '\n', '        // reference our struct storage\n', '        Holding storage holding = holdings[claimGroupId];\n', '        require(holding.owner != address(0), "Holding does not exist");\n', '\n', '        // calculate amount to deposit.  handle deposit-all.\n', '        IERC20 token = IERC20(holding.erc20);\n', '        uint256 balance = token.balanceOf(msg.sender);\n', '        if (amount == uint256(-1)) {\n', '            amount = balance;\n', '        }\n', '        require(amount <= balance, "Insufficient balance");\n', '        require(amount != 0, "Amount cannot be zero");\n', '\n', '        // transfer token to this contract\n', '        token.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        // update holdings record\n', '        holding.balance = holding.balance.add(amount);\n', '\n', '        emit MerkleFundUpdate(msg.sender, holding.merkleRoot, claimGroupId, amount, false);\n', '    }\n', '\n', '    function addFundsWithPermit(\n', '        uint256 claimGroupId,\n', '        address funder,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external override {\n', '        // prelim. parameter checks\n', '        require(amount != 0, "Invalid amount");\n', '\n', '        // reference our struct storage\n', '        Holding storage holding = holdings[claimGroupId];\n', '        require(holding.owner != address(0), "Holding does not exist");\n', '\n', '        // calculate amount to deposit.  handle deposit-all.\n', '        IERC20WithPermit token = IERC20WithPermit(holding.erc20);\n', '        uint256 balance = token.balanceOf(funder);\n', '        if (amount == uint256(-1)) {\n', '            amount = balance;\n', '        }\n', '        require(amount <= balance, "Insufficient balance");\n', '        require(amount != 0, "Amount cannot be zero");\n', '\n', '        // transfer token to this contract\n', '        token.permit(funder, address(this), amount, deadline, v, r, s);\n', '        token.safeTransferFrom(funder, address(this), amount);\n', '\n', '        // update holdings record\n', '        holding.balance = holding.balance.add(amount);\n', '\n', '        emit MerkleFundUpdate(funder, holding.merkleRoot, claimGroupId, amount, false);\n', '    }\n', '\n', '    function withdrawFunds(uint256 claimGroupId, uint256 amount) external override {\n', '        // reference our struct storage\n', '        Holding storage holding = holdings[claimGroupId];\n', '        require(holding.owner != address(0), "Holding does not exist");\n', '        require(block.timestamp >= holding.withdrawUnlockTime, "Holdings may not be withdrawn");\n', '        require(holding.owner == msg.sender, "Only owner may withdraw");\n', '\n', '        // calculate amount to withdraw.  handle withdraw-all.\n', '        IERC20 token = IERC20(holding.erc20);\n', '        if (amount == uint256(-1)) {\n', '            amount = holding.balance;\n', '        }\n', '        require(amount <= holding.balance, "Insufficient balance");\n', '\n', '        // update holdings record\n', '        holding.balance = holding.balance.sub(amount);\n', '\n', '        // transfer token to this contract\n', '        token.safeTransfer(msg.sender, amount);\n', '\n', '        emit MerkleFundUpdate(msg.sender, holding.merkleRoot, claimGroupId, amount, true);\n', '    }\n', '\n', '    function newClaimsGroup(\n', '        address erc20,\n', '        uint256 amount,\n', '        bytes32 merkleRoot,\n', '        uint256 withdrawUnlockTime,\n', '        string calldata memo\n', '    ) external override returns (uint256) {\n', '        // prelim. parameter checks\n', '        require(erc20 != address(0), "Invalid ERC20 address");\n', '        require(merkleRoot != 0, "Merkle cannot be zero");\n', '        require(withdrawUnlockTime >= block.timestamp + LOCKING_PERIOD, "Holding lock must exceed minimum lock period");\n', '\n', '        claimGroupCount++;\n', '        // reference our struct storage\n', '        Holding storage holding = holdings[claimGroupCount];\n', '\n', '        // calculate amount to deposit.  handle deposit-all.\n', '        IERC20 token = IERC20(erc20);\n', '        uint256 balance = token.balanceOf(msg.sender);\n', '        if (amount == uint256(-1)) {\n', '            amount = balance;\n', '        }\n', '        require(amount <= balance, "Insufficient balance");\n', '        require(amount != 0, "Amount cannot be zero");\n', '\n', '        // transfer token to this contract\n', '        token.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '        // record holding in stable storage\n', '        holding.owner = msg.sender;\n', '        holding.erc20 = erc20;\n', '        holding.balance = amount;\n', '        holding.merkleRoot = merkleRoot;\n', '        holding.withdrawUnlockTime = withdrawUnlockTime;\n', '        holding.memo = memo;\n', '        claimGroupIds[msg.sender].push(claimGroupCount);\n', '        emit NewMerkle(msg.sender, erc20, amount, merkleRoot, claimGroupCount, withdrawUnlockTime, memo);\n', '        return claimGroupCount;\n', '    }\n', '\n', '    function isClaimable(\n', '        uint256 claimGroupId,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] memory proof\n', '    ) external view override returns (bool) {\n', '        // holding exists?\n', '        Holding memory holding = holdings[claimGroupId];\n', '        if (holding.owner == address(0)) {\n', '            return false;\n', '        }\n', '        //  holding owner?\n', '        if (holding.owner == account) {\n', '            return false;\n', '        }\n', '        // sufficient balance exists?   (funder may have under-funded)\n', '        if (holding.balance < amount) {\n', '            return false;\n', '        }\n', '\n', '        bytes32 leaf = _leafHash(account, amount);\n', '        // already claimed?\n', '        if (leafClaimed[claimGroupId][leaf]) {\n', '            return false;\n', '        }\n', '        // merkle proof is invalid or claim not found\n', '        if (!MerkleProof.verify(proof, holding.merkleRoot, leaf)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function claim(\n', '        uint256 claimGroupId,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] memory proof\n', '    ) external override {\n', '        // holding exists?\n', '        Holding storage holding = holdings[claimGroupId];\n', '        require(holding.owner != address(0), "Holding not found");\n', '\n', '        //  holding owner?\n', '        require(holding.owner != account, "Holding owner cannot claim");\n', '\n', '        // sufficient balance exists?   (funder may have under-funded)\n', '        require(holding.balance >= amount, "Claim under-funded by funder.");\n', '\n', '        bytes32 leaf = _leafHash(account, amount);\n', '\n', '        // already spent?\n', '        require(leafClaimed[claimGroupId][leaf] == false, "Already claimed");\n', '\n', '        // merkle proof valid?\n', '        require(MerkleProof.verify(proof, holding.merkleRoot, leaf) == true, "Claim not found");\n', '\n', '        // update state\n', '        leafClaimed[claimGroupId][leaf] = true;\n', '        holding.balance = holding.balance.sub(amount);\n', '        IERC20(holding.erc20).safeTransfer(account, amount);\n', '\n', '        emit MerkleClaim(account, holding.erc20, amount);\n', '    }\n', '\n', '    function getClaimGroupIds(address owner) public view returns (uint256[] memory ids) {\n', '        ids = claimGroupIds[owner];\n', '    }\n', '\n', '    //////////////////////////////////////////////////////////\n', '\n', '    // generate hash of (claim holder, amount)\n', '    // claim holder must be the caller\n', '    function _leafHash(address account, uint256 amount) internal pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(account, amount));\n', '    }\n', '}']