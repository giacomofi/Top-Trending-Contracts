['/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-31\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IRCD {\n', '    /**\n', '     * @notice Returns the rate to pay out for a given amount\n', '     * @param amount the bet amount to calc a payout for\n', '     * @param maxAvailable the total pooled ETH unlocked and available to bet\n', '     * @param oldPrice the previous price of the underlying\n', '     * @param newPrice the current price of the underlying\n', '     * @return profit total possible profit amount\n', '     */\n', '    function rate(uint256 amount, uint256 maxAvailable, uint256 oldPrice, uint256 newPrice) external view returns (uint256);\n', '\n', '}\n', '\n', 'contract RateCalc is IRCD {\n', '    using SafeMath for uint256;\n', '     /**\n', '     * @notice Calculates maximum option buyer profit\n', '     * @param amount Option amount\n', '     * @param maxAvailable the total pooled ETH unlocked and available to bet\n', '     * @param oldPrice the previous price of the underlying\n', '     * @param newPrice the current price of the underlying\n', '     * @return profit total possible profit amount\n', '     */\n', '    function rate(uint256 amount, uint256 maxAvailable, uint256 oldPrice, uint256 newPrice) external view override returns (uint256)  {\n', '        require(amount <= maxAvailable, "greater then pool funds available");\n', '        \n', '        uint256 oneTenth = amount.div(10);\n', '        uint256 halfMax = maxAvailable.div(2);\n', '        if (amount > halfMax) {\n', '            return amount.mul(2).add(oneTenth).add(oneTenth);\n', '        } else {\n', '            if(oneTenth > 0) {\n', '                return amount.mul(2).sub(oneTenth);\n', '            } else {\n', '                uint256 oneThird = amount.div(4);\n', '                require(oneThird > 0, "invalid bet amount");\n', '                return amount.mul(2).sub(oneThird);\n', '            }\n', '        }\n', '        \n', '    }\n', '}\n', '\n', '\n', '\n', 'contract RateCalc20Percent is IRCD {\n', '    using SafeMath for uint256;\n', '     /**\n', '     * @notice Calculates maximum option buyer profit\n', '     * @param amount Option amount\n', '     * @return profit total possible profit amount\n', '     */\n', '    function rate(uint256 amount, uint256 maxAvailable, uint256 oldPrice, uint256 newPrice) external view override returns (uint256)  {\n', '        uint256 twentyPercent = maxAvailable.div(5);\n', '        require(amount <= twentyPercent, "greater then pool funds available");\n', '        uint256 oneTenth = amount.div(10);\n', '        uint256 halfMax = twentyPercent.div(2);\n', '        if (amount > halfMax) {\n', '            return amount.mul(2).add(oneTenth).add(oneTenth);\n', '        } else {\n', '            if(oneTenth > 0) {\n', '                return amount.mul(2).sub(oneTenth);\n', '            } else {\n', '                uint256 oneThird = amount.div(4);\n', '                require(oneThird > 0, "invalid bet amount");\n', '                return amount.mul(2).sub(oneThird);\n', '            }\n', '        }\n', '        \n', '    }\n', '}']