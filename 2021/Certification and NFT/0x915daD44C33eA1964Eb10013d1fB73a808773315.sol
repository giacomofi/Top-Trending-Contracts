['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', '/*\n', '   ____            __   __        __   _\n', '  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n', ' _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n', '/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n', '     /___/\n', '\n', '* Synthetix: TokenState.sol\n', '*\n', '* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/TokenState.sol\n', '* Docs: https://docs.synthetix.io/contracts/TokenState\n', '*\n', '* Contract Dependencies: \n', '*\t- Owned\n', '*\t- State\n', '* Libraries: (none)\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2021 Synthetix\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '// https://docs.synthetix.io/contracts/source/contracts/owned\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    function _onlyOwner() private view {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', '\n', '// Inheritance\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/contracts/state\n', 'contract State is Owned {\n', '    // the address of the contract that can modify variables\n', '    // this can only be changed by the owner of this contract\n', '    address public associatedContract;\n', '\n', '    constructor(address _associatedContract) internal {\n', '        // This contract is abstract, and thus cannot be instantiated directly\n', '        require(owner != address(0), "Owner must be set");\n', '\n', '        associatedContract = _associatedContract;\n', '        emit AssociatedContractUpdated(_associatedContract);\n', '    }\n', '\n', '    /* ========== SETTERS ========== */\n', '\n', '    // Change the associated contract to a new address\n', '    function setAssociatedContract(address _associatedContract) external onlyOwner {\n', '        associatedContract = _associatedContract;\n', '        emit AssociatedContractUpdated(_associatedContract);\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    modifier onlyAssociatedContract {\n', '        require(msg.sender == associatedContract, "Only the associated contract can perform this action");\n', '        _;\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event AssociatedContractUpdated(address associatedContract);\n', '}\n', '\n', '\n', '// Inheritance\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/contracts/tokenstate\n', 'contract TokenState is Owned, State {\n', '    /* ERC20 fields. */\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {}\n', '\n', '    /* ========== SETTERS ========== */\n', '\n', '    /**\n', '     * @notice Set ERC20 allowance.\n', '     * @dev Only the associated contract may call this.\n', '     * @param tokenOwner The authorising party.\n', '     * @param spender The authorised party.\n', '     * @param value The total value the authorised party may spend on the\n', "     * authorising party's behalf.\n", '     */\n', '    function setAllowance(\n', '        address tokenOwner,\n', '        address spender,\n', '        uint value\n', '    ) external onlyAssociatedContract {\n', '        allowance[tokenOwner][spender] = value;\n', '    }\n', '\n', '    /**\n', '     * @notice Set the balance in a given account\n', '     * @dev Only the associated contract may call this.\n', '     * @param account The account whose value to set.\n', '     * @param value The new balance of the given account.\n', '     */\n', '    function setBalanceOf(address account, uint value) external onlyAssociatedContract {\n', '        balanceOf[account] = value;\n', '    }\n', '}']