['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-05\n', '*/\n', '\n', '// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\utils\\ReentrancyGuard.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\ITREASURY.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', 'interface ITREASURY {\n', '\n', '    function token() external view returns (IERC20);\n', '\n', '    function fundsAvailable() external view returns (uint256);\n', '\n', '    function release() external;\n', '}\n', '\n', '// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity\\contracts\\access\\Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\TokenPool.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    function balance() external view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\n', '        return token.transfer(to, value);\n', '    }\n', '}\n', '\n', '// File: contracts\\ReflectiveStake.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'contract ReflectiveStake is ReentrancyGuard{\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n', '    event TokensUnlocked(uint256 amount, uint256 total);\n', '\n', '    TokenPool private _stakingPool;\n', '    TokenPool private _unlockedPool;\n', '    ITREASURY private _reflectiveTreasury;\n', '\n', '    uint256 public constant BONUS_DECIMALS = 2;\n', '    uint256 public startBonus = 0;\n', '    uint256 public bonusPeriodSec = 0;\n', '    uint256 public lockupSec = 0;\n', '\n', '    uint256 public totalStakingShares = 0;\n', '    uint256 public totalStakingShareSeconds = 0;\n', '    uint256 public lastAccountingTimestampSec = block.timestamp;\n', '    uint256 private _initialSharesPerToken = 0;\n', '\n', '    struct Stake {\n', '        uint256 stakingShares;\n', '        uint256 timestampSec;\n', '    }\n', '\n', '    struct UserTotals {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastAccountingTimestampSec;\n', '    }\n', '\n', '    mapping(address => UserTotals) private _userTotals;\n', '\n', '    mapping(address => Stake[]) private _userStakes;\n', '\n', '    /**\n', '     * @param stakingToken The token users deposit as stake.\n', '     * @param distributionToken The token users receive as they unstake.\n', '     * @param reflectiveTreasury The address of the treasury contract that will fund the rewards.\n', '     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\n', '     *                    e.g. 25% means user gets 25% of max distribution tokens.\n', '     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '     * @param lockupSec_ Lockup period after staking.\n', '     */\n', '    constructor(IERC20 stakingToken, IERC20 distributionToken, ITREASURY reflectiveTreasury,\n', '                uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken, uint256 lockupSec_) public {\n', '        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n', "        require(startBonus_ <= 10**BONUS_DECIMALS, 'ReflectiveStake: start bonus too high');\n", '        // If no period is desired, instead set startBonus = 100%\n', '        // and bonusPeriod to a small value like 1sec.\n', "        require(bonusPeriodSec_ > 0, 'ReflectiveStake: bonus period is zero');\n", "        require(initialSharesPerToken > 0, 'ReflectiveStake: initialSharesPerToken is zero');\n", '\n', '        _stakingPool = new TokenPool(stakingToken);\n', '        _unlockedPool = new TokenPool(distributionToken);\n', '        _reflectiveTreasury = reflectiveTreasury;\n', "        require(_unlockedPool.token() == _reflectiveTreasury.token(), 'ReflectiveStake: distribution token does not match treasury token');\n", '        startBonus = startBonus_;\n', '        bonusPeriodSec = bonusPeriodSec_;\n', '        _initialSharesPerToken = initialSharesPerToken;\n', '        lockupSec = lockupSec_;\n', '    }\n', '\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _stakingPool.token();\n', '    }\n', '\n', '    function getDistributionToken() external view returns (IERC20) {\n', '        return _unlockedPool.token();\n', '    }\n', '\n', '    function stake(uint256 amount) external nonReentrant {\n', "        require(amount > 0, 'ReflectiveStake: stake amount is zero');\n", '        require(totalStakingShares == 0 || totalStaked() > 0,\n', "                'ReflectiveStake: Invalid state. Staking shares exist, but no staking tokens do');\n", '\n', '        // Get Actual Amount here minus TX fee\n', '        uint256 transferAmount = _applyFee(amount);\n', '\n', '        uint256 mintedStakingShares = (totalStakingShares > 0)\n', '            ? totalStakingShares.mul(transferAmount).div(totalStaked())\n', '            : transferAmount.mul(_initialSharesPerToken);\n', "        require(mintedStakingShares > 0, 'ReflectiveStake: Stake amount is too small');\n", '\n', '        updateAccounting();\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[msg.sender];\n', '        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '        totals.lastAccountingTimestampSec = block.timestamp;\n', '\n', '        Stake memory newStake = Stake(mintedStakingShares, block.timestamp);\n', '        _userStakes[msg.sender].push(newStake);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '\n', '        // interactions\n', '        require(_stakingPool.token().transferFrom(msg.sender, address(_stakingPool), amount),\n', "            'ReflectiveStake: transfer into staking pool failed');\n", '\n', '        emit Staked(msg.sender, transferAmount, totalStakedFor(msg.sender), "");\n', '    }\n', '\n', '    /**\n', '     * @notice Applies token fee.  Override for tokens other than ELE.\n', '     */\n', '    function _applyFee(uint256 amount) internal view virtual returns (uint256) {\n', '        uint256 tFeeHalf = amount.div(200);\n', '        uint256 tFee = tFeeHalf.mul(2);\n', '        uint256 tTransferAmount = amount.sub(tFee); \n', '        return tTransferAmount;\n', '    }\n', '\n', '    function unstake(uint256 amount) external nonReentrant returns (uint256) {\n', '        updateAccounting();\n', '        return _unstake(amount);\n', '    }\n', '\n', '    function unstakeMax() external nonReentrant returns (uint256) {\n', '        updateAccounting();\n', '        return _unstake(totalStakedFor(msg.sender));\n', '    }\n', '\n', '    function _unstake(uint256 amount) private returns (uint256) {\n', '        // checks\n', "        require(amount > 0, 'ReflectiveStake: unstake amount is zero');\n", '        require(totalStakedFor(msg.sender) >= amount,\n', "            'ReflectiveStake: unstake amount is greater than total user stakes');\n", '        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(totalStaked());\n', "        require(stakingSharesToBurn > 0, 'ReflectiveStake: Unable to unstake amount this small');\n", '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[msg.sender];\n', '        Stake[] storage accountStakes = _userStakes[msg.sender];\n', '\n', '        Stake memory mostRecentStake = accountStakes[accountStakes.length - 1];\n', "        require(block.timestamp.sub(mostRecentStake.timestampSec) > lockupSec, 'ReflectiveStake: Cannot unstake before the lockup period has expired');\n", '\n', '        // Redeem from most recent stake and go backwards in time.\n', '        uint256 stakingShareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 rewardAmount = 0;\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '            uint256 stakeTimeSec = block.timestamp.sub(lastStake.timestampSec);\n', '            uint256 newStakingShareSecondsToBurn = 0;\n', '            if (lastStake.stakingShares <= sharesLeftToBurn) {\n', '                // fully redeem a past stake\n', '                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSec);\n', '                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\n', '                accountStakes.pop();\n', '            } else {\n', '                // partially redeem a past stake\n', '                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\n', '                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '                lastStake.stakingShares = lastStake.stakingShares.sub(sharesLeftToBurn);\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShareSeconds = totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '\n', '        // interactions\n', '        require(_stakingPool.transfer(msg.sender, amount),\n', "            'ReflectiveStake: transfer out of staking pool failed');\n", '\n', '        if (rewardAmount > 0) {\n', '            require(_unlockedPool.transfer(msg.sender, rewardAmount),\n', "                'ReflectiveStake: transfer out of unlocked pool failed');\n", '        }\n', '\n', '\n', '        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), "");\n', '        emit TokensClaimed(msg.sender, rewardAmount);\n', '\n', '        require(totalStakingShares == 0 || totalStaked() > 0,\n', '                "ReflectiveStake: Error unstaking. Staking shares exist, but no staking tokens do");\n', '        return rewardAmount;\n', '    }\n', '\n', '    function computeNewReward(uint256 currentRewardTokens,\n', '                                uint256 stakingShareSeconds,\n', '                                uint256 stakeTimeSec) private view returns (uint256) {\n', '\n', '        uint256 newRewardTokens =\n', '            totalUnlocked()\n', '            .mul(stakingShareSeconds)\n', '            .div(totalStakingShareSeconds);\n', '\n', '        if (stakeTimeSec >= bonusPeriodSec) {\n', '            return currentRewardTokens.add(newRewardTokens);\n', '        }\n', '\n', '        uint256 oneHundredPct = 10**BONUS_DECIMALS;\n', '        uint256 bonusedReward =\n', '            startBonus\n', '            .add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec))\n', '            .mul(newRewardTokens)\n', '            .div(oneHundredPct);\n', '        return currentRewardTokens.add(bonusedReward);\n', '    }\n', '\n', '    function getUserStakes(address addr) external view returns (Stake[] memory){\n', '        Stake[] memory userStakes = _userStakes[addr];\n', '        return userStakes;\n', '    }\n', '\n', '    function getUserTotals(address addr) external view returns (UserTotals memory) {\n', '        UserTotals memory userTotals = _userTotals[addr];\n', '        return userTotals;\n', '    }\n', '\n', '    function totalStakedFor(address addr) public view returns (uint256) {\n', '        return totalStakingShares > 0 ?\n', '            totalStaked().mul(_userTotals[addr].stakingShares).div(totalStakingShares) : 0;\n', '    }\n', '\n', '    function totalStaked() public view returns (uint256) {\n', '        return _stakingPool.balance();\n', '    }\n', '\n', '    function token() external view returns (address) {\n', '        return address(getStakingToken());\n', '    }\n', '\n', '    function treasuryTarget() external view returns (address) {\n', '        return address(_unlockedPool);\n', '    }\n', '\n', '    function stakingPool() internal view returns (address) {\n', '        return address(_stakingPool);\n', '    }\n', '\n', '    function updateAccounting() private returns (\n', '        uint256, uint256, uint256, uint256, uint256, uint256) {\n', '\n', '        unlockTokens();\n', '\n', '        // Global accounting\n', '        uint256 newStakingShareSeconds =\n', '            block.timestamp\n', '            .sub(lastAccountingTimestampSec)\n', '            .mul(totalStakingShares);\n', '        totalStakingShareSeconds = totalStakingShareSeconds.add(newStakingShareSeconds);\n', '        lastAccountingTimestampSec = block.timestamp;\n', '\n', '        // User Accounting\n', '        UserTotals storage totals = _userTotals[msg.sender];\n', '        uint256 newUserStakingShareSeconds =\n', '            block.timestamp\n', '            .sub(totals.lastAccountingTimestampSec)\n', '            .mul(totals.stakingShares);\n', '        totals.stakingShareSeconds =\n', '            totals.stakingShareSeconds\n', '            .add(newUserStakingShareSeconds);\n', '        totals.lastAccountingTimestampSec = block.timestamp;\n', '\n', '        uint256 totalUserRewards = (totalStakingShareSeconds > 0)\n', '            ? totalUnlocked().mul(totals.stakingShareSeconds).div(totalStakingShareSeconds)\n', '            : 0;\n', '\n', '        return (\n', '            totalPending(),\n', '            totalUnlocked(),\n', '            totals.stakingShareSeconds,\n', '            totalStakingShareSeconds,\n', '            totalUserRewards,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function isUnlocked(address account) external view returns (bool) {\n', '        if (totalStakedFor(account) == 0) return false;\n', '        Stake[] memory accountStakes = _userStakes[account];\n', '        Stake memory mostRecentStake = accountStakes[accountStakes.length - 1];\n', '        return block.timestamp.sub(mostRecentStake.timestampSec) > lockupSec;\n', '    }\n', '\n', '    function totalPending() public view returns (uint256) {\n', '        return _reflectiveTreasury.fundsAvailable();\n', '    }\n', '\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    function totalAvailable() external view returns (uint256) {\n', '        return totalUnlocked().add(totalPending());\n', '    }\n', '\n', '    function unlockTokens() public {\n', '        if (totalPending() > 0) _reflectiveTreasury.release();\n', '    }\n', '}\n', '\n', '// File: contracts\\INRCH.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', 'interface INRCH {\n', '\n', '    function transferedAfterTax(address _debtor, address _creditor, uint256 _value) external view returns (uint256);\n', '    \n', '}\n', '\n', '// File: contracts\\NRCHStake.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', 'contract NRCHStake is ReflectiveStake {\n', '    using SafeMath for uint256;\n', '\n', '    INRCH private _nrchContract;\n', '\n', '    constructor(IERC20 stakingToken, IERC20 distributionToken, ITREASURY reflectiveTreasury,\n', '    uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken, uint256 lockupSec_, INRCH nrchContract)\n', '    ReflectiveStake(stakingToken, distributionToken, reflectiveTreasury, startBonus_, bonusPeriodSec_, initialSharesPerToken, lockupSec_)\n', '    public {\n', '        _nrchContract = nrchContract;\n', '    }\n', '\n', '    function _applyFee(uint256 amount) internal view override returns (uint256) {\n', '        return _nrchContract.transferedAfterTax(msg.sender, stakingPool(), amount);\n', '    }\n', '\n', '}']