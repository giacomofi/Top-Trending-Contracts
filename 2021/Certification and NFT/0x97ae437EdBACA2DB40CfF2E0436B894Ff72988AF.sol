['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', '// File: contracts/XFactory/storage/XFactorySlot.sol\n', 'pragma solidity ^0.6.12;\n', '\n', ' /**\n', '  * @title BiFi-X XFactorySlot contract\n', '  * @notice For prevent proxy storage variable mismatch\n', '  * @author BiFi-X(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\n', '  */\n', 'contract XFactorySlot {\n', '  address public storageAddr;\n', '  address public _implements;\n', '  address public _storage;\n', '\n', '  address public owner;\n', '  address public NFT;\n', '\n', '  address public bifiManagerAddr;\n', '  address public uniswapV2Addr;\n', '\n', '  address public bifiAddr;\n', '  address public wethAddr;\n', '\n', '  // bifi fee variable\n', '  uint256 fee;\n', '  uint256 discountBase;\n', '}\n', '\n', '// File: contracts/XFactory/XFactory.sol\n', '// SPDX-License-Identifier: BSD-3-Clause\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', ' /**\n', '  * @title BiFi-X XFactory proxy contract\n', '  * @author BiFi-X(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\n', '  */\n', 'contract XFactory is XFactorySlot {\n', '  /**\n', '\t* @dev Constructor\n', '\t* @param implementsAddr The address of XFactoryExternal logic contract\n', '  * @param _storageAddr The address of XFactory data storage\n', '  * @param _bifiManagerAddr The address of bifi manager\n', '  * @param _uniswapV2Addr The address of uniswap v2\n', '  * @param _bifiAddr The address of bifi token\n', '  * @param _wethAddr The address of weth token\n', '  * @param _fee The amount of static bifi-x fee\n', '  * @param _discountBase The minimum amount hold to get a flashloan fee discount\n', '\t*/\n', '  constructor(\n', '    address implementsAddr,\n', '    address _storageAddr,\n', '    address _bifiManagerAddr,\n', '    address _uniswapV2Addr,\n', '    address _bifiAddr,\n', '    address _wethAddr,\n', '    uint256 _fee,\n', '    uint256 _discountBase\n', '  )\n', '  public {\n', '    owner = msg.sender;\n', '    _implements = implementsAddr;\n', '    storageAddr = _storageAddr;\n', '\n', '    // set slot\n', '    bifiManagerAddr = _bifiManagerAddr;\n', '    uniswapV2Addr = _uniswapV2Addr;\n', '    bifiAddr = _bifiAddr;\n', '    wethAddr = _wethAddr;\n', '    fee = _fee;\n', '    discountBase = _discountBase;\n', '  }\n', '\n', '  fallback() external payable {\n', '    address addr = _implements;\n', '    assembly {\n', '      calldatacopy(0, 0, calldatasize())\n', '      let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\n', '      returndatacopy(0, 0, returndatasize())\n', '      switch result\n', '      case 0 { revert(0, returndatasize()) }\n', '      default { return(0, returndatasize()) }\n', '    }\n', '  }\n', '\n', '  receive() external payable {}\n', '}']