['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.3 https://hardhat.org\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File interfaces/badger/IController.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '\n', '    function strategies(address) external view returns (address);\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function earn(address, uint256) external;\n', '\n', '    function want(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function vaults(address) external view returns (address);\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library MathUpgradeable {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File interfaces/uniswap/IUniswapRouterV2.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IUniswapRouterV2 {\n', '    function factory() external view returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', '\n', '// File interfaces/badger/IStrategy.sol\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IStrategy {\n', '    function want() external view returns (address);\n', '\n', '    function deposit() external;\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address) external returns (uint256 balance);\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdraw(uint256) external;\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdrawAll() external returns (uint256);\n', '\n', '    function balanceOf() external view returns (uint256);\n', '\n', '    function getName() external pure returns (string memory);\n', '\n', '    function setStrategist(address _strategist) external;\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external;\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\n', '\n', '    function setGovernance(address _governance) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function tend() external;\n', '\n', '    function harvest() external;\n', '}\n', '\n', '\n', '// File contracts/badger-sett/SettAccessControl.sol\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', '\n', '/*\n', '    Common base for permissioned roles throughout Sett ecosystem\n', '*/\n', 'contract SettAccessControl is Initializable {\n', '    address public governance;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    // ===== MODIFIERS =====\n', '    function _onlyGovernance() internal view {\n', '        require(msg.sender == governance, "onlyGovernance");\n', '    }\n', '\n', '    function _onlyGovernanceOrStrategist() internal view {\n', '        require(msg.sender == strategist || msg.sender == governance, "onlyGovernanceOrStrategist");\n', '    }\n', '\n', '    function _onlyAuthorizedActors() internal view {\n', '        require(msg.sender == keeper || msg.sender == governance, "onlyAuthorizedActors");\n', '    }\n', '\n', '    // ===== PERMISSIONED ACTIONS =====\n', '\n', '    /// @notice Change strategist address\n', '    /// @notice Can only be changed by governance itself\n', '    function setStrategist(address _strategist) external {\n', '        _onlyGovernance();\n', '        strategist = _strategist;\n', '    }\n', '\n', '    /// @notice Change keeper address\n', '    /// @notice Can only be changed by governance itself\n', '    function setKeeper(address _keeper) external {\n', '        _onlyGovernance();\n', '        keeper = _keeper;\n', '    }\n', '\n', '    /// @notice Change governance address\n', '    /// @notice Can only be changed by governance itself\n', '    function setGovernance(address _governance) public {\n', '        _onlyGovernance();\n', '        governance = _governance;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/badger-sett/strategies/BaseStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', '    ===== Badger Base Strategy =====\n', '    Common base class for all Sett strategies\n', '\n', '    Changelog\n', '    V1.1\n', '    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\n', '    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\n', '\n', '    V1.2\n', '    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\n', '*/\n', 'abstract contract BaseStrategy is PausableUpgradeable, SettAccessControl {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    event Withdraw(uint256 amount);\n', '    event WithdrawAll(uint256 balance);\n', '    event WithdrawOther(address token, uint256 amount);\n', '    event SetStrategist(address strategist);\n', '    event SetGovernance(address governance);\n', '    event SetController(address controller);\n', '    event SetWithdrawalFee(uint256 withdrawalFee);\n', '    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\n', '    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\n', '    event Harvest(uint256 harvested, uint256 indexed blockNumber);\n', '    event Tend(uint256 tended);\n', '\n', '    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\n', '\n', '    uint256 public performanceFeeGovernance;\n', '    uint256 public performanceFeeStrategist;\n', '    uint256 public withdrawalFee;\n', '\n', '    uint256 public constant MAX_FEE = 10000;\n', '    address public constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\n', '\n', '    address public controller;\n', '    address public guardian;\n', '\n', '    uint256 public withdrawalMaxDeviationThreshold;\n', '\n', '    function __BaseStrategy_init(\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _keeper,\n', '        address _guardian\n', '    ) public initializer whenNotPaused {\n', '        __Pausable_init();\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        keeper = _keeper;\n', '        controller = _controller;\n', '        guardian = _guardian;\n', '        withdrawalMaxDeviationThreshold = 50;\n', '    }\n', '\n', '    // ===== Modifiers =====\n', '\n', '    function _onlyController() internal view {\n', '        require(msg.sender == controller, "onlyController");\n', '    }\n', '\n', '    function _onlyAuthorizedActorsOrController() internal view {\n', '        require(msg.sender == keeper || msg.sender == governance || msg.sender == controller, "onlyAuthorizedActorsOrController");\n', '    }\n', '\n', '    function _onlyAuthorizedPausers() internal view {\n', '        require(msg.sender == guardian || msg.sender == governance, "onlyPausers");\n', '    }\n', '\n', '    /// ===== View Functions =====\n', '    function baseStrategyVersion() public view returns (string memory) {\n', '        return "1.2";\n', '    }\n', '\n', '    /// @notice Get the balance of want held idle in the Strategy\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20Upgradeable(want).balanceOf(address(this));\n', '    }\n', '\n', '    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\n', '    function balanceOf() public virtual view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    function isTendable() public virtual view returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Governance =====\n', '\n', '    function setGuardian(address _guardian) external {\n', '        _onlyGovernance();\n', '        guardian = _guardian;\n', '    }\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external {\n', '        _onlyGovernance();\n', '        require(_withdrawalFee <= MAX_FEE, "base-strategy/excessive-withdrawal-fee");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external {\n', '        _onlyGovernance();\n', '        require(_performanceFeeStrategist <= MAX_FEE, "base-strategy/excessive-strategist-performance-fee");\n', '        performanceFeeStrategist = _performanceFeeStrategist;\n', '    }\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external {\n', '        _onlyGovernance();\n', '        require(_performanceFeeGovernance <= MAX_FEE, "base-strategy/excessive-governance-performance-fee");\n', '        performanceFeeGovernance = _performanceFeeGovernance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        _onlyGovernance();\n', '        controller = _controller;\n', '    }\n', '\n', '    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\n', '        _onlyGovernance();\n', '        require(_threshold <= MAX_FEE, "base-strategy/excessive-max-deviation-threshold");\n', '        withdrawalMaxDeviationThreshold = _threshold;\n', '    }\n', '\n', '    function deposit() public virtual whenNotPaused {\n', '        _onlyAuthorizedActorsOrController();\n', '        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            _deposit(_want);\n', '        }\n', '        _postDeposit();\n', '    }\n', '\n', '    // ===== Permissioned Actions: Controller =====\n', '\n', '    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdrawAll() external virtual whenNotPaused returns (uint256 balance) {\n', '        _onlyController();\n', '\n', '        _withdrawAll();\n', '\n', '        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\n', '    }\n', '\n', '    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\n', '    /// @notice Processes withdrawal fee if present\n', '    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\n', '    function withdraw(uint256 _amount) external virtual whenNotPaused {\n', '        _onlyController();\n', '\n', '        // Withdraw from strategy positions, typically taking from any idle want first.\n', '        _withdrawSome(_amount);\n', '        uint256 _postWithdraw = IERC20Upgradeable(want).balanceOf(address(this));\n', '\n', '        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\n', '        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\n', '        if (_postWithdraw < _amount) {\n', '            uint256 diff = _diff(_amount, _postWithdraw);\n', '\n', '            // Require that difference between expected and actual values is less than the deviation threshold percentage\n', '            require(diff <= _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE), "base-strategy/withdraw-exceed-max-deviation-threshold");\n', '        }\n', '\n', '        // Return the amount actually withdrawn if less than amount requested\n', '        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\n', '\n', '        // Process withdrawal fee\n', '        uint256 _fee = _processWithdrawalFee(_toWithdraw);\n', '\n', '        // Transfer remaining to Vault to handle withdrawal\n', '        _transferToVault(_toWithdraw.sub(_fee));\n', '    }\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address _asset) external virtual whenNotPaused returns (uint256 balance) {\n', '        _onlyController();\n', '        _onlyNotProtectedTokens(_asset);\n', '\n', '        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\n', '        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Authoized Contract Pausers =====\n', '\n', '    function pause() external {\n', '        _onlyAuthorizedPausers();\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external {\n', '        _onlyGovernance();\n', '        _unpause();\n', '    }\n', '\n', '    /// ===== Internal Helper Functions =====\n', '\n', '    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\n', '    /// @return The withdrawal fee that was taken\n', '    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\n', '        if (withdrawalFee == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\n', '        IERC20Upgradeable(want).safeTransfer(IController(controller).rewards(), fee);\n', '        return fee;\n', '    }\n', '\n', '    /// @dev Helper function to process an arbitrary fee\n', '    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\n', '    /// @return The fee that was taken\n', '    function _processFee(\n', '        address token,\n', '        uint256 amount,\n', '        uint256 feeBps,\n', '        address recipient\n', '    ) internal returns (uint256) {\n', '        if (feeBps == 0) {\n', '            return 0;\n', '        }\n', '        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\n', '        IERC20Upgradeable(token).safeTransfer(recipient, fee);\n', '        return fee;\n', '    }\n', '\n', '    /// @dev Reset approval and approve exact amount\n', '    function _safeApproveHelper(\n', '        address token,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        IERC20Upgradeable(token).safeApprove(recipient, 0);\n', '        IERC20Upgradeable(token).safeApprove(recipient, amount);\n', '    }\n', '\n', '    function _transferToVault(uint256 _amount) internal {\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\n', '    }\n', '\n', '    /// @notice Swap specified balance of given token on Uniswap with given path\n', '    function _swap(\n', '        address startToken,\n', '        uint256 balance,\n', '        address[] memory path\n', '    ) internal {\n', '        _safeApproveHelper(startToken, uniswap, balance);\n', '        IUniswapRouterV2(uniswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\n', '    }\n', '\n', '    function _swapEthIn(uint256 balance, address[] memory path) internal {\n', '        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\n', '    }\n', '\n', '    function _swapEthOut(\n', '        address startToken,\n', '        uint256 balance,\n', '        address[] memory path\n', '    ) internal {\n', '        _safeApproveHelper(startToken, uniswap, balance);\n', '        IUniswapRouterV2(uniswap).swapExactTokensForETH(balance, 0, path, address(this), now);\n', '    }\n', '\n', '    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\n', '    function _add_max_liquidity_uniswap(address token0, address token1) internal virtual {\n', '        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\n', '        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\n', '\n', '        _safeApproveHelper(token0, uniswap, _token0Balance);\n', '        _safeApproveHelper(token1, uniswap, _token1Balance);\n', '\n', '        IUniswapRouterV2(uniswap).addLiquidity(token0, token1, _token0Balance, _token1Balance, 0, 0, address(this), block.timestamp);\n', '    }\n', '\n', '    /// @notice Utility function to diff two numbers, expects higher value in first position\n', '    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(a >= b, "diff/expected-higher-number-in-first-position");\n', '        return a.sub(b);\n', '    }\n', '\n', '    // ===== Abstract Functions: To be implemented by specific Strategies =====\n', '\n', '    /// @dev Internal deposit logic to be implemented by Stratgies\n', '    function _deposit(uint256 _want) internal virtual;\n', '\n', '    function _postDeposit() internal virtual {\n', '        //no-op by default\n', '    }\n', '\n', '    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\n', '    function _onlyNotProtectedTokens(address _asset) internal virtual;\n', '\n', '    function getProtectedTokens() external virtual view returns (address[] memory);\n', '\n', '    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\n', '    function _withdrawAll() internal virtual;\n', '\n', '    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\n', '    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\n', '    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\n', '\n', '    /// @dev Realize returns from positions\n', '    /// @dev Returns can be reinvested into positions, or distributed in another fashion\n', '    /// @dev Performance fees should also be implemented in this function\n', "    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\n", '    // function harvest() external virtual;\n', '\n', '    /// @dev User-friendly name for this strategy for purposes of convenient reading\n', '    function getName() external virtual pure returns (string memory);\n', '\n', '    /// @dev Balance of want currently held in strategy positions\n', '    function balanceOfPool() public virtual view returns (uint256);\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File contracts/badger-sett/strategies/digg/StabilizeStrategyDiggV1.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', '    This is a strategy to stabilize Digg with wBTC. It takes advantage of market momentum and accumulated collateral to\n', '    track Digg price with BTC price after rebase events. Users exposed in this strategy are somewhat protected from\n', '    a loss of value due to a negative rebase\n', '    \n', '    Authorized parties include many different parties that can modify trade parameters and fees\n', '*/\n', '\n', 'interface AggregatorV3Interface {\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound\n', '        );\n', '}\n', '\n', 'interface TradeRouter {\n', '    function swapExactETHForTokens(\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external payable returns (uint256[] memory);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external returns (uint256[] memory);\n', '\n', '    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory); // For a value in, it calculates value out\n', '}\n', '\n', 'interface UniswapLikeLPToken {\n', '    function sync() external; // We need to call sync before Trading on Uniswap/Sushiswap due to rebase potential of Digg\n', '}\n', '\n', 'interface DiggTreasury {\n', '    function exchangeWBTCForDigg(\n', '        uint256, // wBTC that we are sending to the treasury exchange\n', '        uint256, // digg that we are requesting from the treasury exchange\n', '        address // address to send the digg to, which is this address\n', '    ) external;\n', '}\n', '\n', 'contract StabilizeStrategyDiggV1 is BaseStrategy {\n', '    using SafeERC20Upgradeable for ERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    // Variables\n', '    uint256 public stabilizeFee; // 1000 = 1%, this fee goes to Stabilize Treasury\n', '    address public diggExchangeTreasury;\n', '    address public stabilizeVault; // Address to the Stabilize treasury\n', '\n', '    uint256 public strategyLockedUntil; // The blocknumber that the strategy will prevent withdrawals until\n', '    bool public diggInExpansion;\n', '    uint256 public lastDiggTotalSupply; // The last recorded total supply of the digg token\n', '    uint256 public lastDiggPrice; // The price of Digg at last trade in BTC units\n', '    uint256 public diggSupplyChangeFactor = 50000; // This is a factor used by the strategy to determine how much digg to sell in expansion\n', '    uint256 public wbtcSupplyChangeFactor = 20000; // This is a factor used by the strategy to determine how much wbtc to sell in contraction\n', '    uint256 public wbtcSellAmplificationFactor = 2; // The higher this number the more aggressive the buyback in contraction\n', '    uint256 public maxGainedDiggSellPercent = 100000; // The maximum percent of sellable Digg gains through rebase\n', '    uint256 public maxWBTCSellPercent = 50000; // The maximum percent of sellable wBTC;\n', '    uint256 public tradeBatchSize = 10e18; // The normalized size of the trade batches, can be adjusted\n', '    uint256 public tradeAmountLeft = 0; // The amount left to trade\n', '    uint256 private _maxOracleLag = 2 days; // Maximum amount of lag the oracle can have before reverting the price\n', '\n', '    // Constants\n', '    uint256 constant DIVISION_FACTOR = 100000;\n', '    address constant SUSHISWAP_ROUTER_ADDRESS = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // Sushi swap router\n', '    address constant UNISWAP_ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address constant SUSHISWAP_DIGG_LP = address(0x9a13867048e01c663ce8Ce2fE0cDAE69Ff9F35E3); // Will need to sync before trading\n', '    address constant UNISWAP_DIGG_LP = address(0xE86204c4eDDd2f70eE00EAd6805f917671F56c52);\n', '    address constant BTC_ORACLE_ADDRESS = address(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c); // Chainlink BTC Oracle\n', '    address constant DIGG_ORACLE_ADDRESS = address(0x418a6C98CD5B8275955f08F0b8C1c6838c8b1685); // Chainlink DIGG Oracle\n', '\n', '    struct TokenInfo {\n', '        ERC20Upgradeable token; // Reference of token\n', '        uint256 decimals; // Decimals of token\n', '    }\n', '\n', '    TokenInfo[] private tokenList; // An array of tokens accepted as deposits\n', '\n', '    event TradeState(\n', '        uint256 soldAmountNormalized,\n', '        int256 percentPriceChange,\n', '        uint256 soldPercent,\n', '        uint256 oldSupply,\n', '        uint256 newSupply,\n', '        uint256 blocknumber\n', '    );\n', '\n', '    event NoTrade(uint256 blocknumber);\n', '\n', '    function initialize(\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _keeper,\n', '        address _guardian,\n', '        uint256 _lockedUntil,\n', '        address[2] memory _vaultConfig,\n', '        uint256[4] memory _feeConfig\n', '    ) public initializer {\n', '        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);\n', '\n', '        stabilizeVault = _vaultConfig[0];\n', '        diggExchangeTreasury = _vaultConfig[1];\n', '\n', '        performanceFeeGovernance = _feeConfig[0];\n', '        performanceFeeStrategist = _feeConfig[1];\n', '        withdrawalFee = _feeConfig[2];\n', '        stabilizeFee = _feeConfig[3];\n', '        strategyLockedUntil = _lockedUntil; // Deployer can optionally lock strategy from withdrawing until a certain blocknumber\n', '\n', '        setupTradeTokens();\n', '        lastDiggPrice = getDiggPrice();\n', '        lastDiggTotalSupply = tokenList[0].token.totalSupply(); // The supply only changes at rebase\n', '        want = address(tokenList[0].token);\n', '    }\n', '\n', '    function setupTradeTokens() internal {\n', '        // Start with DIGG\n', '        ERC20Upgradeable _token = ERC20Upgradeable(address(0x798D1bE841a82a273720CE31c822C61a67a601C3));\n', '        tokenList.push(TokenInfo({token: _token, decimals: _token.decimals()}));\n', '\n', '        // WBTC\n', '        _token = ERC20Upgradeable(address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599));\n', '        tokenList.push(TokenInfo({token: _token, decimals: _token.decimals()}));\n', '    }\n', '\n', '    function _onlyAnyAuthorizedParties() internal view {\n', '        require(\n', '            msg.sender == strategist || msg.sender == governance || msg.sender == controller || msg.sender == keeper || msg.sender == guardian,\n', '            "Not an authorized party"\n', '        );\n', '    }\n', '\n', '    /// ===== View Functions =====\n', '\n', '    // Chainlink price grabbers\n', '    function getDiggUSDPrice() public view returns (uint256) {\n', '        AggregatorV3Interface priceOracle = AggregatorV3Interface(DIGG_ORACLE_ADDRESS);\n', '        (, int256 intPrice, , uint256 lastUpdateTime, ) = priceOracle.latestRoundData(); // We only want the answer\n', '        require(block.timestamp.sub(lastUpdateTime) < _maxOracleLag, "Price data is too old to use");\n', '        uint256 usdPrice = uint256(intPrice);\n', '        priceOracle = AggregatorV3Interface(BTC_ORACLE_ADDRESS);\n', '        (, intPrice, , lastUpdateTime, ) = priceOracle.latestRoundData(); // We only want the answer\n', '        require(block.timestamp.sub(lastUpdateTime) < _maxOracleLag, "Price data is too old to use");\n', '        usdPrice = usdPrice.mul(uint256(intPrice)).mul(10**2);\n', '        return usdPrice; // Digg Price in USD\n', '    }\n', '\n', '    function getDiggPrice() public view returns (uint256) {\n', '        AggregatorV3Interface priceOracle = AggregatorV3Interface(DIGG_ORACLE_ADDRESS);\n', '        (, int256 intPrice, , uint256 lastUpdateTime, ) = priceOracle.latestRoundData(); // We only want the answer\n', '        require(block.timestamp.sub(lastUpdateTime) < _maxOracleLag, "Price data is too old to use");\n', '        return uint256(intPrice).mul(10**10);\n', '    }\n', '\n', '    function getWBTCUSDPrice() public view returns (uint256) {\n', '        AggregatorV3Interface priceOracle = AggregatorV3Interface(BTC_ORACLE_ADDRESS);\n', '        (, int256 intPrice, , uint256 lastUpdateTime, ) = priceOracle.latestRoundData(); // We only want the answer\n', '        require(block.timestamp.sub(lastUpdateTime) < _maxOracleLag, "Price data is too old to use");\n', '        return uint256(intPrice).mul(10**10);\n', '    }\n', '\n', '    function getTokenAddress(uint256 _id) external view returns (address) {\n', '        require(_id < tokenList.length, "ID is too high");\n', '        return address(tokenList[_id].token);\n', '    }\n', '\n', '    function getName() external pure override returns (string memory) {\n', '        return "StabilizeStrategyDiggV1";\n', '    }\n', '\n', '    function version() external pure returns (string memory) {\n', '        return "1.0";\n', '    }\n', '\n', '    function balanceOf() public view override returns (uint256) {\n', '        // This will return the DIGG and DIGG equivalent of WBTC in Digg decimals\n', '        uint256 _diggAmount = tokenList[0].token.balanceOf(address(this));\n', '        uint256 _wBTCAmount = tokenList[1].token.balanceOf(address(this));\n', '        return _diggAmount.add(wbtcInDiggUnits(_wBTCAmount));\n', '    }\n', '\n', '    function wbtcInDiggUnits(uint256 amount) internal view returns (uint256) {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '        amount = amount.mul(1e18).div(10**tokenList[1].decimals); // Normalize the wBTC amount\n', '        uint256 _digg = amount.mul(getWBTCUSDPrice()).div(1e18); // Get the USD value of wBtC\n', '        _digg = _digg.mul(1e18).div(getDiggUSDPrice());\n', '        _digg = _digg.mul(10**tokenList[0].decimals).div(1e18); // Convert to Digg units\n', '        return _digg;\n', '    }\n', '\n', '    function diggInWBTCUnits(uint256 amount) internal view returns (uint256) {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '        // Converts digg into wbtc equivalent\n', '        amount = amount.mul(1e18).div(10**tokenList[0].decimals); // Normalize the digg amount\n', '        uint256 _wbtc = amount.mul(getDiggUSDPrice()).div(1e18); // Get the USD value of digg\n', '        _wbtc = _wbtc.mul(1e18).div(getWBTCUSDPrice());\n', '        _wbtc = _wbtc.mul(10**tokenList[1].decimals).div(1e18); // Convert to wbtc units\n', '        return _wbtc;\n', '    }\n', '\n', '    /// @dev Not used\n', '    function balanceOfPool() public view override returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    function getProtectedTokens() external view override returns (address[] memory) {\n', '        address[] memory protectedTokens = new address[](2);\n', '        protectedTokens[0] = address(tokenList[0].token);\n', '        protectedTokens[1] = address(tokenList[1].token);\n', '        return protectedTokens;\n', '    }\n', '\n', '    // Customer active Strategy functions\n', '\n', '    // This function will sell one token for another on Sushiswap and Uniswap\n', '    function exchange(\n', '        uint256 _inID,\n', '        uint256 _outID,\n', '        uint256 _amount\n', '    ) internal {\n', '        address _inputToken = address(tokenList[_inID].token);\n', '        address _outputToken = address(tokenList[_outID].token);\n', '        // One route, between DIGG and WBTC on Sushiswap and Uniswap, split based on liquidity of LPs\n', '        address[] memory path = new address[](2);\n', '        path[0] = _inputToken;\n', '        path[1] = _outputToken;\n', '\n', '        // Sync Sushiswap pool\n', '        UniswapLikeLPToken lpPool = UniswapLikeLPToken(SUSHISWAP_DIGG_LP);\n', '        lpPool.sync(); // Sync the pool amounts\n', '        // Sync Uniswap pool\n', '        lpPool = UniswapLikeLPToken(UNISWAP_DIGG_LP);\n', '        lpPool.sync(); // Sync the pool amounts\n', '\n', '        // Now determine the split between Uni and Sushi\n', '        // Amount sold is split between these two biggest liquidity providers to decrease the chance of price inequities between the exchanges\n', '        // This also helps reduce slippage and creates a higher return than using one exchange\n', '        // Look at the total balance of the pooled tokens in Uniswap compared to the total for both exchanges\n', '        uint256 uniPercent =\n', '            tokenList[0]\n', '                .token\n', '                .balanceOf(address(UNISWAP_DIGG_LP))\n', '                .add(tokenList[1].token.balanceOf(address(UNISWAP_DIGG_LP)))\n', '                .mul(DIVISION_FACTOR)\n', '                .div(\n', '                tokenList[0]\n', '                    .token\n', '                    .balanceOf(address(UNISWAP_DIGG_LP))\n', '                    .add(tokenList[0].token.balanceOf(address(SUSHISWAP_DIGG_LP)))\n', '                    .add(tokenList[1].token.balanceOf(address(UNISWAP_DIGG_LP)))\n', '                    .add(tokenList[1].token.balanceOf(address(SUSHISWAP_DIGG_LP)))\n', '            );\n', '        uint256 uniAmount = _amount.mul(uniPercent).div(DIVISION_FACTOR);\n', '        _amount = _amount.sub(uniAmount);\n', '\n', '        // Make sure selling produces a growth in pooled tokens\n', '        TradeRouter router = TradeRouter(SUSHISWAP_ROUTER_ADDRESS);\n', '        uint256 minAmount = _amount.mul(10**tokenList[_outID].decimals).div(10**tokenList[_inID].decimals); // Trades should always increase balance\n', '        uint256[] memory estimates = router.getAmountsOut(_amount, path);\n', '        uint256 estimate = estimates[estimates.length - 1]; // This is the amount of expected output token\n', '        if (estimate > minAmount) {\n', '            _safeApproveHelper(_inputToken, SUSHISWAP_ROUTER_ADDRESS, _amount);\n', '            router.swapExactTokensForTokens(_amount, minAmount, path, address(this), now.add(60)); // Get output token\n', '        }\n', '\n', '        if (uniAmount > 0) {\n', '            // Now try the same on Uniswap\n', '            router = TradeRouter(UNISWAP_ROUTER_ADDRESS);\n', '            minAmount = uniAmount.mul(10**tokenList[_outID].decimals).div(10**tokenList[_inID].decimals); // Trades should always increase balance\n', '            estimates = router.getAmountsOut(uniAmount, path);\n', '            estimate = estimates[estimates.length - 1]; // This is the amount of expected output token\n', '            if (estimate > minAmount) {\n', '                _safeApproveHelper(_inputToken, UNISWAP_ROUTER_ADDRESS, uniAmount);\n', '                router.swapExactTokensForTokens(uniAmount, minAmount, path, address(this), now.add(60)); // Get output token\n', '            }\n', '        }\n', '        return;\n', '    }\n', '\n', '    function governancePullSomeCollateral(uint256 _amount) external {\n', '        // This will pull wBTC from the contract by governance\n', '        _onlyGovernance();\n', '        ERC20Upgradeable wbtc = tokenList[1].token;\n', '        uint256 _balance = wbtc.balanceOf(address(this));\n', '        if (_amount <= _balance) {\n', '            wbtc.safeTransfer(governance, _amount);\n', '        }\n', '    }\n', '\n', '    // Changeable variables by governance\n', '    function setTradingBatchSize(uint256 _size) external {\n', '        _onlyGovernance();\n', '        tradeBatchSize = _size;\n', '    }\n', '\n', '    function setOracleLagTime(uint256 _time) external {\n', '        _onlyAnyAuthorizedParties();\n', '        _maxOracleLag = _time;\n', '    }\n', '\n', '    function setStabilizeFee(uint256 _fee) external {\n', '        _onlyGovernance();\n', '        require(_fee <= MAX_FEE, "base-strategy/excessive-stabilize-fee");\n', '        stabilizeFee = _fee;\n', '    }\n', '\n', '    function setStabilizeVault(address _vault) external {\n', '        _onlyGovernance();\n', '        require(_vault != address(0), "No vault");\n', '        stabilizeVault = _vault;\n', '    }\n', '\n', '    function setDiggExchangeTreasury(address _treasury) external {\n', '        _onlyGovernance();\n', '        require(_treasury != address(0), "No vault");\n', '        diggExchangeTreasury = _treasury;\n', '    }\n', '\n', '    function setSellFactorsAndPercents(\n', '        uint256 _dFactor, // This will influence how much digg is sold when the token is in expansion\n', '        uint256 _wFactor, // This will influence how much wbtc is sold when the token is in contraction\n', '        uint256 _wAmplifier, // This will amply the amount of wbtc sold based on the change in the price\n', '        uint256 _mPDigg, // Governance can cap maximum amount of gained digg sold during rebase. 0-100% accepted (0-100000)\n', '        uint256 _mPWBTC // Governance can cap the maximum amount of wbtc sold during rebase. 0-100% accepted (0-100000)\n', '    ) external {\n', '        _onlyGovernanceOrStrategist();\n', '        require(_mPDigg <= 100000 && _mPWBTC <= 100000, "Percents outside range");\n', '        diggSupplyChangeFactor = _dFactor;\n', '        wbtcSupplyChangeFactor = _wFactor;\n', '        wbtcSellAmplificationFactor = _wAmplifier;\n', '        maxGainedDiggSellPercent = _mPDigg;\n', '        maxWBTCSellPercent = _mPWBTC;\n', '    }\n', '\n', '    /// ===== Internal Core Implementations =====\n', '\n', '    function _onlyNotProtectedTokens(address _asset) internal override {\n', '        require(address(tokenList[0].token) != _asset, "DIGG");\n', '        require(address(tokenList[1].token) != _asset, "WBTC");\n', '    }\n', '\n', '    /// @notice No active position\n', '    function _deposit(uint256 _want) internal override {\n', "        // This strategy doesn't do anything when tokens are deposited\n", '    }\n', '\n', '    /// @dev No active position to exit, just send all want to controller as per wrapper withdrawAll() function\n', '    function _withdrawAll() internal override {\n', "        // This strategy doesn't do anything when tokens are withdrawn, wBTC stays in strategy until governance decides\n", '        // what to do with it\n', '        // When a user withdraws, it is performed via _withdrawSome\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\n', '        require(block.number >= strategyLockedUntil, "Unable to withdraw from strategy until certain block");\n', '        // We only have idle DIGG, withdraw from the strategy directly\n', '        // Note: This value is in DIGG fragments\n', '\n', '        // Make sure that when the user withdraws, the vaults try to maintain a 1:1 ratio in value\n', '        uint256 _diggEquivalent = wbtcInDiggUnits(tokenList[1].token.balanceOf(address(this)));\n', '        uint256 _diggBalance = tokenList[0].token.balanceOf(address(this));\n', '        uint256 _extraDiggNeeded = 0;\n', '        if (_amount > _diggBalance) {\n', '            _extraDiggNeeded = _amount.sub(_diggBalance);\n', '            _diggBalance = 0;\n', '        } else {\n', '            _diggBalance = _diggBalance.sub(_amount);\n', '        }\n', '\n', '        if (_extraDiggNeeded > 0) {\n', '            // Calculate how much digg we need from digg vault\n', '            _diggEquivalent = _diggEquivalent.sub(_extraDiggNeeded);\n', '        }\n', '\n', '        if (_diggBalance < _diggEquivalent || _diggEquivalent == 0) {\n', '            // Now balance the vaults\n', '            _extraDiggNeeded = _extraDiggNeeded.add(_diggEquivalent.sub(_diggBalance).div(2));\n', '            // Exchange with the digg treasury to keep this balanced\n', '            uint256 wbtcAmount = diggInWBTCUnits(_extraDiggNeeded);\n', '            if (wbtcAmount > tokenList[1].token.balanceOf(address(this))) {\n', '                wbtcAmount = tokenList[1].token.balanceOf(address(this)); // Make sure we can actual spend it\n', '                _extraDiggNeeded = wbtcInDiggUnits(wbtcAmount);\n', '            }\n', '            _safeApproveHelper(address(tokenList[1].token), diggExchangeTreasury, wbtcAmount);\n', '            // TODO: Badger team needs to develop a contract that holds Digg, can pull wbtc from this contract and return the requested amount of Digg to this address\n', '            DiggTreasury(diggExchangeTreasury).exchangeWBTCForDigg(wbtcAmount, _extraDiggNeeded, address(this)); // Internal no slip treasury exchange\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    // We will separate trades into batches to reduce market slippage\n', '    // Keepers can call this function after rebalancing to sell/buy slowly\n', '    function executeTradeBatch() public whenNotPaused {\n', '        _onlyAuthorizedActors();\n', '        if (tradeAmountLeft == 0) {\n', '            return;\n', '        }\n', '\n', '        // Reduce the trade amount left\n', '        uint256 batchSize = tradeBatchSize;\n', '        if (tradeAmountLeft < batchSize) {\n', '            batchSize = tradeAmountLeft;\n', '        }\n', '        tradeAmountLeft = tradeAmountLeft.sub(batchSize);\n', '\n', '        if (diggInExpansion == true) {\n', '            // We will be selling digg for wbtc, convert to digg units from normalized\n', '            batchSize = batchSize.mul(10**tokenList[0].decimals).div(1e18);\n', '            uint256 _earned = tokenList[1].token.balanceOf(address(this)); // Get the pre-exchange WBTC balance\n', '            if (batchSize > 0) {\n', '                exchange(0, 1, batchSize); // Sell Digg for wBTC\n', '            }\n', '            _earned = tokenList[1].token.balanceOf(address(this)).sub(_earned);\n', '\n', '            if (_earned > 0) {\n', '                // We will distribute some of this wBTC to different parties\n', '                _processFee(address(tokenList[1].token), _earned, performanceFeeGovernance, IController(controller).rewards());\n', '                _processFee(address(tokenList[1].token), _earned, stabilizeFee, stabilizeVault);\n', '            }\n', '        } else {\n', '            // We will be selling wbtc for digg, convert to wbtc units from normalized\n', '            batchSize = batchSize.mul(10**tokenList[1].decimals).div(1e18);\n', '            uint256 _earned = tokenList[0].token.balanceOf(address(this)); // Get the pre-exchange Digg balance\n', '            if (batchSize > 0) {\n', '                exchange(1, 0, batchSize); // Sell WBTC for digg\n', '            }\n', '            _earned = tokenList[0].token.balanceOf(address(this)).sub(_earned);\n', '        }\n', '    }\n', '\n', '    function rebalance() external whenNotPaused {\n', '        // Modified the harvest function and called it rebalance\n', '        // This function is called by Keepers post rebase to evaluate what to do with the trade\n', '        // A percent of wbtc earned during expansion goes to rewards pool and stabilize vault\n', '        _onlyAuthorizedActors();\n', '        uint256 currentTotalSupply = tokenList[0].token.totalSupply();\n', '        if (currentTotalSupply != lastDiggTotalSupply) {\n', '            // Rebase has taken place, act on it\n', '            int256 currentPrice = int256(getDiggPrice());\n', '            int256 percentChange = ((currentPrice - int256(lastDiggPrice)) * int256(DIVISION_FACTOR)) / int256(lastDiggPrice);\n', '            if (percentChange > 100000) {\n', '                percentChange = 100000;\n', '            } // We only act on at most 100% change\n', '            if (percentChange < -100000) {\n', '                percentChange = -100000;\n', '            }\n', '            if (currentTotalSupply > lastDiggTotalSupply) {\n', '                diggInExpansion = true;\n', '                // Price is still positive\n', '                // We will sell digg for wbtc\n', '\n', '                // Our formula to calculate the amount of digg sold is below\n', '                // digg_supply_change_amount * (digg_supply_change_factor - price_change_percent)\n', '                // If amount is < 0, nothing is sold. The higher the price change, the less is sold\n', '                uint256 sellPercent;\n', '                if (int256(diggSupplyChangeFactor) <= percentChange) {\n', '                    sellPercent = 0;\n', '                } else if (percentChange > 0) {\n', '                    sellPercent = diggSupplyChangeFactor.sub(uint256(percentChange));\n', '                } else {\n', '                    sellPercent = diggSupplyChangeFactor.add(uint256(-percentChange));\n', '                }\n', '                if (sellPercent > maxGainedDiggSellPercent) {\n', '                    sellPercent = maxGainedDiggSellPercent;\n', '                }\n', '\n', '                // Get the percentage amount the supply increased by\n', '                uint256 changedDigg = currentTotalSupply.sub(lastDiggTotalSupply).mul(DIVISION_FACTOR).div(lastDiggTotalSupply);\n', '                changedDigg = tokenList[0].token.balanceOf(address(this)).mul(changedDigg).div(DIVISION_FACTOR);\n', '                // This is the amount of Digg gain from the rebase returned\n', '\n', '                uint256 _amount = changedDigg.mul(sellPercent).div(DIVISION_FACTOR); // This the amount to sell\n', '\n', '                // Normalize sell amount\n', '                _amount = _amount.mul(1e18).div(10**tokenList[0].decimals);\n', '                tradeAmountLeft = _amount;\n', '                executeTradeBatch(); // This will start to trade in batches\n', '\n', '                emit TradeState(_amount, percentChange, sellPercent, lastDiggTotalSupply, currentTotalSupply, block.number);\n', '            } else {\n', '                diggInExpansion = false;\n', '                // Price is now negative\n', '                // We will sell wbtc for digg only if price begins to rise again\n', '                if (percentChange > 0) {\n', '                    // Our formula to calculate the percentage of wbtc sold is below\n', '                    // -digg_supply_change_percent * (wbtc_supply_change_factor + price_change_percent * amplication_factor)\n', '\n', '                    // First get the digg supply change in positive units\n', '                    uint256 changedDiggPercent = lastDiggTotalSupply.sub(currentTotalSupply).mul(DIVISION_FACTOR).div(lastDiggTotalSupply);\n', '\n', '                    // The faster the rise and the larger the negative rebase, the more that is bought\n', '                    uint256 sellPercent =\n', '                        changedDiggPercent.mul(wbtcSupplyChangeFactor.add(uint256(percentChange).mul(wbtcSellAmplificationFactor))).div(\n', '                            DIVISION_FACTOR\n', '                        );\n', '                    if (sellPercent > maxWBTCSellPercent) {\n', '                        sellPercent = maxWBTCSellPercent;\n', '                    }\n', '\n', '                    // We just sell this percentage of wbtc for digg gains\n', '                    uint256 _amount = tokenList[1].token.balanceOf(address(this)).mul(sellPercent).div(DIVISION_FACTOR);\n', '\n', '                    //Normalize the amount\n', '                    _amount = _amount.mul(1e18).div(10**tokenList[1].decimals);\n', '                    tradeAmountLeft = _amount;\n', '                    executeTradeBatch();\n', '\n', '                    emit TradeState(_amount, percentChange, sellPercent, lastDiggTotalSupply, currentTotalSupply, block.number);\n', '                } else {\n', '                    tradeAmountLeft = 0; // Do not trade\n', '                    emit NoTrade(block.number);\n', '                }\n', '            }\n', '            lastDiggPrice = uint256(currentPrice);\n', '            lastDiggTotalSupply = currentTotalSupply;\n', '        } else {\n', '            emit NoTrade(block.number);\n', '        }\n', '    }\n', '}']