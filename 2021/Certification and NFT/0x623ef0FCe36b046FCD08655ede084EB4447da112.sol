['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.11 https://hardhat.org\n', '\n', '// File contracts/interfaces/IIndexExchangeAdapter.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', 'interface IIndexExchangeAdapter {\n', '    function getSpender() external view returns(address);\n', '\n', '    /**\n', "     * Returns calldata for executing trade on given adapter's exchange when using the GeneralIndexModule.\n", '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _destinationAddress       Address that assets should be transferred to\n', '     * @param  _isSendTokenFixed         Boolean indicating if the send quantity is fixed, used to determine correct trade interface\n', '     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\n', '     * @param  _destinationQuantity      Min/Fixed amount of destination tokens to receive\n', '     * @param  _data                     Arbitrary bytes that can be used to store exchange specific parameters or logic\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address _destinationAddress,\n', '        bool _isSendTokenFixed,\n', '        uint256 _sourceQuantity,\n', '        uint256 _destinationQuantity,\n', '        bytes memory _data\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory);\n', '}\n', '\n', '\n', '// File contracts/protocol/integration/index-exchange/UniswapV2IndexExchangeAdapter.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '/**\n', ' * @title UniswapV2IndexExchangeAdapter\n', ' * @author Cook Finance\n', ' *\n', ' * A Uniswap Router02 exchange adapter that returns calldata for trading with GeneralIndexModule, allows encoding a trade with a fixed input quantity or\n', ' * a fixed output quantity.\n', ' */\n', 'contract UniswapV2IndexExchangeAdapter is IIndexExchangeAdapter {\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of Uniswap V2 Router02 contract\n', '    address public immutable router;\n', '    // Uniswap router function string for swapping exact tokens for a minimum of receive tokens\n', '    string internal constant SWAP_EXACT_TOKENS_FOR_TOKENS = "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)";\n', '    // Uniswap router function string for swapping tokens for an exact amount of receive tokens\n', '    string internal constant SWAP_TOKENS_FOR_EXACT_TOKENS = "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)";\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _router       Address of Uniswap V2 Router02 contract\n', '     */\n', '    constructor(address _router) public {\n', '        router = _router;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Return calldata for trading Uniswap V2 Router02. Trade paths are created from input and output tokens, _isSendTokenFixed indicates whether\n', '     * a fixed amount of token should be sold or an unfixed amount.\n', '     *\n', '     * Note: When _isSendTokenFixed is false, _sourceQuantity is defined as the max token quantity you are willing to trade, and\n', '     * _destinationQuantity is the exact quantity of token you are receiving.\n', '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _destinationAddress       Address that assets should be transferred to\n', '     * @param  _isSendTokenFixed         Boolean indicating if the send quantity is fixed, used to determine correct trade interface\n', '     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\n', '     * @param  _destinationQuantity      Min/Fixed amount of destination token to buy\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address _destinationAddress,\n', '        bool _isSendTokenFixed,\n', '        uint256 _sourceQuantity,\n', '        uint256 _destinationQuantity,\n', '        bytes memory /*_data*/\n', '    )\n', '        external\n', '        view\n', '        override\n', '        returns (address, uint256, bytes memory)\n', '    {\n', '        address[] memory path = new address[](2);\n', '        path[0] = _sourceToken;\n', '        path[1] = _destinationToken;\n', '\n', '        bytes memory callData = abi.encodeWithSignature(\n', '            _isSendTokenFixed ? SWAP_EXACT_TOKENS_FOR_TOKENS : SWAP_TOKENS_FOR_EXACT_TOKENS,\n', '            _isSendTokenFixed ? _sourceQuantity : _destinationQuantity,\n', '            _isSendTokenFixed ? _destinationQuantity : _sourceQuantity,\n', '            path,\n', '            _destinationAddress,\n', '            block.timestamp\n', '        );\n', '        return (router, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Returns the address to approve source tokens to for trading. This is the Uniswap router address\n', '     *\n', '     * @return address             Address of the contract to approve tokens to\n', '     */\n', '    function getSpender() external view override returns (address) {\n', '        return router;\n', '    }\n', '}']