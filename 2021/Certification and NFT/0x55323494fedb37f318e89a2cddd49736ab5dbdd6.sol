['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Contracts\n', 'import "./MerkleProof.sol";\n', 'import "./Factory.sol";\n', 'import "./NiftyNFT.sol";\n', 'import "./DynamicUpgradeable.sol";\n', '\n', '// Interfaces\n', '\n', '/*****************************************************************************************************/\n', '/**                                             WARNING                                             **/\n', '/**                        THIS CONTRACT IS AN UPGRADEABLE STORAGE CONTRACT!                        **/\n', '/**  ---------------------------------------------------------------------------------------------  **/\n', '/**  Do NOT change the order of or PREPEND any storage variables to this or new versions            **/\n', '/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\n', '/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\n', '/**                                                                                                 **/\n', '/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\n', '/**  more information.                                                                              **/\n', '/*****************************************************************************************************/\n', '/**\n', ' * @notice\n', ' *\n', ' */\n', 'contract NFTFactory is DynamicUpgradeable {\n', '    NiftyNFT public nft;\n', '\n', '    bytes32[] public tierMerkleRoots;\n', '\n', '    uint256 public startBlockTimestamp;\n', '    \n', '    uint256 public endBlockTimestamp;\n', '    \n', '    uint256 public saleAmountInWei;\n', '    \n', '    address payable paymentSplitter;\n', '\n', '    mapping(uint256 => mapping(uint256 => uint256)) public claimedBitMap;\n', '\n', '    event Claimed( address account, uint256 amount);\n', '\n', '    event TierAdded(uint256 index);\n', '    \n', '    event ShowTimestamp(uint256 timestamp);\n', '\n', '    function getTierMerkleRoots() external view returns (bytes32[] memory) {\n', '        return tierMerkleRoots;\n', '    }\n', '\n', '    function claim(\n', '        uint256 tierIndex,\n', '        address account,\n', '        uint256 amount\n', '    ) external payable {\n', '        uint256 weiAmount = msg.value;\n', '        \n', '        require(block.timestamp  >= startBlockTimestamp && block.timestamp  < endBlockTimestamp, "NFT Sale Not Open");\n', '        require(weiAmount == saleAmountInWei, "NFT Purchase Amount Incorrect");\n', '        require(amount == 1);\n', '        \n', '        // transfer eth to payment spliter\n', '        paymentSplitter.transfer(saleAmountInWei);\n', '        \n', '        // Loop through hashes\n', '        for (uint256 i; i < amount; i++) {\n', '            nft.mint(tierIndex, account);\n', '        }\n', '\n', '        emit Claimed(account, amount);\n', '    }\n', '\n', '    function _setClaimed(uint256 tierIndex, uint256 index) private {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[tierIndex][claimedWordIndex] =\n', '            claimedBitMap[tierIndex][claimedWordIndex] |\n', '            (1 << claimedBitIndex);\n', '    }\n', '\n', '    function isClaimed(uint256 tierIndex, uint256 index)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[tierIndex][claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function addTier(bytes32 merkleRoot) external {\n', '        tierMerkleRoots.push(merkleRoot);\n', '\n', '        emit TierAdded(tierMerkleRoots.length - 1);\n', '    }\n', '\n', '    function initialize(address nftAddress, uint256 start, uint256 end, address payable payment, uint256 weiAmount) external {\n', '        nft = NiftyNFT(nftAddress);\n', '        startBlockTimestamp = start;\n', '        endBlockTimestamp = end;\n', '        paymentSplitter = payment;\n', '        saleAmountInWei = weiAmount;\n', '    }\n', '}']