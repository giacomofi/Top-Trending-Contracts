['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '// File: contracts\\interface\\INestPriceFacade.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.6;\n', '\n', '/// @dev This interface defines the methods for price call entry\n', 'interface INestPriceFacade {\n', '    \n', '    /// @dev Price call entry configuration structure\n', '    struct Config {\n', '\n', '        // Single query fee（0.0001 ether, DIMI_ETHER). 100\n', '        uint16 singleFee;\n', '\n', '        // Double query fee（0.0001 ether, DIMI_ETHER). 100\n', '        uint16 doubleFee;\n', '\n', '        // The normal state flag of the call address. 0\n', '        uint8 normalFlag;\n', '    }\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config calldata config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @param flag Address flag\n', '    function setAddressFlag(address addr, uint flag) external;\n', '\n', '    /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @return Address flag\n', '    function getAddressFlag(address addr) external view returns(uint);\n', '\n', '    /// @dev Set INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\n', '    function setNestQuery(address tokenAddress, address nestQueryAddress) external;\n', '\n', '    /// @dev Get INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @return INestQuery implementation contract address, 0 means use default\n', '    function getNestQuery(address tokenAddress) external view returns (address);\n', '\n', '    /// @dev Get cached fee in fee channel\n', '    /// @param tokenAddress Destination token address\n', '    /// @return Cached fee in fee channel\n', '    function getTokenFee(address tokenAddress) external view returns (uint);\n', '\n', '    /// @dev Settle fee for charge fee channel\n', '    /// @param tokenAddress tokenAddress of charge fee channel\n', '    function settle(address tokenAddress) external;\n', '    \n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ);\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(\n', '        address tokenAddress, \n', '        uint height, \n', '        address paybackAddress\n', '    ) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(\n', '        address tokenAddress, \n', '        uint count, \n', '        address paybackAddress\n', '    ) external payable returns (uint[] memory);\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \n', '    external \n', '    payable \n', '    returns (\n', '        uint latestPriceBlockNumber, \n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Returns lastPriceList and triggered price info\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function lastPriceListAndTriggeredPriceInfo(\n', '        address tokenAddress, \n', '        uint count, \n', '        address paybackAddress\n', '    ) external payable \n', '    returns (\n', '        uint[] memory prices,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    );\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint avgPrice, \n', '        uint sigmaSQ, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice, \n', '        uint ntokenAvgPrice, \n', '        uint ntokenSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    );\n', '}\n', '\n', '// File: contracts\\interface\\INestQuery.sol\n', '\n', '/// @dev This interface defines the methods for price query\n', 'interface INestQuery {\n', '    \n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint avgPrice,\n', '        uint sigmaSQ\n', '    );\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(\n', '        address tokenAddress,\n', '        uint height\n', '    ) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(address tokenAddress, uint count) external view returns (uint[] memory);\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress) external view \n', '    returns (\n', '        uint latestPriceBlockNumber,\n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Returns lastPriceList and triggered price info\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function lastPriceListAndTriggeredPriceInfo(address tokenAddress, uint count) external view \n', '    returns (\n', '        uint[] memory prices,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice\n', '    );\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint avgPrice,\n', '        uint sigmaSQ,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice,\n', '        uint ntokenAvgPrice,\n', '        uint ntokenSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice\n', '    );\n', '}\n', '\n', '// File: contracts\\interface\\INestLedger.sol\n', '\n', '/// @dev This interface defines the nest ledger methods\n', 'interface INestLedger {\n', '\n', '    /// @dev Application Flag Changed event\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    event ApplicationChanged(address addr, uint flag);\n', '    \n', '    /// @dev Configuration structure of nest ledger contract\n', '    struct Config {\n', '        \n', '        // nest reward scale(10000 based). 2000\n', '        uint16 nestRewardScale;\n', '\n', '        // // ntoken reward scale(10000 based). 8000\n', '        // uint16 ntokenRewardScale;\n', '    }\n', '    \n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config calldata config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) external;\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) external view returns (uint);\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) external view returns (uint);\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\n', '}\n', '\n', '// File: contracts\\interface\\INestMapping.sol\n', '\n', '/// @dev The interface defines methods for nest builtin contract address mapping\n', 'interface INestMapping {\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) external;\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    );\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() external view returns (address);\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() external view returns (address);\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() external view returns (address);\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() external view returns (address);\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() external view returns (address);\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) external;\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) external view returns (address);\n', '}\n', '\n', '// File: contracts\\interface\\INestGovernance.sol\n', '\n', '/// @dev This interface defines the governance methods\n', 'interface INestGovernance is INestMapping {\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) external;\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) external view returns (uint);\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) external view returns (bool);\n', '}\n', '\n', '// File: contracts\\interface\\INTokenController.sol\n', '\n', '///@dev This interface defines the methods for ntoken management\n', 'interface INTokenController {\n', '    \n', '    /// @notice when the auction of a token gets started\n', '    /// @param tokenAddress The address of the (ERC20) token\n', '    /// @param ntokenAddress The address of the ntoken w.r.t. token for incentives\n', '    /// @param owner The address of miner who opened the oracle\n', '    event NTokenOpened(address tokenAddress, address ntokenAddress, address owner);\n', '    \n', '    /// @notice ntoken disable event\n', '    /// @param tokenAddress token address\n', '    event NTokenDisabled(address tokenAddress);\n', '    \n', '    /// @notice ntoken enable event\n', '    /// @param tokenAddress token address\n', '    event NTokenEnabled(address tokenAddress);\n', '\n', '    /// @dev ntoken configuration structure\n', '    struct Config {\n', '\n', '        // The number of nest needed to pay for opening ntoken. 10000 ether\n', '        uint96 openFeeNestAmount;\n', '\n', '        // ntoken management is enabled. 0: not enabled, 1: enabled\n', '        uint8 state;\n', '    }\n', '\n', '    /// @dev A struct for an ntoken\n', '    struct NTokenTag {\n', '\n', '        // ntoken address\n', '        address ntokenAddress;\n', '\n', '        // How much nest has paid for open this ntoken\n', '        uint96 nestFee;\n', '    \n', '        // token address\n', '        address tokenAddress;\n', '\n', '        // Index for this ntoken\n', '        uint40 index;\n', '\n', '        // Create time\n', '        uint48 startTime;\n', '\n', '        // State of this ntoken. 0: disabled; 1 normal\n', '        uint8 state;\n', '    }\n', '\n', '    /* ========== Governance ========== */\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config calldata config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set the token mapping\n', '    /// @param tokenAddress Destination token address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @param state status for this map\n', '    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) external;\n', '\n', '    /// @dev Get token address from ntoken address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @return token address\n', '    function getTokenAddress(address ntokenAddress) external view returns (address);\n', '\n', '    /// @dev Get ntoken address from token address\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken address\n', '    function getNTokenAddress(address tokenAddress) external view returns (address);\n', '\n', '    /* ========== ntoken management ========== */\n', '    \n', '    /// @dev Bad tokens should be banned \n', '    function disable(address tokenAddress) external;\n', '\n', '    /// @dev enable ntoken\n', '    function enable(address tokenAddress) external;\n', '\n', "    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\n", '    /// @dev Create and map the (Token, NToken) pair in NestPool\n', '    /// @param tokenAddress The address of token contract\n', '    function open(address tokenAddress) external;\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    /// @dev Get ntoken information\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken information\n', '    function getNTokenTag(address tokenAddress) external view returns (NTokenTag memory);\n', '\n', '    /// @dev Get opened ntoken count\n', '    /// @return ntoken count\n', '    function getNTokenCount() external view returns (uint);\n', '\n', '    /// @dev List ntoken information by page\n', '    /// @param offset Skip previous (offset) records\n', '    /// @param count Return (count) records\n', '    /// @param order Order. 0 reverse order, non-0 positive order\n', '    /// @return ntoken information by page\n', '    function list(uint offset, uint count, uint order) external view returns (NTokenTag[] memory);\n', '}\n', '\n', '// File: contracts\\lib\\TransferHelper.sol\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts\\NestBase.sol\n', '\n', '/// @dev Base contract of nest\n', 'contract NestBase {\n', '\n', '    // Address of nest token contract\n', '    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\n', '\n', '    // Genesis block number of nest\n', '    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\n', '    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\n', '    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\n', '    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\n', '    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\n', '    // on-line flow, the actual block is 5120000\n', '    uint constant NEST_GENESIS_BLOCK = 5120000;\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) virtual public {\n', "        require(_governance == address(0), 'NEST:!initialize');\n", '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev INestGovernance implementation contract address\n', '    address public _governance;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) virtual public {\n', '\n', '        address governance = _governance;\n', '        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev Migrate funds from current contract to NestLedger\n', '    /// @param tokenAddress Destination token address.(0 means eth)\n', '    /// @param value Migrate amount\n', '    function migrate(address tokenAddress, uint value) external onlyGovernance {\n', '\n', '        address to = INestGovernance(_governance).getNestLedgerAddress();\n', '        if (tokenAddress == address(0)) {\n', '            INestLedger(to).addETHReward { value: value } (address(0));\n', '        } else {\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    //---------modifier------------\n', '\n', '    modifier onlyGovernance() {\n', '        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _;\n', '    }\n', '\n', '    modifier noContract() {\n', '        require(msg.sender == tx.origin, "NEST:!contract");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\NestPriceFacade.sol\n', '\n', '/// @dev Price call entry\n', 'contract NestPriceFacade is NestBase, INestPriceFacade, INestQuery {\n', '\n', '    // constructor() { }\n', '\n', '    /// @dev Charge fee channel\n', '    struct FeeChannel {\n', '\n', '        // ntokenAddress of charge fee channel\n', '        address ntokenAddress;\n', '\n', '        // total fee to be settled of charge fee channel\n', '        uint96 fee;\n', '    }\n', '\n', '    Config _config;\n', '    address _nestLedgerAddress;\n', '    address _nestQueryAddress;\n', '    address _nTokenControllerAddress;\n', '\n', '    /// @dev Unit of post fee. 0.0001 ether\n', '    uint constant DIMI_ETHER = 0.0001 ether; // 1 ether / 10000;\n', '\n', '    /// @dev Address flag. Only the address of the user whose address tag is consistent with the configuration tag can call the price tag. (address=>flag)\n', '    mapping(address=>uint) _addressFlags;\n', '\n', '    /// @dev The inestquery address mapped by this address is preferred for price query, which can be used to separate nest price query and token price query. (tokenAddress=>INestQuery)\n', '    mapping(address=>address) _nestQueryMapping;\n', '\n', '    /// @dev Mapping from token address to charge fee channel. tokenAddress=>FeeChannel\n', '    mapping(address=>FeeChannel) _channels;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) override public {\n', '\n', '        super.update(nestGovernanceAddress);\n', '        (\n', '            //address nestTokenAddress\n', '            , \n', '            //address nestNodeAddress\n', '            ,\n', '            //address nestLedgerAddress\n', '            _nestLedgerAddress, \n', '            //address nestMiningAddress\n', '            ,\n', '            //address ntokenMiningAddress\n', '            ,\n', '            //address nestPriceFacadeAddress\n', '            , \n', '            //address nestVoteAddress\n', '            , \n', '            //address nestQueryAddress\n', '            _nestQueryAddress, \n', '            //address nnIncomeAddress\n', '            , \n', '            //address nTokenControllerAddress\n', '            _nTokenControllerAddress\n', '\n', '        ) = INestGovernance(nestGovernanceAddress).getBuiltinAddress();\n', '    }\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config calldata config) override external onlyGovernance {\n', '        _config = config;\n', '    }\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() override external view returns (Config memory) {\n', '        return _config;\n', '    }\n', '\n', '    /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @param flag Address flag\n', '    function setAddressFlag(address addr, uint flag) override external onlyGovernance {\n', '        _addressFlags[addr] = flag;\n', '    }\n', '\n', '    /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\n', '    /// @param addr Destination address\n', '    /// @return Address flag\n', '    function getAddressFlag(address addr) override external view returns(uint) {\n', '        return _addressFlags[addr];\n', '    }\n', '\n', '    /// @dev Set INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\n', '    function setNestQuery(address tokenAddress, address nestQueryAddress) override external onlyGovernance {\n', '        _nestQueryMapping[tokenAddress] = nestQueryAddress;\n', '    }\n', '\n', '    /// @dev Get INestQuery implementation contract address for token\n', '    /// @param tokenAddress Destination token address\n', '    /// @return INestQuery implementation contract address, 0 means use default\n', '    function getNestQuery(address tokenAddress) override external view returns (address) {\n', '        return _nestQueryMapping[tokenAddress];\n', '    }\n', '\n', '    // Get INestQuery implementation contract address for token\n', '    function _getNestQuery(address tokenAddress) private view returns (address) {\n', '        address addr = _nestQueryMapping[tokenAddress];\n', '        if (addr == address(0)) {\n', '            return _nestQueryAddress;\n', '        }\n', '        return addr;\n', '    }\n', '\n', '    /// @dev Set the ntokenAddress from tokenAddress\n', '    /// @param tokenAddress Destination token address\n', '    /// @param ntokenAddress The ntoken address\n', '    function setNTokenAddress(address tokenAddress, address ntokenAddress) external onlyGovernance {\n', '        _channels[tokenAddress].ntokenAddress = ntokenAddress;\n', '    }\n', '\n', '    /// @dev Get the ntokenAddress from tokenAddress\n', '    /// @param tokenAddress Destination token address\n', '    /// @return The ntoken address\n', '    function getNTokenAddress(address tokenAddress) external view returns (address) {\n', '        return _channels[tokenAddress].ntokenAddress;\n', '    }\n', '\n', '    /// @dev Get cached fee in fee channel\n', '    /// @param tokenAddress Destination token address\n', '    /// @return Cached fee in fee channel\n', '    function getTokenFee(address tokenAddress) external view override returns (uint) {\n', '        return uint(_channels[tokenAddress].fee);\n', '    }\n', '\n', '    // // Get ntoken address of from token address\n', '    // function _getNTokenAddress(address tokenAddress) private returns (address) {\n', '        \n', '    //     address ntokenAddress = _addressCache[tokenAddress];\n', '    //     if (ntokenAddress == address(0)) {\n', '    //         ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\n', '    //         if (ntokenAddress != address(0)) {\n', '    //             _addressCache[tokenAddress] = ntokenAddress;\n', '    //         }\n', '    //     }\n', '    //     return ntokenAddress;\n', '    // }\n', '\n', '    // Payment of transfer fee\n', '    function _pay(address tokenAddress, uint fee, address paybackAddress) private {\n', '\n', '        fee = fee * DIMI_ETHER;\n', '        if (msg.value > fee) {\n', '            payable(paybackAddress).transfer(msg.value - fee);\n', '        } else {\n', '            require(msg.value == fee, "NestPriceFacade:!fee");\n', '        }\n', '\n', '        // Load fee channel\n', '        FeeChannel memory feeChannel = _channels[tokenAddress];\n', '        // If ntokenAddress is cached, use it, else load it from INTokenController\n', '        if (feeChannel.ntokenAddress == address(0)) {\n', '            feeChannel.ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\n', '        }\n', '\n', '        // Check totalFee\n', '        uint totalFee = fee + uint(feeChannel.fee);\n', '        // totalFee less than 1 ether, add to fee\n', '        if (totalFee < 1 ether)\n', '        {\n', '            feeChannel.fee = uint96(totalFee);\n', '        }\n', '        // totalFee reach 1 ether, collect\n', '        else {\n', '            feeChannel.fee = uint96(0);\n', '            INestLedger(_nestLedgerAddress).addETHReward { \n', '                value: totalFee \n', '            } (feeChannel.ntokenAddress);\n', '        }\n', '        _channels[tokenAddress] = feeChannel;\n', '    }\n', '\n', '    /// @dev Settle fee for charge fee channel\n', '    /// @param tokenAddress tokenAddress of charge fee channel\n', '    function settle(address tokenAddress) external override {\n', '        FeeChannel memory feeChannel = _channels[tokenAddress];\n', '        if (uint(feeChannel.fee) > 0) {\n', '            INestLedger(_nestLedgerAddress).addETHReward {\n', '                value: uint(feeChannel.fee)\n', '            } (feeChannel.ntokenAddress);\n', '            feeChannel.fee = uint96(0);\n', '            _channels[tokenAddress] = feeChannel;\n', '        }\n', '    }\n', '\n', '    /* ========== INestPriceFacade ========== */\n', '\n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) override external payable returns (uint blockNumber, uint price) {\n', '\n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) override external payable returns (\n', '        uint blockNumber, \n', '        uint price, uint \n', '        avgPrice, \n', '        uint sigmaSQ\n', '    ) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo(tokenAddress);\n', '    }\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(\n', '        address tokenAddress, \n', '        uint height, \n', '        address paybackAddress\n', '    ) override external payable returns (uint blockNumber, uint price) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).findPrice(tokenAddress, height);\n', '    }\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(\n', '        address tokenAddress, \n', '        address paybackAddress\n', '    ) override external payable returns (uint blockNumber, uint price) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPrice(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @param count The number of prices that want to return\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(\n', '        address tokenAddress, \n', '        uint count, \n', '        address paybackAddress\n', '    ) override external payable returns (uint[] memory) {\n', '\n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).lastPriceList(tokenAddress, count);\n', '    }\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \n', '    override\n', '    external \n', '    payable \n', '    returns (\n', '        uint latestPriceBlockNumber, \n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    ) {\n', '\n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPriceAndTriggeredPriceInfo(tokenAddress);\n', '    }\n', '\n', '    /// @dev Returns lastPriceList and triggered price info\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function lastPriceListAndTriggeredPriceInfo(address tokenAddress, uint count, address paybackAddress) override external payable \n', '    returns (\n', '        uint[] memory prices,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    ) {\n', '\n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.singleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).lastPriceListAndTriggeredPriceInfo(tokenAddress, count);\n', '    }\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(address tokenAddress, address paybackAddress) override external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    ) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.doubleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice2(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(address tokenAddress, address paybackAddress) override external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint avgPrice,\n', '         uint sigmaSQ, \n', '         uint ntokenBlockNumber, \n', '         uint ntokenPrice, \n', '         uint ntokenAvgPrice, \n', '         uint ntokenSigmaSQ\n', '        ) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.doubleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo2(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(address tokenAddress, address paybackAddress) override external payable returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    ) {\n', '        \n', '        Config memory config = _config;\n', '        require(_addressFlags[msg.sender] == uint(config.normalFlag), "NestPriceFacade:!flag");\n', '        _pay(tokenAddress, config.doubleFee, paybackAddress);\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPrice2(tokenAddress);\n', '    }\n', '\n', '    /* ========== INestQuery ========== */\n', '\n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(address tokenAddress) override external view noContract returns (uint blockNumber, uint price) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(address tokenAddress) override external view noContract returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint avgPrice, \n', '        uint sigmaSQ\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo(tokenAddress);\n', '    }\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(address tokenAddress, uint height) override external view noContract returns (\n', '        uint blockNumber, \n', '        uint price\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).findPrice(tokenAddress, height);\n', '    }\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(address tokenAddress) override external view noContract returns (uint blockNumber, uint price) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPrice(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(address tokenAddress, uint count) override external view noContract returns (uint[] memory) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).lastPriceList(tokenAddress, count);\n', '    }\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress)\n', '    override\n', '    external \n', '    view\n', '    noContract\n', '    returns (\n', '        uint latestPriceBlockNumber, \n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPriceAndTriggeredPriceInfo(tokenAddress);\n', '    }\n', '\n', '    /// @dev Returns lastPriceList and triggered price info\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @return prices An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function lastPriceListAndTriggeredPriceInfo(address tokenAddress, uint count) override external view \n', '    returns (\n', '        uint[] memory prices,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).lastPriceListAndTriggeredPriceInfo(tokenAddress, count);\n', '    }\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(address tokenAddress) override external view noContract returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice2(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(address tokenAddress) override external view noContract returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint avgPrice, \n', '        uint sigmaSQ, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice, \n', '        uint ntokenAvgPrice, \n', '        uint ntokenSigmaSQ\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo2(tokenAddress);\n', '    }\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(address tokenAddress) override external view noContract returns (\n', '        uint blockNumber, \n', '        uint price, \n', '        uint ntokenBlockNumber, \n', '        uint ntokenPrice\n', '    ) {\n', '        return INestQuery(_getNestQuery(tokenAddress)).latestPrice2(tokenAddress);\n', '    }\n', '}']