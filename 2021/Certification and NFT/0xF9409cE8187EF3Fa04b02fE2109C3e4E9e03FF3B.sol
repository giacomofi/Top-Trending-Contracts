['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.8.0;\n', '\n', 'interface IERC20 {\n', '    function mint(address _to, uint256 _value) external;\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '}\n', '\n', '\n', '/// @title The interface for Graviton lp-token lock-unlock\n', '/// @notice Locks liquidity provision tokens\n', '/// @author Artemij Artamonov - <[email\xa0protected]>\n', '/// @author Anton Davydov - <[email\xa0protected]>\n', 'interface ILockUnlockLP {\n', '    /// @notice User that can grant access permissions and perform privileged actions\n', '    function owner() external view returns (address);\n', '\n', '    /// @notice Transfers ownership of the contract to a new account (`_owner`).\n', '    /// @dev Can only be called by the current owner.\n', '    function setOwner(address _owner) external;\n', '\n', '    /// @notice Look up if locking is allowed\n', '    function canLock() external view returns (bool);\n', '\n', '    /// @notice Sets the permission to lock to `_canLock`\n', '    function setCanLock(bool _canLock) external;\n', '\n', '    /// @notice Look up if the locking of `token` is allowed\n', '    function isAllowedToken(address token) external view returns (bool);\n', '\n', '    /// @notice Look up if the locking of `token` is allowed\n', '    function lockLimit(address token) external view returns (uint256);\n', '\n', '    /// @notice Sets minimum lock amount limit for `token` to `_lockLimit`\n', '    function setLockLimit(address token, uint256 _lockLimit) external;\n', '\n', '    /// @notice The total amount of locked `token`\n', '    function tokenSupply(address token) external view returns (uint256);\n', '\n', '    /// @notice The total amount of all locked lp-tokens\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /// @notice Sets permission to lock `token` to `_isAllowedToken`\n', '    function setIsAllowedToken(address token, bool _isAllowedToken) external;\n', '\n', '    /// @notice The amount of `token` locked by `depositer`\n', '    function balance(address token, address depositer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /// @notice Locks `amount` of `token` in the name of `receiver`\n', '    function lock(\n', '        address token,\n', '        address receiver,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    /// @notice Transfer `amount` of `token` to the `receiver`\n', '    function unlock(\n', '        address token,\n', '        address receiver,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    /// @notice Event emitted when the owner changes via `#setOwner`.\n', '    /// @param ownerOld The account that was the previous owner of the contract\n', '    /// @param ownerNew The account that became the owner of the contract\n', '    event SetOwner(address indexed ownerOld, address indexed ownerNew);\n', '\n', '    /// @notice Event emitted when the `sender` locks `amount` of `token` lp-tokens in the name of `receiver`\n', '    /// @param token The address of the lp-token\n', '    /// @param sender The account that locked lp-token\n', '    /// @param receiver The account to whose lp-token balance the tokens are added\n', '    /// @param amount The amount of lp-tokens locked\n', '    event Lock(\n', '        address indexed token,\n', '        address indexed sender,\n', '        address indexed receiver,\n', '        uint256 amount\n', '    );\n', '\n', '    /// @notice Event emitted when the `sender` unlocks `amount` of `token` lp-tokens in the name of `receiver`\n', '    /// @param token The address of the lp-token\n', '    /// @param sender The account that unlocked lp-tokens\n', '    /// @param receiver The account to whom the lp-tokens were transferred\n', '    /// @param amount The amount of lp-tokens unlocked\n', '    event Unlock(\n', '        address indexed token,\n', '        address indexed sender,\n', '        address indexed receiver,\n', '        uint256 amount\n', '    );\n', '\n', '    /// @notice Event emitted when the permission to lock token is updated via `#setIsAllowedToken`\n', '    /// @param owner The owner account at the time of change\n', '    /// @param token The lp-token whose permission was updated\n', '    /// @param newBool Updated permission\n', '    event SetIsAllowedToken(\n', '        address indexed owner,\n', '        address indexed token,\n', '        bool indexed newBool\n', '    );\n', '\n', '    /// @notice Event emitted when the minimum lock amount limit updated via `#setLockLimit`\n', '    /// @param owner The owner account at the time of change\n', '    /// @param token The lp-token whose permission was updated\n', '    /// @param _lockLimit New minimum lock amount limit\n', '    event SetLockLimit(\n', '        address indexed owner,\n', '        address indexed token,\n', '        uint256 indexed _lockLimit\n', '    );\n', '\n', '    /// @notice Event emitted when the permission to lock is updated via `#setCanLock`\n', '    /// @param owner The owner account at the time of change\n', '    /// @param newBool Updated permission\n', '    event SetCanLock(\n', '        address indexed owner,\n', '        bool indexed newBool\n', '    );\n', '}\n', '\n', '\n', '/// @title LockUnlockLP\n', '/// @author Artemij Artamonov - <[email\xa0protected]>\n', '/// @author Anton Davydov - <[email\xa0protected]>\n', 'contract LockUnlockLP is ILockUnlockLP {\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    address public override owner;\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    mapping(address => bool) public override isAllowedToken;\n', '    /// @inheritdoc ILockUnlockLP\n', '    mapping(address => uint256) public override lockLimit;\n', '    mapping(address => mapping(address => uint256)) internal _balance;\n', '    /// @inheritdoc ILockUnlockLP\n', '    mapping(address => uint256) public override tokenSupply;\n', '    /// @inheritdoc ILockUnlockLP\n', '    uint256 public override totalSupply;\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    bool public override canLock;\n', '\n', '    constructor(address[] memory allowedTokens) {\n', '        owner = msg.sender;\n', '        for (uint256 i = 0; i < allowedTokens.length; i++) {\n', '            isAllowedToken[allowedTokens[i]] = true;\n', '        }\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function setOwner(address _owner) external override isOwner {\n', '        address ownerOld = owner;\n', '        owner = _owner;\n', '        emit SetOwner(ownerOld, _owner);\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function setIsAllowedToken(address token, bool _isAllowedToken)\n', '        external\n', '        override\n', '        isOwner\n', '    {\n', '        isAllowedToken[token] = _isAllowedToken;\n', '        emit SetIsAllowedToken(owner, token, _isAllowedToken);\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function setLockLimit(address token, uint256 _lockLimit)\n', '        external\n', '        override\n', '        isOwner\n', '    {\n', '        lockLimit[token] = _lockLimit;\n', '        emit SetLockLimit(owner, token, _lockLimit);\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function setCanLock(bool _canLock) external override isOwner {\n', '        canLock = _canLock;\n', '        emit SetCanLock(owner, _canLock);\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function balance(address token, address depositer)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _balance[token][depositer];\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function lock(\n', '        address token,\n', '        address receiver,\n', '        uint256 amount\n', '    ) external override {\n', '        require(canLock, "lock is not allowed");\n', '        require(isAllowedToken[token], "token not allowed");\n', '        require(amount >= lockLimit[token], "limit exceeded");\n', '        _balance[token][receiver] += amount;\n', '        tokenSupply[token] += amount;\n', '        totalSupply += amount;\n', '        IERC20(token).transferFrom(msg.sender, address(this), amount);\n', '        emit Lock(token, msg.sender, receiver, amount);\n', '    }\n', '\n', '    /// @inheritdoc ILockUnlockLP\n', '    function unlock(\n', '        address token,\n', '        address receiver,\n', '        uint256 amount\n', '    ) external override {\n', '        require(_balance[token][msg.sender] >= amount, "not enough balance");\n', '        _balance[token][msg.sender] -= amount;\n', '        tokenSupply[token] -= amount;\n', '        totalSupply -= amount;\n', '        IERC20(token).transfer(receiver, amount);\n', '        emit Unlock(token, msg.sender, receiver, amount);\n', '    }\n', '}']