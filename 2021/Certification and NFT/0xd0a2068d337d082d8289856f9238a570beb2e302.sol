['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-19\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract Setter {\n', '    function modifyParameters(bytes32, address) virtual public;\n', '    function modifyParameters(bytes32, uint) virtual public;\n', '    function modifyParameters(bytes32, int) virtual public;\n', '    function modifyParameters(bytes32, uint, uint) virtual public;\n', '    function modifyParameters(bytes32, uint, uint, address) virtual public;\n', '    function modifyParameters(bytes32, bytes32, uint) virtual public;\n', '    function modifyParameters(bytes32, bytes32, address) virtual public;\n', '    function setDummyPIDValidator(address) virtual public;\n', '    function addAuthorization(address) virtual public;\n', '    function removeAuthorization(address) virtual public;\n', '    function initializeCollateralType(bytes32) virtual public;\n', '    function updateAccumulatedRate() virtual public;\n', '    function redemptionPrice() virtual public;\n', '    function setTotalAllowance(address,uint256) virtual external;\n', '    function setPerBlockAllowance(address,uint256) virtual external;\n', '    function taxMany(uint256, uint256) virtual public;\n', '    function taxSingle(bytes32) virtual public;\n', '    function setAllowance(address, uint256) virtual external;\n', '    function connectSAFESaviour(address) virtual external;\n', '    function disconnectSAFESaviour(address) virtual external;\n', '    function addReader(address) virtual external;\n', '    function removeReader(address) virtual external;\n', '    function addAuthority(address) virtual external;\n', '    function removeAuthority(address) virtual external;\n', '    function changePriceSource(address) virtual external;\n', '    function stopFsm(bytes32) virtual external;\n', '    function setFsm(bytes32,address) virtual external;\n', '    function start() virtual external;\n', '    function changeNextPriceDeviation(uint) virtual external;\n', '    function setName(string calldata) virtual external;\n', '    function setSymbol(string calldata) virtual external;\n', '    function disableContract() virtual external;\n', '    function toggleSaviour(address) virtual external;\n', '    function setMinDesiredCollateralizationRatio(bytes32, uint256) virtual external;\n', '}\n', '\n', 'abstract contract GlobalSettlementLike {\n', '    function shutdownSystem() virtual public;\n', '    function freezeCollateralType(bytes32) virtual public;\n', '}\n', '\n', 'abstract contract PauseLike {\n', '    function setOwner(address) virtual public;\n', '    function setAuthority(address) virtual public;\n', '    function setDelay(uint) virtual public;\n', '    function setDelayMultiplier(uint) virtual public;\n', '    function setProtester(address) virtual public;\n', '}\n', '\n', 'abstract contract MerkleDistributorFactoryLike {\n', '    function nonce() virtual public view returns (uint256);\n', '\n', '    function deployDistributor(bytes32, uint256) virtual external;\n', '    function sendTokensToDistributor(uint256) virtual external;\n', '    function sendTokensToCustom(address, uint256) virtual external;\n', '    function dropDistributorAuth(uint256) virtual external;\n', '    function getBackTokensFromDistributor(uint256, uint256) virtual external;\n', '}\n', '\n', 'abstract contract StakingRewardsFactoryLike {\n', '    function totalCampaignCount() virtual public view returns (uint256);\n', '    function modifyParameters(uint256, bytes32, uint256) virtual public;\n', '    function transferTokenOut(address, address, uint256) virtual public;\n', '    function deploy(address, uint256, uint256) virtual public;\n', '    function notifyRewardAmount(uint256) virtual public;\n', '}\n', '\n', 'abstract contract DSTokenLike {\n', '    function mint(address, uint) virtual public;\n', '    function burn(address, uint) virtual public;\n', '}\n', '\n', 'contract GovActions {\n', '    uint constant internal RAY = 10 ** 27;\n', '    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "GovActions/sub-uint-uint-underflow");\n', '    }\n', '\n', '    function disableContract(address targetContract) public {\n', '        Setter(targetContract).disableContract();\n', '    }\n', '\n', '    function modifyParameters(address targetContract, uint256 campaign, bytes32 parameter, uint256 val) public {\n', '        StakingRewardsFactoryLike(targetContract).modifyParameters(campaign, parameter, val);\n', '    }\n', '\n', '    function transferTokenOut(address targetContract, address token, address receiver, uint256 amount) public {\n', '        StakingRewardsFactoryLike(targetContract).transferTokenOut(token, receiver, amount);\n', '    }\n', '\n', '    function deploy(address targetContract, address stakingToken, uint rewardAmount, uint duration) public {\n', '        StakingRewardsFactoryLike(targetContract).deploy(stakingToken, rewardAmount, duration);\n', '    }\n', '\n', '    function notifyRewardAmount(address targetContract, uint256 campaignNumber) public {\n', '        StakingRewardsFactoryLike(targetContract).notifyRewardAmount(campaignNumber);\n', '    }\n', '\n', '    function deployAndNotifyRewardAmount(address targetContract, address stakingToken, uint rewardAmount, uint duration) public {\n', '        StakingRewardsFactoryLike(targetContract).deploy(stakingToken, rewardAmount, duration);\n', '        uint256 campaignNumber = subtract(StakingRewardsFactoryLike(targetContract).totalCampaignCount(), 1);\n', '        StakingRewardsFactoryLike(targetContract).notifyRewardAmount(campaignNumber);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 parameter, address data) public {\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 parameter, int data) public {\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 collateralType, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).modifyParameters(collateralType, parameter, data);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 collateralType, bytes32 parameter, address data) public {\n', '        Setter(targetContract).modifyParameters(collateralType, parameter, data);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 parameter, uint data1, uint data2) public {\n', '        Setter(targetContract).modifyParameters(parameter, data1, data2);\n', '    }\n', '\n', '    function modifyParameters(address targetContract, bytes32 collateralType, uint data1, uint data2, address data3) public {\n', '        Setter(targetContract).modifyParameters(collateralType, data1, data2, data3);\n', '    }\n', '\n', '    function modifyTwoParameters(\n', '      address targetContract1,\n', '      address targetContract2,\n', '      bytes32 parameter1,\n', '      bytes32 parameter2,\n', '      uint data1,\n', '      uint data2\n', '    ) public {\n', '      Setter(targetContract1).modifyParameters(parameter1, data1);\n', '      Setter(targetContract2).modifyParameters(parameter2, data2);\n', '    }\n', '\n', '    function modifyTwoParameters(\n', '      address targetContract1,\n', '      address targetContract2,\n', '      bytes32 parameter1,\n', '      bytes32 parameter2,\n', '      int data1,\n', '      int data2\n', '    ) public {\n', '      Setter(targetContract1).modifyParameters(parameter1, data1);\n', '      Setter(targetContract2).modifyParameters(parameter2, data2);\n', '    }\n', '\n', '    function modifyTwoParameters(\n', '      address targetContract1,\n', '      address targetContract2,\n', '      bytes32 collateralType1,\n', '      bytes32 collateralType2,\n', '      bytes32 parameter1,\n', '      bytes32 parameter2,\n', '      uint data1,\n', '      uint data2\n', '    ) public {\n', '      Setter(targetContract1).modifyParameters(collateralType1, parameter1, data1);\n', '      Setter(targetContract2).modifyParameters(collateralType2, parameter2, data2);\n', '    }\n', '\n', '    function removeAuthorizationAndModify(\n', '      address targetContract,\n', '      address to,\n', '      bytes32 parameter,\n', '      uint data\n', '    ) public {\n', '      Setter(targetContract).removeAuthorization(to);\n', '      Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function updateRateAndModifyParameters(address targetContract, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).updateAccumulatedRate();\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function taxManyAndModifyParameters(address targetContract, uint start, uint end, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).taxMany(start, end);\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function taxSingleAndModifyParameters(address targetContract, bytes32 collateralType, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).taxSingle(collateralType);\n', '        Setter(targetContract).modifyParameters(collateralType, parameter, data);\n', '    }\n', '\n', '    function updateRedemptionRate(address targetContract, bytes32 parameter, uint data) public {\n', '        Setter(targetContract).redemptionPrice();\n', '        Setter(targetContract).modifyParameters(parameter, data);\n', '    }\n', '\n', '    function setDummyPIDValidator(address rateSetter, address oracleRelayer, address dummyValidator) public {\n', '        Setter(rateSetter).modifyParameters("pidValidator", dummyValidator);\n', '        Setter(oracleRelayer).redemptionPrice();\n', '        Setter(oracleRelayer).modifyParameters("redemptionRate", RAY);\n', '    }\n', '\n', '    function toggleSaviour(address targetContract, address saviour) public {\n', '        Setter(targetContract).toggleSaviour(saviour);\n', '    }\n', '\n', '    function addReader(address validator, address reader) public {\n', '        Setter(validator).addReader(reader);\n', '    }\n', '\n', '    function removeReader(address validator, address reader) public {\n', '        Setter(validator).removeReader(reader);\n', '    }\n', '\n', '    function addAuthority(address validator, address account) public {\n', '        Setter(validator).addAuthority(account);\n', '    }\n', '\n', '    function removeAuthority(address validator, address account) public {\n', '        Setter(validator).removeAuthority(account);\n', '    }\n', '\n', '    function connectSAFESaviour(address targetContract, address saviour) public {\n', '        Setter(targetContract).connectSAFESaviour(saviour);\n', '    }\n', '\n', '    function disconnectSAFESaviour(address targetContract, address saviour) public {\n', '        Setter(targetContract).disconnectSAFESaviour(saviour);\n', '    }\n', '\n', '    function setTotalAllowance(address targetContract, address account, uint256 rad) public {\n', '        Setter(targetContract).setTotalAllowance(account, rad);\n', '    }\n', '\n', '    function setPerBlockAllowance(address targetContract, address account, uint256 rad) public {\n', '        Setter(targetContract).setPerBlockAllowance(account, rad);\n', '    }\n', '\n', '    function addAuthorization(address targetContract, address to) public {\n', '        Setter(targetContract).addAuthorization(to);\n', '    }\n', '\n', '    function removeAuthorization(address targetContract, address to) public {\n', '        Setter(targetContract).removeAuthorization(to);\n', '    }\n', '\n', '    function initializeCollateralType(address targetContract, bytes32 collateralType) public {\n', '        Setter(targetContract).initializeCollateralType(collateralType);\n', '    }\n', '\n', '    function changePriceSource(address fsm, address priceSource) public {\n', '        Setter(fsm).changePriceSource(priceSource);\n', '    }\n', '\n', '    function stopFsm(address fsmGovInterface, bytes32 collateralType) public {\n', '        Setter(fsmGovInterface).stopFsm(collateralType);\n', '    }\n', '\n', '    function setFsm(address fsmGovInterface, bytes32 collateralType, address fsm) public {\n', '        Setter(fsmGovInterface).setFsm(collateralType, fsm);\n', '    }\n', '\n', '    function start(address fsm) public {\n', '        Setter(fsm).start();\n', '    }\n', '\n', '    function setName(address coin, string memory name) public {\n', '        Setter(coin).setName(name);\n', '    }\n', '\n', '    function setSymbol(address coin, string memory symbol) public {\n', '        Setter(coin).setSymbol(symbol);\n', '    }\n', '\n', '    function changeNextPriceDeviation(address fsm, uint deviation) public {\n', '        Setter(fsm).changeNextPriceDeviation(deviation);\n', '    }\n', '\n', '    function shutdownSystem(address globalSettlement) public {\n', '        GlobalSettlementLike(globalSettlement).shutdownSystem();\n', '    }\n', '\n', '    function setAuthority(address pause, address newAuthority) public {\n', '        PauseLike(pause).setAuthority(newAuthority);\n', '    }\n', '\n', '    function setOwner(address pause, address owner) public {\n', '        PauseLike(pause).setOwner(owner);\n', '    }\n', '\n', '    function setProtester(address pause, address protester) public {\n', '        PauseLike(pause).setProtester(protester);\n', '    }\n', '\n', '    function setDelay(address pause, uint newDelay) public {\n', '        PauseLike(pause).setDelay(newDelay);\n', '    }\n', '\n', '    function setAuthorityAndDelay(address pause, address newAuthority, uint newDelay) public {\n', '        PauseLike(pause).setAuthority(newAuthority);\n', '        PauseLike(pause).setDelay(newDelay);\n', '    }\n', '\n', '    function setDelayMultiplier(address pause, uint delayMultiplier) public {\n', '        PauseLike(pause).setDelayMultiplier(delayMultiplier);\n', '    }\n', '\n', '    function setAllowance(address join, address account, uint allowance) public {\n', '        Setter(join).setAllowance(account, allowance);\n', '    }\n', '\n', '    function multiSetAllowance(address join, address[] memory accounts, uint[] memory allowances) public {\n', '        for (uint i = 0; i < accounts.length; i++) {\n', '            Setter(join).setAllowance(accounts[i], allowances[i]);\n', '        }\n', '    }\n', '\n', '    function mint(address token, address guy, uint wad) public {\n', '        DSTokenLike(token).mint(guy, wad);\n', '    }\n', '\n', '    function burn(address token, address guy, uint wad) public {\n', '        DSTokenLike(token).burn(guy, wad);\n', '    }\n', '\n', '    function deployDistributor(address target, bytes32 merkleRoot, uint256 amount) public {\n', '        MerkleDistributorFactoryLike(target).deployDistributor(merkleRoot, amount);\n', '    }\n', '\n', '    function deployDistributorAndSendTokens(address target, bytes32 merkleRoot, uint256 amount) public {\n', '        MerkleDistributorFactoryLike(target).deployDistributor(merkleRoot, amount);\n', '        MerkleDistributorFactoryLike(target).sendTokensToDistributor(MerkleDistributorFactoryLike(target).nonce());\n', '    }\n', '\n', '    function sendTokensToDistributor(address target, uint256 id) public {\n', '        MerkleDistributorFactoryLike(target).sendTokensToDistributor(id);\n', '    }\n', '\n', '    function sendTokensToCustom(address target, address dst, uint256 amount) public {\n', '        MerkleDistributorFactoryLike(target).sendTokensToCustom(dst, amount);\n', '    }\n', '\n', '    function dropDistributorAuth(address target, uint256 id) public {\n', '        MerkleDistributorFactoryLike(target).dropDistributorAuth(id);\n', '    }\n', '\n', '    function getBackTokensFromDistributor(address target, uint256 id, uint256 amount) public {\n', '        MerkleDistributorFactoryLike(target).getBackTokensFromDistributor(id, amount);\n', '    }\n', '\n', '    function setIncreasingRewardsParams(address target, uint256 baseUpdateCallerReward, uint256 maxUpdateCallerReward) public {\n', '        Setter(target).modifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        Setter(target).modifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '    }\n', '\n', '    function setIncreasingRewardsParamsAndAllowances(address target, address treasury, uint256 baseUpdateCallerReward, uint256 maxUpdateCallerReward, uint256 perBlockAllowance, uint256 totalAllowance) public {\n', '        Setter(target).modifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        Setter(target).modifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        Setter(treasury).setPerBlockAllowance(target, perBlockAllowance);\n', '        Setter(treasury).setTotalAllowance(target, totalAllowance);\n', '    }\n', '\n', '    function setMinDesiredCollateralizationRatio(address target, bytes32 collateralType, uint256 cRatio) public {\n', '        Setter(target).setMinDesiredCollateralizationRatio(collateralType, cRatio);\n', '    }\n', '}']