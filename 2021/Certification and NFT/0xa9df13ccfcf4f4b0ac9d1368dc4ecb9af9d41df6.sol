['pragma solidity ^0.8.0;\n', '\n', 'import "./ERC721URIStorage.sol";\n', '\n', 'contract XonaRobotics is ERC721URIStorage {\n', '    uint8 public constant version = 1;\n', '    address public OWNER1;\n', '    address public owner2 = 0x48122D8Fa6D9F24DD27906e4221b8d1beE16e006;\n', '    uint public SMART_CONTRACT_RELEASE_BY_UNIXTIME;\n', '    uint32 public constant MAX_ROBOTS = 1000000;\n', '    string public base_url = "https://ipfs.xonalabs.com/ipfs/";\n', '    string public json_ipfs_id = "QmWtVoyFgeKJLTFdnbzUPHDhQJmTjbyuf26oRxu2gANghJ";\n', '    uint32 public robots_counter;\n', '    address[] public free_phase_addresses;\n', '    bool public project_paused = false;\n', '    uint256 private FREE_CLAIM_10_DAYS_IN_SECONDS = 864000;\n', '    uint256 public free_claim_end_timestamp;\n', '    uint256 public phase1_fee = 0.000000000000000001 ether;\n', '    uint256 public phase2_fee = 0.0016 ether;\n', '    uint256 public phase3_fee = 0.0049 ether;\n', '\n', '\n', '    constructor() ERC721("XonaRobotics", "XROB") {\n', '        OWNER1 = msg.sender;\n', '        SMART_CONTRACT_RELEASE_BY_UNIXTIME = block.timestamp;\n', '        robots_counter = 0;\n', '        free_claim_end_timestamp = FREE_CLAIM_10_DAYS_IN_SECONDS + SMART_CONTRACT_RELEASE_BY_UNIXTIME;\n', '    }\n', '\n', '    event SubscibePayments(\n', '        uint32 indexed id,\n', '        address indexed user,\n', '        uint256 indexed date,\n', '        uint256 amount\n', '    );\n', '\n', '    function contractURI() public view returns (string memory) {\n', '        string memory url = string(abi.encodePacked(base_url, json_ipfs_id, "/",  "about", ".json"));\n', '        return url; // should redirect or return the about.json\n', '    }\n', '\n', '    function create_robot() internal returns (uint32) {\n', '        robots_counter++;\n', '        uint32 new_item_id = robots_counter;\n', '        string memory tokenuri = string(abi.encodePacked(base_url, json_ipfs_id, "/",  uint2str(new_item_id), ".json"));\n', '        _safeMint(msg.sender, new_item_id);\n', '        _setTokenURI(new_item_id, tokenuri);\n', '        \n', '        return new_item_id;\n', '    }\n', '\n', '    function change_OWNER2(address _newaddr) public is_owner {\n', '        owner2 = _newaddr;\n', '    }\n', '\n', '    function change_BASE_URL(string memory _url) public is_owner {\n', '        base_url = _url;\n', '    }\n', '\n', '    function change_IPFS_ID(string memory _ipfsid) public is_owner {\n', '        json_ipfs_id = _ipfsid;\n', '    }\n', '\n', '    function suspend_project(bool _param) public is_owner {\n', '        project_paused = _param;\n', '    }\n', '\n', '    function get_balance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function append_address_if_free_phase(address addr) internal {\n', '        if (robots_counter < 10000) {\n', '            free_phase_addresses.push(addr);\n', '        }\n', '    }\n', '    \n', '    function check_if_address_included_in_free_phase(address addr) internal view returns (bool) {\n', '        for (uint16 i; i<free_phase_addresses.length; i++) {\n', '            if (free_phase_addresses[i] == addr) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function change_PHASE1_FEE(uint256 _new) public is_owner {\n', '        phase1_fee = _new;\n', '    }\n', '    \n', '    function change_PHASE2_FEE(uint256 _new) public is_owner {\n', '        phase2_fee = _new;\n', '    }\n', '    \n', '    function change_PHASE3_FEE(uint256 _new) public is_owner {\n', '        phase3_fee = _new;\n', '    }\n', '\n', '    function payout(address payable _addr) public is_owner {\n', '        _addr.transfer(address(this).balance);\n', '    }\n', '\n', '    function check_the_mint_phase_fee() internal {\n', '        if (robots_counter >= 0 && robots_counter < 10000 && free_claim_end_timestamp > block.timestamp) {\n', '            require (msg.value >= phase1_fee, "The ether amount is not enough to buy a robot! Phase1 (FREE)");\n', '            bool claim_status = check_if_address_included_in_free_phase(msg.sender);\n', '            require (claim_status == false, "This address already minted a free robot! Phase1 (FREE)");\n', '        }\n', '        else if (robots_counter >= 0 && robots_counter < 190000) {\n', '            require (msg.value >= phase2_fee, "The ether amount is not enough to buy a robot! Phase2");\n', '        }\n', '        else if (robots_counter >= 190000 && robots_counter < MAX_ROBOTS) {\n', '            require (msg.value >= phase3_fee, "The ether amount is not enough to buy a robot! Phase3");\n', '        }\n', '        else {\n', '            require (msg.value >= 999 ether, "This statement will be never reached :)");\n', '        }\n', '    }\n', '\n', '    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n', '            if (_i == 0) {\n', '                return "0";\n', '            }\n', '            uint j = _i;\n', '            uint len;\n', '            while (j != 0) {\n', '                len++;\n', '                j /= 10;\n', '            }\n', '            bytes memory bstr = new bytes(len);\n', '            uint k = len;\n', '            while (_i != 0) {\n', '                k = k-1;\n', '                uint8 temp = (48 + uint8(_i - _i / 10 * 10));\n', '                bytes1 b1 = bytes1(temp);\n', '                bstr[k] = b1;\n', '                _i /= 10;\n', '            }\n', '            return string(bstr);\n', '        }\n', '\n', '    receive() external\n', '    pause_project\n', '    check_if_max_robots_count_not_reached\n', '    payable {\n', '        check_the_mint_phase_fee();\n', '        append_address_if_free_phase(msg.sender);\n', '        create_robot();\n', '        emit SubscibePayments(robots_counter, msg.sender, block.timestamp, msg.value);\n', '    }\n', '\n', '    modifier check_if_max_robots_count_not_reached() {\n', '        require(robots_counter < MAX_ROBOTS, "The XonaRobotics buy period ended! 1M robots count reached.");\n', '        _;\n', '    }\n', '\n', '    modifier pause_project() {\n', '        require (project_paused == false, "Project owners suspended the project, sorry for the inconvenience");\n', '        _;\n', '    }\n', '\n', '    modifier is_owner() {\n', '    require(msg.sender == OWNER1 || msg.sender == owner2, "Caller is not smart contract owner");\n', '    _;\n', '    }\n', '}']