['//SPDX-License-Identifier: None\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./DolaFlashMinter.sol";\n', '\n', 'contract MainnetDolaFlashMinter is DolaFlashMinter {\n', '    constructor()\n', '        DolaFlashMinter(\n', '            // Mainnet Dola\n', '            0x865377367054516e17014CcdED1e7d814EDC9ce4,\n', '            // Mainnet Inverse Treasury\n', '            0x926dF14a23BE491164dCF93f4c468A50ef659D5B\n', '        )\n', '    // solhint-disable-next-line no-empty-blocks\n', '    {\n', '\n', '    }\n', '}\n', '\n', '//SPDX-License-Identifier: None\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./interfaces/IERC3156FlashBorrower.sol";\n', 'import "./interfaces/IERC3156FlashLender.sol";\n', 'import "./utils/Ownable.sol";\n', 'import "./utils/Address.sol";\n', 'import "./ERC20/IERC20.sol";\n', 'import "./ERC20/SafeERC20.sol";\n', '\n', '/**\n', ' * @title Dola Flash Minter\n', ' * @notice Allow users to mint an arbitrary amount of DOLA without collateral\n', ' *         as long as this amount is repaid within a single transaction.\n', ' * @dev This contract is abstract, any concrete implementation must have the DOLA\n', ' *      token address hardcoded in the contract to facilitate code auditing.\n', ' */\n', 'abstract contract DolaFlashMinter is Ownable, IERC3156FlashLender {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using Address for address payable;\n', '    event FlashLoan(address receiver, address token, uint256 value);\n', '    event FlashLoanRateUpdated(uint256 oldRate, uint256 newRate);\n', '    event TreasuryUpdated(address oldTreasury, address newTreasury);\n', '\n', '    IERC20 public immutable dola;\n', '    address public treasury;\n', '    uint256 public flashMinted;\n', '    uint256 public flashLoanRate = 0.0008 ether;\n', '\n', '    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");\n', '\n', '    constructor(address _dola, address _treasury) {\n', '        require(_dola.isContract(), "FLASH_MINTER:INVALID_DOLA");\n', '        require(_treasury != address(0), "FLASH_MINTER:INVALID_TREASURY");\n', '        dola = IERC20(_dola);\n', '        treasury = _treasury;\n', '    }\n', '\n', '    function flashLoan(\n', '        IERC3156FlashBorrower receiver,\n', '        address token,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external override returns (bool) {\n', '        require(token == address(dola), "FLASH_MINTER:NOT_DOLA");\n', '        require(value <= type(uint112).max, "FLASH_MINTER:INDIVIDUAL_LIMIT_BREACHED");\n', '        flashMinted = flashMinted + value;\n', '        require(flashMinted <= type(uint112).max, "total loan limit exceeded");\n', '\n', '        // Step 1: Mint Dola to receiver\n', '        dola.mint(address(receiver), value);\n', '        emit FlashLoan(address(receiver), token, value);\n', '        uint256 fee = flashFee(token, value);\n', '\n', '        // Step 2: Make flashloan callback\n', '        require(\n', '            receiver.onFlashLoan(msg.sender, token, value, fee, data) == CALLBACK_SUCCESS,\n', '            "FLASH_MINTER:CALLBACK_FAILURE"\n', '        );\n', '        // Step 3: Retrieve (minted + fee) Dola from receiver\n', '        dola.safeTransferFrom(address(receiver), address(this), value + fee);\n', '\n', '        // Step 4: Burn minted Dola (and leave accrued fees in contract)\n', '        dola.burn(value);\n', '\n', '        flashMinted = flashMinted - value;\n', '        return true;\n', '    }\n', '\n', '    // Collect fees and retrieve any tokens sent to this contract by mistake\n', '    function collect(address _token) external {\n', '        if (_token == address(0)) {\n', '            payable(treasury).sendValue(address(this).balance);\n', '        } else {\n', '            uint256 balance = IERC20(_token).balanceOf(address(this));\n', '            IERC20(_token).safeTransfer(treasury, balance);\n', '        }\n', '    }\n', '\n', '    function setFlashLoanRate(uint256 _newRate) external onlyOwner {\n', '        emit FlashLoanRateUpdated(flashLoanRate, _newRate);\n', '        flashLoanRate = _newRate;\n', '    }\n', '\n', '    function setTreasury(address _newTreasury) external onlyOwner {\n', '        require(_newTreasury != address(0), "FLASH_MINTER:INVALID_TREASURY");\n', '        emit TreasuryUpdated(treasury, _newTreasury);\n', '        treasury = _newTreasury;\n', '    }\n', '\n', '    function maxFlashLoan(address _token) external view override returns (uint256) {\n', '        return _token == address(dola) ? type(uint112).max - flashMinted : 0;\n', '    }\n', '\n', '    function flashFee(address _token, uint256 _value) public view override returns (uint256) {\n', '        require(_token == address(dola), "FLASH_MINTER:NOT_DOLA");\n', '        return (_value * flashLoanRate) / 1e18;\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external payable {}\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC3156FlashBorrower {\n', '\n', '  /**\n', '    * @dev Receive a flash loan.\n', '    * @param initiator The initiator of the loan.\n', '    * @param token The loan currency.\n', '    * @param amount The amount of tokens lent.\n', '    * @param fee The additional amount of tokens to repay.\n', '    * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '    * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"\n', '    */\n', '  function onFlashLoan(\n', '      address initiator,\n', '      address token,\n', '      uint256 amount,\n', '      uint256 fee,\n', '      bytes calldata data\n', '  ) external returns (bytes32);\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IERC3156FlashBorrower.sol";\n', '\n', 'interface IERC3156FlashLender {\n', '  /**\n', '    * @dev The amount of currency available to be lent.\n', '    * @param token The loan currency.\n', '    * @return The amount of `token` that can be borrowed.\n', '    */\n', '  function maxFlashLoan(\n', '      address token\n', '  ) external view returns (uint256);\n', '\n', '  /**\n', '    * @dev The fee to be charged for a given loan.\n', '    * @param token The loan currency.\n', '    * @param value The amount of tokens lent.\n', '    * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n', '    */\n', '  function flashFee(\n', '      address token,\n', '      uint256 value\n', '  ) external view returns (uint256);\n', '\n', '  /**\n', '    * @dev Initiate a flash loan.\n', '    * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n', '    * @param token The loan currency.\n', '    * @param value The amount of tokens lent.\n', '    * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '    */\n', '  function flashLoan(\n', '      IERC3156FlashBorrower receiver,\n', '      address token,\n', '      uint256 value,\n', '      bytes calldata data\n', '  ) external returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '\n', '    function mint(address to, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '\n', '    function deposit() external payable;\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) - value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 2000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']