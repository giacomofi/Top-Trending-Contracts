['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.4;\n', '\n', 'import "IERC20.sol";\n', 'import "SafeMath.sol";\n', '\n', 'contract FourTBank is IERC20 {\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '    \n', '    address _owner;\n', '    uint256 _totalSupply;\n', '    \n', '    uint8 public constant decimals = 4;\n', '    string public constant name = "4TB Coin";\n', '    string public constant symbol = "4TB";\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor(uint256 total) {\n', '        _owner = msg.sender;\n', '        _totalSupply = total;\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function burn(uint256 amount) public {\n', '        require(amount <= balances[msg.sender]);\n', '        _totalSupply -= amount;\n', '        balances[msg.sender] -= amount;\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '\n', '    function mint(uint256 amount) public {\n', '        require(msg.sender == _owner);\n', '        _totalSupply += amount;\n', '        balances[_owner] += amount;\n', '        emit Transfer(address(0), _owner, amount);\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '}']