['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/MegaPresaleVest.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', 'contract MegaPresaleVest is Ownable {\n', '    address public megaToken;\n', '    address public contributionToken;\n', '    uint public contributionDeadline;\n', '    uint public vestingDeadline;\n', '\n', '    struct Contributor {\n', '        address contributor;\n', '        uint contributionAmount;\n', '        uint maxContributionAmount;\n', '        uint rate;\n', '        bool withdrawn;\n', '    }\n', '\n', '    Contributor[] public contributors;\n', '\n', '    event Registration(address contributor, uint maxContributionAmount, uint rate, uint timestamp);\n', '    event Adjustment(address contributor, uint maxContributionAmount, uint rate, uint timestamp);\n', '    event Contribution(address contributor, uint amount, uint timestamp);\n', '    event Withdrawal(address contributor, uint withdrawnAmount, uint timestamp);\n', '\n', '    constructor(address _megaToken, address _contributionToken, uint _contributionDeadline, uint _vestingDeadline) {\n', '        megaToken = _megaToken;\n', '        contributionToken = _contributionToken;\n', '        contributionDeadline = _contributionDeadline;\n', '        vestingDeadline = _vestingDeadline;\n', '    }\n', '\n', '    function getContributors() external view returns (Contributor[] memory) {\n', '        return contributors;\n', '    }\n', '\n', '    function usdcToMega(uint usdcAmt, uint rate) pure internal returns (uint) {\n', '        return (usdcAmt / rate) * 1e18;\n', '    }\n', '\n', '    function addContributor(address contributor, uint maxContributionAmount, uint rate) onlyOwner external {\n', '        require(rate > 0, "The rate must be non-zero");\n', '        require((maxContributionAmount % rate == 0) || (maxContributionAmount == 0), "Contribution amount must be a multiple of the rate and non-zero");\n', '\n', '        uint allocationTotal;\n', '        for(uint i; i < contributors.length; i++) {\n', '            require(contributors[i].contributor != contributor, "Contributor already present");\n', '            allocationTotal += contributors[i].maxContributionAmount;\n', '        }\n', '\n', '        uint loadedMega = IERC20(megaToken).balanceOf(address(this));\n', '        uint availableMegaForPurchase = usdcToMega(allocationTotal + maxContributionAmount, rate);\n', '        require(loadedMega >= availableMegaForPurchase, "maxContributionAmount across all contributors exceeds available Mega balance");\n', '        contributors.push(Contributor(contributor, 0, maxContributionAmount, rate, false));\n', '        emit Registration(contributor, maxContributionAmount, rate, block.timestamp);\n', '    }\n', '\n', '    function setContributionParams(address contributor, uint maxContributionAmount, uint rate) onlyOwner external {\n', '        require(rate > 0, "The rate must be non-zero");\n', '        require((maxContributionAmount % rate == 0) || (maxContributionAmount == 0), "Contribution amount must be a multiple of the rate");\n', '\n', '        uint allocationTotal;\n', '        bool contributorPresent;\n', '        for(uint i; i < contributors.length; i++) {\n', '            if(contributors[i].contributor == contributor) {\n', '                contributorPresent = true;\n', '                if(rate != contributors[i].rate) {\n', '                    require(contributors[i].contributionAmount == 0, "Rate cannot be altered after initial purchase");\n', '                }\n', '                require(contributors[i].contributionAmount <= maxContributionAmount, "Contributor already bought more than new maxContributionAmount");\n', '                contributors[i].maxContributionAmount = maxContributionAmount;\n', '                contributors[i].rate = rate;\n', '            }\n', '\n', '            allocationTotal += contributors[i].maxContributionAmount;\n', '        }\n', '\n', '        uint loadedMega = IERC20(megaToken).balanceOf(address(this));\n', '        uint availableMegaForPurchase = usdcToMega(allocationTotal, rate);\n', '\n', '        require(contributorPresent, "Contributor not present");\n', '        require(loadedMega >= availableMegaForPurchase, "maxContributionAmount across all contributors exceeds available Mega balance");\n', '        emit Adjustment(contributor, maxContributionAmount, rate, block.timestamp);\n', '    }\n', '\n', '    function contribute(uint contribution) external {\n', '        require(block.timestamp <= contributionDeadline, "Contribution deadline has passed");\n', '        require(IERC20(contributionToken).transferFrom(msg.sender, owner(), contribution), "ERC20 transferFrom failed");\n', '\n', '        bool contributorPresent;\n', '        for(uint i; i < contributors.length; i++) {\n', '            if(contributors[i].contributor == msg.sender) {\n', '                contributorPresent = true;\n', '                require(contribution % contributors[i].rate == 0, "Contribution amount must be a multiple of the rate");\n', '                require((contributors[i].contributionAmount + contribution) <= contributors[i].maxContributionAmount, "Contribution cumulative exceeds maxContributionAmount");\n', '                contributors[i].contributionAmount += contribution;\n', '            }\n', '        }\n', '\n', '        require(contributorPresent, "Contributor not present");\n', '        emit Contribution(msg.sender, contribution, block.timestamp);\n', '    }\n', '\n', '    function withdraw() external {\n', '        require(block.timestamp > vestingDeadline, "Vesting deadline has not yet passed");\n', '\n', '        bool contributorPresent;\n', '        uint contributionAmount;\n', '        uint rate;\n', '        for(uint i; i < contributors.length; i++) {\n', '            if(contributors[i].contributor == msg.sender) {\n', '                contributorPresent = true;\n', '                require(!contributors[i].withdrawn, "MEGA already withdrawn");\n', '                contributionAmount = contributors[i].contributionAmount;\n', '                rate = contributors[i].rate;\n', '                contributors[i].withdrawn = true;\n', '            }\n', '        }\n', '\n', '        uint withdrawnAmount = usdcToMega(contributionAmount, rate);\n', '        require(contributorPresent, "Contributor not present");\n', '        require(IERC20(megaToken).transfer(msg.sender, withdrawnAmount), "MEGA transfer failed");\n', '        emit Withdrawal(msg.sender, withdrawnAmount, block.timestamp);\n', '    }\n', '\n', '    function withdrawOverallocation() onlyOwner external {\n', '        require(block.timestamp > contributionDeadline, "Contribution deadline has not yet passed");\n', '\n', '        uint contributionAmount;\n', '        for(uint i; i < contributors.length; i++) {\n', '            contributionAmount += usdcToMega(contributors[i].contributionAmount, contributors[i].rate);\n', '        }\n', '\n', '        uint overallocation = IERC20(megaToken).balanceOf(address(this)) - contributionAmount;\n', '        require(IERC20(megaToken).transfer(owner(), overallocation), "MEGA transfer failed");\n', '    }\n', '\n', '    function setContributionDeadline(uint newContributionDeadline) onlyOwner external {\n', "        require(block.timestamp < contributionDeadline, 'Cannot restart the sale after the contribution deadline');\n", '        uint sixMonths = 15780000;\n', '        contributionDeadline = newContributionDeadline;\n', '        vestingDeadline = contributionDeadline + sixMonths;\n', '    }\n', '\n', '    function releaseVestLock() onlyOwner external {\n', "        require(block.timestamp < vestingDeadline, 'Vesting lock is already released');\n", '        vestingDeadline = block.timestamp;\n', '    }\n', '\n', '    function sweepErc(address erc) onlyOwner external {\n', '        uint twoWeeks = 1209600;\n', '        require((erc != megaToken) || block.timestamp > (vestingDeadline + twoWeeks), "Mega cannot be swept prematurely and is subject to the contract agreement");\n', '        IERC20(erc).transfer(owner(), IERC20(erc).balanceOf(address(this)));\n', '    }\n', '\n', '    function sweepEth() onlyOwner external {\n', '        payable(owner()).transfer(address(this).balance);\n', '    }\n', '\n', '    receive() external payable {}\n', '}']