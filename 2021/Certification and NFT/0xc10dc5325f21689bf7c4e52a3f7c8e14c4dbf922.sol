['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', 'pragma solidity ^0.4.24;// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '//True POZ Token will have this, \n', 'interface IPOZBenefit {\n', '    function IsPOZHolder(address _Subject) external view returns(bool);\n', '}// stakeOf(address account) public view returns (uint256)\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'interface IStaking {\n', '    function stakeOf(address account) public view returns (uint256) ;\n', '}/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Benefit is IPOZBenefit, Ownable {\n', '    constructor() public {\n', '        MinHold = 1;\n', '        ChecksCount = 0;\n', '    }\n', '\n', '    struct BalanceCheckData {\n', '        bool IsToken; //token or staking contract address\n', '        address ContractAddress; // the address of the token or the staking\n', '        address LpContract; // check the current Token Holdin in Lp\n', '    }\n', '\n', '    uint256 public MinHold; //minimum total holding to be POOLZ Holder\n', '    mapping(uint256 => BalanceCheckData) CheckList; //All the contracts to get the sum\n', '    uint256 public ChecksCount; //Total Checks to make\n', '\n', '    function SetMinHold(uint256 _MinHold) public onlyOwner {\n', '        require(_MinHold > 0, "Must be more then 0");\n', '        MinHold = _MinHold;\n', '    }\n', '\n', '    function AddNewLpCheck(address _Token, address _LpContract)\n', '        public\n', '        onlyOwner\n', '    {\n', '        CheckList[ChecksCount] = BalanceCheckData(false, _Token, _LpContract);\n', '        ChecksCount++;\n', '    }\n', '\n', '    function AddNewToken(address _ContractAddress) public onlyOwner {\n', '        CheckList[ChecksCount] = BalanceCheckData(\n', '            true,\n', '            _ContractAddress,\n', '            address(0x0)\n', '        );\n', '        ChecksCount++;\n', '    }\n', '\n', '    function AddNewStaking(address _ContractAddress) public onlyOwner {\n', '        CheckList[ChecksCount] = BalanceCheckData(\n', '            false,\n', '            _ContractAddress,\n', '            address(0x0)\n', '        );\n', '        ChecksCount++;\n', '    }\n', '\n', '    function RemoveLastBalanceCheckData() public onlyOwner {\n', '        require(ChecksCount > 0, "Can\'t remove from none");\n', '        ChecksCount--;\n', '    }\n', '\n', '    function RemoveAll() public onlyOwner {\n', '        ChecksCount = 0;\n', '    }\n', '\n', '    function CheckBalance(address _Token, address _Subject)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ERC20(_Token).balanceOf(_Subject);\n', '    }\n', '\n', '    function CheckStaking(address _Contract, address _Subject)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return IStaking(_Contract).stakeOf(_Subject);\n', '    }\n', '\n', '    function IsPOZHolder(address _Subject) external view returns (bool) {\n', '        return CalcTotal(_Subject) >= MinHold;\n', '    }\n', '\n', '    function CalcTotal(address _Subject) public view returns (uint256) {\n', '        uint256 Total = 0;\n', '        for (uint256 index = 0; index < ChecksCount; index++) {\n', '            if (CheckList[index].LpContract == address(0x0)) {\n', '                Total =\n', '                    Total +\n', '                    (\n', '                        CheckList[index].IsToken\n', '                            ? CheckBalance(\n', '                                CheckList[index].ContractAddress,\n', '                                _Subject\n', '                            )\n', '                            : CheckStaking(\n', '                                CheckList[index].ContractAddress,\n', '                                _Subject\n', '                            )\n', '                    );\n', '            } else {\n', '                Total =\n', '                    Total +\n', '                    _CalcLP(\n', '                        CheckList[index].LpContract,\n', '                        CheckList[index].ContractAddress,\n', '                        _Subject\n', '                    );\n', '            }\n', '        }\n', '        return Total;\n', '    }\n', '\n', '    function _CalcLP(\n', '        address _Contract,\n', '        address _Token,\n', '        address _Subject\n', '    ) internal view returns (uint256) {\n', '        uint256 TotalLp = ERC20(_Contract).totalSupply();\n', '        uint256 SubjectLp = ERC20(_Contract).balanceOf(_Subject);\n', '        uint256 TotalTokensOnLp = ERC20(_Token).balanceOf(_Contract);\n', '        //SubjectLp * TotalTokensOnLp / TotalLp\n', '        return SafeMath.div(SafeMath.mul(SubjectLp, TotalTokensOnLp), TotalLp);\n', '    }\n', '}']