['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/// GebPauseScheduleProxyActions.sol\n', '\n', '// Copyright (C) 2018 Gonzalo Balabasquer <[email\xa0protected]>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', 'abstract contract PauseLike {\n', '    function scheduleTransaction(address, bytes32, bytes memory, uint) virtual public;\n', '}\n', '\n', 'contract GebPauseScheduleProxyActions {\n', '    function modifyParameters(address pause, address actions, address who, bytes32 parameter, uint data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 parameter, int data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,int256)", who, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 parameter, address data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,address)", who, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, uint data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, address data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,address)", who, collateralType, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, uint data1, uint data2, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256)", who, collateralType, data1, data2),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, uint data1, uint data2, address data3, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256,address)", who, collateralType, data1, data2, data3),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, uint256 data1, bytes32 data2, uint256 data3, uint256 earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,uint256,bytes32,uint256)", who, data1, data2, data3),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function transferTokenOut(address pause, address actions, address who, address token, address receiver, uint256 amount, uint256 earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("transferTokenOut(address,address,address,uint256)", who, token, receiver, amount),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function deploy(address pause, address actions, address who, address stakingToken, uint256 data1, uint256 data2, uint256 earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("deploy(address,address,uint256,uint256)", who, stakingToken, data1, data2),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function notifyRewardAmount(address pause, address actions, address who, uint256 campaignNumber, uint256 earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("notifyRewardAmount(address,uint256)", who, campaignNumber),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function deployAndNotifyRewardAmount(address pause, address actions, address who, address stakingToken, uint256 data1, uint256 data2, uint256 earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("deployAndNotifyRewardAmount(address,address,uint256,uint256)", who, stakingToken, data1, data2),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function addReader(address pause, address actions, address validator, address reader, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("addReader(address,address)", validator, reader),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function removeReader(address pause, address actions, address validator, address reader, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("removeReader(address,address)", validator, reader),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function addAuthority(address pause, address actions, address validator, address account, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("addAuthority(address,address)", validator, account),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function removeAuthority(address pause, address actions, address validator, address account, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("removeAuthority(address,address)", validator, account),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function changePriceSource(address pause, address actions, address fsm, address priceSource, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("changePriceSource(address,address)", fsm, priceSource),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function stopFsm(address pause, address actions, address fsmGovInterface, bytes32 collateralType, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("stopFsm(address,bytes32)", fsmGovInterface, collateralType),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function start(address pause, address actions, address fsm, uint earliestExecutionTime) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("start(address)", fsm),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyTwoParameters(\n', '      address pause,\n', '      address actions,\n', '      address who1,\n', '      address who2,\n', '      bytes32 collateralType1,\n', '      bytes32 collateralType2,\n', '      bytes32 parameter1,\n', '      bytes32 parameter2,\n', '      uint data1,\n', '      uint data2,\n', '      uint earliestExecutionTime\n', '    ) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyTwoParameters(address,address,bytes32,bytes32,bytes32,bytes32,uint256,uint256)", who1, who2, collateralType1, collateralType2, parameter1, parameter2, data1, data2),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function modifyTwoParameters(\n', '      address pause,\n', '      address actions,\n', '      address who1,\n', '      address who2,\n', '      bytes32 parameter1,\n', '      bytes32 parameter2,\n', '      uint data1,\n', '      uint data2,\n', '      uint earliestExecutionTime\n', '    ) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyTwoParameters(address,address,bytes32,bytes32,uint256,uint256)", who1, who2, parameter1, parameter2, data1, data2),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function removeAuthorization(address pause, address actions, address who, address to, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("removeAuthorization(address,address)", who, to),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function addAuthorization(address pause, address actions, address who, address to, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("addAuthorization(address,address)", who, to),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function updateRedemptionRate(address pause, address actions, address who, bytes32 parameter, uint data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRedemptionRate(address,bytes32,uint256)", who, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function updateRateAndModifyParameters(address pause, address actions, address who, bytes32 parameter, uint data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRateAndModifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function taxSingleAndModifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, uint data, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("taxSingleAndModifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function setTotalAllowance(address pause, address actions, address who, address account, uint rad, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setTotalAllowance(address,address,uint256)", who, account, rad),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function setPerBlockAllowance(address pause, address actions, address who, address account, uint rad, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setPerBlockAllowance(address,address,uint256)", who, account, rad),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function setAuthorityAndDelay(address pause, address actions, address newAuthority, uint newDelay, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAuthorityAndDelay(address,address,uint256)", pause, newAuthority, newDelay),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function shutdownSystem(address pause, address actions, address globalSettlement, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("shutdownSystem(address)", globalSettlement),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function setDelay(address pause, address actions, uint newDelay, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setDelay(address,uint256)", pause, newDelay),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function setAllowance(address pause, address actions, address join, address account, uint allowance, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAllowance(address,address,uint256)", join, account, allowance),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function mint(address pause, address actions, address token, address to, uint value, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("mint(address,address,uint256)", token, to, value),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '\n', '    function burn(address pause, address actions, address token, address from, uint value, uint earliestExecutionTime) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("burn(address,address,uint256)", token, from, value),\n', '            earliestExecutionTime\n', '        );\n', '    }\n', '}']