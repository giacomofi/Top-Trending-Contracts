['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.8.4 <0.9.0;\n', '\n', 'interface I{\n', '\tfunction getPair(address t, address t1) external view returns(address pair);\n', '\tfunction createPair(address t, address t1) external returns(address pair);\n', '\tfunction init(uint Eth,address pair) external;\n', '\tfunction deposit() external payable;\n', '\tfunction transfer(address to, uint value) external returns(bool);\n', '\tfunction mint(address to) external returns(uint liquidity);\n', '}\n', '\n', 'pragma solidity >=0.8.4 <0.9.0;\n', '\n', '// Author: Sam Porter\n', "// With LGE it's now possible to create fairer distribution and fund promising projects without VC vultures at all.\n", '// Non-upgradeable, not owned, liquidity is being created automatically on first transaction after last block of LGE.\n', "// Founders' liquidity is not locked, instead an incentive to keep it is introduced.\n", '// The Event lasts for ~2 months to ensure fair distribution.\n', '// 0,5% of contributed Eth goes to developer for earliest development expenses including audits and bug bounties.\n', '// Blockchain needs no VCs, no authorities.12600000 40000\n', '\n', 'contract FoundingEvent {\n', '\tmapping(address => uint) public contributions;\n', '\taddress payable private _deployer;\n', '\tuint88 private _phase;\n', '\tbool public lgeOngoing;\n', '\tuint private _ETHDeposited;\n', '\n', '\tconstructor() {_deployer = payable(msg.sender);lgeOngoing = true;}\n', '\n', '\tfunction depositEth() external payable {\n', '\t\trequire(lgeOngoing == true);\n', '\t\tuint amount = msg.value;\n', '\t\tif (block.number >= 126e5) {uint phase = _phase; if(block.number >= phase+126e5){_createLiquidity(phase);}}\n', '\t\tuint deployerShare = amount/100; amount -= deployerShare; _deployer.transfer(deployerShare);\n', '\t\tcontributions[msg.sender] += amount;\n', '\t}\n', '\n', '\tfunction _createLiquidity(uint phase) internal {\n', '\t    _phase = uint88(phase + 1e4);\n', '\t\taddress payable WETH = payable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\t\taddress token = 0x1565616E3994353482Eb032f7583469F5e0bcBEC;\n', '\t\taddress staking = 0x109533F9e10d4AEEf6d74F1e2D59a9ed11266f27;\n', '\t\taddress factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\t\taddress tknETHLP = I(factory).getPair(token,WETH);\n', '\t\tif (tknETHLP == address(0)) {tknETHLP=I(factory).createPair(token, WETH);}\n', '\t\t_ETHDeposited += address(this).balance;\n', '\t\tuint ethToDeposit = address(this).balance;\n', '\t\tuint tokenToDeposit = 2e23;\n', '\t\tif (phase == 4e4) {I(staking).init(_ETHDeposited, tknETHLP);delete lgeOngoing; delete _ETHDeposited; delete _phase; delete _deployer;}\n', '\t\tI(WETH).deposit{value: ethToDeposit}();\n', '\t\tI(token).transfer(tknETHLP, tokenToDeposit);\n', '\t\tI(WETH).transfer(tknETHLP, ethToDeposit);\n', '\t\tI(tknETHLP).mint(staking);\n', '\t}\n', '}']