['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'abstract contract Proxy {\n', '  /**\n', '   * @dev Fallback function.\n', '   * Implemented entirely in `_fallback`.\n', '   */\n', '  fallback () payable external {\n', '    _fallback();\n', '  }\n', '  \n', '  receive () payable external {\n', '    _fallback();\n', '  }\n', '\n', '  /**\n', '   * @return The Address of the implementation.\n', '   */\n', '  function _implementation() virtual internal view returns (address);\n', '\n', '  /**\n', '   * @dev Delegates execution to an implementation contract.\n', "   * This is a low level function that doesn't return to its internal call site.\n", '   * It will return to the external caller whatever the implementation returns.\n', '   * @param implementation Address to delegate.\n', '   */\n', '  function _delegate(address implementation) internal {\n', '    assembly {\n', '      // Copy msg.data. We take full control of memory in this inline assembly\n', '      // block because it will not return to Solidity code. We overwrite the\n', '      // Solidity scratch pad at memory position 0.\n', '      calldatacopy(0, 0, calldatasize())\n', '\n', '      // Call the implementation.\n', "      // out and outsize are 0 because we don't know the size yet.\n", '      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '      // Copy the returned data.\n', '      returndatacopy(0, 0, returndatasize())\n', '\n', '      switch result\n', '      // delegatecall returns 0 on error.\n', '      case 0 { revert(0, returndatasize()) }\n', '      default { return(0, returndatasize()) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is run as the first thing in the fallback function.\n', '   * Can be redefined in derived contracts to add functionality.\n', '   * Redefinitions must call super._willFallback().\n', '   */\n', '  function _willFallback() virtual internal {\n', '      \n', '  }\n', '\n', '  /**\n', '   * @dev fallback implementation.\n', '   * Extracted to enable manual triggering.\n', '   */\n', '  function _fallback() internal {\n', '    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\n', '        return;\n', '    _willFallback();\n', '    _delegate(_implementation());\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseUpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'abstract contract BaseUpgradeabilityProxy is Proxy {\n', '  /**\n', '   * @dev Emitted when the implementation is upgraded.\n', '   * @param implementation Address of the new implementation.\n', '   */\n', '  event Upgraded(address indexed implementation);\n', '\n', '  /**\n', '   * @dev Storage slot with the address of the current implementation.\n', '   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return impl Address of the current implementation\n', '   */\n', '  function _implementation() override internal view returns (address impl) {\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '    assembly {\n', '      impl := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the proxy to a new implementation.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _upgradeTo(address newImplementation) internal {\n', '    _setImplementation(newImplementation);\n', '    emit Upgraded(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the implementation address of the proxy.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _setImplementation(address newImplementation) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newImplementation)\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseAdminUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with an authorization\n', ' * mechanism for administrative tasks.\n', ' * All external functions in this contract must be guarded by the\n', ' * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n', ' * feature proposal that would enable this to be done automatically.\n', ' */\n', 'contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Emitted when the administration has been transferred.\n', '   * @param previousAdmin Address of the previous admin.\n', '   * @param newAdmin Address of the new admin.\n', '   */\n', '  event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '  /**\n', '   * @dev Storage slot with the admin of the contract.\n', '   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '\n', '  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '  /**\n', '   * @dev Modifier to check whether the `msg.sender` is the admin.\n', '   * If it is, it will run the function. Otherwise, it will delegate the call\n', '   * to the implementation.\n', '   */\n', '  modifier ifAdmin() {\n', '    if (msg.sender == _admin()) {\n', '      _;\n', '    } else {\n', '      _fallback();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @return The address of the proxy admin.\n', '   */\n', '  function admin() external ifAdmin returns (address) {\n', '    return _admin();\n', '  }\n', '\n', '  /**\n', '   * @return The address of the implementation.\n', '   */\n', '  function implementation() external ifAdmin returns (address) {\n', '    return _implementation();\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the admin of the proxy.\n', '   * Only the current admin can call this function.\n', '   * @param newAdmin Address to transfer proxy administration to.\n', '   */\n', '  function changeAdmin(address newAdmin) external ifAdmin {\n', '    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\n', '    emit AdminChanged(_admin(), newAdmin);\n', '    _setAdmin(newAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy.\n', '   * Only the admin can call this function.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function upgradeTo(address newImplementation) external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy and call a function\n', '   * on the new implementation.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param newImplementation Address of the new implementation.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   */\n', '  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '    (bool success,) = newImplementation.delegatecall(data);\n', '    require(success);\n', '  }\n', '\n', '  /**\n', '   * @return adm The admin slot.\n', '   */\n', '  function _admin() internal view returns (address adm) {\n', '    bytes32 slot = ADMIN_SLOT;\n', '    assembly {\n', '      adm := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the proxy admin.\n', '   * @param newAdmin Address of the new proxy admin.\n', '   */\n', '  function _setAdmin(address newAdmin) internal {\n', '    bytes32 slot = ADMIN_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newAdmin)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Only fall back when the sender is not the admin.\n', '   */\n', '  function _willFallback() virtual override internal {\n', '    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\n', '    //super._willFallback();\n', '  }\n', '}\n', '\n', 'interface IAdminUpgradeabilityProxyView {\n', '  function admin() external view returns (address);\n', '  function implementation() external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _logic, bytes memory _data) public payable {\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '  \n', '  //function _willFallback() virtual override internal {\n', '    //super._willFallback();\n', '  //}\n', '}\n', '\n', '\n', '/**\n', ' * @title AdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\n', '  /**\n', '   * Contract constructor.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableUpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableAdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\n', '  /**\n', '   * Contract initializer.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _admin, address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', '    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface IProxyFactory {\n', '    function productImplementation() external view returns (address);\n', '    function productImplementations(bytes32 name) external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title ProductProxy\n', ' * @dev This contract implements a proxy that \n', ' * it is deploied by ProxyFactory, \n', " * and it's implementation is stored in factory.\n", ' */\n', 'contract ProductProxy is Proxy {\n', '    \n', '  /**\n', '   * @dev Storage slot with the address of the ProxyFactory.\n', '   * This is the keccak-256 hash of "eip1967.proxy.factory" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\n', "  bytes32 internal constant NAME_SLOT    = 0x4cd9b827ca535ceb0880425d70eff88561ecdf04dc32fcf7ff3b15c587f8a870;      // bytes32(uint256(keccak256('eip1967.proxy.name')) - 1)\n", '\n', '  function _name() virtual internal view returns (bytes32 name_) {\n', '    bytes32 slot = NAME_SLOT;\n', '    assembly {  name_ := sload(slot)  }\n', '  }\n', '  \n', '  function _setName(bytes32 name_) internal {\n', '    bytes32 slot = NAME_SLOT;\n', '    assembly {  sstore(slot, name_)  }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the factory address of the ProductProxy.\n', '   * @param newFactory Address of the new factory.\n', '   */\n', '  function _setFactory(address newFactory) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newFactory), "Cannot set a factory to a non-contract address");\n', '\n', '    bytes32 slot = FACTORY_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newFactory)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the factory.\n', '   * @return factory_ Address of the factory.\n', '   */\n', '  function _factory() internal view returns (address factory_) {\n', '    bytes32 slot = FACTORY_SLOT;\n', '    assembly {\n', '      factory_ := sload(slot)\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return Address of the current implementation\n', '   */\n', '  function _implementation() virtual override internal view returns (address) {\n', '    address factory_ = _factory();\n', '    if(OpenZeppelinUpgradesAddress.isContract(factory_))\n', '        return IProxyFactory(factory_).productImplementations(_name());\n', '    else\n', '        return address(0);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableProductProxy\n', ' * @dev Extends ProductProxy with an initializer for initializing\n', ' * factory and init data.\n', ' */\n', 'contract InitializableProductProxy is ProductProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param factory_ Address of the initial factory.\n', '   * @param data_ Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function __InitializableProductProxy_init(address factory_, bytes32 name_, bytes memory data_) public payable {\n', '    require(_factory() == address(0));\n', "    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\n", "    assert(NAME_SLOT    == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1));\n", '    _setFactory(factory_);\n', '    _setName(name_);\n', '    if(data_.length > 0) {\n', '      (bool success,) = _implementation().delegatecall(data_);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuardUpgradeSafe is Initializable {\n', '    bool private _notEntered;\n', '\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '\n', '\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a - b : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' *\n', ' * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\n', ' * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\n', ' * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\n', ' * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\n', ' */\n', 'library OpenZeppelinUpgradesAddress {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        if(sender != _msgSender() && _allowances[sender][_msgSender()] != uint(-1))\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n', ' */\n', 'abstract contract ERC20CappedUpgradeSafe is Initializable, ERC20UpgradeSafe {\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n', '     * set once during construction.\n', '     */\n', '\n', '    function __ERC20Capped_init(uint256 cap) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20Capped_init_unchained(cap);\n', '    }\n', '\n', '    function __ERC20Capped_init_unchained(uint256 cap) internal initializer {\n', '\n', '\n', '        require(cap > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap;\n', '\n', '    }\n', '\n', '\n', '    /**\n', "     * @dev Returns the cap on the token's total supply.\n", '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - minted tokens must not cause the total supply to go over the cap.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function __Governable_init_unchained(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract ConfigurableBase {\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfigI(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfigA(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}    \n', '\n', 'contract Configurable is Governable, ConfigurableBase {\n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfigI(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfigA(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', '// Inheritancea\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function rewards(address account) external view returns (uint256);\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function getRewardForDuration() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // Mutative\n', '\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function getReward() external;\n', '\n', '    function exit() external;\n', '}\n', '\n', 'abstract contract RewardsDistributionRecipient {\n', '    address public rewardsDistribution;\n', '\n', '    function notifyRewardAmount(uint256 reward) virtual external;\n', '\n', '    modifier onlyRewardsDistribution() {\n', '        require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuardUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    IERC20 public rewardsToken;\n', '    IERC20 public stakingToken;\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;                  // obsoleted\n', '    uint256 public rewardsDuration = 60 days;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) override public rewards;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balances;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    //constructor(\n', '    function __StakingRewards_init(\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken\n', '    ) public initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '        __StakingRewards_init_unchained(_rewardsDistribution, _rewardsToken, _stakingToken);\n', '    }\n', '    \n', '    function __StakingRewards_init_unchained(address _rewardsDistribution, address _rewardsToken, address _stakingToken) public initializer {\n', '        rewardsToken = IERC20(_rewardsToken);\n', '        stakingToken = IERC20(_stakingToken);\n', '        rewardsDistribution = _rewardsDistribution;\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    function totalSupply() virtual override public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) virtual override public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function lastTimeRewardApplicable() override public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    function rewardPerToken() virtual override public view returns (uint256) {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n', '            );\n', '    }\n', '\n', '    function earned(address account) virtual override public view returns (uint256) {\n', '        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n', '    }\n', '\n', '    function getRewardForDuration() virtual override external view returns (uint256) {\n', '        return rewardRate.mul(rewardsDuration);\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '\n', '        // permit\n', '        IPermit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\n', '\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function stake(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        stakingToken.safeTransfer(msg.sender, amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function getReward() virtual override public nonReentrant updateReward(msg.sender) {\n', '        uint256 reward = rewards[msg.sender];\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            rewardsToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function exit() virtual override public {\n', '        withdraw(_balances[msg.sender]);\n', '        getReward();\n', '    }\n', '\n', '    /* ========== RESTRICTED FUNCTIONS ========== */\n', '\n', '    function notifyRewardAmount(uint256 reward) override external onlyRewardsDistribution updateReward(address(0)) {\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = reward.div(rewardsDuration);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = reward.add(leftover).div(rewardsDuration);\n', '        }\n', '\n', '        // Ensure the provided reward amount is not more than the balance in the contract.\n', '        // This keeps the reward rate in the right range, preventing overflows due to\n', '        // very high values of rewardRate in the earned and rewardsPerToken functions;\n', '        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n', '        uint balance = rewardsToken.balanceOf(address(this));\n', '        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");\n', '\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(rewardsDuration);\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    modifier updateReward(address account) virtual {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '}\n', '\n', 'interface IPermit {\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', 'contract Constants {\n', "    bytes32 internal constant _TokenMapped_     = 'TokenMapped';\n", "    bytes32 internal constant _MappableToken_   = 'MappableToken';\n", "    bytes32 internal constant _MappingToken_    = 'MappingToken';\n", "    bytes32 internal constant _fee_             = 'fee';\n", "    bytes32 internal constant _feeCreate_       = 'feeCreate';\n", "    bytes32 internal constant _feeTo_           = 'feeTo';\n", "    bytes32 internal constant _minSignatures_   = 'minSignatures';\n", "    bytes32 internal constant _uniswapRounter_  = 'uniswapRounter';\n", '    \n', '    function _chainId() internal pure returns (uint id) {\n', '        assembly { id := chainid() }\n', '    }\n', '}\n', '\n', 'struct Signature {\n', '    address signatory;\n', '    uint8   v;\n', '    bytes32 r;\n', '    bytes32 s;\n', '}\n', '\n', 'abstract contract MappingBase is ContextUpgradeSafe, Constants {\n', '\tusing SafeMath for uint;\n', '\n', '    bytes32 public constant RECEIVE_TYPEHASH = keccak256("Receive(uint256 fromChainId,address to,uint256 nonce,uint256 volume,address signatory)");\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 internal _DOMAIN_SEPARATOR;\n', '    function DOMAIN_SEPARATOR() virtual public view returns (bytes32) {  return _DOMAIN_SEPARATOR;  }\n', '\n', '    address public factory;\n', '    uint256 public mainChainId;\n', '    address public token;\n', '    address public creator;\n', '    \n', '    mapping (address => uint) public authQuotaOf;                                       // signatory => quota\n', '    mapping (uint => mapping (address => uint)) public sentCount;                       // toChainId => to => sentCount\n', '    mapping (uint => mapping (address => mapping (uint => uint))) public sent;          // toChainId => to => nonce => volume\n', '    mapping (uint => mapping (address => mapping (uint => uint))) public received;      // fromChainId => to => nonce => volume\n', '    \n', '    modifier onlyFactory {\n', "        require(msg.sender == factory, 'Only called by Factory');\n", '        _;\n', '    }\n', '    \n', '    function increaseAuthQuotas(address[] memory signatorys, uint[] memory increments) virtual external returns (uint[] memory quotas) {\n', "        require(signatorys.length == increments.length, 'two array lenth not equal');\n", '        quotas = new uint[](signatorys.length);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            quotas[i] = increaseAuthQuota(signatorys[i], increments[i]);\n', '    }\n', '    \n', '    function increaseAuthQuota(address signatory, uint increment) virtual public onlyFactory returns (uint quota) {\n', '        quota = authQuotaOf[signatory].add(increment);\n', '        authQuotaOf[signatory] = quota;\n', '        emit IncreaseAuthQuota(signatory, increment, quota);\n', '    }\n', '    event IncreaseAuthQuota(address indexed signatory, uint increment, uint quota);\n', '    \n', '    function decreaseAuthQuotas(address[] memory signatorys, uint[] memory decrements) virtual external returns (uint[] memory quotas) {\n', "        require(signatorys.length == decrements.length, 'two array lenth not equal');\n", '        quotas = new uint[](signatorys.length);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            quotas[i] = decreaseAuthQuota(signatorys[i], decrements[i]);\n', '    }\n', '    \n', '    function decreaseAuthQuota(address signatory, uint decrement) virtual public onlyFactory returns (uint quota) {\n', '        quota = authQuotaOf[signatory];\n', '        if(quota < decrement)\n', '            decrement = quota;\n', '        return _decreaseAuthQuota(signatory, decrement);\n', '    }\n', '    \n', '    function _decreaseAuthQuota(address signatory, uint decrement) virtual internal returns (uint quota) {\n', '        quota = authQuotaOf[signatory].sub(decrement);\n', '        authQuotaOf[signatory] = quota;\n', '        emit DecreaseAuthQuota(signatory, decrement, quota);\n', '    }\n', '    event DecreaseAuthQuota(address indexed signatory, uint decrement, uint quota);\n', '\n', '\n', '    function needApprove() virtual public pure returns (bool);\n', '    \n', '    function send(uint toChainId, address to, uint volume) virtual external payable returns (uint nonce) {\n', '        return sendFrom(_msgSender(), toChainId, to, volume);\n', '    }\n', '    \n', '    function sendFrom(address from, uint toChainId, address to, uint volume) virtual public payable returns (uint nonce) {\n', '        _chargeFee();\n', '        _sendFrom(from, volume);\n', '        nonce = sentCount[toChainId][to]++;\n', '        sent[toChainId][to][nonce] = volume;\n', '        emit Send(from, toChainId, to, nonce, volume);\n', '    }\n', '    event Send(address indexed from, uint indexed toChainId, address indexed to, uint nonce, uint volume);\n', '    \n', '    function _sendFrom(address from, uint volume) virtual internal;\n', '\n', '    function receive(uint256 fromChainId, address to, uint256 nonce, uint256 volume, Signature[] memory signatures) virtual external payable {\n', '        _chargeFee();\n', "        require(received[fromChainId][to][nonce] == 0, 'withdrawn already');\n", '        uint N = signatures.length;\n', "        require(N >= Factory(factory).getConfig(_minSignatures_), 'too few signatures');\n", '        for(uint i=0; i<N; i++) {\n', '            for(uint j=0; j<i; j++)\n', "                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\n", '            bytes32 structHash = keccak256(abi.encode(RECEIVE_TYPEHASH, fromChainId, to, nonce, volume, signatures[i].signatory));\n', '            bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", _DOMAIN_SEPARATOR, structHash));\n', '            address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s);\n', '            require(signatory != address(0), "invalid signature");\n', '            require(signatory == signatures[i].signatory, "unauthorized");\n', '            _decreaseAuthQuota(signatures[i].signatory, volume);\n', '            emit Authorize(fromChainId, to, nonce, volume, signatory);\n', '        }\n', '        received[fromChainId][to][nonce] = volume;\n', '        _receive(to, volume);\n', '        emit Receive(fromChainId, to, nonce, volume);\n', '    }\n', '    event Receive(uint256 indexed fromChainId, address indexed to, uint256 indexed nonce, uint256 volume);\n', '    event Authorize(uint256 fromChainId, address indexed to, uint256 indexed nonce, uint256 volume, address indexed signatory);\n', '    \n', '    function _receive(address to, uint256 volume) virtual internal;\n', '    \n', '    function _chargeFee() virtual internal {\n', "        require(msg.value >= Math.min(Factory(factory).getConfig(_fee_), 0.1 ether), 'fee is too low');\n", '        address payable feeTo = address(Factory(factory).getConfig(_feeTo_));\n', '        if(feeTo == address(0))\n', '            feeTo = address(uint160(factory));\n', '        feeTo.transfer(msg.value);\n', '        emit ChargeFee(_msgSender(), feeTo, msg.value);\n', '    }\n', '    event ChargeFee(address indexed from, address indexed to, uint value);\n', '\n', '    uint256[50] private __gap;\n', '}    \n', '    \n', '    \n', 'contract TokenMapped is MappingBase {\n', '    using SafeERC20 for IERC20;\n', '    \n', '\tfunction __TokenMapped_init(address factory_, address token_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__TokenMapped_init_unchained(factory_, token_);\n', '\t}\n', '\t\n', '\tfunction __TokenMapped_init_unchained(address factory_, address token_) public initializer {\n', '        factory = factory_;\n', '        mainChainId = _chainId();\n', '        token = token_;\n', '        creator = address(0);\n', '        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(ERC20UpgradeSafe(token).name())), _chainId(), address(this)));\n', '\t}\n', '\t\n', '    function totalMapped() virtual public view returns (uint) {\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '    \n', '    function needApprove() virtual override public pure returns (bool) {\n', '        return true;\n', '    }\n', '    \n', '    function _sendFrom(address from, uint volume) virtual override internal {\n', '        IERC20(token).safeTransferFrom(from, address(this), volume);\n', '    }\n', '\n', '    function _receive(address to, uint256 volume) virtual override internal {\n', '        IERC20(token).safeTransfer(to, volume);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '/*\n', 'contract TokenMapped2 is TokenMapped, StakingRewards, ConfigurableBase {\n', '    modifier governance {\n', '        require(_msgSender() == MappingTokenFactory(factory).governor());\n', '        _;\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfigI(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfigA(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '\n', '    function rewardDelta() public view returns (uint amt) {\n', '        if(begin == 0 || begin >= now || lastUpdateTime >= now)\n', '            return 0;\n', '            \n', '        amt = rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\n', '        \n', '        // calc rewardDelta in period\n', '        if(lep == 3) {                                                              // power\n', '            uint y = period.mul(1 ether).div(lastUpdateTime.add(rewardsDuration).sub(begin));\n', '            uint amt1 = amt.mul(1 ether).div(y);\n', '            uint amt2 = amt1.mul(period).div(now.add(rewardsDuration).sub(begin));\n', '            amt = amt.sub(amt2);\n', '        } else if(lep == 2) {                                                       // exponential\n', '            if(now.sub(lastUpdateTime) < rewardsDuration)\n', '                amt = amt.mul(now.sub(lastUpdateTime)).div(rewardsDuration);\n', '        }else if(now < periodFinish)                                                // linear\n', '            amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime));\n', '        else if(lastUpdateTime >= periodFinish)\n', '            amt = 0;\n', '    }\n', '    \n', '    function rewardPerToken() virtual override public view returns (uint256) {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                rewardDelta().mul(1e18).div(_totalSupply)\n', '            );\n', '    }\n', '\n', '    modifier updateReward(address account) virtual override {\n', '        (uint delta, uint d) = (rewardDelta(), 0);\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = now;\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '\n', '        address addr = address(config[_ecoAddr_]);\n', '        uint ratio = config[_ecoRatio_];\n', '        if(addr != address(0) && ratio != 0) {\n', '            d = delta.mul(ratio).div(1 ether);\n', '            rewards[addr] = rewards[addr].add(d);\n', '        }\n', '        rewards[address(0)] = rewards[address(0)].add(delta).add(d);\n', '        _;\n', '    }\n', '\n', '    function getReward() virtual override public {\n', '        getReward(msg.sender);\n', '    }\n', '    function getReward(address payable acct) virtual public nonReentrant updateReward(acct) {\n', "        require(acct != address(0), 'invalid address');\n", "        require(getConfig(_blocklist_, acct) == 0, 'In blocklist');\n", '        bool isContract = acct.isContract();\n', "        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, acct) != 0, 'No allowContract');\n", '\n', '        uint256 reward = rewards[acct];\n', '        if (reward > 0) {\n', '            paid[acct] = paid[acct].add(reward);\n', '            paid[address(0)] = paid[address(0)].add(reward);\n', '            rewards[acct] = 0;\n', '            rewards[address(0)] = rewards[address(0)].sub0(reward);\n', '            rewardsToken.safeTransferFrom(rewardsDistribution, acct, reward);\n', '            emit RewardPaid(acct, reward);\n', '        }\n', '    }\n', '\n', '    function getRewardForDuration() override external view returns (uint256) {\n', '        return rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\n', '    }\n', '    \n', '}\n', '*/\n', '\n', 'abstract contract Permit {\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    function DOMAIN_SEPARATOR() virtual public view returns (bytes32);\n', '\n', '    mapping (address => uint) public nonces;\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', "        require(deadline >= block.timestamp, 'permit EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR(),\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual;    \n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', 'contract MappableToken is Permit, ERC20UpgradeSafe, MappingBase {\n', '\tfunction __MappableToken_init(address factory_, address creator_, string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained(name_, symbol_);\n', '\t\t_setupDecimals(decimals_);\n', '\t\t_mint(creator_, totalSupply_);\n', '\t\t__MappableToken_init_unchained(factory_, creator_);\n', '\t}\n', '\t\n', '\tfunction __MappableToken_init_unchained(address factory_, address creator_) public initializer {\n', '        factory = factory_;\n', '        mainChainId = _chainId();\n', '        token = address(0);\n', '        creator = creator_;\n', '        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));\n', '\t}\n', '\t\n', '    function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32) {\n', '        return MappingBase.DOMAIN_SEPARATOR();\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal {\n', '        return ERC20UpgradeSafe._approve(owner, spender, amount);\n', '    }\n', '    \n', '    function totalMapped() virtual public view returns (uint) {\n', '        return balanceOf(address(this));\n', '    }\n', '    \n', '    function needApprove() virtual override public pure returns (bool) {\n', '        return false;\n', '    }\n', '    \n', '    function _sendFrom(address from, uint volume) virtual override internal {\n', '        transferFrom(from, address(this), volume);\n', '    }\n', '\n', '    function _receive(address to, uint256 volume) virtual override internal {\n', '        _transfer(address(this), to, volume);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'contract MappingToken is Permit, ERC20CappedUpgradeSafe, MappingBase {\n', '\tfunction __MappingToken_init(address factory_, uint mainChainId_, address token_, address creator_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained(name_, symbol_);\n', '\t\t_setupDecimals(decimals_);\n', '\t\t__ERC20Capped_init_unchained(cap_);\n', '\t\t__MappingToken_init_unchained(factory_, mainChainId_, token_, creator_);\n', '\t}\n', '\t\n', '\tfunction __MappingToken_init_unchained(address factory_, uint mainChainId_, address token_, address creator_) public initializer {\n', '        factory = factory_;\n', '        mainChainId = mainChainId_;\n', '        token = token_;\n', '        creator = (token_ == address(0)) ? creator_ : address(0);\n', '        _DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), _chainId(), address(this)));\n', '\t}\n', '\t\n', '    function DOMAIN_SEPARATOR() virtual override(Permit, MappingBase) public view returns (bytes32) {\n', '        return MappingBase.DOMAIN_SEPARATOR();\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 amount) virtual override(Permit, ERC20UpgradeSafe) internal {\n', '        return ERC20UpgradeSafe._approve(owner, spender, amount);\n', '    }\n', '    \n', '    function needApprove() virtual override public pure returns (bool) {\n', '        return false;\n', '    }\n', '    \n', '    function _sendFrom(address from, uint volume) virtual override internal {\n', '        _burn(from, volume);\n', '        if(from != _msgSender() && allowance(from, _msgSender()) != uint(-1))\n', '            _approve(from, _msgSender(), allowance(from, _msgSender()).sub(volume, "ERC20: transfer volume exceeds allowance"));\n', '    }\n', '\n', '    function _receive(address to, uint256 volume) virtual override internal {\n', '        _mint(to, volume);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'contract MappingTokenProxy is ProductProxy, Constants {\n', '    constructor(address factory_, uint mainChainId_, address token_, address creator_, string memory name_, string memory symbol_, uint8 decimals_, uint cap_) public {\n', '        //require(_factory() == address(0));\n', "        assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\n", "        assert(NAME_SLOT    == bytes32(uint256(keccak256('eip1967.proxy.name')) - 1));\n", '        _setFactory(factory_);\n', '        _setName(_MappingToken_);\n', "        (bool success,) = _implementation().delegatecall(abi.encodeWithSignature('__MappingToken_init(address,uint256,address,address,string,string,uint8,uint256)', address(this), mainChainId_, token_, creator_, name_, symbol_, decimals_, cap_));\n", '        require(success);\n', '    }  \n', '}\n', '\n', '\n', 'contract Factory is ContextUpgradeSafe, Configurable, Constants {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    bytes32 public constant REGISTER_TYPEHASH   = keccak256("RegisterMapping(uint mainChainId,address token,uint[] chainIds,address[] mappingTokenMappeds,address signatory)");\n', '    bytes32 public constant CREATE_TYPEHASH     = keccak256("CreateMappingToken(address creator,uint mainChainId,address token,string name,string symbol,uint8 decimals,uint cap,address signatory)");\n', '    bytes32 public constant DOMAIN_TYPEHASH     = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '\n', '    mapping (bytes32 => address) public productImplementations;\n', '    mapping (address => address) public tokenMappeds;                // token => tokenMapped\n', '    mapping (address => address) public mappableTokens;              // creator => mappableTokens\n', '    mapping (uint256 => mapping (address => address)) public mappingTokens;     // mainChainId => token or creator => mappableTokens\n', '    mapping (address => bool) public authorties;\n', '    \n', '    // only on ethereum mainnet\n', '    mapping (address => uint) public authCountOf;                   // signatory => count\n', '    mapping (address => uint256) internal _mainChainIdTokens;       // mappingToken => mainChainId+token\n', '    mapping (address => mapping (uint => address)) public mappingTokenMappeds;  // token => chainId => mappingToken or tokenMapped\n', '    uint[] public supportChainIds;\n', '    mapping (string  => uint256) internal _certifiedTokens;         // symbol => mainChainId+token\n', '    string[] public certifiedSymbols;\n', '\n', '    function __MappingTokenFactory_init(address _governor, address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) external initializer {\n', '        __Governable_init_unchained(_governor);\n', '        __MappingTokenFactory_init_unchained(_implTokenMapped, _implMappableToken, _implMappingToken, _feeTo);\n', '    }\n', '    \n', '    function __MappingTokenFactory_init_unchained(address _implTokenMapped, address _implMappableToken, address _implMappingToken, address _feeTo) public governance {\n', '        config[_fee_]                           = 0.005 ether;\n', '        //config[_feeCreate_]                     = 0.200 ether;\n', '        config[_feeTo_]                         = uint(_feeTo);\n', '        config[_minSignatures_]                 = 3;\n', '        config[_uniswapRounter_]                = uint(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', "        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes('MappingTokenFactory')), _chainId(), address(this)));\n", '        upgradeProductImplementationsTo_(_implTokenMapped, _implMappableToken, _implMappingToken);\n', '        emit ProductProxyCodeHash(keccak256(type(InitializableProductProxy).creationCode));\n', '    }\n', '    event ProductProxyCodeHash(bytes32 codeHash);\n', '\n', '    function upgradeProductImplementationsTo_(address _implTokenMapped, address _implMappableToken, address _implMappingToken) public governance {\n', '        productImplementations[_TokenMapped_]   = _implTokenMapped;\n', '        productImplementations[_MappableToken_] = _implMappableToken;\n', '        productImplementations[_MappingToken_]  = _implMappingToken;\n', '    }\n', '    \n', '    function setAuthorty_(address authorty, bool enable) virtual external governance {\n', '        authorties[authorty] = enable;\n', '        emit SetAuthorty(authorty, enable);\n', '    }\n', '    event SetAuthorty(address indexed authorty, bool indexed enable);\n', '    \n', '    modifier onlyAuthorty {\n', "        require(authorties[_msgSender()], 'only authorty');\n", '        _;\n', '    }\n', '    \n', '    function increaseAuthQuotas(address mappingTokenMapped, address[] memory signatorys, uint[] memory increments) virtual external onlyAuthorty returns (uint[] memory quotas) {\n', '        quotas = MappingBase(mappingTokenMapped).increaseAuthQuotas(signatorys, increments);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatorys[i], increments[i], quotas[i]);\n', '    }\n', '    \n', '    function increaseAuthQuota(address mappingTokenMapped, address signatory, uint increment) virtual external onlyAuthorty returns (uint quota) {\n', '        quota = MappingBase(mappingTokenMapped).increaseAuthQuota(signatory, increment);\n', '        emit IncreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, increment, quota);\n', '    }\n', '    event IncreaseAuthQuota(address indexed authorty, address indexed mappingTokenMapped, address indexed signatory, uint increment, uint quota);\n', '    \n', '    function decreaseAuthQuotas(address mappingTokenMapped, address[] memory signatorys, uint[] memory decrements) virtual external onlyAuthorty returns (uint[] memory quotas) {\n', '        quotas = MappingBase(mappingTokenMapped).decreaseAuthQuotas(signatorys, decrements);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatorys[i], decrements[i], quotas[i]);\n', '    }\n', '    \n', '    function decreaseAuthQuota(address mappingTokenMapped, address signatory, uint decrement) virtual external onlyAuthorty returns (uint quota) {\n', '        quota = MappingBase(mappingTokenMapped).decreaseAuthQuota(signatory, decrement);\n', '        emit DecreaseAuthQuota(_msgSender(), mappingTokenMapped, signatory, decrement, quota);\n', '    }\n', '    event DecreaseAuthQuota(address indexed authorty, address indexed mappingTokenMapped, address indexed signatory, uint decrement, uint quota);\n', '\n', '    function increaseAuthCount(address[] memory signatorys, uint[] memory increments) virtual external returns (uint[] memory counts) {\n', "        require(signatorys.length == increments.length, 'two array lenth not equal');\n", '        counts = new uint[](signatorys.length);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            counts[i] = increaseAuthCount(signatorys[i], increments[i]);\n', '    }\n', '    \n', '    function increaseAuthCount(address signatory, uint increment) virtual public onlyAuthorty returns (uint count) {\n', '        count = authCountOf[signatory].add(increment);\n', '        authCountOf[signatory] = count;\n', '        emit IncreaseAuthQuota(_msgSender(), signatory, increment, count);\n', '    }\n', '    event IncreaseAuthQuota(address indexed authorty, address indexed signatory, uint increment, uint quota);\n', '    \n', '    function decreaseAuthCounts(address[] memory signatorys, uint[] memory decrements) virtual external returns (uint[] memory counts) {\n', "        require(signatorys.length == decrements.length, 'two array lenth not equal');\n", '        counts = new uint[](signatorys.length);\n', '        for(uint i=0; i<signatorys.length; i++)\n', '            counts[i] = decreaseAuthCount(signatorys[i], decrements[i]);\n', '    }\n', '    \n', '    function decreaseAuthCount(address signatory, uint decrement) virtual public onlyAuthorty returns (uint count) {\n', '        count = authCountOf[signatory];\n', '        if(count < decrement)\n', '            decrement = count;\n', '        return _decreaseAuthCount(signatory, decrement);\n', '    }\n', '    \n', '    function _decreaseAuthCount(address signatory, uint decrement) virtual internal returns (uint count) {\n', '        count = authCountOf[signatory].sub(decrement);\n', '        authCountOf[signatory] = count;\n', '        emit DecreaseAuthCount(_msgSender(), signatory, decrement, count);\n', '    }\n', '    event DecreaseAuthCount(address indexed authorty, address indexed signatory, uint decrement, uint count);\n', '\n', '    function supportChainCount() public view returns (uint) {\n', '        return supportChainIds.length;\n', '    }\n', '    \n', '    function mainChainIdTokens(address mappingToken) virtual public view returns(uint mainChainId, address token) {\n', '        uint256 chainIdToken = _mainChainIdTokens[mappingToken];\n', '        mainChainId = chainIdToken >> 160;\n', '        token = address(chainIdToken);\n', '    }\n', '    \n', '    function chainIdMappingTokenMappeds(address tokenOrMappingToken) virtual external view returns (uint[] memory chainIds, address[] memory mappingTokenMappeds_) {\n', '        (, address token) = mainChainIdTokens(tokenOrMappingToken);\n', '        if(token == address(0))\n', '            token = tokenOrMappingToken;\n', '        uint N = 0;\n', '        for(uint i=0; i<supportChainCount(); i++)\n', '            if(mappingTokenMappeds[token][supportChainIds[i]] != address(0))\n', '                N++;\n', '        chainIds = new uint[](N);\n', '        mappingTokenMappeds_ = new address[](N);\n', '        uint j = 0;\n', '        for(uint i=0; i<supportChainCount(); i++) {\n', '            uint chainId = supportChainIds[i];\n', '            address mappingTokenMapped = mappingTokenMappeds[token][chainId];\n', '            if(mappingTokenMapped != address(0)) {\n', '                chainIds[j] = chainId;\n', '                mappingTokenMappeds_[j] = mappingTokenMapped;\n', '                j++;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function isSupportChainId(uint chainId) virtual public view returns (bool) {\n', '        for(uint i=0; i<supportChainCount(); i++)\n', '            if(supportChainIds[i] == chainId)\n', '                return true;\n', '        return false;\n', '    }\n', '    \n', '    function registerSupportChainId_(uint chainId_) virtual external governance {\n', "        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\n", "        require(!isSupportChainId(chainId_), 'support chainId already');\n", '        supportChainIds.push(chainId_);\n', '    }\n', '    \n', '    function _registerMapping(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual internal {\n', "        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\n", "        require(chainIds.length == mappingTokenMappeds_.length, 'two array lenth not equal');\n", "        require(isSupportChainId(mainChainId), 'Not support mainChainId');\n", '        for(uint i=0; i<chainIds.length; i++) {\n', "            require(isSupportChainId(chainIds[i]), 'Not support chainId');\n", "            //require(_mainChainIdTokens[mappingTokenMappeds_[i]] == 0 || _mainChainIdTokens[mappingTokenMappeds_[i]] == (mainChainId << 160) | uint(token), 'mainChainIdTokens exist already');\n", "            //require(mappingTokenMappeds[token][chainIds[i]] == address(0), 'mappingTokenMappeds exist already');\n", '            //if(_mainChainIdTokens[mappingTokenMappeds_[i]] == 0)\n', '                _mainChainIdTokens[mappingTokenMappeds_[i]] = (mainChainId << 160) | uint(token);\n', '            mappingTokenMappeds[token][chainIds[i]] = mappingTokenMappeds_[i];\n', '            emit RegisterMapping(mainChainId, token, chainIds[i], mappingTokenMappeds_[i]);\n', '        }\n', '    }\n', '    event RegisterMapping(uint mainChainId, address token, uint chainId, address mappingTokenMapped);\n', '    \n', '    function registerMapping_(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_) virtual external governance {\n', '        _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);\n', '    }\n', '    \n', '    function registerMapping(uint mainChainId, address token, uint[] memory chainIds, address[] memory mappingTokenMappeds_, Signature[] memory signatures) virtual external payable {\n', '        _chargeFee();\n', '        uint N = signatures.length;\n', "        require(N >= getConfig(_minSignatures_), 'too few signatures');\n", '        for(uint i=0; i<N; i++) {\n', '            for(uint j=0; j<i; j++)\n', "                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\n", '            bytes32 structHash = keccak256(abi.encode(REGISTER_TYPEHASH, mainChainId, token, keccak256(abi.encodePacked(chainIds)), keccak256(abi.encodePacked(mappingTokenMappeds_)), signatures[i].signatory));\n', '            bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '            address signatory = ecrecover(digest, signatures[i].v, signatures[i].r, signatures[i].s);\n', '            require(signatory != address(0), "invalid signature");\n', '            require(signatory == signatures[i].signatory, "unauthorized");\n', '            _decreaseAuthCount(signatures[i].signatory, 1);\n', '            emit AuthorizeRegister(mainChainId, token, signatory);\n', '        }\n', '        _registerMapping(mainChainId, token, chainIds, mappingTokenMappeds_);\n', '    }\n', '    event AuthorizeRegister(uint indexed mainChainId, address indexed token, address indexed signatory);\n', '\n', '    function certifiedCount() external view returns (uint) {\n', '        return certifiedSymbols.length;\n', '    }\n', '    \n', '    function certifiedTokens(string memory symbol) public view returns (uint mainChainId, address token) {\n', '        uint256 chainIdToken = _certifiedTokens[symbol];\n', '        mainChainId = chainIdToken >> 160;\n', '        token = address(chainIdToken);\n', '    }\n', '    \n', '    function allCertifiedTokens() external view returns (string[] memory symbols, uint[] memory chainIds, address[] memory tokens) {\n', '        symbols = certifiedSymbols;\n', '        uint N = certifiedSymbols.length;\n', '        chainIds = new uint[](N);\n', '        tokens = new address[](N);\n', '        for(uint i=0; i<N; i++)\n', '            (chainIds[i], tokens[i]) = certifiedTokens(certifiedSymbols[i]);\n', '    }\n', '\n', '    function registerCertified_(string memory symbol, uint mainChainId, address token) external governance {\n', "        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\n", "        require(isSupportChainId(mainChainId), 'Not support mainChainId');\n", "        require(_certifiedTokens[symbol] == 0, 'Certified added already');\n", '        if(mainChainId == _chainId())\n', "            require(keccak256(bytes(symbol)) == keccak256(bytes(ERC20UpgradeSafe(token).symbol())), 'symbol different');\n", '        _certifiedTokens[symbol] = (mainChainId << 160) | uint(token);\n', '        certifiedSymbols.push(symbol);\n', '        emit RegisterCertified(symbol, mainChainId, token);\n', '    }\n', '    event RegisterCertified(string indexed symbol, uint indexed mainChainId, address indexed token);\n', '    \n', '    function updateCertified_(string memory symbol, uint mainChainId, address token) external governance {\n', "        require(_chainId() == 1 || _chainId() == 3, 'called only on ethereum mainnet');\n", "        require(isSupportChainId(mainChainId), 'Not support mainChainId');\n", "        //require(_certifiedTokens[symbol] == 0, 'Certified added already');\n", '        if(mainChainId == _chainId())\n', "            require(keccak256(bytes(symbol)) == keccak256(bytes(ERC20UpgradeSafe(token).symbol())), 'symbol different');\n", '        _certifiedTokens[symbol] = (mainChainId << 160) | uint(token);\n', '        //certifiedSymbols.push(symbol);\n', '        emit UpdateCertified(symbol, mainChainId, token);\n', '    }\n', '    event UpdateCertified(string indexed symbol, uint indexed mainChainId, address indexed token);\n', '    \n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function calcMapping(uint mainChainId, address tokenOrCreator) public view returns (address) {\n', '        return address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                address(this),\n', '                keccak256(abi.encodePacked(mainChainId, tokenOrCreator)),\n', "\t\t\t\tkeccak256(type(InitializableProductProxy).creationCode)                    //hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    function createTokenMapped(address token) external payable returns (address tokenMapped) {\n', '        _chargeFee();\n', '        IERC20(token).totalSupply();                                                            // just for check\n', "        require(tokenMappeds[token] == address(0), 'TokenMapped created already');\n", '\n', '        bytes32 salt = keccak256(abi.encodePacked(_chainId(), token));\n', '\n', '        bytes memory bytecode = type(InitializableProductProxy).creationCode;\n', '        assembly {\n', '            tokenMapped := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', "        InitializableProductProxy(payable(tokenMapped)).__InitializableProductProxy_init(address(this), _TokenMapped_, abi.encodeWithSignature('__TokenMapped_init(address,address)', address(this), token));\n", '        \n', '        tokenMappeds[token] = tokenMapped;\n', '        emit CreateTokenMapped(_msgSender(), token, tokenMapped);\n', '    }\n', '    event CreateTokenMapped(address indexed creator, address indexed token, address indexed tokenMapped);\n', '    \n', '    function createMappableToken(string memory name, string memory symbol, uint8 decimals, uint totalSupply) external payable returns (address mappableToken) {\n', '        _chargeFee();\n', "        require(mappableTokens[_msgSender()] == address(0), 'MappableToken created already');\n", '\n', '        bytes32 salt = keccak256(abi.encodePacked(_chainId(), _msgSender()));\n', '\n', '        bytes memory bytecode = type(InitializableProductProxy).creationCode;\n', '        assembly {\n', '            mappableToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', "        InitializableProductProxy(payable(mappableToken)).__InitializableProductProxy_init(address(this), _MappableToken_, abi.encodeWithSignature('__MappableToken_init(address,address,string,string,uint8,uint256)', address(this), _msgSender(), name, symbol, decimals, totalSupply));\n", '        \n', '        mappableTokens[_msgSender()] = mappableToken;\n', '        emit CreateMappableToken(_msgSender(), name, symbol, decimals, totalSupply, mappableToken);\n', '    }\n', '    event CreateMappableToken(address indexed creator, string name, string symbol, uint8 decimals, uint totalSupply, address indexed mappableToken);\n', '    \n', '    function _createMappingToken(uint mainChainId, address token, address creator, string memory name, string memory symbol, uint8 decimals, uint cap) internal returns (address mappingToken) {\n', '        _chargeFee();\n', '        address tokenOrCreator = (token == address(0)) ? creator : token;\n', "        require(mappingTokens[mainChainId][tokenOrCreator] == address(0), 'MappingToken created already');\n", '\n', '        bytes32 salt = keccak256(abi.encodePacked(mainChainId, tokenOrCreator));\n', '\n', '        bytes memory bytecode = type(InitializableProductProxy).creationCode;\n', '        assembly {\n', '            mappingToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', "        InitializableProductProxy(payable(mappingToken)).__InitializableProductProxy_init(address(this), _MappingToken_, abi.encodeWithSignature('__MappingToken_init(address,uint256,address,address,string,string,uint8,uint256)', address(this), mainChainId, token, creator, name, symbol, decimals, cap));\n", '        \n', '        mappingTokens[mainChainId][tokenOrCreator] = mappingToken;\n', '        emit CreateMappingToken(mainChainId, token, creator, name, symbol, decimals, cap, mappingToken);\n', '    }\n', '    event CreateMappingToken(uint mainChainId, address indexed token, address indexed creator, string name, string symbol, uint8 decimals, uint cap, address indexed mappingToken);\n', '    \n', '    function createMappingToken_(uint mainChainId, address token, address creator, string memory name, string memory symbol, uint8 decimals, uint cap) public payable governance returns (address mappingToken) {\n', '        return _createMappingToken(mainChainId, token, creator, name, symbol, decimals, cap);\n', '    }\n', '    \n', '    function createMappingToken(uint mainChainId, address token, string memory name, string memory symbol, uint8 decimals, uint cap, Signature[] memory signatures) public payable returns (address mappingToken) {\n', '        uint N = signatures.length;\n', "        require(N >= getConfig(_minSignatures_), 'too few signatures');\n", '        for(uint i=0; i<N; i++) {\n', '            for(uint j=0; j<i; j++)\n', "                require(signatures[i].signatory != signatures[j].signatory, 'repetitive signatory');\n", '            bytes32 hash = keccak256(abi.encode(CREATE_TYPEHASH, _msgSender(), mainChainId, token, keccak256(bytes(name)), keccak256(bytes(symbol)), decimals, cap, signatures[i].signatory));\n', '            hash = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, hash));\n', '            address signatory = ecrecover(hash, signatures[i].v, signatures[i].r, signatures[i].s);\n', '            require(signatory != address(0), "invalid signature");\n', '            require(signatory == signatures[i].signatory, "unauthorized");\n', '            _decreaseAuthCount(signatures[i].signatory, 1);\n', '            emit AuthorizeCreate(mainChainId, token, _msgSender(), name, symbol, decimals, cap, signatory);\n', '        }\n', '        return _createMappingToken(mainChainId, token, _msgSender(), name, symbol, decimals, cap);\n', '    }\n', '    event AuthorizeCreate(uint mainChainId, address indexed token, address indexed creator, string name, string symbol, uint8 decimals, uint cap, address indexed signatory);\n', '    \n', '    function _chargeFee() virtual internal {\n', "        require(msg.value >= Math.min(config[_feeCreate_], 1 ether), 'fee for Create is too low');\n", '        address payable feeTo = address(config[_feeTo_]);\n', '        if(feeTo == address(0))\n', '            feeTo = address(uint160(address(this)));\n', '        feeTo.transfer(msg.value);\n', '        emit ChargeFee(_msgSender(), feeTo, msg.value);\n', '    }\n', '    event ChargeFee(address indexed from, address indexed to, uint value);\n', '\n', '    uint256[50] private __gap;\n', '}']