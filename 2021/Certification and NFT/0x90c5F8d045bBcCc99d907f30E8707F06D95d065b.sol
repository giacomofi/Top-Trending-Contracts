['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.0 <0.8.0;\n', '\n', 'interface ERC20 {\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '}\n', '\n', '/// All the errors which may be encountered on the bond manager\n', 'library Errors {\n', '    string constant ERC20_ERR = "BondManager: Could not post bond";\n', '    string constant ALREADY_FINALIZED = "BondManager: Fraud proof for this pre-state root has already been finalized";\n', '    string constant SLASHED = "BondManager: Cannot finalize withdrawal, you probably got slashed";\n', '    string constant WRONG_STATE = "BondManager: Wrong bond state for proposer";\n', '    string constant CANNOT_CLAIM = "BondManager: Cannot claim yet. Dispute must be finalized first";\n', '\n', '    string constant WITHDRAWAL_PENDING = "BondManager: Withdrawal already pending";\n', '    string constant TOO_EARLY = "BondManager: Too early to finalize your withdrawal";\n', '\n', '    string constant ONLY_TRANSITIONER = "BondManager: Only the transitioner for this pre-state root may call this function";\n', '    string constant ONLY_FRAUD_VERIFIER = "BondManager: Only the fraud verifier may call this function";\n', '    string constant ONLY_STATE_COMMITMENT_CHAIN = "BondManager: Only the state commitment chain may call this function";\n', '    string constant WAIT_FOR_DISPUTES = "BondManager: Wait for other potential disputes";\n', '}\n', '\n', '/**\n', ' * @title iOVM_BondManager\n', ' */\n', 'interface iOVM_BondManager {\n', '\n', '    /*******************\n', '     * Data Structures *\n', '     *******************/\n', '\n', "    /// The lifecycle of a proposer's bond\n", '    enum State {\n', '        // Before depositing or after getting slashed, a user is uncollateralized\n', '        NOT_COLLATERALIZED,\n', '        // After depositing, a user is collateralized\n', '        COLLATERALIZED,\n', '        // After a user has initiated a withdrawal\n', '        WITHDRAWING\n', '    }\n', '\n', '    /// A bond posted by a proposer\n', '    struct Bond {\n', "        // The user's state\n", '        State state;\n', '        // The timestamp at which a proposer issued their withdrawal request\n', '        uint32 withdrawalTimestamp;\n', '        // The time when the first disputed was initiated for this bond\n', '        uint256 firstDisputeAt;\n', '        // The earliest observed state root for this bond which has had fraud\n', '        bytes32 earliestDisputedStateRoot;\n', "        // The state root's timestamp\n", '        uint256 earliestTimestamp;\n', '    }\n', '\n', '    // Per pre-state root, store the number of state provisions that were made\n', '    // and how many of these calls were made by each user. Payouts will then be\n', '    // claimed by users proportionally for that dispute.\n', '    struct Rewards {\n', '        // Flag to check if rewards for a fraud proof are claimable\n', '        bool canClaim;\n', '        // Total number of `recordGasSpent` calls made\n', '        uint256 total;\n', '        // The gas spent by each user to provide witness data. The sum of all\n', '        // values inside this map MUST be equal to the value of `total`\n', '        mapping(address => uint256) gasSpent;\n', '    }\n', '\n', '\n', '    /********************\n', '     * Public Functions *\n', '     ********************/\n', '\n', '    function recordGasSpent(\n', '        bytes32 _preStateRoot,\n', '        bytes32 _txHash,\n', '        address _who,\n', '        uint256 _gasSpent\n', '    ) external;\n', '\n', '    function finalize(\n', '        bytes32 _preStateRoot,\n', '        address _publisher,\n', '        uint256 _timestamp\n', '    ) external;\n', '\n', '    function deposit() external;\n', '\n', '    function startWithdrawal() external;\n', '\n', '    function finalizeWithdrawal() external;\n', '\n', '    function claim(\n', '        address _who\n', '    ) external;\n', '\n', '    function isCollateralized(\n', '        address _who\n', '    ) external view returns (bool);\n', '\n', '    function getGasSpent(\n', '        bytes32 _preStateRoot,\n', '        address _who\n', '    ) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.0 <0.8.0;\n', '\n', '/* External Imports */\n', 'import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '/**\n', ' * @title Lib_AddressManager\n', ' */\n', 'contract Lib_AddressManager is Ownable {\n', '\n', '    /**********\n', '     * Events *\n', '     **********/\n', '\n', '    event AddressSet(\n', '        string _name,\n', '        address _newAddress\n', '    );\n', '\n', '\n', '    /*************\n', '     * Variables *\n', '     *************/\n', '\n', '    mapping (bytes32 => address) private addresses;\n', '\n', '\n', '    /********************\n', '     * Public Functions *\n', '     ********************/\n', '\n', '    /**\n', '     * Changes the address associated with a particular name.\n', '     * @param _name String name to associate an address with.\n', '     * @param _address Address to associate with the name.\n', '     */\n', '    function setAddress(\n', '        string memory _name,\n', '        address _address\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        addresses[_getNameHash(_name)] = _address;\n', '\n', '        emit AddressSet(\n', '            _name,\n', '            _address\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Retrieves the address associated with a given name.\n', '     * @param _name Name to retrieve an address for.\n', '     * @return Address associated with the given name.\n', '     */\n', '    function getAddress(\n', '        string memory _name\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            address\n', '        )\n', '    {\n', '        return addresses[_getNameHash(_name)];\n', '    }\n', '\n', '\n', '    /**********************\n', '     * Internal Functions *\n', '     **********************/\n', '\n', '    /**\n', '     * Computes the hash of a name.\n', '     * @param _name Name to compute a hash for.\n', '     * @return Hash of the given name.\n', '     */\n', '    function _getNameHash(\n', '        string memory _name\n', '    )\n', '        internal\n', '        pure\n', '        returns (\n', '            bytes32\n', '        )\n', '    {\n', '        return keccak256(abi.encodePacked(_name));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.0 <0.8.0;\n', '\n', '/* Library Imports */\n', 'import { Lib_AddressManager } from "./Lib_AddressManager.sol";\n', '\n', '/**\n', ' * @title Lib_AddressResolver\n', ' */\n', 'abstract contract Lib_AddressResolver {\n', '\n', '    /*************\n', '     * Variables *\n', '     *************/\n', '\n', '    Lib_AddressManager public libAddressManager;\n', '\n', '\n', '    /***************\n', '     * Constructor *\n', '     ***************/\n', '\n', '    /**\n', '     * @param _libAddressManager Address of the Lib_AddressManager.\n', '     */\n', '    constructor(\n', '        address _libAddressManager\n', '    ) {\n', '        libAddressManager = Lib_AddressManager(_libAddressManager);\n', '    }\n', '\n', '\n', '    /********************\n', '     * Public Functions *\n', '     ********************/\n', '\n', '    /**\n', '     * Resolves the address associated with a given name.\n', '     * @param _name Name to resolve an address for.\n', '     * @return Address associated with the given name.\n', '     */\n', '    function resolve(\n', '        string memory _name\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            address\n', '        )\n', '    {\n', '        return libAddressManager.getAddress(_name);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.0 <0.8.0;\n', '\n', '/* Interface Imports */\n', 'import { iOVM_BondManager } from "../../iOVM/verification/iOVM_BondManager.sol";\n', '\n', '/* Contract Imports */\n', 'import { Lib_AddressResolver } from "../../libraries/resolver/Lib_AddressResolver.sol";\n', '\n', '/**\n', ' * @title mockOVM_BondManager\n', ' */\n', 'contract mockOVM_BondManager is iOVM_BondManager, Lib_AddressResolver {\n', '    constructor(\n', '        address _libAddressManager\n', '    )\n', '        Lib_AddressResolver(_libAddressManager)\n', '    {}\n', '\n', '    function recordGasSpent(\n', '        bytes32 _preStateRoot,\n', '        bytes32 _txHash,\n', '        address _who,\n', '        uint256 _gasSpent\n', '    )\n', '        override\n', '        public\n', '    {}\n', '\n', '    function finalize(\n', '        bytes32 _preStateRoot,\n', '        address _publisher,\n', '        uint256 _timestamp\n', '    )\n', '        override\n', '        public\n', '    {}\n', '\n', '    function deposit()\n', '        override\n', '        public\n', '    {}\n', '\n', '    function startWithdrawal()\n', '        override\n', '        public\n', '    {}\n', '\n', '    function finalizeWithdrawal()\n', '        override\n', '        public\n', '    {}\n', '\n', '    function claim(\n', '        address _who\n', '    )\n', '        override\n', '        public\n', '    {}\n', '\n', '    function isCollateralized(\n', '        address _who\n', '    )\n', '        override\n', '        public\n', '        view\n', '        returns (\n', '            bool\n', '        )\n', '    {\n', '        // Only authenticate sequencer to submit state root batches.\n', '        return _who == resolve("OVM_Proposer");\n', '    }\n', '\n', '    function getGasSpent(\n', '        bytes32, // _preStateRoot,\n', '        address // _who\n', '    )\n', '        override\n', '        public\n', '        pure\n', '        returns (\n', '            uint256\n', '        )\n', '    {\n', '        return 0;\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']