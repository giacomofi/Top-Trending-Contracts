['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./BoredApeYachtClub.sol";\n', '\n', '\n', 'contract BoredApePixelClub is ERC721, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    BoredApeYachtClub private _boredApeYachtClub;\n', '\n', '    uint private constant _PRICE = 30000000000000000;\n', '\n', "    string private _provenanceHash = '';\n", '\n', '    uint256 private _maxSupply;\n', '\n', '    bool private _activeSale = false;\n', '\n', '    event WithdrawCompleted(address indexed recipient, uint amount);\n', '\n', '    event ReserveCompleted(address indexed recipient, uint tokenId);\n', '\n', '    event BaseURIUpdated(string newBaseURI);\n', '\n', '    event ProvenanceHashUpdated(string newProvenanceHash);\n', '\n', '    event BAYCAddressUpdated(address newBoredApeYachtClubAddress);\n', '\n', '    event PurchaseCompleted(address indexed recipient, uint numberOfTokens, uint payment);\n', '\n', '    constructor(string memory name, string memory symbol, uint maxSupply, address boredApeYachtClubAddress) ERC721(name, symbol) {\n', '        _boredApeYachtClub = BoredApeYachtClub(boredApeYachtClubAddress);\n', '        _maxSupply = maxSupply;\n', '    }\n', '\n', '    function flipSaleState() public onlyOwner {\n', '        _activeSale = !_activeSale;\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '\n', '        emit WithdrawCompleted(msg.sender, balance);\n', '    }\n', '\n', '    function reserve(uint tokenId) public onlyOwner {\n', '        require(!_exists(tokenId), "Token has already been minted");\n', '\n', '        _safeMint(msg.sender, tokenId);\n', '\n', '        emit ReserveCompleted(msg.sender, tokenId);\n', '    }\n', '\n', '    function numberBoredApesBought() public view returns (uint) {\n', '        return _boredApeYachtClub.balanceOf(msg.sender);\n', '    }\n', '\n', '    function getNumberAvailableApes() public view returns (uint) {\n', '        uint numberAvailable = 0;\n', '        uint numberBAYC = numberBoredApesBought();\n', '\n', '        for (uint i= 0; i < numberBAYC; i++) {\n', '            uint tokenIndex = _boredApeYachtClub.tokenOfOwnerByIndex(msg.sender, i);\n', '            if (!_exists(tokenIndex)) {\n', '                numberAvailable++;\n', '            }\n', '        }\n', '\n', '        return numberAvailable;\n', '    }\n', '\n', '    function random(uint range, uint nonce) public view returns (uint) {\n', '        uint randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % range;\n', '        return randomNumber;\n', '    }\n', '\n', '    function purchase(uint numberOfTokens) public payable {\n', '        require(_PRICE.mul(numberOfTokens) <= msg.value, "Ether value sent is not correct");\n', '        require(_activeSale, "Sale must be active to mint");\n', '        require(totalSupply().add(numberOfTokens) <= _maxSupply, "Minting would exceed max supply");\n', '\n', '        uint numberBAYC = numberBoredApesBought();\n', '        uint numberMinted = 0;\n', '\n', '        uint startIndex = random(numberBAYC, numberBAYC);\n', '\n', '        for (uint i = startIndex; i < numberBAYC + startIndex; i++) {\n', '\n', '            uint tokenIndex = _boredApeYachtClub.tokenOfOwnerByIndex(msg.sender, i % numberBAYC);\n', '\n', '            if (!_exists(tokenIndex)) {\n', '                _safeMint(msg.sender, tokenIndex);\n', '\n', '                numberMinted++;\n', '\n', '                if (numberMinted == numberOfTokens) {\n', '                    emit PurchaseCompleted(msg.sender, numberOfTokens, msg.value);\n', '                    return;\n', '                }\n', '            }\n', '        }\n', '\n', '        // We can only reach this line if numberOfTokens is greater than the number of available tokens\n', '        require(false, "Number of requested tokens exceeds available tokens");\n', '    }\n', '\n', '    function provenanceHash() public view virtual returns (string memory) {\n', '        return _provenanceHash;\n', '    }\n', '\n', '    function price() public view virtual returns (uint) {\n', '        return _PRICE;\n', '    }\n', '\n', '    function maxSupply() public view virtual returns (uint) {\n', '        return _maxSupply;\n', '    }\n', '\n', '    function activeSale() public view virtual returns (bool) {\n', '        return _activeSale;\n', '    }\n', '\n', '    function setBaseURI(string memory baseURI) public onlyOwner {\n', '        _setBaseURI(baseURI);\n', '\n', '        emit BaseURIUpdated(baseURI);\n', '    }\n', '\n', '    function setProvenanceHash(string memory newProvenanceHash) public onlyOwner {\n', '        _provenanceHash = newProvenanceHash;\n', '\n', '        emit ProvenanceHashUpdated(newProvenanceHash);\n', '    }\n', '\n', '    function setBoredApeYachtClubAddress(address boredApeYachtClubAddress) public onlyOwner {\n', '        _boredApeYachtClub = BoredApeYachtClub(boredApeYachtClubAddress);\n', '\n', '        emit BAYCAddressUpdated(boredApeYachtClubAddress);\n', '    }\n', '}']