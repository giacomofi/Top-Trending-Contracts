['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-22\n', '*/\n', '\n', '// "SPDX-License-Identifier: UNLICENSED"\n', 'pragma solidity 0.7.4;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public admin;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() {\n', '    admin = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newAdmin The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newAdmin) external onlyOwner {\n', '    require(newAdmin != address(0));\n', '    emit OwnershipTransferred(admin, newAdmin);\n', '    admin = newAdmin;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'interface ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) external view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) external view returns (address _owner);\n', '\n', '  function approve(address _to, uint256 _tokenId) external;\n', '  function getApproved(uint256 _tokenId) external view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) external;\n', '  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) external;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'interface ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() external view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) external view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'interface ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string memory _name);\n', '  function symbol() external view returns (string memory _symbol);\n', '  function tokenURI(uint256 _tokenId) external view returns (string memory);\n', '}\n', '\n', '/**\n', ' * @title ERC-165 Standard Interface Detection\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '  /// @notice Query if a contract implements an interface\n', '  /// @param interfaceID The interface identifier, as specified in ERC-165\n', '  /// @dev Interface identification is specified in ERC-165. This function\n', '  ///  uses less than 30,000 gas.\n', '  /// @return `true` if the contract implements `interfaceID` and\n', '  ///  `interfaceID` is not 0xffffffff, `false` otherwise\n', '  function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'interface ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata, ERC165 {}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'interface ERC721Receiver {\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library String {\n', '  // From https://ethereum.stackexchange.com/questions/10811/solidity-concatenate-uint-into-a-string\n', '\n', '  function appendUintToString(string memory inStr, uint v) internal pure returns (string memory str) {\n', '    uint maxlength = 100;\n', '    bytes memory reversed = new bytes(maxlength);\n', '    uint i = 0;\n', '    while (v != 0) {\n', '      uint remainder = v % 10;\n', '      v = v / 10;\n', '      reversed[i++] = byte(uint8(48 + remainder));\n', '    }\n', '    bytes memory inStrb = bytes(inStr);\n', '    bytes memory s = new bytes(inStrb.length + i);\n', '    uint j;\n', '    for (j = 0; j < inStrb.length; j++) {\n', '      s[j] = inStrb[j];\n', '    }\n', '    for (j = 0; j < i; j++) {\n', '      s[j + inStrb.length] = reversed[i - 1 - j];\n', '    }\n', '    str = string(s);\n', '  }\n', '}\n', '\n', 'contract Main is ERC721, Ownable {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Token name\n', '  string constant private _name = "OSS BUIDL Token";\n', '\n', '  // Token symbol\n', '  string constant private _symbol = "BUIDL";\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant private ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Public URL\n', '  string public publicURL = "https://hackerlink.io/buidl/";\n', '\n', '  // Mapping from token ID to owner\n', '  mapping(uint256 => address) internal _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping(uint256 => address) internal _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping(address => uint256) internal _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping(address => mapping(address => bool)) internal _operatorApprovals;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal _allTokens;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal _ownedTokensIndex;\n', '\n', '  struct Buidl {\n', '    uint256 cid;\n', '    uint256 originalPrice;\n', '    uint256 currentPrice;\n', '    uint256 txs;\n', '    address miner;\n', '    string remarks;\n', '  }\n', '  mapping(uint256 => Buidl) internal _buidls;\n', '\n', '  // ERC20 token used in NFT transaction\n', '  ERC20 public currency;\n', '\n', '  bool public miningTax = true;\n', '\n', '  uint256 constant public UNIT = 1000;\n', '  uint256 constant public MINER_TAX = 20; // 2%\n', '  uint256 constant public PLATFORM_TAX = 10; // 1%\n', '  uint256 constant public OWNER_INCOME = 700; // 70%\n', '  uint256 constant public MINER_INCOME = 200; // 20%\n', '  // uint256 constant public PLATFORM_INCOME = 100; // 1 - OWNER_INCOME - MINER_INCOME = 10%\n', '\n', '/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\n', '\n', '  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\n', '  bytes4 constant private INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\n', '  bytes4 constant private INTERFACE_SIGNATURE_ERC721METADATA = 0x5b5e139f;\n', '  bytes4 constant private INTERFACE_SIGNATURE_ERC721ENUMERABLE = 0x780e9d63;\n', '\n', '  function supportsInterface(bytes4 _interfaceId) override external pure returns (bool) {\n', '    if (\n', '      _interfaceId == INTERFACE_SIGNATURE_ERC165 ||\n', '      _interfaceId == INTERFACE_SIGNATURE_ERC721 ||\n', '      _interfaceId == INTERFACE_SIGNATURE_ERC721METADATA ||\n', '      _interfaceId == INTERFACE_SIGNATURE_ERC721ENUMERABLE\n', '    ) {\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\n', '\n', '  event PublicURL(string _url);\n', '  event MiningTax(bool _state);\n', '  event HarbergeBuy(uint256 indexed _tokenId, address indexed _buyer, uint256 _price, uint256 _txs);\n', '\n', '  constructor(ERC20 _currency) {\n', '    currency = _currency;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(_isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() override external pure returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() override external pure returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token url\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   * @return string representing the token url\n', '   */\n', '  function tokenURI(uint256 _tokenId) override public view returns (string memory) {\n', '    Buidl storage buidl = _buidls[_tokenId];\n', '    require(buidl.miner != address(0));\n', '    return (String.appendUintToString(publicURL, buidl.cid));\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) override public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return _ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) override public view returns (address) {\n', '    address owner = _tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) override external view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return _ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() override public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) override external view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return _allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the public URL by administrator\n', '   * @param _url new public URL\n', '   */\n', '  function setPublicURL(string memory _url) external onlyOwner {\n', '    publicURL = _url;\n', '    emit PublicURL(_url);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets whether to charge mining tax or not by administrator\n', '   * @param _state mining tax state\n', '   */\n', '  function setMiningTax(bool _state) external onlyOwner {\n', '    miningTax = _state;\n', '    emit MiningTax(_state);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) override external {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      _tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) override public view returns (address) {\n', '    return _tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) override external {\n', '    require(_to != msg.sender);\n', '    _operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) override public view returns (bool) {\n', '    return _operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    _clearApproval(_from, _tokenId);\n', '    _removeTokenFrom(_from, _tokenId);\n', '    _addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) override public canTransfer(_tokenId) {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '////////////////////////////////////////////// MAIN //////////////////////////////////////////////\n', '\n', '  function mint(uint256 _initPrice, uint256 _cId, string memory _remarks) external {\n', '    uint256 tokenId = uint256(keccak256(abi.encodePacked(msg.sender, _cId)));\n', '    if (miningTax) {\n', '      uint256 tax = _initPrice.mul(PLATFORM_TAX) / UNIT;\n', '      require(currency.transferFrom(msg.sender, address(this), tax));\n', '    }\n', '    _mint(msg.sender, tokenId);\n', '    _buidls[tokenId] = Buidl(_cId, _initPrice, _initPrice, 0, msg.sender, _remarks);\n', '  }\n', '\n', '  function harbergeBuy(uint256 _tokenId, uint256 _newPrice) external {\n', '    address owner = ownerOf(_tokenId);\n', '\n', '    Buidl storage buidl = _buidls[_tokenId];\n', '    uint256 currentPrice = buidl.currentPrice;\n', '    require(_newPrice > currentPrice);\n', '\n', '    // |<------------------ newPrice ------------------>|\n', '    // |<-------- currentPrice -------->|<-- growing -->|<- tax ->|\n', '    // |<----------------------- totalSpend --------------------->|\n', '\n', '    // |<---------------- growing ---------------->|\n', '    // |<--------- 7 --------->|<--- 2 --->|<- 1 ->|\n', '    // |          OWNER        |   MINER   | PLATF |\n', '  \n', '    // |<------ tax ------>|\n', '    // |<--- 2 --->|<- 1 ->|\n', '    // |   MINER   | PLATF |\n', '\n', '    uint256 growing = _newPrice - currentPrice;\n', '    uint256 ownerIncome = growing.mul(OWNER_INCOME) / UNIT;\n', '    uint256 minerIncome = growing.mul(MINER_INCOME) / UNIT;\n', '  \n', '    uint256 minerTax = _newPrice.mul(MINER_TAX) / UNIT;\n', '    uint256 platformTax = _newPrice.mul(PLATFORM_TAX) / UNIT;\n', '\n', '    uint256 totalSpend = _newPrice.add(platformTax).add(minerTax);\n', '\n', '    require(currency.transferFrom(msg.sender, address(this), totalSpend));\n', '    require(currency.transfer(owner, ownerIncome.add(currentPrice)));\n', '    require(currency.transfer(buidl.miner, minerIncome.add(minerTax)));\n', '\n', '    uint256 txs = buidl.txs.add(1);\n', '    buidl.currentPrice = _newPrice;\n', '    buidl.txs = txs;\n', '\n', '    _clearApproval(owner, _tokenId);\n', '    _removeTokenFrom(owner, _tokenId);\n', '    _addTokenTo(msg.sender, _tokenId);\n', '\n', '    require(_checkAndCallSafeTransfer(owner, msg.sender, _tokenId, "BUY"));\n', '\n', '    emit Transfer(owner, msg.sender, _tokenId);\n', '    emit HarbergeBuy(_tokenId, msg.sender, _newPrice, txs);\n', '  }\n', '\n', '  function withdraw(uint256 _amount) external onlyOwner {\n', '    require(currency.transfer(admin, _amount));\n', '  }\n', '\n', '  function metadataOf(uint256 _tokenId) external view returns (\n', '    address owner,\n', '    uint256 cid,\n', '    uint256 originalPrice,\n', '    uint256 currentPrice,\n', '    uint256 txs,\n', '    address miner,\n', '    string memory url,\n', '    string memory remarks\n', '  ) {\n', '    owner = ownerOf(_tokenId);\n', '    Buidl storage buidl = _buidls[_tokenId];\n', '    cid = buidl.cid;\n', '    originalPrice = buidl.originalPrice;\n', '    currentPrice = buidl.currentPrice;\n', '    txs = buidl.txs;\n', '    miner = buidl.miner;\n', '    url = tokenURI(_tokenId);\n', '    remarks = buidl.remarks;\n', '  }\n', '\n', '////////////////////////////////////////////// MAIN //////////////////////////////////////////////\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_tokenOwner[_tokenId] == address(0));\n', '    require(_to != address(0));\n', '    _addTokenTo(_to, _tokenId);\n', '    _allTokens.push(_tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (_tokenApprovals[_tokenId] != address(0)) {\n', '      _tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(_tokenOwner[_tokenId] == address(0));\n', '    _tokenOwner[_tokenId] = _to;\n', '    _ownedTokensCount[_to] = _ownedTokensCount[_to].add(1);\n', '  \n', '    uint256 length = _ownedTokens[_to].length;\n', '    _ownedTokens[_to].push(_tokenId);\n', '    _ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    _ownedTokensCount[_from] = _ownedTokensCount[_from].sub(1);\n', '    _tokenOwner[_tokenId] = address(0);\n', '\n', '    uint256 tokenIndex = _ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[_from][lastTokenIndex];\n', '\n', '    _ownedTokens[_from][tokenIndex] = lastToken;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '\n', '    _ownedTokens[_from].pop();\n', '    _ownedTokensIndex[_tokenId] = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes memory _data) internal returns (bool) {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}']