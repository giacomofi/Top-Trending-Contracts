['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { GovernorBravoDelegatorStorage, GovernorBravoEvents } from "./GovernorBravoInterfaces.sol";\n', '\n', 'contract InstaGovernorBravoDelegator is GovernorBravoDelegatorStorage, GovernorBravoEvents {\n', '    constructor(\n', '        address timelock_,\n', '        address admin_,\n', '        address token_,\n', '        address implementation_,\n', '        uint votingPeriod_,\n', '        uint votingDelay_,\n', '        uint proposalThreshold_\n', '    ) {\n', '        // Admin set to msg.sender for initialization\n', '        admin = msg.sender;\n', '\n', '        delegateTo(\n', '            implementation_,\n', '            abi.encodeWithSignature(\n', '                "initialize(address,address,uint256,uint256,uint256)",\n', '                timelock_,\n', '                token_,\n', '                votingPeriod_,\n', '                votingDelay_,\n', '                proposalThreshold_\n', '            )\n', '        );\n', '\n', '        _setImplementation(implementation_);\n', '\n', '        admin = admin_;\n', '    }\n', '\n', '    /**\n', '     * @notice Called by the admin to update the implementation of the delegator\n', '     * @param implementation_ The address of the new implementation for delegation\n', '     */\n', '    function _setImplementation(address implementation_) public {\n', '        require(msg.sender == admin, "GovernorBravoDelegator::_setImplementation: admin only");\n', '        require(implementation_ != address(0), "GovernorBravoDelegator::_setImplementation: invalid implementation address");\n', '\n', '        address oldImplementation = implementation;\n', '        implementation = implementation_;\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal method to delegate execution to another contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param callee The contract to delegatecall\n', '     * @param data The raw data to delegatecall\n', '     */\n', '    function delegateTo(address callee, bytes memory data) internal {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates execution to an implementation contract.\n', '     * It returns to the external caller whatever the implementation returns\n', '     * or forwards reverts.\n', '     */\n', '    fallback () external payable {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize()) }\n', '            default { return(free_mem_ptr, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TimelockInterface {\n', '    function delay() external view returns (uint);\n', '    function GRACE_PERIOD() external view returns (uint);\n', '    function acceptAdmin() external;\n', '    function queuedTransactions(bytes32 hash) external view returns (bool);\n', '    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\n', '    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\n', '    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\n', '}\n', '\n', 'contract GovernorBravoEvents {\n', '    /// @notice An event emitted when a new proposal is created\n', '    event ProposalCreated(\n', '        uint id,\n', '        address proposer,\n', '        address[] targets,\n', '        uint[] values,\n', '        string[] signatures,\n', '        bytes[] calldatas,\n', '        uint startBlock,\n', '        uint endBlock,\n', '        string description\n', '    );\n', '\n', '    /// @notice An event emitted when a vote has been cast on a proposal\n', '    /// @param voter The address which casted a vote\n', '    /// @param proposalId The proposal id which was voted on\n', '    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\n', '    /// @param votes Number of votes which were cast by the voter\n', '    /// @param reason The reason given for the vote by the voter\n', '    event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes, string reason);\n', '\n', '    /// @notice An event emitted when a proposal has been canceled\n', '    event ProposalCanceled(uint id);\n', '\n', '    /// @notice An event emitted when a proposal has been queued in the Timelock\n', '    event ProposalQueued(uint id, uint eta);\n', '\n', '    /// @notice An event emitted when a proposal has been executed in the Timelock\n', '    event ProposalExecuted(uint id);\n', '\n', '    /// @notice An event emitted when the voting delay is set\n', '    event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);\n', '\n', '    /// @notice An event emitted when the voting period is set\n', '    event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);\n', '\n', '    /// @notice Emitted when implementation is changed\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    /// @notice Emitted when proposal threshold is set\n', '    event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);\n', '\n', '    /// @notice Emitted when pendingAdmin is changed\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '}\n', '\n', 'contract GovernorBravoDelegatorStorage {\n', '    /// @notice Administrator for this contract\n', '    address public admin;\n', '\n', '    /// @notice Pending administrator for this contract\n', '    address public pendingAdmin;\n', '\n', '    /// @notice Active brains of Governor\n', '    address public implementation;\n', '}\n', '\n', '/**\n', ' * @title Storage for Governor Bravo Delegate\n', ' * @notice For future upgrades, do not change GovernorBravoDelegateStorageV1. Create a new\n', ' * contract which implements GovernorBravoDelegateStorageV1 and following the naming convention\n', ' * GovernorBravoDelegateStorageVX.\n', ' */\n', 'contract GovernorBravoDelegateStorageV1 is GovernorBravoDelegatorStorage {\n', '    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\n', '    uint public votingDelay;\n', '\n', '    /// @notice The duration of voting on a proposal, in blocks\n', '    uint public votingPeriod;\n', '\n', '    /// @notice The number of votes required in order for a voter to become a proposer\n', '    uint public proposalThreshold;\n', '\n', '    /// @notice The total number of proposals\n', '    uint public proposalCount;\n', '\n', '    /// @notice The address of the DSL Protocol Timelock\n', '    TimelockInterface public timelock;\n', '\n', '    /// @notice The address of the DSL governance token\n', '    TokenInterface public token;\n', '\n', '    /// @notice The official record of all proposals ever proposed\n', '    mapping (uint => Proposal) public proposals;\n', '\n', '    /// @notice The latest proposal for each proposer\n', '    mapping (address => uint) public latestProposalIds;\n', '\n', '    struct Proposal {\n', '        // Unique id for looking up a proposal\n', '        uint id;\n', '\n', '        // Creator of the proposal\n', '        address proposer;\n', '\n', '        // The timestamp that the proposal will be available for execution, set once the vote succeeds\n', '        uint eta;\n', '\n', '        // the ordered list of target addresses for calls to be made\n', '        address[] targets;\n', '\n', '        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '        uint[] values;\n', '\n', '        // The ordered list of function signatures to be called\n', '        string[] signatures;\n', '\n', '        // The ordered list of calldata to be passed to each call\n', '        bytes[] calldatas;\n', '\n', '        // The block at which voting begins: holders must delegate their votes prior to this block\n', '        uint startBlock;\n', '\n', '        // The block at which voting ends: votes must be cast prior to this block\n', '        uint endBlock;\n', '\n', '        // Current number of votes in favor of this proposal\n', '        uint forVotes;\n', '\n', '        // Current number of votes in opposition to this proposal\n', '        uint againstVotes;\n', '\n', '        // Current number of votes for abstaining for this proposal\n', '        uint abstainVotes;\n', '\n', '        // Flag marking whether the proposal has been canceled\n', '        bool canceled;\n', '\n', '        // Flag marking whether the proposal has been executed\n', '        bool executed;\n', '\n', '        // Receipts of ballots for the entire set of voters\n', '        mapping (address => Receipt) receipts;\n', '    }\n', '\n', '    /// @notice Ballot receipt record for a voter\n', '    struct Receipt {\n', '        // Whether or not a vote has been cast\n', '        bool hasVoted;\n', '\n', '        // Whether or not the voter supports the proposal or abstains\n', '        uint8 support;\n', '\n', '        // The number of votes the voter had, which were cast\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice Possible states that a proposal may be in\n', '    enum ProposalState {\n', '        Pending,\n', '        Active,\n', '        Canceled,\n', '        Defeated,\n', '        Succeeded,\n', '        Queued,\n', '        Expired,\n', '        Executed\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']