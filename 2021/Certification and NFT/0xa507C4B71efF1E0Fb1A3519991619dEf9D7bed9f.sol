['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = 0xc47b3410c1203B8f6701642Bb84Ae8Cd1C78D82d; //TBC\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface ETFloftOld{\n', '  function buyLoft(uint256[5] calldata numbers, uint256 times) external;\n', '  function round() external returns (uint256);\n', '}\n', '\n', '\n', 'contract ETFloft is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '          // Check the signature length\n', '          if (signature.length != 65) {\n', '              revert("ECDSA: invalid signature length");\n', '          }\n', '\n', '          // Divide the signature in r, s and v variables\n', '          bytes32 r;\n', '          bytes32 s;\n', '          uint8 v;\n', '\n', '          // ecrecover takes the signature parameters, and the only way to get them\n', '          // currently is to use assembly.\n', '          // solhint-disable-next-line no-inline-assembly\n', '          assembly {\n', '              r := mload(add(signature, 0x20))\n', '              s := mload(add(signature, 0x40))\n', '              v := byte(0, mload(add(signature, 0x60)))\n', '          }\n', '\n', '          return recover(hash, v, r, s);\n', '      }\n', '   /**\n', '       * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n', '       * `r` and `s` signature fields separately.\n', '       */\n', '      function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '          // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '          // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '          // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '          // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '          //\n', '          // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '          // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '          // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '          // these malleable signatures as well.\n', '          require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '          require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '          // If the signature is valid (and not malleable), return the signer address\n', '          address signer = ecrecover(hash, v, r, s);\n', '          require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '          return signer;\n', '      }\n', '\n', '  address public ETFtoken  = address(0x9E101C3a19e38a02B3c2fCf0D2Be4CE62C846488); //TBC\n', '  address public oldLoft   = address(0xa482246fFFBf92659A22525820C665D4aFfCF97B); //TBC\n', '\n', '  mapping(address=> uint256) public claimedETF;\n', '\n', '  function recycleETF(address to, uint256 amount) public onlyOwner{\n', '      TransferHelper.safeTransfer(ETFtoken, to, amount);\n', '  }\n', '\n', '  constructor() public {\n', '      TransferHelper.safeApprove(ETFtoken, oldLoft, uint(-1));\n', '  }\n', '  \n', '  function claimETF(uint256 claim2amount, bytes32 hash, bytes memory signature) public{\n', '      bytes memory prefix = hex"19457468657265756d205369676e6564204d6573736167653a0a3532";\n', '      require(keccak256(abi.encodePacked(prefix, msg.sender, claim2amount))==hash);\n', '      require(recover(hash, signature) == address(0x0009595Ee9616B3EFc1a31C3826c7dDC82E8dB2e));\n', '      require(claim2amount>=claimedETF[msg.sender], "nothing to claim");\n', '      uint256 amount = claim2amount.sub(claimedETF[msg.sender]);\n', '      claimedETF[msg.sender] = claim2amount;\n', '      TransferHelper.safeTransfer(ETFtoken, msg.sender, amount);\n', '  }\n', '\n', '  event newLoft(address indexed buyer, uint8[5] numbers, uint64 round, uint8 times);\n', '\n', '  function buyLoft(uint256[5] calldata numbers, uint256 times) public{\n', '      require (times <= 100);\n', '      TransferHelper.safeTransferFrom(ETFtoken, msg.sender, address(this), 2 ether * times);\n', '      uint8[5] memory num;\n', '      for(uint i;i<5;i++){\n', '        num[i] = uint8(numbers[i]);\n', '      }\n', '      emit newLoft(msg.sender, num, uint64(ETFloftOld(oldLoft).round()), uint8(times));\n', '      ETFloftOld(oldLoft).buyLoft(numbers, times);\n', '  }\n', '\n', '}']