['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-20\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function strategies(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function approvedStrategies(address, address) external view returns (bool);\n', '    // v no need\n', '    function approveStrategy(address, address) external;\n', '    function setStrategy(address, address) external;\n', '    function withdrawAll(address) external;\n', '}\n', '\n', 'interface yvERC20 {\n', '    function deposit(uint) external;\n', '    function withdraw(uint) external;\n', '    function getPricePerFullShare() external view returns (uint);\n', '}\n', '\n', 'interface ICurveFi {\n', '    function get_virtual_price() external view returns (uint);\n', '    function balances(int128) external view returns (uint);\n', '    function add_liquidity(\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '    function remove_liquidity(\n', '        uint256 _amount,\n', '        uint256[4] calldata min_amounts\n', '    ) external;\n', '    function remove_liquidity_imbalance(\n', '        uint256[4] calldata amounts,\n', '        uint256 max_burn_amount\n', '    ) external;\n', '    function exchange(\n', '        int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n', '    ) external;\n', '    function get_dy(\n', '        int128 from, int128 to, uint256 _from_amount\n', '    ) external view returns (uint);\n', '}\n', '\n', '/*\n', '\n', ' A strategy must implement the following calls;\n', ' \n', ' - deposit()\n', ' - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\n', ' - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\n', ' - withdrawAll() - Controller | Vault role - withdraw should always return to vault\n', ' - balanceOf()\n', ' \n', ' Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\n', ' \n', '*/\n', '\n', '\n', 'contract StrategyTUSDypool {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address constant public want = address(0x0000000000085d4780B73119b644AE5ecd22b376);\n', '    address constant public ypool = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\n', '    address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\n', '    address constant public yycrv = address(0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c);\n', '\n', '    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    address constant public ydai = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\n', '    address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    address constant public yusdc = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\n', '    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    address constant public yusdt = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\n', '    address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);\n', '    address constant public ytusd = address(0x73a052500105205d34Daf004eAb301916DA8190f);\n', '\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    uint constant public DENOMINATOR = 10000;\n', '    uint public treasuryFee = 1000;\n', '    uint public withdrawalFee = 50;\n', '    uint public strategistReward = 1000;\n', '    uint public threshold = 8000;\n', '    uint public slip = 10;\n', '    uint public tank = 0;\n', '    uint public p = 0;\n', '    uint public maxAmount = 1e24;\n', '\n', '    modifier isAuthorized() {\n', '        require(msg.sender == strategist || \n', '                msg.sender == governance || \n', '                msg.sender == controller ||\n', '                msg.sender == address(this), "!authorized");\n', '        _;\n', '    }\n', '\n', '    constructor(address _controller) public {\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '        keeper = msg.sender;\n', '        controller = _controller;\n', '        approveAll();\n', '    }\n', '\n', '    function approveAll() public isAuthorized {\n', '        IERC20(want).approve(ytusd, uint(-1));\n', '        IERC20(ytusd).approve(ypool, uint(-1));\n', '        IERC20(ycrv).approve(yycrv, uint(-1));\n', '        IERC20(ycrv).approve(ypool, uint(-1));\n', '        IERC20(ydai).approve(ypool, uint(-1));\n', '        IERC20(yusdc).approve(ypool, uint(-1));\n', '        IERC20(yusdt).approve(ypool, uint(-1));\n', '    }\n', '    \n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyTUSDypool";\n', '    }\n', '    \n', '    function harvest() external {\n', '        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance, "!ksg");\n', '        rebalance();\n', '        uint _want = (IERC20(want).balanceOf(address(this))).sub(tank);\n', '        if (_want > 0) {\n', '            if (_want > maxAmount) _want = maxAmount;\n', '            yvERC20(ytusd).deposit(_want);\n', '        }\n', '        uint _y = IERC20(ytusd).balanceOf(address(this));\n', '        if (_y > 0) {\n', '            uint v = _want.mul(1e18).div(ICurveFi(ypool).get_virtual_price());\n', '            ICurveFi(ypool).add_liquidity([0, 0, 0, _y], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        }\n', '        uint _bal = IERC20(ycrv).balanceOf(address(this));\n', '        if (_bal > 0) {\n', '            yvERC20(yycrv).deposit(_bal);\n', '        }\n', '    }\n', '\n', '    function deposit() public {}\n', '    \n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        require(ycrv != address(_asset), "ycrv");\n', '        require(yycrv != address(_asset), "yycrv");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '    \n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '\n', '        rebalance();\n', '        uint _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '            tank = 0;\n', '        }\n', '        else {\n', '            if (tank >= _amount) tank = tank.sub(_amount);\n', '            else tank = 0;\n', '        }\n', '\n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        uint _fee = _amount.mul(withdrawalFee).div(DENOMINATOR);\n', '        IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\n', '    }\n', '\n', '    function _withdrawSome(uint _amount) internal returns (uint) {\n', '        uint _amnt = _amount.mul(1e18).div(ICurveFi(ypool).get_virtual_price());\n', '        uint _amt = _amnt.mul(1e18).div(yvERC20(yycrv).getPricePerFullShare());\n', '        uint _bal = IERC20(yycrv).balanceOf(address(this));\n', '        if (_amt > _bal) _amt = _bal;\n', '        uint _before = IERC20(ycrv).balanceOf(address(this));\n', '        yvERC20(yycrv).withdraw(_amt);\n', '        uint _after = IERC20(ycrv).balanceOf(address(this));\n', '        return _withdrawOne(_after.sub(_before));\n', '    }\n', '\n', '    function _withdrawOne(uint _amnt) internal returns (uint) {\n', '        uint _aux = _amnt.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR);\n', '        uint _t = IERC20(ycrv).totalSupply();\n', '        ICurveFi(ypool).remove_liquidity(_amnt, [\n', '            ICurveFi(ypool).balances(0).mul(_aux).div(_t), \n', '            ICurveFi(ypool).balances(1).mul(_aux).div(_t), \n', '            ICurveFi(ypool).balances(2).mul(_aux).div(_t), \n', '            ICurveFi(ypool).balances(3).mul(_aux).div(_t)]);\n', '\n', '        uint _ydai = IERC20(ydai).balanceOf(address(this));\n', '        uint _yusdc = IERC20(yusdc).balanceOf(address(this));\n', '        uint _yusdt = IERC20(yusdt).balanceOf(address(this));\n', '    \n', '        uint tmp;\n', '        if (_ydai > 0) {\n', '            tmp = ICurveFi(ypool).get_dy(0, 3, _ydai);\n', '            ICurveFi(ypool).exchange(0, 3, _ydai, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        }\n', '        if (_yusdc > 0) {\n', '            tmp = ICurveFi(ypool).get_dy(1, 3, _yusdc);\n', '            ICurveFi(ypool).exchange(1, 3, _yusdc, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        }\n', '        if (_yusdt > 0) {\n', '            tmp = ICurveFi(ypool).get_dy(2, 3, _yusdt);\n', '            ICurveFi(ypool).exchange(2, 3, _yusdt, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        }\n', '\n', '        uint _before = IERC20(want).balanceOf(address(this));\n', '        yvERC20(ytusd).withdraw(IERC20(ytusd).balanceOf(address(this)));\n', '        uint _after = IERC20(want).balanceOf(address(this));\n', '        \n', '        return _after.sub(_before);\n', '    }\n', '    \n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '        \n', '        balance = IERC20(want).balanceOf(address(this));\n', '        \n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '    \n', '    function _withdrawAll() internal {\n', '        uint _yycrv = IERC20(yycrv).balanceOf(address(this));\n', '        if (_yycrv > 0) {\n', '            yvERC20(yycrv).withdraw(_yycrv);\n', '            _withdrawOne(IERC20(ycrv).balanceOf(address(this)));\n', '        }\n', '    }\n', '    \n', '    function balanceOfWant() public view returns (uint) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '    \n', '    function balanceOfYCRV() public view returns (uint) {\n', '        return IERC20(ycrv).balanceOf(address(this));\n', '    }\n', '    \n', '    function balanceOfYCRVinWant() public view returns (uint) {\n', '        return balanceOfYCRV().mul(ICurveFi(ypool).get_virtual_price()).div(1e18);\n', '    }\n', '\n', '    function balanceOfYYCRV() public view returns (uint) {\n', '        return IERC20(yycrv).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfYYCRVinYCRV() public view returns (uint) {\n', '        return balanceOfYYCRV().mul(yvERC20(yycrv).getPricePerFullShare()).div(1e18);\n', '    }\n', '\n', '    function balanceOfYYCRVinWant() public view returns (uint) {\n', '        return balanceOfYYCRVinYCRV().mul(ICurveFi(ypool).get_virtual_price()).div(1e18);\n', '    }\n', '\n', '    function lick() public view returns (uint l) {\n', '        uint _p = yvERC20(yycrv).getPricePerFullShare();\n', '        _p = _p.mul(ICurveFi(ypool).get_virtual_price()).div(1e18);\n', '        if (_p >= p) {\n', '            l = (_p.sub(p)).mul(balanceOfYYCRV()).div(1e18);\n', '            l = l.mul(treasuryFee.add(strategistReward)).div(DENOMINATOR);\n', '        }\n', '    }\n', '    \n', '    function balanceOf() public view returns (uint) {\n', '        return balanceOfWant().add(balanceOfYYCRVinWant()).sub(lick());\n', '    }\n', '\n', '    function migrate(address _strategy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(Controller(controller).approvedStrategies(want, _strategy), "!stategyAllowed");\n', '        IERC20(yycrv).safeTransfer(_strategy, IERC20(yycrv).balanceOf(address(this)));\n', '        IERC20(ycrv).safeTransfer(_strategy, IERC20(ycrv).balanceOf(address(this)));\n', '        IERC20(want).safeTransfer(_strategy, IERC20(want).balanceOf(address(this)));\n', '    }\n', '\n', '    function forceD(uint _amount) external isAuthorized {\n', '        drip();\n', '        yvERC20(ytusd).deposit(_amount);\n', '\n', '        uint _y = IERC20(ytusd).balanceOf(address(this));\n', '        uint v = _amount.mul(1e18).div(ICurveFi(ypool).get_virtual_price());\n', '        ICurveFi(ypool).add_liquidity([0, 0, 0, _y], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '\n', '        uint _bal = IERC20(ycrv).balanceOf(address(this));\n', '        yvERC20(yycrv).deposit(_bal);\n', '\n', '        if (_amount < tank) tank = tank.sub(_amount);\n', '        else tank = 0;\n', '    }\n', '\n', '    function forceW(uint _amt) external isAuthorized {\n', '        drip();\n', '        uint _before = IERC20(ycrv).balanceOf(address(this));\n', '        yvERC20(yycrv).withdraw(_amt);\n', '        uint _after = IERC20(ycrv).balanceOf(address(this));\n', '        _amt = _after.sub(_before);\n', '        \n', '        _before = IERC20(want).balanceOf(address(this));\n', '        _withdrawOne(_amt);\n', '        _after = IERC20(want).balanceOf(address(this));\n', '        tank = tank.add(_after.sub(_before));\n', '    }\n', '\n', '    function drip() public isAuthorized {\n', '        uint _p = yvERC20(yycrv).getPricePerFullShare();\n', '        _p = _p.mul(ICurveFi(ypool).get_virtual_price()).div(1e18);\n', "        require(_p >= p, 'backward');\n", '        uint _r = (_p.sub(p)).mul(balanceOfYYCRV()).div(1e18);\n', '        uint _s = _r.mul(strategistReward).div(DENOMINATOR);\n', '        IERC20(yycrv).safeTransfer(strategist, _s.mul(1e18).div(_p));\n', '        uint _t = _r.mul(treasuryFee).div(DENOMINATOR);\n', '        IERC20(yycrv).safeTransfer(Controller(controller).rewards(), _t.mul(1e18).div(_p));\n', '        p = _p;\n', '    }\n', '\n', '    function tick() public view returns (uint _t, uint _c) {\n', '        _t = ICurveFi(ypool).balances(3)\n', '                .mul(yvERC20(ytusd).getPricePerFullShare()).div(1e18)\n', '                .mul(threshold).div(DENOMINATOR);\n', '        _c = balanceOfYYCRVinWant();\n', '    }\n', '\n', '    function rebalance() public isAuthorized {\n', '        drip();\n', '        (uint _t, uint _c) = tick();\n', '        if (_c > _t) {\n', '            _withdrawSome(_c.sub(_t));\n', '            tank = IERC20(want).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance || msg.sender == strategist, "!gs");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setKeeper(address _keeper) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!sg");\n', '        keeper = _keeper;\n', '    }\n', '\n', '    function setWithdrawalFee(uint _withdrawalFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setTreasuryFee(uint _treasuryFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        treasuryFee = _treasuryFee;\n', '    }\n', '\n', '    function setStrategistReward(uint _strategistReward) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategistReward = _strategistReward;\n', '    }\n', '\n', '    function setThreshold(uint _threshold) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!sg");\n', '        threshold = _threshold;\n', '    }\n', '\n', '    function setSlip(uint _slip) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!sg");\n', '        slip = _slip;\n', '    }\n', '\n', '    function setMaxAmount(uint _maxAmount) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!sg");\n', '        maxAmount = _maxAmount;\n', '    }\n', '}']