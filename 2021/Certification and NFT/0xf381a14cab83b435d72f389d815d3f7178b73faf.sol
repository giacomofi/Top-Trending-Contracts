['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'import {SimpleInvoice} from "./Invoice.sol";\n', '\n', '/// @title The InvoiceFactory allows withdrawing ERC20 tokens from a temporary Invoice\n', '/// @author davy42\n', '/// @notice The InvoiceFactory can compute the address for deposit and withdraw funds\n', '/// @dev The InvoiceFactory use the bytecode of the Invoice contract with dynamic token and receiver addresses\n', 'contract InvoiceFactory  {\n', '\n', '    bytes constant private invoiceCreationCode = type(SimpleInvoice).creationCode;\n', '\n', '    /// @notice Witdraws erc20 tokens from the deposit wallet and send to the receiver\n', '    /// @param salt The unique salt\n', '    /// @param token The address of the erc20 token which will be withdrawed\n', '    /// @param receiver The address which will get tokens\n', '    /// @return wallet the address of the wallet\n', '    function withdraw(uint256 salt, address token, address receiver) external returns (address wallet) {\n', '        bytes memory bytecode = getByteCode(token, receiver);\n', '        assembly {\n', '            wallet := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n', '        }\n', '        require(wallet != address(0), "Create2: Failed on deploy");\n', '    }\n', '\n', '    /// @notice  Returns the address of the wallet\n', '    /// @dev Compute address for depositing funds using salt, token and receivers\n', '    /// @param salt The unique salt\n', '    /// @param token The address of the erc20 token which will be deposited\n', '    /// @param receiver The address which will get tokens when withdraw\n', '    /// @return wallet the address of the wallet\n', '    function computeAddress(uint256 salt, address token, address receiver) public view returns (address) {\n', '        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(getByteCode(token, receiver))));\n', '        return address(uint160(uint256(_data)));\n', '    }\n', '\n', '    /// @notice Generate the bytecode of wallet contract with token and receiver\n', '    /// @dev Explain to a developer any extra details\n', '    /// @param token The address of the erc20 token which will be deposited\n', '    /// @param receiver The address which will get tokens when withdraw\n', '    /// @return bytecode the bytecode of the wallet contract\n', '    function getByteCode(address token, address receiver) private pure returns (bytes memory bytecode) {\n', '        bytecode = abi.encodePacked(invoiceCreationCode, abi.encode(token, receiver));\n', '    }\n', '}']