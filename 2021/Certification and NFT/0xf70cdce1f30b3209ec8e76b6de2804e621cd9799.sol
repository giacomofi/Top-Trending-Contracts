['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '// File: StakeROTS.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'interface IOracle{\n', '    function getPrice() external view returns(uint256);\n', '}\n', '\n', '\n', 'contract Staketoken is Context,Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '\n', '    \n', '    struct StakeType1{\n', '        uint256 dividentStart;\n', '        uint256 claimedDividents;\n', '    }\n', '    struct StakeType2{\n', '        uint256 dividentStart;\n', '        uint256 claimedDividents;\n', '        bytes32 referredStake;\n', '    }\n', '    struct StakeType3{\n', '        uint256 dividentStart;\n', '        uint256 claimedDividents;\n', '        bytes32 referredStake;\n', '    }\n', '    struct TimeLock{\n', '        uint256 amount;\n', '        uint256 unlockTime;\n', '    }\n', '    struct StakeMeta{\n', '        address initiator;\n', '        uint256 nonce;\n', '        uint256 timestamp;\n', '        uint256 amount;\n', '        bool referral;\n', '        bool extention;\n', '        bool expired;\n', '    }\n', '    struct ReferralTree{\n', '        address r1;\n', '        address r2;\n', '        address r3;\n', '        address r4;\n', '        address r5;\n', '        address r6;\n', '        address r7;\n', '        address r8;\n', '        address r9;\n', '        address r10;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    mapping (bytes32 => StakeMeta) private _stakeHub;\n', '    mapping (bytes32 => StakeType1) private _stake1;\n', '    mapping (bytes32 => StakeType2) private _stake2;\n', '    mapping (bytes32 => StakeType3) private _stake3;\n', '    mapping (bytes32 => TimeLock) private _timeLock;\n', '    mapping (address => uint256) private _nonce;\n', '    mapping (bytes32 => uint256) private _claimedRewards;\n', '    \n', '    \n', '    \n', '    mapping (address => uint256) private EWallet;\n', '    mapping (address => bool) private registered;\n', '    mapping (address => uint256) private _stakeAmount;\n', '    mapping (address => uint256) private _RstakeAmount;\n', '    \n', '    \n', '    mapping (uint256 => uint256) private _dividents;\n', '    mapping (address => bool) private _registered;\n', '    mapping (address => ReferralTree) private _referrals;\n', '    mapping (address => uint256) private _directCount;\n', '    mapping (address => uint256) private _registerTime;\n', '    mapping (address => bool) private _cashback;\n', '    \n', '    \n', '    \n', '    uint256 private Supply;\n', '    address private ROTHS;\n', '    address private admin;\n', '    address private oracle;\n', '    uint256 public lastDivident;\n', '    uint256 private _totalStaked;\n', '    \n', '    function getSupply() public view returns (uint256){\n', '        return Supply;\n', '    }\n', '    function getClaimedRewards(bytes32 stakeid) public view returns (uint256){\n', '        return _claimedRewards[stakeid];\n', '    }\n', '    \n', '    function getStaked() public view returns (uint256) {\n', '        return _totalStaked;\n', '    }\n', '    \n', '     constructor(address token) {\n', '        ROTHS = token;\n', '        Supply = 895 * 1e5 * 1e18;\n', '        admin = msg.sender;\n', '        lastDivident = getDividentId();\n', '    }\n', '    \n', '    \n', '    modifier isRegistered{\n', '        require(getRegistered(_msgSender()), "User not Registered.");\n', '        _updateDivident();\n', '        _;\n', '    }\n', '    \n', '    \n', '    function min(uint256 a,\n', '        uint256 b) internal pure returns (uint256 minN) {\n', '        if (a <= b) minN = a;\n', '        if (b < a) minN = b;\n', '    }\n', '    \n', '    \n', '    function getDividents(uint256 dividentId) public view returns (uint256) {\n', '        require(_dividents[dividentId] != 0, "Divident Id does not exist.");\n', '        return _dividents[dividentId];\n', '    }\n', '    function _updateDivident() public virtual {\n', '        while (getDividentId() > lastDivident) {\n', '            lastDivident++;\n', '            _dividents[lastDivident] = _dividents[lastDivident - 1] + IOracle(oracle).getPrice() * 5 / 1e3;\n', '        }\n', '    }\n', '    function getDividentId() internal view returns(uint256){\n', '        return block.timestamp/60/60/24;\n', '    }\n', '    \n', '    \n', '   \n', '    \n', '    function setOracle(address _oracle) public onlyOwner {\n', '        oracle=_oracle;\n', '    }\n', '    \n', '    \n', '    \n', '    function register(address refree) public virtual {\n', '        register();\n', '        _setRefree(_msgSender(),refree);\n', '    }\n', '    function register() public virtual {\n', '        require(_registered[_msgSender()] == false, "User already registered.");\n', '        IERC20(ROTHS).transferFrom(_msgSender(),admin,getTokens(25*1e18));\n', '        _registerTime[_msgSender()]=block.timestamp;\n', '        _register(_msgSender());\n', '    }\n', '    function getRegistered(address user) public view virtual returns(bool){\n', '        return _registered[user];\n', '    }\n', '    function _register(address user) internal virtual {\n', '        _registered[user]=true;\n', '    }\n', '    \n', '    function getrefree (address user) public view returns(address) {\n', '        return _referrals[user].r1;\n', '        \n', '    }\n', '    function _setRefree(address user,\n', '        address refree) internal virtual {\n', '        _directCount[refree]++;\n', '        _referrals[user].r1=refree;\n', '        _referrals[user].r2=_referrals[refree].r1;\n', '        _referrals[user].r3=_referrals[refree].r2;\n', '        _referrals[user].r4=_referrals[refree].r3;\n', '        _referrals[user].r5=_referrals[refree].r4;\n', '        _referrals[user].r6=_referrals[refree].r5;\n', '        _referrals[user].r7=_referrals[refree].r6;\n', '        _referrals[user].r8=_referrals[refree].r7;\n', '        _referrals[user].r9=_referrals[refree].r8;\n', '        _referrals[user].r10=_referrals[refree].r9;\n', '        if (_directCount[refree]==2){\n', '            createStake(refree, getTokens(50*1e18), false, true);\n', '        }\n', '        if (_directCount[refree] >= 5 && block.timestamp-_registerTime[refree] <= 7 days && _cashback[refree] == false){\n', '            uint256 tokens=getTokens(25*1e18);\n', '            transferToEWallet(refree,tokens);\n', '            _cashback[refree]=true;\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function getTokens(uint256 usdIn) internal view virtual returns (uint256 amount) {\n', '        amount= IOracle(oracle).getPrice() * usdIn / 1e18;\n', '    }\n', '    function getEWalletBalance(address user) public view returns(uint256){\n', '        return EWallet[user];\n', '    }\n', '    function getStakeAmount(address user) public view returns(uint256){\n', '        return _stakeAmount[user];\n', '    }\n', '    function getRStakeAmount(address user) public view returns(uint256){\n', '        return _RstakeAmount[user];\n', '    }\n', '    function getDirectCount(address user) public view returns(uint256){\n', '        return _directCount[user];\n', '    }\n', '    function getRegisterTime(address user) public view returns(uint256){\n', '        return _registerTime[user];\n', '    }\n', '    function getNonce(address user) public view virtual returns (uint256) {\n', '        return _nonce[user]+1;\n', '    }\n', '    function isStakeActive(bytes32 stakeid) public view returns(bool) {\n', '        return !_stakeHub[stakeid].expired;\n', '    }\n', '    \n', '    function getStakeMeta(bytes32 stakeid) public view returns(address initiator,\n', '        uint256 nonce,\n', '        uint256 timestamp,\n', '        uint256 amount,\n', '        bool referral,\n', '        bool extention,\n', '        bool expired) {\n', '            initiator = _stakeHub[stakeid].initiator;\n', '            nonce = _stakeHub[stakeid].nonce;\n', '            timestamp = _stakeHub[stakeid].timestamp;\n', '            amount = _stakeHub[stakeid].amount;\n', '            referral = _stakeHub[stakeid].referral;\n', '            extention = _stakeHub[stakeid].extention;\n', '            expired = _stakeHub[stakeid].expired;\n', '                 \n', '    }\n', '    function getStakeT1(bytes32 stakeid) public view returns(uint256 dividentStart,\n', '        uint256 claimedDividents) {\n', '            dividentStart = _stake1[stakeid].dividentStart;\n', '            claimedDividents = _stake1[stakeid].claimedDividents;\n', '    }\n', '    function getStakeT2(bytes32 stakeid) public view returns(uint256 dividentStart,\n', '        uint256 claimedDividents,\n', '        bytes32 referredStake) {\n', '            dividentStart = _stake2[stakeid].dividentStart;\n', '            claimedDividents = _stake2[stakeid].claimedDividents;\n', '            referredStake = _stake2[stakeid].referredStake;\n', '    }\n', '    function getStakeT3(bytes32 stakeid) public view returns(uint256 dividentStart,\n', '        uint256 claimedDividents,\n', '        bytes32 referredStake) {\n', '            dividentStart = _stake3[stakeid].dividentStart;\n', '            claimedDividents = _stake3[stakeid].claimedDividents;\n', '            referredStake = _stake3[stakeid].referredStake;\n', '    }\n', '    function getTimeLock(bytes32 stakeid) public view returns (uint256 amount, uint256 unlockTime) {\n', '        amount = _timeLock[stakeid].amount;\n', '        unlockTime = _timeLock[stakeid].unlockTime;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function transferToEWallet(address user,\n', '        uint256 amount) internal {\n', '        Supply = Supply.sub(amount);\n', '        EWallet[user] = EWallet[user].add(amount);\n', '    }\n', '    \n', '    function createStake(address user,\n', '        uint256 amount,\n', '        bool referral,\n', '        bool extention) internal virtual returns (bytes32 stakeid) {\n', '        stakeid = createStake(user, amount, referral, extention, bytes32(0));\n', '    }\n', '    function createStake(address user,\n', '        uint256 amount,\n', '        bool referral,\n', '        bool extention,\n', '        bytes32 referredstakeid) internal virtual returns (bytes32 stakeid) {\n', '        stakeid=_createStakeMeta(user, amount, referral, extention);\n', '        if (referral == false && extention == false) {\n', '            _createTimeStake(stakeid, amount, block.timestamp + 300 days);\n', '            _createStakeT1(stakeid);\n', '        } else if (referral == false && extention == true) {\n', '            _createTimeStake(stakeid, amount, block.timestamp + 100 days);\n', '        } else if (referral == true && extention == false) {\n', '            _createStakeT2(stakeid, referredstakeid);\n', '        } else {\n', '            _createTimeStake(stakeid, amount, block.timestamp + 300 days);\n', '            _createStakeT3(stakeid, referredstakeid);\n', '        }\n', '        \n', '    }\n', '    \n', '    function calcStakeHash(address user, uint256 nonce) public pure returns(bytes32){\n', '        return keccak256(abi.encodePacked(user,nonce));\n', '    }\n', '    \n', '    \n', '    function _createStakeMeta(address user,\n', '        uint256 amount,\n', '         bool referral,\n', '        bool extention) internal virtual returns (bytes32 stakeid){\n', '        uint256 nonce = getNonce(user);\n', '        stakeid= keccak256(abi.encodePacked(user,nonce));\n', '        _stakeHub[stakeid].initiator = user;\n', '        _stakeHub[stakeid].amount = amount;\n', '        _stakeHub[stakeid].nonce = nonce;\n', '        _stakeHub[stakeid].timestamp = block.timestamp;\n', '        _stakeHub[stakeid].referral=referral;\n', '        _stakeHub[stakeid].extention=extention;\n', '        _nonce[user]++;\n', '    }\n', '    function _createTimeStake(bytes32 stakeid,\n', '        uint256 amount,\n', '        uint256 UnlockTime) internal virtual {\n', '        _timeLock[stakeid].unlockTime = UnlockTime;\n', '        _timeLock[stakeid].amount = amount;\n', '    }\n', '    function _createStakeT1(bytes32 stakeid) internal virtual {\n', '        _stake1[stakeid].dividentStart = getDividentId();\n', '        _stake1[stakeid].claimedDividents = getDividentId();\n', '        \n', '    }\n', '    function _createStakeT2(bytes32 stakeid,\n', '        bytes32 referredstakeid) internal virtual {\n', '        _stake2[stakeid].dividentStart = getDividentId();\n', '        _stake2[stakeid].claimedDividents = getDividentId();\n', '        _stake2[stakeid].referredStake = referredstakeid;\n', '    }\n', '    function _createStakeT3(bytes32 stakeid,\n', '        bytes32 referredstakeid) internal virtual {\n', '        _stake3[stakeid].dividentStart = getDividentId();\n', '        _stake3[stakeid].claimedDividents = getDividentId();\n', '        _stake3[stakeid].referredStake = referredstakeid;\n', '    }\n', '    function _createReferralStakes(address refree,\n', '        uint256 direct,\n', '        uint256 kickback,\n', '        uint256 amount,\n', '        bytes32 referredstakeid) internal virtual {\n', '        if (_stakeAmount[refree]>=_stakeAmount[_msgSender()] && _directCount[refree] >= direct){\n', '            createStake(refree, amount * kickback / 100, true, false, referredstakeid);\n', '            _RstakeAmount[refree]=_RstakeAmount[refree]+(amount * kickback / 100);\n', '        }\n', '    }\n', '    \n', '    function claimStake(bytes32 stakeid) internal virtual {\n', '        require(_stakeHub[stakeid].expired == false, "Stake has expired.");\n', '        bool referral = _stakeHub[stakeid].referral;\n', '        bool extention = _stakeHub[stakeid].extention;\n', '        if (referral == false && extention == false) {\n', '            _claimStakeT1(stakeid);\n', '            _claimTimeStake(stakeid);\n', '        } else if (referral == false && extention == true) {\n', '            _claimTimeStake(stakeid);\n', '        } else if (referral == true && extention == false) {\n', '            _claimStakeT2(stakeid);\n', '        } else {\n', '            _claimStakeT3(stakeid);\n', '            _claimTimeStake(stakeid);\n', '        }\n', '    }\n', '    function _claimTimeStake(bytes32 stakeid) internal virtual {\n', '        if (_timeLock[stakeid].unlockTime <= block.timestamp){\n', '            transferToEWallet(_stakeHub[stakeid].initiator, _timeLock[stakeid].amount);\n', '            bool referral = _stakeHub[stakeid].referral;\n', '            bool extention = _stakeHub[stakeid].extention;\n', '            if (!(referral == false && extention == true)) {\n', '                _stakeAmount[_msgSender()] = _stakeAmount[_msgSender()] - _stakeHub[stakeid].amount;\n', '                _totalStaked = _totalStaked.sub(_stakeHub[stakeid].amount);\n', '            }\n', '            _stakeHub[stakeid].expired=true;\n', '            \n', '        }\n', '        \n', '    }\n', '    function _claimStakeT1(bytes32 stakeid) internal virtual {\n', '        uint256 payableDividents= min(getDividentId(), _stake1[stakeid].dividentStart+300);\n', '        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake1[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\n', '        _stake1[stakeid].claimedDividents = payableDividents;\n', '        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\n', '        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\n', '    }\n', '    function _claimStakeT2(bytes32 stakeid) internal virtual {\n', '        uint256 payableDividents= min(getDividentId(), _stake2[stakeid].dividentStart+300);\n', '        if (payableDividents == _stake2[stakeid].dividentStart+300){\n', '            _stakeHub[stakeid].expired=true;\n', '            _RstakeAmount[_stakeHub[stakeid].initiator] = _RstakeAmount[_stakeHub[stakeid].initiator] - _stakeHub[stakeid].amount; \n', '        }\n', '        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake2[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\n', '        _stake2[stakeid].claimedDividents = payableDividents;\n', '        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\n', '        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\n', '    }\n', '    function _claimStakeT3(bytes32 stakeid) internal virtual {\n', '        uint256 payableDividents= min(getDividentId(), _stake3[stakeid].dividentStart+300);\n', '        uint256 tokens = (_dividents[payableDividents].sub(_dividents[_stake3[stakeid].claimedDividents])) * _stakeHub[stakeid].amount * 2 /1e18;\n', '        _stake3[stakeid].claimedDividents = payableDividents;\n', '        transferToEWallet(_stakeHub[stakeid].initiator, tokens);\n', '        _claimedRewards[stakeid] = _claimedRewards[stakeid].add(tokens);\n', '    }\n', '    \n', '    \n', '    \n', '    function claimableStake(bytes32 stakeid) public view virtual returns (uint256){\n', '        if (_stakeHub[stakeid].expired) {return 0;}\n', '        bool referral = _stakeHub[stakeid].referral;\n', '        bool extention = _stakeHub[stakeid].extention;\n', '        if (referral == false && extention == false) {\n', '           return  _claimableStakeT1(stakeid);\n', '            \n', '        } else if (referral == true && extention == false) {\n', '         return _claimableStakeT2(stakeid);\n', '        } else if (referral == true && extention == true) {\n', '           return _claimableStakeT3(stakeid);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function _claimableStakeT1(bytes32 stakeid) internal view virtual returns (uint256 tokens){\n', '        uint256 payableDividents= min(getDividentId(), _stake1[stakeid].dividentStart+300);\n', '        tokens = (_dividents[payableDividents].sub(_dividents[_stake1[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\n', '        \n', '    }\n', '    function _claimableStakeT2(bytes32 stakeid) internal view virtual  returns (uint256 tokens) {\n', '        uint256 payableDividents= min(getDividentId(), _stake2[stakeid].dividentStart+300);\n', '       tokens = (_dividents[payableDividents].sub(_dividents[_stake2[stakeid].claimedDividents])) * _stakeHub[stakeid].amount /1e18;\n', '    }\n', '    function _claimableStakeT3(bytes32 stakeid) internal view virtual returns (uint256 tokens) {\n', '        uint256 payableDividents= min(getDividentId(), _stake3[stakeid].dividentStart+300);\n', '        tokens = (_dividents[payableDividents].sub(_dividents[_stake3[stakeid].claimedDividents])) * _stakeHub[stakeid].amount * 2 /1e18;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function stake(uint256 amount,\n', '        bytes32 referredstakeid) public isRegistered {\n', '        require(_msgSender() == _stakeHub[referredstakeid].initiator, "Referred StakeId should belong to you.");\n', '        require(amount >= _stakeHub[referredstakeid].amount, "New stake amount should be higher or euqal to referred stake.");\n', '        require((_stakeHub[referredstakeid].referral==false && _stakeHub[referredstakeid].extention == false), "Referred Stake Id invalid.");\n', '        _claimStakeT1(referredstakeid);\n', '        _stakeHub[referredstakeid].expired=true;\n', '        createStake(_msgSender(), _stakeHub[referredstakeid].amount, true, true, referredstakeid);\n', '        stake(amount);\n', '    }\n', '    function stake(uint256 amount) public isRegistered {\n', '        IERC20(ROTHS).transferFrom(_msgSender(), address(this), amount);\n', '        bytes32 stakeid = createStake(_msgSender(), amount, false, false);\n', '        _stakeAmount[_msgSender()] = _stakeAmount[_msgSender()] + amount;\n', '        _totalStaked = _totalStaked.add(amount);\n', '        address r1= _referrals[_msgSender()].r1;\n', '        address r2= _referrals[_msgSender()].r2;\n', '        address r3= _referrals[_msgSender()].r3;\n', '        address r4= _referrals[_msgSender()].r4;\n', '        address r5= _referrals[_msgSender()].r5;\n', '        address r6= _referrals[_msgSender()].r6;\n', '        address r7= _referrals[_msgSender()].r7;\n', '        address r8= _referrals[_msgSender()].r8;\n', '        address r9= _referrals[_msgSender()].r9;\n', '        address r10= _referrals[_msgSender()].r10;\n', '        \n', '        _createReferralStakes(r1,2,20, amount, stakeid);\n', '        _createReferralStakes(r2,4,10, amount, stakeid);\n', '        _createReferralStakes(r3,6,5, amount, stakeid);\n', '        _createReferralStakes(r4,8,5, amount, stakeid);\n', '        _createReferralStakes(r5,10,4, amount, stakeid);\n', '        _createReferralStakes(r6,12,4, amount, stakeid);\n', '        _createReferralStakes(r7,14,3, amount, stakeid);\n', '        _createReferralStakes(r8,16,3, amount, stakeid);\n', '        _createReferralStakes(r9,18,2, amount, stakeid);\n', '        _createReferralStakes(r10,20,2, amount, stakeid);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function claim(bytes32 stakeid) public isRegistered {\n', '        require(isStakeActive(stakeid), "Stake already finished.");\n', '        require(_stakeHub[stakeid].initiator == _msgSender(), "Stake does not belong to user.");\n', '        claimStake(stakeid);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function withdraw(uint256 amount) public isRegistered {\n', '        require(amount <= EWallet[_msgSender()], "Not enough balance.");\n', '        EWallet[_msgSender()] = EWallet[_msgSender()].sub(amount); \n', '        IERC20(ROTHS).transfer(_msgSender(),amount);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '}']