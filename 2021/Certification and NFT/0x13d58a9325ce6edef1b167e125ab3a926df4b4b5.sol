['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract PredictionMarket {\n', '    \n', '    AggregatorV3Interface internal priceFeed;\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 public latestConditionIndex;\n', '    address payable public owner;\n', '    \n', '    mapping (uint256 => ConditionInfo) public conditions;\n', '    mapping (uint256 => mapping (address => UserInfo)) public users;\n', '    \n', '    struct ConditionInfo\n', '    {\n', '        address oracle;\n', '        int triggerPrice;\n', '        uint256 settlementTime;\n', '        uint256 totalBelowETHStaked;\n', '        uint256 totalAboveETHStaked;\n', '        address[] aboveParticipants;\n', '        address[] belowParticipants;\n', '        bool isSettled;\n', '        int settledPrice;\n', '    }\n', '    \n', '    struct UserInfo\n', '    {\n', '        uint256 belowETHStaked;\n', '        uint256 aboveETHStaked;\n', '    }\n', '    \n', '    event ConditionPrepared(\n', '        uint256 indexed conditionIndex,\n', '        address indexed oracle,\n', '        uint256 indexed settlementTime,\n', '        int triggerPrice\n', '    );\n', '    \n', '    event UserPrediction(\n', '        uint256 indexed conditionIndex,\n', '        address indexed userAddress,\n', '        uint256 indexed ETHStaked,\n', '        uint8 prediction,\n', '        uint256 timestamp\n', '    );\n', '    \n', '    event UserClaimed(\n', '        uint256 indexed conditionIndex,\n', '        address indexed userAddress,\n', '        uint256 indexed winningAmount\n', '    );\n', '    \n', '    event ConditionSettled(\n', '        uint256 indexed conditionIndex,\n', '        int indexed settledPrice,\n', '        uint256 timestamp\n', '    );\n', '    \n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner,"Not Owner");\n', '        _;\n', '    }\n', '    \n', '    constructor(address payable _owner) public {\n', '        owner = _owner;\n', '    }\n', '    \n', '    function prepareCondition(address _oracle,uint256 _settlementTime, int _triggerPrice) external onlyOwner{\n', '        require(_oracle != address(0),"Can\'t be 0 address");\n', '        require(_settlementTime > block.timestamp,"Settlement Time should be greater than Trx Confirmed Time");\n', '        latestConditionIndex = latestConditionIndex.add(1);\n', '        ConditionInfo storage conditionInfo = conditions[latestConditionIndex];\n', '\n', '        conditionInfo.oracle = _oracle;\n', '        conditionInfo.settlementTime = _settlementTime;\n', '        conditionInfo.triggerPrice = _triggerPrice;\n', '        conditionInfo.isSettled = false;\n', '        \n', '        emit ConditionPrepared(latestConditionIndex, _oracle, _settlementTime, _triggerPrice);\n', '    }\n', '    \n', '    function probabilityRatio(uint256 _conditionIndex) external view returns(uint256 aboveProbability,uint256 belowProbability){\n', '        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n', '        \n', '        uint256 ethStakedForAbove = conditionInfo.totalAboveETHStaked;\n', '        uint256 ethStakedForBelow = conditionInfo.totalBelowETHStaked;\n', '        \n', '        uint256 totalETHStaked = ethStakedForAbove.add(ethStakedForBelow);\n', '        \n', '        uint256 aboveProbabilityRatio = totalETHStaked > 0 ? ethStakedForAbove.mul(1e18).div(totalETHStaked) : 0;\n', '        uint256 belowProbabilityRatio = totalETHStaked > 0 ? ethStakedForBelow.mul(1e18).div(totalETHStaked) : 0;\n', '                                                    \n', '        return (aboveProbabilityRatio,belowProbabilityRatio);\n', '    }\n', '    \n', '    function userTotalETHStaked(uint256 _conditionIndex,address userAddress) public view returns(uint256){\n', '        UserInfo storage userInfo = users[_conditionIndex][userAddress];\n', '        return userInfo.aboveETHStaked.add(userInfo.belowETHStaked);\n', '    }\n', '    \n', '    function betOnCondition(uint256 _conditionIndex,uint8 _prediction) public payable{\n', '        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n', '        require(conditionInfo.oracle !=address(0), "Condition doesn\'t exists");\n', '        require(block.timestamp < conditionInfo.settlementTime,"Cannot bet after Settlement Time");\n', '        uint256 userETHStaked = msg.value;\n', '        require(userETHStaked > 0 wei, "Bet cannot be 0");\n', '        require((_prediction == 0)||(_prediction == 1),"Invalid Prediction");   //prediction = 0 (price will be below), if 1 (price will be above)\n', '\n', '        \n', '        address userAddress = msg.sender;\n', '        UserInfo storage userInfo = users[_conditionIndex][userAddress];\n', '        \n', '        if(_prediction == 0) {\n', '            conditionInfo.belowParticipants.push(userAddress);\n', '            conditionInfo.totalBelowETHStaked = conditionInfo.totalBelowETHStaked.add(userETHStaked);\n', '            userInfo.belowETHStaked = userInfo.belowETHStaked.add(userETHStaked);\n', '        }\n', '        else{\n', '            conditionInfo.aboveParticipants.push(userAddress);\n', '            conditionInfo.totalAboveETHStaked = conditionInfo.totalAboveETHStaked.add(userETHStaked);\n', '            userInfo.aboveETHStaked = userInfo.aboveETHStaked.add(userETHStaked);\n', '        }\n', '        emit UserPrediction(_conditionIndex,userAddress,userETHStaked,_prediction,block.timestamp);\n', '    }\n', '    \n', '    function settleCondition(uint256 _conditionIndex) public {\n', '        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n', '        require(conditionInfo.oracle !=address(0), "Condition doesn\'t exists");\n', '        require(block.timestamp >= conditionInfo.settlementTime,"Not before Settlement Time");\n', '        require(!conditionInfo.isSettled,"Condition settled already");\n', '        \n', '        conditionInfo.isSettled = true;\n', '        priceFeed = AggregatorV3Interface(conditionInfo.oracle);\n', '        (,int latestPrice,,,) = priceFeed.latestRoundData();\n', '        conditionInfo.settledPrice = latestPrice;\n', '        emit ConditionSettled(_conditionIndex,latestPrice,block.timestamp);\n', '    }\n', '    \n', '    function claim(uint256 _conditionIndex) public{\n', '        ConditionInfo storage conditionInfo = conditions[_conditionIndex];\n', '        address payable userAddress = msg.sender;\n', '        UserInfo storage userInfo = users[_conditionIndex][userAddress];\n', '\n', '        require(userTotalETHStaked(_conditionIndex,userAddress) > 0, "Nothing To Claim");\n', '        \n', '        if(!conditionInfo.isSettled){\n', '            settleCondition(_conditionIndex);\n', '        }\n', '        uint256 totalPayout;    //Payout to be distributed among winners(total eth staked by loosing side)\n', '        uint256 winnersTotalETHStaked;   //total eth staked by the winning side\n', '        uint256 userProportion; //User Stake Proportion among the total ETH Staked by winners\n', '        uint256 winnerPayout;\n', '        uint256 winnerRedeemable;   //User can redeem 90% of there total winnerPayout \n', '        uint256 platformFees;      // remaining 10% will be treated as platformFees  \n', '        uint256 totalWinnerRedeemable; //Amount Redeemable including winnerRedeemable & user initial Stake\n', '        \n', '        if(conditionInfo.settledPrice >= conditionInfo.triggerPrice){    //Users who predicted above price wins \n', '            totalPayout = conditionInfo.totalBelowETHStaked;\n', '            winnersTotalETHStaked = conditionInfo.totalAboveETHStaked;\n', '            userProportion = userInfo.aboveETHStaked.mul(1e18).div(winnersTotalETHStaked);\n', '            winnerPayout = totalPayout.mul(userProportion).div(1e18);\n', '            winnerRedeemable = (winnerPayout.div(1000)).mul(900);    \n', '            platformFees = (winnerPayout.div(1000)).mul(100);         \n', '            owner.transfer(platformFees);\n', '            totalWinnerRedeemable = winnerRedeemable.add(userInfo.aboveETHStaked);\n', '            userAddress.transfer(totalWinnerRedeemable);\n', '        }\n', '        \n', '        else if(conditionInfo.settledPrice < conditionInfo.triggerPrice){      //Users who predicted below price wins\n', '            totalPayout = conditionInfo.totalAboveETHStaked;\n', '            winnersTotalETHStaked = conditionInfo.totalBelowETHStaked;\n', '            userProportion = userInfo.belowETHStaked.mul(1e18).div(winnersTotalETHStaked);\n', '            winnerPayout = totalPayout.mul(userProportion).div(1e18);\n', '            winnerRedeemable = (winnerPayout.div(1000)).mul(900);     \n', '            platformFees = (winnerPayout.div(1000)).mul(100);        \n', '            owner.transfer(platformFees);\n', '            totalWinnerRedeemable = winnerRedeemable.add(userInfo.belowETHStaked);\n', '            userAddress.transfer(totalWinnerRedeemable);\n', '        }\n', '        emit UserClaimed(_conditionIndex,userAddress,winnerPayout);\n', '    }\n', '}']