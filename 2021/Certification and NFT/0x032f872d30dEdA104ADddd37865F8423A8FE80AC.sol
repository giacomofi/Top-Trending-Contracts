['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./ERC20/IERC20.sol";\n', 'import "./interfaces/IOracle.sol";\n', 'import "./utils/Ownable.sol";\n', '\n', 'contract TokenCall is Ownable {\n', '    struct TokenData {\n', '        string name;\n', '        string symbol;\n', '        uint8 decimals;\n', '        uint256 totalSupply;\n', '        uint256 price;\n', '        uint256 balance;\n', '    }\n', '\n', '    IOracle public oracle;\n', '\n', '    constructor (IOracle _oracle) {\n', '        oracle = _oracle;\n', '    }\n', '\n', '    function getToken(IERC20 _asset, address _account) public view returns (TokenData memory) {\n', '        string memory _name = _asset.name();\n', '        string memory _symbol = _asset.symbol();\n', '        uint8 _decimals = _asset.decimals();\n', '        uint256 _totalSupply = _asset.totalSupply();\n', '        uint256 _balance = _asset.balanceOf(_account);\n', '        uint256 _price = oracle.getPriceUSD(address(_asset));\n', '        return TokenData({\n', '            name: _name,\n', '            symbol: _symbol,\n', '            decimals: _decimals,\n', '            totalSupply: _totalSupply,\n', '            price: _price,\n', '            balance: _balance\n', '        });\n', '    }\n', '\n', '    function getTokens(IERC20[] calldata _assets, address _account) external view returns (TokenData[] memory data) {\n', '        data = new TokenData[](_assets.length);\n', '        for (uint256 i = 0; i < _assets.length; i++) {\n', '            data[i] = getToken(_assets[i], _account);\n', '        }\n', '    }\n', '\n', '    function setOracle(IOracle _oracle) external onlyOwner {\n', '        oracle = _oracle;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IOracle {\n', '    function getPriceUSD(address _asset) external view returns (uint256 price);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']