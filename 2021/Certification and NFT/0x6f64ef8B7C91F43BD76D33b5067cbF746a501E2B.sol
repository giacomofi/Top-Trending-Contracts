['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', '// File: contracts\\interfaces\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\compound\\interfaces\\ICEther.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'interface ICEther {\n', '    function mint() external payable;\n', '    function repayBorrow() external payable;\n', '}\n', '\n', '// File: contracts\\compound\\interfaces\\ICToken.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'interface ICToken {\n', '    function borrowIndex() view external returns (uint256);\n', '\n', '    function mint(uint256 mintAmount) external returns (uint256);\n', '\n', '    function mint() external payable;\n', '\n', '    function redeem(uint256 redeemTokens) external returns (uint256);\n', '\n', '    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n', '\n', '    function borrow(uint256 borrowAmount) external returns (uint256);\n', '\n', '    function repayBorrow(uint256 repayAmount) external returns (uint256);\n', '\n', '    function repayBorrow() external payable;\n', '\n', '    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n', '\n', '    function repayBorrowBehalf(address borrower) external payable;\n', '\n', '    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n', '        external\n', '        returns (uint256);\n', '\n', '    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n', '\n', '    function exchangeRateCurrent() external returns (uint256);\n', '\n', '    function supplyRatePerBlock() external returns (uint256);\n', '\n', '    function borrowRatePerBlock() external returns (uint256);\n', '\n', '    function totalReserves() external returns (uint256);\n', '\n', '    function reserveFactorMantissa() external returns (uint256);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint256);\n', '\n', '    function borrowBalanceStored(address account) external view returns (uint256);\n', '\n', '    function totalBorrowsCurrent() external returns (uint256);\n', '\n', '    function getCash() external returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '\n', '    function balanceOf(address owner) view external returns (uint256);\n', '\n', '    function underlying() external returns (address);\n', '}\n', '\n', '// File: contracts\\interfaces\\IToken.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'interface IToken {\n', '    function decimals() external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint value) external;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function deposit() external payable;\n', '    function withdraw(uint amount) external;\n', '}\n', '\n', '// File: contracts\\compound\\interfaces\\IComptroller.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'contract IComptroller {\n', '    mapping(address => uint) public compAccrued;\n', '\n', '    function claimComp(address holder, address[] memory cTokens) public;\n', '\n', '    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n', '\n', '    function exitMarket(address cToken) external returns (uint256);\n', '\n', '    function getAssetsIn(address account) external view returns (address[] memory);\n', '\n', '    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n', '\n', '    function markets(address cTokenAddress) external view returns (bool, uint);\n', '\n', '    struct CompMarketState {\n', "        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n", '        uint224 index;\n', '\n', '        /// @notice The block number the index was last updated at\n', '        uint32 block;\n', '    }\n', '\n', '    function compSupplyState(address) view public returns(uint224, uint32);\n', '\n', '    function compBorrowState(address) view public returns(uint224, uint32);\n', '\n', '//    mapping(address => CompMarketState) public compBorrowState;\n', '\n', '    mapping(address => mapping(address => uint)) public compSupplierIndex;\n', '\n', '    mapping(address => mapping(address => uint)) public compBorrowerIndex;\n', '}\n', '\n', '// File: contracts\\utils\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\utils\\Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts\\utils\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol";\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IToken token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IToken token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IToken token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\utils\\UniversalERC20.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '// import "./SafeMath.sol";\n', '\n', '\n', '\n', 'library UniversalERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IToken;\n', '\n', '    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\n', '    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount) internal {\n', '        universalTransfer(token, to, amount, false);\n', '    }\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            if (mayFail) {\n', '                return address(uint160(to)).send(amount);\n', '            } else {\n', '                address(uint160(to)).transfer(amount);\n', '                return true;\n', '            }\n', '        } else {\n', '            token.safeTransfer(to, amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function universalApprove(IToken token, address to, uint256 amount) internal {\n', '        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n', '            token.safeApprove(to, amount);\n', '        }\n', '    }\n', '\n', '    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            require(from == msg.sender && msg.value >= amount, "msg.value is zero");\n', '            if (to != address(this)) {\n', '                address(uint160(to)).transfer(amount);\n', '            }\n', '            if (msg.value > amount) {\n', '                msg.sender.transfer(uint256(msg.value).sub(amount));\n', '            }\n', '        } else {\n', '            token.safeTransferFrom(from, to, amount);\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\constants\\ConstantDfWalletMainnet.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'contract ConstantDfWallet {\n', '\n', '    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '    address public constant COMP_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n', '\n', '    address public constant FINANCE_CONTROLLER = address(0x41711B6aD1E44Dc3648c068e1D61D16F79D3815b);\n', '}\n', '\n', '// File: contracts\\deposits\\DfWalletDeposits.sol\n', '\n', 'pragma solidity ^0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// **INTERFACES**\n', '\n', '\n', "// DfWallet - logic of user's wallet for cTokens\n", 'contract InDefiWallet is ConstantDfWallet {\n', '    using UniversalERC20 for IToken;\n', '\n', '    // **MODIFIERS**\n', '\n', '    modifier authCheck {\n', '        require(msg.sender == FINANCE_CONTROLLER, "Permission denied");\n', '        _;\n', '    }\n', '\n', '\n', '    // **PUBLIC SET function**\n', '    function claimComp(address[] memory cTokens) public authCheck {\n', '        IComptroller(COMPTROLLER).claimComp(address(this), cTokens);\n', '        IERC20(COMP_ADDRESS).transfer(msg.sender, IERC20(COMP_ADDRESS).balanceOf(address(this)));\n', '    }\n', '\n', '    // **PUBLIC PAYABLE functions**\n', '\n', '    // Example: _collToken = Eth, _borrowToken = USDC\n', '    function deposit(\n', '        address _collToken, address _cCollToken, uint _collAmount, address _borrowToken, address _cBorrowToken, uint _borrowAmount\n', '    ) public payable authCheck {\n', '        // add _cCollToken to market\n', '        enterMarketInternal(_cCollToken);\n', '\n', '        // mint _cCollToken\n', '        mintInternal(_collToken, _cCollToken, _collAmount);\n', '\n', '        // borrow and withdraw _borrowToken\n', '        if (_borrowToken != address(0)) {\n', '            borrowInternal(_borrowToken, _cBorrowToken, _borrowAmount);\n', '        }\n', '    }\n', '\n', '    function withdrawToken(address _tokenAddr, address to, uint256 amount) public authCheck {\n', '        require(to != address(0));\n', '        IToken(_tokenAddr).universalTransfer(to, amount);\n', '    }\n', '\n', '    // Example: _collToken = Eth, _borrowToken = USDC\n', '    function withdraw(\n', '        address _collToken, address _cCollToken, uint256 cAmountRedeem, address _borrowToken, address _cBorrowToken, uint256 amountRepay\n', '    ) public payable authCheck returns (uint256) {\n', '        // repayBorrow _cBorrowToken\n', '        paybackInternal(_borrowToken, _cBorrowToken, amountRepay);\n', '\n', '        // redeem _cCollToken\n', '        return redeemInternal(_collToken, _cCollToken, cAmountRedeem);\n', '    }\n', '\n', '    function enterMarket(address _cTokenAddr) public authCheck {\n', '        address[] memory markets = new address[](1);\n', '        markets[0] = _cTokenAddr;\n', '\n', '        IComptroller(COMPTROLLER).enterMarkets(markets);\n', '    }\n', '\n', '    function borrow(address _cTokenAddr, uint _amount) public authCheck {\n', '        require(ICToken(_cTokenAddr).borrow(_amount) == 0);\n', '    }\n', '\n', '    // вывод\n', '    function redeem(address _tokenAddr, address _cTokenAddr, uint256 amount) public authCheck {\n', '        if (amount == uint256(-1)) amount = IERC20(_cTokenAddr).balanceOf(address(this));\n', '        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n', '        require(ICToken(_cTokenAddr).redeem(amount) == 0);\n', '    }\n', '\n', '    function payback(address _tokenAddr, address _cTokenAddr, uint256 amount) public payable authCheck {\n', '        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n', '\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            if (amount == uint256(-1)) amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n', '\n', '            IERC20(_tokenAddr).transferFrom(msg.sender, address(this), amount);\n', '            require(ICToken(_cTokenAddr).repayBorrow(amount) == 0);\n', '        } else {\n', '            ICEther(_cTokenAddr).repayBorrow.value(msg.value)();\n', '        }\n', '    }\n', '\n', '    function mint(address _tokenAddr, address _cTokenAddr, uint _amount) public payable authCheck {\n', '        // approve _cTokenAddr to pull the _tokenAddr tokens\n', '        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n', '\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            require(ICToken(_cTokenAddr).mint(_amount) == 0);\n', '        } else {\n', '            ICEther(_cTokenAddr).mint.value(msg.value)(); // reverts on fail\n', '        }\n', '    }\n', '\n', '    // **INTERNAL functions**\n', '    function approveCTokenInternal(address _tokenAddr, address _cTokenAddr) internal {\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            if (IERC20(_tokenAddr).allowance(address(this), address(_cTokenAddr)) != uint256(-1)) {\n', '                IERC20(_tokenAddr).approve(_cTokenAddr, uint(-1));\n', '            }\n', '        }\n', '    }\n', '\n', '    function enterMarketInternal(address _cTokenAddr) internal {\n', '        address[] memory markets = new address[](1);\n', '        markets[0] = _cTokenAddr;\n', '\n', '        IComptroller(COMPTROLLER).enterMarkets(markets);\n', '    }\n', '\n', '    function mintInternal(address _tokenAddr, address _cTokenAddr, uint _amount) internal {\n', '        // approve _cTokenAddr to pull the _tokenAddr tokens\n', '        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n', '\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            require(ICToken(_cTokenAddr).mint(_amount) == 0);\n', '        } else {\n', '            ICEther(_cTokenAddr).mint.value(msg.value)(); // reverts on fail\n', '        }\n', '    }\n', '\n', '    function borrowInternal(address _tokenAddr, address _cTokenAddr, uint _amount) internal {\n', '        require(ICToken(_cTokenAddr).borrow(_amount) == 0);\n', '    }\n', '\n', '    function paybackInternal(address _tokenAddr, address _cTokenAddr, uint256 amount) internal {\n', '        // approve _cTokenAddr to pull the _tokenAddr tokens\n', '        approveCTokenInternal(_tokenAddr, _cTokenAddr);\n', '\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            if (amount == uint256(-1)) amount = ICToken(_cTokenAddr).borrowBalanceCurrent(address(this));\n', '\n', '            IERC20(_tokenAddr).transferFrom(msg.sender, address(this), amount);\n', '            require(ICToken(_cTokenAddr).repayBorrow(amount) == 0);\n', '        } else {\n', '            ICEther(_cTokenAddr).repayBorrow.value(msg.value)();\n', '            if (address(this).balance > 0) {\n', '                transferEthInternal(msg.sender, address(this).balance);  // send back the extra eth\n', '            }\n', '        }\n', '    }\n', '\n', '    function redeemInternal(address _tokenAddr, address _cTokenAddr, uint256 amount) internal returns (uint256 tokensSent){\n', '        // converts all _cTokenAddr into the underlying asset (_tokenAddr)\n', '        if (amount == uint256(-1)) amount = IERC20(_cTokenAddr).balanceOf(address(this));\n', '        require(ICToken(_cTokenAddr).redeem(amount) == 0);\n', '\n', '        // withdraw funds to msg.sender\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            tokensSent = IERC20(_tokenAddr).balanceOf(address(this));\n', '            IToken(_tokenAddr).universalTransfer(msg.sender, tokensSent);\n', '        } else {\n', '            tokensSent = address(this).balance;\n', '            transferEthInternal(msg.sender, tokensSent);\n', '        }\n', '    }\n', '\n', '\n', '    // in case of changes in Compound protocol\n', '    function externalCallEth(address payable[] memory  _to, bytes[] memory _data, uint256[] memory ethAmount) public authCheck payable {\n', '\n', '        for(uint16 i = 0; i < _to.length; i++) {\n', '            cast(_to[i], _data[i], ethAmount[i]);\n', '        }\n', '\n', '    }\n', '\n', '    function cast(address payable _to, bytes memory _data, uint256 ethAmount) internal {\n', '        bytes32 response;\n', '\n', '        assembly {\n', '            let succeeded := call(sub(gas, 5000), _to, ethAmount, add(_data, 0x20), mload(_data), 0, 32)\n', '            response := mload(0)\n', '            switch iszero(succeeded)\n', '            case 1 {\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferEthInternal(address _receiver, uint _amount) internal {\n', '        address payable receiverPayable = address(uint160(_receiver));\n', '        (bool result, ) = receiverPayable.call.value(_amount)("");\n', '        require(result, "Transfer of ETH failed");\n', '    }\n', '\n', '\n', '    // **FALLBACK functions**\n', '    function() external payable {}\n', '\n', '}']