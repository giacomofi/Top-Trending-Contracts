['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-09\n', '*/\n', '\n', '// File: contracts/updater/interfaces/IFreeFromUpTo.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', '// File: contracts/updater/BurnChi.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract BurnChi {\n', '    IFreeFromUpTo private constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    modifier discountCHI(bool _useChi) {\n', '        if(_useChi) {\n', '            uint256 gasStart = gasleft();\n', '            _;\n', '            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/updater/interfaces/ITokenManager.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface ITokenManager {\n', '  function updateRewardParams(address payable userAddr) external returns (bool);\n', '}\n', '\n', '// File: contracts/updater/interfaces/IObserver.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IObserver {\n', '  function updateChainMarketInfo(uint256 _idx, uint256 chainDeposit, uint256 chainBorrow) external returns (bool);\n', '}\n', '\n', '// File: contracts/updater/Updater.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract Updater is BurnChi {\n', '  address public owner;\n', '\n', '  ITokenManager public manager;\n', '  IObserver public observer;\n', '\n', '  modifier onlyOwner {\n', '\t\trequire(msg.sender == owner, "onlyOwner");\n', '\t\t_;\n', '\t}\n', '\n', '  constructor(address managerAddress, address observerAddress) public {\n', '    owner = msg.sender;\n', '\n', '    manager = ITokenManager(managerAddress);\n', '    observer = IObserver(observerAddress);\n', '  }\n', '\n', '  function setManager(address managerAddress) public onlyOwner returns (bool) {\n', '    manager = ITokenManager(managerAddress);\n', '    return true;\n', '  }\n', '\n', '  function setObserver(address observerAddress) public onlyOwner returns (bool) {\n', '    observer = IObserver(observerAddress);\n', '    return true;\n', '  }\n', '\n', '  function syncReward(address payable rewerder, uint256 _idx, uint256 chainDeposit, uint256 chainBorrow, bool _useChi) external onlyOwner discountCHI(_useChi) returns (bool) {\n', '    _updateChainMarketInfo(_idx, chainDeposit, chainBorrow);\n', '    _updateRewardParams(rewerder);\n', '    return true;\n', '  }\n', '\n', '  function updateRewardParams(address payable rewerder, bool _useChi) external onlyOwner discountCHI(_useChi) returns (bool) {\n', '    return _updateRewardParams(rewerder);\n', '  }\n', '\n', '  function _updateRewardParams(address payable rewerder) internal returns (bool) {\n', '    return manager.updateRewardParams(rewerder);\n', '  }\n', '\n', '  function updateChainMarketInfo(uint256 _idx, uint256 chainDeposit, uint256 chainBorrow, bool _useChi) external onlyOwner discountCHI(_useChi) returns (bool) {\n', '    return _updateChainMarketInfo(_idx, chainDeposit, chainBorrow);\n', '  }\n', '\n', '  function _updateChainMarketInfo(uint256 _idx, uint256 chainDeposit, uint256 chainBorrow) internal returns (bool) {\n', '    return observer.updateChainMarketInfo(_idx, chainDeposit, chainBorrow);\n', '  }\n', '}']