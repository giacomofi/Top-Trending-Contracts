['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IPOWToken {\n', '    function updateIncomeRate() external;\n', '    function incomeToken() external view returns(uint256);\n', '    function incomeRate() external view returns(uint256);\n', '    function startMiningTime() external view returns (uint256);\n', '    function mint(address to, uint value) external;\n', '    function mintToStake(address to, uint value, uint256 startUnlockTime, uint256 endUnlockTime) external;\n', '    function weiToIncomeValue(uint256 amount) external view returns (uint256);\n', '    function remainingAmount() external view returns(uint256);\n', '    function rewardToken() external view returns(uint256);\n', '    function stakingRewardRate() external view returns(uint256);\n', '    function lpStakingRewardRate() external view returns(uint256);\n', '    function rewardPeriodFinish() external view returns(uint256);\n', '    function claimIncome(address to, uint256 amount) external;\n', '    function claimReward(address to, uint256 amount) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', 'interface IMiningParam {\n', '    function incomeAssetPrice() external view returns (uint256);\n', '    function incomePerSecInWei() external view returns(uint256);\n', '    function updateAssetPrice() external;\n', '}\n', '\n', 'contract ETHParamV2 is IMiningParam{\n', '    using SafeMath for uint256;\n', '\n', '    bool internal initialized;\n', '    address public owner;\n', '    address public paramSetter;\n', '\n', '    uint256 public incomePerSecInWei;\n', '\n', '    address public uniPairAddress;\n', '    bool public usePrice0;\n', '    uint32 public lastPriceUpdateTime;\n', '    uint256 public lastCumulativePrice;\n', '    uint256 public lastAveragePrice;\n', '\n', '    address[] public paramListeners;\n', '\n', '    function initialize(address newOwner, address _paramSetter, uint256 _incomePerSecInWei, address _uniPairAddress, bool _usePrice0) public {\n', '        require(!initialized, "already initialized");\n', '        require(newOwner != address(0), "new owner is the zero address");\n', '        initialized = true;\n', '        owner = newOwner;\n', '        paramSetter= _paramSetter;\n', '        incomePerSecInWei = _incomePerSecInWei;\n', '\n', '        uniPairAddress = _uniPairAddress;\n', '        usePrice0 = _usePrice0;\n', '        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 currentBlockTimestamp) =\n', '        UniswapV2OracleLibrary.currentCumulativePrices(_uniPairAddress);\n', '\n', '        lastPriceUpdateTime = currentBlockTimestamp;\n', '        lastCumulativePrice = _usePrice0?price0Cumulative:price1Cumulative;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0), "new owner is the zero address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setParamSetter(address _paramSetter) external onlyOwner {\n', '        require(_paramSetter != address(0), "param setter is the zero address");\n', '        emit ParamSetterChanged(paramSetter, _paramSetter);\n', '        paramSetter = _paramSetter;\n', '    }\n', '\n', '    function updateAssetPrice() external onlyParamSetter {\n', '        _updatePrice();\n', '        notifyListeners();\n', '    }\n', '\n', '    function _updatePrice() internal {\n', '        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 currentBlockTimestamp) =\n', '        UniswapV2OracleLibrary.currentCumulativePrices(uniPairAddress);\n', '        uint256 currentPrice = usePrice0?price0Cumulative:price1Cumulative;\n', '\n', '        uint256 timeElapsed = currentBlockTimestamp - lastPriceUpdateTime; // overflow is desired\n', '        if (timeElapsed > 0) {\n', '            lastAveragePrice = currentPrice.sub(lastCumulativePrice).div(timeElapsed);\n', '            lastPriceUpdateTime = currentBlockTimestamp;\n', '            lastCumulativePrice = currentPrice;\n', '        }\n', '    }\n', '\n', '    function setIncomePerSecInWei(uint256 _incomePerSecInWei) external onlyParamSetter {\n', '        _setIncomePerSecInWei(_incomePerSecInWei);\n', '        notifyListeners();\n', '    }\n', '\n', '    function setIncomePerSecInWeiAndUpdatePrice(uint256 _incomePerSecInWei) external onlyParamSetter{\n', '        _setIncomePerSecInWei(_incomePerSecInWei);\n', '        _updatePrice();\n', '        notifyListeners();\n', '    }\n', '\n', '    function _setIncomePerSecInWei(uint256 _incomePerSecInWei) internal {\n', '        incomePerSecInWei = _incomePerSecInWei;\n', '    }\n', '\n', '    function addListener(address _listener) external onlyParamSetter {\n', '        for (uint i=0; i<paramListeners.length; i++){\n', '            address listener = paramListeners[i];\n', "            require(listener != _listener, 'listener already added.');\n", '        }\n', '        paramListeners.push(_listener);\n', '    }\n', '\n', '    function removeListener(address _listener) external onlyParamSetter returns(bool ){\n', '        for (uint i=0; i<paramListeners.length; i++){\n', '            address listener = paramListeners[i];\n', '            if (listener == _listener) {\n', '                delete paramListeners[i];\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function notifyListeners() internal {\n', '        for (uint i=0; i<paramListeners.length; i++){\n', '            address listener = paramListeners[i];\n', '            if (listener != address(0)) {\n', '                IPOWToken(listener).updateIncomeRate();\n', '            }\n', '        }\n', '    }\n', '\n', '    function incomeAssetPrice() external view returns (uint256) {\n', '        return lastAveragePrice.mul(10**12).div(2**112);\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "!owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyParamSetter() {\n', '        require(msg.sender == paramSetter, "!paramSetter");\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event ParamSetterChanged(address indexed previousSetter, address indexed newSetter);\n', '}']