['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', 'interface IPair is IERC20 {\n', '    function token0() external view returns (IERC20);\n', '    function token1() external view returns (IERC20);\n', '}\n', '\n', 'interface IFactory {\n', '    function allPairsLength() external view returns (uint256);\n', '    function allPairs(uint256 i) external view returns (IPair);\n', '    function getPair(IERC20 token0, IERC20 token1) external view returns (IPair);\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '}\n', 'contract BoringHelper {\n', '    struct Pair {\n', '        IPair token;\n', '        IERC20 token0;\n', '        IERC20 token1;\n', '        uint256 totalSupply;\n', '    }\n', '\n', '    function getPairs(\n', '        IFactory factory,\n', '        uint256 fromID,\n', '        uint256 toID\n', '    ) public view returns (Pair[] memory) {\n', '        Pair[] memory pairs = new Pair[](toID - fromID);\n', '\n', '        for (uint256 id = fromID; id < toID; id++) {\n', '            IPair token = factory.allPairs(id);\n', '            uint256 i = id - fromID;\n', '            pairs[i].token = token;\n', '            pairs[i].token0 = token.token0();\n', '            pairs[i].token1 = token.token1();\n', '            pairs[i].totalSupply = token.totalSupply();\n', '        }\n', '        return pairs;\n', '    }\n', '}']