['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(\n', '            initializing || isConstructor() || !initialized,\n', '            "Contract instance has already been initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {}\n', '\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Burn(\n', '        address indexed sender,\n', '        uint256 amount0,\n', '        uint256 amount1,\n', '        address indexed to\n', '    );\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function burn(address to)\n', '        external\n', '        returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        address pair,\n', '        uint256\n', '    );\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setMigrator(address) external;\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IWETH.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function approve(address guy, uint256 wad) external returns (bool);\n', '\n', '    function balanceOf(address addr) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/ITROP.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IBaseToken {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    event Log(string log);\n', '}\n', '\n', 'interface ITROP is IBaseToken {\n', '    function taxer() external view returns (address);\n', '\n', '    function rewardDistributor() external view returns (address);\n', '}\n', '\n', '// File: contracts/ITaxer.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ITaxer {\n', '    function check(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function setFeeMultiplier(uint256 _feeMultiplier) external;\n', '\n', '    function feePercentX100() external view returns (uint256);\n', '\n', '    function setTokenUniswapPair(address _tokenUniswapPair) external;\n', '\n', '    function setPISTokenAddress(address _pisTokenAddress) external;\n', '\n', '    function updateTxState() external;\n', '\n', '    function calculateAmountsAfterFee(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '        external\n', '        returns (uint256 transferToAmount, uint256 transferToFeeBearerAmount);\n', '\n', '    function setPaused() external;\n', '}\n', '\n', '// File: @nomiclabs/buidler/console.sol\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'library console {\n', '    address constant CONSOLE_ADDRESS = address(\n', '        0x000000000000000000636F6e736F6c652e6c6f67\n', '    );\n', '\n', '    function _sendLogPayload(bytes memory payload) private view {\n', '        uint256 payloadLength = payload.length;\n', '        address consoleAddress = CONSOLE_ADDRESS;\n', '        assembly {\n', '            let payloadStart := add(payload, 32)\n', '            let r := staticcall(\n', '                gas(),\n', '                consoleAddress,\n', '                payloadStart,\n', '                payloadLength,\n', '                0,\n', '                0\n', '            )\n', '        }\n', '    }\n', '\n', '    function log() internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log()"));\n', '    }\n', '\n', '    function logInt(int256 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '    }\n', '\n', '    function logUint(uint256 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '    }\n', '\n', '    function logString(string memory p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '    }\n', '\n', '    function logBool(bool p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '    }\n', '\n', '    function logAddress(address p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '    }\n', '\n', '    function logBytes(bytes memory p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '    }\n', '\n', '    function logByte(bytes1 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(byte)", p0));\n', '    }\n', '\n', '    function logBytes1(bytes1 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '    }\n', '\n', '    function logBytes2(bytes2 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '    }\n', '\n', '    function logBytes3(bytes3 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '    }\n', '\n', '    function logBytes4(bytes4 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '    }\n', '\n', '    function logBytes5(bytes5 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '    }\n', '\n', '    function logBytes6(bytes6 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '    }\n', '\n', '    function logBytes7(bytes7 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '    }\n', '\n', '    function logBytes8(bytes8 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '    }\n', '\n', '    function logBytes9(bytes9 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '    }\n', '\n', '    function logBytes10(bytes10 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '    }\n', '\n', '    function logBytes11(bytes11 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '    }\n', '\n', '    function logBytes12(bytes12 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '    }\n', '\n', '    function logBytes13(bytes13 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '    }\n', '\n', '    function logBytes14(bytes14 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '    }\n', '\n', '    function logBytes15(bytes15 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '    }\n', '\n', '    function logBytes16(bytes16 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '    }\n', '\n', '    function logBytes17(bytes17 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '    }\n', '\n', '    function logBytes18(bytes18 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '    }\n', '\n', '    function logBytes19(bytes19 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '    }\n', '\n', '    function logBytes20(bytes20 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '    }\n', '\n', '    function logBytes21(bytes21 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '    }\n', '\n', '    function logBytes22(bytes22 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '    }\n', '\n', '    function logBytes23(bytes23 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '    }\n', '\n', '    function logBytes24(bytes24 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '    }\n', '\n', '    function logBytes25(bytes25 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '    }\n', '\n', '    function logBytes26(bytes26 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '    }\n', '\n', '    function logBytes27(bytes27 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '    }\n', '\n', '    function logBytes28(bytes28 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '    }\n', '\n', '    function logBytes29(bytes29 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '    }\n', '\n', '    function logBytes30(bytes30 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '    }\n', '\n', '    function logBytes31(bytes31 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '    }\n', '\n', '    function logBytes32(bytes32 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '    }\n', '\n', '    function log(uint256 p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '    }\n', '\n', '    function log(string memory p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '    }\n', '\n', '    function log(bool p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '    }\n', '\n', '    function log(address p0) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '    }\n', '\n', '    function log(uint256 p0, uint256 p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '    }\n', '\n', '    function log(uint256 p0, string memory p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '    }\n', '\n', '    function log(uint256 p0, bool p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '    }\n', '\n', '    function log(uint256 p0, address p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '    }\n', '\n', '    function log(string memory p0, uint256 p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '    }\n', '\n', '    function log(string memory p0, string memory p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '    }\n', '\n', '    function log(string memory p0, bool p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '    }\n', '\n', '    function log(string memory p0, address p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '    }\n', '\n', '    function log(bool p0, uint256 p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '    }\n', '\n', '    function log(bool p0, string memory p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '    }\n', '\n', '    function log(bool p0, bool p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '    }\n', '\n', '    function log(bool p0, address p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '    }\n', '\n', '    function log(address p0, uint256 p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '    }\n', '\n', '    function log(address p0, string memory p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '    }\n', '\n', '    function log(address p0, bool p1) internal view {\n', '        _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '    }\n', '\n', '    function log(address p0, address p1) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,address)", p0, p1)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,string,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,string,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,address,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(string,address,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,string,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,string,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,address,string)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(address,address,address)", p0, p1, p2)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,uint,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,string,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,bool,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(uint,address,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,uint,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,string,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,bool,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(string,address,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,uint,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,string,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3)\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,bool,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(bool,address,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,uint,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,string,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,bool,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,uint,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,uint,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,uint,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,uint,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,string,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,string,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,string,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,string,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,bool,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,bool,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,bool,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,bool,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,address,uint)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,address,string)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,address,bool)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', '                "log(address,address,address,address)",\n', '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/uniswapv2/libraries/SafeMath.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', '// File: contracts/uniswapv2/libraries/UniswapV2Library.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\n', '            IUniswapV2Factory(factory).getPair(tokenA, tokenB)\n', '        )\n', '            .getReserves();\n', '        (reserveA, reserveB) = tokenA == token0\n', '            ? (reserve0, reserve1)\n', '            : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");\n', '        require(\n', '            reserveA > 0 && reserveB > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n', '                factory,\n', '                path[i],\n', '                path[i + 1]\n', '            );\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(\n', '                factory,\n', '                path[i - 1],\n', '                path[i]\n', '            );\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/FarmerHelper.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IVault {\n', '    function depositFor(\n', '        address _depositFor,\n', '        uint256 _pid,\n', '        uint256 _amount,\n', '        uint256 _lockTime\n', '    ) external;\n', '}\n', '\n', 'contract FarmHelper is OwnableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    IVault public _tropVault;\n', '    IWETH public _WETH;\n', '    IUniswapV2Factory public _uniV2Factory;\n', '    IUniswapV2Router02 public _uniV2Router;\n', '\n', '    function initialize(address _vault) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        _uniV2Factory = IUniswapV2Factory(\n', '            0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\n', '        );\n', '        _uniV2Router = IUniswapV2Router02(\n', '            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n', '        );\n', '        _WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '        _tropVault = IVault(_vault);\n', '    }\n', '\n', '    fallback() external payable {\n', '        if (msg.sender != address(_WETH)) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function buyTokenWithWeth(uint256 _wethAmount, address _token) internal {\n', '        address pair = _uniV2Factory.getPair(address(_WETH), _token);\n', '        buyTokenWithWethPair(_wethAmount, _token, IUniswapV2Pair(pair));\n', '    }\n', '\n', '    function buyTokenWithWethPair(\n', '        uint256 _wethAmount,\n', '        address _token,\n', '        IUniswapV2Pair _pair\n', '    ) internal {\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(_WETH);\n', '        path[1] = _token;\n', '        _WETH.approve(address(_uniV2Router), _wethAmount);\n', '        _uniV2Router.swapExactTokensForTokens(\n', '            _wethAmount,\n', '            0,\n', '            path,\n', '            address(this),\n', '            block.timestamp + 100\n', '        );\n', '    }\n', '\n', '    function addLiquidityByTokenForPool(\n', '        uint256 pid,\n', '        address token0,\n', '        address token1,\n', '        uint256 lockedTime,\n', '        address payable to,\n', '        bool autoStake\n', '    ) public payable {\n', '        uint256 buyAmount = msg.value.div(2);\n', '        require(buyAmount > 0, "Insufficient ETH amount");\n', '        _WETH.deposit{value: msg.value}();\n', '\n', '        if (token0 == address(_WETH)) {\n', '            buyTokenWithWeth(buyAmount, token1);\n', '        } else if (token1 == address(_WETH)) {\n', '            buyTokenWithWeth(buyAmount, token0);\n', '        } else {\n', '            buyTokenWithWeth(buyAmount, token0);\n', '            buyTokenWithWeth(buyAmount, token1);\n', '        }\n', '\n', '        addLiquidity(token0, token1);\n', '\n', '        IERC20 lp = IERC20(_uniV2Factory.getPair(token0, token1));\n', '        uint256 balLP = lp.balanceOf(address(this));\n', '        if (autoStake) {\n', '            lp.safeApprove(address(_tropVault), balLP);\n', '            _tropVault.depositFor(to, pid, balLP, lockedTime);\n', '        } else {\n', '            lp.safeTransfer(to, balLP);\n', '        }\n', '\n', '        IERC20(token0).transfer(to, IERC20(token0).balanceOf(address(this)));\n', '        IERC20(token1).transfer(to, IERC20(token1).balanceOf(address(this)));\n', '    }\n', '\n', '    function addLiquidity(address token0, address token1) internal {\n', '        uint256 token0Balance = IERC20(token0).balanceOf(address(this));\n', '\n', '        uint256 token1Balance = IERC20(token1).balanceOf(address(this));\n', '\n', '        IERC20(token0).safeApprove(address(_uniV2Router), token0Balance);\n', '        IERC20(token1).safeApprove(address(_uniV2Router), token1Balance);\n', '\n', '        _uniV2Router.addLiquidity(\n', '            token0,\n', '            token1,\n', '            token0Balance,\n', '            token1Balance,\n', '            0,\n', '            0,\n', '            address(this),\n', '            block.timestamp + 100\n', '        );\n', '    }\n', '}']