['pragma solidity 0.5.10;\n', '\n', "import './LibInteger.sol';\n", "import './LibBlob.sol';\n", '\n', '/**\n', ' * @title BlobStorage \n', ' * @dev Store core details about the blobs permanently\n', ' */\n', 'contract BlobStorage\n', '{\n', '    using LibInteger for uint;\n', '\n', '    /**\n', '     * @dev The admin of the contract\n', '     */\n', '    address payable private _admin;\n', '\n', '    /**\n', '     * @dev Permitted addresses to carry out storage functions\n', '     */\n', '    mapping (address => bool) private _permissions;\n', '\n', '    /**\n', '     * @dev Names of tokens\n', '     */\n', '    mapping (uint => uint) private _names;\n', '\n', '    /**\n', '     * @dev Listing prices of tokens\n', '     */\n', '    mapping (uint => uint) private _listings;\n', '\n', '    /**\n', '     * @dev Original minters of tokens\n', '     */\n', '    mapping (uint => address payable) private _minters;\n', '\n', '    /**\n', '     * @dev Names currently reserved\n', '     */\n', '    mapping (uint => bool) private _reservations;\n', '\n', '    /**\n', '     * @dev The metadata of blobs\n', '     */\n', '    mapping (uint => uint[]) private _metadata;\n', '\n', '    /**\n', '     * @dev Initialise the contract\n', '     */\n', '    constructor() public\n', '    {\n', '        //The contract creator becomes the admin\n', '        _admin = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow access only for the admin of contract\n', '     */\n', '    modifier onlyAdmin()\n', '    {\n', '        require(msg.sender == _admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow access only for the permitted addresses\n', '     */\n', '    modifier onlyPermitted()\n', '    {\n', '        require(_permissions[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Give or revoke permission of accounts\n', '     * @param account The address to change permission\n', '     * @param permission True if the permission should be granted, false if it should be revoked\n', '     */\n', '    function permit(address account, bool permission) public onlyAdmin\n', '    {\n', '        _permissions[account] = permission;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw from the balance of this contract\n', '     * @param amount The amount to be withdrawn, if zero is provided the whole balance will be withdrawn\n', '     */\n', '    function clean(uint amount) public onlyAdmin\n', '    {\n', '        if (amount == 0){\n', '            _admin.transfer(address(this).balance);\n', '        } else {\n', '            _admin.transfer(amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Set the name of token\n', '     * @param id The id of token\n', '     * @param value The value to be set\n', '     */\n', '    function setName(uint id, uint value) public onlyPermitted\n', '    {\n', '        _names[id] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the listing price of token\n', '     * @param id The id of token\n', '     * @param value The value to be set\n', '     */\n', '    function setListing(uint id, uint value) public onlyPermitted\n', '    {\n', '        _listings[id] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the original minter of token\n', '     * @param id The id of token\n', '     * @param value The value to be set\n', '     */\n', '    function setMinter(uint id, address payable value) public onlyPermitted\n', '    {\n', '        _minters[id] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Set whether the name is reserved\n', '     * @param name The name\n', '     * @param value True if the name is reserved, otherwise false\n', '     */\n', '    function setReservation(uint name, bool value) public onlyPermitted\n', '    {\n', '        _reservations[name] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new version of metadata to the token\n', '     * @param id The token id\n', '     * @param value The value to be set\n', '     */\n', '    function incrementMetadata(uint id, uint value) public onlyPermitted\n', '    {\n', '        _metadata[id].push(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove the latest version of metadata from token\n', '     * @param id The token id\n', '     */\n', '    function decrementMetadata(uint id) public onlyPermitted\n', '    {\n', '        _metadata[id].length = _metadata[id].length.sub(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Get name of token\n', '     * @param id The id of token\n', '     * @return string The name\n', '     */\n', '    function getName(uint id) public view returns (uint)\n', '    {\n', '        return _names[id];\n', '    }\n', '\n', '    /**\n', '     * @dev Get listing price of token\n', '     * @param id The id of token\n', '     * @return uint The listing price\n', '     */\n', '    function getListing(uint id) public view returns (uint)\n', '    {\n', '        return _listings[id];\n', '    }\n', '\n', '    /**\n', '     * @dev Get original minter of token\n', '     * @param id The id of token\n', '     * @return uint The original minter\n', '     */\n', '    function getMinter(uint id) public view returns (address payable)\n', '    {\n', '        return _minters[id];\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether the provided name is reserved\n', '     * @param name The name to check\n', '     * @return bool True if the name is reserved, otherwise false\n', '     */\n', '    function isReserved(uint name) public view returns (bool)\n', '    {\n', '        return _reservations[name];\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether the provided address is permitted\n', '     * @param account The address to check\n', '     * @return bool True if the address is permitted, otherwise false\n', '     */\n', '    function isPermitted(address account) public view returns (bool)\n', '    {\n', '        return _permissions[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Get latest version of metadata of token\n', '     * @param id The id of token\n', '     * @return uint The metadata value\n', '     */\n', '    function getLatestMetadata(uint id) public view returns (uint)\n', '    {\n', '        if (_metadata[id].length > 0) {\n', '            return _metadata[id][_metadata[id].length.sub(1)];\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get previous version of metadata of token\n', '     * @param id The id of token\n', '     * @return uint The metadata value\n', '     */\n', '    function getPreviousMetadata(uint id) public view returns (uint)\n', '    {\n', '        if (_metadata[id].length > 1) {\n', '            return _metadata[id][_metadata[id].length.sub(2)];\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '}']