['// SPDX-License-Identifier: BUSL-1.1\n', 'pragma solidity 0.7.6;\n', '\n', 'contract PendleGovernanceManager {\n', '    address public governance;\n', '    address public pendingGovernance;\n', '\n', '    event GovernanceClaimed(address newGovernance, address previousGovernance);\n', '\n', '    event TransferGovernancePending(address pendingGovernance);\n', '\n', '    constructor(address _governance) {\n', '        require(_governance != address(0), "ZERO_ADDRESS");\n', '        governance = _governance;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance, "ONLY_GOVERNANCE");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingGovernance address to finalize the change governance process.\n', '     */\n', '    function claimGovernance() external {\n', '        require(pendingGovernance == msg.sender, "WRONG_GOVERNANCE");\n', '        emit GovernanceClaimed(pendingGovernance, governance);\n', '        governance = pendingGovernance;\n', '        pendingGovernance = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governance to set the pendingGovernance address.\n', '     * @param _governance The address to transfer ownership to.\n', '     */\n', '    function transferGovernance(address _governance) external onlyGovernance {\n', '        require(_governance != address(0), "ZERO_ADDRESS");\n', '        pendingGovernance = _governance;\n', '\n', '        emit TransferGovernancePending(pendingGovernance);\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']