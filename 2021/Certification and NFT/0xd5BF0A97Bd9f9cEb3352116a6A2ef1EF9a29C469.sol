['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', "import {Ownable} from './Ownable.sol';\n", "import {IERC20} from './IERC20.sol';\n", '\n', "import {IPriceOracleGetter} from './IPriceOracleGetter.sol';\n", "import {IChainlinkAggregator} from './IChainlinkAggregator.sol';\n", "import {SafeERC20} from './SafeERC20.sol';\n", '\n', '/// @title LeverOracle\n', '/// @author Lever\n', '/// @notice Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator\n', '///         smart contracts as primary option\n', '/// - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle\n', '/// - Owned by the Lever governance system, allowed to add sources for assets, replace them\n', '///   and change the fallbackOracle\n', 'contract LeverOracle is IPriceOracleGetter, Ownable {\n', '  using SafeERC20 for IERC20;\n', '\n', '  event WethSet(address indexed weth);\n', '  event AssetSourceUpdated(address indexed asset, address indexed source);\n', '  event FallbackOracleUpdated(address indexed fallbackOracle);\n', '\n', '  mapping(address => IChainlinkAggregator) private assetsSources;\n', '  IPriceOracleGetter private _fallbackOracle;\n', '  address public immutable WETH;\n', '\n', '  /// @notice Constructor\n', '  /// @param assets The addresses of the assets\n', '  /// @param sources The address of the source of each asset\n', '  /// @param fallbackOracle The address of the fallback oracle to use if the data of an\n', '  ///        aggregator is not consistent\n', '  constructor(\n', '    address[] memory assets,\n', '    address[] memory sources,\n', '    address fallbackOracle,\n', '    address weth\n', '  ) public {\n', '    _setFallbackOracle(fallbackOracle);\n', '    _setAssetsSources(assets, sources);\n', '    WETH = weth;\n', '    emit WethSet(weth);\n', '  }\n', '\n', '  /// @notice External function called by the Lever governance to set or replace sources of assets\n', '  /// @param assets The addresses of the assets\n', '  /// @param sources The address of the source of each asset\n', '  function setAssetSources(address[] calldata assets, address[] calldata sources)\n', '    external\n', '    onlyOwner\n', '  {\n', '    _setAssetsSources(assets, sources);\n', '  }\n', '\n', '  /// @notice Sets the fallbackOracle\n', '  /// - Callable only by the Lever governance\n', '  /// @param fallbackOracle The address of the fallbackOracle\n', '  function setFallbackOracle(address fallbackOracle) external onlyOwner {\n', '    _setFallbackOracle(fallbackOracle);\n', '  }\n', '\n', '  /// @notice Internal function to set the sources for each asset\n', '  /// @param assets The addresses of the assets\n', '  /// @param sources The address of the source of each asset\n', '  function _setAssetsSources(address[] memory assets, address[] memory sources) internal {\n', "    require(assets.length == sources.length, 'INCONSISTENT_PARAMS_LENGTH');\n", '    for (uint256 i = 0; i < assets.length; i++) {\n', '      assetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\n', '      emit AssetSourceUpdated(assets[i], sources[i]);\n', '    }\n', '  }\n', '\n', '  /// @notice Internal function to set the fallbackOracle\n', '  /// @param fallbackOracle The address of the fallbackOracle\n', '  function _setFallbackOracle(address fallbackOracle) internal {\n', '    _fallbackOracle = IPriceOracleGetter(fallbackOracle);\n', '    emit FallbackOracleUpdated(fallbackOracle);\n', '  }\n', '\n', '  /// @notice Gets an asset price by address\n', '  /// @param asset The asset address\n', '  function getAssetPrice(address asset) public view override returns (uint256) {\n', '    IChainlinkAggregator source = assetsSources[asset];\n', '\n', '    if (asset == WETH) {\n', '      return 1 ether;\n', '    } else if (address(source) == address(0)) {\n', '      return _fallbackOracle.getAssetPrice(asset);\n', '    } else {\n', '      int256 price = IChainlinkAggregator(source).latestAnswer();\n', '      if (price > 0) {\n', '        return uint256(price);\n', '      } else {\n', '        return _fallbackOracle.getAssetPrice(asset);\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @notice Gets a list of prices from a list of assets addresses\n', '  /// @param assets The list of assets addresses\n', '  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory) {\n', '    uint256[] memory prices = new uint256[](assets.length);\n', '    for (uint256 i = 0; i < assets.length; i++) {\n', '      prices[i] = getAssetPrice(assets[i]);\n', '    }\n', '    return prices;\n', '  }\n', '\n', '  /// @notice Gets the address of the source for an asset address\n', '  /// @param asset The address of the asset\n', '  /// @return address The address of the source\n', '  function getSourceOfAsset(address asset) external view returns (address) {\n', '    return address(assetsSources[asset]);\n', '  }\n', '\n', '  /// @notice Gets the address of the fallback oracle\n', '  /// @return address The addres of the fallback oracle\n', '  function getFallbackOracle() external view returns (address) {\n', '    return address(_fallbackOracle);\n', '  }\n', '}']