['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.8.2;\n', '\n', '\n', 'interface ILendingPoolAddressesProviderV2 {\n', '\n', '    /**\n', '     * @notice Get the current address for Aave LendingPool\n', '     * @dev Lending pool is the core contract on which to call deposit\n', '     */\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', 'interface IAaveATokenV2 {\n', '\n', '    /**\n', '     * @notice returns the current total aToken balance of _user all interest collected included.\n', '     * To obtain the user asset principal balance with interests excluded , ERC20 non-standard\n', '     * method principalBalanceOf() can be used.\n', '     */\n', '    function balanceOf(address _user) external view returns(uint256);\n', '}\n', '\n', 'interface IAaveLendingPoolV2 {\n', '\n', '    /**\n', '    * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\n', '    * is minted.\n', '    * @param reserve the address of the reserve\n', '    * @param amount the amount to be deposited\n', '    * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\n', '    **/\n', '    function deposit(\n', '        address reserve,\n', '        uint256 amount,\n', '        address onBehalfOf,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '    * @dev withdraws the assets of user.\n', '    * @param reserve the address of the reserve\n', '    * @param amount the underlying amount to be redeemed\n', '    * @param to address that will receive the underlying\n', '    **/\n', '    function withdraw(\n', '        address reserve,\n', '        uint256 amount,\n', '        address to\n', '    ) external;\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferReturnBalance(\n', '        address _sender,\n', '        address _recipient,\n', '        address _bAsset,\n', '        uint256 _qty\n', '    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\n', '        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\n', '        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\n', '        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\n', '        receivedQty = recipientBalance - balBefore;\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender) internal {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\n', '    }\n', '}\n', '\n', 'interface IPlatformIntegration {\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool isTokenFeeCharged\n', '    ) external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from the cache\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ModuleKeys {\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE =\n', '        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING =\n', '        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN =\n', '        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB =\n', '        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER =\n', '        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER =\n', '        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN =\n', '        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER =\n', '        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR =\n', '        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '    // keccak256("InterestValidator");\n', '    bytes32 internal constant KEY_INTEREST_VALIDATOR =\n', '        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '\n', '    function cancelProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '\n', '    function cancelLockModule(bytes32 _key) external;\n', '\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'abstract contract ImmutableModule is ModuleKeys {\n', '    INexus public immutable nexus;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        _onlyGovernor();\n', '        _;\n', '    }\n', '\n', '    function _onlyGovernor() internal view {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'abstract contract AbstractIntegration is\n', '    IPlatformIntegration,\n', '    Initializable,\n', '    ImmutableModule,\n', '    ReentrancyGuard\n', '{\n', '    event PTokenAdded(address indexed _bAsset, address _pToken);\n', '\n', '    event Deposit(address indexed _bAsset, address _pToken, uint256 _amount);\n', '    event Withdrawal(address indexed _bAsset, address _pToken, uint256 _amount);\n', '    event PlatformWithdrawal(address indexed bAsset, address pToken, uint256 totalAmount, uint256 userAmount);\n', '\n', '    // LP has write access\n', '    address public immutable lpAddress;\n', '\n', '    // bAsset => pToken (Platform Specific Token Address)\n', '    mapping(address => address) public override bAssetToPToken;\n', '    // Full list of all bAssets supported here\n', '    address[] internal bAssetsMapped;\n', '\n', '    /**\n', '     * @param _nexus     Address of the Nexus\n', '     * @param _lp        Address of LP\n', '     */\n', '    constructor(\n', '        address _nexus,\n', '        address _lp\n', '    ) ReentrancyGuard() ImmutableModule(_nexus)  {\n', '        require(_lp != address(0), "Invalid LP address");\n', '        lpAddress = _lp;\n', '    }\n', '\n', '    /**\n', '     * @dev Simple initializer to set first bAsset/pTokens\n', '     */\n', '    function initialize(\n', '        address[] calldata _bAssets,\n', '        address[] calldata _pTokens\n', '    ) public initializer {\n', '        uint256 len = _bAssets.length;\n', '        require(len == _pTokens.length, "Invalid inputs");\n', '        for(uint256 i = 0; i < len; i++){\n', '            _setPTokenAddress(_bAssets[i], _pTokens[i]);\n', '        }  \n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyLP() {\n', '        require(msg.sender == lpAddress, "Only the LP can execute");\n', '        _;\n', '    }\n', '\n', '\n', '    /***************************************\n', '                    CONFIG\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * This method can only be called by the system Governor\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function setPTokenAddress(address _bAsset, address _pToken)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        _setPTokenAddress(_bAsset, _pToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * Add to internal mappings and execute the platform specific,\n', '     * abstract method `_abstractSetPToken`\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function _setPTokenAddress(address _bAsset, address _pToken)\n', '        internal\n', '    {\n', '        require(bAssetToPToken[_bAsset] == address(0), "pToken already set");\n', '        require(_bAsset != address(0) && _pToken != address(0), "Invalid addresses");\n', '\n', '        bAssetToPToken[_bAsset] = _pToken;\n', '        bAssetsMapped.push(_bAsset);\n', '\n', '        emit PTokenAdded(_bAsset, _pToken);\n', '\n', '        _abstractSetPToken(_bAsset, _pToken);\n', '    }\n', '\n', '    function _abstractSetPToken(address _bAsset, address _pToken) internal virtual;\n', '\n', '    /**\n', '     * @dev Simple helper func to get the min of two values\n', '     */\n', '    function _min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '}\n', '\n', '\n', '// External\n', '// Libs\n', '/**\n', ' * @title   AaveV2Integration\n', ' * @author  Stability Labs Pty. Ltd.\n', ' * @notice  A simple connection to deposit and withdraw bAssets from Aave\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2020-16-11\n', ' */\n', 'contract AaveV2Integration is AbstractIntegration {\n', '\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Core address for the given platform */\n', '    address public immutable platformAddress;\n', '\n', '    event RewardTokenApproved(address rewardToken, address account);\n', '\n', '    /**\n', '     * @param _nexus            Address of the Nexus\n', '     * @param _lp               Address of LP\n', '     * @param _platformAddress  Generic platform address\n', '     */\n', '    constructor(\n', '        address _nexus,\n', '        address _lp,\n', '        address _platformAddress\n', '    ) AbstractIntegration(_nexus, _lp) {\n', '        require(_platformAddress != address(0), "Invalid platform address");\n', '        platformAddress = _platformAddress;\n', '    }\n', '\n', '    /***************************************\n', '                    ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Approves Liquidator to spend reward tokens\n', '     */\n', '    function approveRewardToken()\n', '        external\n', '        onlyGovernor\n', '    {\n', '        address liquidator = nexus.getModule(keccak256("Liquidator"));\n', '        require(liquidator != address(0), "Liquidator address cannot be zero");\n', '\n', '        // Official checksummed AAVE token address\n', '        // https://ethplorer.io/address/0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\n', '        address aaveToken = address(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\n', '\n', '        MassetHelpers.safeInfiniteApprove(aaveToken, liquidator);\n', '\n', '        emit RewardTokenApproved(address(aaveToken), liquidator);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                    CORE\n', '    ****************************************/\n', '\n', '\n', '    /**\n', '     * @dev Deposit a quantity of bAsset into the platform. Credited aTokens\n', '     *      remain here in the vault. Can only be called by whitelisted addresses\n', '     *      (mAsset and corresponding BasketManager)\n', '     * @param _bAsset              Address for the bAsset\n', '     * @param _amount              Units of bAsset to deposit\n', '     * @param _hasTxFee            Is the bAsset known to have a tx fee?\n', '     * @return quantityDeposited   Quantity of bAsset that entered the platform\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    )\n', '        external\n', '        override\n', '        onlyLP\n', '        nonReentrant\n', '        returns (uint256 quantityDeposited)\n', '    {\n', '        require(_amount > 0, "Must deposit something");\n', '\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '\n', '        quantityDeposited = _amount;\n', '\n', '        if(_hasTxFee) {\n', '            // If we charge a fee, account for it\n', '            uint256 prevBal = _checkBalance(aToken);\n', '            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\n', '            uint256 newBal = _checkBalance(aToken);\n', '            quantityDeposited = _min(quantityDeposited, newBal - prevBal);\n', '        } else {\n', '            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\n', '        }\n', '\n', '        emit Deposit(_bAsset, address(aToken), quantityDeposited);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the platform\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to withdraw\n', '     * @param _hasTxFee     Is the bAsset known to have a tx fee?\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    )\n', '        external\n', '        override\n', '        onlyLP\n', '        nonReentrant\n', '    {\n', '        _withdraw(_receiver, _bAsset, _amount, _amount, _hasTxFee);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the platform\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to send to recipient\n', '     * @param _totalAmount  Total units to pull from lending platform\n', '     * @param _hasTxFee     Is the bAsset known to have a tx fee?\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    )\n', '        external\n', '        override\n', '        onlyLP\n', '        nonReentrant\n', '    {\n', '        _withdraw(_receiver, _bAsset, _amount, _totalAmount, _hasTxFee);\n', '    }\n', '\n', '    /** @dev Withdraws _totalAmount from the lending pool, sending _amount to user */\n', '    function _withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    )\n', '        internal\n', '    {\n', '        require(_totalAmount > 0, "Must withdraw something");\n', '\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '\n', '        if(_hasTxFee) {\n', '            require(_amount == _totalAmount, "Cache inactive for assets with fee");\n', '            _getLendingPool().withdraw(_bAsset, _amount, _receiver);\n', '        } else {\n', '            _getLendingPool().withdraw(_bAsset, _totalAmount, address(this));\n', '            // Send redeemed bAsset to the receiver\n', '            IERC20(_bAsset).safeTransfer(_receiver, _amount);\n', '        }\n', '\n', '        emit PlatformWithdrawal(_bAsset, address(aToken), _totalAmount, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the cache.\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to withdraw\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    )\n', '        external\n', '        override\n', '        onlyLP\n', '        nonReentrant\n', '    {\n', '        require(_amount > 0, "Must withdraw something");\n', '        require(_receiver != address(0), "Must specify recipient");\n', '\n', '        IERC20(_bAsset).safeTransfer(_receiver, _amount);\n', '\n', '        emit Withdrawal(_bAsset, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     *      This includes any interest that was generated since depositing\n', '     *      Aave gradually increases the balances of all aToken holders, as the interest grows\n', '     * @param _bAsset     Address of the bAsset\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function checkBalance(address _bAsset)\n', '        external\n', '        override\n', '        returns (uint256 balance)\n', '    {\n', '        // balance is always with token aToken decimals\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '        return _checkBalance(aToken);\n', '    }\n', '\n', '    /***************************************\n', '                    APPROVALS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Internal method to respond to the addition of new bAsset / pTokens\n', '     *      We need to approve the Aave lending pool core conrtact and give it permission\n', '     *      to spend the bAsset\n', '     * @param _bAsset Address of the bAsset to approve\n', '     */\n', '    function _abstractSetPToken(address _bAsset, address /*_pToken*/)\n', '        internal\n', '        override\n', '    {\n', '        address lendingPool = address(_getLendingPool());\n', '        // approve the pool to spend the bAsset\n', '        MassetHelpers.safeInfiniteApprove(_bAsset, lendingPool);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Get the current address of the Aave lending pool, which is the gateway to\n', '     *      depositing.\n', '     * @return Current lending pool implementation\n', '     */\n', '    function _getLendingPool()\n', '        internal\n', '        view\n', '        returns (IAaveLendingPoolV2)\n', '    {\n', '        address lendingPool = ILendingPoolAddressesProviderV2(platformAddress).getLendingPool();\n', '        require(lendingPool != address(0), "Lending pool does not exist");\n', '        return IAaveLendingPoolV2(lendingPool);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Get the pToken wrapped in the IAaveAToken interface for this bAsset, to use\n', "     *      for withdrawing or balance checking. Fails if the pToken doesn't exist in our mappings.\n", '     * @param _bAsset  Address of the bAsset\n', '     * @return aToken  Corresponding to this bAsset\n', '     */\n', '    function _getATokenFor(address _bAsset)\n', '        internal\n', '        view\n', '        returns (IAaveATokenV2)\n', '    {\n', '        address aToken = bAssetToPToken[_bAsset];\n', '        require(aToken != address(0), "aToken does not exist");\n', '        return IAaveATokenV2(aToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     * @param _aToken     aToken for which to check balance\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function _checkBalance(IAaveATokenV2 _aToken)\n', '        internal\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        return _aToken.balanceOf(address(this));\n', '    }\n', '}']