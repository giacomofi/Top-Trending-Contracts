['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', '// contracts/CollectionItem.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Eterneum is Ownable {\n', '    /**\n', '    *   @dev Contract Properties\n', '    */\n', '    string private _name;   // Token name\n', '    string private _symbol; // Token symbol\n', '    uint private _price;    // Token Payable price\n', '    uint256[] private _allTokens;    // Array with all token ids, used for enumeration\n', '    mapping (uint256 => address) private _owners;       // Mapping from token ID to owner address\n', '    mapping (uint256 => string) private _tokenCIDs;     // Mapping from token ID to CID\n', '\n', '     /**\n', '     * @dev Initializes the contract properties by setting a `name`,  a `symbol` and a price to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_, uint price_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _price = price_;\n', '    }\n', '\n', '    /**\n', '     * @dev Return contract properties\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '     function price() public view virtual returns (uint) {\n', '        return _price;\n', '    }\n', '\n', '    /*\n', '    *   @dev Change price\n', '    */\n', '    function changePrice(uint price_) public onlyOwner {\n', '        _price = price_;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize event and method for payable contract\n', '     */\n', '    event Received(address, uint);\n', '    receive() external payable {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    *   @dev Tranfert amount from the contract\n', '    */\n', '    function withdraw(uint amount) public onlyOwner() {\n', '        address payable owner_pay = payable(owner());\n', '        owner_pay.transfer(amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "Owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens start existing when they are minted (`mint`),\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    /**\n', '    *   @dev mint the tokenID\n', '    */\n', '    function mint(address to, uint256 tokenId, string memory tokenCid) external payable {\n', '        require(to != address(0), "Mint to the zero address");\n', '        require(!_exists(tokenId), "Token already minted");\n', '        require(bytes(tokenCid).length > 0, "CID is empty");\n', '\n', '        /* if not owner of contract, pay the price */\n', '        if (owner() != _msgSender()) {\n', '            require(msg.value == _price, "Value sent not match contract Price");\n', '            address payable owner_pay = payable(owner());\n', '            owner_pay.transfer(msg.value);\n', '        }\n', '\n', '        _owners[tokenId] = to;\n', '        _tokenCIDs[tokenId] = tokenCid;\n', '        _allTokens.push(tokenId);\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '    *   @dev change the tokenCid - only contract Owner\n', '    */\n', '    function cid(uint256 tokenId, string memory tokenCid) public onlyOwner {\n', '        require(_exists(tokenId), "Token not already minted");\n', '        require(bytes(tokenCid).length > 0, "CID is empty");\n', '        _tokenCIDs[tokenId] = tokenCid;\n', '    }\n', '\n', '\n', '     /**\n', '     * @dev Total number of tokens.\n', '     */\n', '    function totalSupply() public view virtual returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Return the tokenID associated with the index.\n', '     */\n', '    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n', '        require(index < totalSupply(), "Global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Return the CID associated with the tokenID.\n', '     */\n', '    function tokenCID(uint256 tokenId) public view virtual returns (string memory) {\n', '        require(_exists(tokenId), "CID query for nonexistent token");\n', '        return _tokenCIDs[tokenId];\n', '    }\n', '   \n', '}']