['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Snapshot.sol";\n', 'import "./AccessControl.sol";\n', 'import "./draft-ERC20Permit.sol";\n', '\n', 'contract IAGON is ERC20, ERC20Burnable, ERC20Snapshot, AccessControl, ERC20Permit {\n', '    bytes32 public constant SNAPSHOT_ROLE = keccak256("SNAPSHOT_ROLE");\n', '\n', '    constructor() ERC20("IAGON", "IAG") ERC20Permit("IAGON") {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '        _setupRole(SNAPSHOT_ROLE, msg.sender);\n', '        _mint(msg.sender, 1000000000 * 10 ** decimals());\n', '    }\n', '\n', '    function snapshot() public {\n', '        require(hasRole(SNAPSHOT_ROLE, msg.sender));\n', '        _snapshot();\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount)\n', '        internal\n', '        override(ERC20, ERC20Snapshot)\n', '    {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']