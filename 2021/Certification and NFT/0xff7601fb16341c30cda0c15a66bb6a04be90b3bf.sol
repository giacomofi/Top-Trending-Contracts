['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n', '// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n', '// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n', '// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n', '// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n', '// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n', '// Copyright (C) 2021 zapper\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 2 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\n', '\n', '///@author Zapper\n', '///@notice this contract implements one click removal of liquidity from Sushiswap pools, receiving ETH, ERC tokens or both.\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function WETH() external pure returns (address);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external pure returns (address);\n', '\n', '    function token1() external pure returns (address);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 _reserve0,\n', '            uint112 _reserve1,\n', '            uint32 _blockTimestampLast\n', '        );\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', 'contract Sushiswap_ZapOut_General_V2 is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    bool public stopped = false;\n', '    uint256 public goodwill;\n', '\n', '    // if true, goodwill is not deducted\n', '    mapping(address => bool) public feeWhitelist;\n', '\n', '    // % share of goodwill (0-100 %)\n', '    uint256 affiliateSplit;\n', '    // restrict affiliates\n', '    mapping(address => bool) public affiliates;\n', '    // affiliate => token => amount\n', '    mapping(address => mapping(address => uint256)) public affiliateBalance;\n', '    // token => amount\n', '    mapping(address => uint256) public totalAffiliateBalance;\n', '\n', '    address\n', '        private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    uint256\n', '        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '    // sushiSwap\n', '    IUniswapV2Router02 private constant sushiSwapRouter = IUniswapV2Router02(\n', '        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\n', '    );\n', '\n', '    address private constant wethTokenAddress = address(\n', '        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    );\n', '\n', '    constructor(uint256 _goodwill, uint256 _affiliateSplit) public {\n', '        goodwill = _goodwill;\n', '        affiliateSplit = _affiliateSplit;\n', '    }\n', '\n', '    // circuit breaker modifiers\n', '    modifier stopInEmergency {\n', '        if (stopped) {\n', '            revert("Temporarily Paused");\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    event zapOut(\n', '        address sender,\n', '        address pool,\n', '        address token,\n', '        uint256 tokensRec\n', '    );\n', '\n', '    /**\n', '    @notice Zap out in a signle token with permit\n', '    @param _ToTokenContractAddress indicates the toToken address to which tokens to convert.\n', '    @param _FromSushiPoolAddress indicates the liquidity pool\n', '    @param _IncomingLP indicates the amount of LP to remove from pool\n', '    @param _minTokensRec indicatest the minimum amount of toTokens to receive\n', '    @param _permitData indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values. \n', '    @param swapTargets execution targets for swaps\n', '    @param swap1Data DEX swap data\n', '    @param swap2Data DEX swap data\n', '    @param affiliate Affiliate address\n', '    */\n', '    function ZapOutWithPermit(\n', '        address _ToTokenContractAddress,\n', '        address _FromSushiPoolAddress,\n', '        uint256 _IncomingLP,\n', '        uint256 _minTokensRec,\n', '        bytes calldata _permitData,\n', '        address[] calldata swapTargets,\n', '        bytes calldata swap1Data,\n', '        bytes calldata swap2Data,\n', '        address affiliate\n', '    ) external stopInEmergency returns (uint256) {\n', '        // permit\n', '        (bool success, ) = _FromSushiPoolAddress.call(_permitData);\n', '        require(success, "Could Not Permit");\n', '\n', '        return (\n', '            ZapOut(\n', '                _ToTokenContractAddress,\n', '                _FromSushiPoolAddress,\n', '                _IncomingLP,\n', '                _minTokensRec,\n', '                swapTargets,\n', '                swap1Data,\n', '                swap2Data,\n', '                affiliate\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This method performs the zapOut to pair tokens with permit\n', '    @param _FromSushiPoolAddress indicates the liquidity pool\n', '    @param _IncomingLP indicates the amount of LP to remove from pool\n', '    @param affiliate Affiliate address to share fees\n', '    @param _permitData indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values. \n', '    @return  amountA - indicates the amount received in token0, amountB - indicates the amount received in token1 \n', '    */\n', '    function ZapOut2PairTokenWithPermit(\n', '        address _FromSushiPoolAddress,\n', '        uint256 _IncomingLP,\n', '        address affiliate,\n', '        bytes calldata _permitData\n', '    ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {\n', '        // permit\n', '        (bool success, ) = _FromSushiPoolAddress.call(_permitData);\n', '        require(success, "Could Not Permit");\n', '\n', '        (amountA, amountB) = ZapOut2PairToken(\n', '            _FromSushiPoolAddress,\n', '            _IncomingLP,\n', '            affiliate\n', '        );\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to zapout of given SushiSwap pair in the bounded tokens\n', '    @param _FromSushiPoolAddress The sushiSwap pair address to zapout\n', '    @param _IncomingLP The amount of LP\n', '    @param affiliate Affiliate address to share fees\n', '    @return the amount of pair tokens received after zapout\n', '     */\n', '    function ZapOut2PairToken(\n', '        address _FromSushiPoolAddress,\n', '        uint256 _IncomingLP,\n', '        address affiliate\n', '    )\n', '        public\n', '        nonReentrant\n', '        stopInEmergency\n', '        returns (uint256 amountA, uint256 amountB)\n', '    {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(_FromSushiPoolAddress);\n', '\n', '        require(\n', '            address(pair) != address(0),\n', '            "Error: Invalid Sushipool Address"\n', '        );\n', '\n', '        //get reserves\n', '        address token0 = pair.token0();\n', '        address token1 = pair.token1();\n', '\n', '        IERC20 sushiPool = IERC20(_FromSushiPoolAddress);\n', '\n', '        sushiPool.safeTransferFrom(msg.sender, address(this), _IncomingLP);\n', '\n', '        sushiPool.safeApprove(address(sushiSwapRouter), _IncomingLP);\n', '\n', '        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {\n', '            address _token = token0 == wethTokenAddress ? token1 : token0;\n', '            (amountA, amountB) = sushiSwapRouter.removeLiquidityETH(\n', '                _token,\n', '                _IncomingLP,\n', '                1,\n', '                1,\n', '                address(this),\n', '                deadline\n', '            );\n', '\n', '            // subtract goodwill\n', '            uint256 tokenGoodwill = _subtractGoodwill(\n', '                _token,\n', '                amountA,\n', '                affiliate\n', '            );\n', '            uint256 ethGoodwill = _subtractGoodwill(\n', '                ETHAddress,\n', '                amountB,\n', '                affiliate\n', '            );\n', '\n', '            // send tokens\n', '            IERC20(_token).safeTransfer(msg.sender, amountA.sub(tokenGoodwill));\n', '            Address.sendValue(msg.sender, amountB.sub(ethGoodwill));\n', '        } else {\n', '            (amountA, amountB) = sushiSwapRouter.removeLiquidity(\n', '                token0,\n', '                token1,\n', '                _IncomingLP,\n', '                1,\n', '                1,\n', '                address(this),\n', '                deadline\n', '            );\n', '\n', '            // subtract goodwill\n', '            uint256 tokenAGoodwill = _subtractGoodwill(\n', '                token0,\n', '                amountA,\n', '                affiliate\n', '            );\n', '            uint256 tokenBGoodwill = _subtractGoodwill(\n', '                token1,\n', '                amountB,\n', '                affiliate\n', '            );\n', '\n', '            // send tokens\n', '            IERC20(token0).safeTransfer(\n', '                msg.sender,\n', '                amountA.sub(tokenAGoodwill)\n', '            );\n', '            IERC20(token1).safeTransfer(\n', '                msg.sender,\n', '                amountB.sub(tokenBGoodwill)\n', '            );\n', '        }\n', '        emit zapOut(msg.sender, _FromSushiPoolAddress, token0, amountA);\n', '        emit zapOut(msg.sender, _FromSushiPoolAddress, token1, amountB);\n', '    }\n', '\n', '    /**\n', '    @notice This function is used to zapout of given Sushiswap pair in ETH/ERC20 Tokens\n', '    @param _ToTokenContractAddress The ERC20 token to zapout in (address(0x00) if ether)\n', '    @param _FromSushiPoolAddress Pool to remove liquidity from.\n', '    @param _IncomingLP Quantity of LP tokens to be burned\n', '    @param swapTargets Execution target for swap\n', '    @param swap1Data DEX swap data\n', '    @param swap2Data DEX swap data\n', '    @param affiliate Affiliate address to share fees\n', '    @return Quantity of ETH/tokens received after zapout\n', '     */\n', '    function ZapOut(\n', '        address _ToTokenContractAddress,\n', '        address _FromSushiPoolAddress,\n', '        uint256 _IncomingLP,\n', '        uint256 _minTokensRec,\n', '        address[] memory swapTargets,\n', '        bytes memory swap1Data,\n', '        bytes memory swap2Data,\n', '        address affiliate\n', '    ) public nonReentrant stopInEmergency returns (uint256 tokenBought) {\n', '        (uint256 amountA, uint256 amountB) = _removeLiquidity(\n', '            _FromSushiPoolAddress,\n', '            _IncomingLP\n', '        );\n', '\n', '        tokenBought = _swapTokens(\n', '            _FromSushiPoolAddress,\n', '            amountA,\n', '            amountB,\n', '            _ToTokenContractAddress,\n', '            swapTargets,\n', '            swap1Data,\n', '            swap2Data\n', '        );\n', '\n', '        require(tokenBought >= _minTokensRec, "High slippage");\n', '\n', '        emit zapOut(\n', '            msg.sender,\n', '            _FromSushiPoolAddress,\n', '            _ToTokenContractAddress,\n', '            tokenBought\n', '        );\n', '\n', '        uint256 totalGoodwillPortion;\n', '\n', '        if (_ToTokenContractAddress == address(0)) {\n', '            totalGoodwillPortion = _subtractGoodwill(\n', '                ETHAddress,\n', '                tokenBought,\n', '                affiliate\n', '            );\n', '\n', '            msg.sender.transfer(tokenBought.sub(totalGoodwillPortion));\n', '        } else {\n', '            totalGoodwillPortion = _subtractGoodwill(\n', '                _ToTokenContractAddress,\n', '                tokenBought,\n', '                affiliate\n', '            );\n', '\n', '            IERC20(_ToTokenContractAddress).safeTransfer(\n', '                msg.sender,\n', '                tokenBought.sub(totalGoodwillPortion)\n', '            );\n', '        }\n', '\n', '        return tokenBought.sub(totalGoodwillPortion);\n', '    }\n', '\n', '    function _removeLiquidity(\n', '        address _FromSushiPoolAddress,\n', '        uint256 _IncomingLP\n', '    ) internal returns (uint256 amountA, uint256 amountB) {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(_FromSushiPoolAddress);\n', '\n', '        require(\n', '            address(pair) != address(0),\n', '            "Error: Invalid Sushipool Address"\n', '        );\n', '\n', '        address token0 = pair.token0();\n', '        address token1 = pair.token1();\n', '\n', '        IERC20 sushiPool = IERC20(_FromSushiPoolAddress);\n', '\n', '        sushiPool.safeTransferFrom(msg.sender, address(this), _IncomingLP);\n', '\n', '        sushiPool.safeApprove(address(sushiSwapRouter), _IncomingLP);\n', '\n', '        (amountA, amountB) = sushiSwapRouter.removeLiquidity(\n', '            token0,\n', '            token1,\n', '            _IncomingLP,\n', '            1,\n', '            1,\n', '            address(this),\n', '            deadline\n', '        );\n', '        require(amountA > 0 && amountB > 0, "Removed insufficient liquidity");\n', '    }\n', '\n', '    function _swapTokens(\n', '        address _FromSushiPoolAddress,\n', '        uint256 _amountA,\n', '        uint256 _amountB,\n', '        address _toToken,\n', '        address[] memory swapTargets,\n', '        bytes memory swap1Data,\n', '        bytes memory swap2Data\n', '    ) internal returns (uint256 tokensBought) {\n', '        address token0 = IUniswapV2Pair(_FromSushiPoolAddress).token0();\n', '        address token1 = IUniswapV2Pair(_FromSushiPoolAddress).token1();\n', '\n', '        //swap token0 to toToken\n', '        if (token0 == _toToken) {\n', '            tokensBought = tokensBought.add(_amountA);\n', '        } else {\n', '            //swap token using 0x swap\n', '            tokensBought = tokensBought.add(\n', '                _fillQuote(\n', '                    token0,\n', '                    _toToken,\n', '                    _amountA,\n', '                    swapTargets[0],\n', '                    swap1Data\n', '                )\n', '            );\n', '        }\n', '\n', '        //swap token1 to toToken\n', '        if (token1 == _toToken) {\n', '            tokensBought = tokensBought.add(_amountB);\n', '        } else {\n', '            //swap token using 0x swap\n', '            tokensBought = tokensBought.add(\n', '                _fillQuote(\n', '                    token1,\n', '                    _toToken,\n', '                    _amountB,\n', '                    swapTargets[1],\n', '                    swap2Data\n', '                )\n', '            );\n', '        }\n', '    }\n', '\n', '    function _fillQuote(\n', '        address _fromTokenAddress,\n', '        address _toToken,\n', '        uint256 _amount,\n', '        address _swapTarget,\n', '        bytes memory swapData\n', '    ) internal returns (uint256) {\n', '        uint256 valueToSend;\n', '        if (_fromTokenAddress == address(0)) {\n', '            valueToSend = _amount;\n', '        } else {\n', '            IERC20 fromToken = IERC20(_fromTokenAddress);\n', '            fromToken.safeApprove(address(_swapTarget), 0);\n', '            fromToken.safeApprove(address(_swapTarget), _amount);\n', '        }\n', '\n', '        uint256 initialBalance = _toToken == address(0)\n', '            ? address(this).balance\n', '            : IERC20(_toToken).balanceOf(address(this));\n', '\n', '        (bool success, ) = _swapTarget.call.value(valueToSend)(swapData);\n', '        require(success, "Error Swapping Tokens");\n', '\n', '        uint256 finalBalance = _toToken == address(0)\n', '            ? (address(this).balance).sub(initialBalance)\n', '            : IERC20(_toToken).balanceOf(address(this)).sub(initialBalance);\n', '\n', '        require(finalBalance > 0, "Swapped to Invalid Intermediate");\n', '\n', '        return finalBalance;\n', '    }\n', '\n', '    /**\n', '    @param _FromSushiPoolAddress The pool to remove liquidity from.\n', '    @param _liquidity Auantity of LP tokens to remove.\n', '    @return  amountA- amountB- Quantity of token0 and token1 removed,\n', '    @return  token0- token1- Addresses of the underlying tokens to be removed\n', '    */\n', '    function removeLiquidityReturn(\n', '        address _FromSushiPoolAddress,\n', '        uint256 _liquidity\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 amount0,\n', '            uint256 amount1,\n', '            address _token0,\n', '            address _token1\n', '        )\n', '    {\n', '        IUniswapV2Pair pair = IUniswapV2Pair(_FromSushiPoolAddress);\n', '        _token0 = pair.token0();\n', '        _token1 = pair.token1();\n', '\n', '        uint256 balance0 = IERC20(_token0).balanceOf(_FromSushiPoolAddress);\n', '        uint256 balance1 = IERC20(_token1).balanceOf(_FromSushiPoolAddress);\n', '\n', '        uint256 _totalSupply = pair.totalSupply();\n', '\n', '        amount0 = _liquidity.mul(balance0) / _totalSupply;\n', '        amount1 = _liquidity.mul(balance1) / _totalSupply;\n', '    }\n', '\n', '    function _subtractGoodwill(\n', '        address token,\n', '        uint256 amount,\n', '        address affiliate\n', '    ) internal returns (uint256 totalGoodwillPortion) {\n', '        bool whitelisted = feeWhitelist[msg.sender];\n', '        if (!whitelisted && goodwill > 0) {\n', '            totalGoodwillPortion = SafeMath.div(\n', '                SafeMath.mul(amount, goodwill),\n', '                10000\n', '            );\n', '\n', '            if (affiliates[affiliate]) {\n', '                uint256 affiliatePortion = totalGoodwillPortion\n', '                    .mul(affiliateSplit)\n', '                    .div(100);\n', '                affiliateBalance[affiliate][token] = affiliateBalance[affiliate][token]\n', '                    .add(affiliatePortion);\n', '                totalAffiliateBalance[token] = totalAffiliateBalance[token].add(\n', '                    affiliatePortion\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    // - to Pause the contract\n', '    function toggleContractActive() public onlyOwner {\n', '        stopped = !stopped;\n', '    }\n', '\n', '    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\n', '        require(\n', '            _new_goodwill >= 0 && _new_goodwill <= 100,\n', '            "GoodWill Value not allowed"\n', '        );\n', '        goodwill = _new_goodwill;\n', '    }\n', '\n', '    function set_feeWhitelist(address zapAddress, bool status)\n', '        external\n', '        onlyOwner\n', '    {\n', '        feeWhitelist[zapAddress] = status;\n', '    }\n', '\n', '    function set_new_affiliateSplit(uint256 _new_affiliateSplit)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            _new_affiliateSplit <= 100,\n', '            "Affiliate Split Value not allowed"\n', '        );\n', '        affiliateSplit = _new_affiliateSplit;\n', '    }\n', '\n', '    function set_affiliate(address _affiliate, bool _status)\n', '        external\n', '        onlyOwner\n', '    {\n', '        affiliates[_affiliate] = _status;\n', '    }\n', '\n', '    ///@notice Withdraw goodwill share, retaining affilliate share\n', '    function withdrawTokens(address[] calldata tokens) external onlyOwner {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 qty;\n', '\n', '            if (tokens[i] == ETHAddress) {\n', '                qty = address(this).balance.sub(\n', '                    totalAffiliateBalance[tokens[i]]\n', '                );\n', '                Address.sendValue(Address.toPayable(owner()), qty);\n', '            } else {\n', '                qty = IERC20(tokens[i]).balanceOf(address(this)).sub(\n', '                    totalAffiliateBalance[tokens[i]]\n', '                );\n', '                IERC20(tokens[i]).safeTransfer(owner(), qty);\n', '            }\n', '        }\n', '    }\n', '\n', '    ///@notice Withdraw affilliate share, retaining goodwill share\n', '    function affilliateWithdraw(address[] calldata tokens) external {\n', '        uint256 tokenBal;\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            tokenBal = affiliateBalance[msg.sender][tokens[i]];\n', '            affiliateBalance[msg.sender][tokens[i]] = 0;\n', '            totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]]\n', '                .sub(tokenBal);\n', '\n', '            if (tokens[i] == ETHAddress) {\n', '                Address.sendValue(msg.sender, tokenBal);\n', '            } else {\n', '                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\n', '            }\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != tx.origin, "Do not send ETH directly");\n', '    }\n', '}']