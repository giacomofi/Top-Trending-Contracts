['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface ManagementList {\n', '    function isManager(address accountAddress) external returns (bool);\n', '}\n', '\n', 'contract Manageable {\n', '    ManagementList public managementList;\n', '\n', '    constructor(address _managementListAddress) {\n', '        managementList = ManagementList(_managementListAddress);\n', '    }\n', '\n', '    modifier onlyManagers() {\n', '        bool isManager = managementList.isManager(msg.sender);\n', '        require(isManager, "ManagementList: caller is not a manager");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract EarnRegistry is Manageable {\n', '    mapping(uint256 => address) private _assets;\n', '    uint256 public numAssets;\n', '    mapping(address => uint256) private isRegistered;\n', '    address public managementListAddress;\n', '\n', '    constructor(\n', '        address _managementListAddress,\n', '        address[] memory _initialAddresses\n', '    ) Manageable(_managementListAddress) {\n', '        managementListAddress = _managementListAddress;\n', '        require(\n', '            _managementListAddress != address(0),\n', '            "Missing management list address"\n', '        );\n', '        if (_initialAddresses.length > 0) {\n', '            addAssets(_initialAddresses);\n', '        }\n', '    }\n', '\n', '    function addAsset(address assetAddress) public onlyManagers {\n', '        if (isRegistered[assetAddress] == 0) {\n', '            numAssets += 1;\n', '            _assets[numAssets] = assetAddress;\n', '            isRegistered[assetAddress] = numAssets;\n', '        }\n', '    }\n', '\n', '    function addAssets(address[] memory assetAddresses) public onlyManagers {\n', '        for (uint256 i = 0; i < assetAddresses.length; i++) {\n', '            address assetAddress = assetAddresses[i];\n', '            addAsset(assetAddress);\n', '        }\n', '    }\n', '\n', '    function removeAsset(address assetAddress) external onlyManagers {\n', '        if (isRegistered[assetAddress] != 0) {\n', '            uint256 registryIndex = isRegistered[assetAddress];\n', '            delete _assets[registryIndex];\n', '            delete isRegistered[assetAddress];\n', '            numAssets -= 1;\n', '        }\n', '    }\n', '\n', '    function assets() external view returns (address[] memory) {\n', '        address[] memory assetList = new address[](numAssets);\n', '        for (uint256 i = 0; i < numAssets; i++) {\n', '            address assetAddress = _assets[i + 1];\n', '            assetList[i] = assetAddress;\n', '        }\n', '        return assetList;\n', '    }\n', '}']