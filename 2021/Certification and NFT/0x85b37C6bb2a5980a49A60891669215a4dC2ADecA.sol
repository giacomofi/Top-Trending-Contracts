['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title InitializedProxy\n', ' * @author Anna Carroll\n', ' */\n', 'contract InitializedProxy {\n', '    // address of logic contract\n', '    address public immutable logic;\n', '\n', '    // ======== Constructor =========\n', '\n', '    constructor(\n', '        address _logic,\n', '        bytes memory _initializationCalldata\n', '    ) {\n', '        logic = _logic;\n', '        // Delegatecall into the logic contract, supplying initialization calldata\n', '        (bool _ok, bytes memory returnData) =\n', '            _logic.delegatecall(_initializationCalldata);\n', '        // Revert if delegatecall to implementation reverts\n', '        require(_ok, string(returnData));\n', '    }\n', '\n', '    // ======== Fallback =========\n', '\n', '    fallback() external payable {\n', '        address _impl = logic;\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize())\n', '            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n', '            let size := returndatasize()\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '                case 0 {\n', '                    revert(ptr, size)\n', '                }\n', '                default {\n', '                    return(ptr, size)\n', '                }\n', '        }\n', '    }\n', '\n', '    // ======== Receive =========\n', '\n', '    receive() external payable {} // solhint-disable-line no-empty-blocks\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']