['/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', 'import { IIndexExchangeAdapter } from "../../../interfaces/IIndexExchangeAdapter.sol";\n', '\n', '/**\n', ' * @title BalancerV1IndexExchangeAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * A Balancer exchange adapter that returns calldata for trading with GeneralIndexModule, allows trading a fixed input amount or for a fixed\n', ' * output amount.\n', ' */\n', 'contract BalancerV1IndexExchangeAdapter is IIndexExchangeAdapter {\n', '\n', '    /* ============ Constants ============ */\n', '\n', '    // Amount of pools examined when fetching quote\n', '    uint256 private constant BALANCER_POOL_LIMIT = 3;\n', '    \n', '    /* ============ State Variables ============ */\n', '    \n', '    // Address of Balancer V1 Proxy contract\n', '    address public immutable balancerProxy;\n', '    // Balancer proxy function string for swapping exact tokens for a minimum of receive tokens\n', '    string internal constant EXACT_IN = "smartSwapExactIn(address,address,uint256,uint256,uint256)";\n', '    // Balancer proxy function string for swapping tokens for an exact amount of receive tokens\n', '    string internal constant EXACT_OUT = "smartSwapExactOut(address,address,uint256,uint256,uint256)";\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _balancerProxy       Balancer exchange proxy address\n', '     */\n', '    constructor(address _balancerProxy) public {\n', '        balancerProxy = _balancerProxy;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Return calldata for Balancer Proxy, _isSendTokenFixed indicates whether a fixed amount of token should be sold for an unfixed amount, or\n', '     * if an unfixed amount of token should be spent for a fixed amount.\n', '     *\n', '     * Note: When _isSendTokenFixed is false, _sourceQuantity is defined as the max token quantity you are willing to trade, and\n', '     * _destinationQuantity is the exact quantity of token you are receiving.\n', '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _isSendTokenFixed         Boolean indicating if the send quantity is fixed, used to determine correct trade interface\n', '     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\n', '     * @param  _destinationQuantity      Min/Fixed amount of destination tokens to receive\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address /*_destinationAddress*/,\n', '        bool _isSendTokenFixed,\n', '        uint256 _sourceQuantity,\n', '        uint256 _destinationQuantity,\n', '        bytes memory /*_data*/\n', '    )\n', '        external\n', '        view\n', '        override\n', '        returns (address, uint256, bytes memory)\n', '    {   \n', '        bytes memory callData = abi.encodeWithSignature(\n', '            _isSendTokenFixed ? EXACT_IN : EXACT_OUT,\n', '            _sourceToken,\n', '            _destinationToken,\n', '            _isSendTokenFixed ? _sourceQuantity : _destinationQuantity,\n', '            _isSendTokenFixed ? _destinationQuantity : _sourceQuantity,\n', '            BALANCER_POOL_LIMIT\n', '        );\n', '\n', '        return (balancerProxy, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Returns the address to approve source tokens to for trading. This is the Balancer proxy address\n', '     *\n', '     * @return address             Address of the contract to approve tokens to\n', '     */\n', '    function getSpender() external view override returns (address) {\n', '        return balancerProxy;\n', '    }\n', '}\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IIndexExchangeAdapter {\n', '    function getSpender() external view returns(address);\n', '\n', '    /**\n', "     * Returns calldata for executing trade on given adapter's exchange when using the GeneralIndexModule.\n", '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _destinationAddress       Address that assets should be transferred to\n', '     * @param  _isSendTokenFixed         Boolean indicating if the send quantity is fixed, used to determine correct trade interface\n', '     * @param  _sourceQuantity           Fixed/Max amount of source token to sell\n', '     * @param  _destinationQuantity      Min/Fixed amount of destination tokens to receive\n', '     * @param  _data                     Arbitrary bytes that can be used to store exchange specific parameters or logic\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address _destinationAddress,\n', '        bool _isSendTokenFixed,\n', '        uint256 _sourceQuantity,\n', '        uint256 _destinationQuantity,\n', '        bytes memory _data\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']