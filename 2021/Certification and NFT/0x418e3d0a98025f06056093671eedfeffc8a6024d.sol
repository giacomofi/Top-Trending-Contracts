['// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface IERC20 {\n', '  /** @dev Events */\n', '\n', '  event Approval(address indexed account, address indexed trust, uint256 amount);\n', '  event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '  /** @dev Views */\n', '\n', '  function name() external view returns (string memory);\n', '\n', '  function symbol() external view returns (string memory);\n', '\n', '  function decimals() external view returns (uint8);\n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  function allowance(address account, address trust) external view returns (uint256);\n', '\n', '  /** @dev Mutators */\n', '\n', '  function approve(address trust, uint256 amount) external returns (bool);\n', '\n', '  function transfer(address to, uint256 amount) external returns (bool);\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'import "./interfaces/IERC20.sol";\n', '\n', 'contract ARCH is IERC20 {\n', '  /** @dev Contants */\n', '\n', '  uint256 private constant _totalSupply = 50_000_000 ether;\n', '\n', '  /** @dev Fields */\n', '\n', '  mapping(address => mapping(address => uint256)) private _allowances;\n', '  mapping(address => uint256) private _balances;\n', '\n', '  constructor() {\n', '    _balances[msg.sender] = _totalSupply;\n', '\n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '  /** @dev Views */\n', '\n', '  function name() external pure override returns (string memory) {\n', '    return "Arch DeFi";\n', '  }\n', '\n', '  function symbol() external pure override returns (string memory) {\n', '    return "ARCH";\n', '  }\n', '\n', '  function decimals() external pure override returns (uint8) {\n', '    return 18;\n', '  }\n', '\n', '  function totalSupply() external pure override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address account) external view override returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  function allowance(address account, address trust) external view override returns (uint256) {\n', '    return _allowances[account][trust];\n', '  }\n', '\n', '  /** @dev Mutators */\n', '\n', '  function approve(address trust, uint256 amount) external override returns (bool) {\n', '    _allowances[msg.sender][trust] = amount;\n', '\n', '    emit Approval(msg.sender, trust, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  function transfer(address to, uint256 amount) external override returns (bool) {\n', '    return _transfer(msg.sender, to, amount);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 amount\n', '  ) external override returns (bool) {\n', '    uint256 a = _allowances[from][msg.sender];\n', '\n', '    if (a != type(uint256).max) {\n', '      require(amount <= a, "ARCH: insufficient allowance");\n', '      _allowances[from][msg.sender] = a - amount;\n', '    }\n', '\n', '    return _transfer(from, to, amount);\n', '  }\n', '\n', '  function _transfer(\n', '    address from,\n', '    address to,\n', '    uint256 amount\n', '  ) private returns (bool) {\n', '    uint256 balance = _balances[from];\n', '\n', '    require(amount <= balance, "ARCH: insufficient balance");\n', '\n', '    _balances[from] = balance - amount;\n', '    _balances[to] += amount;\n', '\n', '    emit Transfer(from, to, amount);\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 10000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']