['// SPDX-License-Identifier: agpl-3.0\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "../interfaces/IEmergencyStop.sol";\n', '\n', '/**\n', ' * @title EmergencyStop\n', ' * @author Pods Finance\n', ' * @notice Keeps the addresses of stopped contracts, so contracts can be aware\n', ' * of which functions to interrupt temporarily\n', ' */\n', 'contract EmergencyStop is IEmergencyStop, Ownable {\n', '    mapping(address => bool) private _addresses;\n', '\n', '    event Stopped(address indexed target);\n', '    event Resumed(address indexed target);\n', '\n', '    /**\n', '     * @dev Signals that the target should now be considered as stopped\n', '     * @param target The contract address\n', '     */\n', '    function stop(address target) external override onlyOwner {\n', '        _addresses[target] = true;\n', '        emit Stopped(target);\n', '    }\n', '\n', '    /**\n', '     * @dev Signals that the target should now be considered as fully functional\n', '     * @param target The contract address\n', '     */\n', '    function resume(address target) external override onlyOwner {\n', '        require(_addresses[target], "EmergencyStop: target is not stopped");\n', '        _addresses[target] = false;\n', '        emit Resumed(target);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if a contract should be considered as stopped\n', '     * @param target The contract address\n', '     */\n', '    function isStopped(address target) external override view returns (bool) {\n', '        return _addresses[target];\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: agpl-3.0\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IEmergencyStop {\n', '    function stop(address target) external;\n', '\n', '    function resume(address target) external;\n', '\n', '    function isStopped(address target) external view returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']