['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.5;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call{value:amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\n', '        uint newAllowance = token.allowance(address(this), spender) + value;\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\n', '        uint newAllowance = token.allowance(address(this), spender) - value;\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function decimals() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface ISushiswapV2Pair {\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function sync() external;\n', '}\n', '\n', 'interface IComptroller {\n', '    function enterMarkets(address[] memory cTokens) external;\n', '    function getAllMarkets() external view returns (address[] memory);\n', '}\n', '\n', 'interface cyToken {\n', '    function borrow(uint) external;\n', '    function mint(uint) external;\n', '    function redeem(uint) external;\n', '    function redeemUnderlying(uint) external;\n', '    function repayBorrow(uint) external;\n', '    function underlying() external view returns (address);\n', '}\n', '\n', 'contract xVault {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address owner;\n', '    \n', '    IComptroller constant COMPTROLLER = IComptroller(0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258);\n', '    address constant FACTORY = address(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\n', '    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    \n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        pair = address(uint160(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                FACTORY,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n", '            )))));\n', '    }\n', '    \n', '    function enterMarkets() public {\n', '        COMPTROLLER.enterMarkets(COMPTROLLER.getAllMarkets());\n', '    }\n', '    \n', '    function approveMarkets() public {\n', '        address[] memory _markets = COMPTROLLER.getAllMarkets();\n', '        for (uint i = 0; i < _markets.length; i++) {\n', '            address _underlying = cyToken(_markets[i]).underlying();\n', '            IERC20(_underlying).safeApprove(_markets[i], uint(-1));\n', '        }\n', '    }\n', '    \n', '    constructor() {\n', '        owner = msg.sender;\n', '        enterMarkets();\n', '        //approveMarkets();\n', '    }\n', '    \n', '    function withdraw(address token, uint amount) external {\n', '        require(owner == msg.sender);\n', '        IERC20(token).safeTransfer(msg.sender, amount);\n', '    }\n', '    \n', '    function open(address cylong, address long, uint lamt, address cyshort, address short, uint samt, address cymargin, uint mamt) external {\n', '        require(owner == msg.sender);\n', '        IERC20(cymargin).safeTransferFrom(msg.sender, address(this), mamt);\n', '        _borrow(cylong, long, lamt, cyshort, short, samt);\n', '    }\n', '    \n', '    function close(address cyrepay, address repay, uint ramt, address cywithdraw, address uwithdraw, uint wamt) external {\n', '        require(owner == msg.sender);\n', '        address tokenB = repay == WETH ? uwithdraw : WETH;\n', '        ISushiswapV2Pair _pairFrom = ISushiswapV2Pair(pairFor(repay, tokenB));\n', '        (uint amount0, uint amount1) = repay < tokenB ? (ramt, uint(0)) : (uint(0), ramt);\n', '        _pairFrom.swap(amount0, amount1, address(this), abi.encode(cyrepay, repay, ramt, address(_pairFrom), cywithdraw, uwithdraw, wamt, false));\n', '    }\n', '    \n', '    function _borrow(address cylong, address long, uint lamt, address cyshort, address short, uint samt) internal {\n', '        (uint amount0, uint amount1) = long < WETH ? (lamt, uint(0)) : (uint(0), lamt);\n', '        address tokenB = long == WETH ? short : WETH;\n', '        ISushiswapV2Pair _pairFrom = ISushiswapV2Pair(pairFor(long, tokenB));\n', '        _pairFrom.swap(amount0, amount1, address(this), abi.encode(cylong, long, lamt, address(_pairFrom), cyshort, short, samt, true));\n', '    }\n', '    \n', '    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {\n', '        require(sender == address(this));\n', '        (address _cylong, address _long, uint _lamt, address _pairFrom, address _cyshort, address _short, uint _samt, bool _pos) = abi.decode(data, (address, address, uint, address, address, address, uint, bool));\n', '        if (_pos) {\n', '            _open(_cylong, _lamt, _pairFrom, amount0, _short, _long, _samt, _cyshort);\n', '        } else {\n', '            _close(_cylong, _lamt, _pairFrom, amount0, _short, _long, _samt, _cyshort);\n', '        }\n', '    }\n', '    \n', '    function _close(address _cyrepay, uint _ramt, address _pairFrom, uint _amount0, address _withdraw, address _repay, uint _wamt, address _cywithdraw) internal {\n', '        IERC20(_repay).safeApprove(_cyrepay, 0);\n', '        IERC20(_repay).safeApprove(_cyrepay, uint(-1));\n', '        cyToken(_cyrepay).repayBorrow(_ramt);\n', '        \n', '        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(_pairFrom).getReserves();\n', '        (uint reserveIn, uint reserveOut) = _amount0 > 0 ? (reserve1, reserve0) : (reserve0, reserve1);\n', '        \n', '        uint _minRepay = _getAmountIn(_ramt, reserveIn, reserveOut);\n', '        \n', '        if (_withdraw == WETH || _repay == WETH) {\n', '            require(_minRepay <= _wamt);\n', '            cyToken(_cywithdraw).redeemUnderlying(_minRepay);\n', '            IERC20(_withdraw).safeTransfer(address(_pairFrom), _minRepay);\n', '        } else {\n', '            _crossClose(_withdraw, _minRepay, _wamt, _cywithdraw, address(_pairFrom));\n', '        }\n', '    }\n', '    \n', '    function _open(address _cylong, uint _lamt, address _pairFrom, uint _amount0, address _short, address _long, uint _samt, address _cyshort) internal {\n', '        IERC20(_long).safeApprove(_cylong, 0);\n', '        IERC20(_long).safeApprove(_cylong, uint(-1));\n', '        cyToken(_cylong).mint(_lamt);\n', '        \n', '        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(_pairFrom).getReserves();\n', '        (uint reserveIn, uint reserveOut) = _amount0 > 0 ? (reserve1, reserve0) : (reserve0, reserve1);\n', '        \n', '        uint _minRepay = _getAmountIn(_lamt, reserveIn, reserveOut);\n', '        \n', '        if (_short == WETH || _long == WETH) {\n', '            require(_minRepay <= _samt);\n', '            cyToken(_cyshort).borrow(_minRepay);\n', '            IERC20(_short).safeTransfer(address(_pairFrom), _minRepay);\n', '        } else {\n', '            _cross(_short, _minRepay, _samt, _cyshort, address(_pairFrom));\n', '        }\n', '    }\n', '    \n', '    function _getShortFall(address _short, ISushiswapV2Pair _pairTo, uint _minWETHRepay) internal view returns (address, uint) {\n', '        (address token0,) = _short < WETH ? (_short, WETH) : (WETH, _short);\n', '        (uint reserve0, uint reserve1,) = _pairTo.getReserves();\n', '        (uint reserveIn, uint reserveOut) = token0 == _short ? (reserve0, reserve1) : (reserve1, reserve0);\n', '        return (token0, _getAmountIn(_minWETHRepay, reserveIn, reserveOut));\n', '    }\n', '    \n', '    function _cross(address _short, uint _minWETHRepay, uint _samt, address _cyshort, address _pairFrom) internal {\n', '        ISushiswapV2Pair _pairTo = ISushiswapV2Pair(pairFor(_short, WETH));\n', '        (address token0, uint _shortPay) = _getShortFall(_short, _pairTo, _minWETHRepay);\n', '        require(_shortPay <= _samt);\n', '        cyToken(_cyshort).borrow(_shortPay);\n', '        (uint amount0, uint amount1) = token0 == _short ? (uint(0), _minWETHRepay) : (_minWETHRepay, uint(0));\n', '        IERC20(_short).safeTransfer(address(_pairTo), _shortPay);\n', '        _pairTo.swap(amount0, amount1, _pairFrom, new bytes(0));\n', '    }\n', '    \n', '    function _crossClose(address _withdraw, uint _minWETHRepay, uint _wamt, address _cywithdraw, address _pairFrom) internal {\n', '        ISushiswapV2Pair _pairTo = ISushiswapV2Pair(pairFor(_withdraw, WETH));\n', '        (address token0, uint _shortPay) = _getShortFall(_withdraw, _pairTo, _minWETHRepay);\n', '        require(_shortPay <= _wamt);\n', '        cyToken(_cywithdraw).redeemUnderlying(_shortPay);\n', '        (uint amount0, uint amount1) = token0 == _withdraw ? (uint(0), _minWETHRepay) : (_minWETHRepay, uint(0));\n', '        IERC20(_withdraw).safeTransfer(address(_pairTo), _shortPay);\n', '        _pairTo.swap(amount0, amount1, _pairFrom, new bytes(0));\n', '    }\n', '    \n', '    function execute(address to, uint value, bytes calldata data) external returns (bool, bytes memory) {\n', '        require(owner == msg.sender);\n', '        (bool success, bytes memory result) = to.call{value:value}(data);\n', '        \n', '        return (success, result);\n', '    }\n', '\n', '    function _getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', '        uint numerator = reserveIn * amountOut * 1000;\n', '        uint denominator = (reserveOut - amountOut) * 997;\n', '        amountIn = (numerator / denominator) + 1;\n', '    }\n', '    \n', '    \n', '}']