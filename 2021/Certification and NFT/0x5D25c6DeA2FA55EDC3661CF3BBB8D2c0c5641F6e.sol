['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', '// Dependency file: @chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathChainlink {\n', '  /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    * - Addition cannot overflow.\n', '    */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "SafeMath: subtraction overflow");\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    * - Multiplication cannot overflow.\n', '    */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, "SafeMath: division by zero");\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0, "SafeMath: modulo by zero");\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '// Dependency file: @chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'interface LinkTokenInterface {\n', '  function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '  function approve(address spender, uint256 value) external returns (bool success);\n', '  function balanceOf(address owner) external view returns (uint256 balance);\n', '  function decimals() external view returns (uint8 decimalPlaces);\n', '  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n', '  function increaseApproval(address spender, uint256 subtractedValue) external;\n', '  function name() external view returns (string memory tokenName);\n', '  function symbol() external view returns (string memory tokenSymbol);\n', '  function totalSupply() external view returns (uint256 totalTokensIssued);\n', '  function transfer(address to, uint256 value) external returns (bool success);\n', '  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '}\n', '\n', '\n', '// Dependency file: @chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', 'contract VRFRequestIDBase {\n', '\n', '  /**\n', '   * @notice returns the seed which is actually input to the VRF coordinator\n', '   *\n', '   * @dev To prevent repetition of VRF output due to repetition of the\n', '   * @dev user-supplied seed, that seed is combined in a hash with the\n', '   * @dev user-specific nonce, and the address of the consuming contract. The\n', '   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n', '   * @dev the final seed, but the nonce does protect against repetition in\n', '   * @dev requests which are included in a single block.\n', '   *\n', '   * @param _userSeed VRF seed input provided by user\n', '   * @param _requester Address of the requesting contract\n', '   * @param _nonce User-specific nonce at the time of the request\n', '   */\n', '  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n', '    address _requester, uint256 _nonce)\n', '    internal pure returns (uint256)\n', '  {\n', '    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the id for this request\n', '   * @param _keyHash The serviceAgreement ID to be used for this request\n', '   * @param _vRFInputSeed The seed to be passed directly to the VRF\n', '   * @return The id for this request\n', '   *\n', '   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n', '   * @dev contract, but the one generated by makeVRFInputSeed\n', '   */\n', '  function makeRequestId(\n', '    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n', '    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n', '  }\n', '}\n', '\n', '\n', '// Dependency file: @chainlink/contracts/src/v0.6/VRFConsumerBase.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol";\n', '\n', '// import "@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol";\n', '\n', '// import "@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol";\n', '\n', '/** ****************************************************************************\n', ' * @notice Interface for contracts using VRF randomness\n', ' * *****************************************************************************\n', ' * @dev PURPOSE\n', ' *\n', ' * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n', " * @dev to Vera the verifier in such a way that Vera can be sure he's not\n", ' * @dev making his output up to suit himself. Reggie provides Vera a public key\n', ' * @dev to which he knows the secret key. Each time Vera provides a seed to\n', ' * @dev Reggie, he gives back a value which is computed completely\n', ' * @dev deterministically from the seed and the secret key.\n', ' *\n', ' * @dev Reggie provides a proof by which Vera can verify that the output was\n', ' * @dev correctly computed once Reggie tells it to her, but without that proof,\n', ' * @dev the output is indistinguishable to her from a uniform random sample\n', ' * @dev from the output space.\n', ' *\n', ' * @dev The purpose of this contract is to make it easy for unrelated contracts\n', ' * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n', ' * @dev simple access to a verifiable source of randomness.\n', ' * *****************************************************************************\n', ' * @dev USAGE\n', ' *\n', ' * @dev Calling contracts must inherit from VRFConsumerBase, and can\n', " * @dev initialize VRFConsumerBase's attributes in their constructor as\n", ' * @dev shown:\n', ' *\n', ' * @dev   contract VRFConsumer {\n', ' * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n', ' * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n', ' * @dev         <initialization with other arguments goes here>\n', ' * @dev       }\n', ' * @dev   }\n', ' *\n', ' * @dev The oracle will have given you an ID for the VRF keypair they have\n', " * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n", ' * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n', ' * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n', ' * @dev want to generate randomness from.\n', ' *\n', " * @dev Once the VRFCoordinator has received and validated the oracle's response\n", " * @dev to your request, it will call your contract's fulfillRandomness method.\n", ' *\n', ' * @dev The randomness argument to fulfillRandomness is the actual random value\n', ' * @dev generated from your seed.\n', ' *\n', ' * @dev The requestId argument is generated from the keyHash and the seed by\n', ' * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n', ' * @dev requests open, you can use the requestId to track which seed is\n', ' * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n', ' * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,\n', ' * @dev if your contract could have multiple requests in flight simultaneously.)\n', ' *\n', ' * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n', ' * @dev differ. (Which is critical to making unpredictable randomness! See the\n', ' * @dev next section.)\n', ' *\n', ' * *****************************************************************************\n', ' * @dev SECURITY CONSIDERATIONS\n', ' *\n', ' * @dev A method with the ability to call your fulfillRandomness method directly\n', " * @dev could spoof a VRF response with any random value, so it's critical that\n", ' * @dev it cannot be directly called by anything other than this base contract\n', ' * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n', ' *\n', " * @dev For your users to trust that your contract's random behavior is free\n", " * @dev from malicious interference, it's best if you can write it so that all\n", ' * @dev behaviors implied by a VRF response are executed *during* your\n', ' * @dev fulfillRandomness method. If your contract must store the response (or\n', ' * @dev anything derived from it) and use it later, you must ensure that any\n', ' * @dev user-significant behavior which depends on that stored value cannot be\n', ' * @dev manipulated by a subsequent VRF request.\n', ' *\n', ' * @dev Similarly, both miners and the VRF oracle itself have some influence\n', ' * @dev over the order in which VRF responses appear on the blockchain, so if\n', ' * @dev your contract could have multiple VRF requests in flight simultaneously,\n', ' * @dev you must ensure that the order in which the VRF responses arrive cannot\n', " * @dev be used to manipulate your contract's user-significant behavior.\n", ' *\n', ' * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n', ' * @dev block in which the request is made, user-provided seeds have no impact\n', ' * @dev on its economic security properties. They are only included for API\n', ' * @dev compatability with previous versions of this contract.\n', ' *\n', ' * @dev Since the block hash of the block which contains the requestRandomness\n', ' * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n', ' * @dev miner could, in principle, fork the blockchain to evict the block\n', ' * @dev containing the request, forcing the request to be included in a\n', ' * @dev different block with a different hash, and therefore a different input\n', ' * @dev to the VRF. However, such an attack would incur a substantial economic\n', ' * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n', ' * @dev until it calls responds to a request.\n', ' */\n', 'abstract contract VRFConsumerBase is VRFRequestIDBase {\n', '\n', '  using SafeMathChainlink for uint256;\n', '\n', '  /**\n', '   * @notice fulfillRandomness handles the VRF response. Your contract must\n', '   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important\n', '   * @notice principles to keep in mind when implementing your fulfillRandomness\n', '   * @notice method.\n', '   *\n', '   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n', '   * @dev signature, and will call it once it has verified the proof\n', '   * @dev associated with the randomness. (It is triggered via a call to\n', '   * @dev rawFulfillRandomness, below.)\n', '   *\n', '   * @param requestId The Id initially returned by requestRandomness\n', '   * @param randomness the VRF output\n', '   */\n', '  function fulfillRandomness(bytes32 requestId, uint256 randomness)\n', '    internal virtual;\n', '\n', '  /**\n', '   * @notice requestRandomness initiates a request for VRF output given _seed\n', '   *\n', "   * @dev The fulfillRandomness method receives the output, once it's provided\n", '   * @dev by the Oracle, and verified by the vrfCoordinator.\n', '   *\n', '   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n', '   * @dev the _fee must exceed the fee specified during registration of the\n', '   * @dev _keyHash.\n', '   *\n', '   * @dev The _seed parameter is vestigial, and is kept only for API\n', "   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n", "   * @dev your own randomness, here, but it's not necessary because the VRF\n", '   * @dev oracle will mix the hash of the block containing your request into the\n', '   * @dev VRF seed it ultimately uses.\n', '   *\n', '   * @param _keyHash ID of public key against which randomness is generated\n', '   * @param _fee The amount of LINK to send with the request\n', '   * @param _seed seed mixed into the input of the VRF.\n', '   *\n', '   * @return requestId unique ID for this request\n', '   *\n', '   * @dev The returned requestId can be used to distinguish responses to\n', '   * @dev concurrent requests. It is passed as the first argument to\n', '   * @dev fulfillRandomness.\n', '   */\n', '  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\n', '    internal returns (bytes32 requestId)\n', '  {\n', '    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\n', '    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n', '    // the hash of the block containing this request to obtain the seed/input\n', '    // which is finally passed to the VRF cryptographic machinery.\n', '    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\n', '    // nonces[_keyHash] must stay in sync with\n', '    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n', '    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n', '    // This provides protection against the user repeating their input seed,\n', '    // which would result in a predictable/duplicate output, if multiple such\n', '    // requests appeared in the same block.\n', '    nonces[_keyHash] = nonces[_keyHash].add(1);\n', '    return makeRequestId(_keyHash, vRFSeed);\n', '  }\n', '\n', '  LinkTokenInterface immutable internal LINK;\n', '  address immutable private vrfCoordinator;\n', '\n', '  // Nonces for each VRF key from which randomness has been requested.\n', '  //\n', '  // Must stay in sync with VRFCoordinator[_keyHash][this]\n', '  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n', '\n', '  /**\n', '   * @param _vrfCoordinator address of VRFCoordinator contract\n', '   * @param _link address of LINK token contract\n', '   *\n', '   * @dev https://docs.chain.link/docs/link-token-contracts\n', '   */\n', '  constructor(address _vrfCoordinator, address _link) public {\n', '    vrfCoordinator = _vrfCoordinator;\n', '    LINK = LinkTokenInterface(_link);\n', '  }\n', '\n', '  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n', '  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n', '  // the origin of the call\n', '  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n', '    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");\n', '    fulfillRandomness(requestId, randomness);\n', '  }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/Uint256ArrayUtils.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Uint256ArrayUtils\n', ' * @author Prophecy\n', ' *\n', ' * Utility functions to handle uint256 Arrays\n', ' */\n', 'library Uint256ArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (uint256(-1), false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(uint256[] memory A, uint256 a) internal pure returns (bool) {\n', '        (, bool isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurrence of a duplicate\n', '    */\n', '    function hasDuplicate(uint256[] memory A) internal pure returns(bool) {\n', '        require(A.length > 0, "A is empty");\n', '\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            uint256 current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The uint256 to remove     \n', '     * @return Returns the array with the object removed.\n', '     */\n', '    function remove(uint256[] memory A, uint256 a)\n', '        internal\n', '        pure\n', '        returns (uint256[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("uint256 not in array.");\n', '        } else {\n', '            (uint256[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The uint256 to remove\n', '     */\n', '    function removeStorage(uint256[] storage A, uint256 a)\n', '        internal\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("uint256 not in array.");\n', '        } else {\n', '            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n', '            if (index != lastIndex) { A[index] = A[lastIndex]; }\n', '            A.pop();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * @param A The input array to search\n', '    * @param index The index to remove\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(uint256[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (uint256[] memory, uint256)\n', '    {\n', '        uint256 length = A.length;\n', '        require(index < A.length, "Index must be < A length");\n', '        uint256[] memory newUint256s = new uint256[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newUint256s[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newUint256s[j - 1] = A[j];\n', '        }\n', '        return (newUint256s, A[index]);\n', '    }\n', '\n', '    /**\n', '     * Returns the combination of the two arrays\n', '     * @param A The first array\n', '     * @param B The second array\n', '     * @return Returns A extended by B\n', '     */\n', '    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n', '        uint256 aLength = A.length;\n', '        uint256 bLength = B.length;\n', '        uint256[] memory newUint256s = new uint256[](aLength + bLength);\n', '        for (uint256 i = 0; i < aLength; i++) {\n', '            newUint256s[i] = A[i];\n', '        }\n', '        for (uint256 j = 0; j < bLength; j++) {\n', '            newUint256s[aLength + j] = B[j];\n', '        }\n', '        return newUint256s;\n', '    }\n', '\n', '    /**\n', '     * Validate uint256 array is not empty and contains no duplicate elements.\n', '     *\n', '     * @param A          Array of uint256\n', '     */\n', '    function _validateLengthAndUniqueness(uint256[] memory A) internal pure {\n', '        require(A.length > 0, "Array length must be > 0");\n', '        require(!hasDuplicate(A), "Cannot duplicate uint256");\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/lib/AddressArrayUtils.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AddressArrayUtils\n', ' * @author Prophecy\n', ' *\n', ' * Utility functions to handle uint256 Arrays\n', ' */\n', 'library AddressArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (uint256(-1), false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(address[] memory A, address a) internal pure returns (bool) {\n', '        (, bool isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurrence of a duplicate\n', '    */\n', '    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n', '        require(A.length > 0, "A is empty");\n', '\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            address current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove     \n', '     * @return Returns the array with the object removed.\n', '     */\n', '    function remove(address[] memory A, address a)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            (address[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove\n', '     */\n', '    function removeStorage(address[] storage A, address a)\n', '        internal\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n', '            if (index != lastIndex) { A[index] = A[lastIndex]; }\n', '            A.pop();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * @param A The input array to search\n', '    * @param index The index to remove\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(address[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (address[] memory, address)\n', '    {\n', '        uint256 length = A.length;\n', '        require(index < A.length, "Index must be < A length");\n', '        address[] memory newAddresses = new address[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newAddresses[j - 1] = A[j];\n', '        }\n', '        return (newAddresses, A[index]);\n', '    }\n', '\n', '    /**\n', '     * Returns the combination of the two arrays\n', '     * @param A The first array\n', '     * @param B The second array\n', '     * @return Returns A extended by B\n', '     */\n', '    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n', '        uint256 aLength = A.length;\n', '        uint256 bLength = B.length;\n', '        address[] memory newAddresses = new address[](aLength + bLength);\n', '        for (uint256 i = 0; i < aLength; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = 0; j < bLength; j++) {\n', '            newAddresses[aLength + j] = B[j];\n', '        }\n', '        return newAddresses;\n', '    }\n', '\n', '    /**\n', '     * Validate that address and uint array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of uint\n', '     */\n', '    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and bool array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of bool\n', '     */\n', '    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and string array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of strings\n', '     */\n', '    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address array lengths match, and calling address array are not empty\n', '     * and contain no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of addresses\n', '     */\n', '    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and bytes array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of bytes\n', '     */\n', '    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate address array is not empty and contains no duplicate elements.\n', '     *\n', '     * @param A          Array of addresses\n', '     */\n', '    function _validateLengthAndUniqueness(address[] memory A) internal pure {\n', '        require(A.length > 0, "Array length must be > 0");\n', '        require(!hasDuplicate(A), "Cannot duplicate addresses");\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IWETH.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title IWETH\n', ' * @author Prophecy\n', ' *\n', " * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\n", ' * functionality.\n', ' */\n', 'interface IWETH is IERC20{\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IProphetPoolFactory.sol\n', '\n', '// pragma solidity ^0.6.10;\n', '\n', '/**\n', ' * @title IProphetPoolFactory\n', ' * @author Prophecy\n', ' */\n', 'interface IProphetPoolFactory {\n', '    /**\n', '     * Creates a ProphetPool smart contract set the manager(owner) of the pool.\n', '     */\n', '    function create(string memory, address, address, address) external returns (address);\n', '\n', '    /**\n', '     * Return WETH address.\n', '     */\n', '    function getWeth() external view returns (address);\n', '\n', '    /**\n', '     * Return VRF Key Hash.\n', '     */\n', '    function getVrfKeyHash() external view returns (bytes32);\n', '\n', '    /**\n', '     * Return VRF Fee.\n', '     */\n', '    function getVrfFee() external view returns (uint256);\n', '\n', '    /**\n', '     * Return Link Token address for VRF.\n', '     */\n', '    function getLinkToken() external view returns (address);\n', '\n', '    /**\n', '     * Return VRF coordinator.\n', '     */\n', '    function getVrfCoordinator() external view returns (address);\n', '\n', '    /**\n', '     * Return all pools addreses\n', '     */\n', '    function getAllPools() external view returns (address[] memory);\n', '}\n', '\n', '\n', '// Root file: contracts/ProphetPool.sol\n', '\n', 'pragma solidity ^0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import { VRFConsumerBase } from "@chainlink/contracts/src/v0.6/VRFConsumerBase.sol";\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { Address } from "@openzeppelin/contracts/utils/Address.sol";\n', '// import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '// import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '// import { Uint256ArrayUtils } from "contracts/lib/Uint256ArrayUtils.sol";\n', '// import { AddressArrayUtils } from "contracts/lib/AddressArrayUtils.sol";\n', '// import { IWETH } from "contracts/interfaces/IWETH.sol";\n', '// import { IProphetPoolFactory } from "contracts/interfaces/IProphetPoolFactory.sol";\n', '\n', '/**\n', ' * @title ProphetPool\n', ' * @author Prophecy\n', ' *\n', ' * Smart contract that facilitates that draws lucky winners in the pool and distribut rewards to the winners.\n', ' */\n', 'contract ProphetPool is VRFConsumerBase, ReentrancyGuard, Ownable {\n', '    using Address for address;\n', '    using Uint256ArrayUtils for uint256[];\n', '    using AddressArrayUtils for address[];\n', '\n', '    /* ============ Structs ============ */\n', '\n', '    struct PoolConfig {\n', '        uint256 numOfWinners;\n', '        uint256 participantLimit;\n', '        uint256 enterAmount;\n', '        uint256 feePercentage;\n', '        uint256 randomSeed;\n', '        uint256 startedAt;\n', '    }\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum PoolStatus { NOTSTARTED, INPROGRESS, CLOSED }\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event FeeRecipientSet(address indexed _feeRecipient);\n', '    event MaxParticipationCompleted(address indexed _from);\n', '    event RandomNumberGenerated(uint256 indexed randomness);\n', '    event WinnersGenerated(uint256[] winnerIndexes);\n', '    event PoolSettled();\n', '    event PoolStarted(\n', '        uint256 participantLimit,\n', '        uint256 numOfWinners,\n', '        uint256 enterAmount,\n', '        uint256 feePercentage,\n', '        uint256 startedAt\n', '    );\n', '    event PoolReset();\n', '    event EnteredPool(address indexed _participant, uint256 _amount, uint256 indexed _participantIndex);\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    IProphetPoolFactory private factory;\n', '    address private feeRecipient;\n', '    string private poolName;\n', '    IERC20 private enterToken;\n', '    PoolStatus private poolStatus;\n', '    PoolConfig private poolConfig;\n', '\n', '    address[] private participants;\n', '    uint256[] private winnerIndexes;\n', '    uint256 private totalEnteredAmount;\n', '    uint256 private rewardPerParticipant;\n', '\n', '    uint256 internal randomResult;\n', '    bool internal areWinnersGenerated;\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier onlyValidPool() {\n', '        require(participants.length < poolConfig.participantLimit, "Max Participation for the Pool Reached");\n', '        require(poolStatus == PoolStatus.INPROGRESS, "The Pool is not started or closed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyEOA() {\n', '        require(tx.origin == msg.sender, "Only EOA allowed");\n', '        _;\n', '    }\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Create the ProphetPool with Chainlink VRF configuration for Random number generation.\n', '     *\n', '     * @param _poolName             Pool name\n', "     * @param _enterToken           ERC20 token to enter the pool. If it's ETH pool, it should be WETH address\n", '     * @param _factory              ProphetPoolFactory\n', '     * @param _feeRecipient         Where the fee go\n', '     */\n', '    constructor(\n', '        string memory _poolName,\n', '        address _enterToken,\n', '        address _factory,\n', '        address _feeRecipient\n', '    )\n', '        public\n', '        VRFConsumerBase(IProphetPoolFactory(_factory).getVrfCoordinator(), IProphetPoolFactory(_factory).getLinkToken())\n', '    {\n', '        poolName = _poolName;\n', '        enterToken = IERC20(_enterToken);\n', '        factory = IProphetPoolFactory(_factory);\n', '        feeRecipient = _feeRecipient;\n', '\n', '        poolStatus = PoolStatus.NOTSTARTED;\n', '    }\n', '\n', '    /* ============ External/Public Functions ============ */\n', '\n', '    /**\n', '     * Set the Pool Config, initializes an instance of and start the pool.\n', '     *\n', '     * @param _numOfWinners         Number of winners in the pool\n', '     * @param _participantLimit     Maximum number of paricipants\n', '     * @param _enterAmount          Exact amount to enter this pool\n', '     * @param _feePercentage        Manager fee of this pool\n', '     * @param _randomSeed           Seed for Random Number Generation\n', '     */\n', '    function setPoolRules(\n', '        uint256 _numOfWinners,\n', '        uint256 _participantLimit,\n', '        uint256 _enterAmount,\n', '        uint256 _feePercentage,\n', '        uint256 _randomSeed\n', '    ) external onlyOwner {\n', '        require(poolStatus == PoolStatus.NOTSTARTED, "A Pool is in progress");\n', '        require(_numOfWinners != 0, "Number of winner must not be 0");\n', '        require(_numOfWinners < _participantLimit, "Too much number of winners");\n', '\n', '        poolConfig = PoolConfig(\n', '            _numOfWinners,\n', '            _participantLimit,\n', '            _enterAmount,\n', '            _feePercentage,\n', '            _randomSeed,\n', '            block.timestamp\n', '        );\n', '        poolStatus = PoolStatus.INPROGRESS;\n', '        emit PoolStarted(\n', '            _participantLimit,\n', '            _numOfWinners,\n', '            _enterAmount,\n', '            _feePercentage,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Set the Pool Config, initializes an instance of and start the pool.\n', '     *\n', '     * @param _feeRecipient         Number of winners in the pool\n', '     */\n', '    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n', '        require(_feeRecipient != address(0), "Invalid address");\n', '        feeRecipient = _feeRecipient;\n', '\n', '        emit FeeRecipientSet(feeRecipient);\n', '    }\n', '\n', '    /**\n', '     * Enter pool with ETH\n', '     */\n', '    function enterPoolEth() external payable onlyValidPool onlyEOA returns (uint256) {\n', '        require(msg.value == poolConfig.enterAmount, "Insufficent registration amount provided");\n', '        if (!_isEthPool()) {\n', '            revert("ETH isn\'t accepted");\n', '        }\n', '        // wrap ETH to WETH\n', '        IWETH(factory.getWeth()).deposit{ value: msg.value }();\n', '\n', '        return _enterPool();\n', '    }\n', '\n', '    /**\n', '     * Enter pool with ERC20 token\n', '     */\n', '    function enterPool() external onlyValidPool onlyEOA returns (uint256) {\n', '        enterToken.transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                poolConfig.enterAmount\n', '            );\n', '\n', '        return _enterPool();\n', '    }\n', '\n', '    /**\n', '     * Settle the pool, the winners are selected randomly and fee is transfer to the manager.\n', '     */\n', '    function settlePool() external {\n', '        require(randomResult > 0, "RND in progress");\n', '        require(poolStatus == PoolStatus.INPROGRESS, "The Pool is in progress");\n', '\n', '        // generate winnerIndexes until the numOfWinners reach\n', '        uint256 newRandom = randomResult;\n', '        uint256 offset = 0;\n', '        while(winnerIndexes.length < poolConfig.numOfWinners) {\n', '            uint256 winningIndex = newRandom.mod(poolConfig.participantLimit);\n', '            if (!winnerIndexes.contains(winningIndex)) {\n', '                winnerIndexes.push(winningIndex);\n', '            }\n', '            offset.add(1);\n', '            newRandom = _getRandomNumberBlockchain(offset, newRandom);\n', '        }\n', '        areWinnersGenerated = true;\n', '        emit WinnersGenerated(winnerIndexes);\n', '\n', '        // set pool CLOSED status\n', '        poolStatus = PoolStatus.CLOSED;\n', '\n', '        // transfer fees\n', '        uint256 feeAmount = totalEnteredAmount.mul(poolConfig.feePercentage).div(100);\n', '        rewardPerParticipant = (totalEnteredAmount.sub(feeAmount)).div(poolConfig.numOfWinners);\n', '        _transferEnterToken(feeRecipient, feeAmount);\n', '\n', '        // collectRewards();\n', '        emit PoolSettled();\n', '    }\n', '\n', '    /**\n', '     * The winners of the pool can call this function to transfer their winnings\n', '     * from the pool contract to their own address.\n', '     */\n', '    function collectRewards() external nonReentrant {\n', '        require(poolStatus == PoolStatus.CLOSED, "The Pool is not settled.");\n', '\n', '        for (uint256 i = 0; i < poolConfig.participantLimit; i = i.add(1)) {\n', '            address player = participants[i];\n', '            if (winnerIndexes.contains(i)) {\n', '                // if winner\n', '                _transferEnterToken(player, rewardPerParticipant);\n', '            }\n', '        }\n', '        _resetPool();\n', '    }\n', '\n', '    /**\n', '     * The contract will receive Ether\n', '     */\n', '    receive() external payable {}\n', '\n', '    /**\n', '     * Getter for factory\n', '     */\n', '    function getFactory() external view returns (address) {\n', '        return address(factory);\n', '    }\n', '\n', '    /**\n', '     * Getter for fee recipient\n', '     */\n', '    function getFeeRecipient() external view returns (address) {\n', '        return feeRecipient;\n', '    }\n', '\n', '    /**\n', '     * Getter for poolName\n', '     */\n', '    function getPoolName() external view returns (string memory) {\n', '        return poolName;\n', '    }\n', '\n', '    /**\n', '     * Getter for enterToken\n', '     */\n', '    function getEnterToken() external view returns (address) {\n', '        return address(enterToken);\n', '    }\n', '\n', '    /**\n', '     * Getter for poolStatus\n', '     */\n', '    function getPoolStatus() external view returns (PoolStatus) {\n', '        return poolStatus;\n', '    }\n', '\n', '    /**\n', '     * Getter for poolConfig\n', '     */\n', '    function getPoolConfig() external view returns (PoolConfig memory) {\n', '        return poolConfig;\n', '    }\n', '\n', '    /**\n', '     * Getter for totalEnteredAmount\n', '     */\n', '    function getTotalEnteredAmount() external view returns (uint256) {\n', '        return totalEnteredAmount;\n', '    }\n', '\n', '    /**\n', '     * Getter for rewardPerParticipant\n', '     */\n', '    function getRewardPerParticipant() external view returns (uint256) {\n', '        return rewardPerParticipant;\n', '    }\n', '\n', '    /**\n', '     * Get all participants\n', '     */\n', '    function getParticipants() external view returns(address[] memory) {\n', '        return participants;\n', '    }\n', '\n', '    /**\n', '     * Get one participant by index\n', '     * @param _index                 Index of the participants array\n', '     */\n', '    function getParticipant(uint256 _index) external view returns(address) {\n', '        return participants[_index];\n', '    }\n', '\n', '    /**\n', '     * Getter for winnerIndexes\n', '     */\n', '    function getWinnerIndexes() external view returns(uint256[] memory) {\n', '        return winnerIndexes;\n', '    }\n', '\n', '    /**\n', '     * Get if the account is winner\n', '     */\n', '    function isWinner(address _account) external view returns(bool) {\n', '        (uint256 index, bool isExist) = participants.indexOf(_account);\n', '        if (isExist) {\n', '            return winnerIndexes.contains(index);\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* ============ Private/Internal Functions ============ */\n', '\n', '    /**\n', '     * Participant enters the pool and enter amount is transferred from the user to the pool.\n', '     */\n', '    function _enterPool() internal returns(uint256 _participantIndex) {\n', '        participants.push(msg.sender);\n', '\n', '        totalEnteredAmount = totalEnteredAmount.add(poolConfig.enterAmount);\n', '\n', '        if (participants.length == poolConfig.participantLimit) {\n', '            emit MaxParticipationCompleted(msg.sender);\n', '            _getRandomNumber(poolConfig.randomSeed);\n', '        }\n', '\n', '        _participantIndex = (participants.length).sub(1);\n', '        emit EnteredPool(msg.sender, poolConfig.enterAmount, _participantIndex);\n', '    }\n', '\n', '    /**\n', '     * Reset the pool, clears the existing state variable values and the pool can be initialized again.\n', '     */\n', '    function _resetPool() internal {\n', '        poolStatus = PoolStatus.INPROGRESS;\n', '        delete totalEnteredAmount;\n', '        delete rewardPerParticipant;\n', '        randomResult = 0;\n', '        areWinnersGenerated = false;\n', '        delete winnerIndexes;\n', '        delete participants;\n', '        emit PoolReset();\n', '\n', '        uint256 tokenBalance = enterToken.balanceOf(address(this));\n', '        if (tokenBalance > 0) {\n', '            enterToken.transfer(feeRecipient, tokenBalance);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * Transfer enterToken even it's ETH or ERC20.\n", '     *\n', '     * @param _to                   Offset to generate the random number\n', '     * @param _amount               Random number to generate the other random number\n', '     */\n', '    function _transferEnterToken(address _to, uint256 _amount) internal {\n', '        if (_isEthPool()) {\n', '            IWETH(factory.getWeth()).withdraw(_amount);\n', '            (bool status, ) = payable(_to).call{value: _amount}("");\n', '            require(status, "ETH not transferred");\n', '        } else {\n', '            enterToken.transfer(address(_to), _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Check pool is ETH pool or not\n', '     */\n', '    function _isEthPool() internal view returns (bool) {\n', '        return address(enterToken) == factory.getWeth();\n', '    }\n', '\n', '    /**\n', '     * Generate a random number based on the blockHash and random offset\n', '     *\n', '     * @param _offset               Offset to generate the random number\n', '     * @param _randomness           Random number to generate the other random number\n', '     */\n', '    function _getRandomNumberBlockchain(uint256 _offset, uint256 _randomness)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        bytes32 baseHash = keccak256(\n', '            abi.encodePacked(\n', '                blockhash(block.number),\n', '                bytes32(_offset),\n', '                bytes32(_randomness)\n', '            )\n', '        );\n', '        return uint256(baseHash);\n', '    }\n', '\n', '    /**\n', "     * Calls ChainLink Oracle's inherited function for Random Number Generation.\n", '     * The contract must have enough LINK required for VRF.\n', '     *\n', '     * @param _userProvidedSeed     Seed to generate the random number\n', '     */\n', '    function _getRandomNumber(uint256 _userProvidedSeed)\n', '        internal\n', '        returns (bytes32 requestId)\n', '    {\n', '        require(\n', '            IERC20(factory.getLinkToken()).balanceOf(address(this)) >= factory.getVrfFee(),\n', '            "Not enough LINK for VRF"\n', '        );\n', '        randomResult = 0;\n', '        return\n', '            requestRandomness(\n', '                factory.getVrfKeyHash(),\n', '                factory.getVrfFee(),\n', '                _userProvidedSeed\n', '            );\n', '    }\n', '\n', '    /**\n', '     * Callback function used by VRF Coordinator.\n', '     *\n', '     * @param _randomness     Generated random number\n', '     */\n', '    function fulfillRandomness(bytes32, uint256 _randomness) internal override {\n', '        randomResult = _randomness;\n', '        emit RandomNumberGenerated(_randomness);\n', '    }\n', '}']