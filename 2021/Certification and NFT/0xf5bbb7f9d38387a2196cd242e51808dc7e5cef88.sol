['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-07\n', '*/\n', '\n', 'pragma solidity ^0.4.26;// SPDX-License-Identifier: MIT\n', '\n', '\n', 'contract WhiteListHelper{\n', '    event NewWhiteList(uint _WhiteListCount, address _creator, address _contract, uint _changeUntil);\n', '\n', '    modifier OnlyCreator(uint256 _Id) {\n', '        require(\n', '            WhitelistSettings[_Id].Creator == msg.sender,\n', '            "Only creator can access"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier TimeRemaining(uint256 _Id){\n', '        require(\n', '            now < WhitelistSettings[_Id].ChangeUntil,\n', '            "Time for edit is finished"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier ValidateId(uint256 _Id){\n', '        require(_Id < WhiteListCount, "Wrong ID");\n', '        _;\n', '    }\n', '\n', '    struct WhiteListItem {\n', '        // uint256 Limit;\n', '        address Creator;\n', '        uint256 ChangeUntil;\n', '        //uint256 DrawLimit;\n', '        //uint256 SignUpPrice;\n', '        address Contract;\n', '        // mapping(address => uint256) WhiteListDB;\n', '        bool isReady; // defualt false | true after first address is added\n', '    }\n', '\n', '    mapping(uint256 => mapping(address => uint256)) public WhitelistDB;\n', '    mapping(uint256 => WhiteListItem) public WhitelistSettings;\n', '    uint256 public WhiteListCost;\n', '    uint256 public WhiteListCount;\n', '\n', '    function _AddAddress(uint256 _Id, address user, uint amount) internal {\n', '        WhitelistDB[_Id][user] = amount;\n', '    }\n', '\n', '    function _RemoveAddress(uint256 _Id, address user) internal {\n', '        WhitelistDB[_Id][user] = 0;\n', '    }\n', '\n', '    function isWhiteListReady(uint256 _Id) external view returns(bool){\n', '        return WhitelistSettings[_Id].isReady;\n', '    }\n', '\n', '    //View function to Check if address is whitelisted\n', '    function Check(address _user, uint256 _id) external view returns(uint){\n', '        if (_id == 0) return uint256(-1);\n', '        return WhitelistDB[_id][_user];\n', '    }\n', '}/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'contract WhiteList is WhiteListHelper, Ownable{\n', '    constructor() public {\n', '        WhiteListCount = 1; //0 is off\n', '        MaxUsersLimit = 10;\n', '        WhiteListCost = 0.01 ether;\n', '    }\n', '\n', '    //uint256 public SignUpCost;\n', '    uint256 public MaxUsersLimit;\n', '\n', '    modifier isBelowUserLimit(uint256 _limit) {\n', '        require(_limit <= MaxUsersLimit, "Maximum User Limit exceeded");\n', '        _;\n', '    }\n', '\n', '    function setMaxUsersLimit(uint256 _limit) external onlyOwner {\n', '        MaxUsersLimit = _limit;\n', '    }\n', '    \n', '    function WithdrawETHFee(address _to) public onlyOwner {\n', '        _to.transfer(address(this).balance); \n', '    }\n', '\n', '    function setWhiteListCost(uint256 _newCost) external onlyOwner {\n', '        WhiteListCost = _newCost;\n', '    }\n', '\n', '    function CreateManualWhiteList(\n', '        uint256 _ChangeUntil,\n', '        address _Contract\n', '    ) public payable returns (uint256 Id) {\n', '        require(msg.value >= WhiteListCost, "ether not enough");\n', '        WhitelistSettings[WhiteListCount] =  WhiteListItem(\n', '            /*_Limit == 0 ? uint256(-1) :*/\n', '            // _Limit,\n', '            msg.sender,\n', '            _ChangeUntil,\n', '            _Contract,\n', '            false\n', '        );\n', '        uint256 temp = WhiteListCount;\n', '        WhiteListCount++;\n', '        emit NewWhiteList(temp, msg.sender, _Contract, _ChangeUntil);\n', '        return temp;\n', '    }\n', '\n', '    function ChangeCreator(uint256 _Id, address _NewCreator)\n', '        external\n', '        OnlyCreator(_Id)\n', '        TimeRemaining(_Id)\n', '        ValidateId(_Id)\n', '    {\n', '        WhitelistSettings[_Id].Creator = _NewCreator;\n', '    }\n', '\n', '    function ChangeContract(uint256 _Id, address _NewContract)\n', '        external\n', '        OnlyCreator(_Id)\n', '        TimeRemaining(_Id)\n', '        ValidateId(_Id)\n', '    {\n', '        WhitelistSettings[_Id].Contract = _NewContract;\n', '    }\n', '\n', '    function AddAddress(uint256 _Id, address[] _Users, uint256[] _Amount)\n', '        public\n', '        OnlyCreator(_Id)\n', '        TimeRemaining(_Id)\n', '        ValidateId(_Id)\n', '        isBelowUserLimit(_Users.length)\n', '    {\n', '        require(_Users.length == _Amount.length, "Number of users should be same as the amount length");\n', '        require(_Users.length > 0,"Need something...");\n', '        if(!WhitelistSettings[_Id].isReady){\n', '            WhitelistSettings[_Id].isReady = true;\n', '        }\n', '        for (uint256 index = 0; index < _Users.length; index++) {\n', '            _AddAddress(_Id, _Users[index], _Amount[index]);\n', '        }\n', '    }\n', '\n', '    function RemoveAddress(uint256 _Id, address[] _Users)\n', '        public\n', '        OnlyCreator(_Id)\n', '        TimeRemaining(_Id)\n', '        ValidateId(_Id)\n', '        isBelowUserLimit(_Users.length)\n', '    {\n', '        for (uint256 index = 0; index < _Users.length; index++) {\n', '            _RemoveAddress(_Id, _Users[index]);\n', '        }\n', '    }\n', '\n', '    function Register(\n', '        address _Subject,\n', '        uint256 _Id,\n', '        uint256 _Amount\n', '    ) external {\n', '        if (_Id == 0) return;\n', '        require(\n', '            msg.sender == WhitelistSettings[_Id].Contract,\n', '            "Only the Contract can call this"\n', '        );\n', '        require(\n', '            WhitelistDB[_Id][_Subject] >= _Amount,\n', '            "Sorry, no alocation for Subject"\n', '        );\n', '        uint256 temp = WhitelistDB[_Id][_Subject] - _Amount;\n', '        WhitelistDB[_Id][_Subject] = temp;\n', '        assert(WhitelistDB[_Id][_Subject] == temp);\n', '    }\n', '}']