['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// powered by Shah BHUDHAI\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'interface IERC20Metadata is IERC20 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function softcapDeadline() external view returns (uint256);\n', '    function softCapTokens() external view returns (uint256);\n', '    function hardCapTokens() external view returns (uint256);\n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is Context, IERC20, IERC20Metadata {\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping (address => uint256) private _deposits;\n', '\n', '    address payable _owner;\n', '    uint256 private _totalSupply;\n', '    uint256 private _softCapTokens;\n', '    uint256 private _hardCapTokens;\n', '    uint256 private _totalSold;\n', '\n', '    bool internal marketing = false;\n', '    bool internal developers =false;\n', '    bool internal seed_investors = false;\n', '    bool internal wei_dai =false;\n', '    bool internal founder = false;\n', '    bool internal uniswapPool = false;\n', '    bool internal Salefinished = false;\n', '\n', '    string private _name;\n', '    uint256 private _softcapDeadline;\n', '    uint256 private _burningTime;\n', '    string private _symbol;\n', '    uint256 startOfSalesPeriod;\n', '\n', '    constructor (address payable owner_) {\n', '        _name = "B-MONEY";\n', '        _symbol = "BMNY";\n', '        _totalSupply = 80840e8;\n', '        _softCapTokens = 11822e8;\n', '        _hardCapTokens = 78819e8;\n', '        _owner =  owner_;\n', '        startOfSalesPeriod =1624863600;\n', '        _softcapDeadline = startOfSalesPeriod + 7889229;\n', '        _burningTime = startOfSalesPeriod+ 34186659;\n', '    }\n', '\n', '\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 8;\n', '    }\n', '\n', '    function softcapDeadline() public view virtual override returns (uint256) {\n', '        return _softcapDeadline;\n', '    }\n', '\n', '    function softCapTokens() public view virtual override returns (uint256) {\n', '        return _softCapTokens;\n', '    }\n', '\n', '    function hardCapTokens() public view virtual override returns (uint256) {\n', '        return _hardCapTokens;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        unchecked {\n', '            _approve(sender, _msgSender(), currentAllowance - amount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        unchecked {\n', '            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    receive() external payable {\n', '        uint256 amount = msg.value*40/1e10;\n', '        require(block.timestamp <= startOfSalesPeriod + 31556926 ,"Sale finished ");\n', '        require(block.timestamp >= startOfSalesPeriod,"Sale period did not started");\n', '        require(_totalSold <=78819e8, "Sold out");\n', '        require(_totalSold + amount <=78819e8, "Not enough tokens left");\n', '        require(_balances[msg.sender]+amount<=40e8, "You reached the personal cap");\n', '        require(msg.value <= 1e18, "Maximum buying is limited to 1 eth");\n', '        _totalSold=_totalSold+amount;\n', '        _mint(msg.sender,amount);\n', '        _deposits[msg.sender] = _deposits[msg.sender] + msg.value;\n', '    }\n', '\n', '    //The contract stores funds and gives refund option to the investor if soft cap not reached\n', '\t//For refund, users must have tokens in their wallet which they bought\n', '\t//If user refunds, tokens will be burned and deducted from the total supply\n', '\n', '    function refundNBurn (address payable recipient) external{\n', '        require(msg.sender == recipient , "Check the address");\n', '        require((_totalSold < 11822e8) , "Soft cap reached");\n', '        require(block.timestamp > startOfSalesPeriod + 7889229 ,"Time limit not reached. Wait until soft cap deadline");\n', '        require(_deposits[msg.sender]>0, "You do not have tokens to refund");\n', '        require(_deposits[msg.sender]*40 ==_balances[msg.sender], "Please check your token balance");\n', '        recipient.transfer(_deposits[msg.sender]);\n', '        _deposits[msg.sender]=0;\n', '        _burn(msg.sender, _balances[msg.sender]);\n', '        _balances[msg.sender]=0;\n', '     }\n', '\n', '    //There are theree ways to create tokens; minting by using the buy function, \n', '\t//sending direct ether to contract and claiming locked tokens.\n', '\t//The personal cap is 40 tokens. The token price for the ICO period is 0,025 ethers.\n', '\t//If total sold reaches hard cap, buy function will not mint tokens\n', '\n', '     function buy()payable public returns(bool){\n', '         uint256 amount = msg.value*40/1e10; \n', '         require(block.timestamp <= startOfSalesPeriod + 31556926 ,"Sale finished "); \n', '         require(block.timestamp >= startOfSalesPeriod,"Sale period did not started ");\n', '         require(_totalSold <=78819e8, "Sold out"); \n', '         require(_totalSold + amount <=78819e8, "Not enough token left"); \n', '         require(_balances[msg.sender]+amount<=40e8, "You reached the personal cap"); \n', '         require(msg.value <= 1e18, "Maximum buying is limited to 1 eth"); \n', '         _totalSold=_totalSold+amount; \n', '         _mint(msg.sender,amount); \n', '         _deposits[msg.sender] = _deposits[msg.sender] + msg.value; \n', '         return (true);\n', '    \n', '    }\n', '\n', '     function finalizeSale() public returns(bool){\n', '         require(msg.sender == _owner , "NOT Accessable"); \n', '         uint256 amount = _hardCapTokens - _totalSold; \n', '         require(amount>0, "Hardcap reached"); \n', '         require(block.timestamp > startOfSalesPeriod + 31556926 && Salefinished,"Sale not finished "); \n', '         require (_totalSold <=78819e8, "Sold out"); \n', '         _totalSold=_totalSold+amount; \n', '         _mint(0x3737373737373737373737373737373737373737,amount); \n', '         Salefinished=true; \n', '         return (true);\n', '     }\n', '\n', '    //Burn function is especially designed for the tokens of Wei DAI, if he did not claimed before lock time + 1 months\n', '\t//his tokens are going to be burned and deducted from total supply.\n', '\t//Address 0x3737373737373737373737373737373737373737 will be used as a stove\n', '\t//If a user wants to burn tokens, they will send tokens to stove\n', '\t//Once a month, this function will be called and burn tokens inside.\n', '    function stove() public virtual {\n', '     require(block.timestamp > _burningTime ,"Burning time not reached, tokens are staying in the stove");\n', '        if (_balances[0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B]>0) {\n', '            _burn(0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B, _balances[0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B]);\n', '            _burn(0x3737373737373737373737373737373737373737, _balances[0x3737373737373737373737373737373737373737]);\n', '            _burningTime=_burningTime+2629743;\n', '        } else {\n', '            _burn(0x3737373737373737373737373737373737373737, _balances[0x3737373737373737373737373737373737373737]);\n', '            _burningTime=_burningTime+2629743;\n', '        }\n', '    }\n', '\n', '    function getPrice(uint256 TokenQuantity)public pure returns (uint256){\n', '        uint256 price = 1e18/40;\n', '        return TokenQuantity*price;\n', '    }\n', '\n', '    function totalSoldTokens()public view returns (uint256){\n', '        return _totalSold;\n', '    }\n', '\n', '    function sale_finished()public view returns (bool){\n', '        return Salefinished;\n', '    }\n', '\n', '\n', '    //There are six locks,\n', '\t//Uniswap tokens will be available after contract deployment. \n', '\t//That tokens will be used for creating uniswap pool.\n', '    //Marketing tokens are locked until softcap reached 25%.\n', '\t//Developer tokens are locked for 6 months.\n', '    //Seed investors tokens are locked for 9 months.\n', '\t//Wei DAI tokens are locked for 1 year.\n', '\t//Founder team tokens are locked for 2 years\n', '    function claimLocked()public returns(bool success){\n', '        require(msg.sender == _owner || \n', '        msg.sender == 0x9A34767F3f742B20d354183689bB953A45Ac6ACE ||\n', '        msg.sender == 0x7203FAC48E911B397cc8bb29E55f4C1c06a57Fe8 ||\n', '        msg.sender == 0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B || \n', '        msg.sender == 0x114f8D89b4a5072C25FAd7E110AcB09827cEB5Eb || \n', '        msg.sender == 0x3515f46d4E06b7Dd7C22DDE1357CD1aee8E74Bc7,"Invalid User ");\n', '        if(msg.sender == 0x9A34767F3f742B20d354183689bB953A45Ac6ACE ){\n', '            require(_totalSold>=2955e8 && !marketing,"Target limit is not reached or tokens are already taken");\n', '            _mint(msg.sender,150e8);\n', '            marketing = true;\n', '            return(true);\n', '        } else if(msg.sender == 0x3515f46d4E06b7Dd7C22DDE1357CD1aee8E74Bc7 ){\n', '            require(block.timestamp >=startOfSalesPeriod + 15778458  && !developers,"Time limit is not reached or tokens are already taken");\n', '            _mint(msg.sender,273e8);\n', '            developers = true;\n', '            return(true);\n', '        } else if(msg.sender == 0x7203FAC48E911B397cc8bb29E55f4C1c06a57Fe8 ){\n', '            require(!uniswapPool,"Tokens are already taken");\n', '            _mint(msg.sender,50e8);\n', '            uniswapPool = true;\n', '            return(true);\n', '        }else if(msg.sender == 0x114f8D89b4a5072C25FAd7E110AcB09827cEB5Eb ){\n', '            require(block.timestamp >= startOfSalesPeriod + 23667687 && !seed_investors,"Time limit is not reached or tokens are already taken");\n', '            _mint(msg.sender,100e8);\n', '            seed_investors = true;\n', '            return(true);\n', '        }\n', '        else if(msg.sender == 0x440b87CCe2D1dd8DAcf31434bbbB85365e84B18B ){\n', '            require(block.timestamp >= startOfSalesPeriod + 31556926 && !wei_dai,"Time limit is not reached or tokens are already taken");\n', '            _mint(msg.sender,920e8);\n', '            wei_dai = true;\n', '            return(true);\n', '        }\n', '        else if(msg.sender == _owner ){\n', '            require(block.timestamp >= startOfSalesPeriod + 63113832 && !founder,"Time limit is not reached or tokens are already taken");\n', '            _mint(msg.sender,528e8);\n', '            founder = true;\n', '            return(true);\n', '        }\n', '    }\n', '\n', '    function withdraw (uint256 amount) public returns(bool){\n', '        require(msg.sender == _owner , "NOT Accessable");\n', '        require((_totalSold >= 11822e8) , "Soft cap did not reached");\n', '        if (amount >= address(this).balance) {\n', '            _owner.transfer(address(this).balance);\n', '        } else{\n', '            _owner.transfer(amount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '    unchecked {\n', '        _balances[sender] = senderBalance - amount;\n', '        }\n', '        _balances[recipient] += amount;\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance"); \n', '    unchecked {\n', '        _balances[account] = accountBalance - amount;\n', '      }\n', '        _totalSupply -= amount;\n', '        emit Transfer(account, address(0), amount);\n', '      }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']