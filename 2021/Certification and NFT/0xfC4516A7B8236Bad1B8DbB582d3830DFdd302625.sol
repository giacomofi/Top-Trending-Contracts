['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'import "./ICoinvestingDeFiFactory.sol";\n', 'import "./CoinvestingDeFiPair.sol";\n', '\n', 'contract CoinvestingDeFiFactory is ICoinvestingDeFiFactory {\n', '    // Public variables\n', '    address[] public override allPairs;\n', '    address public override feeTo;\n', '    address public override feeToSetter;\n', '    \n', '    mapping(address => mapping(address => address)) public override getPair;\n', '\n', '    constructor(address _feeToSetter) {\n', '        feeToSetter = _feeToSetter;\n', '    }\n', '\n', '    //External functions\n', '    function createPair(\n', '        address tokenA,\n', '        address tokenB\n', '    )\n', '    external\n', '    override\n', '    returns (address pair)\n', '    {\n', '        require(tokenA != tokenB, "FAC: IDT_ADDR");\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(token0 != address(0), "FAC: ZERO_ADDR");\n', '        require(getPair[token0][token1] == address(0), "FAC: PAIR_EXISTS");\n', '        bytes memory bytecode = type(CoinvestingDeFiPair).creationCode;\n', '        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n', '        assembly {\n', '            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        ICoinvestingDeFiPair(pair).initialize(token0, token1);\n', '        getPair[token0][token1] = pair;\n', '        getPair[token1][token0] = pair;\n', '        allPairs.push(pair);\n', '        emit PairCreated(token0, token1, pair, allPairs.length);\n', '    }\n', '\n', '    function setFeeTo(address _feeTo) external override {\n', '        require(msg.sender == feeToSetter,\n', '            "FAC: CALLER_AINT_SETTER");\n', '        feeTo = _feeTo;\n', '    }\n', '\n', '    function setFeeToSetter(address _feeToSetter) external override {\n', '        require(msg.sender == feeToSetter,\n', '            "FAC: CALLER_AINT_SETTER");\n', '        feeToSetter = _feeToSetter;\n', '    }\n', '\n', '    //External functions that are view\n', '    function allPairsLength() external view override returns (uint) {\n', '        return allPairs.length;\n', '    }\n', '}']