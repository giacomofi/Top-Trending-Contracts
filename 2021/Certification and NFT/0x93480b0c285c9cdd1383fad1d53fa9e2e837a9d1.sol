['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '/// @dev brief EIP 20 interface for contract bridges\n', 'interface IERC20 {\n', '     function balanceOf(address account) external view returns (uint256);\n', '\n', '     function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '     /// @notice EIP 2612\n', '     function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IAaveBridge {\n', '    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n', '\n', '    function deposit( \n', '        address asset, \n', '        uint256 amount, \n', '        address onBehalfOf, \n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    function withdraw( \n', '        address token, \n', '        uint256 amount, \n', '        address destination\n', '    ) external;\n', '}\n', '\n', 'interface IBentoBridge {\n', '    function registerProtocol() external;\n', '\n', '    function deposit( \n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '}\n', '\n', 'interface ICompoundBridge {\n', '    function underlying() external view returns (address);\n', '\n', '    function mint(uint mintAmount) external returns (uint);\n', '\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '}\n', '\n', 'contract BentoBridge {\n', '    IAaveBridge immutable aave; // AAVE lending pool contract - 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9\n', '    IBentoBridge immutable bento; // BENTO token vault contract - 0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\n', '\n', '    constructor(IAaveBridge _aave, IBentoBridge _bento) public {\n', '        _bento.registerProtocol();\n', '        aave = _aave;\n', '        bento = _bento;\n', '    }\n', '\n', '    function approveTokenBridge(IERC20[] calldata underlying, address[] calldata cToken) external {\n', '        for (uint256 i = 0; i < underlying.length; i++) {\n', '            underlying[i].approve(address(aave), type(uint256).max); // max approve `aave` spender to pull `underlying` from this contract\n', '            underlying[i].approve(address(bento), type(uint256).max); // max approve `bento` spender to pull `underlying` from this contract\n', '            underlying[i].approve(address(cToken[i]), type(uint256).max); // max approve `cToken` spender to pull `underlying` from this contract\n', '        }\n', '    }\n', '\n', '    /// - AAVE - ///\n', '    function aaveToBento(address aToken, uint256 amount) external {\n', '        IERC20(aToken).transferFrom(msg.sender, address(this), amount);\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\n', '        aave.withdraw(underlying, amount, address(this));\n', '        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\n', '    }\n', '\n', '    function aaveToBentoWithPermit(\n', '        address aToken, uint256 amount, \n', '        uint8 v, bytes32 r, bytes32 s\n', '    ) external {\n', '        IERC20(aToken).permit(msg.sender, address(this), amount, now, v, r, s);\n', '        IERC20(aToken).transferFrom(msg.sender, address(this), amount);\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\n', '        aave.withdraw(underlying, amount, address(this));\n', '        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\n', '    }\n', '\n', '    function bentoToAave(IERC20 underlying, uint256 amount) external {\n', '        bento.withdraw(underlying, msg.sender, address(this), amount, 0);\n', '        aave.deposit(address(underlying), underlying.balanceOf(address(this)), msg.sender, 0); \n', '    }\n', '\n', '    /// - COMPOUND - ///\n', '    function compoundToBento(address cToken, uint256 amount) external {\n', '        IERC20(cToken).transferFrom(msg.sender, address(this), amount);\n', '        address underlying = ICompoundBridge(cToken).underlying();\n', '        ICompoundBridge(cToken).redeemUnderlying(amount);\n', '        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\n', '    }\n', '\n', '    function bentoToCompound(address cToken, uint256 amount) external {\n', '        address underlying = ICompoundBridge(cToken).underlying();\n', '        bento.withdraw(IERC20(underlying), msg.sender, address(this), amount, 0);\n', '        ICompoundBridge(cToken).mint(amount);\n', '        IERC20(cToken).transfer(msg.sender, IERC20(cToken).balanceOf(address(this))); \n', '    }\n', '}']