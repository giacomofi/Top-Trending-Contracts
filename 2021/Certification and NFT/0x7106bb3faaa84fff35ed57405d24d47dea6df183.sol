['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '/// SPDX-License-Identifier: MIT\n', '/// Presented by LexDAO LLC\n', '/// @notice Minimal Certification NFT.\n', 'pragma solidity 0.8.4;\n', '\n', 'contract Certification {\n', '    address public governance;\n', '    uint256 public totalSupply;\n', '    string  public baseURI;\n', '    string  public details;\n', '    string  public name;\n', '    string  public symbol;\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(uint256 => address) public ownerOf;\n', '    mapping(uint256 => string) public tokenURI;\n', '    mapping(bytes4 => bool) public supportsInterface; // ERC-165 \n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event GovTokenURI(uint256 indexed tokenId, string tokenURI);\n', '    event TransferGovernance(address indexed governance);\n', '    event UpdateBaseURI(string baseURI);\n', '    \n', '    constructor(\n', '        address _governance,\n', '        string memory _baseURI, \n', '        string memory _details, \n', '        string memory _name, \n', '        string memory _symbol\n', '    ) {\n', '        governance = _governance;\n', '        baseURI = _baseURI;\n', '        details = _details; \n', '        name = _name; \n', '        symbol = _symbol;  \n', '        supportsInterface[0x80ac58cd] = true; // ERC-721 \n', '        supportsInterface[0x5b5e139f] = true; // METADATA\n', '    }\n', '\n', '    modifier onlyGovernance {\n', "        require(msg.sender == governance, '!governance');\n", '        _;\n', '    }\n', '    \n', '    function burn(address from, uint256 tokenId) external {\n', "        require(from == ownerOf[tokenId] || from == governance, '!owner||!governance');\n", '        balanceOf[from]--; \n', '        ownerOf[tokenId] = address(0);\n', '        tokenURI[tokenId] = "";\n', '        emit Transfer(from, address(0), tokenId); \n', '    }\n', '    \n', '    function mint(address to, string calldata customURI) external onlyGovernance { \n', '        string memory _tokenURI; \n', '        bytes(customURI).length > 0 ? _tokenURI = customURI : _tokenURI = baseURI;\n', '        totalSupply++;\n', '        uint256 tokenId = totalSupply;\n', '        balanceOf[to]++;\n', '        ownerOf[tokenId] = to;\n', '        tokenURI[tokenId] = _tokenURI;\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    function govTokenURI(uint256 tokenId, string calldata _tokenURI) external onlyGovernance {\n', "        require(tokenId <= totalSupply, '!exist');\n", '        tokenURI[tokenId] = _tokenURI;\n', '        emit GovTokenURI(tokenId, _tokenURI);\n', '    }\n', '    \n', '    function govTransferFrom(address from, address to, uint256 tokenId) external onlyGovernance {\n', "        require(from == ownerOf[tokenId], 'from!=owner');\n", '        balanceOf[from]--; \n', '        balanceOf[to]++; \n', '        ownerOf[tokenId] = to;\n', '        emit Transfer(from, to, tokenId); \n', '    }\n', '\n', '    function transferGovernance(address _governance) external onlyGovernance {\n', '        governance = _governance;\n', '        emit TransferGovernance(_governance);\n', '    }\n', '    \n', '    function updateBaseURI(string calldata _baseURI) external onlyGovernance {\n', '        baseURI = _baseURI;\n', '        emit UpdateBaseURI(_baseURI);\n', '    }\n', '}']