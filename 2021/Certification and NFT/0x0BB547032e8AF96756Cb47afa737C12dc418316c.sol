['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-26\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/utils/ContractGuard.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract ContractGuard {\n', '    mapping(uint256 => mapping(address => bool)) private _status;\n', '\n', '    function checkSameOriginReentranted() internal view returns (bool) {\n', '        return _status[block.number][tx.origin];\n', '    }\n', '\n', '    function checkSameSenderReentranted() internal view returns (bool) {\n', '        return _status[block.number][msg.sender];\n', '    }\n', '\n', '    modifier onlyOneBlock() {\n', '        require(\n', '            !checkSameOriginReentranted(),\n', "            'ContractGuard: one block, one function'\n", '        );\n', '        require(\n', '            !checkSameSenderReentranted(),\n', "            'ContractGuard: one block, one function'\n", '        );\n', '\n', '        _;\n', '\n', '        _status[block.number][tx.origin] = true;\n', '        _status[block.number][msg.sender] = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// -License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/owner/Operator.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract Operator is Context, Ownable {\n', '    address private _operator;\n', '\n', '    event OperatorTransferred(\n', '        address indexed previousOperator,\n', '        address indexed newOperator\n', '    );\n', '\n', '    constructor() internal {\n', '        _operator = _msgSender();\n', '        emit OperatorTransferred(address(0), _operator);\n', '    }\n', '\n', '    function operator() public view returns (address) {\n', '        return _operator;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(\n', '            _operator == msg.sender,\n', "            'operator: caller is not the operator'\n", '        );\n', '        _;\n', '    }\n', '\n', '    function isOperator() public view returns (bool) {\n', '        return _msgSender() == _operator;\n', '    }\n', '\n', '    function transferOperator(address newOperator_) public onlyOwner {\n', '        _transferOperator(newOperator_);\n', '    }\n', '\n', '    function _transferOperator(address newOperator_) internal {\n', '        require(\n', '            newOperator_ != address(0),\n', "            'operator: zero address given for new operator'\n", '        );\n', '        emit OperatorTransferred(address(0), newOperator_);\n', '        _operator = newOperator_;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Epoch.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract Epoch is Operator {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private period;\n', '    uint256 private startTime;\n', '    uint256 private lastExecutedAt;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(\n', '        uint256 _period,\n', '        uint256 _startTime,\n', '        uint256 _startEpoch\n', '    ) public {\n', "        require(_startTime > block.timestamp, 'Epoch: invalid start time');\n", '        period = _period;\n', '        startTime = _startTime;\n', '        lastExecutedAt = startTime.add(_startEpoch.mul(period));\n', '    }\n', '\n', '    /* ========== Modifier ========== */\n', '\n', '    modifier checkStartTime {\n', "        require(now >= startTime, 'Epoch: not started yet');\n", '\n', '        _;\n', '    }\n', '\n', '    modifier checkEpoch {\n', "        require(now > startTime, 'Epoch: not started yet');\n", "        require(getCurrentEpoch() >= getNextEpoch(), 'Epoch: not allowed');\n", '\n', '        _;\n', '\n', '        lastExecutedAt = block.timestamp;\n', '    }\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    // epoch\n', '    function getLastEpoch() public view returns (uint256) {\n', '        return lastExecutedAt.sub(startTime).div(period);\n', '    }\n', '\n', '    function getCurrentEpoch() public view returns (uint256) {\n', '        return Math.max(startTime, block.timestamp).sub(startTime).div(period);\n', '    }\n', '\n', '    function getNextEpoch() public view returns (uint256) {\n', '        if (startTime == lastExecutedAt) {\n', '            return getLastEpoch();\n', '        }\n', '        return getLastEpoch().add(1);\n', '    }\n', '\n', '    function nextEpochPoint() public view returns (uint256) {\n', '        return startTime.add(getNextEpoch().mul(period));\n', '    }\n', '\n', '    // params\n', '    function getPeriod() public view returns (uint256) {\n', '        return period;\n', '    }\n', '\n', '    function getStartTime() public view returns (uint256) {\n', '        return startTime;\n', '    }\n', '\n', '    /* ========== GOVERNANCE ========== */\n', '\n', '    function setPeriod(uint256 _period) external onlyOperator {\n', '        period = _period;\n', '    }\n', '}\n', '\n', '// File: contracts/ProRataRewardCheckpoint.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// This is forked and modified from https://github.com/BarnBridge/BarnBridge-YieldFarming/blob/master/contracts/Staking.sol\n', 'contract ProRataRewardCheckpoint {\n', '    using SafeMath for uint256;\n', '    uint256 internal epochDuration;\n', '    uint256 internal epoch1Start;\n', '    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\n', '    address private stakeToken;\n', '\n', '    struct Pool {\n', '        uint256 size;\n', '        bool set;\n', '    }\n', '\n', '    // for each token, we store the total pool size\n', '    mapping(uint256 => Pool) private poolSize;\n', '\n', '\n', '    // a checkpoint of the valid balance of a user for an epoch\n', '    struct Checkpoint {\n', '        uint128 epochId;\n', '        uint128 multiplier;\n', '        uint256 startBalance;\n', '        uint256 newDeposits;\n', '    }\n', '\n', '    // balanceCheckpoints[user][token][]\n', '    mapping(address => Checkpoint[]) private balanceCheckpoints;\n', '    uint128 private lastWithdrawEpochId;\n', '\n', '    constructor (uint256 _epochDuration, uint256 _epoch1Start, address _stakeToken) public {\n', '        epoch1Start = _epoch1Start;\n', '        epochDuration = _epochDuration;\n', '        stakeToken = _stakeToken;\n', '    }\n', '\n', '    // this is the fork from deposit\n', '    function depositCheckpoint(address user, uint256 amount, uint256 previousAmount, uint128 currentEpoch) internal {\n', '        IERC20 token = IERC20(stakeToken);\n', '\n', '        // epoch logic\n', '        uint128 currentMultiplier = currentEpochMultiplier(currentEpoch);\n', '\n', '        if (!epochIsInitialized(currentEpoch)) {\n', '            manualEpochInit(currentEpoch, currentEpoch);\n', '        }\n', '\n', '        // update the next epoch pool size\n', '        Pool storage pNextEpoch = poolSize[currentEpoch + 1];\n', '        pNextEpoch.size = token.balanceOf(address(this));\n', '        pNextEpoch.set = true;\n', '\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\n', '\n', '        uint256 balanceBefore = getEpochUserBalance(user, currentEpoch);\n', '\n', "        // if there's no checkpoint yet, it means the user didn't have any activity\n", '        // we want to store checkpoints both for the current epoch and next epoch because\n', '        // if a user does a withdraw, the current epoch can also be modified and\n', "        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\n", '        if (checkpoints.length == 0) {\n', '            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\n', '\n', '            // next epoch => multiplier is 1, epoch deposits is 0\n', '            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\n', '        } else {\n', '            uint256 last = checkpoints.length - 1;\n', '\n', '            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\n', '            if (checkpoints[last].epochId < currentEpoch) {\n', '                uint128 multiplier = computeNewMultiplier(\n', '                    getCheckpointBalance(checkpoints[last]),\n', '                    BASE_MULTIPLIER,\n', '                    amount,\n', '                    currentMultiplier\n', '                );\n', '                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\n', '                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, previousAmount.add(amount), 0));\n', '            }\n', '            // the last action happened in the previous epoch\n', '            else if (checkpoints[last].epochId == currentEpoch) {\n', '                checkpoints[last].multiplier = computeNewMultiplier(\n', '                    getCheckpointBalance(checkpoints[last]),\n', '                    checkpoints[last].multiplier,\n', '                    amount,\n', '                    currentMultiplier\n', '                );\n', '                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\n', '\n', '                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, previousAmount.add(amount), 0));\n', '            }\n', '            // the last action happened in the current epoch\n', '            else {\n', '                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\n', '                    checkpoints[last - 1].multiplier = computeNewMultiplier(\n', '                        getCheckpointBalance(checkpoints[last - 1]),\n', '                        checkpoints[last - 1].multiplier,\n', '                        amount,\n', '                        currentMultiplier\n', '                    );\n', '                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\n', '                }\n', '\n', '                checkpoints[last].startBalance = previousAmount.add(amount);\n', '            }\n', '        }\n', '\n', '        uint256 balanceAfter = getEpochUserBalance(user, currentEpoch);\n', '\n', '        poolSize[currentEpoch].size = poolSize[currentEpoch].size.add(balanceAfter.sub(balanceBefore));\n', '    }\n', '\n', '    // this is the fork from withdraw\n', '   function withdrawCheckpoint(address user, uint256 amount, uint256 previousAmount, uint128 currentEpoch) internal {\n', '        IERC20 token = IERC20(stakeToken);\n', '        lastWithdrawEpochId = currentEpoch;\n', '\n', '        if (!epochIsInitialized(currentEpoch)) {\n', '            manualEpochInit(currentEpoch, currentEpoch);\n', '        }\n', '\n', '        // update the pool size of the next epoch to its current balance\n', '        Pool storage pNextEpoch = poolSize[currentEpoch + 1];\n', '        pNextEpoch.size = token.balanceOf(address(this));\n', '        pNextEpoch.set = true;\n', '\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\n', '        uint256 last = checkpoints.length - 1;\n', '\n', "        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\n", '\n', '        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\n', '        if (checkpoints[last].epochId < currentEpoch) {\n', '            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, previousAmount.sub(amount), 0));\n', '\n', '            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(amount);\n', '        }\n', '        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\n', '        else if (checkpoints[last].epochId == currentEpoch) {\n', '            checkpoints[last].startBalance = previousAmount.sub(amount);\n', '            checkpoints[last].newDeposits = 0;\n', '            checkpoints[last].multiplier = BASE_MULTIPLIER;\n', '\n', '            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(amount);\n', '        }\n', '        // there was a deposit in the current epoch\n', '        else {\n', '            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\n', '\n', '            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n', '\n', '            // in case of withdraw, we have 2 branches:\n', '            // 1. the user withdraws less than he added in the current epoch\n', '            // 2. the user withdraws more than he added in the current epoch (including 0)\n', '            if (amount < currentEpochCheckpoint.newDeposits) {\n', '                uint128 avgDepositMultiplier = uint128(\n', '                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\n', '                );\n', '\n', '                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\n', '\n', '                currentEpochCheckpoint.multiplier = computeNewMultiplier(\n', '                    currentEpochCheckpoint.startBalance,\n', '                    BASE_MULTIPLIER,\n', '                    currentEpochCheckpoint.newDeposits,\n', '                    avgDepositMultiplier\n', '                );\n', '            } else {\n', '                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\n', '                    amount.sub(currentEpochCheckpoint.newDeposits)\n', '                );\n', '                currentEpochCheckpoint.newDeposits = 0;\n', '                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\n', '            }\n', '\n', '            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n', '\n', '            poolSize[currentEpoch].size = poolSize[currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\n', '\n', '            checkpoints[last].startBalance = previousAmount.sub(amount);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\n', '     * A deposit will only change the next epoch balance.\n', '     * A withdraw will decrease the current epoch (and subsequent) balance.\n', '     */\n', '    function getEpochUserBalance(address user, uint128 epochId) public view returns (uint256) {\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[user];\n', '\n', '        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\n', '        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\n', '            return 0;\n', '        }\n', '\n', '        uint min = 0;\n', '        uint max = checkpoints.length - 1;\n', '\n', '        // shortcut for blocks newer than the latest checkpoint == current balance\n', '        if (epochId >= checkpoints[max].epochId) {\n', '            return getCheckpointEffectiveBalance(checkpoints[max]);\n', '        }\n', '\n', '        // binary search of the value in the array\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].epochId <= epochId) {\n', '                min = mid;\n', '            } else {\n', '                max = mid - 1;\n', '            }\n', '        }\n', '\n', '        return getCheckpointEffectiveBalance(checkpoints[min]);\n', '    }\n', '\n', '\n', '    /*\n', '     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\n', '     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\n', '     * Any deposit and withdraw will automatically initialize the current and next epoch.\n', '     */\n', '    function manualEpochInit(uint128 epochId, uint128 currentEpoch) internal {\n', '        require(epochId <= currentEpoch, "can\'t init a future epoch");\n', '\n', '        Pool storage p = poolSize[epochId];\n', '\n', '        if (epochId == 0) {\n', '            p.size = uint256(0);\n', '            p.set = true;\n', '        } else {\n', '            require(!epochIsInitialized(epochId), "Staking: epoch already initialized");\n', '            require(epochIsInitialized(epochId - 1), "Staking: previous epoch not initialized");\n', '\n', '            p.size = poolSize[epochId - 1].size;\n', '            p.set = true;\n', '        }\n', '\n', '\n', '        // emit ManualEpochInit(msg.sender, epochId, tokens);\n', '    }\n', '\n', '    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\n', '        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\n', '        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\n', '        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\n', '\n', '        return newMultiplier;\n', '    }\n', '\n', '    /*\n', '     * Returns the percentage of time left in the current epoch\n', '     */\n', '    function currentEpochMultiplier(uint128 currentEpoch) public view returns (uint128) {\n', '        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\n', '        uint256 timeLeft = currentEpochEnd - block.timestamp;\n', '        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\n', '\n', '        return multiplier;\n', '    }\n', '\n', '    /*\n', '     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\n', '    */\n', '    function getEpochPoolSize(uint128 epochId) public view returns (uint256) {\n', '        // Premises:\n', "        // 1. it's impossible to have gaps of uninitialized epochs\n", '        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\n', '        if (epochIsInitialized(epochId)) {\n', '            return poolSize[epochId].size;\n', '        }\n', '\n', '        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\n', '        if (!epochIsInitialized(0)) {\n', '            return 0;\n', '        }\n', '\n', '        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\n', '        // which means the current pool size is equal to the current balance of token held by the staking contract\n', '        IERC20 token = IERC20(stakeToken);\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /*\n', '     * Checks if an epoch is initialized, meaning we have a pool size set for it\n', '     */\n', '    function epochIsInitialized(uint128 epochId) public view returns (bool) {\n', '        return poolSize[epochId].set;\n', '    }\n', '\n', '    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\n', '        return c.startBalance.add(c.newDeposits);\n', '    }\n', '\n', '    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\n', '        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IFeeDistributorRecipient.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'abstract contract IFeeDistributorRecipient is Ownable {\n', '    address public feeDistributor;\n', '\n', '    modifier onlyFeeDistributor() {\n', '        require(\n', '            _msgSender() == feeDistributor,\n', "            'Caller is not fee distributor'\n", '        );\n', '        _;\n', '    }\n', '\n', '    function setFeeDistributor(address _feeDistributor)\n', '        external\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        feeDistributor = _feeDistributor;\n', '    }\n', '}\n', '\n', '// File: contracts/Boardroomv2.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ShareWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public share;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function stake(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        share.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public virtual {\n', '        uint256 directorShare = _balances[msg.sender];\n', '        require(\n', '            directorShare >= amount,\n', "            'Boardroom: withdraw request greater than staked amount'\n", '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = directorShare.sub(amount);\n', '        share.safeTransfer(msg.sender, amount);\n', '    }\n', '}\n', '\n', 'contract Boardroomv2 is ShareWrapper, ContractGuard, Epoch, ProRataRewardCheckpoint, IFeeDistributorRecipient{\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== DATA STRUCTURES ========== */\n', '\n', '    struct Boardseat {\n', '        uint256 lastSnapshotIndex;\n', '        uint256 startEpoch;\n', '        uint256 lastEpoch;\n', '        mapping(uint256 => uint256) rewardEarned;\n', '    }\n', '\n', '    struct BoardSnapshot {\n', '        uint256 time;\n', '        uint256 rewardReceived;\n', '        uint256 rewardPerShare;\n', '    }\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    IERC20 private cash;\n', '\n', '    mapping(address => Boardseat) private directors;\n', '    BoardSnapshot[] private boardHistory;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(IERC20 _cash, IERC20 _share, uint256 _startTime)\n', '        public Epoch(24 hours, _startTime, 0)\n', '        ProRataRewardCheckpoint(6 hours, _startTime, address(_share))\n', '    {\n', '        cash = _cash;\n', '        share = _share;\n', '\n', '        BoardSnapshot memory genesisSnapshot = BoardSnapshot({\n', '            time: block.number,\n', '            rewardReceived: 0,\n', '            rewardPerShare: 0\n', '        });\n', '        boardHistory.push(genesisSnapshot);\n', '    }\n', '\n', '    /* ========== Modifiers =============== */\n', '    modifier directorExists {\n', '        require(\n', '            balanceOf(msg.sender) > 0,\n', "            'Boardroom: The director does not exist'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier updateReward(address director) {\n', '        if (director != address(0)) {\n', '            Boardseat storage seat = directors[director];\n', '            uint256 currentEpoch = getCurrentEpoch();\n', '\n', '            seat.rewardEarned[currentEpoch] = seat.rewardEarned[currentEpoch].add(earnedNew(director));\n', '            seat.lastEpoch = currentEpoch;\n', '            seat.lastSnapshotIndex = latestSnapshotIndex();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    function calculateClaimableRewardsForEpoch(address wallet, uint256 epoch) view public returns (uint256) {\n', '        return calculateClaimable(directors[wallet].rewardEarned[epoch], epoch);\n', '    }\n', '\n', '    function calculateClaimable(uint256 earned, uint256 epoch) view public returns (uint256) {\n', '        uint256 epoch_delta = getCurrentEpoch() - epoch;\n', '\n', '        uint256 ten = 10;\n', '        uint256 five = 5;\n', '        uint256 tax_percentage = (epoch_delta > 4) ? 0 : ten.mul(five.sub(epoch_delta));\n', '\n', '        uint256 hundred = 100;\n', '        return earned.mul(hundred.sub(tax_percentage)).div(hundred);\n', '    }\n', '\n', '    // staking before start time regards as staking at epoch 0.\n', '    function getCheckpointEpoch() view public returns(uint128) {\n', '        if (block.timestamp < epoch1Start) {\n', '            return 0;\n', '        }\n', '        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\n', '    }\n', '\n', '    // =========== Snapshot getters\n', '\n', '    function latestSnapshotIndex() public view returns (uint256) {\n', '        return boardHistory.length.sub(1);\n', '    }\n', '\n', '    function getLatestSnapshot() internal view returns (BoardSnapshot memory) {\n', '        return boardHistory[latestSnapshotIndex()];\n', '    }\n', '\n', '    function getLastSnapshotIndexOf(address director)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return directors[director].lastSnapshotIndex;\n', '    }\n', '\n', '    function getLastSnapshotOf(address director)\n', '        internal\n', '        view\n', '        returns (BoardSnapshot memory)\n', '    {\n', '        return boardHistory[getLastSnapshotIndexOf(director)];\n', '    }\n', '\n', '    // =========== Director getters\n', '\n', '    function rewardPerShare() public view returns (uint256) {\n', '        return getLatestSnapshot().rewardPerShare;\n', '    }\n', '\n', '    function earned(address director) public view returns (uint256) {\n', '        uint256 totalRewards = 0;\n', '\n', '        for (uint i = directors[director].startEpoch; i <= directors[director].lastEpoch; i++) {\n', '            totalRewards = totalRewards.add(calculateClaimableRewardsForEpoch(director, i));\n', '        }\n', '\n', '        return totalRewards;\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    function stake(uint256 amount)\n', '        public\n', '        override\n', '        onlyOneBlock\n', '        updateReward(msg.sender)\n', '    {\n', "        require(amount > 0, 'Boardroom: Cannot stake 0');\n", '        uint256 previousBalance = balanceOf(msg.sender);\n', '        super.stake(amount);\n', '        depositCheckpoint(msg.sender, amount, previousBalance, getCheckpointEpoch());\n', '\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount)\n', '        public\n', '        override\n', '        onlyOneBlock\n', '        directorExists\n', '        updateReward(msg.sender)\n', '    {\n', "        require(amount > 0, 'Boardroom: Cannot withdraw 0');\n", '        uint256 previousBalance = balanceOf(msg.sender);\n', '        super.withdraw(amount);\n', '        withdrawCheckpoint(msg.sender, amount, previousBalance, getCheckpointEpoch());\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '\n', '        claimReward(earned(msg.sender));\n', '    }\n', '\n', '    function claimReward(uint256 amount)\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', "        require(amount > 0, 'Amount cannot be zero');\n", '        uint256 totalClaimAmount = amount;\n', '        uint256 totalEarned = earned(msg.sender);\n', "        require(amount <= totalEarned, 'Amount cannot be larger than total claimable rewards');\n", '\n', '        cash.safeTransfer(msg.sender, amount);\n', '\n', '        for (uint i = directors[msg.sender].startEpoch; amount > 0; i++) {\n', '            uint256 claimable = calculateClaimableRewardsForEpoch(msg.sender, i);\n', '\n', '            if (amount > claimable) {\n', '                directors[msg.sender].rewardEarned[i] = 0;\n', '                directors[msg.sender].startEpoch = i.add(1);\n', '                amount = amount.sub(claimable);\n', '            } else {\n', '                removeRewardsForEpoch(msg.sender, amount, i);\n', '                amount = 0;\n', '            }\n', '        }\n', '\n', '        // In this case, startEpoch will be calculated again for the next stake\n', '        if (amount == totalEarned) {\n', '            directors[msg.sender].startEpoch = 0;\n', '        }\n', '\n', '        emit RewardPaid(msg.sender, totalClaimAmount);\n', '    }\n', '\n', '    // Claim rewards for specific epoch\n', '    function claimRewardsForEpoch(uint256 amount, uint256 epoch)\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', "        require(amount > 0, 'Amount cannot be zero');\n", '\n', '        uint256 claimable = calculateClaimableRewardsForEpoch(msg.sender, epoch);\n', '\n', '        if (claimable > 0) {\n', '            require(\n', '                amount <= claimable,\n', "                'Amount cannot be larger than the claimable rewards for the epoch'\n", '            );\n', '\n', '            cash.safeTransfer(msg.sender, amount);\n', '\n', '            removeRewardsForEpoch(msg.sender, amount, epoch);\n', '        }\n', '    }\n', '\n', '    function allocateSeigniorage(uint256 amount)\n', '        external\n', '        onlyOneBlock\n', '        onlyOperator\n', '    {\n', "        require(amount > 0, 'Boardroom: Cannot allocate 0');\n", '        require(\n', '            totalSupply() > 0,\n', "            'Boardroom: Cannot allocate when totalSupply is 0'\n", '        );\n', '\n', '        // Create & add new snapshot\n', '        BoardSnapshot memory latestSnapshot = getLatestSnapshot();\n', '        uint256 prevRPS = latestSnapshot.rewardPerShare;\n', '        uint256 poolSize = getEpochPoolSize(getCheckpointEpoch());\n', '        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(poolSize));\n', '\n', '        BoardSnapshot memory newSnapshot = BoardSnapshot({\n', '            time: block.number,\n', '            rewardReceived: amount,\n', '            rewardPerShare: nextRPS\n', '        });\n', '        boardHistory.push(newSnapshot);\n', '\n', '        cash.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit RewardAdded(msg.sender, amount);\n', '    }\n', '\n', '    /*\n', '     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\n', '     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\n', '     * Any deposit and withdraw will automatically initialize the current and next epoch.\n', '     */\n', '    function manualCheckpointEpochInit(uint128 checkpointEpochId) public {\n', '        manualEpochInit(checkpointEpochId, getCheckpointEpoch());\n', '    }\n', '\n', '    function allocateTaxes(uint256 amount)\n', '        external\n', '        onlyOneBlock\n', '        onlyFeeDistributor\n', '    {\n', "        require(amount > 0, 'Boardroom: Cannot allocate 0');\n", '        require(\n', '            totalSupply() > 0,\n', "            'Boardroom: Cannot allocate when totalSupply is 0'\n", '        );\n', '        // Create & add new snapshot\n', '        BoardSnapshot memory latestSnapshot = getLatestSnapshot();\n', '        uint256 prevRPS = latestSnapshot.rewardPerShare;\n', '        uint256 poolSize = getEpochPoolSize(getCheckpointEpoch());\n', '        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(poolSize));\n', '\n', '        BoardSnapshot memory newSnapshot = BoardSnapshot({\n', '            time: block.number,\n', '            rewardReceived: amount,\n', '            rewardPerShare: nextRPS\n', '        });\n', '        boardHistory.push(newSnapshot);\n', '\n', '        cash.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit RewardAdded(msg.sender, amount);\n', '\n', '    }\n', '\n', '    function earnedNew(address director) private view returns (uint256) {\n', '        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\n', '        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\n', '        uint256 directorEffectiveBalance = getEpochUserBalance(director, getCheckpointEpoch());\n', '\n', '        return\n', '            directorEffectiveBalance.mul(latestRPS.sub(storedRPS)).div(1e18);\n', '    }\n', '\n', '    function removeRewardsForEpoch(address wallet, uint256 amount, uint256 epoch) private\n', '        onlyOneBlock\n', '    {\n', '        uint256 claimable = calculateClaimableRewardsForEpoch(wallet, epoch);\n', '\n', '        if (claimable > 0) {\n', '            require(\n', '                amount <= claimable,\n', "                'Amount cannot be larger than the claimable rewards for the epoch'\n", '            );\n', '\n', '            directors[wallet].rewardEarned[epoch] =\n', '                claimable.sub(amount).mul(directors[wallet].rewardEarned[epoch]).div(claimable);\n', '        }\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event RewardAdded(address indexed user, uint256 reward);\n', '}']