['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'contract SAFESaviourRegistry {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "SAFESaviourRegistry/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Other Modifiers ---\n', '    modifier isSaviour {\n', '        require(saviours[msg.sender] == 1, "SAFESaviourRegistry/not-a-saviour");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Minimum amount of time that needs to elapse for a specific SAFE to be saved again\n', '    uint256 public saveCooldown;\n', '\n', '    // Timestamp for the last time when a specific SAFE has been saved\n', '    mapping(bytes32 => mapping(address => uint256)) public lastSaveTime;\n', '\n', '    // Whitelisted saviours\n', '    mapping(address => uint256) public saviours;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(bytes32 parameter, uint256 val);\n', '    event ToggleSaviour(address saviour, uint256 whitelistState);\n', '    event MarkSave(bytes32 indexed collateralType, address indexed safeHandler);\n', '\n', '    constructor(uint256 saveCooldown_) public {\n', '        require(saveCooldown_ > 0, "SAFESaviourRegistry/null-save-cooldown");\n', '        authorizedAccounts[msg.sender] = 1;\n', '        saveCooldown = saveCooldown_;\n', '        emit ModifyParameters("saveCooldown", saveCooldown_);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Math ---\n', '    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "SAFESaviourRegistry/add-uint-uint-overflow");\n', '    }\n', '\n', '    // --- Administration ---\n', '    /*\n', '    * @notice Change the saveCooldown value\n', '    * @param parameter Name of the parameter to change\n', '    * @param val The new value for the param\n', '    */\n', '    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n', '        require(val > 0, "SAFESaviourRegistry/null-val");\n', '        if (parameter == "saveCooldown") {\n', '          saveCooldown = val;\n', '        } else revert("SAFESaviourRegistry/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, val);\n', '    }\n', '    /*\n', '    * @notice Whitelist/blacklist a saviour contract\n', '    * @param saviour The saviour contract to whitelist/blacklist\n', '    */\n', '    function toggleSaviour(address saviour) external isAuthorized {\n', '        if (saviours[saviour] == 0) {\n', '          saviours[saviour] = 1;\n', '        } else {\n', '          saviours[saviour] = 0;\n', '        }\n', '        emit ToggleSaviour(saviour, saviours[saviour]);\n', '    }\n', '\n', '    // --- Core Logic ---\n', '    /*\n', '    * @notice Mark a new SAFE as just having been saved\n', '    * @param collateralType The collateral type backing the SAFE\n', "    * @param safeHandler The SAFE's handler\n", '    */\n', '    function markSave(bytes32 collateralType, address safeHandler) external isSaviour {\n', '        require(\n', '          either(lastSaveTime[collateralType][safeHandler] == 0,\n', '          addition(lastSaveTime[collateralType][safeHandler], saveCooldown) < now),\n', '          "SAFESaviourRegistry/wait-more-to-save"\n', '        );\n', '        lastSaveTime[collateralType][safeHandler] = now;\n', '        emit MarkSave(collateralType, safeHandler);\n', '    }\n', '}']