['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '// File: localhost/helpers/VaultParameters.sol\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @title Auth\n', " * @dev Manages USDP's system access\n", ' **/\n', 'contract Auth {\n', '\n', '    // address of the the contract with vault parameters\n', '    VaultParameters public vaultParameters;\n', '\n', '    constructor(address _parameters) public {\n', '        vaultParameters = VaultParameters(_parameters);\n', '    }\n', '\n', "    // ensures tx's sender is a manager\n", '    modifier onlyManager() {\n', '        require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is able to modify the Vault\n", '    modifier hasVaultAccess() {\n', '        require(vaultParameters.canModifyVault(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is the Vault\n", '    modifier onlyVault() {\n', '        require(msg.sender == vaultParameters.vault(), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VaultParameters\n', ' **/\n', 'contract VaultParameters is Auth {\n', '\n', '    // map token to stability fee percentage; 3 decimals\n', '    mapping(address => uint) public stabilityFee;\n', '\n', '    // map token to liquidation fee percentage, 0 decimals\n', '    mapping(address => uint) public liquidationFee;\n', '\n', '    // map token to USDP mint limit\n', '    mapping(address => uint) public tokenDebtLimit;\n', '\n', '    // permissions to modify the Vault\n', '    mapping(address => bool) public canModifyVault;\n', '\n', '    // managers\n', '    mapping(address => bool) public isManager;\n', '\n', '    // enabled oracle types\n', '    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\n', '\n', '    // address of the Vault\n', '    address payable public vault;\n', '\n', '    // The foundation address\n', '    address public foundation;\n', '\n', '    /**\n', '     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\n', '     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\n', '     * hashed with Keccak-256.\n', '     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\n', '    **/\n', '    constructor(address payable _vault, address _foundation) public Auth(address(this)) {\n', '        require(_vault != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        require(_foundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        isManager[msg.sender] = true;\n', '        vault = _vault;\n', '        foundation = _foundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', "     * @dev Grants and revokes manager's status of any address\n", '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setManager(address who, bool permit) external onlyManager {\n', '        isManager[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the foundation address\n', '     * @param newFoundation The new foundation address\n', '     **/\n', '    function setFoundation(address newFoundation) external onlyManager {\n', '        require(newFoundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        foundation = newFoundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets ability to use token as the main collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\n', '     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\n', '     * @param usdpLimit The USDP token issue limit\n', '     * @param oracles The enables oracle types\n', '     **/\n', '    function setCollateral(\n', '        address asset,\n', '        uint stabilityFeeValue,\n', '        uint liquidationFeeValue,\n', '        uint usdpLimit,\n', '        uint[] calldata oracles\n', '    ) external onlyManager {\n', '        setStabilityFee(asset, stabilityFeeValue);\n', '        setLiquidationFee(asset, liquidationFeeValue);\n', '        setTokenDebtLimit(asset, usdpLimit);\n', '        for (uint i=0; i < oracles.length; i++) {\n', '            setOracleType(oracles[i], asset, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets a permission for an address to modify the Vault\n', '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setVaultAccess(address who, bool permit) external onlyManager {\n', '        canModifyVault[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the year stability fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The stability fee percentage (3 decimals)\n', '     **/\n', '    function setStabilityFee(address asset, uint newValue) public onlyManager {\n', '        stabilityFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the liquidation fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The liquidation fee percentage (0 decimals)\n', '     **/\n', '    function setLiquidationFee(address asset, uint newValue) public onlyManager {\n', '        require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");\n', '        liquidationFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Enables/disables oracle types\n', '     * @param _type The type of the oracle\n', '     * @param asset The address of the main collateral token\n', '     * @param enabled The control flag\n', '     **/\n', '    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\n', '        isOracleTypeEnabled[_type][asset] = enabled;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets USDP limit for a specific collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param limit The limit number\n', '     **/\n', '    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\n', '        tokenDebtLimit[asset] = limit;\n', '    }\n', '}\n', '\n', '// File: localhost/abstract/OracleSimple.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @title OracleSimple\n', ' **/\n', 'abstract contract OracleSimple {\n', '    // returns Q112-encoded value\n', '    function assetToUsd(address asset, uint amount) public virtual view returns (uint) {}\n', '}\n', '\n', '\n', '/**\n', ' * @title OracleSimplePoolToken\n', ' **/\n', 'abstract contract OracleSimplePoolToken is OracleSimple {\n', '    ChainlinkedOracleSimple public oracleMainAsset;\n', '}\n', '\n', '\n', '/**\n', ' * @title ChainlinkedOracleSimple\n', ' **/\n', 'abstract contract ChainlinkedOracleSimple is OracleSimple {\n', '    address public WETH;\n', '    // returns ordinary value\n', '    function ethToUsd(uint ethAmount) public virtual view returns (uint) {}\n', '\n', '    // returns Q112-encoded value\n', '    function assetToEth(address asset, uint amount) public virtual view returns (uint) {}\n', '}\n', '\n', '// File: localhost/helpers/AggregatorInterface.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', 'interface AggregatorInterface {\n', '    function latestAnswer() external view returns (int256); // deprecated\n', '    function latestTimestamp() external view returns (uint256); // deprecated\n', '    function latestRound() external view returns (uint256);\n', '    function decimals() external view returns (uint256);\n', '\n', '    function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '}\n', '\n', '// File: localhost/helpers/SafeMath.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: localhost/impl/ChainlinkedOracleMainAsset.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.6.8;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'interface ERC20 {\n', '    function decimals() external view returns(uint8);\n', '}\n', '\n', '/**\n', ' * @title ChainlinkedOracleMainAsset\n', ' * @dev Calculates the USD price of desired tokens\n', ' **/\n', 'contract ChainlinkedOracleMainAsset is ChainlinkedOracleSimple, Auth {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => address) public usdAggregators;\n', '    mapping (address => address) public ethAggregators;\n', '\n', '    uint public constant Q112 = 2 ** 112;\n', '\n', '    uint public constant USD_TYPE = 0;\n', '    uint public constant ETH_TYPE = 1;\n', '\n', '    event NewAggregator(address indexed asset, address indexed aggregator, uint aggType);\n', '\n', '    constructor(\n', '        address[] memory tokenAddresses1,\n', '        address[] memory _usdAggregators,\n', '        address[] memory tokenAddresses2,\n', '        address[] memory _ethAggregators,\n', '        address weth,\n', '        address vaultParameters\n', '    )\n', '        public\n', '        Auth(vaultParameters)\n', '    {\n', '        require(tokenAddresses1.length == _usdAggregators.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        require(tokenAddresses2.length == _ethAggregators.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        require(weth != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        require(vaultParameters != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        WETH = weth;\n', '\n', '        for (uint i = 0; i < tokenAddresses1.length; i++) {\n', '            usdAggregators[tokenAddresses1[i]] = _usdAggregators[i];\n', '            emit NewAggregator(tokenAddresses1[i], _usdAggregators[i], USD_TYPE);\n', '        }\n', '\n', '        for (uint i = 0; i < tokenAddresses2.length; i++) {\n', '            ethAggregators[tokenAddresses2[i]] = _ethAggregators[i];\n', '            emit NewAggregator(tokenAddresses2[i], _ethAggregators[i], ETH_TYPE);\n', '        }\n', '    }\n', '\n', '    function setAggeregators(\n', '        address[] calldata tokenAddresses1,\n', '        address[] calldata _usdAggregators,\n', '        address[] calldata tokenAddresses2,\n', '        address[] calldata _ethAggregators\n', '    ) external onlyManager {\n', '        require(tokenAddresses1.length == _usdAggregators.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        require(tokenAddresses2.length == _ethAggregators.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '\n', '        for (uint i = 0; i < tokenAddresses1.length; i++) {\n', '            usdAggregators[tokenAddresses1[i]] = _usdAggregators[i];\n', '            emit NewAggregator(tokenAddresses1[i], _usdAggregators[i], USD_TYPE);\n', '        }\n', '\n', '        for (uint i = 0; i < tokenAddresses2.length; i++) {\n', '            ethAggregators[tokenAddresses2[i]] = _ethAggregators[i];\n', '            emit NewAggregator(tokenAddresses2[i], _ethAggregators[i], ETH_TYPE);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice {asset}/USD or {asset}/ETH pair must be registered at Chainlink\n', '     * @param asset The token address\n', '     * @param amount Amount of tokens\n', '     * @return Q112-encoded price of asset amount in USD\n', '     **/\n', '    function assetToUsd(address asset, uint amount) public override view returns (uint) {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '        if (usdAggregators[asset] != address(0)) {\n', '            return _assetToUsd(asset, amount);\n', '        }\n', '        return ethToUsd(assetToEth(asset, amount));\n', '    }\n', '\n', '    function _assetToUsd(address asset, uint amount) internal view returns (uint) {\n', '        AggregatorInterface agg = AggregatorInterface(usdAggregators[asset]);\n', '        (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();\n', '        require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");\n', '        require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");\n', '        int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());\n', '        if (decimals < 0) {\n', '            return amount.mul(uint(answer)).mul(Q112).div(10 ** uint(-decimals));\n', '        } else {\n', '            return amount.mul(uint(answer)).mul(Q112).mul(10 ** uint(decimals));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice {asset}/ETH pair must be registered at Chainlink\n', '     * @param asset The token address\n', '     * @param amount Amount of tokens\n', '     * @return Q112-encoded price of asset amount in ETH\n', '     **/\n', '    function assetToEth(address asset, uint amount) public view override returns (uint) {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '        if (asset == WETH) {\n', '            return amount.mul(Q112);\n', '        }\n', '        AggregatorInterface agg = AggregatorInterface(ethAggregators[asset]);\n', '        require(address(agg) != address (0), "Unit Protocol: AGGREGATOR_DOES_NOT_EXIST");\n', '        (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();\n', '        require(updatedAt > block.timestamp - 24 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");\n', '        require(answer >= 0, "Unit Protocol: NEGATIVE_CHAINLINK_PRICE");\n', '        int decimals = 18 - int(ERC20(asset).decimals()) - int(agg.decimals());\n', '        if (decimals < 0) {\n', '            return amount.mul(uint(answer)).mul(Q112).div(10 ** uint(-decimals));\n', '        } else {\n', '            return amount.mul(uint(answer)).mul(Q112).mul(10 ** uint(decimals));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice ETH/USD price feed from Chainlink, see for more info: https://feeds.chain.link/eth-usd\n', '     * returns The price of given amount of Ether in USD (0 decimals)\n', '     **/\n', '    function ethToUsd(uint ethAmount) public override view returns (uint) {\n', '        AggregatorInterface agg = AggregatorInterface(usdAggregators[WETH]);\n', '        (, int256 answer, , uint256 updatedAt, ) = agg.latestRoundData();\n', '        require(updatedAt > block.timestamp - 6 hours, "Unit Protocol: STALE_CHAINLINK_PRICE");\n', '        return ethAmount.mul(uint(answer)).div(10 ** agg.decimals());\n', '    }\n', '}']