['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/Babylonian.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Babylonian {\n', '    function sqrt(uint256 y) internal pure returns (uint256 z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint256 x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// File: contracts/lib/FixedPoint.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint256 private constant Q112 = uint256(1) << RESOLUTION;\n', '    uint256 private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uq144x112 memory)\n', '    {\n', '        uint256 z;\n', '        require(\n', '            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\n', "            'FixedPoint: MULTIPLICATION_OVERFLOW'\n", '        );\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', "        require(denominator > 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', "        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self)\n', '        internal\n', '        pure\n', '        returns (uq112x112 memory)\n', '    {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ILinkswapFactory.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ILinkswapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 pairNum);\n', '\n', '    function LINK() external view returns (address);\n', '\n', '    function WETH() external view returns (address);\n', '\n', '    function YFL() external view returns (address);\n', '\n', '    function governance() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '    function priceOracle() external view returns (address);\n', '\n', '    // USD amounts should be 8 dp precision\n', '    // frontend should approve transfer of higher amount (e.g. 1.1x) due to price fluctuations\n', '    function linkListingFeeInUsd() external view returns (uint256);\n', '\n', '    function wethListingFeeInUsd() external view returns (uint256);\n', '\n', '    function yflListingFeeInUsd() external view returns (uint256);\n', '\n', '    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n', '    // the rest goes to governance\n', '    function treasuryListingFeeShare() external view returns (uint256);\n', '\n', '    function minListingLockupAmountInUsd() external view returns (uint256);\n', '\n', '    // if lockup amount is set to this or more, the lockup amount proportion of listing fee discount is fully unlocked\n', '    // if less than this amount, then lockup amount proportion of listing fee discount is linearly interpolated from the distance between min and target lockup amounts e.g. 60% towards target from min means 60% of lockup amount discount\n', '    function targetListingLockupAmountInUsd() external view returns (uint256);\n', '\n', '    // in seconds since unix epoch\n', '    // min lockup period for the listing lockup amount\n', '    function minListingLockupPeriod() external view returns (uint256);\n', '\n', '    // in seconds since unix epoch\n', '    // if lockup period is set to this or longer, the lockup time proportion of listing fee discount is fully unlocked\n', '    // if less than this period, then lockup time proportion of listing fee discount is linearly interpolated from the distance between min and target lockup times e.g. 60% towards target from min means 60% of lockup time discount\n', '    function targetListingLockupPeriod() external view returns (uint256);\n', '\n', '    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n', '    // rest of listing fee discount is determined by lockup period\n', '    function lockupAmountListingFeeDiscountShare() external view returns (uint256);\n', '\n', '    // need to divide fee percents by 1,000,000 e.g. 3000 is 0.3000%\n', '    function defaultLinkTradingFeePercent() external view returns (uint256);\n', '\n', '    function defaultNonLinkTradingFeePercent() external view returns (uint256);\n', '\n', '    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n', '    // the rest goes to governance\n', '    function treasuryProtocolFeeShare() external view returns (uint256);\n', '\n', '    // inverse of protocol fee fraction, then multiplied by 1000.\n', '    // e.g. if protocol fee is 3/7th of trading fee, then value = 7/3 * 1000 = 2333\n', '    // set to 0 to disable protocol fee\n', '    function protocolFeeFractionInverse() external view returns (uint256);\n', '\n', '    // need to divide by 100 e.g. 50 is 50%\n', '    function maxSlippagePercent() external view returns (uint256);\n', '\n', '    // max slippage resets after this many blocks\n', '    function maxSlippageBlocks() external view returns (uint256);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function approvedPair(address tokenA, address tokenB) external view returns (bool approved);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function approvePairViaGovernance(address tokenA, address tokenB) external;\n', '\n', '    function createPair(\n', '        address newToken,\n', '        uint256 newTokenAmount,\n', '        address lockupToken, // LINK or WETH\n', '        uint256 lockupTokenAmount,\n', '        uint256 lockupPeriod,\n', '        address listingFeeToken\n', '    ) external returns (address pair);\n', '\n', '    function setPriceOracle(address) external;\n', '\n', '    function setTreasury(address) external;\n', '\n', '    function setGovernance(address) external;\n', '\n', '    function setTreasuryProtocolFeeShare(uint256) external;\n', '\n', '    function setProtocolFeeFractionInverse(uint256) external;\n', '\n', '    function setLinkListingFeeInUsd(uint256) external;\n', '\n', '    function setWethListingFeeInUsd(uint256) external;\n', '\n', '    function setYflListingFeeInUsd(uint256) external;\n', '\n', '    function setTreasuryListingFeeShare(uint256) external;\n', '\n', '    function setMinListingLockupAmountInUsd(uint256) external;\n', '\n', '    function setTargetListingLockupAmountInUsd(uint256) external;\n', '\n', '    function setMinListingLockupPeriod(uint256) external;\n', '\n', '    function setTargetListingLockupPeriod(uint256) external;\n', '\n', '    function setLockupAmountListingFeeDiscountShare(uint256) external;\n', '\n', '    function setDefaultLinkTradingFeePercent(uint256) external;\n', '\n', '    function setDefaultNonLinkTradingFeePercent(uint256) external;\n', '\n', '    function setMaxSlippagePercent(uint256) external;\n', '\n', '    function setMaxSlippageBlocks(uint256) external;\n', '}\n', '\n', '// File: contracts/interfaces/ILinkswapERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ILinkswapERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interfaces/ILinkswapPair.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface ILinkswapPair is ILinkswapERC20 {\n', '    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '    event Lock(address indexed sender, uint256 lockupPeriod, uint256 liquidityLockupAmount);\n', '    event Unlock(address indexed sender, uint256 liquidityUnlocked);\n', '    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint256 amount0In,\n', '        uint256 amount1In,\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '    function addressToLockupExpiry(address) external view returns (uint256);\n', '\n', '    function addressToLockupAmount(address) external view returns (uint256);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function price0CumulativeLast() external view returns (uint256);\n', '\n', '    function price1CumulativeLast() external view returns (uint256);\n', '\n', '    function kLast() external view returns (uint256);\n', '\n', '    function tradingFeePercent() external view returns (uint256);\n', '\n', '    function lastSlippageBlocks() external view returns (uint256);\n', '\n', '    function priceAtLastSlippageBlocks() external view returns (uint256);\n', '\n', '    function lastSwapPrice() external view returns (uint256);\n', '\n', '    function mint(address to) external returns (uint256 liquidity);\n', '\n', '    function lock(uint256 lockupPeriod, uint256 liquidityLockupAmount) external;\n', '\n', '    function unlock() external;\n', '\n', '    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function setTradingFeePercent(uint256 _tradingFeePercent) external;\n', '\n', '    // functions only callable by LinkswapFactory\n', '    function initialize(\n', '        address _token0,\n', '        address _token1,\n', '        uint256 _tradingFeePercent\n', '    ) external;\n', '\n', '    function listingLock(\n', '        address lister,\n', '        uint256 lockupPeriod,\n', '        uint256 liquidityLockupAmount\n', '    ) external;\n', '}\n', '\n', '// File: contracts/lib/SafeMathLinkswap.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMathLinkswap {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', '// File: contracts/lib/LinkswapLibrary.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'library LinkswapLibrary {\n', '    using SafeMathLinkswap for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', '        require(tokenA != tokenB, "LinkswapLibrary: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        require(token0 != address(0), "LinkswapLibrary: ZERO_ADDRESS");\n', '    }\n', '\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (address pair) {\n', '        pair = ILinkswapFactory(factory).getPair(tokenA, tokenB);\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) = ILinkswapPair(ILinkswapFactory(factory).getPair(tokenA, tokenB))\n', '            .getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "LinkswapLibrary: INSUFFICIENT_AMOUNT");\n', '        require(reserveA > 0 && reserveB > 0, "LinkswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 tradingFeePercent\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "LinkswapLibrary: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > 0, "LinkswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 amountInWithFee = amountIn.mul(uint256(1e6).sub(tradingFeePercent));\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1e6).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut,\n', '        uint256 tradingFeePercent\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "LinkswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(reserveIn > 0 && reserveOut > 0, "LinkswapLibrary: INSUFFICIENT_LIQUIDITY");\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(1e6);\n', '        uint256 denominator = (reserveOut.sub(amountOut)).mul(uint256(1e6).sub(tradingFeePercent));\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "LinkswapLibrary: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(\n', '                amounts[i],\n', '                reserveIn,\n', '                reserveOut,\n', '                ILinkswapPair(ILinkswapFactory(factory).getPair(path[i], path[i + 1])).tradingFeePercent()\n', '            );\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "LinkswapLibrary: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(\n', '                amounts[i],\n', '                reserveIn,\n', '                reserveOut,\n', '                ILinkswapPair(ILinkswapFactory(factory).getPair(path[i - 1], path[i])).tradingFeePercent()\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/LinkswapOracleLibrary.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library LinkswapOracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2**32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(address pair)\n', '        internal\n', '        view\n', '        returns (\n', '            uint256 price0Cumulative,\n', '            uint256 price1Cumulative,\n', '            uint32 blockTimestamp\n', '        )\n', '    {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = ILinkswapPair(pair).price0CumulativeLast();\n', '        price1Cumulative = ILinkswapPair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        ) = ILinkswapPair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative +=\n', '                uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\n', '                timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative +=\n', '                uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\n', '                timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/owner/Operator.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract Operator is Context, Ownable {\n', '    address private _operator;\n', '\n', '    event OperatorTransferred(\n', '        address indexed previousOperator,\n', '        address indexed newOperator\n', '    );\n', '\n', '    constructor() internal {\n', '        _operator = _msgSender();\n', '        emit OperatorTransferred(address(0), _operator);\n', '    }\n', '\n', '    function operator() public view returns (address) {\n', '        return _operator;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(\n', '            _operator == msg.sender,\n', "            'operator: caller is not the operator'\n", '        );\n', '        _;\n', '    }\n', '\n', '    function isOperator() public view returns (bool) {\n', '        return _msgSender() == _operator;\n', '    }\n', '\n', '    function transferOperator(address newOperator_) public onlyOwner {\n', '        _transferOperator(newOperator_);\n', '    }\n', '\n', '    function _transferOperator(address newOperator_) internal {\n', '        require(\n', '            newOperator_ != address(0),\n', "            'operator: zero address given for new operator'\n", '        );\n', '        emit OperatorTransferred(address(0), newOperator_);\n', '        _operator = newOperator_;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Epoch.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract Epoch is Operator {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private period;\n', '    uint256 private startTime;\n', '    uint256 private lastExecutedAt;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(\n', '        uint256 _period,\n', '        uint256 _startTime,\n', '        uint256 _startEpoch\n', '    ) public {\n', "        require(_startTime > block.timestamp, 'Epoch: invalid start time');\n", '        period = _period;\n', '        startTime = _startTime;\n', '        lastExecutedAt = startTime.add(_startEpoch.mul(period));\n', '    }\n', '\n', '    /* ========== Modifier ========== */\n', '\n', '    modifier checkStartTime {\n', "        require(now >= startTime, 'Epoch: not started yet');\n", '\n', '        _;\n', '    }\n', '\n', '    modifier checkEpoch {\n', "        require(now > startTime, 'Epoch: not started yet');\n", "        require(callable(), 'Epoch: not allowed');\n", '\n', '        _;\n', '\n', '        lastExecutedAt = block.timestamp;\n', '    }\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    function callable() public view returns (bool) {\n', '        return getCurrentEpoch() >= getNextEpoch();\n', '    }\n', '\n', '    // epoch\n', '    function getLastEpoch() public view returns (uint256) {\n', '        return lastExecutedAt.sub(startTime).div(period);\n', '    }\n', '\n', '    function getCurrentEpoch() public view returns (uint256) {\n', '        return Math.max(startTime, block.timestamp).sub(startTime).div(period);\n', '    }\n', '\n', '    function getNextEpoch() public view returns (uint256) {\n', '        if (startTime == lastExecutedAt) {\n', '            return getLastEpoch();\n', '        }\n', '        return getLastEpoch().add(1);\n', '    }\n', '\n', '    function nextEpochPoint() public view returns (uint256) {\n', '        return startTime.add(getNextEpoch().mul(period));\n', '    }\n', '\n', '    // params\n', '    function getPeriod() public view returns (uint256) {\n', '        return period;\n', '    }\n', '\n', '    function getStartTime() public view returns (uint256) {\n', '        return startTime;\n', '    }\n', '\n', '    /* ========== GOVERNANCE ========== */\n', '\n', '    function setPeriod(uint256 _period) external onlyOperator {\n', '        period = _period;\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// fixed window oracle that recomputes the average price for the entire period once every period\n', '// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\n', 'contract Oracle is Epoch {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    // Linkswap\n', '    address public token0;\n', '    address public token1;\n', '    ILinkswapPair public pair;\n', '\n', '    // oracle\n', '    uint32 public blockTimestampLast;\n', '    uint256 public price0CumulativeLast;\n', '    uint256 public price1CumulativeLast;\n', '    FixedPoint.uq112x112 public price0Average;\n', '    FixedPoint.uq112x112 public price1Average;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor(\n', '        address _factory,\n', '        address _tokenA,\n', '        address _tokenB,\n', '        uint256 _period,\n', '        uint256 _startTime\n', '    ) public Epoch(_period, _startTime, 0) {\n', '        ILinkswapPair _pair = ILinkswapPair(\n', '            LinkswapLibrary.pairFor(_factory, _tokenA, _tokenB)\n', '        );\n', '        pair = _pair;\n', '        token0 = _pair.token0();\n', '        token1 = _pair.token1();\n', '        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n', '        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'Oracle: NO_RESERVES'); // ensure that there's liquidity in the pair\n", '    }\n', '\n', '    /* ========== MUTABLE FUNCTIONS ========== */\n', '\n', '    /** @dev Updates 1-day EMA price from Linkswap.  */\n', '    function update() external checkEpoch {\n', '        (\n', '            uint256 price0Cumulative,\n', '            uint256 price1Cumulative,\n', '            uint32 blockTimestamp\n', '        ) = LinkswapOracleLibrary.currentCumulativePrices(address(pair));\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        if (timeElapsed == 0) {\n', '            // prevent divided by zero\n', '            return;\n', '        }\n', '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        price0Average = FixedPoint.uq112x112(\n', '            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\n', '        );\n', '        price1Average = FixedPoint.uq112x112(\n', '            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        price0CumulativeLast = price0Cumulative;\n', '        price1CumulativeLast = price1Cumulative;\n', '        blockTimestampLast = blockTimestamp;\n', '\n', '        emit Updated(price0Cumulative, price1Cumulative);\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(address token, uint256 amountIn)\n', '        external\n', '        view\n', '        returns (uint144 amountOut)\n', '    {\n', '        if (token == token0) {\n', '            amountOut = price0Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(token == token1, 'Oracle: INVALID_TOKEN');\n", '            amountOut = price1Average.mul(amountIn).decode144();\n', '        }\n', '    }\n', '\n', '    // collaboration of update / consult\n', '    function expectedPrice(address token, uint256 amountIn)\n', '        external\n', '        view\n', '        returns (uint224 amountOut)\n', '    {\n', '        (\n', '            uint256 price0Cumulative,\n', '            uint256 price1Cumulative,\n', '            uint32 blockTimestamp\n', '        ) = LinkswapOracleLibrary.currentCumulativePrices(address(pair));\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        FixedPoint.uq112x112 memory avg0 =\n', '            FixedPoint.uq112x112(\n', '                uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\n', '            );\n', '        FixedPoint.uq112x112 memory avg1 =\n', '            FixedPoint.uq112x112(\n', '                uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\n', '            );\n', '\n', '        if (token == token0) {\n', '            amountOut = avg0.mul(amountIn).decode144();\n', '        } else {\n', "            require(token == token1, 'Oracle: INVALID_TOKEN');\n", '            amountOut = avg1.mul(amountIn).decode144();\n', '        }\n', '        return amountOut;\n', '    }\n', '\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) external view returns (address lpt) {\n', '        return LinkswapLibrary.pairFor(factory, tokenA, tokenB);\n', '    }\n', '\n', '    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\n', '}']