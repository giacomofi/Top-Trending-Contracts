['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '}\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {codehash := extcodehash(account)}\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {// Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract IWETH is IERC20 {\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes memory initCode) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', '                initCode // init code hash\n', '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB, bytes memory initCode) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, initCode)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(fee);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(10000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(fee);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path, bytes memory initCode, uint fee) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], initCode);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, fee);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path, bytes memory initCode, uint fee) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], initCode);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, fee);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '}\n', '\n', 'interface IMdexSwapMining {\n', '    function takerWithdraw() external;\n', '}\n', '\n', 'contract swapV1 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event EVTCallExProxy (address indexed _in, address indexed _out, address indexed _trader, address _ex, uint256 _outAmount);\n', '    event EVTSwapExactTokensForTokens(address indexed _in, address indexed _out, address indexed _trader, address _ex, uint256 _outAmount);\n', '    event EVTSwapTokensForExactTokens(address indexed _in, address indexed _out, address indexed _trader, address _ex, uint256 _outAmount);\n', '    event SwapToolCreated(address indexed router);\n', '\n', '\n', '    function safeTransfer(address token, address to, uint256 value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '\n', '    //TODO\n', '    uint256  feeFlag;\n', '    address  payable private feeAddr = 0xF18463BD447597a3b7c4035EA1E7BcDc5d99F330;\n', '    address public constant  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    uint256 feeRate = 1;\n', '    uint256 feePercent1000 = 1000;\n', '    uint256 userFundsRate = feePercent1000 - feeRate;\n', '    //TODO\n', '    address private _owner;\n', '    address emptyAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    mapping(address => bool) routerMap;\n', '    mapping(address => bytes) factoryMap;\n', '    mapping(address => uint256) factoryFeeMap;\n', '    IWETH wethToken;\n', '\n', '\n', '    constructor() public {\n', '        wethToken = IWETH(WETH);\n', '        _owner = msg.sender;\n', '        feeFlag = 1;\n', '        emit SwapToolCreated(address(this));\n', '\n', "        factoryMap[0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f] = hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';\n", '        factoryFeeMap[0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f] = 9970;\n', "        factoryMap[0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac] = hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303';\n", '        factoryFeeMap[0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac] = 9970;\n', '\n', '        routerMap[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true;\n', '        routerMap[0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F] = true;\n', '\n', '    }\n', '\n', '\n', '    function pairFor(address factory, address tokenA, address tokenB, bytes memory initCode) public pure returns (address pair) {\n', '        return UniswapV2Library.pairFor(factory, tokenA, tokenB, initCode);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(tx.origin == _owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier ensure(uint deadline) {\n', "        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\n", '        _;\n', '    }\n', '\n', '    function addRouter(address router) public onlyOwner {\n', '        routerMap[router] = true;\n', '\n', '    }\n', '\n', '    function isRouter(address router) public view returns (bool){\n', '        return routerMap[router];\n', '    }\n', '\n', '    function addFactory(address _factory, uint256 fee, bytes memory initCode) public onlyOwner {\n', '        factoryMap[_factory] = initCode;\n', '        factoryFeeMap[_factory] = fee;\n', '    }\n', '\n', '    function setFeeFlag(uint256 f) public onlyOwner {\n', '        feeFlag = f;\n', '    }\n', '\n', '    function setFeeRate(uint256 fee) public onlyOwner {\n', '        require(fee > 0 && fee <= 10, "1-10");\n', '        feeRate = fee;\n', '    }\n', '\n', '    function _needFee() internal view returns (bool){\n', '        return feeFlag == 1;\n', '    }\n', '\n', '\n', '    function callExProxy(address router, IERC20 inToken, IERC20 outToken, uint256 amountIn, uint256 amountOutMin, bytes memory data) public payable {\n', '        require(router != address(this), "Illegal");\n', "        require(amountOutMin > 0, 'Limit Amount must be set');\n", '        require(isRouter(router), "Illegal router address");\n', '\n', '        if (address(inToken) != emptyAddr) {\n', '            require(msg.value == 0, "eth 0");\n', '            transferFromUser(inToken, msg.sender, amountIn);\n', '        }\n', '\n', '        approve(inToken, router);\n', '        //swap\n', '        (bool success,) = router.call.value(msg.value)(data);\n', '        require(success, "call ex fail");\n', '\n', '        uint256 tradeReturn = viewBalance(outToken, address(this));\n', "        require(tradeReturn >= amountOutMin, 'Trade returned less than the minimum amount');\n", '\n', '        // return any unspent funds\n', '        uint256 leftover = viewBalance(inToken, address(this));\n', '        if (leftover > 0) {\n', '            sendFunds(inToken, msg.sender, leftover);\n', '        }\n', '\n', '        if (_needFee()) {\n', '            sendFunds(outToken, msg.sender, tradeReturn.mul(userFundsRate).div(feePercent1000));\n', '            sendFunds(outToken, feeAddr, tradeReturn.mul(feeRate).div(feePercent1000));\n', '        } else {\n', '            sendFunds(outToken, msg.sender, tradeReturn);\n', '        }\n', '        emit EVTCallExProxy(address(inToken), address(outToken), msg.sender, router, tradeReturn);\n', '\n', '    }\n', '\n', '    function swapExactTokensForTokens(address factory, IERC20 inToken, IERC20 outToken, uint256 amountIn, uint256 amountOutMin, uint deadline, address[] memory path) public payable ensure(deadline) {\n', '        require(factory != address(this), "Illegal");\n', "        require(amountOutMin > 0, 'Limit Amount must be set');\n", '        require(factoryMap[factory].length > 0, "add factory before");\n', '        bytes memory initCode = factoryMap[factory];\n', '        uint[] memory amounts = new uint[](path.length);\n', '        {\n', '            uint fee = factoryFeeMap[factory];\n', '            amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, initCode, fee);\n', '        }\n', "        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n", '\n', '        address firstPair = UniswapV2Library.pairFor(factory, path[0], path[1], initCode);\n', '        if (address(inToken) != emptyAddr) {\n', '            require(msg.value == 0, "eth 0");\n', '            safeTransferFrom(address(inToken), msg.sender, firstPair, amountIn);\n', '        } else {\n', '            inToken = IERC20(WETH);\n', '            wethToken.deposit.value(msg.value)();\n', '            inToken.safeTransfer(firstPair, msg.value);\n', '        }\n', '        if (_needFee()) {\n', '            {\n', '                _swap(factory, amounts, path, address(this), initCode);\n', '            }\n', '\n', '            if (address(outToken) == emptyAddr) {\n', '                wethToken.withdraw(wethToken.balanceOf(address(this)));\n', '            }\n', '\n', '            uint256 tradeReturn = viewBalance(outToken, address(this));\n', "            require(tradeReturn >= amountOutMin, 'Trade returned less than the minimum amount');\n", '\n', '            uint256 leftover = viewBalance(inToken, address(this));\n', '            if (leftover > 0) {\n', '                sendFunds(inToken, msg.sender, leftover);\n', '            }\n', '            sendFunds(outToken, msg.sender, tradeReturn.mul(userFundsRate).div(feePercent1000));\n', '            sendFunds(outToken, feeAddr, tradeReturn.mul(feeRate).div(feePercent1000));\n', '        } else {\n', '\n', '            if (address(outToken) == emptyAddr) {\n', '                _swap(factory, amounts, path, address(this), initCode);\n', '                uint256 tradeReturn = wethToken.balanceOf(address(this));\n', '                wethToken.withdraw(tradeReturn);\n', '                sendFunds(outToken, msg.sender, tradeReturn);\n', '            } else {\n', '                _swap(factory, amounts, path, msg.sender, initCode);\n', '            }\n', '\n', '        }\n', '        emit EVTSwapExactTokensForTokens(address(inToken), address(outToken), msg.sender, factory, amounts[amounts.length - 1]);\n', '    }\n', '\n', '\n', '    function swapTokensForExactTokens(address factory, IERC20 inToken, IERC20 outToken, uint256 amountInMax, uint256 amountOut, uint deadline, address[] memory path) public payable ensure(deadline) {\n', '        require(factory != address(this), "Illegal");\n', '        require(factoryMap[factory].length > 0, "add factory before");\n', '        bytes memory initCode = factoryMap[factory];\n', '        uint[] memory amounts = new uint[](path.length);\n', '        {\n', '            uint fee = factoryFeeMap[factory];\n', '            amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path, initCode, fee);\n', '        }\n', "        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n", '\n', '        address firstPair = UniswapV2Library.pairFor(factory, path[0], path[1], initCode);\n', '        if (address(inToken) != emptyAddr) {\n', '            require(msg.value == 0, "eth 0");\n', '            safeTransferFrom(address(inToken), msg.sender, firstPair, amounts[0]);\n', '        } else {\n', "            require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\n", '            inToken = IERC20(WETH);\n', '            wethToken.deposit.value(amounts[0])();\n', '            inToken.safeTransfer(firstPair, amounts[0]);\n', '        }\n', '        if (_needFee()) {\n', '            {\n', '                _swap(factory, amounts, path, address(this), initCode);\n', '            }\n', '\n', '            if (address(outToken) == emptyAddr) {\n', '                wethToken.withdraw(wethToken.balanceOf(address(this)));\n', '            }\n', '\n', '            sendFunds(outToken, msg.sender, amountOut.mul(userFundsRate).div(feePercent1000));\n', '            sendFunds(outToken, feeAddr, amountOut.mul(feeRate).div(feePercent1000));\n', '        } else {\n', '\n', '            if (address(outToken) == emptyAddr) {\n', '                _swap(factory, amounts, path, address(this), initCode);\n', '                uint256 tradeReturn = wethToken.balanceOf(address(this));\n', '                wethToken.withdraw(tradeReturn);\n', '                sendFunds(outToken, msg.sender, tradeReturn);\n', '            } else {\n', '                _swap(factory, amounts, path, msg.sender, initCode);\n', '            }\n', '\n', '        }\n', '        if (msg.value > amounts[0]) {\n', '            //eth\n', '            msg.sender.transfer(msg.value.sub(amounts[0]));\n', '        }\n', '\n', '        emit EVTSwapTokensForExactTokens(address(inToken), address(outToken), msg.sender, factory, amountOut);\n', '    }\n', '\n', '\n', '    function transferFromUser(IERC20 erc, address _from, uint256 _inAmount) internal {\n', '        if (\n', '            address(erc) != emptyAddr &&\n', '        erc.allowance(_from, address(this)) >= _inAmount\n', '        ) {\n', '            safeTransferFrom(address(erc), _from, address(this), _inAmount);\n', '        }\n', '    }\n', '\n', '    function approve(IERC20 erc, address approvee) internal {\n', '        if (\n', '            address(erc) != emptyAddr &&\n', '            erc.allowance(address(this), approvee) == 0\n', '        ) {\n', '            erc.safeApprove(approvee, uint256(- 1));\n', '        }\n', '    }\n', '\n', '    function viewBalance(IERC20 erc, address owner) internal view returns (uint256) {\n', '        if (address(erc) == emptyAddr) {\n', '            return owner.balance;\n', '        } else {\n', '            return erc.balanceOf(owner);\n', '        }\n', '    }\n', '\n', '    function sendFunds(IERC20 erc, address payable receiver, uint256 funds) internal {\n', '        if (address(erc) == emptyAddr) {\n', '            receiver.transfer(funds);\n', '        } else {\n', '            safeTransfer(address(erc), receiver, funds);\n', '        }\n', '    }\n', '\n', '\n', '    function _swap(address factory, uint[] memory amounts, address[] memory path, address _to, bytes memory initCode) internal {\n', '        //\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (address input, address output) = (path[i], path[i + 1]);\n', '            (address token0,) = UniswapV2Library.sortTokens(input, output);\n', '            uint amountOut = amounts[i + 1];\n', '            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2], initCode) : _to;\n', '            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output, initCode)).swap(\n', '                amount0Out, amount1Out, to, new bytes(0)\n', '            );\n', '        }\n', '    }\n', '\n', '    function withdrawEth() external onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawAnyToken(IERC20 erc) external onlyOwner {\n', '        safeTransfer(address(erc), msg.sender, erc.balanceOf(address(this)));\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != tx.origin, "233333");\n', '    }\n', '\n', '}']