['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface ManagerLike {\n', '    function collateralTypes(uint) external view returns (bytes32);\n', '    function ownsSAFE(uint) external view returns (address);\n', '    function safes(uint) external view returns (address);\n', '    function safeEngine() external view returns (address);\n', '}\n', '\n', 'interface GetSafesLike {\n', '    function getSafesAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\n', '}\n', '\n', 'interface SAFEEngineLike {\n', '    function collateralTypes(bytes32) external view returns (uint, uint, uint, uint, uint);\n', '    function coinBalance(address) external view returns (uint);\n', '    function safes(bytes32, address) external view returns (uint, uint);\n', '    function tokenCollateral(bytes32, address) external view returns (uint);\n', '}\n', '\n', 'interface TaxCollectorLike {\n', '    function collateralTypes(bytes32) external view returns (uint, uint);\n', '    function globalStabilityFee() external view returns (uint);\n', '}\n', '\n', 'interface OracleRelayerLike {\n', '    function collateralTypes(bytes32) external view returns (OracleLike, uint, uint);\n', '    function redemptionRate() external view returns (uint);\n', '\n', '}\n', '\n', 'interface OracleLike {\n', '    function getResultWithValidity() external view returns (bytes32, bool);\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        z = x - y <= x ? x - y : 0;\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Helpers is DSMath {\n', '\n', '    struct SafeData {\n', '        uint id;\n', '        address owner;\n', '        string colType;\n', '        uint collateral;\n', '        uint debt;\n', '        uint adjustedDebt;\n', '        uint liquidatedCol;\n', '        uint borrowRate;\n', '        uint colPrice;\n', '        uint liquidationRatio;\n', '        address safeAddress;\n', '    }\n', '\n', '    struct ColInfo {\n', '        uint borrowRate;\n', '        uint price;\n', '        uint liquidationRatio;\n', '        uint debtCeiling;\n', '        uint debtFloor;\n', '        uint totalDebt;\n', '    }\n', '\n', '    struct ReflexerAddresses {\n', '        address manager;\n', '        address safeEngine;\n', '        address taxCollector;\n', '        address oracleRelayer;\n', '        address getSafes;\n', '    }\n', '\n', '    /**\n', '     * @dev get Reflexer Address contract\n', '     */\n', '    function getReflexerAddresses() public pure returns (ReflexerAddresses memory) {\n', '        return ReflexerAddresses(\n', '            0xEfe0B4cA532769a3AE758fD82E1426a03A94F185, // manager\n', '            0xCC88a9d330da1133Df3A7bD823B95e52511A6962, // safeEngine\n', '            0xcDB05aEda142a1B0D6044C09C64e4226c1a281EB, // taxCollector\n', '            0x4ed9C0dCa0479bC64d8f4EB3007126D5791f7851, // oracleRelayer\n', '            0xdf4BC9aA98cC8eCd90Ba2BEe73aD4a1a9C8d202B  // getSafes\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Convert String to bytes32.\n', '    */\n', '    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n', '        require(bytes(str).length != 0, "String-Empty");\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Convert bytes32 to String.\n', '    */\n', '    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\n', '        bytes32  _temp;\n', '        uint count;\n', '        for (uint256 i; i < 32; i++) {\n', '            _temp = _bytes32[i];\n', '            if( _temp != bytes32(0)) {\n', '                count += 1;\n', '            }\n', '        }\n', '        bytes memory bytesArray = new bytes(count);\n', '        for (uint256 i; i < count; i++) {\n', '                bytesArray[i] = (_bytes32[i]);\n', '        }\n', '        return (string(bytesArray));\n', '    }\n', '\n', '\n', '    function getFee(bytes32 collateralType) internal view returns (uint fee) {\n', '        address taxCollector = getReflexerAddresses().taxCollector;\n', '        (uint stabilityFee,) = TaxCollectorLike(taxCollector).collateralTypes(collateralType);\n', '        uint globalStabilityFee = TaxCollectorLike(taxCollector).globalStabilityFee();\n', '        fee = add(stabilityFee, globalStabilityFee);\n', '    }\n', '\n', '    function getColPrice(bytes32 collateralType) internal view returns (uint price) {\n', '        address oracleRelayer = getReflexerAddresses().oracleRelayer;\n', '        address safeEngine = getReflexerAddresses().safeEngine;\n', '        (, uint safetyCRatio,) = OracleRelayerLike(oracleRelayer).collateralTypes(collateralType);\n', '        (,,uint spotPrice,,) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\n', '        price = rmul(safetyCRatio, spotPrice);\n', '    }\n', '\n', '    function getColRatio(bytes32 collateralType) internal view returns (uint ratio) {\n', '        address oracleRelayer = getReflexerAddresses().oracleRelayer;\n', '        (, ratio,) = OracleRelayerLike(oracleRelayer).collateralTypes(collateralType);\n', '    }\n', '\n', '    function getDebtState(bytes32 collateralType) internal view returns (uint debtCeiling, uint debtFloor, uint totalDebt) {\n', '        address safeEngine = getReflexerAddresses().safeEngine;\n', '        (uint globalDebt,uint rate,,uint debtCeilingRad, uint debtFloorRad) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\n', '        debtCeiling = debtCeilingRad / 10 ** 45;\n', '        debtFloor = debtFloorRad / 10 ** 45;\n', '        totalDebt = rmul(globalDebt, rate);\n', '    }\n', '}\n', '\n', '\n', 'contract SafeResolver is Helpers {\n', '     function getSafes(address owner) external view returns (SafeData[] memory) {\n', '        address manager = getReflexerAddresses().manager;\n', '        address safeManger = getReflexerAddresses().getSafes;\n', '\n', '        (uint[] memory ids, address[] memory handlers, bytes32[] memory collateralTypes) = GetSafesLike(safeManger).getSafesAsc(manager, owner);\n', '        SafeData[] memory safes = new SafeData[](ids.length);\n', '\n', '        for (uint i = 0; i < ids.length; i++) {\n', '            (uint collateral, uint debt) = SAFEEngineLike(ManagerLike(manager).safeEngine()).safes(collateralTypes[i], handlers[i]);\n', '            (,uint rate, uint priceMargin,,) = SAFEEngineLike(ManagerLike(manager).safeEngine()).collateralTypes(collateralTypes[i]);\n', '            uint safetyCRatio = getColRatio(collateralTypes[i]);\n', '\n', '            safes[i] = SafeData(\n', '                ids[i],\n', '                owner,\n', '                bytes32ToString(collateralTypes[i]),\n', '                collateral,\n', '                debt,\n', '                rmul(debt,rate),\n', '                SAFEEngineLike(ManagerLike(manager).safeEngine()).tokenCollateral(collateralTypes[i], handlers[i]),\n', '                getFee(collateralTypes[i]),\n', '                rmul(priceMargin, safetyCRatio),\n', '                safetyCRatio,\n', '                handlers[i]\n', '            );\n', '        }\n', '        return safes;\n', '    }\n', '\n', '    function getSafeById(uint id) external view returns (SafeData memory) {\n', '        address manager = getReflexerAddresses().manager;\n', '        address handler = ManagerLike(manager).safes(id);\n', '        bytes32 collateralType = ManagerLike(manager).collateralTypes(id);\n', '\n', '        (uint collateral, uint debt) = SAFEEngineLike(ManagerLike(manager).safeEngine()).safes(collateralType, handler);\n', '        (,uint rate, uint priceMargin,,) = SAFEEngineLike(ManagerLike(manager).safeEngine()).collateralTypes(collateralType);\n', '\n', '        uint safetyCRatio = getColRatio(collateralType);\n', '\n', '        uint feeRate = getFee(collateralType);\n', '        SafeData memory safe = SafeData(\n', '            id,\n', '            ManagerLike(manager).ownsSAFE(id),\n', '            bytes32ToString(collateralType),\n', '            collateral,\n', '            debt,\n', '            rmul(debt,rate),\n', '            SAFEEngineLike(ManagerLike(manager).safeEngine()).tokenCollateral(collateralType, handler),\n', '            feeRate,\n', '            rmul(priceMargin, safetyCRatio),\n', '            safetyCRatio,\n', '            handler\n', '        );\n', '        return safe;\n', '    }\n', '\n', '    function getColInfo(string[] memory name) public view returns (ColInfo[] memory) {\n', '        ColInfo[] memory colInfo = new ColInfo[](name.length);\n', '\n', '        for (uint i = 0; i < name.length; i++) {\n', '            bytes32 collateralType = stringToBytes32(name[i]);\n', '            (uint debtCeiling, uint debtFloor, uint totalDebt) = getDebtState(collateralType);\n', '            colInfo[i] = ColInfo(\n', '                getFee(collateralType),\n', '                getColPrice(collateralType),\n', '                getColRatio(collateralType),\n', '                debtCeiling,\n', '                debtFloor,\n', '                totalDebt\n', '            );\n', '        }\n', '        return colInfo;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract RedemptionRateResolver is SafeResolver {\n', '    function getRedemptionRate() external view returns (uint redemptionRate) {\n', '        address oracleRelayer = getReflexerAddresses().oracleRelayer;\n', '        redemptionRate = OracleRelayerLike(oracleRelayer).redemptionRate();\n', '    }\n', '}\n', '\n', '\n', 'contract InstaReflexerResolver is RedemptionRateResolver {\n', '    string public constant name = "Reflexer-Resolver-v1";\n', '}']