['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '// File: localhost/contracts/VaultParameters.sol\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '/**\n', ' * @title Auth\n', " * @dev Manages USDP's system access\n", ' **/\n', 'contract Auth {\n', '\n', '    // address of the the contract with vault parameters\n', '    VaultParameters public vaultParameters;\n', '\n', '    constructor(address _parameters) {\n', '        vaultParameters = VaultParameters(_parameters);\n', '    }\n', '\n', "    // ensures tx's sender is a manager\n", '    modifier onlyManager() {\n', '        require(vaultParameters.isManager(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is able to modify the Vault\n", '    modifier hasVaultAccess() {\n', '        require(vaultParameters.canModifyVault(msg.sender), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '\n', "    // ensures tx's sender is the Vault\n", '    modifier onlyVault() {\n', '        require(msg.sender == vaultParameters.vault(), "Unit Protocol: AUTH_FAILED");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title VaultParameters\n', ' **/\n', 'contract VaultParameters is Auth {\n', '\n', '    // map token to stability fee percentage; 3 decimals\n', '    mapping(address => uint) public stabilityFee;\n', '\n', '    // map token to liquidation fee percentage, 0 decimals\n', '    mapping(address => uint) public liquidationFee;\n', '\n', '    // map token to USDP mint limit\n', '    mapping(address => uint) public tokenDebtLimit;\n', '\n', '    // permissions to modify the Vault\n', '    mapping(address => bool) public canModifyVault;\n', '\n', '    // managers\n', '    mapping(address => bool) public isManager;\n', '\n', '    // enabled oracle types\n', '    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\n', '\n', '    // address of the Vault\n', '    address payable public vault;\n', '\n', '    // The foundation address\n', '    address public foundation;\n', '\n', '    /**\n', '     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\n', '     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\n', '     * hashed with Keccak-256.\n', '     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\n', '    **/\n', '    constructor(address payable _vault, address _foundation) Auth(address(this)) {\n', '        require(_vault != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        require(_foundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        isManager[msg.sender] = true;\n', '        vault = _vault;\n', '        foundation = _foundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', "     * @dev Grants and revokes manager's status of any address\n", '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setManager(address who, bool permit) external onlyManager {\n', '        isManager[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the foundation address\n', '     * @param newFoundation The new foundation address\n', '     **/\n', '    function setFoundation(address newFoundation) external onlyManager {\n', '        require(newFoundation != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        foundation = newFoundation;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets ability to use token as the main collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\n', '     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\n', '     * @param usdpLimit The USDP token issue limit\n', '     * @param oracles The enables oracle types\n', '     **/\n', '    function setCollateral(\n', '        address asset,\n', '        uint stabilityFeeValue,\n', '        uint liquidationFeeValue,\n', '        uint usdpLimit,\n', '        uint[] calldata oracles\n', '    ) external onlyManager {\n', '        setStabilityFee(asset, stabilityFeeValue);\n', '        setLiquidationFee(asset, liquidationFeeValue);\n', '        setTokenDebtLimit(asset, usdpLimit);\n', '        for (uint i=0; i < oracles.length; i++) {\n', '            setOracleType(oracles[i], asset, true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets a permission for an address to modify the Vault\n', '     * @param who The target address\n', '     * @param permit The permission flag\n', '     **/\n', '    function setVaultAccess(address who, bool permit) external onlyManager {\n', '        canModifyVault[who] = permit;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the year stability fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The stability fee percentage (3 decimals)\n', '     **/\n', '    function setStabilityFee(address asset, uint newValue) public onlyManager {\n', '        stabilityFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets the percentage of the liquidation fee for a particular collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param newValue The liquidation fee percentage (0 decimals)\n', '     **/\n', '    function setLiquidationFee(address asset, uint newValue) public onlyManager {\n', '        require(newValue <= 100, "Unit Protocol: VALUE_OUT_OF_RANGE");\n', '        liquidationFee[asset] = newValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Enables/disables oracle types\n', '     * @param _type The type of the oracle\n', '     * @param asset The address of the main collateral token\n', '     * @param enabled The control flag\n', '     **/\n', '    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\n', '        isOracleTypeEnabled[_type][asset] = enabled;\n', '    }\n', '\n', '    /**\n', '     * @notice Only manager is able to call this function\n', '     * @dev Sets USDP limit for a specific collateral\n', '     * @param asset The address of the main collateral token\n', '     * @param limit The limit number\n', '     **/\n', '    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\n', '        tokenDebtLimit[asset] = limit;\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/oracles/OracleRegistry.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity 0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', 'contract OracleRegistry is Auth {\n', '    \n', '    struct Oracle {\n', '        uint oracleType;\n', '        address oracleAddress;\n', '    }\n', '\n', '    uint public maxOracleType;\n', '\n', '    address public immutable WETH;\n', '\n', '    // map asset to oracle type ID\n', '    mapping(address => uint) public oracleTypeByAsset;\n', '\n', '    // map oracle type ID to oracle address\n', '    mapping(uint => address) public oracleByType;\n', '\n', '    // map oracle address to oracle type ID\n', '    mapping(address => uint) public oracleTypeByOracle;\n', '\n', '    // list of keydonix oracleType IDs\n', '    uint[] public keydonixOracleTypes;\n', '\n', '    event AssetOracle(address indexed asset, uint indexed oracleType);\n', '    event OracleType(uint indexed oracleType, address indexed oracle);\n', '    event KeydonixOracleTypes();\n', '\n', '    modifier validAddress(address asset) {\n', '        require(asset != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        _;\n', '    }\n', '\n', '    modifier validType(uint _type) {\n', '        require(_type != 0, "Unit Protocol: INVALID_TYPE");\n', '        _;\n', '    }\n', '\n', '    constructor(address vaultParameters, address _weth)\n', '        Auth(vaultParameters)\n', '        validAddress(vaultParameters)\n', '        validAddress(_weth)\n', '    {\n', '        WETH = _weth;\n', '    }\n', '\n', '    function setKeydonixOracleTypes(uint[] calldata _keydonixOracleTypes) public onlyManager {\n', '        for (uint i = 0; i < _keydonixOracleTypes.length; i++) {\n', '            require(_keydonixOracleTypes[i] != 0, "Unit Protocol: INVALID_TYPE");\n', '            require(oracleByType[_keydonixOracleTypes[i]] != address(0), "Unit Protocol: INVALID_ORACLE");\n', '        }\n', '\n', '        keydonixOracleTypes = _keydonixOracleTypes;\n', '\n', '        emit KeydonixOracleTypes();\n', '    }\n', '\n', '    function setOracle(uint oracleType, address oracle) public\n', '        onlyManager\n', '        validType(oracleType)\n', '        validAddress(oracle)\n', '    {\n', '        if (oracleType > maxOracleType) {\n', '            maxOracleType = oracleType;\n', '        }\n', '\n', '        address oldOracle = oracleByType[oracleType];\n', '        if (oldOracle != address(0)) {\n', '            delete oracleTypeByOracle[oldOracle];\n', '        }\n', '\n', '        uint oldOracleType = oracleTypeByOracle[oracle];\n', '        if (oldOracleType != 0) {\n', '            delete oracleByType[oldOracleType];\n', '        }\n', '\n', '        oracleByType[oracleType] = oracle;\n', '        oracleTypeByOracle[oracle] = oracleType;\n', '\n', '        emit OracleType(oracleType, oracle);\n', '    }\n', '\n', '    function unsetOracle(uint oracleType) public onlyManager validType(oracleType) validAddress(oracleByType[oracleType]) {\n', '        address oracle = oracleByType[oracleType];\n', '        delete oracleByType[oracleType];\n', '        delete oracleTypeByOracle[oracle];\n', '\n', '        emit OracleType(oracleType, address(0));\n', '    }\n', '\n', '    function setOracleTypeForAsset(address asset, uint oracleType) public\n', '        onlyManager\n', '        validAddress(asset)\n', '        validType(oracleType)\n', '        validAddress(oracleByType[oracleType])\n', '    {\n', '        oracleTypeByAsset[asset] = oracleType;\n', '        emit AssetOracle(asset, oracleType);\n', '    }\n', '\n', '    function setOracleTypeForAssets(address[] calldata assets, uint oracleType) public {\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            setOracleTypeForAsset(assets[i], oracleType);\n', '        }\n', '    }\n', '\n', '    function unsetOracleForAsset(address asset) public\n', '        onlyManager\n', '        validAddress(asset)\n', '        validType(oracleTypeByAsset[asset])\n', '    {\n', '        delete oracleTypeByAsset[asset];\n', '        emit AssetOracle(asset, 0);\n', '    }\n', '\n', '    function unsetOracleForAssets(address[] calldata assets) public {\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            unsetOracleForAsset(assets[i]);\n', '        }\n', '    }\n', '\n', '    function getOracles() external view returns (Oracle[] memory foundOracles) {\n', '\n', '        Oracle[] memory allOracles = new Oracle[](maxOracleType);\n', '\n', '        uint actualOraclesCount;\n', '\n', '        for (uint _type = 1; _type <= maxOracleType; ++_type) {\n', '            if (oracleByType[_type] != address(0)) {\n', '                allOracles[actualOraclesCount++] = Oracle(_type, oracleByType[_type]);\n', '            }\n', '        }\n', '\n', '        foundOracles = new Oracle[](actualOraclesCount);\n', '\n', '        for (uint i = 0; i < actualOraclesCount; ++i) {\n', '            foundOracles[i] = allOracles[i];\n', '        }\n', '    }\n', '\n', '    function getKeydonixOracleTypes() external view returns (uint[] memory) {\n', '        return keydonixOracleTypes;\n', '    }\n', '\n', '    function oracleByAsset(address asset) external view returns (address) {\n', '        uint oracleType = oracleTypeByAsset[asset];\n', '        if (oracleType == 0) {\n', '            return address(0);\n', '        }\n', '        return oracleByType[oracleType];\n', '    }\n', '\n', '}']