['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', 'interface ISorbettoStrategy {\n', '    /// @notice Period of time that we observe for price slippage\n', '    /// @return time in seconds\n', '    function twapDuration() external view returns (uint32);\n', '\n', '    /// @notice Maximum deviation of time waited avarage price in ticks\n', '    function maxTwapDeviation() external view returns (int24);\n', '\n', '    /// @notice Tick multuplier for base range calculation\n', '    function tickRangeMultiplier() external view returns (int24);\n', '\n', "    /// @notice The protocol's fee denominated in hundredths of a bip, i.e. 1e-6\n", '    /// @return The fee\n', '    function protocolFee() external view returns (uint24);\n', '\n', '    /// @notice The price impact percentage during swap denominated in hundredths of a bip, i.e. 1e-6\n', '    /// @return The max price impact percentage\n', '    function priceImpactPercentage() external view returns (uint24);\n', '}\n', '\n', '/// @title Permissioned Sorbetto variables\n', '/// @notice Contains Sorbetto variables that may only be called by the governance\n', 'contract SorbettoStrategy is ISorbettoStrategy {\n', '\n', "    // Address of the Sorbetto's strategy owner\n", '    address public governance;\n', '    // Pending to claim ownership address\n', '    address public pendingGovernance;\n', '\n', '    /// @inheritdoc ISorbettoStrategy\n', '    uint32 public override twapDuration;\n', '    /// @inheritdoc ISorbettoStrategy\n', '    int24 public override maxTwapDeviation;\n', '    /// @inheritdoc ISorbettoStrategy\n', '    int24 public override tickRangeMultiplier;\n', '    /// @inheritdoc ISorbettoStrategy\n', '    uint24 public override protocolFee;\n', '    /// @inheritdoc ISorbettoStrategy\n', '    uint24 public override priceImpactPercentage;\n', '    \n', '    \n', '    /**\n', '     * @param _twapDuration TWAP duration in seconds for rebalance check\n', '     * @param _maxTwapDeviation Max deviation from TWAP during rebalance\n', '     * @param _tickRangeMultiplier Used to determine base order range\n', "     * @param _protocolFee  The protocol's fee in hundredths of a bip, i.e. 1e-6\n", '     * @param _priceImpactPercentage The price impact percentage during swap in hundredths of a bip, i.e. 1e-6\n', '     */\n', '    constructor(\n', '        uint32 _twapDuration,\n', '        int24 _maxTwapDeviation,\n', '        int24 _tickRangeMultiplier,\n', '        uint24 _protocolFee,\n', '        uint24 _priceImpactPercentage\n', '    ) {\n', '        twapDuration = _twapDuration;\n', '        maxTwapDeviation = _maxTwapDeviation;\n', '        tickRangeMultiplier = _tickRangeMultiplier;\n', '        protocolFee = _protocolFee;\n', '        priceImpactPercentage = _priceImpactPercentage;\n', '        governance = msg.sender;\n', '\n', '        require(_maxTwapDeviation >= 0, "maxTwapDeviation");\n', '        require(_twapDuration > 0, "twapDuration");\n', '        require(_protocolFee < 1e6 && _protocolFee > 0, "PF");\n', '        require(_priceImpactPercentage < 1e6 && _priceImpactPercentage > 0, "PIP");\n', '    }\n', '\n', '    modifier onlyGovernance {\n', '        require(msg.sender == governance, "NOT ALLOWED");\n', '        _;\n', '    }\n', '\n', '    function setTwapDuration(uint32 _twapDuration) external onlyGovernance {\n', '        require(_twapDuration > 0, "twapDuration");\n', '        twapDuration = _twapDuration;\n', '    }\n', '\n', '    function setMaxTwapDeviation(int24 _maxTwapDeviation) external onlyGovernance {\n', '        require(_maxTwapDeviation > 0, "PF");\n', '        maxTwapDeviation = _maxTwapDeviation;\n', '    }\n', '\n', '    function setTickRange(int24 _tickRangeMultiplier) external onlyGovernance {\n', '        tickRangeMultiplier = _tickRangeMultiplier;\n', '    }\n', '\n', '    function setProtocolFee(uint16 _protocolFee) external onlyGovernance {\n', '        require(_protocolFee < 1e6 && _protocolFee > 0, "PF");\n', '        protocolFee = _protocolFee;\n', '    }\n', '\n', '    function setPriceImpact(uint16 _priceImpactPercentage) external onlyGovernance {\n', '        require(_priceImpactPercentage < 1e6 && _priceImpactPercentage > 0, "PIP");\n', '        priceImpactPercentage = _priceImpactPercentage;\n', '    }\n', '\n', '    \n', '     /**\n', '     * @notice `setGovernance()` should be called by the existing governance\n', '     * address prior to calling this function.\n', '     */\n', '    function setGovernance(address _governance) external onlyGovernance {\n', '        pendingGovernance = _governance;\n', '    }\n', '\n', '    /**\n', '     * @notice Governance address is not updated until the new governance\n', '     * address has called `acceptGovernance()` to accept this responsibility.\n', '     */\n', '    function acceptGovernance() external {\n', '        require(msg.sender == pendingGovernance, "PG");\n', '        governance = msg.sender;\n', '    }\n', '}']