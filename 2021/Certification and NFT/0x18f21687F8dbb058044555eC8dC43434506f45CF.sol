['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.6;\n', '\n', 'contract MegaChizDispenser {\n', '    ERC721 ratContract = ERC721(0xd21a23606D2746f086f6528Cd6873bAD3307b903);\n', '    ChizDispenser chizDispenserContract = ChizDispenser(0x5e7fDe13483e5b51da88D2898e0f6a6d7B0c6899);\n', '\n', '    bool paused = false;\n', '    address deployer;\n', '\n', '    event MegaClaim(address owner);\n', '\n', '    constructor() {\n', '        deployer = msg.sender;\n', '    }\n', '\n', '    modifier onlyDeployer() {\n', '        require(msg.sender == deployer);\n', '        _;\n', '    }\n', '\n', '    modifier pauseable() {\n', '        require(paused == false, "contract is paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyDeployer {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyDeployer {\n', '        paused = false;\n', '    }\n', '    \n', '    function megaClaimChiz() public pauseable {\n', '        uint256 ratBalance = ratContract.balanceOf(msg.sender);\n', '        for (uint i = 0; i < ratBalance; i++) {\n', '            uint256 tokenId = ratContract.tokenOfOwnerByIndex(i);\n', '            (bool claimed,) = chizDispenserContract.existingClaims(tokenId);\n', '            if (!claimed) chizDispenserContract.claimChiz(tokenId);\n', '        }\n', '        emit MegaClaim(msg.sender);\n', '    }\n', '}\n', '\n', 'abstract contract ChizDispenser {\n', '    struct Claim {\n', '        bool claimed;\n', '        uint256 ratId;\n', '    }\n', '    mapping(uint256 => Claim) public existingClaims;\n', '    function claimChiz(uint256) public virtual;\n', '}\n', '\n', 'abstract contract ERC721 {\n', '    function balanceOf(address) public virtual returns (uint256);\n', '    function tokenOfOwnerByIndex(uint256) public virtual returns (uint256);\n', '}']