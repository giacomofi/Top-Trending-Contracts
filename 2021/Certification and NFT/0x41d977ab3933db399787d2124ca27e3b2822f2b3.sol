['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract CosmoFundLiquidityLocker is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant url = "https://CosmoFund.space/";\n', '    uint256 public constant shareDecimals = 18;\n', '    uint256 public unlockTime = 1648825200;  // 2022-04-01T15:00:00.000Z = 1648825200\n', '\n', '    event Balance(address indexed token, uint256 amount);\n', '    event Deposited(address indexed token, uint256 amount);\n', '    event Withdrawn(address indexed token, uint256 amount);\n', '\n', '\n', '    function balanceOf(address token) public view returns (uint256) {\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '\n', '    function shareOf(address token) public view returns (uint256) {\n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        if (balance == 0) return 0;\n', '        uint256 total = IERC20(token).totalSupply();\n', '        return balance.mul(1e18).div(total);\n', '    }\n', '\n', '    function deposit(address token, uint256 amount) public onlyOwner {\n', '        bool isTransferred = IERC20(token).transferFrom(_msgSender(), address(this), amount);\n', '        require(isTransferred, "Transfer failed");\n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        emit Deposited(token, amount);\n', '        emit Balance(token, balance);\n', '    }\n', '\n', '    function withdraw(address token, uint256 amount) public onlyOwner {\n', '        require(_getNow() > unlockTime, "Too early");\n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        uint256 newBalance = balance.sub(amount, "Insufficient balance");\n', '        bool isTransferred = IERC20(token).transfer(_msgSender(), amount);\n', '        require(isTransferred, "Transfer failed");\n', '        emit Withdrawn(token, amount);\n', '        emit Balance(token, newBalance);\n', '    }\n', '\n', '    function withdrawAll(address token) public onlyOwner {\n', '        require(_getNow() > unlockTime, "Too early");\n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        bool isTransferred = IERC20(token).transfer(_msgSender(), balance);\n', '        require(isTransferred, "Transfer failed");\n', '        emit Withdrawn(token, balance);\n', '        emit Balance(token, 0);\n', '    }\n', '\n', '    function setUnlockTime(uint256 newUnlockTime) public onlyOwner {\n', '        require(_getNow() < newUnlockTime, "Too early");\n', '        require(unlockTime < newUnlockTime, "Too early");\n', '        unlockTime = newUnlockTime;\n', '    }\n', '\n', '    function _getNow() internal view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '}']