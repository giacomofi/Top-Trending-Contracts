['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-11\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WanFarmErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    /**\n', '      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n', '      */\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract UniFarmAdminStorage {\n', '    /**\n', '    * @notice Administrator for this contract\n', '    */\n', '    address public admin;\n', '\n', '    /**\n', '    * @notice Pending administrator for this contract\n', '    */\n', '    address public pendingAdmin;\n', '\n', '    /**\n', '    * @notice Active brains of WanFarm\n', '    */\n', '    address public wanFarmImplementation;\n', '\n', '    /**\n', '    * @notice Pending brains of WanFarm\n', '    */\n', '    address public pendingWanFarmImplementation;\n', '}\n', '\n', '\n', '/**\n', ' * @title ComptrollerCore\n', ' * @dev Storage for the comptroller is at this address, while execution is delegated to the `wanFarmImplementation`.\n', ' * CTokens should reference this contract as their comptroller.\n', ' */\n', 'contract UniFarm is UniFarmAdminStorage, WanFarmErrorReporter {\n', '\n', '    /**\n', '      * @notice Emitted when pendingWanFarmImplementation is changed\n', '      */\n', '    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingWanFarmImplementation is accepted, which means comptroller implementation is updated\n', '      */\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is changed\n', '      */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n', '      */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    constructor() public {\n', '        // Set admin to caller\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /*** Admin Functions ***/\n', '    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n', '\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n', '        }\n', '\n', '        address oldPendingImplementation = pendingWanFarmImplementation;\n', '\n', '        pendingWanFarmImplementation = newPendingImplementation;\n', '\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n', "    * @dev Admin function for new implementation to accept it's role as implementation\n", '    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '    */\n', '    function _acceptImplementation() public returns (uint) {\n', '        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n', '        if (msg.sender != pendingWanFarmImplementation || pendingWanFarmImplementation == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldImplementation = wanFarmImplementation;\n', '        address oldPendingImplementation = pendingWanFarmImplementation;\n', '\n', '        wanFarmImplementation = pendingWanFarmImplementation;\n', '\n', '        pendingWanFarmImplementation = address(0);\n', '\n', '        emit NewImplementation(oldImplementation, wanFarmImplementation);\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '\n', '    /**\n', '      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @param newPendingAdmin New pending admin.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n', '        // Check caller = admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value, if any, for inclusion in log\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n', '      * @dev Admin function for pending admin to accept role and update admin\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _acceptAdmin() public returns (uint) {\n', '        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n', '        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates execution to an implementation contract.\n', '     * It returns to the external caller whatever the implementation returns\n', '     * or forwards reverts.\n', '     */\n', '    function () payable external {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = wanFarmImplementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '              let free_mem_ptr := mload(0x40)\n', '              returndatacopy(free_mem_ptr, 0, returndatasize)\n', '\n', '              switch success\n', '              case 0 { revert(free_mem_ptr, returndatasize) }\n', '              default { return(free_mem_ptr, returndatasize) }\n', '        }\n', '    }\n', '}']