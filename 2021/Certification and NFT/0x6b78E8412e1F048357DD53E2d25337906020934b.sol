['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-11\n', '*/\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) public _allowances;\n', '\n', '    uint private _totalSupply;\n', '   \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '   \n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    \n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function setName(string memory _newName) internal {\n', '        _name = _newName;\n', '    }\n', '    function setSymbol(string memory _newSymbol) internal {\n', '        _symbol = _newSymbol;\n', '    }\n', '    \n', '    \n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract QwanToken is ERC20, ERC20Detailed {\n', '\n', '    using SafeMath for uint;\n', '\n', '    uint256 public price;\n', '    uint256 public weiRaised;\n', '    uint256 public tokensSold;\n', '    uint256 public saleSupply;\n', '\n', '    uint256 public softCap;\n', '   \n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '    \n', '    bool public isCapReached;\n', '    bool public isFinalize;\n', '    bool public enableTransfers;\n', '\n', '    address  private governance;\n', '    address payable multiwallet;\n', '    \n', '    mapping(address => uint256) public _deposits;\n', '    \n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor (address payable _governance, address payable _multiwallet) public ERC20Detailed("QWAN", "QWN", 18) {\n', '        governance = _governance;\n', '        multiwallet = _multiwallet;\n', '        \n', '        price = 4000;\n', '        softCap = 3000 ether;\n', '\n', '        startDate = 1627189200;\n', '        endDate = 1659330000;\n', '        \n', '        saleSupply = SafeMath.mul(4000000000 , (10 ** 18));\n', '\n', '        super._mint(_governance, SafeMath.mul(1000000000 , (10 ** 18)));\n', '        super._mint(address(this), SafeMath.mul(4000000000 , (10 ** 18)));\n', '\n', '    }\n', '   \n', '   function () external payable {\n', '        buyQwan(msg.sender);\n', '    }\n', '    \n', '    function buyQwan(address beneficiary) public payable {\n', '            require(msg.value >= 0.05 ether, "investment should be more than 0.05 ether" );\n', '            require(msg.value <= 10 ether, "investment should be less than 10 ether" );\n', '            require(isFinalize == false, "crowdsale finalized !");\n', '            \n', '            uint256 _now = now;\n', '            \n', '            require(_now >= startDate && _now <= endDate, "Sale is closed !");\n', '            \n', '            uint256 tokens = 0;\n', '            uint256 weiAmount = msg.value;\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(price));\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            \n', '            tokensSold = tokensSold.add(tokens);\n', '            saleSupply = saleSupply.sub(tokens);\n', '            \n', '            require(saleSupply != 0, "Sale supply ended !");\n', '\n', '            _deposits[beneficiary] = _deposits[beneficiary].add(weiAmount);\n', '\n', '            //  tokens are transfering from here\n', '            _transfer(address(this),beneficiary, tokens);\n', '\n', '            if (weiRaised >= softCap) isCapReached = true;\n', '            \n', '            emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    }\n', '    \n', '    function ClaimRefund () public returns (bool) {\n', '        require(isCapReached == false, "Softcap isn\'t reached.");\n', '        require(isFinalize == true, "sale finalized");\n', '       \n', '        address payable payee = msg.sender;\n', '       \n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        msg.sender.transfer(payment);\n', '        \n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        \n', '        if (msg.sender == governance || msg.sender == address(this)) {\n', '             _transfer(_msgSender(), recipient, amount);\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        } else {\n', '            require(enableTransfers == true, "!Transfers is not enabled");\n', '            _transfer(_msgSender(), recipient, amount);\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        \n', '        if (msg.sender == governance || msg.sender == address(this)) {\n', '            _transfer(_msgSender(), recipient, amount);\n', '        } else {\n', '            require(enableTransfers == true, "!Transfers is not enabled");\n', '            _transfer(_msgSender(), recipient, amount);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function setGovernance(address payable _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setNewName(string memory _newName) public {\n', '        require(msg.sender == governance, "!governance");\n', '        setName(_newName);\n', '    }\n', '    \n', '    function setNewSymbol(string memory _newSymbol) public {\n', '        require(msg.sender == governance, "!governance");\n', '        setSymbol(_newSymbol);\n', '    }\n', '    \n', '     function setPrice(uint256 _price) public {\n', '        require(msg.sender == governance, "!governance");\n', '        price = _price;\n', '    }\n', '    \n', '     function updateCap(uint256 _cap) public {\n', '        require(msg.sender == governance, "!governance");\n', '        softCap = _cap;\n', '    }\n', '    \n', '     function updateIsCapReached(bool _isReached) public {\n', '        require(msg.sender == governance, "!governance");\n', '        isCapReached = _isReached;\n', '    }\n', '    \n', '    function finalize() public {\n', '        require(msg.sender == governance, "!governance");\n', '        if (isCapReached == true)  multiwallet.transfer(softCap);\n', '\n', '        isFinalize = true;\n', '        \n', '    }\n', '    \n', '    function burn(address _from , uint256 _amount) public {\n', '        require(balanceOf(_from) > 0,"Amount of bruning in user address is not sufficient");\n', '        require(msg.sender == governance,"!governance");\n', '        _burn(_from, _amount);\n', '    }\n', '    \n', '    function setEnableTransfers(bool _onOrOff) public {\n', '        require(msg.sender == governance, "!governance");\n', '        enableTransfers = _onOrOff;\n', '    }\n', '    \n', '    function emergencyExitForEth(uint256 amount) public {\n', '        require(msg.sender == governance, "!governance");\n', '         multiwallet.transfer(amount);\n', '    }\n', '    \n', '    function emergencyExitForQwan(uint256 amount) public {\n', '        require(msg.sender == governance, "!governance");\n', '         _transfer(address(this),multiwallet,amount);\n', '    }\n', '    \n', '    function _multiDisperse(address [] memory _contributors, uint256[]  memory _balances) public returns(bool)  {\n', '        require(msg.sender == governance, "!governance");\n', '        for (uint256 i = 0; i < _contributors.length; i++ ) {\n', '            _transfer(_msgSender(), _contributors[i], _balances[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '}']