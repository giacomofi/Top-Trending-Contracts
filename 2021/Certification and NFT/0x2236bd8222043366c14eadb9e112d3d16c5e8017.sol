['/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-31\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '//openzeppelin-contracts/contracts/access/roles\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    \n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '\n', '    constructor () internal { }\n', '   \n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title WhitelistedRole\n', ' * @dev Whitelisted accounts have been approved by a onlyOwner to perform certain actions (e.g. participate in a\n', ' * crowdsale). This role is special in that the only accounts that can add it are onlyOwner (who can also remove\n', ' * it).\n', ' */\n', 'contract WhitelistedRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelisteds;\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '\n', '    function addWhitelisted(address account) public onlyOwner {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    function removeWhitelisted(address account) public onlyOwner {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title PreSale\n', ' * @dev Presale contract accept ether from whitelsted address. there are certain condition must be required to fulfill.\n', ' * Private Sale target set 30 ETH \n', ' */\n', 'contract PreSale is WhitelistedRole {\n', '\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) public investors;\n', '    address payable investorWallet;\n', '    uint256 public collectedEther;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _investorWallet address able to withdraw investment\n', '     */\n', '    constructor(address payable _investorWallet) public payable {\n', '        investorWallet = _investorWallet;\n', '        \n', '        // <!-- Whitelisted wallet -->\n', '        _addWhitelisted(0xD8b3b1b185c9A278BD20265c846a5F4c1010CD0f);\n', '        _addWhitelisted(0x2d55748cE1b792d1Ba65f42AFcF189fdc386BBcF);\n', '        _addWhitelisted(0xEF9EFf0479d57032cda12e0d6bBEDb55B9b8c9E7);\n', '        _addWhitelisted(0xdF55AcD44102FA7dd9C1b7f95ADC2eDB1129B8d8);\n', '        _addWhitelisted(0xBfe663805129915942980bC86BD832aB031Bb2f9);\n', '        _addWhitelisted(0x5fd8Eb9B9958E88698fa64F0e4a418f6C9C563e2);\n', '        _addWhitelisted(0xcC174625b93437098591C6B1d3b526F730cb6346);\n', '        _addWhitelisted(0xc221f41c08656E9Fd49141306a9365FF8702b8A5);\n', '        _addWhitelisted(0x1C5f7635a4A302d72E652486907051f84cd55005);\n', '        _addWhitelisted(0x0E49d6eC5E22daA59bC845B3353D81E59A45eE0d);\n', '        _addWhitelisted(0xEf92D1638b63dd82BD744fFfb96f9d46B0eEc50E);\n', '        _addWhitelisted(0xA50341f5e72eD061cD0adbD338cbF070DC45784C);\n', '        _addWhitelisted(0x29Bf6652e795C360f7605be0FcD8b8e4F29a52d4);\n', '        _addWhitelisted(0xdb820EdEe02c9ee0D9a95910AF34031f17989660);\n', '        _addWhitelisted(0xE12D52275eB64FF18680aA2b081Fef8b736CD66d);\n', '        _addWhitelisted(0xAE5d528177A6273dC022ecA11496B89298e4654F);\n', '        _addWhitelisted(0xA59c52b97c2cDcbBe9D5fCB3240233e3868314C1);\n', '        _addWhitelisted(0x7C0Bf6BB2356aAaa60C04072C73a5DBe67dAc25e);\n', '        _addWhitelisted(0x6F1E02F7853a7614F11C1909ED00310713d2E5cf);\n', '        _addWhitelisted(0x1F4a6756Da7592fc0f9a031D127d016ACc0BfcB2);\n', '        _addWhitelisted(0xD8c91ec53E8d236F9a15D6B42e878393bF413515);\n', '        _addWhitelisted(0xfD026dFFfDf66BBecfC9F8bc26caf2A425ea0467);\n', '\n', '    }\n', '\n', '    // It is important to also provide the\n', '    // `payable` keyword here, otherwise the function will\n', '    // automatically reject all Ether sent to it.\n', '    function () payable external onlyWhitelisted {\n', '        require(2 ether <= msg.value &&  msg.value <= 5 ether, "Ether investment range must be required between 2 to 5 ether.");\n', '        require(collectedEther <= 30 ether, "Pre Sale target fulfilled, Unable to accept more funds.");\n', '        \n', '        investors[_msgSender()] = investors[_msgSender()].add(msg.value);\n', '\n', '        collectedEther = collectedEther.add(msg.value);\n', '    }\n', '    \n', '    // WithDraw ether \n', '    function withDraw() public onlyOwner returns (bool) {\n', '        investorWallet.transfer(collectedEther);\n', '        collectedEther = 0;\n', '        return true;\n', '    }\n', '\n', '}']