['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', '// File: @openzeppelin/contracts/proxy/Proxy.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n', ' * be specified by overriding the virtual {_implementation} function.\n', ' *\n', ' * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n', ' * different contract through the {_delegate} function.\n', ' *\n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'abstract contract Proxy {\n', '    /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     *\n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _delegate(address implementation) internal virtual {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n', '     * and {_fallback} should delegate.\n', '     */\n', '    function _implementation() internal view virtual returns (address);\n', '\n', '    /**\n', '     * @dev Delegates the current call to the address returned by `_implementation()`.\n', '     *\n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal virtual {\n', '        _beforeFallback();\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback () external payable virtual {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive () external payable virtual {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n', '     * call, or as part of the Solidity `fallback` or `receive` functions.\n', '     *\n', '     * If overriden should call `super._beforeFallback()`.\n', '     */\n', '    function _beforeFallback() internal virtual {\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/proxy/UpgradeableProxy.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n', ' * implementation address that can be changed. This address is stored in storage in the location specified by\n', " * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n", ' * implementation behind the proxy.\n', ' *\n', ' * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n', ' * {TransparentUpgradeableProxy}.\n', ' */\n', 'contract UpgradeableProxy is Proxy {\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n', '     *\n', "     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor(address _logic, bytes memory _data) public payable {\n', '        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '        _setImplementation(_logic);\n', '        if(_data.length > 0) {\n', '            Address.functionDelegateCall(_logic, _data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _implementation() internal view virtual override returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            impl := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the proxy to a new implementation.\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeTo(address newImplementation) internal virtual {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address newImplementation) private {\n', '        require(Address.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");\n', '\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newImplementation)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/UpgradeableExtension.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev This contract implements an upgradeable extension. It is upgradeable because calls are delegated to an\n', ' * implementation address that can be changed. This address is stored in storage in the location specified by\n', " * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n", ' * implementation behind the proxy.\n', ' *\n', ' * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n', ' * {TransparentUpgradeableProxy}.\n', ' */\n', 'contract UpgradeableExtension is Proxy {\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n', '     *\n', "     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor() public payable {\n', '        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _implementation() internal view virtual override returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            impl := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the proxy to a new implementation.\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeTo(address newImplementation) internal virtual {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address newImplementation) private {\n', '        require(\n', '            newImplementation == address(0x0) || Address.isContract(newImplementation),\n', '            "UpgradeableExtension: new implementation must be 0x0 or a contract"\n', '        );\n', '\n', '        bytes32 slot = _IMPLEMENTATION_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newImplementation)\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address62 {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address62 for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address62 for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/ReentrancyGuardPausable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', " * Reuse openzeppelin's ReentrancyGuard with Pausable feature\n", ' */\n', 'contract ReentrancyGuardPausable {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '    uint256 private constant _PAUSEDV1 = 4;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrantAndUnpaused(uint256 version) {\n', '        {\n', '        uint256 status = _status;\n', '\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require((status & (1 << (version + 1))) == 0, "ReentrancyGuard: paused");\n', '        require((status & _ENTERED) == 0, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = status ^ _ENTERED;\n', '        }\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status ^= _ENTERED;\n', '    }\n', '\n', '    modifier nonReentrantAndUnpausedV1() {\n', '        {\n', '        uint256 status = _status;\n', '\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require((status & _PAUSEDV1) == 0, "ReentrancyGuard: paused");\n', '        require((status & _ENTERED) == 0, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = status ^ _ENTERED;\n', '        }\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status ^= _ENTERED;\n', '    }\n', '\n', '    function _pause(uint256 flag) internal {\n', '        _status |= flag;\n', '    }\n', '\n', '    function _unpause(uint256 flag) internal {\n', '        _status &= ~flag;\n', '    }\n', '}\n', '\n', '// File: contracts/YERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/* TODO: Actually methods are public instead of external */\n', 'interface YERC20 is IERC20 {\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function deposit(uint256 _amount) external;\n', '\n', '    function withdraw(uint256 _shares) external;\n', '}\n', '\n', '// File: contracts/SmoothyV1.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SmoothyV1 is ReentrancyGuardPausable, ERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 constant W_ONE = 1e18;\n', '    uint256 constant U256_1 = 1;\n', '    uint256 constant SWAP_FEE_MAX = 2e17;\n', '    uint256 constant REDEEM_FEE_MAX = 2e17;\n', '    uint256 constant ADMIN_FEE_PCT_MAX = 5e17;\n', '\n', '    /** @dev Fee collector of the contract */\n', '    address public _rewardCollector;\n', '\n', '    // Using mapping instead of array to save gas\n', '    mapping(uint256 => uint256) public _tokenInfos;\n', '    mapping(uint256 => address) public _yTokenAddresses;\n', '\n', '    // Best estimate of token balance in y pool.\n', '    // Save the gas cost of calling yToken to evaluate balanceInToken.\n', '    mapping(uint256 => uint256) public _yBalances;\n', '\n', '    /*\n', "     * _totalBalance is expected to >= sum(_getBalance()'s), where the diff is the admin fee\n", '     * collected by _collectReward().\n', '     */\n', '    uint256 public _totalBalance;\n', '    uint256 public _swapFee = 4e14; // 1E18 means 100%\n', '    uint256 public _redeemFee = 0; // 1E18 means 100%\n', '    uint256 public _adminFeePct = 0; // % of swap/redeem fee to admin\n', '    uint256 public _adminInterestPct = 0; // % of interest to admins\n', '\n', '    uint256 public _ntokens;\n', '\n', '    uint256 constant YENABLE_OFF = 40;\n', '    uint256 constant DECM_OFF = 41;\n', '    uint256 constant TID_OFF = 46;\n', '\n', '    event Swap(\n', '        address indexed buyer,\n', '        uint256 bTokenIdIn,\n', '        uint256 bTokenIdOut,\n', '        uint256 inAmount,\n', '        uint256 outAmount\n', '    );\n', '\n', '    event SwapAll(\n', '        address indexed provider,\n', '        uint256[] amounts,\n', '        uint256 inOutFlag,\n', '        uint256 sTokenMintedOrBurned\n', '    );\n', '\n', '    event Mint(\n', '        address indexed provider,\n', '        uint256 inAmounts,\n', '        uint256 sTokenMinted\n', '    );\n', '\n', '    event Redeem(\n', '        address indexed provider,\n', '        uint256 bTokenAmount,\n', '        uint256 sTokenBurn\n', '    );\n', '\n', '    constructor (\n', '        address[] memory tokens,\n', '        address[] memory yTokens,\n', '        uint256[] memory decMultipliers,\n', '        uint256[] memory softWeights,\n', '        uint256[] memory hardWeights\n', '    )\n', '        public\n', '        ERC20("Smoothy LP Token", "syUSD")\n', '    {\n', '        require(tokens.length == yTokens.length, "tokens and ytokens must have the same length");\n', '        require(\n', '            tokens.length == decMultipliers.length,\n', '            "tokens and decMultipliers must have the same length"\n', '        );\n', '        require(\n', '            tokens.length == hardWeights.length,\n', '            "incorrect hard wt. len"\n', '        );\n', '        require(\n', '            tokens.length == softWeights.length,\n', '            "incorrect soft wt. len"\n', '        );\n', '        _rewardCollector = msg.sender;\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            uint256 info = uint256(tokens[i]);\n', '            require(hardWeights[i] >= softWeights[i], "hard wt. must >= soft wt.");\n', '            require(hardWeights[i] <= W_ONE, "hard wt. must <= 1e18");\n', '            info = _setHardWeight(info, hardWeights[i]);\n', '            info = _setSoftWeight(info, softWeights[i]);\n', '            info = _setDecimalMultiplier(info, decMultipliers[i]);\n', '            info = _setTID(info, i);\n', '            _yTokenAddresses[i] = yTokens[i];\n', '            // _balances[i] = 0; // no need to set\n', '            if (yTokens[i] != address(0x0)) {\n', '                info = _setYEnabled(info, true);\n', '            }\n', '            _tokenInfos[i] = info;\n', '        }\n', '        _ntokens = tokens.length;\n', '    }\n', '\n', '    /***************************************\n', '     * Methods to change a token info\n', '     ***************************************/\n', '\n', '    /* return soft weight in 1e18 */\n', '    function _getSoftWeight(uint256 info) internal pure returns (uint256 w) {\n', '        return ((info >> 160) & ((U256_1 << 20) - 1)) * 1e12;\n', '    }\n', '\n', '    function _setSoftWeight(\n', '        uint256 info,\n', '        uint256 w\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 newInfo)\n', '    {\n', '        require (w <= W_ONE, "soft weight must <= 1e18");\n', '\n', '        // Only maintain 1e6 resolution.\n', '        newInfo = info & ~(((U256_1 << 20) - 1) << 160);\n', '        newInfo = newInfo | ((w / 1e12) << 160);\n', '    }\n', '\n', '    function _getHardWeight(uint256 info) internal pure returns (uint256 w) {\n', '        return ((info >> 180) & ((U256_1 << 20) - 1)) * 1e12;\n', '    }\n', '\n', '    function _setHardWeight(\n', '        uint256 info,\n', '        uint256 w\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 newInfo)\n', '    {\n', '        require (w <= W_ONE, "hard weight must <= 1e18");\n', '\n', '        // Only maintain 1e6 resolution.\n', '        newInfo = info & ~(((U256_1 << 20) - 1) << 180);\n', '        newInfo = newInfo | ((w / 1e12) << 180);\n', '    }\n', '\n', '    function _getDecimalMulitiplier(uint256 info) internal pure returns (uint256 dec) {\n', '        return (info >> (160 + DECM_OFF)) & ((U256_1 << 5) - 1);\n', '    }\n', '\n', '    function _setDecimalMultiplier(\n', '        uint256 info,\n', '        uint256 decm\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 newInfo)\n', '    {\n', '        require (decm < 18, "decimal multipler is too large");\n', '        newInfo = info & ~(((U256_1 << 5) - 1) << (160 + DECM_OFF));\n', '        newInfo = newInfo | (decm << (160 + DECM_OFF));\n', '    }\n', '\n', '    function _isYEnabled(uint256 info) internal pure returns (bool) {\n', '        return (info >> (160 + YENABLE_OFF)) & 0x1 == 0x1;\n', '    }\n', '\n', '    function _setYEnabled(uint256 info, bool enabled) internal pure returns (uint256) {\n', '        if (enabled) {\n', '            return info | (U256_1 << (160 + YENABLE_OFF));\n', '        } else {\n', '            return info & ~(U256_1 << (160 + YENABLE_OFF));\n', '        }\n', '    }\n', '\n', '    function _setTID(uint256 info, uint256 tid) internal pure returns (uint256) {\n', '        require (tid < 256, "tid is too large");\n', '        require (_getTID(info) == 0, "tid cannot set again");\n', '        return info | (tid << (160 + TID_OFF));\n', '    }\n', '\n', '    function _getTID(uint256 info) internal pure returns (uint256) {\n', '        return (info >> (160 + TID_OFF)) & 0xFF;\n', '    }\n', '\n', '    /****************************************\n', '     * Owner methods\n', '     ****************************************/\n', '    function pause(uint256 flag) external onlyOwner {\n', '        _pause(flag);\n', '    }\n', '\n', '    function unpause(uint256 flag) external onlyOwner {\n', '        _unpause(flag);\n', '    }\n', '\n', '    function changeRewardCollector(address newCollector) external onlyOwner {\n', '        _rewardCollector = newCollector;\n', '    }\n', '\n', '    function adjustWeights(\n', '        uint8 tid,\n', '        uint256 newSoftWeight,\n', '        uint256 newHardWeight\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(newSoftWeight <= newHardWeight, "Soft-limit weight must <= Hard-limit weight");\n', '        require(newHardWeight <= W_ONE, "hard-limit weight must <= 1");\n', '        require(tid < _ntokens, "Backed token not exists");\n', '\n', '        _tokenInfos[tid] = _setSoftWeight(_tokenInfos[tid], newSoftWeight);\n', '        _tokenInfos[tid] = _setHardWeight(_tokenInfos[tid], newHardWeight);\n', '    }\n', '\n', '    function changeSwapFee(uint256 swapFee) external onlyOwner {\n', '        require(swapFee <= SWAP_FEE_MAX, "Swap fee must is too large");\n', '        _swapFee = swapFee;\n', '    }\n', '\n', '    function changeRedeemFee(\n', '        uint256 redeemFee\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(redeemFee <= REDEEM_FEE_MAX, "Redeem fee is too large");\n', '        _redeemFee = redeemFee;\n', '    }\n', '\n', '    function changeAdminFeePct(uint256 pct) external onlyOwner {\n', '        require (pct <= ADMIN_FEE_PCT_MAX, "Admin fee pct is too large");\n', '        _adminFeePct = pct;\n', '    }\n', '\n', '    function changeAdminInterestPct(uint256 pct) external onlyOwner {\n', '        require (pct <= ADMIN_FEE_PCT_MAX, "Admin interest fee pct is too large");\n', '        _adminInterestPct = pct;\n', '    }\n', '\n', '    function initialize(\n', '        uint8 tid,\n', '        uint256 bTokenAmount\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(tid < _ntokens, "Backed token not exists");\n', '        uint256 info = _tokenInfos[tid];\n', '        address addr = address(info);\n', '\n', '        IERC20(addr).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            bTokenAmount\n', '        );\n', '        _totalBalance = _totalBalance.add(bTokenAmount.mul(_normalizeBalance(info)));\n', '        _mint(msg.sender, bTokenAmount.mul(_normalizeBalance(info)));\n', '    }\n', '\n', '    function addToken(\n', '        address addr,\n', '        address yAddr,\n', '        uint256 softWeight,\n', '        uint256 hardWeight,\n', '        uint256 decMultiplier\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint256 tid = _ntokens;\n', '        for (uint256 i = 0; i < tid; i++) {\n', '            require(address(_tokenInfos[i]) != addr, "cannot add dup token");\n', '        }\n', '\n', '        require (softWeight <= hardWeight, "soft weight must <= hard weight");\n', '\n', '        uint256 info = uint256(addr);\n', '        info = _setTID(info, tid);\n', '        info = _setYEnabled(info, yAddr != address(0x0));\n', '        info = _setSoftWeight(info, softWeight);\n', '        info = _setHardWeight(info, hardWeight);\n', '        info = _setDecimalMultiplier(info, decMultiplier);\n', '\n', '        _tokenInfos[tid] = info;\n', '        _yTokenAddresses[tid] = yAddr;\n', '        // _balances[tid] = 0; // no need to set\n', '        _ntokens = tid.add(1);\n', '    }\n', '\n', '    function setYEnabled(uint256 tid, address yAddr) external onlyOwner {\n', '        uint256 info = _tokenInfos[tid];\n', '        if (_yTokenAddresses[tid] != address(0x0)) {\n', '            // Withdraw all tokens from yToken, and clear yBalance.\n', '            uint256 pricePerShare = YERC20(_yTokenAddresses[tid]).getPricePerFullShare();\n', '            uint256 share = YERC20(_yTokenAddresses[tid]).balanceOf(address(this));\n', '            uint256 cash = _getCashBalance(info);\n', '            YERC20(_yTokenAddresses[tid]).withdraw(share);\n', '            uint256 dcash = _getCashBalance(info).sub(cash);\n', '            require(dcash >= pricePerShare.mul(share).div(W_ONE), "ytoken withdraw amount < expected");\n', '\n', '            // Update _totalBalance with interest\n', '            _updateTotalBalanceWithNewYBalance(tid, dcash);\n', '            _yBalances[tid] = 0;\n', '        }\n', '\n', '        info = _setYEnabled(info, yAddr != address(0x0));\n', '        _yTokenAddresses[tid] = yAddr;\n', '        _tokenInfos[tid] = info;\n', '        // If yAddr != 0x0, we will rebalance in next swap/mint/redeem/rebalance call.\n', '    }\n', '\n', '    /**\n', '     * Calculate binary logarithm of x.  Revert if x <= 0.\n', '     * See LICENSE_LOG.md for license.\n', '     *\n', '     * @param x signed 64.64-bit fixed point number\n', '     * @return signed 64.64-bit fixed point number\n', '     */\n', '    function lg2(int128 x) internal pure returns (int128) {\n', '        require (x > 0, "x must be positive");\n', '\n', '        int256 msb = 0;\n', '        int256 xc = x;\n', '\n', '        if (xc >= 0x10000000000000000) {xc >>= 64; msb += 64;}\n', '        if (xc >= 0x100000000) {xc >>= 32; msb += 32;}\n', '        if (xc >= 0x10000) {xc >>= 16; msb += 16;}\n', '        if (xc >= 0x100) {xc >>= 8; msb += 8;}\n', '        if (xc >= 0x10) {xc >>= 4; msb += 4;}\n', '        if (xc >= 0x4) {xc >>= 2; msb += 2;}\n', '        if (xc >= 0x2) {msb += 1;}  // No need to shift xc anymore\n', '\n', '        int256 result = (msb - 64) << 64;\n', '        uint256 ux = uint256 (x) << (127 - msb);\n', '        /* 20 iterations so that the resolution is aboout 2^-20 \\approx 5e-6 */\n', '        for (int256 bit = 0x8000000000000000; bit > 0x80000000000; bit >>= 1) {\n', '            ux *= ux;\n', '            uint256 b = ux >> 255;\n', '            ux >>= 127 + b;\n', '            result += bit * int256(b);\n', '        }\n', '\n', '        return int128(result);\n', '    }\n', '\n', '    function _safeToInt128(uint256 x) internal pure returns (int128 y) {\n', '        y = int128(x);\n', '        require(x == uint256(y), "Conversion to int128 failed");\n', '        return y;\n', '    }\n', '\n', '    /**\n', '     * @dev Return the approx logarithm of a value with log(x) where x <= 1.1.\n', '     * All values are in integers with (1e18 == 1.0).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input value x must be greater than 1e18\n', '     */\n', '    function _logApprox(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 one = W_ONE;\n', '\n', '        require(x >= one, "logApprox: x must >= 1");\n', '\n', '        uint256 z = x - one;\n', '        uint256 zz = z.mul(z).div(one);\n', '        uint256 zzz = zz.mul(z).div(one);\n', '        uint256 zzzz = zzz.mul(z).div(one);\n', '        uint256 zzzzz = zzzz.mul(z).div(one);\n', '        return z.sub(zz.div(2)).add(zzz.div(3)).sub(zzzz.div(4)).add(zzzzz.div(5));\n', '    }\n', '\n', '    /**\n', '     * @dev Return the logarithm of a value.\n', '     * All values are in integers with (1e18 == 1.0).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input value x must be greater than 1e18\n', '     */\n', '    function _log(uint256 x) internal pure returns (uint256 y) {\n', '        require(x >= W_ONE, "log(x): x must be greater than 1");\n', '        require(x < (W_ONE << 63), "log(x): x is too large");\n', '\n', '        if (x <= W_ONE.add(W_ONE.div(10))) {\n', '            return _logApprox(x);\n', '        }\n', '\n', '        /* Convert to 64.64 float point */\n', '        int128 xx = _safeToInt128((x << 64) / W_ONE);\n', '\n', '        int128 yy = lg2(xx);\n', '\n', '        /* log(2) * 1e18 \\approx 693147180559945344 */\n', '        y = (uint256(yy) * 693147180559945344) >> 64;\n', '\n', '        return y;\n', '    }\n', '\n', '    /**\n', '     * Return weights and cached balances of all tokens\n', '     * Note that the cached balance does not include the accrued interest since last rebalance.\n', '     */\n', '    function _getBalancesAndWeights()\n', '        internal\n', '        view\n', '        returns (uint256[] memory balances, uint256[] memory softWeights, uint256[] memory hardWeights, uint256 totalBalance)\n', '    {\n', '        uint256 ntokens = _ntokens;\n', '        balances = new uint256[](ntokens);\n', '        softWeights = new uint256[](ntokens);\n', '        hardWeights = new uint256[](ntokens);\n', '        totalBalance = 0;\n', '        for (uint8 i = 0; i < ntokens; i++) {\n', '            uint256 info = _tokenInfos[i];\n', '            balances[i] = _getCashBalance(info);\n', '            if (_isYEnabled(info)) {\n', '                balances[i] = balances[i].add(_yBalances[i]);\n', '            }\n', '            totalBalance = totalBalance.add(balances[i]);\n', '            softWeights[i] = _getSoftWeight(info);\n', '            hardWeights[i] = _getHardWeight(info);\n', '        }\n', '    }\n', '\n', '    function _getBalancesAndInfos()\n', '        internal\n', '        view\n', '        returns (uint256[] memory balances, uint256[] memory infos, uint256 totalBalance)\n', '    {\n', '        uint256 ntokens = _ntokens;\n', '        balances = new uint256[](ntokens);\n', '        infos = new uint256[](ntokens);\n', '        totalBalance = 0;\n', '        for (uint8 i = 0; i < ntokens; i++) {\n', '            infos[i] = _tokenInfos[i];\n', '            balances[i] = _getCashBalance(infos[i]);\n', '            if (_isYEnabled(infos[i])) {\n', '                balances[i] = balances[i].add(_yBalances[i]);\n', '            }\n', '            totalBalance = totalBalance.add(balances[i]);\n', '        }\n', '    }\n', '\n', '    function _getBalance(uint256 info) internal view returns (uint256 balance) {\n', '        balance = _getCashBalance(info);\n', '        if (_isYEnabled(info)) {\n', '            balance = balance.add(_yBalances[_getTID(info)]);\n', '        }\n', '    }\n', '\n', '    function getBalance(uint256 tid) public view returns (uint256) {\n', '        return _getBalance(_tokenInfos[tid]);\n', '    }\n', '\n', '    function _normalizeBalance(uint256 info) internal pure returns (uint256) {\n', '        uint256 decm = _getDecimalMulitiplier(info);\n', '        return 10 ** decm;\n', '    }\n', '\n', '    /* @dev Return normalized cash balance of a token */\n', '    function _getCashBalance(uint256 info) internal view returns (uint256) {\n', '        return IERC20(address(info)).balanceOf(address(this))\n', '            .mul(_normalizeBalance(info));\n', '    }\n', '\n', '    function _getBalanceDetail(\n', '        uint256 info\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256 pricePerShare, uint256 cashUnnormalized, uint256 yBalanceUnnormalized)\n', '    {\n', '        address yAddr = _yTokenAddresses[_getTID(info)];\n', '        pricePerShare = YERC20(yAddr).getPricePerFullShare();\n', '        cashUnnormalized = IERC20(address(info)).balanceOf(address(this));\n', '        uint256 share = YERC20(yAddr).balanceOf(address(this));\n', '        yBalanceUnnormalized = share.mul(pricePerShare).div(W_ONE);\n', '    }\n', '\n', '    /**************************************************************************************\n', '     * Methods for rebalance cash reserve\n', '     * After rebalancing, we will have cash reserve equaling to 10% of total balance\n', '     * There are two conditions to trigger a rebalancing\n', '     * - if there is insufficient cash for withdraw; or\n', '     * - if the cash reserve is greater than 20% of total balance.\n', '     * Note that we use a cached version of total balance to avoid high gas cost on calling\n', '     * getPricePerFullShare().\n', '     *************************************************************************************/\n', '    function _updateTotalBalanceWithNewYBalance(\n', '        uint256 tid,\n', '        uint256 yBalanceNormalizedNew\n', '    )\n', '        internal\n', '    {\n', '        uint256 adminFee = 0;\n', '        uint256 yBalanceNormalizedOld = _yBalances[tid];\n', '        // They yBalance should not be decreasing, but just in case,\n', '        if (yBalanceNormalizedNew >= yBalanceNormalizedOld) {\n', '            adminFee = (yBalanceNormalizedNew - yBalanceNormalizedOld).mul(_adminInterestPct).div(W_ONE);\n', '        }\n', '        _totalBalance = _totalBalance\n', '            .sub(yBalanceNormalizedOld)\n', '            .add(yBalanceNormalizedNew)\n', '            .sub(adminFee);\n', '    }\n', '\n', '    function _rebalanceReserve(\n', '        uint256 info\n', '    )\n', '        internal\n', '    {\n', '        require(_isYEnabled(info), "yToken must be enabled for rebalancing");\n', '\n', '        uint256 pricePerShare;\n', '        uint256 cashUnnormalized;\n', '        uint256 yBalanceUnnormalized;\n', '        (pricePerShare, cashUnnormalized, yBalanceUnnormalized) = _getBalanceDetail(info);\n', '        uint256 tid = _getTID(info);\n', '\n', '        // Update _totalBalance with interest\n', '        _updateTotalBalanceWithNewYBalance(tid, yBalanceUnnormalized.mul(_normalizeBalance(info)));\n', '\n', '        uint256 targetCash = yBalanceUnnormalized.add(cashUnnormalized).div(10);\n', '        if (cashUnnormalized > targetCash) {\n', '            uint256 depositAmount = cashUnnormalized.sub(targetCash);\n', '            // Reset allowance to bypass possible allowance check (e.g., USDT)\n', '            IERC20(address(info)).safeApprove(_yTokenAddresses[tid], 0);\n', '            IERC20(address(info)).safeApprove(_yTokenAddresses[tid], depositAmount);\n', '\n', '            // Calculate acutal deposit in the case that some yTokens may return partial deposit.\n', '            uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\n', '            YERC20(_yTokenAddresses[tid]).deposit(depositAmount);\n', '            uint256 actualDeposit = balanceBefore.sub(IERC20(address(info)).balanceOf(address(this)));\n', '            _yBalances[tid] = yBalanceUnnormalized.add(actualDeposit).mul(_normalizeBalance(info));\n', '        } else {\n', '            uint256 expectedWithdraw = targetCash.sub(cashUnnormalized);\n', '            if (expectedWithdraw == 0) {\n', '                return;\n', '            }\n', '\n', '            uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\n', '            // Withdraw +1 wei share to make sure actual withdraw >= expected.\n', '            YERC20(_yTokenAddresses[tid]).withdraw(expectedWithdraw.mul(W_ONE).div(pricePerShare).add(1));\n', '            uint256 actualWithdraw = IERC20(address(info)).balanceOf(address(this)).sub(balanceBefore);\n', '            require(actualWithdraw >= expectedWithdraw, "insufficient cash withdrawn from yToken");\n', '            _yBalances[tid] = yBalanceUnnormalized.sub(actualWithdraw).mul(_normalizeBalance(info));\n', '        }\n', '    }\n', '\n', '    /* @dev Forcibly rebalance so that cash reserve is about 10% of total. */\n', '    function rebalanceReserve(\n', '        uint256 tid\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        _rebalanceReserve(_tokenInfos[tid]);\n', '    }\n', '\n', '    /*\n', '     * @dev Rebalance the cash reserve so that\n', '     * cash reserve consists of 10% of total balance after substracting amountUnnormalized.\n', '     *\n', '     * Assume that current cash reserve < amountUnnormalized.\n', '     */\n', '    function _rebalanceReserveSubstract(\n', '        uint256 info,\n', '        uint256 amountUnnormalized\n', '    )\n', '        internal\n', '    {\n', '        require(_isYEnabled(info), "yToken must be enabled for rebalancing");\n', '\n', '        uint256 pricePerShare;\n', '        uint256 cashUnnormalized;\n', '        uint256 yBalanceUnnormalized;\n', '        (pricePerShare, cashUnnormalized, yBalanceUnnormalized) = _getBalanceDetail(info);\n', '\n', '        // Update _totalBalance with interest\n', '        _updateTotalBalanceWithNewYBalance(\n', '            _getTID(info),\n', '            yBalanceUnnormalized.mul(_normalizeBalance(info))\n', '        );\n', '\n', '        // Evaluate the shares to withdraw so that cash = 10% of total\n', '        uint256 expectedWithdraw = cashUnnormalized.add(yBalanceUnnormalized).sub(\n', '            amountUnnormalized).div(10).add(amountUnnormalized).sub(cashUnnormalized);\n', '        if (expectedWithdraw == 0) {\n', '            return;\n', '        }\n', '\n', '        // Withdraw +1 wei share to make sure actual withdraw >= expected.\n', '        uint256 withdrawShares = expectedWithdraw.mul(W_ONE).div(pricePerShare).add(1);\n', '        uint256 balanceBefore = IERC20(address(info)).balanceOf(address(this));\n', '        YERC20(_yTokenAddresses[_getTID(info)]).withdraw(withdrawShares);\n', '        uint256 actualWithdraw = IERC20(address(info)).balanceOf(address(this)).sub(balanceBefore);\n', '        require(actualWithdraw >= expectedWithdraw, "insufficient cash withdrawn from yToken");\n', '        _yBalances[_getTID(info)] = yBalanceUnnormalized.sub(actualWithdraw)\n', '            .mul(_normalizeBalance(info));\n', '    }\n', '\n', '    /* @dev Transfer the amount of token out.  Rebalance the cash reserve if needed */\n', '    function _transferOut(\n', '        uint256 info,\n', '        uint256 amountUnnormalized,\n', '        uint256 adminFee\n', '    )\n', '        internal\n', '    {\n', '        uint256 amountNormalized = amountUnnormalized.mul(_normalizeBalance(info));\n', '        if (_isYEnabled(info)) {\n', '            if (IERC20(address(info)).balanceOf(address(this)) < amountUnnormalized) {\n', '                _rebalanceReserveSubstract(info, amountUnnormalized);\n', '            }\n', '        }\n', '\n', '        IERC20(address(info)).safeTransfer(\n', '            msg.sender,\n', '            amountUnnormalized\n', '        );\n', '        _totalBalance = _totalBalance\n', '            .sub(amountNormalized)\n', '            .sub(adminFee.mul(_normalizeBalance(info)));\n', '    }\n', '\n', '    /* @dev Transfer the amount of token in.  Rebalance the cash reserve if needed */\n', '    function _transferIn(\n', '        uint256 info,\n', '        uint256 amountUnnormalized\n', '    )\n', '        internal\n', '    {\n', '        uint256 amountNormalized = amountUnnormalized.mul(_normalizeBalance(info));\n', '        IERC20(address(info)).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            amountUnnormalized\n', '        );\n', '        _totalBalance = _totalBalance.add(amountNormalized);\n', '\n', '        // If there is saving ytoken, save the balance in _balance.\n', '        if (_isYEnabled(info)) {\n', '            uint256 tid = _getTID(info);\n', '            /* Check rebalance if needed */\n', '            uint256 cash = _getCashBalance(info);\n', '            if (cash > cash.add(_yBalances[tid]).mul(2).div(10)) {\n', '                _rebalanceReserve(info);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**************************************************************************************\n', '     * Methods for minting LP tokens\n', '     *************************************************************************************/\n', '\n', '    /*\n', '     * @dev Return the amount of sUSD should be minted after depositing bTokenAmount into the pool\n', '     * @param bTokenAmountNormalized - normalized amount of token to be deposited\n', '     * @param oldBalance - normalized amount of all tokens before the deposit\n', '     * @param oldTokenBlance - normalized amount of the balance of the token to be deposited in the pool\n', '     * @param softWeight - percentage that will incur penalty if the resulting token percentage is greater\n', '     * @param hardWeight - maximum percentage of the token\n', '     */\n', '    function _getMintAmount(\n', '        uint256 bTokenAmountNormalized,\n', '        uint256 oldBalance,\n', '        uint256 oldTokenBalance,\n', '        uint256 softWeight,\n', '        uint256 hardWeight\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256 s)\n', '    {\n', '        /* Evaluate new percentage */\n', '        uint256 newBalance = oldBalance.add(bTokenAmountNormalized);\n', '        uint256 newTokenBalance = oldTokenBalance.add(bTokenAmountNormalized);\n', '\n', '        /* If new percentage <= soft weight, no penalty */\n', '        if (newTokenBalance.mul(W_ONE) <= softWeight.mul(newBalance)) {\n', '            return bTokenAmountNormalized;\n', '        }\n', '\n', '        require (\n', '            newTokenBalance.mul(W_ONE) <= hardWeight.mul(newBalance),\n', '            "mint: new percentage exceeds hard weight"\n', '        );\n', '\n', '        s = 0;\n', '        /* if new percentage <= soft weight, get the beginning of integral with penalty. */\n', '        if (oldTokenBalance.mul(W_ONE) <= softWeight.mul(oldBalance)) {\n', '            s = oldBalance.mul(softWeight).sub(oldTokenBalance.mul(W_ONE)).div(W_ONE.sub(softWeight));\n', '        }\n', '\n', '        // bx + (tx - bx) * (w - 1) / (w - v) + (S - x) * ln((S + tx) / (S + bx)) / (w - v)\n', '        uint256 t;\n', '        { // avoid stack too deep error\n', '        uint256 ldelta = _log(newBalance.mul(W_ONE).div(oldBalance.add(s)));\n', '        t = oldBalance.sub(oldTokenBalance).mul(ldelta);\n', '        }\n', '        t = t.sub(bTokenAmountNormalized.sub(s).mul(W_ONE.sub(hardWeight)));\n', '        t = t.div(hardWeight.sub(softWeight));\n', '        s = s.add(t);\n', '\n', '        require(s <= bTokenAmountNormalized, "penalty should be positive");\n', '    }\n', '\n', '    /*\n', '     * @dev Given the token id and the amount to be deposited, return the amount of lp token\n', '     */\n', '    function getMintAmount(\n', '        uint256 bTokenIdx,\n', '        uint256 bTokenAmount\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 lpTokenAmount)\n', '    {\n', '        require(bTokenAmount > 0, "Amount must be greater than 0");\n', '\n', '        uint256 info = _tokenInfos[bTokenIdx];\n', '        require(info != 0, "Backed token is not found!");\n', '\n', '        // Obtain normalized balances\n', '        uint256 bTokenAmountNormalized = bTokenAmount.mul(_normalizeBalance(info));\n', '        // Gas saving: Use cached totalBalance with accrued interest since last rebalance.\n', '        uint256 totalBalance = _totalBalance;\n', '        uint256 sTokenAmount = _getMintAmount(\n', '            bTokenAmountNormalized,\n', '            totalBalance,\n', '            _getBalance(info),\n', '            _getSoftWeight(info),\n', '            _getHardWeight(info)\n', '        );\n', '\n', '        return sTokenAmount.mul(totalSupply()).div(totalBalance);\n', '    }\n', '\n', '    /*\n', '     * @dev Given the token id and the amount to be deposited, mint lp token\n', '     */\n', '    function mint(\n', '        uint256 bTokenIdx,\n', '        uint256 bTokenAmount,\n', '        uint256 lpTokenMintedMin\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        uint256 lpTokenAmount = getMintAmount(bTokenIdx, bTokenAmount);\n', '        require(\n', '            lpTokenAmount >= lpTokenMintedMin,\n', '            "lpToken minted should >= minimum lpToken asked"\n', '        );\n', '\n', '        _transferIn(_tokenInfos[bTokenIdx], bTokenAmount);\n', '        _mint(msg.sender, lpTokenAmount);\n', '        emit Mint(msg.sender, bTokenAmount, lpTokenAmount);\n', '    }\n', '\n', '    /**************************************************************************************\n', '     * Methods for redeeming LP tokens\n', '     *************************************************************************************/\n', '\n', '    /*\n', '     * @dev Return number of sUSD that is needed to redeem corresponding amount of token for another\n', '     *      token\n', '     * Withdrawing a token will result in increased percentage of other tokens, where\n', '     * the function is used to calculate the penalty incured by the increase of one token.\n', '     * @param totalBalance - normalized amount of the sum of all tokens\n', '     * @param tokenBlance - normalized amount of the balance of a non-withdrawn token\n', '     * @param redeemAount - normalized amount of the token to be withdrawn\n', '     * @param softWeight - percentage that will incur penalty if the resulting token percentage is greater\n', '     * @param hardWeight - maximum percentage of the token\n', '     */\n', '    function _redeemPenaltyFor(\n', '        uint256 totalBalance,\n', '        uint256 tokenBalance,\n', '        uint256 redeemAmount,\n', '        uint256 softWeight,\n', '        uint256 hardWeight\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\n', '\n', '        /* Soft weight is satisfied.  No penalty is incurred */\n', '        if (tokenBalance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\n', '            return 0;\n', '        }\n', '\n', '        require (\n', '            tokenBalance.mul(W_ONE) <= newTotalBalance.mul(hardWeight),\n', '            "redeem: hard-limit weight is broken"\n', '        );\n', '\n', '        uint256 bx = 0;\n', '        // Evaluate the beginning of the integral for broken soft weight\n', '        if (tokenBalance.mul(W_ONE) < totalBalance.mul(softWeight)) {\n', '            bx = totalBalance.sub(tokenBalance.mul(W_ONE).div(softWeight));\n', '        }\n', '\n', '        // x * (w - v) / w / w * ln(1 + (tx - bx) * w / (w * (S - tx) - x)) - (tx - bx) * v / w\n', '        uint256 tdelta = tokenBalance.mul(\n', '            _log(W_ONE.add(redeemAmount.sub(bx).mul(hardWeight).div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(tokenBalance)))));\n', '        uint256 s1 = tdelta.mul(hardWeight.sub(softWeight))\n', '            .div(hardWeight).div(hardWeight);\n', '        uint256 s2 = redeemAmount.sub(bx).mul(softWeight).div(hardWeight);\n', '        return s1.sub(s2);\n', '    }\n', '\n', '    /*\n', '     * @dev Return number of sUSD that is needed to redeem corresponding amount of token\n', '     * Withdrawing a token will result in increased percentage of other tokens, where\n', '     * the function is used to calculate the penalty incured by the increase.\n', '     * @param bTokenIdx - token id to be withdrawn\n', '     * @param totalBalance - normalized amount of the sum of all tokens\n', '     * @param balances - normalized amount of the balance of each token\n', '     * @param softWeights - percentage that will incur penalty if the resulting token percentage is greater\n', '     * @param hardWeights - maximum percentage of the token\n', '     * @param redeemAount - normalized amount of the token to be withdrawn\n', '     */\n', '    function _redeemPenaltyForAll(\n', '        uint256 bTokenIdx,\n', '        uint256 totalBalance,\n', '        uint256[] memory balances,\n', '        uint256[] memory softWeights,\n', '        uint256[] memory hardWeights,\n', '        uint256 redeemAmount\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 s = 0;\n', '        for (uint256 k = 0; k < balances.length; k++) {\n', '            if (k == bTokenIdx) {\n', '                continue;\n', '            }\n', '\n', '            s = s.add(\n', '                _redeemPenaltyFor(totalBalance, balances[k], redeemAmount, softWeights[k], hardWeights[k]));\n', '        }\n', '        return s;\n', '    }\n', '\n', '    /*\n', '     * @dev Calculate the derivative of the penalty function.\n', '     * Same parameters as _redeemPenaltyFor.\n', '     */\n', '    function _redeemPenaltyDerivativeForOne(\n', '        uint256 totalBalance,\n', '        uint256 tokenBalance,\n', '        uint256 redeemAmount,\n', '        uint256 softWeight,\n', '        uint256 hardWeight\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 dfx = W_ONE;\n', '        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\n', '\n', '        /* Soft weight is satisfied.  No penalty is incurred */\n', '        if (tokenBalance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\n', '            return dfx;\n', '        }\n', '\n', '        // dx = dx + x * (w - v) / (w * (S - tx) - x) / w - v / w\n', '        return dfx.add(tokenBalance.mul(hardWeight.sub(softWeight))\n', '            .div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(tokenBalance)))\n', '            .sub(softWeight.mul(W_ONE).div(hardWeight));\n', '    }\n', '\n', '    /*\n', '     * @dev Calculate the derivative of the penalty function.\n', '     * Same parameters as _redeemPenaltyForAll.\n', '     */\n', '    function _redeemPenaltyDerivativeForAll(\n', '        uint256 bTokenIdx,\n', '        uint256 totalBalance,\n', '        uint256[] memory balances,\n', '        uint256[] memory softWeights,\n', '        uint256[] memory hardWeights,\n', '        uint256 redeemAmount\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 dfx = W_ONE;\n', '        uint256 newTotalBalance = totalBalance.sub(redeemAmount);\n', '        for (uint256 k = 0; k < balances.length; k++) {\n', '            if (k == bTokenIdx) {\n', '                continue;\n', '            }\n', '\n', '            /* Soft weight is satisfied.  No penalty is incurred */\n', '            uint256 softWeight = softWeights[k];\n', '            uint256 balance = balances[k];\n', '            if (balance.mul(W_ONE) <= newTotalBalance.mul(softWeight)) {\n', '                continue;\n', '            }\n', '\n', '            // dx = dx + x * (w - v) / (w * (S - tx) - x) / w - v / w\n', '            uint256 hardWeight = hardWeights[k];\n', '            dfx = dfx.add(balance.mul(hardWeight.sub(softWeight))\n', '                .div(hardWeight.mul(newTotalBalance).div(W_ONE).sub(balance)))\n', '                .sub(softWeight.mul(W_ONE).div(hardWeight));\n', '        }\n', '        return dfx;\n', '    }\n', '\n', '    /*\n', '     * @dev Given the amount of sUSD to be redeemed, find the max token can be withdrawn\n', '     * This function is for swap only.\n', '     * @param tidOutBalance - the balance of the token to be withdrawn\n', '     * @param totalBalance - total balance of all tokens\n', '     * @param tidInBalance - the balance of the token to be deposited\n', '     * @param sTokenAmount - the amount of sUSD to be redeemed\n', '     * @param softWeight/hardWeight - normalized weights for the token to be withdrawn.\n', '     */\n', '    function _redeemFindOne(\n', '        uint256 tidOutBalance,\n', '        uint256 totalBalance,\n', '        uint256 tidInBalance,\n', '        uint256 sTokenAmount,\n', '        uint256 softWeight,\n', '        uint256 hardWeight\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 redeemAmountNormalized = Math.min(\n', '            sTokenAmount,\n', '            tidOutBalance.mul(999).div(1000)\n', '        );\n', '\n', '        for (uint256 i = 0; i < 256; i++) {\n', '            uint256 sNeeded = redeemAmountNormalized.add(\n', '                _redeemPenaltyFor(\n', '                    totalBalance,\n', '                    tidInBalance,\n', '                    redeemAmountNormalized,\n', '                    softWeight,\n', '                    hardWeight\n', '                ));\n', '            uint256 fx = 0;\n', '\n', '            if (sNeeded > sTokenAmount) {\n', '                fx = sNeeded - sTokenAmount;\n', '            } else {\n', '                fx = sTokenAmount - sNeeded;\n', '            }\n', '\n', '            // penalty < 1e-5 of out amount\n', '            if (fx < redeemAmountNormalized / 100000) {\n', '                require(redeemAmountNormalized <= sTokenAmount, "Redeem error: out amount > lp amount");\n', '                require(redeemAmountNormalized <= tidOutBalance, "Redeem error: insufficient balance");\n', '                return redeemAmountNormalized;\n', '            }\n', '\n', '            uint256 dfx = _redeemPenaltyDerivativeForOne(\n', '                totalBalance,\n', '                tidInBalance,\n', '                redeemAmountNormalized,\n', '                softWeight,\n', '                hardWeight\n', '            );\n', '\n', '            if (sNeeded > sTokenAmount) {\n', '                redeemAmountNormalized = redeemAmountNormalized.sub(fx.mul(W_ONE).div(dfx));\n', '            } else {\n', '                redeemAmountNormalized = redeemAmountNormalized.add(fx.mul(W_ONE).div(dfx));\n', '            }\n', '        }\n', '        require (false, "cannot find proper resolution of fx");\n', '    }\n', '\n', '    /*\n', '     * @dev Given the amount of sUSD token to be redeemed, find the max token can be withdrawn\n', '     * @param bTokenIdx - the id of the token to be withdrawn\n', '     * @param sTokenAmount - the amount of sUSD token to be redeemed\n', '     * @param totalBalance - total balance of all tokens\n', '     * @param balances/softWeight/hardWeight - normalized balances/weights of all tokens\n', '     */\n', '    function _redeemFind(\n', '        uint256 bTokenIdx,\n', '        uint256 sTokenAmount,\n', '        uint256 totalBalance,\n', '        uint256[] memory balances,\n', '        uint256[] memory softWeights,\n', '        uint256[] memory hardWeights\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 bTokenAmountNormalized = Math.min(\n', '            sTokenAmount,\n', '            balances[bTokenIdx].mul(999).div(1000)\n', '        );\n', '\n', '        for (uint256 i = 0; i < 256; i++) {\n', '            uint256 sNeeded = bTokenAmountNormalized.add(\n', '                _redeemPenaltyForAll(\n', '                    bTokenIdx,\n', '                    totalBalance,\n', '                    balances,\n', '                    softWeights,\n', '                    hardWeights,\n', '                    bTokenAmountNormalized\n', '                ));\n', '            uint256 fx = 0;\n', '\n', '            if (sNeeded > sTokenAmount) {\n', '                fx = sNeeded - sTokenAmount;\n', '            } else {\n', '                fx = sTokenAmount - sNeeded;\n', '            }\n', '\n', '            // penalty < 1e-5 of out amount\n', '            if (fx < bTokenAmountNormalized / 100000) {\n', '                require(bTokenAmountNormalized <= sTokenAmount, "Redeem error: out amount > lp amount");\n', '                require(bTokenAmountNormalized <= balances[bTokenIdx], "Redeem error: insufficient balance");\n', '                return bTokenAmountNormalized;\n', '            }\n', '\n', '            uint256 dfx = _redeemPenaltyDerivativeForAll(\n', '                bTokenIdx,\n', '                totalBalance,\n', '                balances,\n', '                softWeights,\n', '                hardWeights,\n', '                bTokenAmountNormalized\n', '            );\n', '\n', '            if (sNeeded > sTokenAmount) {\n', '                bTokenAmountNormalized = bTokenAmountNormalized.sub(fx.mul(W_ONE).div(dfx));\n', '            } else {\n', '                bTokenAmountNormalized = bTokenAmountNormalized.add(fx.mul(W_ONE).div(dfx));\n', '            }\n', '        }\n', '        require (false, "cannot find proper resolution of fx");\n', '    }\n', '\n', '    /*\n', '     * @dev Given token id and LP token amount, return the max amount of token can be withdrawn\n', '     * @param tid - the id of the token to be withdrawn\n', '     * @param lpTokenAmount - the amount of LP token\n', '     */\n', '    function _getRedeemByLpTokenAmount(\n', '        uint256 tid,\n', '        uint256 lpTokenAmount\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256 bTokenAmount, uint256 totalBalance, uint256 adminFee)\n', '    {\n', '        require(lpTokenAmount > 0, "Amount must be greater than 0");\n', '\n', '        uint256 info = _tokenInfos[tid];\n', '        require(info != 0, "Backed token is not found!");\n', '\n', '        // Obtain normalized balances.\n', '        // Gas saving: Use cached balances/totalBalance without accrued interest since last rebalance.\n', '        uint256[] memory balances;\n', '        uint256[] memory softWeights;\n', '        uint256[] memory hardWeights;\n', '        (balances, softWeights, hardWeights, totalBalance) = _getBalancesAndWeights();\n', '        bTokenAmount = _redeemFind(\n', '            tid,\n', '            lpTokenAmount.mul(totalBalance).div(totalSupply()),\n', '            totalBalance,\n', '            balances,\n', '            softWeights,\n', '            hardWeights\n', '        ).div(_normalizeBalance(info));\n', '        uint256 fee = bTokenAmount.mul(_redeemFee).div(W_ONE);\n', '        adminFee = fee.mul(_adminFeePct).div(W_ONE);\n', '        bTokenAmount = bTokenAmount.sub(fee);\n', '    }\n', '\n', '    function getRedeemByLpTokenAmount(\n', '        uint256 tid,\n', '        uint256 lpTokenAmount\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 bTokenAmount)\n', '    {\n', '        (bTokenAmount,,) = _getRedeemByLpTokenAmount(tid, lpTokenAmount);\n', '\n', '    }\n', '\n', '    function redeemByLpToken(\n', '        uint256 bTokenIdx,\n', '        uint256 lpTokenAmount,\n', '        uint256 bTokenMin\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        (uint256 bTokenAmount, uint256 totalBalance, uint256 adminFee) = _getRedeemByLpTokenAmount(\n', '            bTokenIdx,\n', '            lpTokenAmount\n', '        );\n', '        require(bTokenAmount >= bTokenMin, "bToken returned < min bToken asked");\n', '\n', '        // Make sure _totalBalance == sum(balances)\n', '        _collectReward(totalBalance);\n', '\n', '        _burn(msg.sender, lpTokenAmount);\n', '        _transferOut(_tokenInfos[bTokenIdx], bTokenAmount, adminFee);\n', '\n', '        emit Redeem(msg.sender, bTokenAmount, lpTokenAmount);\n', '    }\n', '\n', '    /* @dev Redeem a specific token from the pool.\n', '     * Fee will be incured.  Will incur penalty if the pool is unbalanced.\n', '     */\n', '    function redeem(\n', '        uint256 bTokenIdx,\n', '        uint256 bTokenAmount,\n', '        uint256 lpTokenBurnedMax\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        require(bTokenAmount > 0, "Amount must be greater than 0");\n', '\n', '        uint256 info = _tokenInfos[bTokenIdx];\n', '        require (info != 0, "Backed token is not found!");\n', '\n', '        // Obtain normalized balances.\n', '        // Gas saving: Use cached balances/totalBalance without accrued interest since last rebalance.\n', '        (\n', '            uint256[] memory balances,\n', '            uint256[] memory softWeights,\n', '            uint256[] memory hardWeights,\n', '            uint256 totalBalance\n', '        ) = _getBalancesAndWeights();\n', '        uint256 bTokenAmountNormalized = bTokenAmount.mul(_normalizeBalance(info));\n', '        require(balances[bTokenIdx] >= bTokenAmountNormalized, "Insufficient token to redeem");\n', '\n', '        _collectReward(totalBalance);\n', '\n', '        uint256 lpAmount = bTokenAmountNormalized.add(\n', '            _redeemPenaltyForAll(\n', '                bTokenIdx,\n', '                totalBalance,\n', '                balances,\n', '                softWeights,\n', '                hardWeights,\n', '                bTokenAmountNormalized\n', '            )).mul(totalSupply()).div(totalBalance);\n', '        require(lpAmount <= lpTokenBurnedMax, "burned token should <= maximum lpToken offered");\n', '\n', '        _burn(msg.sender, lpAmount);\n', '\n', '        /* Transfer out the token after deducting the fee.  Rebalance cash reserve if needed */\n', '        uint256 fee = bTokenAmount.mul(_redeemFee).div(W_ONE);\n', '        _transferOut(\n', '            _tokenInfos[bTokenIdx],\n', '            bTokenAmount.sub(fee),\n', '            fee.mul(_adminFeePct).div(W_ONE)\n', '        );\n', '\n', '        emit Redeem(msg.sender, bTokenAmount, lpAmount);\n', '    }\n', '\n', '    /**************************************************************************************\n', '     * Methods for swapping tokens\n', '     *************************************************************************************/\n', '\n', '    /*\n', '     * @dev Return the maximum amount of token can be withdrawn after depositing another token.\n', '     * @param bTokenIdIn - the id of the token to be deposited\n', '     * @param bTokenIdOut - the id of the token to be withdrawn\n', '     * @param bTokenInAmount - the amount (unnormalized) of the token to be deposited\n', '     */\n', '    function getSwapAmount(\n', '        uint256 bTokenIdxIn,\n', '        uint256 bTokenIdxOut,\n', '        uint256 bTokenInAmount\n', '    )\n', '        external\n', '        view\n', '        returns (uint256 bTokenOutAmount)\n', '    {\n', '        uint256 infoIn = _tokenInfos[bTokenIdxIn];\n', '        uint256 infoOut = _tokenInfos[bTokenIdxOut];\n', '\n', '        (bTokenOutAmount,) = _getSwapAmount(infoIn, infoOut, bTokenInAmount);\n', '    }\n', '\n', '    function _getSwapAmount(\n', '        uint256 infoIn,\n', '        uint256 infoOut,\n', '        uint256 bTokenInAmount\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256 bTokenOutAmount, uint256 adminFee)\n', '    {\n', '        require(bTokenInAmount > 0, "Amount must be greater than 0");\n', '        require(infoIn != 0, "Backed token is not found!");\n', '        require(infoOut != 0, "Backed token is not found!");\n', '        require (infoIn != infoOut, "Tokens for swap must be different!");\n', '\n', '        // Gas saving: Use cached totalBalance without accrued interest since last rebalance.\n', '        // Here we assume that the interest earned from the underlying platform is too small to\n', '        // impact the result significantly.\n', '        uint256 totalBalance = _totalBalance;\n', '        uint256 tidInBalance = _getBalance(infoIn);\n', '        uint256 sMinted = 0;\n', '        uint256 softWeight = _getSoftWeight(infoIn);\n', '        uint256 hardWeight = _getHardWeight(infoIn);\n', '\n', '        { // avoid stack too deep error\n', '        uint256 bTokenInAmountNormalized = bTokenInAmount.mul(_normalizeBalance(infoIn));\n', '        sMinted = _getMintAmount(\n', '            bTokenInAmountNormalized,\n', '            totalBalance,\n', '            tidInBalance,\n', '            softWeight,\n', '            hardWeight\n', '        );\n', '\n', '        totalBalance = totalBalance.add(bTokenInAmountNormalized);\n', '        tidInBalance = tidInBalance.add(bTokenInAmountNormalized);\n', '        }\n', '        uint256 tidOutBalance = _getBalance(infoOut);\n', '\n', '        // Find the bTokenOutAmount, only account for penalty from bTokenIdxIn\n', '        // because other tokens should not have penalty since\n', '        // bTokenOutAmount <= sMinted <= bTokenInAmount (normalized), and thus\n', '        // for other tokens, the percentage decreased by bTokenInAmount will be\n', '        // >= the percetnage increased by bTokenOutAmount.\n', '        bTokenOutAmount = _redeemFindOne(\n', '            tidOutBalance,\n', '            totalBalance,\n', '            tidInBalance,\n', '            sMinted,\n', '            softWeight,\n', '            hardWeight\n', '        ).div(_normalizeBalance(infoOut));\n', '        uint256 fee = bTokenOutAmount.mul(_swapFee).div(W_ONE);\n', '        adminFee = fee.mul(_adminFeePct).div(W_ONE);\n', '        bTokenOutAmount = bTokenOutAmount.sub(fee);\n', '    }\n', '\n', '    /*\n', '     * @dev Swap a token to another.\n', '     * @param bTokenIdIn - the id of the token to be deposited\n', '     * @param bTokenIdOut - the id of the token to be withdrawn\n', '     * @param bTokenInAmount - the amount (unnormalized) of the token to be deposited\n', '     * @param bTokenOutMin - the mininum amount (unnormalized) token that is expected to be withdrawn\n', '     */\n', '    function swap(\n', '        uint256 bTokenIdxIn,\n', '        uint256 bTokenIdxOut,\n', '        uint256 bTokenInAmount,\n', '        uint256 bTokenOutMin\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        uint256 infoIn = _tokenInfos[bTokenIdxIn];\n', '        uint256 infoOut = _tokenInfos[bTokenIdxOut];\n', '        (\n', '            uint256 bTokenOutAmount,\n', '            uint256 adminFee\n', '        ) = _getSwapAmount(infoIn, infoOut, bTokenInAmount);\n', '        require(bTokenOutAmount >= bTokenOutMin, "Returned bTokenAmount < asked");\n', '\n', '        _transferIn(infoIn, bTokenInAmount);\n', '        _transferOut(infoOut, bTokenOutAmount, adminFee);\n', '\n', '        emit Swap(\n', '            msg.sender,\n', '            bTokenIdxIn,\n', '            bTokenIdxOut,\n', '            bTokenInAmount,\n', '            bTokenOutAmount\n', '        );\n', '    }\n', '\n', '    /*\n', '     * @dev Swap tokens given all token amounts\n', '     * The amounts are pre-fee amounts, and the user will provide max fee expected.\n', '     * Currently, do not support penalty.\n', '     * @param inOutFlag - 0 means deposit, and 1 means withdraw with highest bit indicating mint/burn lp token\n', '     * @param lpTokenMintedMinOrBurnedMax - amount of lp token to be minted/burnt\n', '     * @param maxFee - maximum percentage of fee will be collected for withdrawal\n', '     * @param amounts - list of unnormalized amounts of each token\n', '     */\n', '    function swapAll(\n', '        uint256 inOutFlag,\n', '        uint256 lpTokenMintedMinOrBurnedMax,\n', '        uint256 maxFee,\n', '        uint256[] calldata amounts\n', '    )\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        // Gas saving: Use cached balances/totalBalance without accrued interest since last rebalance.\n', '        (\n', '            uint256[] memory balances,\n', '            uint256[] memory infos,\n', '            uint256 oldTotalBalance\n', '        ) = _getBalancesAndInfos();\n', "        // Make sure _totalBalance = oldTotalBalance = sum(_getBalance()'s)\n", '        _collectReward(oldTotalBalance);\n', '\n', '        require (amounts.length == balances.length, "swapAll amounts length != ntokens");\n', '        uint256 newTotalBalance = 0;\n', '        uint256 depositAmount = 0;\n', '\n', '        { // avoid stack too deep error\n', '        uint256[] memory newBalances = new uint256[](balances.length);\n', '        for (uint256 i = 0; i < balances.length; i++) {\n', '            uint256 normalizedAmount = _normalizeBalance(infos[i]).mul(amounts[i]);\n', '            if (((inOutFlag >> i) & 1) == 0) {\n', '                // In\n', '                depositAmount = depositAmount.add(normalizedAmount);\n', '                newBalances[i] = balances[i].add(normalizedAmount);\n', '            } else {\n', '                // Out\n', '                newBalances[i] = balances[i].sub(normalizedAmount);\n', '            }\n', '            newTotalBalance = newTotalBalance.add(newBalances[i]);\n', '        }\n', '\n', '        for (uint256 i = 0; i < balances.length; i++) {\n', '            // If there is no mint/redeem, and the new total balance >= old one,\n', '            // then the weight must be non-increasing and thus there is no penalty.\n', '            if (amounts[i] == 0 && newTotalBalance >= oldTotalBalance) {\n', '                continue;\n', '            }\n', '\n', '            /*\n', '             * Accept the new amount if the following is satisfied\n', '             *     np_i <= max(p_i, w_i)\n', '             */\n', '            if (newBalances[i].mul(W_ONE) <= newTotalBalance.mul(_getSoftWeight(infos[i]))) {\n', '                continue;\n', '            }\n', '\n', '            // If no tokens in the pool, only weight contraints will be applied.\n', '            require(\n', '                oldTotalBalance != 0 &&\n', '                newBalances[i].mul(oldTotalBalance) <= newTotalBalance.mul(balances[i]),\n', '                "penalty is not supported in swapAll now"\n', '            );\n', '        }\n', '        }\n', '\n', '        // Calculate fee rate and mint/burn LP tokens\n', '        uint256 feeRate = 0;\n', '        uint256 lpMintedOrBurned = 0;\n', '        if (newTotalBalance == oldTotalBalance) {\n', '            // Swap only.  No need to burn or mint.\n', '            lpMintedOrBurned = 0;\n', '            feeRate = _swapFee;\n', '        } else if (((inOutFlag >> 255) & 1) == 0) {\n', '            require (newTotalBalance >= oldTotalBalance, "swapAll mint: new total balance must >= old total balance");\n', '            lpMintedOrBurned = newTotalBalance.sub(oldTotalBalance).mul(totalSupply()).div(oldTotalBalance);\n', '            require(lpMintedOrBurned >= lpTokenMintedMinOrBurnedMax, "LP tokend minted < asked");\n', '            feeRate = _swapFee;\n', '            _mint(msg.sender, lpMintedOrBurned);\n', '        } else {\n', '            require (newTotalBalance <= oldTotalBalance, "swapAll redeem: new total balance must <= old total balance");\n', '            lpMintedOrBurned = oldTotalBalance.sub(newTotalBalance).mul(totalSupply()).div(oldTotalBalance);\n', '            require(lpMintedOrBurned <= lpTokenMintedMinOrBurnedMax, "LP tokend burned > offered");\n', '            uint256 withdrawAmount = oldTotalBalance - newTotalBalance;\n', '            /*\n', '             * The fee is determined by swapAmount * swap_fee + withdrawAmount * withdraw_fee,\n', '             * where swapAmount = depositAmount if withdrawAmount >= 0.\n', '             */\n', '            feeRate = _swapFee.mul(depositAmount).add(_redeemFee.mul(withdrawAmount)).div(depositAmount + withdrawAmount);\n', '            _burn(msg.sender, lpMintedOrBurned);\n', '        }\n', '        emit SwapAll(msg.sender, amounts, inOutFlag, lpMintedOrBurned);\n', '\n', '        require (feeRate <= maxFee, "swapAll fee is greater than max fee user offered");\n', '        for (uint256 i = 0; i < balances.length; i++) {\n', '            if (amounts[i] == 0) {\n', '                continue;\n', '            }\n', '\n', '            if (((inOutFlag >> i) & 1) == 0) {\n', '                // In\n', '                _transferIn(infos[i], amounts[i]);\n', '            } else {\n', '                // Out (with fee)\n', '                uint256 fee = amounts[i].mul(feeRate).div(W_ONE);\n', '                uint256 adminFee = fee.mul(_adminFeePct).div(W_ONE);\n', '                _transferOut(infos[i], amounts[i].sub(fee), adminFee);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**************************************************************************************\n', '     * Methods for others\n', '     *************************************************************************************/\n', '\n', "    /* @dev Collect admin fee so that _totalBalance == sum(_getBalances()'s) */\n", '    function _collectReward(uint256 totalBalance) internal {\n', '        uint256 oldTotalBalance = _totalBalance;\n', '        if (totalBalance != oldTotalBalance) {\n', '            if (totalBalance > oldTotalBalance) {\n', '                _mint(_rewardCollector, totalSupply().mul(totalBalance - oldTotalBalance).div(oldTotalBalance));\n', '            }\n', '            _totalBalance = totalBalance;\n', '        }\n', '    }\n', '\n', '    /* @dev Collect admin fee.  Can be called by anyone */\n', '    function collectReward()\n', '        external\n', '        nonReentrantAndUnpausedV1\n', '    {\n', '        (,,,uint256 totalBalance) = _getBalancesAndWeights();\n', '        _collectReward(totalBalance);\n', '    }\n', '\n', '    function getTokenStats(uint256 bTokenIdx)\n', '        public\n', '        view\n', '        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals)\n', '    {\n', '        require(bTokenIdx < _ntokens, "Backed token is not found!");\n', '\n', '        uint256 info = _tokenInfos[bTokenIdx];\n', '\n', '        balance = _getBalance(info).div(_normalizeBalance(info));\n', '        softWeight = _getSoftWeight(info);\n', '        hardWeight = _getHardWeight(info);\n', '        decimals = ERC20(address(info)).decimals();\n', '    }\n', '}\n', '\n', '// File: contracts/Root.sol\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract Root is UpgradeableExtension, SmoothyV1 {\n', '    constructor(\n', '        address[] memory tokens,\n', '        address[] memory yTokens,\n', '        uint256[] memory decMultipliers,\n', '        uint256[] memory softWeights,\n', '        uint256[] memory hardWeights\n', '    )\n', '        public\n', '        UpgradeableExtension()\n', '        SmoothyV1(tokens, yTokens, decMultipliers, softWeights, hardWeights)\n', '    { }\n', '\n', '    function upgradeTo(address newImplementation) external onlyOwner {\n', '        _upgradeTo(newImplementation);\n', '    }\n', '}']