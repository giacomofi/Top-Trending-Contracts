['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-08\n', '*/\n', '\n', 'pragma solidity ^0.5.15;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface UniswapPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/// Helper for a reserve contract to perform uniswap, price bound actions\n', 'contract UniHelper{\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant ONE = 10**18;\n', '\n', '    function _mintLPToken(\n', '        UniswapPair uniswap_pair,\n', '        IERC20 token0,\n', '        IERC20 token1,\n', '        uint256 amount_token0,\n', '        address token1_source\n', '    ) internal {\n', '        (uint256 reserve0, uint256 reserve1, ) = uniswap_pair\n', '            .getReserves();\n', '        uint256 quoted = quote(reserve1, reserve0);\n', '\n', '        uint256 amount_token1 = quoted.mul(amount_token0).div(ONE);\n', '\n', '        token0.transfer(address(uniswap_pair), amount_token0);\n', '        token1.transferFrom(token1_source, address(uniswap_pair), amount_token1);\n', '        UniswapPair(uniswap_pair).mint(address(this));\n', '    }\n', '\n', '    function _burnLPToken(UniswapPair uniswap_pair, address destination) internal {\n', '        uniswap_pair.transfer(\n', '            address(uniswap_pair),\n', '            uniswap_pair.balanceOf(address(this))\n', '        );\n', '        UniswapPair(uniswap_pair).burn(destination);\n', '    }\n', '\n', '    function quote(uint256 purchaseAmount, uint256 saleAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return purchaseAmount.mul(ONE).div(saleAmount);\n', '    }\n', '\n', '}\n', '\n', 'contract YamGoverned {\n', '    event NewGov(address oldGov, address newGov);\n', '    event NewPendingGov(address oldPendingGov, address newPendingGov);\n', '\n', '    address public gov;\n', '    address public pendingGov;\n', '\n', '    modifier onlyGov {\n', '        require(msg.sender == gov, "!gov");\n', '        _;\n', '    }\n', '\n', '    function _setPendingGov(address who)\n', '        public\n', '        onlyGov\n', '    {\n', '        address old = pendingGov;\n', '        pendingGov = who;\n', '        emit NewPendingGov(old, who);\n', '    }\n', '\n', '    function _acceptGov()\n', '        public\n', '    {\n', '        require(msg.sender == pendingGov, "!pendingGov");\n', '        address oldgov = gov;\n', '        gov = pendingGov;\n', '        pendingGov = address(0);\n', '        emit NewGov(oldgov, gov);\n', '    }\n', '}\n', '\n', 'contract YamSubGoverned is YamGoverned {\n', '    /**\n', '     * @notice Event emitted when a sub gov is enabled/disabled\n', '     */\n', '    event SubGovModified(\n', '        address account,\n', '        bool isSubGov\n', '    );\n', '    /// @notice sub governors\n', '    mapping(address => bool) public isSubGov;\n', '\n', '    modifier onlyGovOrSubGov() {\n', '        require(msg.sender == gov || isSubGov[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function setIsSubGov(address subGov, bool _isSubGov)\n', '        public\n', '        onlyGov\n', '    {\n', '        isSubGov[subGov] = _isSubGov;\n', '        emit SubGovModified(subGov, _isSubGov);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint private constant Q112 = uint(1) << RESOLUTION;\n', '    uint private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair,\n', '        bool isToken0\n', '    ) internal view returns (uint priceCumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = UniswapPair(pair).getReserves();\n', '        if (isToken0) {\n', '          priceCumulative = UniswapPair(pair).price0CumulativeLast();\n', '\n', '          // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '          if (blockTimestampLast != blockTimestamp) {\n', '              // subtraction overflow is desired\n', '              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '              // addition overflow is desired\n', '              // counterfactual\n', '              priceCumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '          }\n', '        } else {\n', '          priceCumulative = UniswapPair(pair).price1CumulativeLast();\n', '          // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '          if (blockTimestampLast != blockTimestamp) {\n', '              // subtraction overflow is desired\n', '              uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '              // addition overflow is desired\n', '              // counterfactual\n', '              priceCumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '          }\n', '        }\n', '\n', '    }\n', '}\n', '\n', '\n', '// Hardcoding a lot of constants and stripping out unnecessary things because of high gas prices\n', 'contract TWAPBoundedUGASJUN {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant BASE = 10**18;\n', '\n', '    uint256 internal constant ONE = 10**18;\n', '\n', '    /// @notice Current uniswap pair for purchase & sale tokens\n', '    UniswapPair internal uniswap_pair = UniswapPair(\n', '        0x2b5DFb7874F685BEA30b7d8426c9643A4bCF5873\n', '    );\n', '\n', '    IERC20 internal constant WETH = IERC20(\n', '        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '    );\n', '\n', '    IERC20 internal constant JUN_UGAS = IERC20(\n', '        0xa6B9d7E3d76cF23549293Fb22c488E0Ea591A44e\n', '    );\n', '    \n', '    /// @notice last cumulative price update time\n', '    uint32 internal block_timestamp_last;\n', '\n', '    /// @notice last cumulative price;\n', '    uint256 internal price_cumulative_last;\n', '\n', '    /// @notice Minimum amount of time since TWAP set\n', '    uint256 internal constant MIN_TWAP_TIME = 60 * 60; // 1 hour\n', '\n', '    /// @notice Maximum amount of time since TWAP set\n', '    uint256 internal constant MAX_TWAP_TIME = 120 * 60; // 2 hours\n', '\n', '    /// @notice % bound away from TWAP price\n', '    uint256 internal constant TWAP_BOUNDS = 5 * 10**15;\n', '\n', '    function quote(uint256 purchaseAmount, uint256 saleAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return purchaseAmount.mul(ONE).div(saleAmount);\n', '    }\n', '\n', '    function bounds(uint256 uniswap_quote) internal view returns (uint256) {\n', '        uint256 minimum = uniswap_quote.mul(BASE.sub(TWAP_BOUNDS)).div(BASE);\n', '        return minimum;\n', '    }\n', '\n', '    function bounds_max(uint256 uniswap_quote) internal view returns (uint256) {\n', '        uint256 maximum = uniswap_quote.mul(BASE.add(TWAP_BOUNDS)).div(BASE);\n', '        return maximum;\n', '    }\n', '\n', '    function withinBounds(uint256 purchaseAmount, uint256 saleAmount)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 uniswap_quote = consult();\n', '        uint256 quoted = quote(purchaseAmount, saleAmount);\n', '        uint256 minimum = bounds(uniswap_quote);\n', '        uint256 maximum = bounds_max(uniswap_quote);\n', '        return quoted > minimum && quoted < maximum;\n', '    }\n', '\n', '    // callable by anyone\n', '    function update_twap() public {\n', '        (\n', '            uint256 sell_token_priceCumulative,\n', '            uint32 blockTimestamp\n', '        ) = UniswapV2OracleLibrary.currentCumulativePrices(\n', '            address(uniswap_pair),\n', '            true\n', '        );\n', '        uint32 timeElapsed = blockTimestamp - block_timestamp_last; // overflow is impossible\n', '\n', "        // ensure that it's been long enough since the last update\n", '        require(timeElapsed >= MIN_TWAP_TIME, "OTC: MIN_TWAP_TIME NOT ELAPSED");\n', '\n', '        price_cumulative_last = sell_token_priceCumulative;\n', '\n', '        block_timestamp_last = blockTimestamp;\n', '    }\n', '\n', '    function consult() internal view returns (uint256) {\n', '        (\n', '            uint256 sell_token_priceCumulative,\n', '            uint32 blockTimestamp\n', '        ) = UniswapV2OracleLibrary.currentCumulativePrices(\n', '            address(uniswap_pair),\n', '            true\n', '        );\n', '        uint32 timeElapsed = blockTimestamp - block_timestamp_last; // overflow is impossible\n', '\n', '        // overflow is desired\n', '        uint256 priceAverageSell = uint256(\n', '            uint224(\n', '                (sell_token_priceCumulative - price_cumulative_last) /\n', '                    timeElapsed\n', '            )\n', '        );\n', '\n', '        // single hop\n', '        uint256 purchasePrice;\n', '        if (priceAverageSell > uint192(-1)) {\n', '            // eat loss of precision\n', '            // effectively: (x / 2**112) * 1e18\n', '            purchasePrice = (priceAverageSell >> 112) * ONE;\n', '        } else {\n', '            // cant overflow\n', '            // effectively: (x * 1e18 / 2**112)\n', '            purchasePrice = (priceAverageSell * ONE) >> 112;\n', '        }\n', '        return purchasePrice;\n', '    }\n', '\n', '    modifier timeBoundsCheck() {\n', '        uint256 elapsed_since_update = block.timestamp - block_timestamp_last;\n', '        require(\n', '            block.timestamp - block_timestamp_last < MAX_TWAP_TIME,\n', '            "Cumulative price snapshot too old"\n', '        );\n', '        require(\n', '            block.timestamp - block_timestamp_last > MIN_TWAP_TIME,\n', '            "Cumulative price snapshot too new"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', 'interface SynthMinter {\n', '    struct Unsigned {\n', '        uint256 rawValue;\n', '    }\n', '    struct PositionData {\n', '        Unsigned tokensOutstanding;\n', '        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\n', '        uint256 withdrawalRequestPassTimestamp;\n', '        Unsigned withdrawalRequestAmount;\n', '        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\n', '        // To add or remove collateral, use _addCollateral() and _removeCollateral().\n', '        Unsigned rawCollateral;\n', '        // Tracks pending transfer position requests. A transfer position request is pending if `transferPositionRequestPassTimestamp != 0`.\n', '        uint256 transferPositionRequestPassTimestamp;\n', '    }\n', '\n', '    function create(\n', '        Unsigned calldata collateralAmount,\n', '        Unsigned calldata numTokens\n', '    ) external;\n', '\n', '\n', '    function redeem(Unsigned calldata debt_amount) external returns(Unsigned memory);\n', '\n', '    function withdraw(Unsigned calldata collateral_amount) external;\n', '\n', '    function positions(address account) external returns (PositionData memory);\n', '\n', '    function settleExpired() external returns (Unsigned memory);\n', '\n', '    function expire() external;\n', '}\n', '\n', 'contract UGASJUNFarming is TWAPBoundedUGASJUN, UniHelper, YamSubGoverned {\n', '    enum ACTION {ENTER, EXIT}\n', '\n', '    constructor(address gov_) public {\n', '        gov = gov_;\n', '    }\n', '\n', '    SynthMinter minter = SynthMinter(\n', '        0x4E8d60A785c2636A63c5Bd47C7050d21266c8B43\n', '    );\n', '\n', '    bool completed = true;\n', '\n', '    ACTION action;\n', '\n', '    address internal constant RESERVES = address(\n', '        0x97990B693835da58A281636296D2Bf02787DEa17\n', '    );\n', '\n', '    // ========= MINTING =========\n', '\n', '    function _mint(uint256 collateral_amount, uint256 mint_amount) internal {\n', '        WETH.transferFrom(RESERVES, address(this), collateral_amount);\n', '        WETH.approve(address(minter), uint256(-1));\n', '\n', '        minter.create(\n', '            SynthMinter.Unsigned(collateral_amount),\n', '            SynthMinter.Unsigned(mint_amount)\n', '        );\n', '    }\n', '\n', '    function _repayAndWithdraw() internal {\n', '        JUN_UGAS.approve(address(minter), uint256(-1));\n', '        SynthMinter.PositionData memory position = minter.positions(\n', '            address(this)\n', '        );\n', '        uint256 ugasBalance = JUN_UGAS.balanceOf(address(this));\n', '        // We might end up with more JUN UGAS than we have debt. These will get sent to the treasury for future redemption\n', '        if (ugasBalance >= position.tokensOutstanding.rawValue) {\n', '            minter.redeem(position.tokensOutstanding);\n', '        } else {\n', '            // We might end up with more debt than we have JUN UGAS. In this case, only redeem MAX(minSponsorTokens, ugasBalance)\n', '            // The extra debt will need to be handled externally, by either waiting until expiry, others sponsoring the debt for later reimbursement, or purchasing the ugas\n', '            minter.redeem(\n', '                SynthMinter.Unsigned(\n', '                    position.tokensOutstanding.rawValue - ugasBalance <=\n', '                        5 * 10**18\n', '                        ? position.tokensOutstanding.rawValue - 5 * 10**18\n', '                        : ugasBalance\n', '                )\n', '            );\n', '        }\n', '    }\n', '\n', '    // ========= ENTER ==========\n', '\n', '    function enter() public timeBoundsCheck {\n', '        require(action == ACTION.ENTER, "Wrong action");\n', '        require(!completed, "Action completed");\n', '        uint256 ugasReserves;\n', '        uint256 wethReserves;\n', '        (ugasReserves, wethReserves, ) = uniswap_pair.getReserves();\n', '        require(\n', '            withinBounds(wethReserves, ugasReserves),\n', '            "Market rate is outside bounds"\n', '        );\n', '        uint256 wethBalance = WETH.balanceOf(RESERVES);\n', '        require(wethBalance > 100*(10**18), "Not enough ETH"); // This is so we can be sure the MAR contract exited\n', '        // Since we are aiming for a CR of 4, we can mint with up to 80% of reserves\n', '        // We mint slightly less so we can be sure there will be enough WETH\n', '        uint256 collateral_amount = (wethBalance * 79) / 100;\n', '        uint256 mint_amount = (collateral_amount * ugasReserves) /\n', '            wethReserves /\n', '            4;\n', '        _mint(collateral_amount, mint_amount);\n', '\n', '        _mintLPToken(uniswap_pair, JUN_UGAS, WETH, mint_amount, RESERVES);\n', '\n', '        completed = true;\n', '    }\n', '\n', '    // ========== EXIT  ==========\n', '    function exit() public timeBoundsCheck {\n', '        require(action == ACTION.EXIT);\n', '        require(!completed, "Action completed");\n', '        uint256 ugasReserves;\n', '        uint256 wethReserves;\n', '        (ugasReserves, wethReserves, ) = uniswap_pair.getReserves();\n', '        require(\n', '            withinBounds(wethReserves, ugasReserves),\n', '            "Market rate is outside bounds"\n', '        );\n', '\n', '        _burnLPToken(uniswap_pair, address(this));\n', '\n', '        _repayAndWithdraw();\n', '\n', '        WETH.transfer(RESERVES, WETH.balanceOf(address(this)));\n', '        uint256 ugasBalance = JUN_UGAS.balanceOf(address(this));\n', '        if (ugasBalance > 0) {\n', '            JUN_UGAS.transfer(RESERVES, ugasBalance);\n', '        }\n', '        completed = true;\n', '    }\n', '\n', '    // ========= GOVERNANCE ONLY ACTION APPROVALS =========\n', '    function _approveEnter()\n', '        public\n', '        onlyGovOrSubGov\n', '        {\n', '        completed = false;\n', '        action = ACTION.ENTER;\n', '    }\n', '\n', '    function _approveExit()\n', '        public\n', '        onlyGovOrSubGov\n', '    {\n', '        completed = false;\n', '        action = ACTION.EXIT;\n', '    }\n', '\n', '    // ========= GOVERNANCE ONLY SAFTEY MEASURES =========\n', '\n', '    function _redeem(uint256 debt_to_pay)\n', '        public\n', '        onlyGovOrSubGov\n', '    {\n', '        minter.redeem(SynthMinter.Unsigned(debt_to_pay));\n', '    }\n', '\n', '    function _withdrawCollateral(uint256 amount_to_withdraw)\n', '        public\n', '        onlyGovOrSubGov\n', '    {\n', '        minter.withdraw(SynthMinter.Unsigned(amount_to_withdraw));\n', '    }\n', '\n', '    function _settleExpired()\n', '        public\n', '        onlyGovOrSubGov\n', '    {\n', '        minter.settleExpired();\n', '    }\n', '\n', '    function masterFallback(address target, bytes memory data)\n', '        public\n', '        onlyGovOrSubGov \n', '    {\n', '        target.call.value(0)(data);\n', '    }\n', '\n', '    function _getTokenFromHere(address token)\n', '        public\n', '        onlyGovOrSubGov\n', '    {\n', '        IERC20 t = IERC20(token);\n', '        t.transfer(RESERVES, t.balanceOf(address(this)));\n', '    }\n', '}']