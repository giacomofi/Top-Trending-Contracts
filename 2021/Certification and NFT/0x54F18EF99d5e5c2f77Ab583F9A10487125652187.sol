['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface EmployeeTokenOwnershipPlan {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'interface EmployeeTokenOwnershipPlan2020 {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'interface CancellableEmployeeTokenOwnershipPlan {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'abstract contract ERC20\n', '{\n', '    function totalSupply() public view virtual returns (uint);\n', '\n', '    function balanceOf(address who) public view virtual returns (uint);\n', '\n', '    function allowance(address owner, address spender) public view virtual returns (uint);\n', '\n', '    function transfer(address to, uint value) public virtual returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) public virtual returns (bool);\n', '\n', '    function approve(address spender, uint value) public virtual returns (bool);\n', '}\n', '\n', 'contract Rewarder {\n', '    ERC20 constant lrc = ERC20(\n', '        0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD);\n', '\n', '    EmployeeTokenOwnershipPlan constant etop = EmployeeTokenOwnershipPlan(\n', '        0x5759A6De790233adA100619b2c516ED6AFD33CE1);\n', '    EmployeeTokenOwnershipPlan2020 constant etop2020 =\n', '        EmployeeTokenOwnershipPlan2020(\n', '            0x1161EF73d7254A778f9f6f83ec24fbFEC40870a4);\n', '    CancellableEmployeeTokenOwnershipPlan constant cetop =\n', '        CancellableEmployeeTokenOwnershipPlan(\n', '            0x8372cfb259CE98D299BC6Fe1E1833a216625Cf8F);\n', '\n', '    address payable constant r1Add = 0xe865759DF485c11070504e76B900938D2d9A7738;\n', '    address payable[5] r2Adds = [\n', '        0xf21e66578372Ea62BCb0D1cDfC070f231CF56898,\n', '        0x813C12326A0E8C2aC91d584f025E50072CDb4467,\n', '        0xD984D096B4bF9DCF5fd75D9cBaf052D00EBe74c4,\n', '        0x067eceAd820BC54805A2412B06946b184d11CB4b,\n', '        0x2a791a837D70E6D6e35073Dd61a9Af878Ac231A5\n', '    ];\n', '\n', '    function distribute() external payable {\n', '        require(msg.value > 0, "No ether to distribute");\n', '        uint unit = msg.value / 6;\n', '        uint left = msg.value;\n', '        for (uint i = 0; i < r2Adds.length; ++i) {\n', '            r2Adds[i].transfer(unit);\n', '            left -= unit;\n', '        }\n', '        r1Add.transfer(left);\n', '    }\n', '\n', '    function batchWithdraw(uint t) external {\n', '        if (t != 2 && t != 4)\n', '            etop.withdrawFor(r1Add);\n', '        for (uint i = 0; i < r2Adds.length; ++i) {\n', '            etop2020.withdrawFor(r2Adds[i]);\n', '            if (t != 3 && t != 4)\n', '                cetop.withdrawFor(r2Adds[i]);\n', '            lrc.transferFrom(r2Adds[i], r1Add, lrc.balanceOf(r2Adds[i]));\n', '        }\n', '    }\n', '}']