['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/oracles/ChainlinkOracle.sol\n', 'pragma solidity =0.6.11 >=0.6.0 <0.8.0;\n', '\n', '////// contracts/interfaces/IMapleGlobals.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IMapleGlobals {\n', '\n', '    function pendingGovernor() external view returns (address);\n', '\n', '    function governor() external view returns (address);\n', '\n', '    function globalAdmin() external view returns (address);\n', '\n', '    function mpl() external view returns (address);\n', '\n', '    function mapleTreasury() external view returns (address);\n', '\n', '    function isValidBalancerPool(address) external view returns (bool);\n', '\n', '    function treasuryFee() external view returns (uint256);\n', '\n', '    function investorFee() external view returns (uint256);\n', '\n', '    function defaultGracePeriod() external view returns (uint256);\n', '\n', '    function fundingPeriod() external view returns (uint256);\n', '\n', '    function swapOutRequired() external view returns (uint256);\n', '\n', '    function isValidLiquidityAsset(address) external view returns (bool);\n', '\n', '    function isValidCollateralAsset(address) external view returns (bool);\n', '\n', '    function isValidPoolDelegate(address) external view returns (bool);\n', '\n', '    function validCalcs(address) external view returns (bool);\n', '\n', '    function isValidCalc(address, uint8) external view returns (bool);\n', '\n', '    function getLpCooldownParams() external view returns (uint256, uint256);\n', '\n', '    function isValidLoanFactory(address) external view returns (bool);\n', '\n', '    function isValidSubFactory(address, address, uint8) external view returns (bool);\n', '\n', '    function isValidPoolFactory(address) external view returns (bool);\n', '    \n', '    function getLatestPrice(address) external view returns (uint256);\n', '    \n', '    function defaultUniswapPath(address, address) external view returns (address);\n', '\n', '    function minLoanEquity() external view returns (uint256);\n', '    \n', '    function maxSwapSlippage() external view returns (uint256);\n', '\n', '    function protocolPaused() external view returns (bool);\n', '\n', '    function stakerCooldownPeriod() external view returns (uint256);\n', '\n', '    function lpCooldownPeriod() external view returns (uint256);\n', '\n', '    function stakerUnstakeWindow() external view returns (uint256);\n', '\n', '    function lpWithdrawWindow() external view returns (uint256);\n', '\n', '    function oracleFor(address) external view returns (address);\n', '\n', '    function validSubFactories(address, address) external view returns (bool);\n', '\n', '    function setStakerCooldownPeriod(uint256) external;\n', '\n', '    function setLpCooldownPeriod(uint256) external;\n', '\n', '    function setStakerUnstakeWindow(uint256) external;\n', '\n', '    function setLpWithdrawWindow(uint256) external;\n', '\n', '    function setMaxSwapSlippage(uint256) external;\n', '\n', '    function setGlobalAdmin(address) external;\n', '\n', '    function setValidBalancerPool(address, bool) external;\n', '\n', '    function setProtocolPause(bool) external;\n', '\n', '    function setValidPoolFactory(address, bool) external;\n', '\n', '    function setValidLoanFactory(address, bool) external;\n', '\n', '    function setValidSubFactory(address, address, bool) external;\n', '\n', '    function setDefaultUniswapPath(address, address, address) external;\n', '\n', '    function setPoolDelegateAllowlist(address, bool) external;\n', '\n', '    function setCollateralAsset(address, bool) external;\n', '\n', '    function setLiquidityAsset(address, bool) external;\n', '\n', '    function setCalc(address, bool) external;\n', '\n', '    function setInvestorFee(uint256) external;\n', '\n', '    function setTreasuryFee(uint256) external;\n', '\n', '    function setMapleTreasury(address) external;\n', '\n', '    function setDefaultGracePeriod(uint256) external;\n', '\n', '    function setMinLoanEquity(uint256) external;\n', '\n', '    function setFundingPeriod(uint256) external;\n', '\n', '    function setSwapOutRequired(uint256) external;\n', '\n', '    function setPriceOracle(address, address) external;\n', '\n', '    function setPendingGovernor(address) external;\n', '\n', '    function acceptGovernor() external;\n', '\n', '}\n', '\n', '////// contracts/oracles/IChainlinkAggregatorV3.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IChainlinkAggregatorV3 {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values,\n', '  // which could be misinterpreted as actual reported values.\n', '  \n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '        uint80  roundId,\n', '        int256  answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80  answeredInRound\n', '    );\n', '\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '        uint80  roundId,\n', '        int256  answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80  answeredInRound\n', '    );\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/GSN/Context.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "../GSN/Context.sol"; */\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '////// contracts/oracles/ChainlinkOracle.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IChainlinkAggregatorV3.sol"; */\n', '/* import "../interfaces/IMapleGlobals.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/access/Ownable.sol"; */\n', '\n', '/// @title ChainlinkOracle is a wrapper contract for Chainlink oracle price feeds that allows for manual price feed overrides.\n', 'contract ChainlinkOracle is Ownable {\n', '\n', '    IChainlinkAggregatorV3 public priceFeed;\n', '    IMapleGlobals public globals;\n', '\n', '    address public immutable assetAddress;\n', '\n', '    bool   public manualOverride;\n', '    int256 public manualPrice;\n', '\n', '    event ChangeAggregatorFeed(address _newMedianizer, address _oldMedianizer);\n', '    event       SetManualPrice(int256 _oldPrice, int256 _newPrice);\n', '    event    SetManualOverride(bool _override);\n', '\n', '    /**\n', '        @dev   Creates a new Chainlink based oracle.\n', '        @param _aggregator   Address of Chainlink aggregator.\n', '        @param _assetAddress Address of currency (0x0 for ETH).\n', '        @param _owner        Address of the owner of the contract.\n', '    */\n', '    constructor(address _aggregator, address _assetAddress, address _owner) public {\n', '        require(_aggregator != address(0), "CO:ZERO_AGGREGATOR_ADDR");\n', '        priceFeed       = IChainlinkAggregatorV3(_aggregator);\n', '        assetAddress    = _assetAddress;\n', '        transferOwnership(_owner);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the latest price.\n', '        @return price The latest price.\n', '    */\n', '    function getLatestPrice() public view returns (int256) {\n', '        if (manualOverride) return manualPrice;\n', '        (uint80 roundID, int256 price,,uint256 timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\n', '\n', '        require(timeStamp != 0,             "CO:ROUND_NOT_COMPLETE");\n', '        require(answeredInRound >= roundID,         "CO:STALE_DATA");\n', '        require(price != int256(0),                 "CO:ZERO_PRICE");\n', '        return price;\n', '    }\n', '\n', '\n', '    /**\n', '        @dev   Updates aggregator address. Only the contract Owner can call this function.\n', '        @dev   It emits a `ChangeAggregatorFeed` event.\n', '        @param aggregator Address of Chainlink aggregator.\n', '    */\n', '    function changeAggregator(address aggregator) external onlyOwner {\n', '        require(aggregator != address(0), "CO:ZERO_AGGREGATOR_ADDR");\n', '        emit ChangeAggregatorFeed(aggregator, address(priceFeed));\n', '        priceFeed = IChainlinkAggregatorV3(aggregator);\n', '    }\n', '\n', '    /**\n', '        @dev Returns address of oracle currency (0x0 for ETH).\n', '    */\n', '    function getAssetAddress() external view returns (address) {\n', '        return assetAddress;\n', '    }\n', '\n', '    /**\n', '        @dev Returns denomination of price.\n', '    */\n', '    function getDenomination() external pure returns (bytes32) {\n', '        // All Chainlink oracles are denominated in USD.\n', '        return bytes32("USD");\n', '    }\n', '\n', '    /**\n', '        @dev   Sets a manual price. Only the contract Owner can call this function.\n', '               NOTE: this can only be used if manualOverride == true.\n', '        @dev   It emits a `SetManualPrice` event.\n', '        @param _price Price to set.\n', '    */\n', '    function setManualPrice(int256 _price) public onlyOwner {\n', '        require(manualOverride, "CO:MANUAL_OVERRIDE_NOT_ACTIVE");\n', '        emit SetManualPrice(manualPrice, _price);\n', '        manualPrice = _price;\n', '    }\n', '\n', '    /**\n', '        @dev   Sets manual override, allowing for manual price setting. Only the contract Owner can call this function.\n', '        @dev   It emits a `SetManualOverride` event.\n', '        @param _override Whether to use the manual override price or not.\n', '    */\n', '    function setManualOverride(bool _override) public onlyOwner {\n', '        manualOverride = _override;\n', '        emit SetManualOverride(_override);\n', '    }\n', '\n', '}']