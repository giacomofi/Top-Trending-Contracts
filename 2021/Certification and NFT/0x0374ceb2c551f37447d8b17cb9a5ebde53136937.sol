['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', '/****************************************************************************** \n', ' * \n', ' *                                                                           \n', " *                      ;'+:                                                                         \n", " *                       ''''''`                                                                     \n", " *                        ''''''';                                                                   \n", " *                         ''''''''+.                                                                \n", " *                          +''''''''',                                                              \n", " *                           '''''''''+'.                                                            \n", " *                            ''''''''''''                                                           \n", " *                             '''''''''''''                                                         \n", " *                             ,'''''''''''''.                                                       \n", " *                              '''''''''''''''                                                      \n", " *                               '''''''''''''''                                                     \n", " *                               :'''''''''''''''.                                                   \n", " *                                '''''''''''''''';                                                  \n", " *                                .'''''''''''''''''                                                 \n", " *                                 ''''''''''''''''''                                                \n", " *                                 ;''''''''''''''''''                                               \n", " *                                  '''''''''''''''''+'                                              \n", " *                                  ''''''''''''''''''''                                             \n", " *                                  '''''''''''''''''''',                                            \n", " *                                  ,''''''''''''''''''''                                            \n", " *                                   '''''''''''''''''''''                                           \n", " *                                   ''''''''''''''''''''':                                          \n", " *                                   ''''''''''''''''''''+'                                          \n", " *                                   `''''''''''''''''''''':                                         \n", " *                                    ''''''''''''''''''''''                                         \n", " *                                    .''''''''''''''''''''';                                        \n", " *                                    ''''''''''''''''''''''`                                       \n", " *                                     ''''''''''''''''''''''                                       \n", " *                                       ''''''''''''''''''''''                                      \n", " *                  :                     ''''''''''''''''''''''                                     \n", " *                  ,:                     ''''''''''''''''''''''                                    \n", " *                  :::.                    ''+''''''''''''''''''':                                  \n", " *                  ,:,,:`        .:::::::,. :''''''''''''''''''''''.                                \n", " *                   ,,,::::,.,::::::::,:::,::,''''''''''''''''''''''';                              \n", " *                   :::::::,::,::::::::,,,''''''''''''''''''''''''''''''`                           \n", " *                    :::::::::,::::::::;'''''''''''''''''''''''''''''''''+`                         \n", " *                    ,:,::::::::::::,;''''''''''''''''''''''''''''''''''''';                        \n", " *                     :,,:::::::::::'''''''''''''''''''''''''''''''''''''''''                       \n", " *                      ::::::::::,''''''''''''''''''''''''''''''''''''''''''''                      \n", " *                       :,,:,:,:''''''''''''''''''''''''''''''''''''''''''''''`                     \n", " *                        .;::;'''''''''''''''''''''''''''''''''''''''''''''''''                     \n", " *                            :'+'''''''''''''''''''''''''''''''''''''''''''''''                     \n", " *                                  ``.::;'''''''''''''';;:::,..`````,'''''''''',                    \n", " *                                                                       ''''''';                    \n", " *                                                                         ''''''                    \n", " *                           .''''''';       '''''''''''''       ''''''''   '''''                    \n", " *                          '''''''''''`     '''''''''''''     ;'''''''''';  ''';                    \n", " *                         '''       '''`    ''               ''',      ,'''  '':                    \n", " *                        '''         :      ''              `''          ''` :'`                    \n", " *                        ''                 ''              '':          :''  '                     \n", " *                        ''                 ''''''''''      ''            ''  '                     \n", " *                       `''     '''''''''   ''''''''''      ''            ''                        \n", " *                        ''     '''''''':   ''              ''            ''                        \n", " *                        ''           ''    ''              '''          '''                        \n", " *                        '''         '''    ''               '''        '''                         \n", " *                         '''.     .'''     ''                '''.    .'''                         \n", " *                          `''''''''''      '''''''''''''`    `''''''''''                          \n", " *                            '''''''        '''''''''''''`      .''''''.                            \n", ' *\n', ' * *********************************************************************************************/\n', 'pragma solidity 0.8.4;\n', '// -------------------------------------------------------------------------------------------------------------------------\n', "// 'iBlockchain Bank & Trust™' ERC20 Security Token (Common Share)\n", '//\n', '// Symbol           : SCCs\n', '// Trademarks (tm)  : SCCs™ , SCCsS™ , Sustainability Creative™ , Decentralised Autonomous Corporation™ , DAC™\n', '// Name             : Share/Common Stock/Security Token\n', '// Total supply     : 10,000,000 (Million)\n', '// Decimals         : 2\n', '// Implementation   : Decentralized Autonomous Corporation (DAC)\n', '// Website          : https://sustainabilitycreative.com | https://sustainabilitycreative.solutions\n', '// Github           : https://github.com/Geopay/iBlockchain-Bank-and-Trust-Security-Token\n', '// Beta Platform    : https://myetherbanktrust.com/asset-class/primary-market/smart-securities/\n', '//\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Technologies Co. 2013-2021. Affero GPLv3 Licence.\n', '// --------------------------------------------------------------------------------------------------------------------------\n', '\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  \n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Technologies Co. 2013-2021. Affero GPLv3 Licence.\n', '// -------------------------------------------------------------------------------------------------------------------------\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor()  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function DissolveBusiness() public onlyOwner { \n', '    // This function is called when the organization is no longer actively operating\n', '    // The Management can decide to Terminate access to the Securities Token. \n', '    // The Blockchain records remain, but the contract no longer can perform functions pertaining \n', '    // to the operations of the Securities.\n', '    // https://www.irs.gov/businesses/small-businesses-self-employed/closing-a-business-checklist\n', '    selfdestruct(payable(msg.sender));\n', '  }\n', '}\n', '\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Technologies Co. 2013-2021. Affero GPLv3 Licence.\n', '// -------------------------------------------------------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------------------------\n', 'interface ERC20Interface {\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '}\n', '\n', 'contract Regulated is Ownable {\n', '    \n', '  event ShareholderRegistered(address indexed shareholder);\n', '  event CorpBlackBook(address indexed shareholder);           // Consider this option as the Nevada Commission little black book, bad actors are blacklisted \n', '  \n', '  mapping(address => bool) regulationStatus;\n', '\n', '  function RegisterShareholder(address shareholder) public onlyOwner {\n', '    regulationStatus[shareholder] = true;\n', '    emit ShareholderRegistered(shareholder);\n', '  }\n', '\n', '  function NevadaBlackBook(address shareholder) public onlyOwner {\n', '    regulationStatus[shareholder] = false;\n', '    emit CorpBlackBook(shareholder);\n', '  }\n', '  \n', '  function ensureRegulated(address shareholder) view internal  {\n', '    require(regulationStatus[shareholder] == true);\n', '  }\n', '\n', '  function isRegulated(address shareholder) public view returns (bool approved) { \n', '    return regulationStatus[shareholder];\n', '  }\n', '}\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Technologies Co. 2013-2021. Affero GPLv3 Licence.\n', '// --------------------------------------------------------------------------------------------------------------------------\n', 'contract  AcceptEth is Regulated {\n', '    //address public owner;\n', '    //address newOwner;\n', '    uint public price;\n', '    mapping (address => uint) balance;\n', '\n', '    constructor()  {\n', '        // set owner as the address of the one who created the contract\n', '        owner = msg.sender;\n', '        // set the price to 2 ether\n', '        price = 0.00372805 ether; // Exclude Gas/Wei to transfer\n', '        \n', '    }\n', '    \n', '    \n', '    /**\n', '     * Price must be in WEI. which means, if you want to make price 2 ether, \n', '     * then you must input 2 * 1e18 which will be: 2000000000000000000\n', '     */\n', '    function updatePrice(uint256 _priceInWEI) external onlyOwner returns(string memory){\n', "        require(_priceInWEI > 0, 'Invalid price amount');\n", '        price = _priceInWEI;\n', '        return "Price updated successfully";\n', '    }\n', '\n', '    function accept() public payable onlyOwner {\n', '\n', '        // Error out if anything other than 2 ether is sent\n', '        require(msg.value == price);\n', '        \n', '        //require(newOwner != address(0));\n', '        //require(newOwner != owner);\n', '   \n', '        RegisterShareholder(owner);\n', '        \n', '        //regulationStatus[owner] = true;\n', '        //emit ShareholderRegistered(owner);        \n', ' \n', '\n', '        // Track that calling account deposited ether\n', '        balance[msg.sender] += msg.value;\n', '    }\n', '    \n', '    function refund(uint amountRequested) public onlyOwner {\n', '        \n', '        //require(newOwner != address(0));\n', '        //require(newOwner != owner);\n', '   \n', '        RegisterShareholder(owner);\n', '        \n', '        //regulationStatus[owner] = true;\n', '        \n', '        //emit ShareholderRegistered(owner);\n', '        \n', '        require(amountRequested > 0 && amountRequested <= balance[msg.sender]);\n', '        \n', '\n', '        balance[msg.sender] -= amountRequested;\n', '\n', "        payable(msg.sender).transfer(amountRequested); // contract transfers ether to msg.sender's address\n", '        \n', '        \n', '    }\n', '    \n', '    event Accept(address from, address indexed to, uint amountRequested);\n', '    event Refund(address to, address indexed from, uint amountRequested);\n', '}\n', '\n', '\n', 'contract SCCs is Regulated, AcceptEth {\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint public _totalShares;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '  \n', '  \n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '  \n', '\n', '  constructor()  {\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Technologies Co. 2013-2021. Affero GPLv3 Licence.\n', '// --------------------------------------------------------------------------------------------------------------------------\n', '    symbol = "SCCs";                                             // Create the Security Token Symbol Here\n', '    name = "Sustainability Creative eShare ";                    // Description of the Securetized Tokens\n', '    // In our sample we have created securites tokens and fractional securities for the tokens upto 18 digits\n', '    decimals = 2;                                                // Number of Digits [0-18] If an organization wants to fractionalize the securities\n', '    // The 0 can be any digit up to 18. Eighteen is the standard for cryptocurrencies\n', '    _totalShares = 10000000 * 10**uint(decimals);                // Total Number of Securities Issued (example 10,000,000 Shares of iBBTs)\n', '    balances[owner] = _totalShares;\n', '    emit Transfer(address(0), owner, _totalShares);              // Owner or Company Representative (CFO/COO/CEO/CHAIRMAN)\n', '\n', '    regulationStatus[owner] = true;\n', '    emit ShareholderRegistered(owner);\n', '  }\n', '  \n', '  \n', '  // --------------------------------------------------------------------------------------------\n', "  // Don't accept ETH\n", '  // --------------------------------------------------------------------------------------------\n', '  //fallback () external payable {revert();}\n', '  \n', '  \n', '\n', '  function issue(address recipient, uint tokens) public onlyOwner returns (bool success) {\n', '    require(recipient != address(0));\n', '    require(recipient != owner);\n', '    \n', '    RegisterShareholder(recipient);\n', '    transfer(recipient, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    // Organization is Merged or Sold and Securities Management needs to transfer to new owners\n', '    require(newOwner != address(0));\n', '    require(newOwner != owner);\n', '   \n', '    RegisterShareholder(newOwner);\n', '    transfer(newOwner, balances[owner]);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint supply) {\n', '    return _totalShares - balances[address(0)];\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    ensureRegulated(msg.sender);\n', '    ensureRegulated(to);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    // Put a check for race condition issue with approval workflow of ERC20\n', '    require((tokens == 0) || (allowed[msg.sender][spender] == 0));\n', '    \n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    ensureRegulated(from);\n', '    ensureRegulated(to);\n', '\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  // --------------------------------------------------------------------------------------------------\n', '  // Corporation can issue more shares or revoke/cancel shares\n', '  // https://github.com/ethereum/EIPs/pull/621\n', '  // --------------------------------------------------------------------------------------------------\n', '  \n', '  // --------------------------------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // --------------------------------------------------------------------------------------------------\n', '  function transferOtherERC20Assets(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}\n', '// ----------------------------------------------------------------------------------------------------\n', '// SPDX-License-Identifier: Affero GPLv3 Licence. | https://ibbt.io\n', '// (c) by A. Valamontes with Blockchain Ventures / iBlockchain Bank & Trust Tecnhnologies Co. 2020-2021. \n', '// -----------------------------------------------------------------------------------------------------']