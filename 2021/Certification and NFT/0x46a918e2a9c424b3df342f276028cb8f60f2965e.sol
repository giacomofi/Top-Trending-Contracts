['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.2 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.8;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File contracts/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' *\n', ' * Library for non-standard Math functions\n', " * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\n", ' * It was forked from https://github.com/dydxprotocol/solo at commit\n', ' * 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\n', ' * newer solidity in the pragma to match the rest of the contract suite of this project.\n', ' */\n', 'library Math {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Library Functions ============\n', '\n', '    /*\n', '     * Return target * (numerator / denominator).\n', '     */\n', '    function getPartial(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) internal pure returns (uint256) {\n', '        return target.mul(numerator).div(denominator);\n', '    }\n', '\n', '    /*\n', '     * Return target * (numerator / denominator), but rounded up.\n', '     */\n', '    function getPartialRoundUp(\n', '        uint256 target,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) internal pure returns (uint256) {\n', '        if (target == 0 || numerator == 0) {\n', '            // SafeMath will check for zero denominator\n', '            return SafeMath.div(0, denominator);\n', '        }\n', '        return target.mul(numerator).sub(1).div(denominator).add(1);\n', '    }\n', '\n', '    function to128(uint256 number) internal pure returns (uint128) {\n', '        uint128 result = uint128(number);\n', '        require(result == number, "Math: Unsafe cast to uint128");\n', '        return result;\n', '    }\n', '\n', '    function to96(uint256 number) internal pure returns (uint96) {\n', '        uint96 result = uint96(number);\n', '        require(result == number, "Math: Unsafe cast to uint96");\n', '        return result;\n', '    }\n', '\n', '    function to32(uint256 number) internal pure returns (uint32) {\n', '        uint32 result = uint32(number);\n', '        require(result == number, "Math: Unsafe cast to uint32");\n', '        return result;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a : b;\n', '    }\n', '}\n', '\n', '// File contracts/Decimal.sol\n', '\n', '/*\n', '    Copyright 2019 dYdX Trading Inc.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '/**\n', " * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\n", ' * at commit 2d8454e02702fe5bc455b848556660629c3cad36\n', ' *\n', ' * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\n', ' */\n', '\n', '/**\n', ' * @title Decimal\n', ' *\n', ' * Library that defines a fixed-point number with 18 decimal places.\n', ' */\n', 'library Decimal {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constants ============\n', '\n', '    uint256 constant BASE_POW = 18;\n', '    uint256 constant BASE = 10**BASE_POW;\n', '\n', '    // ============ Structs ============\n', '\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function one() internal pure returns (D256 memory) {\n', '        return D256({value: BASE});\n', '    }\n', '\n', '    function onePlus(D256 memory d) internal pure returns (D256 memory) {\n', '        return D256({value: d.value.add(BASE)});\n', '    }\n', '\n', '    function mul(uint256 target, D256 memory d)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, d.value, BASE);\n', '    }\n', '\n', '    function div(uint256 target, D256 memory d)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return Math.getPartial(target, BASE, d.value);\n', '    }\n', '}\n', '\n', '// File contracts/interfaces/IMarket.sol\n', '\n', '/**\n', " * @title Interface for Zora Protocol's Market\n", ' */\n', 'interface IMarket {\n', '    struct Bid {\n', '        // Amount of the currency being bid\n', '        uint256 amount;\n', '        // Address to the ERC20 token being used to bid\n', '        address currency;\n', '        // Address of the bidder\n', '        address bidder;\n', '        // Address of the recipient\n', '        address recipient;\n', '        // % of the next sale to award the current owner\n', '        Decimal.D256 sellOnShare;\n', '    }\n', '\n', '    struct Ask {\n', '        // Amount of the currency being asked\n', '        uint256 amount;\n', '        // Address to the ERC20 token being asked\n', '        address currency;\n', '    }\n', '\n', '    struct BidShares {\n', '        // % of sale value that goes to the _previous_ owner of the nft\n', '        Decimal.D256 prevOwner;\n', '        // % of sale value that goes to the original creator of the nft\n', '        Decimal.D256 creator;\n', '        // % of sale value that goes to the seller (current owner) of the nft\n', '        Decimal.D256 owner;\n', '    }\n', '\n', '    event BidCreated(uint256 indexed tokenId, Bid bid);\n', '    event BidRemoved(uint256 indexed tokenId, Bid bid);\n', '    event BidFinalized(uint256 indexed tokenId, Bid bid);\n', '    event AskCreated(uint256 indexed tokenId, Ask ask);\n', '    event AskRemoved(uint256 indexed tokenId, Ask ask);\n', '    event BidShareUpdated(uint256 indexed tokenId, BidShares bidShares);\n', '\n', '    function bidForTokenBidder(uint256 tokenId, address bidder)\n', '        external\n', '        view\n', '        returns (Bid memory);\n', '\n', '    function currentAskForToken(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (Ask memory);\n', '\n', '    function bidSharesForToken(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (BidShares memory);\n', '\n', '    function isValidBid(uint256 tokenId, uint256 bidAmount)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function isValidBidShares(BidShares calldata bidShares)\n', '        external\n', '        pure\n', '        returns (bool);\n', '\n', '    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\n', '        external\n', '        pure\n', '        returns (uint256);\n', '\n', '    function configure(address mediaContractAddress) external;\n', '\n', '    function setBidShares(uint256 tokenId, BidShares calldata bidShares)\n', '        external;\n', '\n', '    function setAsk(uint256 tokenId, Ask calldata ask) external;\n', '\n', '    function removeAsk(uint256 tokenId) external;\n', '\n', '    function setBid(\n', '        uint256 tokenId,\n', '        Bid calldata bid,\n', '        address spender\n', '    ) external;\n', '\n', '    function removeBid(uint256 tokenId, address bidder) external;\n', '\n', '    function acceptBid(uint256 tokenId, Bid calldata expectedBid) external;\n', '}\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC721/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 indexed tokenId\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed approved,\n', '        uint256 indexed tokenId\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(\n', '        address indexed owner,\n', '        address indexed operator,\n', '        bool approved\n', '    );\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File contracts/ReserveAuction.sol\n', '\n', '/**\n', '   _____                                                   _   _                           \n', '  |  __ \\                                  /\\             | | (_)                          \n', '  | |__) |___ ___  ___ _ ____   _____     /  \\  _   _  ___| |_ _  ___  _ __                \n', "  |  _  // _ / __|/ _ | '__\\ \\ / / _ \\   / /\\ \\| | | |/ __| __| |/ _ \\| '_ \\               \n", '  | | \\ |  __\\__ |  __| |   \\ V |  __/  / ____ | |_| | (__| |_| | (_) | | | |              \n', '  |_|  \\_\\___|___/\\___|_|    \\_/ \\___| /_/    \\_\\__,_|\\___|\\__|_|\\___/|_| |_|              \n', '                                                                                           \n', '                                                                                           \n', '   ____          ____  _ _ _         _____                       _                         \n', '  |  _ \\        |  _ \\(_| | |       |  __ \\                     | |                        \n', '  | |_) |_   _  | |_) |_| | |_   _  | |__) |___ _ __  _ __   ___| | ____ _ _ __ ___  _ __  \n', "  |  _ <| | | | |  _ <| | | | | | | |  _  // _ | '_ \\| '_ \\ / _ | |/ / _` | '_ ` _ \\| '_ \\ \n", '  | |_) | |_| | | |_) | | | | |_| | | | \\ |  __| | | | | | |  __|   | (_| | | | | | | |_) |\n', '  |____/ \\__, | |____/|_|_|_|\\__, | |_|  \\_\\___|_| |_|_| |_|\\___|_|\\_\\__,_|_| |_| |_| .__/ \n', '          __/ |               __/ |                                                 | |    \n', '         |___/               |___/                                                  |_|    \n', '\n', '*/\n', '\n', 'contract IMediaModified {\n', '    mapping(uint256 => address) public tokenCreators;\n', '    address public marketContract;\n', '}\n', '\n', 'contract ReserveAuction is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    bool public paused;\n', '\n', '    uint256 public timeBuffer = 15 * 60; // extend 15 minutes after every bid made in last 15 minutes\n', '    uint256 public minBid = 1 * 10**17; // 0.1 eth\n', '\n', '    bytes4 constant interfaceId = 0x80ac58cd; // 721 interface id\n', '    address public zora = 0xabEFBc9fD2F806065b4f3C237d4b59D9A97Bcac7;\n', '\n', '    mapping(uint256 => Auction) public auctions;\n', '    uint256[] public tokenIds;\n', '\n', '    struct Auction {\n', '        bool exists;\n', '        uint256 amount;\n', '        uint256 tokenId;\n', '        uint256 duration;\n', '        uint256 firstBidTime;\n', '        uint256 reservePrice;\n', '        address creator;\n', '        address payable bidder;\n', '        address payable creatorShareRecipient;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(!paused, "Must not be paused");\n', '        _;\n', '    }\n', '\n', '    event AuctionCreated(\n', '        uint256 tokenId,\n', '        address zoraAddress,\n', '        uint256 duration,\n', '        uint256 reservePrice,\n', '        address creator,\n', '        address creatorShareRecipient\n', '    );\n', '    event AuctionBid(\n', '        uint256 tokenId,\n', '        address zoraAddress,\n', '        address sender,\n', '        uint256 value,\n', '        uint256 timestamp,\n', '        bool firstBid,\n', '        bool extended\n', '    );\n', '    event AuctionEnded(\n', '        uint256 tokenId,\n', '        address zoraAddress,\n', '        address creator,\n', '        address winner,\n', '        uint256 amount,\n', '        address creatorShareRecipient\n', '    );\n', '    event AuctionCanceled(\n', '        uint256 tokenId,\n', '        address zoraAddress,\n', '        address creator\n', '    );\n', '\n', '    constructor(address _zora) public {\n', '        require(\n', '            IERC165(_zora).supportsInterface(interfaceId),\n', '            "Doesn\'t support NFT interface"\n', '        );\n', '        zora = _zora;\n', '    }\n', '\n', '    function updateZora(address _zora) public onlyOwner {\n', '        require(\n', '            IERC165(_zora).supportsInterface(interfaceId),\n', '            "Doesn\'t support NFT interface"\n', '        );\n', '        zora = _zora;\n', '    }\n', '\n', '    function updateMinBid(uint256 _minBid) public onlyOwner {\n', '        minBid = _minBid;\n', '    }\n', '\n', '    function updateTimeBuffer(uint256 _timeBuffer) public onlyOwner {\n', '        timeBuffer = _timeBuffer;\n', '    }\n', '\n', '    function createAuction(\n', '        uint256 tokenId,\n', '        uint256 duration,\n', '        uint256 reservePrice,\n', '        address creator,\n', '        address payable creatorShareRecipient\n', '    ) external notPaused nonReentrant {\n', '        require(!auctions[tokenId].exists, "Auction already exists");\n', '\n', '        tokenIds.push(tokenId);\n', '\n', '        auctions[tokenId].exists = true;\n', '        auctions[tokenId].duration = duration;\n', '        auctions[tokenId].reservePrice = reservePrice;\n', '        auctions[tokenId].creator = creator;\n', '        auctions[tokenId].creatorShareRecipient = creatorShareRecipient;\n', '\n', '        IERC721(zora).transferFrom(creator, address(this), tokenId);\n', '\n', '        emit AuctionCreated(\n', '            tokenId,\n', '            zora,\n', '            duration,\n', '            reservePrice,\n', '            creator,\n', '            creatorShareRecipient\n', '        );\n', '    }\n', '\n', '    function createBid(uint256 tokenId)\n', '        external\n', '        payable\n', '        notPaused\n', '        nonReentrant\n', '    {\n', '        require(auctions[tokenId].exists, "Auction doesn\'t exist");\n', '        require(\n', '            msg.value >= auctions[tokenId].reservePrice,\n', '            "Must send reservePrice or more"\n', '        );\n', '        require(\n', '            auctions[tokenId].firstBidTime == 0 ||\n', '                block.timestamp <\n', '                auctions[tokenId].firstBidTime + auctions[tokenId].duration,\n', '            "Auction expired"\n', '        );\n', '\n', '        uint256 lastValue = auctions[tokenId].amount;\n', '\n', '        bool firstBid = false;\n', '        address payable lastBidder = address(0);\n', '\n', '        // allows for auctions with starting price of 0\n', '        if (lastValue != 0) {\n', '            require(msg.value > lastValue, "Must send more than last bid");\n', '            require(\n', '                msg.value.sub(lastValue) >= minBid,\n', '                "Must send more than last bid by minBid Amount"\n', '            );\n', '            lastBidder = auctions[tokenId].bidder;\n', '        } else {\n', '            firstBid = true;\n', '            auctions[tokenId].firstBidTime = block.timestamp;\n', '        }\n', '\n', '        require(\n', '            IMarket(IMediaModified(zora).marketContract()).isValidBid(\n', '                tokenId,\n', '                msg.value\n', '            ),\n', '            "Market: Ask invalid for share splitting"\n', '        );\n', '\n', '        auctions[tokenId].amount = msg.value;\n', '        auctions[tokenId].bidder = msg.sender;\n', '\n', '        bool extended = false;\n', '        // at this point we know that the timestamp is less than start + duration\n', '        // we want to know by how much the timestamp is less than start + duration\n', '        // if the difference is less than the timeBuffer, increase the duration by the timeBuffer\n', '        if (\n', '            (auctions[tokenId].firstBidTime.add(auctions[tokenId].duration))\n', '                .sub(block.timestamp) < timeBuffer\n', '        ) {\n', '            auctions[tokenId].duration += timeBuffer;\n', '            extended = true;\n', '        }\n', '\n', '        emit AuctionBid(\n', '            tokenId,\n', '            zora,\n', '            msg.sender,\n', '            msg.value,\n', '            block.timestamp,\n', '            firstBid,\n', '            extended\n', '        );\n', '\n', '        if (!firstBid) {\n', '            lastBidder.transfer(lastValue);\n', '        }\n', '    }\n', '\n', '    function endAuction(uint256 tokenId) external notPaused nonReentrant {\n', '        require(auctions[tokenId].exists, "Auction doesn\'t exist");\n', '        require(\n', '            uint256(auctions[tokenId].firstBidTime) != 0,\n', '            "Auction hasn\'t begun"\n', '        );\n', '        require(\n', '            block.timestamp >=\n', '                auctions[tokenId].firstBidTime + auctions[tokenId].duration,\n', '            "Auction hasn\'t completed"\n', '        );\n', '\n', '        address winner = auctions[tokenId].bidder;\n', '        uint256 amount = auctions[tokenId].amount;\n', '        address creator = auctions[tokenId].creator;\n', '        address payable creatorShareRecipient =\n', '            auctions[tokenId].creatorShareRecipient;\n', '\n', '        emit AuctionEnded(\n', '            tokenId,\n', '            zora,\n', '            creator,\n', '            winner,\n', '            amount,\n', '            creatorShareRecipient\n', '        );\n', '        delete auctions[tokenId];\n', '\n', '        IERC721(zora).transferFrom(address(this), winner, tokenId);\n', '\n', '        IMarket.BidShares memory bidShares =\n', '            IMarket(IMediaModified(zora).marketContract()).bidSharesForToken(\n', '                tokenId\n', '            );\n', '\n', '        // solc 6.0 method for casting payable addresses:\n', '        address payable originalCreator =\n', '            payable(address(IMediaModified(zora).tokenCreators(tokenId)));\n', '\n', '        uint256 creatorAmount =\n', '            IMarket(IMediaModified(zora).marketContract()).splitShare(\n', '                bidShares.creator,\n', '                amount\n', '            );\n', '\n', '        uint256 sellerAmount = amount.sub(creatorAmount);\n', '\n', '        originalCreator.transfer(creatorAmount);\n', '        creatorShareRecipient.transfer(sellerAmount);\n', '    }\n', '\n', '    function cancelAuction(uint256 tokenId) external nonReentrant {\n', '        require(auctions[tokenId].exists, "Auction doesn\'t exist");\n', '        require(\n', '            auctions[tokenId].creator == msg.sender || msg.sender == owner(),\n', '            "Can only be called by auction creator or owner"\n', '        );\n', '        require(\n', '            uint256(auctions[tokenId].firstBidTime) == 0,\n', '            "Can\'t cancel an auction once it\'s begun"\n', '        );\n', '        address creator = auctions[tokenId].creator;\n', '        delete auctions[tokenId];\n', '        IERC721(zora).transferFrom(address(this), creator, tokenId);\n', '        emit AuctionCanceled(tokenId, zora, creator);\n', '    }\n', '\n', '    function updatePaused(bool _paused) public onlyOwner {\n', '        paused = _paused;\n', '    }\n', '}']