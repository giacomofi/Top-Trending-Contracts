['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT \n', 'pragma solidity 0.6.11; \n', 'pragma experimental ABIEncoderV2;\n', '\n', '// ====================================================================\n', '//     ________                   _______                           \n', '//    / ____/ /__  ____  ____ _  / ____(_)___  ____ _____  ________ \n', '//   / __/ / / _ \\/ __ \\/ __ `/ / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\\n', '//  / /___/ /  __/ / / / /_/ / / __/ / / / / / /_/ / / / / /__/  __/\n', '// /_____/_/\\___/_/ /_/\\__,_(_)_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/                                                                                                                     \n', '//                                                                        \n', '// ====================================================================\n', '// ====================== Elena Protocol (USE) ========================\n', '// ====================================================================\n', '\n', '// Dapp    :  https://elena.finance\n', '// Twitter :  https://twitter.com/ElenaProtocol\n', '// Telegram:  https://t.me/ElenaFinance\n', '// ====================================================================\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '// License: MIT\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '// License: MIT\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol\n', '// License: MIT\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '            bytes32 lastvalue = set._values[lastIndex];\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '    // AddressSet\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '    // UintSet\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\utils\\Address.sol\n', '// License: MIT\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '// License: MIT\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol\n', '// License: MIT\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '    mapping (bytes32 => RoleData) private _roles;\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '        _grantRole(role, account);\n', '    }\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '        _revokeRole(role, account);\n', '    }\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '        _revokeRole(role, account);\n', '    }\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Common\\ContractGuard.sol\n', '// License: MIT\n', '\n', 'contract ContractGuard {\n', '    mapping(uint256 => mapping(address => bool)) private _status;\n', '    function checkSameOriginReentranted() internal view returns (bool) {\n', '        return _status[block.number][tx.origin];\n', '    }\n', '    function checkSameSenderReentranted() internal view returns (bool) {\n', '        return _status[block.number][msg.sender];\n', '    }\n', '    modifier onlyOneBlock() {\n', '        require(\n', '            !checkSameOriginReentranted(),\n', "            'ContractGuard: one block, one function'\n", '        );\n', '        require(\n', '            !checkSameSenderReentranted(),\n', "            'ContractGuard: one block, one function'\n", '        );\n', '        _;\n', '        _status[block.number][tx.origin] = true;\n', '        _status[block.number][msg.sender] = true;\n', '    }\n', '}\n', '\n', '// File: contracts\\Common\\IERC20Detail.sol\n', '// License: MIT\n', '\n', '\n', 'interface IERC20Detail is IERC20 {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts\\Share\\IShareToken.sol\n', '// License: MIT\n', '\n', '\n', '\n', 'interface IShareToken is IERC20 {  \n', '    function pool_mint(address m_address, uint256 m_amount) external; \n', '    function pool_burn_from(address b_address, uint256 b_amount) external; \n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '// File: contracts\\Oracle\\IUniswapPairOracle.sol\n', '// License: MIT\n', '\n', '// Fixed window oracle that recomputes the average price for the entire period once every period\n', '// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\n', 'interface IUniswapPairOracle { \n', '    function getPairToken(address token) external view returns(address);\n', '    function containsToken(address token) external view returns(bool);\n', '    function getSwapTokenReserve(address token) external view returns(uint256);\n', '    function update() external returns(bool);\n', '    // Note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(address token, uint amountIn) external view returns (uint amountOut);\n', '}\n', '\n', '// File: contracts\\USE\\IUSEStablecoin.sol\n', '// License: MIT\n', '\n', '\n', 'interface IUSEStablecoin {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function owner_address() external returns (address);\n', '    function creator_address() external returns (address);\n', '    function timelock_address() external returns (address); \n', '    function genesis_supply() external returns (uint256); \n', '    function refresh_cooldown() external returns (uint256);\n', '    function price_target() external returns (uint256);\n', '    function price_band() external returns (uint256);\n', '    function DEFAULT_ADMIN_ADDRESS() external returns (address);\n', '    function COLLATERAL_RATIO_PAUSER() external returns (bytes32);\n', '    function collateral_ratio_paused() external returns (bool);\n', '    function last_call_time() external returns (uint256);\n', '    function USEDAIOracle() external returns (IUniswapPairOracle);\n', '    function USESharesOracle() external returns (IUniswapPairOracle); \n', '    /* ========== VIEWS ========== */\n', '    function use_pools(address a) external view returns (bool);\n', '    function global_collateral_ratio() external view returns (uint256);\n', '    function use_price() external view returns (uint256);\n', '    function share_price()  external view returns (uint256);\n', '    function share_price_in_use()  external view returns (uint256); \n', '    function globalCollateralValue() external view returns (uint256);\n', '    /* ========== PUBLIC FUNCTIONS ========== */\n', '    function refreshCollateralRatio() external;\n', '    function swapCollateralAmount() external view returns(uint256);\n', '    function pool_mint(address m_address, uint256 m_amount) external;\n', '    function pool_burn_from(address b_address, uint256 b_amount) external;\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '// File: contracts\\USE\\Pools\\USEPoolAlgo.sol\n', '// License: MIT\n', '\n', '\n', '\n', 'contract USEPoolAlgo {\n', '    using SafeMath for uint256;\n', '    // Constants for various precisions\n', '    uint256 public constant PRICE_PRECISION = 1e6;\n', '    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e6;\n', '    // ================ Structs ================\n', '    // Needed to lower stack size\n', '    struct MintFU_Params {\n', '        uint256 shares_price_usd; \n', '        uint256 col_price_usd;\n', '        uint256 shares_amount;\n', '        uint256 collateral_amount;\n', '        uint256 col_ratio;\n', '    }\n', '    struct BuybackShares_Params {\n', '        uint256 excess_collateral_dollar_value_d18;\n', '        uint256 shares_price_usd;\n', '        uint256 col_price_usd;\n', '        uint256 shares_amount;\n', '    }\n', '    // ================ Functions ================\n', '    function calcMint1t1USE(uint256 col_price, uint256 collateral_amount_d18) public pure returns (uint256) {\n', '        return (collateral_amount_d18.mul(col_price)).div(1e6);\n', '    } \n', '    // Must be internal because of the struct\n', '    function calcMintFractionalUSE(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\n', '          (uint256 mint_amount1, uint256 collateral_need_d18_1, uint256 shares_needed1) = calcMintFractionalWithCollateral(params);\n', '          (uint256 mint_amount2, uint256 collateral_need_d18_2, uint256 shares_needed2) = calcMintFractionalWithShare(params);\n', '          if(mint_amount1 > mint_amount2){\n', '              return (mint_amount2,collateral_need_d18_2,shares_needed2);\n', '          }else{\n', '              return (mint_amount1,collateral_need_d18_1,shares_needed1);\n', '          }\n', '    }\n', '    // Must be internal because of the struct\n', '    function calcMintFractionalWithCollateral(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\n', '        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\n', '        // The contract must check the proper ratio was sent to mint USE. We do this by seeing the minimum mintable USE based on each amount \n', '        uint256 c_dollar_value_d18_with_precision = params.collateral_amount.mul(params.col_price_usd);\n', '        uint256 c_dollar_value_d18 = c_dollar_value_d18_with_precision.div(1e6); \n', '        uint calculated_shares_dollar_value_d18 = \n', '                    (c_dollar_value_d18_with_precision.div(params.col_ratio))\n', '                    .sub(c_dollar_value_d18);\n', '        uint calculated_shares_needed = calculated_shares_dollar_value_d18.mul(1e6).div(params.shares_price_usd);\n', '        return (\n', '            c_dollar_value_d18.add(calculated_shares_dollar_value_d18),\n', '            params.collateral_amount,\n', '            calculated_shares_needed\n', '        );\n', '    }\n', '     // Must be internal because of the struct\n', '    function calcMintFractionalWithShare(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\n', '        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\n', '        // The contract must check the proper ratio was sent to mint USE. We do this by seeing the minimum mintable USE based on each amount \n', '        uint256 shares_dollar_value_d18_with_precision = params.shares_amount.mul(params.shares_price_usd);\n', '        uint256 shares_dollar_value_d18 = shares_dollar_value_d18_with_precision.div(1e6); \n', '        uint calculated_collateral_dollar_value_d18 = \n', '                    shares_dollar_value_d18_with_precision.mul(params.col_ratio)\n', '                    .div(COLLATERAL_RATIO_PRECISION.sub(params.col_ratio)).div(1e6); \n', '        uint calculated_collateral_needed = calculated_collateral_dollar_value_d18.mul(1e6).div(params.col_price_usd);\n', '        return (\n', '            shares_dollar_value_d18.add(calculated_collateral_dollar_value_d18),\n', '            calculated_collateral_needed,\n', '            params.shares_amount\n', '        );\n', '    }\n', '    function calcRedeem1t1USE(uint256 col_price_usd, uint256 use_amount) public pure returns (uint256) {\n', '        return use_amount.mul(1e6).div(col_price_usd);\n', '    }\n', '    // Must be internal because of the struct\n', '    function calcBuyBackShares(BuybackShares_Params memory params) public pure returns (uint256) {\n', '        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible Shares with the desired collateral\n', '        require(params.excess_collateral_dollar_value_d18 > 0, "No excess collateral to buy back!");\n', '        // Make sure not to take more than is available\n', '        uint256 shares_dollar_value_d18 = params.shares_amount.mul(params.shares_price_usd).div(1e6);\n', '        require(shares_dollar_value_d18 <= params.excess_collateral_dollar_value_d18, "You are trying to buy back more than the excess!");\n', '        // Get the equivalent amount of collateral based on the market value of Shares provided \n', '        uint256 collateral_equivalent_d18 = shares_dollar_value_d18.mul(1e6).div(params.col_price_usd);\n', '        //collateral_equivalent_d18 = collateral_equivalent_d18.sub((collateral_equivalent_d18.mul(params.buyback_fee)).div(1e6));\n', '        return (\n', '            collateral_equivalent_d18\n', '        );\n', '    }\n', '    // Returns value of collateral that must increase to reach recollateralization target (if 0 means no recollateralization)\n', '    function recollateralizeAmount(uint256 total_supply, uint256 global_collateral_ratio, uint256 global_collat_value) public pure returns (uint256) {\n', '        uint256 target_collat_value = total_supply.mul(global_collateral_ratio).div(1e6); // We want 18 decimals of precision so divide by 1e6; total_supply is 1e18 and global_collateral_ratio is 1e6\n', '        // Subtract the current value of collateral from the target value needed, if higher than 0 then system needs to recollateralize\n', '        return target_collat_value.sub(global_collat_value); // If recollateralization is not needed, throws a subtraction underflow\n', '        // return(recollateralization_left);\n', '    }\n', '    function calcRecollateralizeUSEInner(\n', '        uint256 collateral_amount, \n', '        uint256 col_price,\n', '        uint256 global_collat_value,\n', '        uint256 frax_total_supply,\n', '        uint256 global_collateral_ratio\n', '    ) public pure returns (uint256, uint256) {\n', '        uint256 collat_value_attempted = collateral_amount.mul(col_price).div(1e6);\n', '        uint256 effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply); //returns it in 1e6\n', '        uint256 recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6);\n', '        uint256 amount_to_recollat;\n', '        if(collat_value_attempted <= recollat_possible){\n', '            amount_to_recollat = collat_value_attempted;\n', '        } else {\n', '            amount_to_recollat = recollat_possible;\n', '        }\n', '        return (amount_to_recollat.mul(1e6).div(col_price), amount_to_recollat);\n', '    }\n', '}\n', '\n', '// File: contracts\\USE\\Pools\\USEPool.sol\n', '// License: MIT\n', '\n', 'abstract contract USEPool is USEPoolAlgo,ContractGuard,AccessControl {\n', '    using SafeMath for uint256;\n', '    /* ========== STATE VARIABLES ========== */\n', '    IERC20Detail public collateral_token;\n', '    address public collateral_address;\n', '    address public owner_address;\n', '    address public community_address;\n', '    address public use_contract_address;\n', '    address public shares_contract_address;\n', '    address public timelock_address;\n', '    IShareToken private SHARE;\n', '    IUSEStablecoin private USE; \n', '    uint256 public minting_tax_base;\n', '    uint256 public minting_tax_multiplier; \n', '    uint256 public minting_required_reserve_ratio;\n', '    uint256 public redemption_gcr_adj = PRECISION;   // PRECISION/PRECISION = 1\n', '    uint256 public redemption_tax_base;\n', '    uint256 public redemption_tax_multiplier;\n', '    uint256 public redemption_tax_exponent;\n', '    uint256 public redemption_required_reserve_ratio = 800000;\n', '    uint256 public buyback_tax;\n', '    uint256 public recollat_tax;\n', '    uint256 public community_rate_ratio = 15000;\n', '    uint256 public community_rate_in_use;\n', '    uint256 public community_rate_in_share;\n', '    mapping (address => uint256) public redeemSharesBalances;\n', '    mapping (address => uint256) public redeemCollateralBalances;\n', '    uint256 public unclaimedPoolCollateral;\n', '    uint256 public unclaimedPoolShares;\n', '    mapping (address => uint256) public lastRedeemed;\n', '    // Constants for various precisions\n', '    uint256 public constant PRECISION = 1e6;  \n', '    uint256 public constant RESERVE_RATIO_PRECISION = 1e6;    \n', '    uint256 public constant COLLATERAL_RATIO_MAX = 1e6;\n', '    // Number of decimals needed to get to 18\n', '    uint256 public immutable missing_decimals;\n', '    // Pool_ceiling is the total units of collateral that a pool contract can hold\n', '    uint256 public pool_ceiling = 10000000000e18;\n', '    // Stores price of the collateral, if price is paused\n', '    uint256 public pausedPrice = 0;\n', '    // Bonus rate on Shares minted during recollateralizeUSE(); 6 decimals of precision, set to 0.5% on genesis\n', '    uint256 public bonus_rate = 5000;\n', '    // Number of blocks to wait before being able to collectRedemption()\n', '    uint256 public redemption_delay = 2;\n', '    uint256 public global_use_supply_adj = 1000e18;  //genesis_supply\n', '    // AccessControl Roles\n', '    bytes32 public constant MINT_PAUSER = keccak256("MINT_PAUSER");\n', '    bytes32 public constant REDEEM_PAUSER = keccak256("REDEEM_PAUSER");\n', '    bytes32 public constant BUYBACK_PAUSER = keccak256("BUYBACK_PAUSER");\n', '    bytes32 public constant RECOLLATERALIZE_PAUSER = keccak256("RECOLLATERALIZE_PAUSER");\n', '    bytes32 public constant COLLATERAL_PRICE_PAUSER = keccak256("COLLATERAL_PRICE_PAUSER");\n', '    bytes32 public constant COMMUNITY_RATER = keccak256("COMMUNITY_RATER");\n', '    // AccessControl state variables\n', '    bool public mintPaused = false;\n', '    bool public redeemPaused = false;\n', '    bool public recollateralizePaused = false;\n', '    bool public buyBackPaused = false;\n', '    bool public collateralPricePaused = false;\n', '    event UpdateOracleBonus(address indexed user,bool bonus1, bool bonus2);\n', '    /* ========== MODIFIERS ========== */\n', '    modifier onlyByOwnerOrGovernance() {\n', '        require(msg.sender == timelock_address || msg.sender == owner_address, "You are not the owner or the governance timelock");\n', '        _;\n', '    }\n', '    modifier notRedeemPaused() {\n', '        require(redeemPaused == false, "Redeeming is paused");\n', '        require(redemptionOpened() == true,"Redeeming is closed");\n', '        _;\n', '    }\n', '    modifier notMintPaused() {\n', '        require(mintPaused == false, "Minting is paused");\n', '        require(mintingOpened() == true,"Minting is closed");\n', '        _;\n', '    }\n', '    /* ========== CONSTRUCTOR ========== */\n', '    constructor(\n', '        address _use_contract_address,\n', '        address _shares_contract_address,\n', '        address _collateral_address,\n', '        address _creator_address,\n', '        address _timelock_address,\n', '        address _community_address\n', '    ) public {\n', '        USE = IUSEStablecoin(_use_contract_address);\n', '        SHARE = IShareToken(_shares_contract_address);\n', '        use_contract_address = _use_contract_address;\n', '        shares_contract_address = _shares_contract_address;\n', '        collateral_address = _collateral_address;\n', '        timelock_address = _timelock_address;\n', '        owner_address = _creator_address;\n', '        community_address = _community_address;\n', '        collateral_token = IERC20Detail(_collateral_address); \n', '        missing_decimals = uint(18).sub(collateral_token.decimals());\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        grantRole(MINT_PAUSER, timelock_address);\n', '        grantRole(REDEEM_PAUSER, timelock_address);\n', '        grantRole(RECOLLATERALIZE_PAUSER, timelock_address);\n', '        grantRole(BUYBACK_PAUSER, timelock_address);\n', '        grantRole(COLLATERAL_PRICE_PAUSER, timelock_address);\n', '        grantRole(COMMUNITY_RATER, _community_address);\n', '    }\n', '    /* ========== VIEWS ========== */\n', '    // Returns dollar value of collateral held in this USE pool\n', '    function collatDollarBalance() public view returns (uint256) {\n', '        uint256 collateral_amount = collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral);\n', '        uint256 collat_usd_price = collateralPricePaused == true ? pausedPrice : getCollateralPrice();\n', '        return collateral_amount.mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION); \n', '    }\n', '    // Returns the value of excess collateral held in this USE pool, compared to what is needed to maintain the global collateral ratio\n', '    function availableExcessCollatDV() public view returns (uint256) {      \n', '        uint256 total_supply = USE.totalSupply().sub(global_use_supply_adj);       \n', '        uint256 global_collat_value = USE.globalCollateralValue();\n', '        uint256 global_collateral_ratio = USE.global_collateral_ratio();\n', '        // Handles an overcollateralized contract with CR > 1\n', '        if (global_collateral_ratio > COLLATERAL_RATIO_PRECISION) {\n', '            global_collateral_ratio = COLLATERAL_RATIO_PRECISION; \n', '        }\n', '        // Calculates collateral needed to back each 1 USE with $1 of collateral at current collat ratio\n', '        uint256 required_collat_dollar_value_d18 = (total_supply.mul(global_collateral_ratio)).div(COLLATERAL_RATIO_PRECISION);\n', '        if (global_collat_value > required_collat_dollar_value_d18) {\n', '           return global_collat_value.sub(required_collat_dollar_value_d18);\n', '        }\n', '        return 0;\n', '    }\n', '    /* ========== PUBLIC FUNCTIONS ========== */ \n', '    function getCollateralPrice() public view virtual returns (uint256);\n', '    function getCollateralAmount()   public view  returns (uint256){\n', '        return collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral);\n', '    }\n', '    function requiredReserveRatio() public view returns(uint256){\n', '        uint256 pool_collateral_amount = getCollateralAmount();\n', '        uint256 swap_collateral_amount = USE.swapCollateralAmount();\n', '        require(swap_collateral_amount>0,"swap collateral is empty?");\n', '        return pool_collateral_amount.mul(RESERVE_RATIO_PRECISION).div(swap_collateral_amount);\n', '    }\n', '    function mintingOpened() public view returns(bool){ \n', '        return  (requiredReserveRatio() >= minting_required_reserve_ratio);\n', '    }\n', '    function redemptionOpened() public view returns(bool){\n', '        return  (requiredReserveRatio() >= redemption_required_reserve_ratio);\n', '    }\n', '    //\n', '    function mintingTax() public view returns(uint256){\n', '        uint256 _dynamicTax =  minting_tax_multiplier.mul(requiredReserveRatio()).div(RESERVE_RATIO_PRECISION); \n', '        return  minting_tax_base + _dynamicTax;       \n', '    }\n', '    function dynamicRedemptionTax(uint256 ratio,uint256 multiplier,uint256 exponent) public pure returns(uint256){        \n', '        return multiplier.mul(RESERVE_RATIO_PRECISION**exponent).div(ratio**exponent);\n', '    }\n', '    //\n', '    function redemptionTax() public view returns(uint256){\n', '        uint256 _dynamicTax =dynamicRedemptionTax(requiredReserveRatio(),redemption_tax_multiplier,redemption_tax_exponent);\n', '        return  redemption_tax_base + _dynamicTax;       \n', '    } \n', '    function updateOraclePrice() public { \n', '        IUniswapPairOracle _useDaiOracle = USE.USEDAIOracle();\n', '        IUniswapPairOracle _useSharesOracle = USE.USESharesOracle();\n', '        bool _bonus1 = _useDaiOracle.update();\n', '        bool _bonus2 = _useSharesOracle.update(); \n', '        if(_bonus1 || _bonus2){\n', '            emit UpdateOracleBonus(msg.sender,_bonus1,_bonus2);\n', '        }\n', '    }\n', '    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency \n', '    function mint1t1USE(uint256 collateral_amount, uint256 use_out_min) external onlyOneBlock notMintPaused { \n', '        updateOraclePrice();       \n', '        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n', '        require(USE.global_collateral_ratio() >= COLLATERAL_RATIO_MAX, "Collateral ratio must be >= 1");\n', '        require(getCollateralAmount().add(collateral_amount) <= pool_ceiling, "[Pool\'s Closed]: Ceiling reached");\n', '        (uint256 use_amount_d18) = calcMint1t1USE(\n', '            getCollateralPrice(),\n', '            collateral_amount_d18\n', '        ); //1 USE for each $1 worth of collateral\n', '        community_rate_in_use  =  community_rate_in_use.add(use_amount_d18.mul(community_rate_ratio).div(PRECISION));\n', '        use_amount_d18 = (use_amount_d18.mul(uint(1e6).sub(mintingTax()))).div(1e6); //remove precision at the end\n', '        require(use_out_min <= use_amount_d18, "Slippage limit reached");\n', '        collateral_token.transferFrom(msg.sender, address(this), collateral_amount);\n', '        USE.pool_mint(msg.sender, use_amount_d18);  \n', '    }\n', '    // Will fail if fully collateralized or fully algorithmic\n', '    // > 0% and < 100% collateral-backed\n', '    function mintFractionalUSE(uint256 collateral_amount, uint256 shares_amount, uint256 use_out_min) external onlyOneBlock notMintPaused {\n', '        updateOraclePrice();\n', '        uint256 share_price = USE.share_price();\n', '        uint256 global_collateral_ratio = USE.global_collateral_ratio();\n', '        require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, "Collateral ratio needs to be between .000001 and .999999");\n', '        require(getCollateralAmount().add(collateral_amount) <= pool_ceiling, "Pool ceiling reached, no more USE can be minted with this collateral");\n', '        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n', '        MintFU_Params memory input_params = MintFU_Params(\n', '            share_price,\n', '            getCollateralPrice(),\n', '            shares_amount,\n', '            collateral_amount_d18,\n', '            global_collateral_ratio\n', '        );\n', '        (uint256 mint_amount,uint256 collateral_need_d18, uint256 shares_needed) = calcMintFractionalUSE(input_params);\n', '        community_rate_in_use  =  community_rate_in_use.add(mint_amount.mul(community_rate_ratio).div(PRECISION));\n', '        mint_amount = (mint_amount.mul(uint(1e6).sub(mintingTax()))).div(1e6);\n', '        require(use_out_min <= mint_amount, "Slippage limit reached");\n', '        require(shares_needed <= shares_amount, "Not enough Shares inputted");\n', '        uint256 collateral_need = collateral_need_d18.div(10 ** missing_decimals);\n', '        SHARE.pool_burn_from(msg.sender, shares_needed);\n', '        collateral_token.transferFrom(msg.sender, address(this), collateral_need);\n', '        USE.pool_mint(msg.sender, mint_amount);      \n', '    }\n', '    // Redeem collateral. 100% collateral-backed\n', '    function redeem1t1USE(uint256 use_amount, uint256 COLLATERAL_out_min) external onlyOneBlock notRedeemPaused {\n', '        updateOraclePrice();\n', '        require(USE.global_collateral_ratio() == COLLATERAL_RATIO_MAX, "Collateral ratio must be == 1");\n', '        // Need to adjust for decimals of collateral\n', '        uint256 use_amount_precision = use_amount.div(10 ** missing_decimals);\n', '        (uint256 collateral_needed) = calcRedeem1t1USE(\n', '            getCollateralPrice(),\n', '            use_amount_precision\n', '        );\n', '        community_rate_in_use  =  community_rate_in_use.add(use_amount.mul(community_rate_ratio).div(PRECISION));\n', '        collateral_needed = (collateral_needed.mul(uint(1e6).sub(redemptionTax()))).div(1e6);\n', '        require(collateral_needed <= getCollateralAmount(), "Not enough collateral in pool");\n', '        require(COLLATERAL_out_min <= collateral_needed, "Slippage limit reached");\n', '        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_needed);\n', '        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\n', '        lastRedeemed[msg.sender] = block.number;\n', '        // Move all external functions to the end\n', '        USE.pool_burn_from(msg.sender, use_amount); \n', '        require(redemptionOpened() == true,"Redeem amount too large !");\n', '    }\n', '    // Will fail if fully collateralized or algorithmic\n', '    // Redeem USE for collateral and SHARE. > 0% and < 100% collateral-backed\n', '    function redeemFractionalUSE(uint256 use_amount, uint256 shares_out_min, uint256 COLLATERAL_out_min) external onlyOneBlock notRedeemPaused {\n', '        updateOraclePrice();\n', '        uint256 global_collateral_ratio = USE.global_collateral_ratio();\n', '        require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, "Collateral ratio needs to be between .000001 and .999999");\n', '        global_collateral_ratio = global_collateral_ratio.mul(redemption_gcr_adj).div(PRECISION);\n', '        uint256 use_amount_post_tax = (use_amount.mul(uint(1e6).sub(redemptionTax()))).div(PRICE_PRECISION);\n', '        uint256 shares_dollar_value_d18 = use_amount_post_tax.sub(use_amount_post_tax.mul(global_collateral_ratio).div(PRICE_PRECISION));\n', '        uint256 shares_amount = shares_dollar_value_d18.mul(PRICE_PRECISION).div(USE.share_price());\n', '        // Need to adjust for decimals of collateral\n', '        uint256 use_amount_precision = use_amount_post_tax.div(10 ** missing_decimals);\n', '        uint256 collateral_dollar_value = use_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION);\n', '        uint256 collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(getCollateralPrice());\n', '        require(collateral_amount <= getCollateralAmount(), "Not enough collateral in pool");\n', '        require(COLLATERAL_out_min <= collateral_amount, "Slippage limit reached [collateral]");\n', '        require(shares_out_min <= shares_amount, "Slippage limit reached [Shares]");\n', '        community_rate_in_use  =  community_rate_in_use.add(use_amount.mul(community_rate_ratio).div(PRECISION));\n', '        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\n', '        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\n', '        redeemSharesBalances[msg.sender] = redeemSharesBalances[msg.sender].add(shares_amount);\n', '        unclaimedPoolShares = unclaimedPoolShares.add(shares_amount);\n', '        lastRedeemed[msg.sender] = block.number;\n', '        // Move all external functions to the end\n', '        USE.pool_burn_from(msg.sender, use_amount);\n', '        SHARE.pool_mint(address(this), shares_amount);\n', '        require(redemptionOpened() == true,"Redeem amount too large !");\n', '    }\n', '    // After a redemption happens, transfer the newly minted Shares and owed collateral from this pool\n', '    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\n', '    // to take out USE/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\n', '    function collectRedemption() external onlyOneBlock{        \n', '        require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, "Must wait for redemption_delay blocks before collecting redemption");\n', '        bool sendShares = false;\n', '        bool sendCollateral = false;\n', '        uint sharesAmount;\n', '        uint CollateralAmount;\n', '        // Use Checks-Effects-Interactions pattern\n', '        if(redeemSharesBalances[msg.sender] > 0){\n', '            sharesAmount = redeemSharesBalances[msg.sender];\n', '            redeemSharesBalances[msg.sender] = 0;\n', '            unclaimedPoolShares = unclaimedPoolShares.sub(sharesAmount);\n', '            sendShares = true;\n', '        }\n', '        if(redeemCollateralBalances[msg.sender] > 0){\n', '            CollateralAmount = redeemCollateralBalances[msg.sender];\n', '            redeemCollateralBalances[msg.sender] = 0;\n', '            unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\n', '            sendCollateral = true;\n', '        }\n', '        if(sendShares == true){\n', '            SHARE.transfer(msg.sender, sharesAmount);\n', '        }\n', '        if(sendCollateral == true){\n', '            collateral_token.transfer(msg.sender, CollateralAmount);\n', '        }\n', '    }\n', '    // When the protocol is recollateralizing, we need to give a discount of Shares to hit the new CR target\n', '    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get Shares for adding collateral\n', '    // This function simply rewards anyone that sends collateral to a pool with the same amount of Shares + the bonus rate\n', '    // Anyone can call this function to recollateralize the protocol and take the extra Shares value from the bonus rate as an arb opportunity\n', '    function recollateralizeUSE(uint256 collateral_amount, uint256 shares_out_min) external onlyOneBlock {\n', '        require(recollateralizePaused == false, "Recollateralize is paused");\n', '        updateOraclePrice();\n', '        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n', '        uint256 share_price = USE.share_price();\n', '        uint256 use_total_supply = USE.totalSupply().sub(global_use_supply_adj);\n', '        uint256 global_collateral_ratio = USE.global_collateral_ratio();\n', '        uint256 global_collat_value = USE.globalCollateralValue();\n', '        (uint256 collateral_units, uint256 amount_to_recollat) = calcRecollateralizeUSEInner(\n', '            collateral_amount_d18,\n', '            getCollateralPrice(),\n', '            global_collat_value,\n', '            use_total_supply,\n', '            global_collateral_ratio\n', '        ); \n', '        uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\n', '        uint256 shares_paid_back = amount_to_recollat.mul(uint(1e6).add(bonus_rate).sub(recollat_tax)).div(share_price);\n', '        require(shares_out_min <= shares_paid_back, "Slippage limit reached");\n', '        community_rate_in_share =  community_rate_in_share.add(shares_paid_back.mul(community_rate_ratio).div(PRECISION));\n', '        collateral_token.transferFrom(msg.sender, address(this), collateral_units_precision);\n', '        SHARE.pool_mint(msg.sender, shares_paid_back);\n', '    }\n', '    // Function can be called by an Shares holder to have the protocol buy back Shares with excess collateral value from a desired collateral pool\n', '    // This can also happen if the collateral ratio > 1\n', '    function buyBackShares(uint256 shares_amount, uint256 COLLATERAL_out_min) external onlyOneBlock {\n', '        require(buyBackPaused == false, "Buyback is paused");\n', '        updateOraclePrice();\n', '        uint256 share_price = USE.share_price();\n', '        BuybackShares_Params memory input_params = BuybackShares_Params(\n', '            availableExcessCollatDV(),\n', '            share_price,\n', '            getCollateralPrice(),\n', '            shares_amount\n', '        );\n', '        (uint256 collateral_equivalent_d18) = (calcBuyBackShares(input_params)).mul(uint(1e6).sub(buyback_tax)).div(1e6);\n', '        uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\n', '        require(COLLATERAL_out_min <= collateral_precision, "Slippage limit reached");\n', '        community_rate_in_share  =  community_rate_in_share.add(shares_amount.mul(community_rate_ratio).div(PRECISION));\n', '        // Give the sender their desired collateral and burn the Shares\n', '        SHARE.pool_burn_from(msg.sender, shares_amount);\n', '        collateral_token.transfer(msg.sender, collateral_precision);\n', '    }\n', '    /* ========== RESTRICTED FUNCTIONS ========== */\n', '    function toggleMinting() external {\n', '        require(hasRole(MINT_PAUSER, msg.sender));\n', '        mintPaused = !mintPaused;\n', '    }\n', '    function toggleRedeeming() external {\n', '        require(hasRole(REDEEM_PAUSER, msg.sender));\n', '        redeemPaused = !redeemPaused;\n', '    }\n', '    function toggleRecollateralize() external {\n', '        require(hasRole(RECOLLATERALIZE_PAUSER, msg.sender));\n', '        recollateralizePaused = !recollateralizePaused;\n', '    }\n', '    function toggleBuyBack() external {\n', '        require(hasRole(BUYBACK_PAUSER, msg.sender));\n', '        buyBackPaused = !buyBackPaused;\n', '    }\n', '    function toggleCollateralPrice(uint256 _new_price) external {\n', '        require(hasRole(COLLATERAL_PRICE_PAUSER, msg.sender));\n', '        // If pausing, set paused price; else if unpausing, clear pausedPrice\n', '        if(collateralPricePaused == false){\n', '            pausedPrice = _new_price;\n', '        } else {\n', '            pausedPrice = 0;\n', '        }\n', '        collateralPricePaused = !collateralPricePaused;\n', '    }\n', '    function toggleCommunityInSharesRate(uint256 _rate) external{\n', '        require(community_rate_in_share>0,"No SHARE rate");\n', '        require(hasRole(COMMUNITY_RATER, msg.sender));\n', '        uint256 _amount_rate = community_rate_in_share.mul(_rate).div(PRECISION);\n', '        community_rate_in_share = community_rate_in_share.sub(_amount_rate);\n', '        SHARE.pool_mint(msg.sender,_amount_rate);  \n', '    }\n', '    function toggleCommunityInUSERate(uint256 _rate) external{\n', '        require(community_rate_in_use>0,"No USE rate");\n', '        require(hasRole(COMMUNITY_RATER, msg.sender));\n', '        uint256 _amount_rate_use = community_rate_in_use.mul(_rate).div(PRECISION);        \n', '        community_rate_in_use = community_rate_in_use.sub(_amount_rate_use);\n', '        uint256 _share_price_use = USE.share_price_in_use();\n', '        uint256 _amount_rate = _amount_rate_use.mul(PRICE_PRECISION).div(_share_price_use);\n', '        SHARE.pool_mint(msg.sender,_amount_rate);  \n', '    }\n', '    // Combined into one function due to 24KiB contract memory limit\n', '    function setPoolParameters(uint256 new_ceiling, \n', '                               uint256 new_bonus_rate, \n', '                               uint256 new_redemption_delay, \n', '                               uint256 new_buyback_tax, \n', '                               uint256 new_recollat_tax,\n', '                               uint256 use_supply_adj) external onlyByOwnerOrGovernance {\n', '        pool_ceiling = new_ceiling;\n', '        bonus_rate = new_bonus_rate;\n', '        redemption_delay = new_redemption_delay; \n', '        buyback_tax = new_buyback_tax;\n', '        recollat_tax = new_recollat_tax;\n', '        global_use_supply_adj = use_supply_adj;\n', '    }\n', '    function setMintingParameters(uint256 _ratioLevel,\n', '                                  uint256 _tax_base,\n', '                                  uint256 _tax_multiplier) external onlyByOwnerOrGovernance{\n', '        minting_required_reserve_ratio = _ratioLevel;\n', '        minting_tax_base = _tax_base;\n', '        minting_tax_multiplier = _tax_multiplier;\n', '    }\n', '    function setRedemptionParameters(uint256 _ratioLevel,\n', '                                     uint256 _tax_base,\n', '                                     uint256 _tax_multiplier,\n', '                                     uint256 _tax_exponent,\n', '                                     uint256 _redeem_gcr_adj) external onlyByOwnerOrGovernance{\n', '        redemption_required_reserve_ratio = _ratioLevel;\n', '        redemption_tax_base = _tax_base;\n', '        redemption_tax_multiplier = _tax_multiplier;\n', '        redemption_tax_exponent = _tax_exponent;\n', '        redemption_gcr_adj = _redeem_gcr_adj;\n', '    }\n', '    function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {\n', '        timelock_address = new_timelock;\n', '    }\n', '    function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\n', '        owner_address = _owner_address;\n', '    }\n', '    function setCommunityParameters(address _community_address,uint256 _ratio) external onlyByOwnerOrGovernance {\n', '        community_address = _community_address;\n', '        community_rate_ratio = _ratio;\n', '    } \n', '    /* ========== EVENTS ========== */\n', '}\n', '\n', '// File: contracts\\USE\\Pools\\USEPoolDAI.sol\n', '// License: MIT\n', '\n', 'contract USEPoolDAI is USEPool {\n', '    address public DAI_address;\n', '    constructor(\n', '        address _use_contract_address,\n', '        address _shares_contract_address,\n', '        address _collateral_address,\n', '        address _creator_address, \n', '        address _timelock_address,\n', '        address _community_address\n', '    ) \n', '    USEPool(_use_contract_address, _shares_contract_address, _collateral_address, _creator_address, _timelock_address,_community_address)\n', '    public {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        DAI_address = _collateral_address;\n', '    }\n', '    // Returns the price of the pool collateral in USD\n', '    function getCollateralPrice() public view override returns (uint256) {\n', '        if(collateralPricePaused == true){\n', '            return pausedPrice;\n', '        } else { \n', '            //Only For Dai\n', '            return 1 * PRICE_PRECISION; \n', '        }\n', '    } \n', '}']