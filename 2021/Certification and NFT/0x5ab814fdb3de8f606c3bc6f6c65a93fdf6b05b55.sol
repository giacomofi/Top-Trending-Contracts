['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '   interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}   abstract contract GasTokenInterface is ERC20 {\n', '    function free(uint256 value) public virtual returns (bool success);\n', '\n', '    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n', '\n', '    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n', '\n', '    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n', '}   contract GasBurner {\n', '    // solhint-disable-next-line const-name-snakecase\n', '    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n', '\n', '    modifier burnGas(uint _amount) {\n', '        if (gasToken.balanceOf(address(this)) >= _amount) {\n', '            gasToken.free(_amount);\n', '        }\n', '\n', '        _;\n', '    }\n', '}   library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}   library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}   library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}   contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '}   abstract contract DSGuard {\n', '    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\n', '\n', '    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function permit(address src, address dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(address src, address dst, bytes32 sig) public virtual;\n', '}\n', '\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '}   abstract contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n', '}   contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}   contract ProxyPermission {\n', '    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n', '\n', '    /// @notice Called in the context of DSProxy to authorize an address\n', '    /// @param _contractAddr Address which will be authorized\n', '    function givePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        DSGuard guard = DSGuard(currAuthority);\n', '\n', '        if (currAuthority == address(0)) {\n', '            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n', '            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n', '        }\n', '\n', '        guard.permit(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    /// @notice Called in the context of DSProxy to remove authority of an address\n', '    /// @param _contractAddr Auth address which will be removed from authority list\n', '    function removePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        \n', "        // if there is no authority, that means that contract doesn't have permission\n", '        if (currAuthority == address(0)) {\n', '            return;\n', '        }\n', '\n', '        DSGuard guard = DSGuard(currAuthority);\n', '        guard.forbid(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    function proxyOwner() internal returns(address) {\n', '        return DSAuth(address(this)).owner();\n', '    } \n', '}   \n', '\n', '\n', '\n', '\n', 'library Account {\n', '    enum Status {Normal, Liquid, Vapor}\n', '    struct Info {\n', '        address owner; // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '    struct Storage {\n', '        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n', '        Status status;\n', '    }\n', '}\n', '\n', '\n', 'library Actions {\n', '    enum ActionType {\n', '        Deposit, // supply tokens\n', '        Withdraw, // borrow tokens\n', '        Transfer, // transfer balance between accounts\n', '        Buy, // buy an amount of some token (public virtually)\n', '        Sell, // sell an amount of some token (public virtually)\n', '        Trade, // trade tokens against another account\n', '        Liquidate, // liquidate an undercollateralized or expiring account\n', '        Vaporize, // use excess tokens to zero-out a completely negative account\n', '        Call // send arbitrary data to an address\n', '    }\n', '\n', '    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n', '\n', '    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        Types.AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct DepositArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address from;\n', '    }\n', '\n', '    struct WithdrawArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address to;\n', '    }\n', '\n', '    struct TransferArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info accountOne;\n', '        Account.Info accountTwo;\n', '        uint256 market;\n', '    }\n', '\n', '    struct BuyArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 makerMarket;\n', '        uint256 takerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct SellArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 takerMarket;\n', '        uint256 makerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct TradeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info takerAccount;\n', '        Account.Info makerAccount;\n', '        uint256 inputMarket;\n', '        uint256 outputMarket;\n', '        address autoTrader;\n', '        bytes tradeData;\n', '    }\n', '\n', '    struct LiquidateArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info liquidAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct VaporizeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info vaporAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct CallArgs {\n', '        Account.Info account;\n', '        address callee;\n', '        bytes data;\n', '    }\n', '}\n', '\n', '\n', 'library Decimal {\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Interest {\n', '    struct Rate {\n', '        uint256 value;\n', '    }\n', '\n', '    struct Index {\n', '        uint96 borrow;\n', '        uint96 supply;\n', '        uint32 lastUpdate;\n', '    }\n', '}\n', '\n', '\n', 'library Monetary {\n', '    struct Price {\n', '        uint256 value;\n', '    }\n', '    struct Value {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Storage {\n', '    // All information necessary for tracking a market\n', '    struct Market {\n', '        // Contract address of the associated ERC20 token\n', '        address token;\n', '        // Total aggregated supply and borrow amount of the entire market\n', '        Types.TotalPar totalPar;\n', '        // Interest index of the market\n', '        Interest.Index index;\n', '        // Contract address of the price oracle for this market\n', '        address priceOracle;\n', '        // Contract address of the interest setter for this market\n', '        address interestSetter;\n', '        // Multiplier on the marginRatio for this market\n', '        Decimal.D256 marginPremium;\n', '        // Multiplier on the liquidationSpread for this market\n', '        Decimal.D256 spreadPremium;\n', '        // Whether additional borrows are allowed for this market\n', '        bool isClosing;\n', '    }\n', '\n', '    // The global risk parameters that govern the health and security of the system\n', '    struct RiskParams {\n', '        // Required ratio of over-collateralization\n', '        Decimal.D256 marginRatio;\n', '        // Percentage penalty incurred by liquidated accounts\n', '        Decimal.D256 liquidationSpread;\n', "        // Percentage of the borrower's interest fee that gets passed to the suppliers\n", '        Decimal.D256 earningsRate;\n', '        // The minimum absolute borrow value of an account\n', '        // There must be sufficient incentivize to liquidate undercollateralized accounts\n', '        Monetary.Value minBorrowedValue;\n', '    }\n', '\n', '    // The maximum RiskParam values that can be set\n', '    struct RiskLimits {\n', '        uint64 marginRatioMax;\n', '        uint64 liquidationSpreadMax;\n', '        uint64 earningsRateMax;\n', '        uint64 marginPremiumMax;\n', '        uint64 spreadPremiumMax;\n', '        uint128 minBorrowedValueMax;\n', '    }\n', '\n', '    // The entire storage state of Solo\n', '    struct State {\n', '        // number of markets\n', '        uint256 numMarkets;\n', '        // marketId => Market\n', '        mapping(uint256 => Market) markets;\n', '        // owner => account number => Account\n', '        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n', '        // Addresses that can control other users accounts\n', '        mapping(address => mapping(address => bool)) operators;\n', '        // Addresses that can control all users accounts\n', '        mapping(address => bool) globalOperators;\n', '        // mutable risk parameters of the system\n', '        RiskParams riskParams;\n', '        // immutable risk limits of the system\n', '        RiskLimits riskLimits;\n', '    }\n', '}\n', '\n', '\n', 'library Types {\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct TotalPar {\n', '        uint128 borrow;\n', '        uint128 supply;\n', '    }\n', '\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ISoloMargin {\n', '    struct OperatorArg {\n', '        address operator;\n', '        bool trusted;\n', '    }\n', '\n', '    function ownerSetSpreadPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public virtual;\n', '\n', '    function getIsGlobalOperator(address operator) public virtual view returns (bool);\n', '\n', '    function getMarketTokenAddress(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n', '        public virtual;\n', '\n', '    function getAccountValues(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketPriceOracle(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function getMarketInterestSetter(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function getMarketSpreadPremium(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getNumMarkets() public virtual view returns (uint256);\n', '\n', '    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n', '        public virtual\n', '        returns (uint256);\n', '\n', '    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n', '        public virtual;\n', '\n', '    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\n', '\n', '    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\n', '\n', '    function getIsLocalOperator(address owner, address operator)\n', '        public virtual\n', '        view\n', '        returns (bool);\n', '\n', '    function getAccountPar(Account.Info memory account, uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Par memory);\n', '\n', '    function ownerSetMarginPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory marginPremium\n', '    ) public virtual;\n', '\n', '    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getMarketCurrentIndex(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Index memory);\n', '\n', '    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\n', '\n', '    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\n', '\n', '    function getAccountBalances(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n', '\n', '    function renounceOwnership() public virtual;\n', '\n', '    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\n', '\n', '    function setOperators(OperatorArg[] memory args) public virtual;\n', '\n', '    function getMarketPrice(uint256 marketId) public virtual view returns (address);\n', '\n', '    function owner() public virtual view returns (address);\n', '\n', '    function isOwner() public virtual view returns (bool);\n', '\n', '    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n', '        public virtual\n', '        returns (uint256);\n', '\n', '    function ownerAddMarket(\n', '        address token,\n', '        address priceOracle,\n', '        address interestSetter,\n', '        Decimal.D256 memory marginPremium,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public virtual;\n', '\n', '    function operate(\n', '        Account.Info[] memory accounts,\n', '        Actions.ActionArgs[] memory actions\n', '    ) public virtual;\n', '\n', '    function getMarketWithInfo(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (\n', '            Storage.Market memory,\n', '            Interest.Index memory,\n', '            Monetary.Price memory,\n', '            Interest.Rate memory\n', '        );\n', '\n', '    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\n', '\n', '    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getAccountWei(Account.Info memory account, uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketTotalPar(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.TotalPar memory);\n', '\n', '    function getLiquidationSpreadForPair(\n', '        uint256 heldMarketId,\n', '        uint256 owedMarketId\n', '    ) public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getNumExcessTokens(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketCachedIndex(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Index memory);\n', '\n', '    function getAccountStatus(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (uint8);\n', '\n', '    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\n', '\n', '    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\n', '\n', '    function getMarket(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Storage.Market memory);\n', '\n', '    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\n', '\n', '    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\n', '\n', '    function transferOwnership(address newOwner) public virtual;\n', '\n', '    function getAdjustedAccountValues(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketMarginPremium(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getMarketInterestRate(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Rate memory);\n', '}    \n', '\n', '\n', '\n', '\n', 'contract DydxFlashLoanBase {\n', '    using SafeMath for uint256;\n', '\n', '    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n', '\n', '    function _getMarketIdFromTokenAddress(address token)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    function _getRepaymentAmountInternal(uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Needs to be overcollateralize\n', '        // Needs to provide +2 wei to be safe\n', '        return amount.add(2);\n', '    }\n', '\n', '    function _getAccountInfo() internal view returns (Account.Info memory) {\n', '        return Account.Info({owner: address(this), number: 1});\n', '    }\n', '\n', '    function _getWithdrawAction(uint marketId, uint256 amount, address contractAddr)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Withdraw,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: false,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: amount\n', '                }),\n', '                primaryMarketId: marketId,\n', '                secondaryMarketId: 0,\n', '                otherAddress: contractAddr,\n', '                otherAccountId: 0,\n', '                data: ""\n', '            });\n', '    }\n', '\n', '    function _getCallAction(bytes memory data, address contractAddr)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Call,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: false,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: 0\n', '                }),\n', '                primaryMarketId: 0,\n', '                secondaryMarketId: 0,\n', '                otherAddress: contractAddr,\n', '                otherAccountId: 0,\n', '                data: data\n', '            });\n', '    }\n', '\n', '    function _getDepositAction(uint marketId, uint256 amount, address contractAddr)\n', '        internal\n', '        view\n', '        returns (Actions.ActionArgs memory)\n', '    {\n', '        return\n', '            Actions.ActionArgs({\n', '                actionType: Actions.ActionType.Deposit,\n', '                accountId: 0,\n', '                amount: Types.AssetAmount({\n', '                    sign: true,\n', '                    denomination: Types.AssetDenomination.Wei,\n', '                    ref: Types.AssetReference.Delta,\n', '                    value: amount\n', '                }),\n', '                primaryMarketId: marketId,\n', '                secondaryMarketId: 0,\n', '                otherAddress: contractAddr,\n', '                otherAccountId: 0,\n', '                data: ""\n', '            });\n', '    }\n', '}   contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}   abstract contract DSProxyInterface {\n', '\n', "    /// Truffle wont compile if this isn't commented\n", '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public virtual\n', '    //     payable\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public virtual payable returns (bool);\n', '\n', '    function owner() public virtual returns (address);\n', '}   abstract contract ProxyRegistryInterface {\n', '    function proxies(address _owner) public virtual view returns (address);\n', '    function build(address) public virtual returns (address);\n', '}   abstract contract TokenInterface {\n', '\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(address, address, uint256) public virtual returns (bool);\n', '\n', '    function deposit() public virtual payable;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Import Aave position from account to wallet\n', '/// @dev Contract needs to have enough wei in WETH for all transactions (2 WETH wei per transaction)\n', 'contract AaveImportTakerV2 is DydxFlashLoanBase, ProxyPermission {\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    address payable public constant AAVE_IMPORT = 0x67F866F2386B0C5aa55d2a3685A51f374a403175;\n', '    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\n', '    address public constant PROXY_REGISTRY_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n', '\n', '    /// @notice Starts the process to move users position 1 collateral and 1 borrow\n', '    /// @dev User must send 2 wei with this transaction\n', '    /// @dev User must approve DSProxy to pull _aCollateralToken\n', '    /// @param _market Market in which we want to import\n', '    /// @param _collateralToken Collateral token we are moving to DSProxy\n', '    /// @param _borrowToken Borrow token we are moving to DSProxy\n', '    /// @param _ethAmount ETH amount that needs to be pulled from dydx\n', '    function importLoan(address _market, address _collateralToken, address _borrowToken, uint _ethAmount) public {\n', '        ISoloMargin solo = ISoloMargin(SOLO_MARGIN_ADDRESS);\n', '\n', '        // Get marketId from token address\n', '        uint256 marketId = _getMarketIdFromTokenAddress(WETH_ADDR);\n', '\n', '        // Calculate repay amount (_amount + (2 wei))\n', '        // Approve transfer from\n', '        uint256 repayAmount = _getRepaymentAmountInternal(_ethAmount);\n', '        ERC20(WETH_ADDR).approve(SOLO_MARGIN_ADDRESS, repayAmount);\n', '\n', '        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n', '\n', '        operations[0] = _getWithdrawAction(marketId, _ethAmount, AAVE_IMPORT);\n', '        operations[1] = _getCallAction(\n', '            abi.encode(_market, _collateralToken, _borrowToken, _ethAmount, address(this)),\n', '            AAVE_IMPORT\n', '        );\n', '        operations[2] = _getDepositAction(marketId, repayAmount, address(this));\n', '\n', '        Account.Info[] memory accountInfos = new Account.Info[](1);\n', '        accountInfos[0] = _getAccountInfo();\n', '\n', '        givePermission(AAVE_IMPORT);\n', '        solo.operate(accountInfos, operations);\n', '        removePermission(AAVE_IMPORT);\n', '\n', '        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, "AaveImport", abi.encode(_collateralToken, _borrowToken));\n', '    }\n', '}']