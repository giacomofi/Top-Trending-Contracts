['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '\n', '    function to128(uint256 a) internal pure returns (uint128 c) {\n', '        require(a <= uint128(-1), "BoringMath: uint128 Overflow");\n', '        c = uint128(a);\n', '    }\n', '\n', '    function to64(uint256 a) internal pure returns (uint64 c) {\n', '        require(a <= uint64(-1), "BoringMath: uint64 Overflow");\n', '        c = uint64(a);\n', '    }\n', '\n', '    function to32(uint256 a) internal pure returns (uint32 c) {\n', '        require(a <= uint32(-1), "BoringMath: uint32 Overflow");\n', '        c = uint32(a);\n', '    }\n', '}\n', '\n', 'interface IOracle {\n', '    /// @notice Get the latest exchange rate.\n', '    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n', '    /// For example:\n', '    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n', '    /// @return success if no valid (recent) rate is available, return false else true.\n', '    /// @return rate The rate of the requested asset / pair / pool.\n', '    function get(bytes calldata data) external returns (bool success, uint256 rate);\n', '\n', '    /// @notice Check the last exchange rate without any state changes.\n', '    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n', '    /// For example:\n', '    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n', '    /// @return success if no valid (recent) rate is available, return false else true.\n', '    /// @return rate The rate of the requested asset / pair / pool.\n', '    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\n', '\n', '    /// @notice Returns a human readable (short) name about this oracle.\n', '    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n', '    /// For example:\n', '    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n', '    /// @return (string) A human readable symbol name about this oracle.\n', '    function symbol(bytes calldata data) external view returns (string memory);\n', '\n', '    /// @notice Returns a human readable name about this oracle.\n', '    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\n', '    /// For example:\n', '    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\n', '    /// @return (string) A human readable name about this oracle.\n', '    function name(bytes calldata data) external view returns (string memory);\n', '}\n', '\n', '\n', '// Chainlink Aggregator\n', 'interface IAggregator {\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80,\n', '            int256 answer,\n', '            uint256,\n', '            uint256,\n', '            uint80\n', '        );\n', '}\n', '\n', 'contract ChainlinkOracle is IOracle {\n', '    using BoringMath for uint256; // Keep everything in uint256\n', '\n', '    // Calculates the lastest exchange rate\n', '    // Uses both divide and multiply only for tokens not supported directly by Chainlink, for example MKR/USD\n', '    function _get(\n', '        address multiply,\n', '        address divide,\n', '        uint256 decimals\n', '    ) public view returns (uint256) {\n', '        uint256 price = uint256(1e18);\n', '        if (multiply != address(0)) {\n', '            // We only care about the second value - the price\n', '            (, int256 priceC, , , ) = IAggregator(multiply).latestRoundData();\n', '            price = price.mul(uint256(priceC));\n', '        } else {\n', '            price = price.mul(1e18);\n', '        }\n', '\n', '        if (divide != address(0)) {\n', '            // We only care about the second value - the price\n', '            (, int256 priceC, , , ) = IAggregator(divide).latestRoundData();\n', '            price = price / uint256(priceC);\n', '        }\n', '\n', '        return price / decimals;\n', '    }\n', '\n', '    function getDataParameter(\n', '        address multiply,\n', '        address divide,\n', '        uint256 decimals\n', '    ) public pure returns (bytes memory) {\n', '        return abi.encode(multiply, divide, decimals);\n', '    }\n', '\n', '    // Get the latest exchange rate\n', '    /// @inheritdoc IOracle\n', '    function get(bytes calldata data) public override returns (bool, uint256) {\n', '        (address multiply, address divide, uint256 decimals) = abi.decode(data, (address, address, uint256));\n', '        return (true, _get(multiply, divide, decimals));\n', '    }\n', '\n', '    // Check the last exchange rate without any state changes\n', '    /// @inheritdoc IOracle\n', '    function peek(bytes calldata data) public view override returns (bool, uint256) {\n', '        (address multiply, address divide, uint256 decimals) = abi.decode(data, (address, address, uint256));\n', '        return (true, _get(multiply, divide, decimals));\n', '    }\n', '\n', '    /// @inheritdoc IOracle\n', '    function name(bytes calldata) public view override returns (string memory) {\n', '        return "Chainlink";\n', '    }\n', '\n', '    /// @inheritdoc IOracle\n', '    function symbol(bytes calldata) public view override returns (string memory) {\n', '        return "LINK";\n', '    }\n', '}']