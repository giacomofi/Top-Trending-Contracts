['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '/**************************************************************************\n', ' *            ____        _                              \n', ' *           / ___|      | |     __ _  _   _   ___  _ __ \n', " *          | |    _____ | |    / _` || | | | / _ \\| '__|\n", ' *          | |___|_____|| |___| (_| || |_| ||  __/| |   \n', ' *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \n', ' *                                     |___/             \n', ' * \n', ' **************************************************************************\n', ' *\n', ' * The MIT License (MIT)\n', ' * SPDX-License-Identifier: MIT\n', ' *\n', ' * Copyright (c) 2016-2021 Cyril Lapinte\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining\n', ' * a copy of this software and associated documentation files (the\n', ' * "Software"), to deal in the Software without restriction, including\n', ' * without limitation the rights to use, copy, modify, merge, publish,\n', ' * distribute, sublicense, and/or sell copies of the Software, and to\n', ' * permit persons to whom the Software is furnished to do so, subject to\n', ' * the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included\n', ' * in all copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' *\n', ' **************************************************************************\n', ' *\n', ' * Flatten Contract: TimeLock\n', ' *\n', ' *\n', ' **************************************************************************/\n', '\n', '// File: @c-layer/common/contracts/operable/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * @dev functions, this simplifies the implementation of "user permissions".\n', ' *\n', ' *\n', ' * Error messages\n', ' *   OW01: Message sender is not the owner\n', ' *   OW02: New owner must be valid\n', '*/\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "OW01");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0), "OW02");\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '// File: @c-layer/governance/contracts/lock/TimeLock.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title TimeLock\n', ' * @dev Time locked contract\n', ' *\n', ' * Error messages\n', ' *   TL01: Contract is locked\n', ' *   TL02: Target must be defined\n', ' *   TL03: Cannot be locked in the past\n', ' *   TL04: Execution must be successfull\n', ' */\n', 'contract TimeLock is Ownable {\n', '\n', '  address payable public target;\n', '  uint64 public lockedUntil;\n', '\n', '  modifier whenUnlocked() {\n', '    require(lockedUntil < currentTime(), "TL01");\n', '    _;\n', '  }\n', '\n', '  constructor(address payable _target, uint64 _lockedUntil) public {\n', '    require(_target != address(0), "TL02");\n', '    require(_lockedUntil > currentTime(), "TL03");\n', '    lockedUntil = _lockedUntil;\n', '    target = _target;\n', '  }\n', '\n', '  receive() external payable {\n', '    require(callInternal(), "TL04");\n', '  }\n', '\n', '  fallback() external payable {\n', '    require(callInternal(), "TL04");\n', '  }\n', '\n', '  function callInternal() internal onlyOwner whenUnlocked returns (bool) {\n', '    (bool success, ) =\n', '    // solhint-disable-next-line avoid-call-value, avoid-low-level-calls\n', '    target.call{value: msg.value}(msg.data);\n', '    return success;\n', '  }\n', '\n', '  /**\n', '   * @dev current time\n', '   */\n', '  function currentTime() internal view returns (uint256) {\n', '    // solhint-disable-next-line not-rely-on-time\n', '    return now;\n', '  }\n', '}']