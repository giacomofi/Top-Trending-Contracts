['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-05\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-18\n', ' */\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\n', '\n', '// pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(\n', '        IERC20Upgradeable token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20Upgradeable token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20Upgradeable token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20Upgradeable token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20Upgradeable token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '// pragma solidity >=0.4.24 <0.7.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '// import "deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {}\n', '\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public virtual override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '// Dependency file: /Users/present/code/super-sett/interfaces/badger/IController.sol\n', '\n', '// pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '\n', '    function strategies(address) external view returns (address);\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function earn(address, uint256) external;\n', '\n', '    function want(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function vaults(address) external view returns (address);\n', '}\n', '\n', '// Dependency file: /Users/present/code/super-sett/interfaces/digg/IDigg.sol\n', '\n', '// pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IDigg {\n', '    // Used for authentication\n', '    function monetaryPolicy() external view returns (address);\n', '\n', '    function rebaseStartTime() external view returns (uint256);\n', '\n', '    /**\n', '     * @param monetaryPolicy_ The address of the monetary policy contract to use for authentication.\n', '     */\n', '    function setMonetaryPolicy(address monetaryPolicy_) external;\n', '\n', '    /**\n', '     * @dev Notifies Fragments contract about a new rebase cycle.\n', '     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\n', '     * @return The total number of fragments after the supply adjustment.\n', '     */\n', '    function rebase(uint256 epoch, int256 supplyDelta) external returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of fragments.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of underlying shares.\n', '     */\n', '    function totalShares() external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address.\n', '     */\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The underlying shares of the specified address.\n', '     */\n', '    function sharesOf(address who) external view returns (uint256);\n', '\n', '    /**\n', '     * @param fragments Fragment value to convert.\n', '     * @return The underlying share value of the specified fragment amount.\n', '     */\n', '    function fragmentsToShares(uint256 fragments) external view returns (uint256);\n', '\n', '    /**\n', '     * @param shares Share value to convert.\n', '     * @return The current fragment value of the specified underlying share amount.\n', '     */\n', '    function sharesToFragments(uint256 shares) external view returns (uint256);\n', '\n', '    function scaledSharesToShares(uint256 fragments) external view returns (uint256);\n', '\n', '    function sharesToScaledShares(uint256 shares) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '     * @param owner_ The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner_, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address you want to send tokens from.\n', '     * @param to The address you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '// Dependency file: /Users/present/code/super-sett/interfaces/digg/IDiggStrategy.sol\n', '\n', '// pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IDiggStrategy {\n', '    function want() external view returns (address);\n', '\n', '    function deposit() external;\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address) external returns (uint256 balance);\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdraw(uint256) external;\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdrawAll() external returns (uint256);\n', '\n', '    function balanceOf() external view returns (uint256);\n', '\n', '    function sharesOf() external view returns (uint256);\n', '\n', '    function sharesOfPool() external view returns (uint256);\n', '\n', '    function sharesOfWant() external view returns (uint256);\n', '\n', '    function getName() external pure returns (string memory);\n', '\n', '    function setStrategist(address _strategist) external;\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external;\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\n', '\n', '    function setGovernance(address _governance) external;\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// Dependency file: deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// Dependency file: interfaces/erc20/IERC20Detailed.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Detailed {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Dependency file: contracts/badger-sett/SettAccessControl.sol\n', '\n', '// pragma solidity ^0.6.11;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/*\n', '    Common base for permissioned roles throughout Sett ecosystem\n', '*/\n', 'contract SettAccessControl is Initializable {\n', '    address public governance;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    // ===== MODIFIERS =====\n', '    function _onlyGovernance() internal view {\n', '        require(msg.sender == governance, "onlyGovernance");\n', '    }\n', '\n', '    function _onlyGovernanceOrStrategist() internal view {\n', '        require(msg.sender == strategist || msg.sender == governance, "onlyGovernanceOrStrategist");\n', '    }\n', '\n', '    function _onlyAuthorizedActors() internal view {\n', '        require(msg.sender == keeper || msg.sender == governance, "onlyAuthorizedActors");\n', '    }\n', '\n', '    // ===== PERMISSIONED ACTIONS =====\n', '\n', '    /// @notice Change strategist address\n', '    /// @notice Can only be changed by governance itself\n', '    function setStrategist(address _strategist) external {\n', '        _onlyGovernance();\n', '        strategist = _strategist;\n', '    }\n', '\n', '    /// @notice Change keeper address\n', '    /// @notice Can only be changed by governance itself\n', '    function setKeeper(address _keeper) external {\n', '        _onlyGovernance();\n', '        keeper = _keeper;\n', '    }\n', '\n', '    /// @notice Change governance address\n', '    /// @notice Can only be changed by governance itself\n', '    function setGovernance(address _governance) public {\n', '        _onlyGovernance();\n', '        governance = _governance;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// Dependency file: contracts/badger-sett/SettAccessControlDefended.sol\n', '\n', '// pragma solidity ^0.6.11;\n', '\n', '// import "contracts/badger-sett/SettAccessControl.sol";\n', '\n', '/*\n', '    Add ability to prevent unwanted contract access to Sett permissions\n', '*/\n', 'contract SettAccessControlDefended is SettAccessControl {\n', '    mapping(address => bool) public approved;\n', '\n', '    function approveContractAccess(address account) external {\n', '        _onlyGovernance();\n', '        approved[account] = true;\n', '    }\n', '\n', '    function revokeContractAccess(address account) external {\n', '        _onlyGovernance();\n', '        approved[account] = false;\n', '    }\n', '\n', '    function _defend() internal view returns (bool) {\n', '        require(approved[msg.sender] || msg.sender == tx.origin, "Access denied for caller");\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// Dependency file: contracts/badger-sett/Sett.sol\n', '\n', '// pragma solidity ^0.6.11;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";\n', '\n', '// import "interfaces/badger/IController.sol";\n', '// import "interfaces/erc20/IERC20Detailed.sol";\n', '// import "contracts/badger-sett/SettAccessControlDefended.sol";\n', '\n', '/* \n', '    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol\n', '    \n', '    Changelog:\n', '\n', '    V1.1\n', '    * Strategist no longer has special function calling permissions\n', '    * Version function added to contract\n', '    * All write functions, with the exception of transfer, are pausable\n', '    * Keeper or governance can pause\n', '    * Only governance can unpause\n', '\n', '    V1.2\n', '    * Transfer functions are now pausable along with all other non-permissioned write functions\n', '    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well\n', '*/\n', '\n', 'contract Sett is ERC20Upgradeable, SettAccessControlDefended, PausableUpgradeable {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    IERC20Upgradeable public token;\n', '\n', '    uint256 public min;\n', '    uint256 public constant max = 10000;\n', '\n', '    address public controller;\n', '\n', '    mapping(address => uint256) public blockLock;\n', '\n', '    string internal constant _defaultNamePrefix = "Badger Sett ";\n', '    string internal constant _symbolSymbolPrefix = "b";\n', '\n', '    address public guardian;\n', '\n', '    event FullPricePerShareUpdated(uint256 value, uint256 indexed timestamp, uint256 indexed blockNumber);\n', '\n', '    function initialize(\n', '        address _token,\n', '        address _controller,\n', '        address _governance,\n', '        address _keeper,\n', '        address _guardian,\n', '        bool _overrideTokenName,\n', '        string memory _namePrefix,\n', '        string memory _symbolPrefix\n', '    ) public initializer whenNotPaused {\n', '        IERC20Detailed namedToken = IERC20Detailed(_token);\n', '        string memory tokenName = namedToken.name();\n', '        string memory tokenSymbol = namedToken.symbol();\n', '\n', '        string memory name;\n', '        string memory symbol;\n', '\n', '        if (_overrideTokenName) {\n', '            name = string(abi.encodePacked(_namePrefix, tokenName));\n', '            symbol = string(abi.encodePacked(_symbolPrefix, tokenSymbol));\n', '        } else {\n', '            name = string(abi.encodePacked(_defaultNamePrefix, tokenName));\n', '            symbol = string(abi.encodePacked(_symbolSymbolPrefix, tokenSymbol));\n', '        }\n', '\n', '        __ERC20_init(name, symbol);\n', '\n', '        token = IERC20Upgradeable(_token);\n', '        governance = _governance;\n', '        strategist = address(0);\n', '        keeper = _keeper;\n', '        controller = _controller;\n', '        guardian = _guardian;\n', '\n', '        min = 9500;\n', '\n', '        emit FullPricePerShareUpdated(getPricePerFullShare(), now, block.number);\n', '\n', '        // Paused on launch\n', '        _pause();\n', '    }\n', '\n', '    /// ===== Modifiers =====\n', '\n', '    function _onlyController() internal view {\n', '        require(msg.sender == controller, "onlyController");\n', '    }\n', '\n', '    function _onlyAuthorizedPausers() internal view {\n', '        require(msg.sender == guardian || msg.sender == governance, "onlyPausers");\n', '    }\n', '\n', '    function _blockLocked() internal view {\n', '        require(blockLock[msg.sender] < block.number, "blockLocked");\n', '    }\n', '\n', '    /// ===== View Functions =====\n', '\n', '    function version() public pure returns (string memory) {\n', '        return "1.2";\n', '    }\n', '\n', '    function getPricePerFullShare() public virtual view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return 1e18;\n', '        }\n', '        return balance().mul(1e18).div(totalSupply());\n', '    }\n', '\n', '    /// @notice Return the total balance of the underlying token within the system\n', '    /// @notice Sums the balance in the Sett, the Controller, and the Strategy\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this)).add(IController(controller).balanceOf(address(token)));\n', '    }\n', '\n', "    /// @notice Defines how much of the Setts' underlying can be borrowed by the Strategy for use\n", '    /// @notice Custom logic in here for how much the vault allows to be borrowed\n', '    /// @notice Sets minimum required on-hand to keep small withdrawals cheap\n', '    function available() public virtual view returns (uint256) {\n', '        return token.balanceOf(address(this)).mul(min).div(max);\n', '    }\n', '\n', '    /// ===== Public Actions =====\n', '\n', '    /// @notice Deposit assets into the Sett, and return corresponding shares to the user\n', '    /// @notice Only callable by EOA accounts that pass the _defend() check\n', '    function deposit(uint256 _amount) public whenNotPaused {\n', '        _defend();\n', '        _blockLocked();\n', '\n', '        _lockForBlock(msg.sender);\n', '        _deposit(_amount);\n', '    }\n', '\n', '    /// @notice Convenience function: Deposit entire balance of asset into the Sett, and return corresponding shares to the user\n', '    /// @notice Only callable by EOA accounts that pass the _defend() check\n', '    function depositAll() external whenNotPaused {\n', '        _defend();\n', '        _blockLocked();\n', '\n', '        _lockForBlock(msg.sender);\n', '        _deposit(token.balanceOf(msg.sender));\n', '    }\n', '\n', '    /// @notice No rebalance implementation for lower fees and faster swaps\n', '    function withdraw(uint256 _shares) public whenNotPaused {\n', '        _defend();\n', '        _blockLocked();\n', '\n', '        _lockForBlock(msg.sender);\n', '        _withdraw(_shares);\n', '    }\n', '\n', '    /// @notice Convenience function: Withdraw all shares of the sender\n', '    function withdrawAll() external whenNotPaused {\n', '        _defend();\n', '        _blockLocked();\n', '\n', '        _lockForBlock(msg.sender);\n', '        _withdraw(balanceOf(msg.sender));\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Governance =====\n', '\n', '    /// @notice Set minimum threshold of underlying that must be deposited in strategy\n', '    /// @notice Can only be changed by governance\n', '    function setMin(uint256 _min) external whenNotPaused {\n', '        _onlyGovernance();\n', '        min = _min;\n', '    }\n', '\n', '    /// @notice Change controller address\n', '    /// @notice Can only be changed by governance\n', '    function setController(address _controller) public whenNotPaused {\n', '        _onlyGovernance();\n', '        controller = _controller;\n', '    }\n', '\n', '    /// @notice Change guardian address\n', '    /// @notice Can only be changed by governance\n', '    function setGuardian(address _guardian) external whenNotPaused {\n', '        _onlyGovernance();\n', '        guardian = _guardian;\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Controller =====\n', '\n', "    /// @notice Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n", '    /// @notice Only controller can trigger harvests\n', '    function harvest(address reserve, uint256 amount) external whenNotPaused {\n', '        _onlyController();\n', '        require(reserve != address(token), "token");\n', '        IERC20Upgradeable(reserve).safeTransfer(controller, amount);\n', '    }\n', '\n', '    /// ===== Permissioned Functions: Trusted Actors =====\n', '\n', '    /// @notice Transfer the underlying available to be claimed to the controller\n', '    /// @notice The controller will deposit into the Strategy for yield-generating activities\n', '    /// @notice Permissionless operation\n', '    function earn() public whenNotPaused {\n', '        _onlyAuthorizedActors();\n', '\n', '        uint256 _bal = available();\n', '        token.safeTransfer(controller, _bal);\n', '        IController(controller).earn(address(token), _bal);\n', '    }\n', '\n', '    /// @dev Emit event tracking current full price per share\n', '    /// @dev Provides a pure on-chain way of approximating APY\n', '    function trackFullPricePerShare() external whenNotPaused {\n', '        _onlyAuthorizedActors();\n', '        emit FullPricePerShareUpdated(getPricePerFullShare(), now, block.number);\n', '    }\n', '\n', '    function pause() external {\n', '        _onlyAuthorizedPausers();\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external {\n', '        _onlyGovernance();\n', '        _unpause();\n', '    }\n', '\n', '    /// ===== Internal Implementations =====\n', '\n', '    /// @dev Calculate the number of shares to issue for a given deposit\n', '    /// @dev This is based on the realized value of underlying assets between Sett & associated Strategy\n', '    function _deposit(uint256 _amount) internal virtual {\n', '        uint256 _pool = balance();\n', '        uint256 _before = token.balanceOf(address(this));\n', '        token.safeTransferFrom(msg.sender, address(this), _amount);\n', '        uint256 _after = token.balanceOf(address(this));\n', '        _amount = _after.sub(_before); // Additional check for deflationary tokens\n', '        uint256 shares = 0;\n', '        if (totalSupply() == 0) {\n', '            shares = _amount;\n', '        } else {\n', '            shares = (_amount.mul(totalSupply())).div(_pool);\n', '        }\n', '        _mint(msg.sender, shares);\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function _withdraw(uint256 _shares) internal virtual {\n', '        uint256 r = (balance().mul(_shares)).div(totalSupply());\n', '        _burn(msg.sender, _shares);\n', '\n', '        // Check balance\n', '        uint256 b = token.balanceOf(address(this));\n', '        if (b < r) {\n', '            uint256 _toWithdraw = r.sub(b);\n', '            IController(controller).withdraw(address(token), _toWithdraw);\n', '            uint256 _after = token.balanceOf(address(this));\n', '            uint256 _diff = _after.sub(b);\n', '            if (_diff < _toWithdraw) {\n', '                r = b.add(_diff);\n', '            }\n', '        }\n', '\n', '        token.safeTransfer(msg.sender, r);\n', '    }\n', '\n', '    function _lockForBlock(address account) internal {\n', '        blockLock[account] = block.number;\n', '    }\n', '\n', '    /// ===== ERC20 Overrides =====\n', '\n', '    /// @dev Add blockLock to transfers, users cannot transfer tokens in the same block as a deposit or withdrawal.\n', '    function transfer(address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\n', '        _blockLocked();\n', '        return super.transfer(recipient, amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override whenNotPaused returns (bool) {\n', '        _blockLocked();\n', '        return super.transferFrom(sender, recipient, amount);\n', '    }\n', '}\n', '\n', '// Root file: contracts/Stabilize_DiggSett.sol\n', '\n', 'pragma solidity =0.6.11;\n', '\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol";\n', '// import "deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";\n', '\n', '// import "/Users/present/code/super-sett/interfaces/badger/IController.sol";\n', '// import "/Users/present/code/super-sett/interfaces/digg/IDigg.sol";\n', '// import "/Users/present/code/super-sett/interfaces/digg/IDiggStrategy.sol";\n', '// import "contracts/badger-sett/Sett.sol";\n', '\n', '/* \n', '    bDIGG is denominated in scaledShares.\n', '    At the start 1 bDIGG = 1 DIGG (at peg)\n', '\n', '    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol\n', '    \n', '    Changelog:\n', '\n', '    V1.1\n', '    * Strategist no longer has special function calling permissions\n', '    * Version function added to contract\n', '    * All write functions, with the exception of transfer, are pausable\n', '    * Keeper or governance can pause\n', '    * Only governance can unpause\n', '\n', '    V1.2\n', '    * Transfer functions are now pausable along with all other non-permissioned write functions\n', '    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well\n', '*/\n', '\n', '/*\n', '    Stabilize Modification\n', '    Strategy now holds both wbtc and digg. Balance of wbtc is expressed as digg equivalent via strategy\n', '    Switched from shares to fragments for digg for easier readability\n', '*/\n', '\n', 'interface StabilizeDiggStrategy {\n', '    function balanceOf() external view returns (uint256); // Returns DIGG and DIGG equivalent of strategy, not normalized\n', '\n', '    function getTokenAddress(uint256) external view returns (address); // Get the token addresses involved in the strategy\n', '}\n', '\n', 'contract StabilizeDiggSett is Sett {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    function balanceOfDiggEquivalentInSettAndStrategy() public view returns (uint256) {\n', '        // This will take our strategy and calculate how much digg equivalent we have in wBTC value, normalized to 1e18\n', '        uint256 _diggAmount = 0; // This will be normalized to 1e18\n', '        ERC20Upgradeable diggToken = ERC20Upgradeable(address(token));\n', '        address strategy = IController(controller).strategies(address(token));\n', '        StabilizeDiggStrategy strat = StabilizeDiggStrategy(strategy);\n', '\n', '        _diggAmount = diggToken.balanceOf(address(this));\n', '        if (strategy != address(0)) {\n', '            _diggAmount = _diggAmount.add(strat.balanceOf()); // The strategy will automatically convert wbtc to digg equivalent\n', '        }\n', '        uint256 decimals = uint256(diggToken.decimals());\n', '        _diggAmount = _diggAmount.mul(1e18).div(10**decimals); // Normalize the Digg amount\n', '\n', '        return _diggAmount;\n', '    }\n', '\n', '    function getPricePerFullShare() public override view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return 1e18;\n', '        }\n', '        return balanceOfDiggEquivalentInSettAndStrategy().mul(1e18).div(totalSupply());\n', '    }\n', '\n', '    /// ===== Internal Implementations =====\n', '\n', '    /// @dev Calculate the number of bDIGG shares to issue for a given deposit\n', '    /// @dev This is based on the realized value of underlying assets between Sett & associated Strategy\n', '    function _deposit(uint256 _amount) internal override {\n', '        require(_amount > 0, "Nothing to deposit");\n', '        IDigg digg = IDigg(address(token));\n', '        uint256 _decimals = uint256(ERC20Upgradeable(address(token)).decimals());\n', '\n', '        uint256 _poolBefore = balanceOfDiggEquivalentInSettAndStrategy(); // Normalized digg amount and equivalent in system before transfer\n', '        uint256 _before = digg.balanceOf(address(this));\n', '\n', '        require(digg.transferFrom(msg.sender, address(this), _amount));\n', '\n', '        uint256 _after = digg.balanceOf(address(this));\n', '        uint256 _diggTransferred = _after.sub(_before); // Additional check for deflationary tokens\n', '\n', '        uint256 normalizedAmount = _diggTransferred.mul(1e18).div(10**_decimals); // Convert to bDigg/normalized units\n', '        uint256 bDiggToMint = normalizedAmount;\n', '        if (totalSupply() > 0) {\n', '            // There is already a balance here, calculate our share\n', '            bDiggToMint = normalizedAmount.mul(totalSupply()).div(_poolBefore); // Our share of the total\n', '        }\n', '\n', '        _mint(msg.sender, bDiggToMint);\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function _withdraw(uint256 _bDiggToBurn) internal override {\n', '        require(_bDiggToBurn > 0, "Nothing to withdraw");\n', '        IDigg digg = IDigg(address(token));\n', '        uint256 _decimals = uint256(ERC20Upgradeable(address(token)).decimals());\n', '\n', '        uint256 _diggToRedeem = balanceOfDiggEquivalentInSettAndStrategy().mul(_bDiggToBurn).div(totalSupply());\n', '        _diggToRedeem = _diggToRedeem.mul(10**_decimals).div(1e18); // Convert from normalized units to digg units\n', '\n', '        _burn(msg.sender, _bDiggToBurn);\n', '\n', '        // Check balance\n', '        uint256 _diggInSett = digg.balanceOf(address(this));\n', '\n', "        // If we don't have sufficient idle want in Sett, withdraw from Strategy\n", '        if (_diggInSett < _diggToRedeem) {\n', '            uint256 _toWithdraw = _diggToRedeem.sub(_diggInSett);\n', '\n', '            // Note: This amount is a DIGG value in the withdraw function\n', '            IController(controller).withdraw(address(token), _toWithdraw);\n', '\n', '            uint256 _diggAfterWithdraw = digg.balanceOf(address(this));\n', '            uint256 _diff = _diggAfterWithdraw.sub(_diggInSett);\n', '\n', '            // If we are not able to get the full amount requested from the strategy due to losses, redeem what we can\n', '            // This situation should not happen\n', '            if (_diff < _toWithdraw) {\n', '                _diggToRedeem = _diggInSett.add(_diff);\n', '            }\n', '        }\n', '\n', '        // Transfer the corresponding number of Digg to recipient\n', '        digg.transfer(msg.sender, _diggToRedeem);\n', '    }\n', '}']