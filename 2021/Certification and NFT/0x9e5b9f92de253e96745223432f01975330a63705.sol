['pragma solidity ^0.7.6;\n', '\n', 'import "./ProxyWithRegistry.sol";\n', 'import "./RegistryInterface.sol";\n', '\n', '/**\n', " * @title DeFiPie's PErc20Delegator Contract\n", ' * @notice PTokens which wrap an EIP-20 underlying and delegate to an implementation\n', ' * @author DeFiPie\n', ' */\n', 'contract PErc20Delegator is ProxyWithRegistry {\n', '\n', '    /**\n', '     * @notice Construct a new money market\n', '     * @param underlying_ The address of the underlying asset\n', '     * @param controller_ The address of the Controller\n', '     * @param interestRateModel_ The address of the interest rate model\n', '     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n', '     * @param initialReserveFactorMantissa_ The initial reserve factor, scaled by 1e18\n', '     * @param name_ ERC-20 name of this token\n', '     * @param symbol_ ERC-20 symbol of this token\n', '     * @param decimals_ ERC-20 decimal precision of this token\n', '     * @param registry_ The address of the registry contract\n', '     */\n', '    constructor(\n', '        address underlying_,\n', '        address controller_,\n', '        address interestRateModel_,\n', '        uint initialExchangeRateMantissa_,\n', '        uint initialReserveFactorMantissa_,\n', '        string memory name_,\n', '        string memory symbol_,\n', '        uint8 decimals_,\n', '        address registry_\n', '    ) {\n', '        // Set registry\n', '        _setRegistry(registry_);\n', '\n', '        // First delegate gets to initialize the delegator (i.e. storage contract)\n', '        delegateTo(_pTokenImplementation(), abi.encodeWithSignature("initialize(address,address,address,address,uint256,uint256,string,string,uint8)",\n', '                                                            underlying_,\n', '                                                            registry_,\n', '                                                            controller_,\n', '                                                            interestRateModel_,\n', '                                                            initialExchangeRateMantissa_,\n', '                                                            initialReserveFactorMantissa_,\n', '                                                            name_,\n', '                                                            symbol_,\n', '                                                            decimals_));\n', '    }\n', '\n', '    /**\n', '     * @notice Internal method to delegate execution to another contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param callee The contract to delegatecall\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    function delegateAndReturn() internal returns (bytes memory) {\n', '        (bool success, ) = _pTokenImplementation().delegatecall(msg.data);\n', '\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize()) }\n', '            default { return(free_mem_ptr, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     */\n', '    fallback() external {\n', '        // delegate all other functions to current implementation\n', '        delegateAndReturn();\n', '    }\n', '}']