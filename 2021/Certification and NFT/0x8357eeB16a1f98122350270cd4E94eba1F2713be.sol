['pragma solidity 0.6.2;\n', '\n', "import 'StorageStructure.sol';\n", '\n', '/**\n', ' * https://eips.ethereum.org/EIPS/eip-897\n', ' * Credits: OpenZeppelin Labs\n', ' */\n', 'contract Proxy is StorageStructure {\n', '  string public version;\n', '  address public implementation;\n', '  uint256 public constant proxyType = 2;\n', '\n', '  /**\n', '   * @dev This event will be emitted every time the implementation gets upgraded\n', '   * @param version representing the version name of the upgraded implementation\n', '   * @param implementation representing the address of the upgraded implementation\n', '   */\n', '  event Upgraded(string version, address indexed implementation);\n', '\n', '  /**\n', '   * @dev constructor that sets the manager address\n', '   */\n', '  constructor() public {\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the implementation address\n', '   * @param _newImplementation address of the new implementation\n', '   */\n', '  function upgradeTo(\n', '    string calldata _version,\n', '    address _newImplementation\n', '  ) external onlyManager {\n', '    require(implementation != _newImplementation);\n', '    _setImplementation(_version, _newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function allowing to perform a delegatecall\n', '   * to the given implementation. This function will return\n', '   * whatever the implementation call returns\n', '   */\n', '  fallback () external {\n', '    address _impl = implementation;\n', '    require(_impl != address(0));\n', '\n', '    assembly {\n', '      let ptr := mload(0x40)\n', '      calldatacopy(ptr, 0, calldatasize())\n', '      let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n', '      let size := returndatasize()\n', '      returndatacopy(ptr, 0, size)\n', '\n', '      switch result\n', '      case 0 { revert(ptr, size) }\n', '      default { return(ptr, size) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the current implementation\n', '   * @param _newImp address of the new implementation\n', '   */\n', '  function _setImplementation(string memory _version, address _newImp) internal {\n', '    version = _version;\n', '    implementation = _newImp;\n', '    emit Upgraded(version, implementation);\n', '  }\n', '}']