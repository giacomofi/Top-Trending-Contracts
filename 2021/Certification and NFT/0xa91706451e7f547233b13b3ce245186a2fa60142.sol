['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface ILpStaking {\n', '    function feeWithdraw(address to) external;\n', '    function setFeeRate(uint256 _feeRate) external;\n', '    function setEmergencyStop(bool _emergencyStop) external;\n', '    function getAccumulateFee() external view returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'interface IStakingRewardsWbtc {\n', '    function notifyRewardAmount(uint256 reward, uint256 duration) external;\n', '}\n', '\n', '\n', 'contract MarsLpStakingController {\n', '    bool internal initialized;\n', '    // 不需要owner，不需要operator的设置接口，私钥泄露了直接更新实现合约即可\n', '    address public operator;\n', '    address public wbtc;\n', '    address public weth;\n', '    address public marsStakingForWbtc;\n', '    address public wbtc_weth_pair;\n', '    address[] public lpStakings;\n', '    mapping(address => address) stakingRewardToken;\n', '\n', '    function initialize(address _operator) public {\n', '        require(!initialized, "already initialized");\n', '        initialized = true;\n', '        operator = _operator;\n', '        // mainnet\n', '        wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n', '        weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '        wbtc_weth_pair = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\n', '        marsStakingForWbtc = 0x51a710218eC2ba2Ac459ee28ec37c6dF7fe18E11;\n', '        // testnet\n', '//        wbtc = 0x5F2D686E3141Cd1E16b0FE1e80f5CF8e128351aB;\n', '//        weth = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n', '//        wbtc_weth_pair = 0x393244f2D96035c04aF658E0C7e70a3dd174e6B2;\n', '//        marsStakingForWbtc = 0x0bEC73826299C21fD4F6D10E485C02A670aa6bb7;\n', '    }\n', '\n', '    function setLpStakingFeeRate(address staking, uint256 _feeRate) external onlyOperator {\n', '        require(stakingRewardToken[staking] != address(0), "not added.");\n', '        ILpStaking(staking).setFeeRate(_feeRate);\n', '    }\n', '\n', '    function addStakingAndRewardToken(address staking, address rewardToken) external onlyOperator {\n', '        require(stakingRewardToken[staking] == address(0), "already added.");\n', '        lpStakings.push(staking);\n', '        stakingRewardToken[staking] = rewardToken;\n', '    }\n', '\n', '    // minimalWbtcPrice 为 btc / eth 价格. 当前价格下输入30即可\n', '    function distributeReward(uint256 minimalWbtcPrice) external onlyOperator {\n', '        uint256 totalWbtc = 0;\n', '        for (uint256 i=0; i<lpStakings.length; i++) {\n', '            address lpStaking = lpStakings[i];\n', '            address rewardToken = stakingRewardToken[lpStaking];\n', '            uint256 accumulateFee = ILpStaking(lpStaking).getAccumulateFee();\n', '            if (rewardToken == wbtc) {\n', '                ILpStaking(lpStaking).feeWithdraw(marsStakingForWbtc);\n', '                totalWbtc += accumulateFee;\n', '            } else {\n', '                ILpStaking(lpStaking).feeWithdraw(address(this));\n', '                IWETH(weth).deposit{value: accumulateFee}();\n', '                assert(IWETH(weth).transfer(wbtc_weth_pair, accumulateFee));\n', '                (uint256 wbtcReserve, uint256 wethReserve, ) = IUniswapV2Pair(wbtc_weth_pair).getReserves();\n', '                uint256 amountOut = getAmountOut(accumulateFee, wethReserve, wbtcReserve);\n', '                uint256 actualPrice = accumulateFee / 1e10 / amountOut;\n', '                require(actualPrice >= minimalWbtcPrice, "price move");\n', '                IUniswapV2Pair(wbtc_weth_pair).swap(amountOut, 0, marsStakingForWbtc, new bytes(0));\n', '                totalWbtc += amountOut;\n', '            }\n', '        }\n', '\n', '        if (totalWbtc > 0) {\n', '            IStakingRewardsWbtc(marsStakingForWbtc).notifyRewardAmount(totalWbtc, 864000);\n', '        }\n', '    }\n', '\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'MarsStakingController: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'MarsStakingController: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn * 997;\n', '        uint numerator = amountInWithFee * reserveOut;\n', '        uint denominator = reserveIn * 1000 + amountInWithFee;\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator, "!operator");\n', '        _;\n', '    }\n', '}']