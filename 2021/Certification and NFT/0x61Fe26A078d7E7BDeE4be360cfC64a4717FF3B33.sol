['// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.4;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'import "./interfaces/IContractsRegistry.sol";\n', 'import "./interfaces/IBMIStaking.sol";\n', '\n', 'import "./interfaces/tokens/ISTKBMIToken.sol";\n', '\n', 'contract BMIStaking is IBMIStaking, OwnableUpgradeable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tIERC20 public bmiToken;\n', '\tISTKBMIToken public override stkBMIToken;\n', '\tuint256 public lastUpdateBlock;\n', '\tuint256 public rewardPerBlock;\n', '\tuint256 public totalPool;\n', '\n', '\taddress public newBMIStakingAddress;\n', '\n', '\tevent StakingMigrated(address staker, uint256 amount);\n', '\n', '\tmodifier updateRewardPool() {\n', '\t\tif (totalPool == 0) {\n', '\t\t\tlastUpdateBlock = block.number;\n', '\t\t}\n', '\t\t\n', '\t\ttotalPool = totalPool.add(_calculateReward());\n', '\t\tlastUpdateBlock = block.number;\n', '\t\t_;\n', '\t}\t\n', '\n', '\tfunction __BMIStaking_init(uint256 _rewardPerBlock)\n', '\t\texternal\n', '\t\tinitializer\n', '\t{\n', '\t\t__Ownable_init();\n', '\n', '\t\tlastUpdateBlock = block.number;\n', '\t\trewardPerBlock = _rewardPerBlock;\n', '\t}\n', '\n', '\tfunction setDependencies(IContractsRegistry _contractsRegistry) external onlyOwner {\n', '\t\tbmiToken = IERC20(_contractsRegistry.getBMIContract());\n', '\t\tstkBMIToken = ISTKBMIToken(_contractsRegistry.getSTKBMIContract());\n', '\t}\n', '\n', '\tfunction setNewBMIStaking(address _newBMIStakingAddress) external onlyOwner {\n', '        newBMIStakingAddress = _newBMIStakingAddress;\n', '    }\n', '\n', '\tfunction migrate() updateRewardPool external {\n', '\t\trequire(newBMIStakingAddress != address(0), "Migrate: can\'t migrate to zero address");\n', '\t\t\n', '\t\tuint256 stakedBalance = stkBMIToken.balanceOf(_msgSender());\n', '\n', '        require(stakedBalance > 0, "Migrate: balance is zero");\n', '\n', '\t\tuint256 amountBMI = _convertToBMI(stakedBalance);\n', '\t\tstkBMIToken.burn(_msgSender(), stakedBalance);\n', '\n', '\t\ttotalPool = totalPool.sub(amountBMI);\n', '\t\trequire(\n', '\t\t\tbmiToken.balanceOf(address(this)) >= amountBMI,\n', '\t\t\t"Withdraw: failed to transfer BMI tokens"\n', '\t\t);\n', '\n', '        bmiToken.transfer(newBMIStakingAddress, amountBMI);\n', '\n', '        (bool succ, ) =\n', '            newBMIStakingAddress.call(\n', '                abi.encodeWithSignature("stakeFor(address,uint256)", _msgSender(), amountBMI)\n', '            );\n', '\n', '        require(succ, "Something went wrong");\n', '\n', '\t\temit StakingMigrated(_msgSender(), amountBMI);\n', '    }\n', '\n', '\tfunction stake(uint256 _amountBMI) external override updateRewardPool {\n', '\t\trequire(_amountBMI > 0, "Staking: cant stake 0 tokens");\n', '\t\tbmiToken.transferFrom(_msgSender(), address(this), _amountBMI);\n', '\n', '\t\tuint256 amountStkBMI = _convertToStkBMI(_amountBMI);\n', '\t\tstkBMIToken.mint(_msgSender(), amountStkBMI);\n', '\n', '\t\ttotalPool = totalPool.add(_amountBMI);\n', '\n', '\t\temit BMIStaked(_amountBMI, amountStkBMI, _msgSender());\n', '\t}\n', '\n', '\tfunction withdraw(uint256 _amountStkBMI) external override updateRewardPool {\n', '\t\trequire(\n', '\t\t\tstkBMIToken.balanceOf(_msgSender()) >= _amountStkBMI,\n', '\t\t\t"Withdraw: not enough stkBMI tokens to withdraw"\n', '\t\t);\n', '\n', '\t\tuint256 amountBMI = _convertToBMI(_amountStkBMI);\n', '\t\tstkBMIToken.burn(_msgSender(), _amountStkBMI);\n', '\n', '\t\ttotalPool = totalPool.sub(amountBMI);\n', '\t\trequire(\n', '\t\t\tbmiToken.balanceOf(address(this)) >= amountBMI,\n', '\t\t\t"Withdraw: failed to transfer BMI tokens"\n', '\t\t);\n', '\t\tbmiToken.transfer(_msgSender(), amountBMI);\n', '\n', '\t\temit BMIWithdrawn(amountBMI, _amountStkBMI, _msgSender());\n', '\t}\n', '\n', '\tfunction stakingReward(uint256 _amount) public view override returns (uint256) {\n', '\t\treturn _convertToBMI(_amount);\n', '\t}\n', '\n', '\tfunction getStakedBMI(address _address) public view override returns (uint256) {\n', '\t\tuint256 balance = stkBMIToken.balanceOf(_address);\n', '\t\treturn balance > 0 ? _convertToBMI(balance) : 0;\n', '\t}\n', '\n', '\tfunction setRewardPerBlock(uint256 _amount) external override onlyOwner updateRewardPool {\n', '\t\trewardPerBlock = _amount;\n', '\t}\n', '\n', '\tfunction revokeUnusedRewardPool() external override onlyOwner updateRewardPool {\n', '\t\tuint256 contractBalance = bmiToken.balanceOf(address(this));\n', '\n', '\t\trequire(\n', '\t\t\tcontractBalance > totalPool,\n', '\t\t\t"There are no unused tokens to revoke"\n', '\t\t);\n', '\n', '\t\tuint256 unusedTokens = contractBalance.sub(totalPool);\n', '\n', '\t\tbmiToken.transfer(msg.sender, unusedTokens);\n', '\t\temit UnusedRewardPoolRevoked(msg.sender, unusedTokens);\n', '\t}\n', '\n', '\tfunction _convertToStkBMI(uint256 _amount) internal view returns (uint256) {\n', '\t\tuint256 TSstkBMIToken = stkBMIToken.totalSupply();\n', '\t\tuint256 stakingPool = totalPool.add(_calculateReward());\n', '\n', '\t\tif (stakingPool > 0 && TSstkBMIToken > 0) {\n', '\t\t\t_amount = TSstkBMIToken.mul(_amount).div(stakingPool);\n', '\t\t}\n', '\n', '\t\treturn _amount;\n', '\t}\n', '\n', '\tfunction _convertToBMI(uint256 _amount) internal view returns (uint256) {\n', '\t\tuint256 TSstkBMIToken = stkBMIToken.totalSupply();\n', '\t\tuint256 stakingPool = totalPool.add(_calculateReward());\n', '\n', '\t\treturn TSstkBMIToken > 0 ? stakingPool.mul(_amount).div(TSstkBMIToken) : 0;\n', '\t}\n', '\n', '\tfunction _calculateReward() internal view returns (uint256) {\n', '\t\tuint256 blocksPassed = block.number.sub(lastUpdateBlock);\n', '\t\treturn rewardPerBlock.mul(blocksPassed);\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.4;\n', '\n', 'import "./tokens/ISTKBMIToken.sol";\n', '\n', 'interface IBMIStaking {\n', '   \tevent BMIStaked(\n', '\t\tuint256 stakedBMI,\n', '\t\tuint256 mintedStkBMI,\n', '\t\taddress indexed recipient\n', '\t);\n', '\n', '\tevent BMIWithdrawn(\n', '\t\tuint256 withdrawnBMI,\n', '\t\tuint256 burnedStkBMI,\n', '\t\taddress indexed recipient\n', '\t);\n', '\t\n', '\tevent UnusedRewardPoolRevoked(address recipient, uint256 amount);\n', '\n', '   \tfunction stkBMIToken() external returns (ISTKBMIToken);\n', '\n', '   \tfunction stake(uint256 _amountBMI) external;\t\n', '   \tfunction withdraw(uint256 _amountStkBMI) external;\n', '\n', '   \tfunction stakingReward(uint256 _amount) external view returns (uint256);\n', '\n', '   \tfunction getStakedBMI(address _address) external view returns (uint256);\n', '\n', '   \tfunction setRewardPerBlock(uint256 _amount) external;\n', '\n', '\tfunction revokeUnusedRewardPool() external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IContractsRegistry {    \n', '    function getUniswapBMIToETHPairContract() external view returns (address);\n', '\n', '    function getBMIContract() external view returns (address);\n', '\n', '    function getBMIStakingContract() external view returns (address);\n', '\n', '    function getSTKBMIContract() external view returns (address);\n', '\n', '    function getLiquidityMiningStakingContract() external view returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.4;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '\n', 'interface ISTKBMIToken is IERC20Upgradeable {\n', '\tfunction mint(address account, uint256 amount) external;\n', '\n', '\tfunction burn(address account, uint256 amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'import "../proxy/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../GSN/ContextUpgradeable.sol";\n', 'import "../proxy/Initializable.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 100\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']