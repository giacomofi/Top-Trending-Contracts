['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/UpgradeableOwnable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract UpgradeableOwnable {\n', '    bytes32 private constant _OWNER_SLOT = 0xa7b53796fd2d99cb1f5ae019b54f9e024446c3d12b483f733ccc62ed04eb126a;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        assert(_OWNER_SLOT == bytes32(uint256(keccak256("eip1967.proxy.owner")) - 1));\n', '        _setOwner(msg.sender);\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function _setOwner(address newOwner) private {\n', '        bytes32 slot = _OWNER_SLOT;\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newOwner)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address o) {\n', '        bytes32 slot = _OWNER_SLOT;\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            o := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(owner(), address(0));\n', '        _setOwner(address(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(owner(), newOwner);\n', '        _setOwner(newOwner);\n', '    }\n', '}\n', '\n', '// File: contracts/liquidity-mining/VotingEscrow.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VotingEscrow is IERC20, UpgradeableOwnable {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public _smty;\n', '    IERC20 public _syUSD;\n', '    address public _collector;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping (address => uint256) private _balances;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    uint256 public constant MAX_TIME = 1460 days;\n', '\n', '    struct LockData {\n', '        uint256 amount;\n', '        uint256 end;\n', '    }\n', '    mapping (address => LockData) private _locks;\n', '    uint256 public _totalLockedSMTY;\n', '\n', '    uint256 private _accRewardPerBalance;\n', '    mapping (address => uint256) private _rewardDebt;\n', '\n', '    // Variable for earning with locks\n', '    struct LockedBalance {\n', '        uint256 amount;\n', '        uint256 unlockTime;\n', '    }\n', '    mapping(address => LockedBalance[]) _userEarnings;\n', '    // Duration that rewards are streamed over\n', '    uint256 public constant REWARDS_DURATION = 86400 * 7;\n', '    // Duration of lock/earned penalty period\n', '    uint256 public constant LOCK_DURATION = REWARDS_DURATION * 13;\n', '    struct Balances {\n', '        uint256 earned;\n', '        uint256 penaltyEarningDebt;\n', '    }\n', '    mapping(address => Balances) private  _userBalances;\n', '    uint256 private _accPenaltyEarningPerBalance;\n', '    bool public _distributePenaltyEarning = false;  // burn or redistribute penalty of earning\n', '\n', '    event LockCreate(address indexed user, uint256 amount, uint256 veAmount, uint256 lockEnd);\n', '    event LockExtend(address indexed user, uint256 amount, uint256 veAmount, uint256 lockEnd);\n', '    event LockIncreaseAmount(address indexed user, uint256 amount, uint256 veAmount, uint256 lockEnd);\n', '    event Withdraw(address indexed user, uint256 amount);\n', '    event EarningAdd(address indexed user, uint256 amount);\n', '    event EarningWithdraw(address indexed user, uint256 amount, uint256 penaltyAmount);\n', '\n', '    // solium-disable-next-line\n', '    constructor() public {}\n', '\n', '    /*\n', '     * Owner methods\n', '     */\n', '    function initialize(IERC20 smty, IERC20 syUSD, address collector) external onlyOwner {\n', '        _name = "Voting Escrow Smoothy Token";\n', '        _symbol = "veSMTY";\n', '        _decimals = 18;\n', '        _smty = smty;\n', '        _syUSD = syUSD;\n', '        _collector = collector;\n', '        _distributePenaltyEarning = true;\n', '    }\n', '\n', '    // veSMTY ERC20 interface\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        public view virtual override returns (uint256)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '        public virtual override returns (bool)\n', '    {\n', '        return false;\n', '    }\n', '\n', '    function amountOf(address account) public view returns (uint256) {\n', '        return _locks[account].amount;\n', '    }\n', '\n', '    function endOf(address account) public view returns (uint256) {\n', '        return _locks[account].end;\n', '    }\n', '\n', '    function maxEnd() public view returns (uint256) {\n', '        return block.timestamp + MAX_TIME;\n', '    }\n', '\n', '    function createLock(uint256 amount, uint256 end) external {\n', '        _createLock(amount, end, block.timestamp);\n', '    }\n', '\n', '    function _createLock(uint256 amount, uint256 end, uint256 timestamp) internal claimReward(true, true) {\n', '        LockData storage lock = _locks[msg.sender];\n', '\n', '        require(lock.amount == 0, "must no locked");\n', '        require(end <= timestamp + MAX_TIME, "end too long");\n', '        require(end > timestamp, "end too short");\n', '        require(amount != 0, "amount must be non-zero");\n', '\n', '        _smty.safeTransferFrom(msg.sender, address(this), amount);\n', '        _totalLockedSMTY = _totalLockedSMTY + amount;\n', '\n', '        lock.amount = amount;\n', '        lock.end = end;\n', '\n', '        _updateBalance(msg.sender, (end - timestamp).mul(amount).div(MAX_TIME));\n', '\n', '        emit LockCreate(msg.sender, lock.amount, _balances[msg.sender], lock.end);\n', '    }\n', '\n', '    function addAmount(uint256 amount) external {\n', '        _addAmount(amount, block.timestamp);\n', '    }\n', '\n', '    function _addAmount(uint256 amount, uint256 timestamp) internal claimReward(true, true) {\n', '        LockData storage lock = _locks[msg.sender];\n', '\n', '        require(lock.amount != 0, "must locked");\n', '        require(lock.end > timestamp, "must not expired");\n', '        require(amount != 0, "_amount must be nonzero");\n', '\n', '        _smty.safeTransferFrom(msg.sender, address(this), amount);\n', '        _totalLockedSMTY = _totalLockedSMTY + amount;\n', '\n', '        lock.amount = lock.amount.add(amount);\n', '        _updateBalance(\n', '            msg.sender,\n', '            _balances[msg.sender].add((lock.end - timestamp).mul(amount).div(MAX_TIME))\n', '        );\n', '\n', '        emit LockIncreaseAmount(msg.sender, lock.amount, _balances[msg.sender], lock.end);\n', '    }\n', '\n', '    function extendLock(uint256 end) external {\n', '        _extendLock(end, block.timestamp);\n', '    }\n', '\n', '    function _extendLock(uint256 end, uint256 timestamp) internal claimReward(true, true) {\n', '        LockData storage lock = _locks[msg.sender];\n', '        require(lock.amount != 0, "must locked");\n', '        require(lock.end < end, "new end must be longer");\n', '        require(end <= timestamp + MAX_TIME, "end too long");\n', '\n', '        // calculate equivalent lock duration\n', '        uint256 duration = _balances[msg.sender].mul(MAX_TIME).div(lock.amount);\n', '        duration += (end - lock.end);\n', '        if (duration > MAX_TIME) {\n', '            duration = MAX_TIME;\n', '        }\n', '\n', '        lock.end = end;\n', '        _updateBalance(msg.sender, duration.mul(lock.amount).div(MAX_TIME));\n', '\n', '        emit LockExtend(msg.sender, lock.amount, _balances[msg.sender], lock.end);\n', '    }\n', '\n', '    function withdraw() external {\n', '        _withdraw(block.timestamp);\n', '    }\n', '\n', '    function _withdraw(uint256 timestamp) internal claimReward(true, true) {\n', '        LockData storage lock = _locks[msg.sender];\n', '\n', '        require(lock.end <= timestamp, "must expired");\n', '\n', '        uint256 amount = lock.amount;\n', '        _smty.safeTransfer(msg.sender, amount);\n', '        _totalLockedSMTY = _totalLockedSMTY - amount;\n', '\n', '        lock.amount = 0;\n', '        _updateBalance(msg.sender, 0);\n', '\n', '        emit Withdraw(msg.sender, amount);\n', '    }\n', '\n', '    function setDistributePenaltyEarning(bool dist) external onlyOwner {\n', '        _distributePenaltyEarning = dist;\n', '    }\n', '\n', '    /*\n', '     * Add earning from other accounts, which will be locked for 3 months.\n', '     * Early exit is allowed, by 50% will be penalty.\n', '     */\n', '    function addEarning(address user, uint256 amount) external {\n', '        _addPendingEarning(user, amount);\n', '        _smty.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function _addPendingEarning(address user, uint256 amount) internal {\n', '        Balances storage bal = _userBalances[user];\n', '        bal.earned = bal.earned.add(amount);\n', '\n', '        uint256 unlockTime = block.timestamp.div(REWARDS_DURATION).mul(REWARDS_DURATION).add(LOCK_DURATION);\n', '        LockedBalance[] storage earnings = _userEarnings[user];\n', '        uint256 idx = earnings.length;\n', '\n', '        if (idx == 0 || earnings[idx-1].unlockTime < unlockTime) {\n', '            earnings.push(LockedBalance({amount: amount, unlockTime: unlockTime}));\n', '        } else {\n', '            earnings[idx-1].amount = earnings[idx-1].amount.add(amount);\n', '        }\n', '        emit EarningAdd(user, amount);\n', '    }\n', '\n', '    // Withdraw staked tokens\n', '    // First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\n', '    // incurs a 50% penalty which will be burnt\n', '    function withdrawEarning(uint256 amount) public {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        Balances storage bal = _userBalances[msg.sender];\n', '        uint256 penaltyAmount = 0;\n', '\n', '        uint256 remaining = amount;\n', '        bal.earned = bal.earned.sub(remaining);\n', '        for (uint i = 0; ; i++) {\n', '            uint256 earnedAmount = _userEarnings[msg.sender][i].amount;\n', '            if (earnedAmount == 0) {\n', '                continue;\n', '            }\n', '            if (penaltyAmount == 0 && _userEarnings[msg.sender][i].unlockTime > block.timestamp) {\n', '                penaltyAmount = remaining;\n', '                require(bal.earned >= remaining, "Insufficient balance after penalty");\n', '                bal.earned = bal.earned.sub(remaining);\n', '                if (bal.earned == 0) {\n', '                    delete _userEarnings[msg.sender];\n', '                    break;\n', '                }\n', '                remaining = remaining.mul(2);\n', '            }\n', '            if (remaining <= earnedAmount) {\n', '                _userEarnings[msg.sender][i].amount = earnedAmount.sub(remaining);\n', '                break;\n', '            } else {\n', '                delete _userEarnings[msg.sender][i];\n', '                remaining = remaining.sub(earnedAmount);\n', '            }\n', '        }\n', '\n', '        _smty.safeTransfer(msg.sender, amount);\n', '        if (_distributePenaltyEarning && (_totalSupply != 0)) {\n', '            _accPenaltyEarningPerBalance = _accPenaltyEarningPerBalance.add(penaltyAmount.mul(1e18).div(_totalSupply));\n', '        }\n', '        emit EarningWithdraw(msg.sender, amount, penaltyAmount);\n', '    }\n', '\n', '    // Final balance received and penalty balance paid by user upon calling exit\n', '    function withdrawableEarning(\n', '        address user\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 amount, uint256 penaltyAmount)\n', '    {\n', '        Balances storage bal = _userBalances[user];\n', '        if (bal.earned > 0) {\n', '            uint256 amountWithoutPenalty;\n', '            uint256 length = _userEarnings[user].length;\n', '            for (uint i = 0; i < length; i++) {\n', '                uint256 earnedAmount = _userEarnings[user][i].amount;\n', '                if (earnedAmount == 0) {\n', '                    continue;\n', '                }\n', '                if (_userEarnings[user][i].unlockTime > block.timestamp) {\n', '                    break;\n', '                }\n', '                amountWithoutPenalty = amountWithoutPenalty.add(earnedAmount);\n', '            }\n', '\n', '            // add 1 wei in case for off by one issue\n', '            penaltyAmount = bal.earned.sub(amountWithoutPenalty).div(2) + 1;\n', '        }\n', '        amount = bal.earned.sub(penaltyAmount);\n', '        return (amount, penaltyAmount);\n', '    }\n', '\n', '    // solium-disable-next-line no-empty-blocks\n', '    function claim() external claimReward(true, false) {\n', '    }\n', '\n', '    // solium-disable-next-line no-empty-blocks\n', '    function vestEarning() external claimReward(false, true) {\n', '    }\n', '\n', '    function _updateBalance(address account, uint256 newBalance) internal {\n', '        _totalSupply = _totalSupply.sub(_balances[account]).add(newBalance);\n', '        _balances[account] = newBalance;\n', '    }\n', '\n', '    function collectReward() public {\n', '        uint256 newReward = _syUSD.balanceOf(_collector);\n', '        if (newReward == 0) {\n', '            return;\n', '        }\n', '\n', '        _syUSD.safeTransferFrom(_collector, address(this), newReward);\n', '        _accRewardPerBalance = _accRewardPerBalance.add(newReward.mul(1e18).div(_totalSupply));\n', '    }\n', '\n', '    function pendingReward() public view returns (uint256 pending) {\n', '        if (_balances[msg.sender] > 0) {\n', '            uint256 newReward = _syUSD.balanceOf(_collector);\n', '            uint256 newAccRewardPerBalance = _accRewardPerBalance.add(newReward.mul(1e18).div(_totalSupply));\n', '            pending = _balances[msg.sender].mul(newAccRewardPerBalance).div(1e18).sub(_rewardDebt[msg.sender]);\n', '        }\n', '    }\n', '\n', '    function pendingEarning() public view returns (uint256 pending) {\n', '        if (_balances[msg.sender] > 0) {\n', '            pending = _balances[msg.sender].mul(_accPenaltyEarningPerBalance).div(1e18).sub(_userBalances[msg.sender].penaltyEarningDebt);\n', '        }\n', '    }\n', '\n', '    modifier claimReward(bool claimFee, bool vestEarn) {\n', '        uint256 veBal = _balances[msg.sender];\n', '        if (veBal > 0) {\n', '            if (claimFee) {\n', '                collectReward();\n', '                uint256 pending = veBal.mul(_accRewardPerBalance).div(1e18).sub(_rewardDebt[msg.sender]);\n', '                _syUSD.safeTransfer(msg.sender, pending);\n', '            }\n', '\n', '            if (vestEarn) {\n', '                uint256 pending = veBal.mul(_accPenaltyEarningPerBalance).div(1e18)\n', '                    .sub(_userBalances[msg.sender].penaltyEarningDebt);\n', '\n', '                if (pending != 0) {\n', '                    _addPendingEarning(msg.sender, pending);\n', '                }\n', '            }\n', '        }\n', '\n', '        _; // _balances[msg.sender] may changed.\n', '\n', '        if (!claimFee || !vestEarn) {\n', '            require(veBal == _balances[msg.sender], "veSMTY balance changed");\n', '        } else {\n', '            veBal = _balances[msg.sender];\n', '        }\n', '\n', '        if (claimFee) {\n', '            _rewardDebt[msg.sender] = veBal.mul(_accRewardPerBalance).div(1e18);\n', '        }\n', '        if (vestEarn) {\n', '            _userBalances[msg.sender].penaltyEarningDebt = veBal.mul(_accPenaltyEarningPerBalance)\n', '                .div(1e18);\n', '        }\n', '    }\n', '}']