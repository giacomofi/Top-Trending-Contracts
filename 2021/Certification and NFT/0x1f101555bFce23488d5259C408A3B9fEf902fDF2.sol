['pragma solidity >=0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', '* @title MarketsRegistry\n', '* @dev Implements market proposal and approval/denial\n', ' */\n', 'contract MarketsRegistry {\n', '\n', '    /// @notice Admins\n', '    mapping(address=>uint) public admins;\n', '\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender] == 1, "Not admin");\n', '        _;\n', '    }\n', '\n', '    function addAdmin(address newAdmin) onlyAdmin public {\n', '        admins[newAdmin] = 1;\n', '        emit AddNewAdministrator(msg.sender, newAdmin);\n', '    }\n', '\n', '    function removeAdmin(address admin) onlyAdmin public {\n', '        admins[admin] = 0;\n', '        emit RemoveAdminstrator(msg.sender, admin);\n', '    }\n', '\n', '    function isAdmin(address account) view external returns (bool) {\n', '        return admins[account] == 1;\n', '    }\n', '    \n', '    struct MarketProposal {\n', '        uint marketProposalId;\n', '        string title;\n', '        string description;\n', '        uint resolutionTimestampUnix;\n', '        bool approved;\n', '    }\n', '\n', '    /// @notice Total number of proposals ever\n', '    uint public marketProposalCount;\n', '\n', '    /// @notice \n', '    uint public totalPendingProposals;\n', '\n', '    /// @notice\n', '    uint public totalApprovedProposals;\n', '\n', '    /// @notice all available market proposals\n', '    mapping(uint => MarketProposal) public proposals;\n', '\n', '    // Events\n', '    \n', '    /// @notice An event emitted when a new admin is added\n', '    event AddNewAdministrator(address admin, address newAdmin);\n', '\n', '    /// @notice An event emitted when an admin is removed\n', '    event RemoveAdminstrator(address admin, address removedAdmin);\n', '\n', '    /// @notice An event emitted when a Proposal is submitted \n', '    event ProposalSubmitted(address proposer, uint marketProposalId, string title, string description, uint resolutionTimestamp);\n', '    \n', '    /// @notice An event emitted when a Proposal is approved\n', '    event ProposalApproved(address admin, uint marketProposalId);\n', '    \n', '    /// @notice An event emitted when a Proposal is denied\n', '    event ProposalDenied(address admin, uint marketProposalId);\n', '\n', '    constructor(){\n', '        admins[msg.sender] = 1;\n', '    }\n', '\n', '    /// @notice Get approved market proposals\n', '    function getAllApprovedMarketProposals() external view returns (MarketProposal[] memory){\n', '        MarketProposal[] memory marketProposals = new MarketProposal[](totalApprovedProposals);\n', '        for(uint i = 0; i < marketProposalCount; i++){\n', '            MarketProposal storage marketProposal = proposals[i];\n', '            \n', '            //check that the MarketProposal struct has been initialized and approved\n', '            if(bytes(marketProposal.title).length > 0 && marketProposal.approved == true){\n', '                marketProposals[i] = marketProposal;\n', '            }\n', '        }\n', '        return marketProposals;\n', '    }\n', '\n', '    /// @notice Get pending market proposals\n', '    function getPendingMarketProposals() external view returns (MarketProposal[] memory){\n', '        MarketProposal[] memory marketProposals = new MarketProposal[](totalPendingProposals);\n', '        for(uint i = 0; i < marketProposalCount; i++){\n', '            MarketProposal storage marketProposal = proposals[i];\n', '            if(bytes(marketProposal.title).length > 0 && marketProposal.approved == false){\n', '                marketProposals[i] = marketProposal;\n', '            }\n', '        }\n', '        return marketProposals;\n', '    }\n', '\n', '    /// @notice submits a new market proposal to the registry\n', '    function submitNewMarketProposal(string calldata title, string calldata description, uint resolutionTimestamp) external returns (uint) {\n', '        uint proposalId = marketProposalCount;\n', '        proposals[proposalId] = MarketProposal({\n', '            marketProposalId: proposalId, \n', '            title: title, \n', '            description: description, \n', '            resolutionTimestampUnix: resolutionTimestamp, \n', '            approved: false\n', '        });\n', '\n', '        marketProposalCount++;\n', '        totalPendingProposals++;\n', '        emit ProposalSubmitted(msg.sender, proposalId, title, description, resolutionTimestamp);\n', '        return proposalId;\n', '    }\n', '\n', '    function approveMarketProposal(uint marketProposalId) onlyAdmin external {\n', '        MarketProposal storage marketProposal = proposals[marketProposalId];\n', '        //require that the marketProposal struct was initialized\n', '        require(isMarketProposalInitialized(marketProposal), "MarketProposal doesn\'t exist");    \n', '        //necessary so we dont approve a proposal twice \n', '        require(!marketProposal.approved, "MarketProposal already approved");\n', '        \n', '        marketProposal.approved = true;\n', '        totalApprovedProposals++;\n', '        totalPendingProposals--;\n', '        emit ProposalApproved(msg.sender, marketProposalId);\n', '    }\n', '\n', '    function denyMarketProposal(uint marketProposalId) onlyAdmin external {\n', '        MarketProposal storage marketProposal = proposals[marketProposalId];\n', '        //require that the marketProposal struct was initialized\n', '        require(isMarketProposalInitialized(marketProposal), "MarketProposal doesn\'t exist");\n', '\n', '        if(marketProposal.approved == true){\n', '            //If the market proposal has already been approved, decrement totalApprovedProposals \n', '            totalApprovedProposals--;\n', '        } \n', '        if(marketProposal.approved == false){\n', '            //If the market proposal is pending, decrement totalPendingProposals\n', '            totalPendingProposals--;\n', '        }\n', '        delete proposals[marketProposalId];\n', '        emit ProposalDenied(msg.sender, marketProposalId);\n', '    }\n', '\n', '    function isMarketProposalInitialized(MarketProposal memory marketProposal) internal pure returns (bool) {\n', '        return bytes(marketProposal.title).length > 0;\n', '    }\n', '\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']