['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-11\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.1 https://hardhat.org\n', '\n', '// File @chainlink/contracts/src/v0.6/vendor/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathChainlink {\n', '  /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    * - Addition cannot overflow.\n', '    */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "SafeMath: subtraction overflow");\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    * - Multiplication cannot overflow.\n', '    */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, "SafeMath: division by zero");\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0, "SafeMath: modulo by zero");\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '// File @chainlink/contracts/src/v0.6/interfaces/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface LinkTokenInterface {\n', '  function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '  function approve(address spender, uint256 value) external returns (bool success);\n', '  function balanceOf(address owner) external view returns (uint256 balance);\n', '  function decimals() external view returns (uint8 decimalPlaces);\n', '  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n', '  function increaseApproval(address spender, uint256 subtractedValue) external;\n', '  function name() external view returns (string memory tokenName);\n', '  function symbol() external view returns (string memory tokenSymbol);\n', '  function totalSupply() external view returns (uint256 totalTokensIssued);\n', '  function transfer(address to, uint256 value) external returns (bool success);\n', '  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '}\n', '\n', '\n', '// File @chainlink/contracts/src/v0.6/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract VRFRequestIDBase {\n', '\n', '  /**\n', '   * @notice returns the seed which is actually input to the VRF coordinator\n', '   *\n', '   * @dev To prevent repetition of VRF output due to repetition of the\n', '   * @dev user-supplied seed, that seed is combined in a hash with the\n', '   * @dev user-specific nonce, and the address of the consuming contract. The\n', '   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n', '   * @dev the final seed, but the nonce does protect against repetition in\n', '   * @dev requests which are included in a single block.\n', '   *\n', '   * @param _userSeed VRF seed input provided by user\n', '   * @param _requester Address of the requesting contract\n', '   * @param _nonce User-specific nonce at the time of the request\n', '   */\n', '  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n', '    address _requester, uint256 _nonce)\n', '    internal pure returns (uint256)\n', '  {\n', '    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the id for this request\n', '   * @param _keyHash The serviceAgreement ID to be used for this request\n', '   * @param _vRFInputSeed The seed to be passed directly to the VRF\n', '   * @return The id for this request\n', '   *\n', '   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n', '   * @dev contract, but the one generated by makeVRFInputSeed\n', '   */\n', '  function makeRequestId(\n', '    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n', '    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n', '  }\n', '}\n', '\n', '\n', '// File @chainlink/contracts/src/v0.6/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/** ****************************************************************************\n', ' * @notice Interface for contracts using VRF randomness\n', ' * *****************************************************************************\n', ' * @dev PURPOSE\n', ' *\n', ' * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n', " * @dev to Vera the verifier in such a way that Vera can be sure he's not\n", ' * @dev making his output up to suit himself. Reggie provides Vera a public key\n', ' * @dev to which he knows the secret key. Each time Vera provides a seed to\n', ' * @dev Reggie, he gives back a value which is computed completely\n', ' * @dev deterministically from the seed and the secret key.\n', ' *\n', ' * @dev Reggie provides a proof by which Vera can verify that the output was\n', ' * @dev correctly computed once Reggie tells it to her, but without that proof,\n', ' * @dev the output is indistinguishable to her from a uniform random sample\n', ' * @dev from the output space.\n', ' *\n', ' * @dev The purpose of this contract is to make it easy for unrelated contracts\n', ' * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n', ' * @dev simple access to a verifiable source of randomness.\n', ' * *****************************************************************************\n', ' * @dev USAGE\n', ' *\n', ' * @dev Calling contracts must inherit from VRFConsumerBase, and can\n', " * @dev initialize VRFConsumerBase's attributes in their constructor as\n", ' * @dev shown:\n', ' *\n', ' * @dev   contract VRFConsumer {\n', ' * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n', ' * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n', ' * @dev         <initialization with other arguments goes here>\n', ' * @dev       }\n', ' * @dev   }\n', ' *\n', ' * @dev The oracle will have given you an ID for the VRF keypair they have\n', " * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n", ' * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n', ' * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n', ' * @dev want to generate randomness from.\n', ' *\n', " * @dev Once the VRFCoordinator has received and validated the oracle's response\n", " * @dev to your request, it will call your contract's fulfillRandomness method.\n", ' *\n', ' * @dev The randomness argument to fulfillRandomness is the actual random value\n', ' * @dev generated from your seed.\n', ' *\n', ' * @dev The requestId argument is generated from the keyHash and the seed by\n', ' * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n', ' * @dev requests open, you can use the requestId to track which seed is\n', ' * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n', ' * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,\n', ' * @dev if your contract could have multiple requests in flight simultaneously.)\n', ' *\n', ' * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n', ' * @dev differ. (Which is critical to making unpredictable randomness! See the\n', ' * @dev next section.)\n', ' *\n', ' * *****************************************************************************\n', ' * @dev SECURITY CONSIDERATIONS\n', ' *\n', ' * @dev A method with the ability to call your fulfillRandomness method directly\n', " * @dev could spoof a VRF response with any random value, so it's critical that\n", ' * @dev it cannot be directly called by anything other than this base contract\n', ' * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n', ' *\n', " * @dev For your users to trust that your contract's random behavior is free\n", " * @dev from malicious interference, it's best if you can write it so that all\n", ' * @dev behaviors implied by a VRF response are executed *during* your\n', ' * @dev fulfillRandomness method. If your contract must store the response (or\n', ' * @dev anything derived from it) and use it later, you must ensure that any\n', ' * @dev user-significant behavior which depends on that stored value cannot be\n', ' * @dev manipulated by a subsequent VRF request.\n', ' *\n', ' * @dev Similarly, both miners and the VRF oracle itself have some influence\n', ' * @dev over the order in which VRF responses appear on the blockchain, so if\n', ' * @dev your contract could have multiple VRF requests in flight simultaneously,\n', ' * @dev you must ensure that the order in which the VRF responses arrive cannot\n', " * @dev be used to manipulate your contract's user-significant behavior.\n", ' *\n', ' * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n', ' * @dev block in which the request is made, user-provided seeds have no impact\n', ' * @dev on its economic security properties. They are only included for API\n', ' * @dev compatability with previous versions of this contract.\n', ' *\n', ' * @dev Since the block hash of the block which contains the requestRandomness\n', ' * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n', ' * @dev miner could, in principle, fork the blockchain to evict the block\n', ' * @dev containing the request, forcing the request to be included in a\n', ' * @dev different block with a different hash, and therefore a different input\n', ' * @dev to the VRF. However, such an attack would incur a substantial economic\n', ' * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n', ' * @dev until it calls responds to a request.\n', ' */\n', 'abstract contract VRFConsumerBase is VRFRequestIDBase {\n', '\n', '  using SafeMathChainlink for uint256;\n', '\n', '  /**\n', '   * @notice fulfillRandomness handles the VRF response. Your contract must\n', '   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important\n', '   * @notice principles to keep in mind when implementing your fulfillRandomness\n', '   * @notice method.\n', '   *\n', '   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n', '   * @dev signature, and will call it once it has verified the proof\n', '   * @dev associated with the randomness. (It is triggered via a call to\n', '   * @dev rawFulfillRandomness, below.)\n', '   *\n', '   * @param requestId The Id initially returned by requestRandomness\n', '   * @param randomness the VRF output\n', '   */\n', '  function fulfillRandomness(bytes32 requestId, uint256 randomness)\n', '    internal virtual;\n', '\n', '  /**\n', '   * @notice requestRandomness initiates a request for VRF output given _seed\n', '   *\n', "   * @dev The fulfillRandomness method receives the output, once it's provided\n", '   * @dev by the Oracle, and verified by the vrfCoordinator.\n', '   *\n', '   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n', '   * @dev the _fee must exceed the fee specified during registration of the\n', '   * @dev _keyHash.\n', '   *\n', '   * @dev The _seed parameter is vestigial, and is kept only for API\n', "   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n", "   * @dev your own randomness, here, but it's not necessary because the VRF\n", '   * @dev oracle will mix the hash of the block containing your request into the\n', '   * @dev VRF seed it ultimately uses.\n', '   *\n', '   * @param _keyHash ID of public key against which randomness is generated\n', '   * @param _fee The amount of LINK to send with the request\n', '   * @param _seed seed mixed into the input of the VRF.\n', '   *\n', '   * @return requestId unique ID for this request\n', '   *\n', '   * @dev The returned requestId can be used to distinguish responses to\n', '   * @dev concurrent requests. It is passed as the first argument to\n', '   * @dev fulfillRandomness.\n', '   */\n', '  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\n', '    internal returns (bytes32 requestId)\n', '  {\n', '    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\n', '    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n', '    // the hash of the block containing this request to obtain the seed/input\n', '    // which is finally passed to the VRF cryptographic machinery.\n', '    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\n', '    // nonces[_keyHash] must stay in sync with\n', '    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n', '    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n', '    // This provides protection against the user repeating their input seed,\n', '    // which would result in a predictable/duplicate output, if multiple such\n', '    // requests appeared in the same block.\n', '    nonces[_keyHash] = nonces[_keyHash].add(1);\n', '    return makeRequestId(_keyHash, vRFSeed);\n', '  }\n', '\n', '  LinkTokenInterface immutable internal LINK;\n', '  address immutable private vrfCoordinator;\n', '\n', '  // Nonces for each VRF key from which randomness has been requested.\n', '  //\n', '  // Must stay in sync with VRFCoordinator[_keyHash][this]\n', '  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n', '\n', '  /**\n', '   * @param _vrfCoordinator address of VRFCoordinator contract\n', '   * @param _link address of LINK token contract\n', '   *\n', '   * @dev https://docs.chain.link/docs/link-token-contracts\n', '   */\n', '  constructor(address _vrfCoordinator, address _link) public {\n', '    vrfCoordinator = _vrfCoordinator;\n', '    LINK = LinkTokenInterface(_link);\n', '  }\n', '\n', '  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n', '  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n', '  // the origin of the call\n', '  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n', '    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");\n', '    fulfillRandomness(requestId, randomness);\n', '  }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File hardhat/[email\xa0protected]\n', '\n', 'pragma solidity >= 0.4.22 <0.9.0;\n', '\n', 'library console {\n', '\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '\tfunction _sendLogPayload(bytes memory payload) private view {\n', '\t\tuint256 payloadLength = payload.length;\n', '\t\taddress consoleAddress = CONSOLE_ADDRESS;\n', '\t\tassembly {\n', '\t\t\tlet payloadStart := add(payload, 32)\n', '\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n', '\t\t}\n', '\t}\n', '\n', '\tfunction log() internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log()"));\n', '\t}\n', '\n', '\tfunction logInt(int p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '\t}\n', '\n', '\tfunction logUint(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction logString(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction logBool(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction logAddress(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction logBytes(bytes memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '\t}\n', '\n', '\tfunction logBytes1(bytes1 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '\t}\n', '\n', '\tfunction logBytes2(bytes2 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '\t}\n', '\n', '\tfunction logBytes3(bytes3 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '\t}\n', '\n', '\tfunction logBytes4(bytes4 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '\t}\n', '\n', '\tfunction logBytes5(bytes5 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '\t}\n', '\n', '\tfunction logBytes6(bytes6 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '\t}\n', '\n', '\tfunction logBytes7(bytes7 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '\t}\n', '\n', '\tfunction logBytes8(bytes8 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '\t}\n', '\n', '\tfunction logBytes9(bytes9 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '\t}\n', '\n', '\tfunction logBytes10(bytes10 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '\t}\n', '\n', '\tfunction logBytes11(bytes11 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '\t}\n', '\n', '\tfunction logBytes12(bytes12 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '\t}\n', '\n', '\tfunction logBytes13(bytes13 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '\t}\n', '\n', '\tfunction logBytes14(bytes14 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '\t}\n', '\n', '\tfunction logBytes15(bytes15 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '\t}\n', '\n', '\tfunction logBytes16(bytes16 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '\t}\n', '\n', '\tfunction logBytes17(bytes17 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '\t}\n', '\n', '\tfunction logBytes18(bytes18 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '\t}\n', '\n', '\tfunction logBytes19(bytes19 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '\t}\n', '\n', '\tfunction logBytes20(bytes20 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '\t}\n', '\n', '\tfunction logBytes21(bytes21 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '\t}\n', '\n', '\tfunction logBytes22(bytes22 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '\t}\n', '\n', '\tfunction logBytes23(bytes23 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '\t}\n', '\n', '\tfunction logBytes24(bytes24 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '\t}\n', '\n', '\tfunction logBytes25(bytes25 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '\t}\n', '\n', '\tfunction logBytes26(bytes26 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '\t}\n', '\n', '\tfunction logBytes27(bytes27 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '\t}\n', '\n', '\tfunction logBytes28(bytes28 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '\t}\n', '\n', '\tfunction logBytes29(bytes29 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '\t}\n', '\n', '\tfunction logBytes30(bytes30 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '\t}\n', '\n', '\tfunction logBytes31(bytes31 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '\t}\n', '\n', '\tfunction logBytes32(bytes32 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction log(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction log(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction log(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File contracts/BancorVRF.sol\n', '\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev\n', ' */\n', 'contract BancorVRFConsumer is Ownable, VRFConsumerBase {\n', '    /**\n', '     * Represent a request\n', '     */\n', '    struct Request {\n', '        bool fullfilled;\n', '        bytes32 name;\n', '        bytes32 requestId;\n', '        uint256 randomness;\n', '    }\n', '\n', '    // Map requestId to a Request\n', '    mapping(bytes32 => Request) private _requests;\n', '\n', '    bytes32 private immutable _keyHash;\n', '    uint256 private immutable _fee;\n', '\n', '    /**\n', '     * @dev Triggered when a randomness request is needed.\n', '     *\n', '     * @param requestId Request ID of the to-be generated randomness\n', '     */\n', '    event RequestRandomness(bytes32 indexed requestId);\n', '\n', '    /**\n', '     * @dev Triggered when a randomness has been generated.\n', '     *\n', '     * @param requestId Request ID of a generation\n', '     * @param request Request fullfilled\n', '     */\n', '    event RequestRandomnessFullfilled(\n', '        bytes32 indexed requestId,\n', '        Request request\n', '    );\n', '\n', '    /**\n', '     * @dev Initialize BancorVRFConsumer contract.\n', '     *\n', '     * @param vrfCoordinator address of VRFCoordinator contract\n', '     * @param link address of LINK token contract\n', '     * @param keyHash ID of public key against which randomness is generated\n', '     * @param fee The amount of LINK to send with the request\n', '     */\n', '    constructor(\n', '        address vrfCoordinator,\n', '        address link,\n', '        bytes32 keyHash,\n', '        uint256 fee\n', '    ) public VRFConsumerBase(vrfCoordinator, link) {\n', '        _keyHash = keyHash;\n', '        _fee = fee;\n', '    }\n', '\n', '    /**\n', '     * @dev Request VRF Coordinator for randomness and create a new Request structure for it in storage\n', '     *\n', '     * @param seed seed mixed into the input of the VRF\n', '     * @param name name of the requested randomness\n', '     *\n', '     * @return request id\n', '     */\n', '    function requestRandomness(uint256 seed, bytes32 name)\n', '        external\n', '        onlyOwner\n', '        returns (bytes32)\n', '    {\n', '        bytes32 requestId = requestRandomness(_keyHash, _fee, seed);\n', '\n', '        _requests[requestId] = Request({\n', '            fullfilled: false,\n', '            name: name,\n', '            requestId: requestId,\n', '            randomness: 0\n', '        });\n', '\n', '        emit RequestRandomness(requestId);\n', '\n', '        return requestId;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to draw from a set of inputs\n', '     *\n', '     * @param requestId Request ID of a generation\n', '     * @param inputs Array of addresses\n', '     *\n', "     * @return winner's address\n", '     */\n', '    function draw(bytes32 requestId, address[] memory inputs)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        Request memory r = _requests[requestId];\n', '\n', '        require(r.fullfilled, "ERR_NOT_FULLFILLED");\n', '\n', '        address winner =\n', '            inputs[\n', '                uint256(keccak256(abi.encode(r.randomness))) % (inputs.length)\n', '            ];\n', '\n', '        return winner;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw LINK tokens\n', '     */\n', '    function withdrawLink() external onlyOwner {\n', '        require(\n', '            LINK.transfer(msg.sender, LINK.balanceOf(address(this))),\n', '            "ERR_TRANFER_FAILED"\n', '        );\n', '    }\n', '\n', '     /**\n', '     * @dev Callback function that can only be called by the VRF Coordinator\n', '     *\n', '     * @param requestId Request ID of a generation\n', '     * @param randomness Randomness generated\n', '     */\n', '    function fulfillRandomness(bytes32 requestId, uint256 randomness)\n', '        internal\n', '        override\n', '    {\n', '        Request storage r = _requests[requestId];\n', '\n', '        require(!r.fullfilled, "ERR_ALREADY_FULLFILLED");\n', '\n', '        r.randomness = randomness;\n', '        r.fullfilled = true;\n', '\n', '        emit RequestRandomnessFullfilled(requestId, r);\n', '    }\n', '}']