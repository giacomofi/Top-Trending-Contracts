['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/core/HEnv.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract HEnv is Ownable{\n', '\n', '  address public token_addr;\n', '\n', '  address public fee_pool_addr;\n', '\n', '  uint256 public ratio_base;\n', '  uint256 public bid_fee_ratio;\n', '  uint256 public withdraw_fee_ratio;\n', '  uint256 public cancel_fee_ratio;\n', '\n', '  constructor(address _target_token) public{\n', '    token_addr = _target_token;\n', '    ratio_base = 100000000;\n', '  }\n', '\n', '  function changeFeePoolAddr(address _new) public onlyOwner{\n', '    fee_pool_addr = _new;\n', '  }\n', '\n', '  function changeBidFeeRatio(uint256 _ratio) public onlyOwner{\n', '    bid_fee_ratio = _ratio;\n', '  }\n', '\n', '  function changeWithdrawFeeRatio(uint256 _ratio) public onlyOwner{\n', '    withdraw_fee_ratio = _ratio;\n', '  }\n', '\n', '  function changeCancelFeeRatio(uint256 _ratio) public onlyOwner{\n', '    cancel_fee_ratio = _ratio;\n', '  }\n', '}\n', '\n', '\n', 'contract HEnvFactory{\n', '  event NewHEnv(address addr);\n', '  function createHEnv(address _target_token) public returns (address){\n', '    HEnv env = new HEnv(_target_token);\n', '    env.transferOwnership(msg.sender);\n', '    emit NewHEnv(address(env));\n', '    return address(env);\n', '  }\n', '}']