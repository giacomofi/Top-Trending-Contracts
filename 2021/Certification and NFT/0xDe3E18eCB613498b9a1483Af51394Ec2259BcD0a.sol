['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./interfaces/IDeFiatPoints.sol";\n', 'import "./lib/@openzeppelin/token/ERC20/ERC20.sol";\n', 'import "./utils/DeFiatGovernedUtils.sol";\n', '\n', 'contract DeFiatPoints is ERC20("DeFiat Points v2", "DFTPv2"), IDeFiatPoints, DeFiatGovernedUtils {\n', '    using SafeMath for uint256;\n', '\n', '    event DiscountUpdated(address indexed user, uint256 discount);\n', '    event TrancheUpdated(address indexed user, uint256 tranche, uint256 pointsNeeded);\n', '    event AllTranchesUpdated(address indexed user);\n', '    event TokenUpdated(address indexed user, address token);\n', '    event PointsUpdated(address indexed user, address indexed subject, uint256 amount);\n', '    event WhitelistedUpdated(address indexed user, address indexed subject, bool whitelist);\n', '    event RedirectionUpdated(address indexed user, address indexed subject, bool redirect);\n', '\n', '    address public token; // DFT ERC20 Token \n', '    \n', '    mapping (uint256 => uint256) public discountTranches; // mapping of DFTP needed for each discount tranche\n', '    mapping (address => uint256) private _discounts; // mapping of users to current discount, 100 = 100%\n', '    mapping (address => uint256) private _lastTx; // mapping of users last txn\n', '    mapping (address => bool) private _whitelisted; // mapping of addresses who are allowed to call addPoints\n', '    mapping (address => bool) private _redirection; // addresses where points should be redirected to tx.origin, i.e. uniswap\n', '    \n', '    constructor(address _governance) public {\n', '        _setGovernance(_governance);\n', '        _mint(msg.sender, 150000 * 1e18);\n', '    }\n', '\n', '    // Views\n', '\n', '    // Discounts - View the current % discount of the _address\n', '    function viewDiscountOf(address _address) public override view returns (uint256) {\n', '        return _discounts[_address];\n', '    }\n', '\n', '    // Discounts - View the discount level the _address is eligibile for\n', '    function viewEligibilityOf(address _address) public override view returns (uint256 tranche) {\n', '        uint256 balance = balanceOf(_address);\n', '        for (uint256 i = 0; i <= 9; i++) {\n', '            if (balance >= discountTranches[i]) { \n', '                tranche = i;\n', '            } else {\n', '                return tranche;\n', '            } \n', '        }\n', '    }\n', '\n', '    // Discounts - Check amount of points needed for _tranche\n', '    function discountPointsNeeded(uint256 _tranche) public override view returns (uint256 pointsNeeded) {\n', '        return (discountTranches[_tranche]);\n', '    }\n', '\n', '    // Points - Min amount \n', '    function viewTxThreshold() public override view returns (uint256) {\n', '        return IDeFiatGov(governance).viewTxThreshold();\n', '    }\n', '\n', '    // Points - view whitelisted address\n', '    function viewWhitelisted(address _address) public override view returns (bool) {\n', '        return _whitelisted[_address];\n', '    }\n', '\n', '    // Points - view redirection address\n', '    function viewRedirection(address _address) public override view returns (bool) {\n', '        return _redirection[_address];\n', '    }\n', '\n', '    // State-Changing Functions\n', '\n', '    // Discount - Update Discount internal function to control event on every update\n', '    function _updateDiscount(address user, uint256 discount) internal {\n', '        _discounts[user] = discount;\n', '        emit DiscountUpdated(user, discount);\n', '    }\n', '\n', '    // Discount - Update your discount if balance of DFTP is high enough\n', '    // Otherwise, throw to prevent unnecessary calls\n', '    function updateMyDiscount() public returns (bool) {\n', '        uint256 tranche = viewEligibilityOf(msg.sender);\n', '        uint256 discount = tranche * 10;\n', '        require(discount != _discounts[msg.sender], "UpdateDiscount: No discount change");\n', '\n', '        _updateDiscount(msg.sender, discount);\n', '    }\n', '\n', '    // Discount - Update the user discount directly, Governance-Only\n', '    function overrideDiscount(address user, uint256 discount) external onlyGovernor {\n', '        require(discount <= 100, "OverrideDiscount: Must be in-bounds");\n', '        require(_discounts[user] != discount, "OverrideDiscount: No discount change");\n', '\n', '        _updateDiscount(user, discount);\n', '    }\n', '    \n', '    // Tranches - Set an individual discount tranche\n', '    function setDiscountTranches(uint256 tranche, uint256 pointsNeeded) external onlyGovernor {\n', '        require(tranche < 10, "SetTranche: Maximum tranche level exceeded");\n', '        require(discountTranches[tranche] != pointsNeeded, "SetTranche: No change detected");\n', '\n', '        discountTranches[tranche] = pointsNeeded;\n', '        emit TrancheUpdated(msg.sender, tranche, pointsNeeded);\n', '    }\n', '    \n', '    // Tranches - Set all 10 discount tranches\n', '    function setAll10DiscountTranches(\n', '        uint256 _pointsNeeded1, uint256 _pointsNeeded2, uint256 _pointsNeeded3, uint256 _pointsNeeded4, \n', '        uint256 _pointsNeeded5, uint256 _pointsNeeded6, uint256 _pointsNeeded7, uint256 _pointsNeeded8, \n', '        uint256 _pointsNeeded9\n', '    ) external onlyGovernor {\n', '        discountTranches[0] = 0;\n', '        discountTranches[1] = _pointsNeeded1; // 10%\n', '        discountTranches[2] = _pointsNeeded2; // 20%\n', '        discountTranches[3] = _pointsNeeded3; // 30%\n', '        discountTranches[4] = _pointsNeeded4; // 40%\n', '        discountTranches[5] = _pointsNeeded5; // 50%\n', '        discountTranches[6] = _pointsNeeded6; // 60%\n', '        discountTranches[7] = _pointsNeeded7; // 70%\n', '        discountTranches[8] = _pointsNeeded8; // 80%\n', '        discountTranches[9] = _pointsNeeded9; // 90%\n', '\n', '        emit AllTranchesUpdated(msg.sender);\n', '    }\n', '\n', '    // Points - Update the user DFTP balance, Governance-Only\n', '    function overrideLoyaltyPoints(address _address, uint256 _points) external override onlyGovernor {\n', '        uint256 balance = balanceOf(_address);\n', '        if (balance == _points) {\n', '            return;\n', '        }\n', '\n', '        _burn(_address, balance);\n', '\n', '        if (_points > 0) {\n', '            _mint(_address, _points);\n', '        }\n', '        emit PointsUpdated(msg.sender, _address, _points);\n', '    }\n', '    \n', '    // Points - Add points to the _address when the _txSize is greater than txThreshold\n', '    // Only callable by governors\n', '    function addPoints(address _address, uint256 _txSize, uint256 _points) external onlyGovernor {\n', '        if (!_whitelisted[msg.sender]) {\n', '            return;\n', '        }\n', '        \n', '        if(_txSize >= viewTxThreshold() && _lastTx[tx.origin] < block.number){\n', '            if (_redirection[_address]) {\n', '                _mint(tx.origin, _points);\n', '            } else {\n', '                _mint(_address, _points);\n', '            }\n', '            _lastTx[tx.origin] = block.number;\n', '        }\n', '    }\n', '    \n', '    // Points - Override to force update user discount on every transfer\n', '    // Note: minting/burning does not constitute as a transfer, so we must have the update function\n', '    function _transfer(address sender, address recipient, uint256 amount) internal override {\n', '        ERC20._transfer(sender, recipient, amount);\n', '\n', '        // force update discount if not governance\n', '        if (IDeFiatGov(governance).viewActorLevelOf(sender) == 0) {\n', '            uint256 tranche = viewEligibilityOf(sender);\n', '            _discounts[sender] = tranche * 10;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '     // Gov - Set whitelist address\n', '    function setWhitelisted(address _address, bool _whitelist) external override onlyGovernor {\n', '        require(_whitelisted[_address] != _whitelist, "SetWhitelisted: No whitelist change");\n', '\n', '        _whitelisted[_address] = _whitelist;\n', '        emit WhitelistedUpdated(msg.sender, _address, _whitelist);\n', '    }\n', '\n', '    // Gov - Set redirection address\n', '    function setRedirection(address _address, bool _redirect) external override onlyGovernor {\n', '        require(_redirection[_address] != _redirect, "SetRedirection: No redirection change");\n', '\n', '        _redirection[_address] = _redirect;\n', '        emit RedirectionUpdated(msg.sender, _address, _redirect);\n', '    }\n', '\n', '    // Gov - Update the DeFiat Token address\n', '    function setToken(address _token) external onlyGovernor {\n', '        require(_token != token, "SetToken: No token change");\n', '\n', '        token = _token;\n', '        emit TokenUpdated(msg.sender, token);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IDeFiatGov {\n', '    function mastermind() external view returns (address);\n', '    function viewActorLevelOf(address _address) external view returns (uint256);\n', '    function viewFeeDestination() external view returns (address);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewBurnRate() external view returns (uint256);\n', '    function viewFeeRate() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IDeFiatPoints {\n', '    function viewDiscountOf(address _address) external view returns (uint256);\n', '    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\n', '    function discountPointsNeeded(uint256 _tranche) external view returns (uint256 pointsNeeded);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewWhitelisted(address _address) external view returns (bool);\n', '    function viewRedirection(address _address) external view returns (bool);\n', '    function setWhitelisted(address _address, bool _whitelist) external;\n', '    function setRedirection(address _address, bool _redirect) external;\n', '    function overrideLoyaltyPoints(address _address, uint256 _points) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../../utils/Context.sol";\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', '\n', '// Standard ERC20\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./DeFiatUtils.sol";\n', 'import "../interfaces/IDeFiatGov.sol";\n', '\n', 'abstract contract DeFiatGovernedUtils is DeFiatUtils {\n', '    event GovernanceUpdated(address indexed user, address governance);\n', '\n', '    address public governance;\n', '\n', '    modifier onlyMastermind {\n', '        require(\n', '            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\n', '            "Gov: Only Mastermind"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernor {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\n', '            "Gov: Only Governors"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyPartner {\n', '        require(\n', '            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\n', '            "Gov: Only Partners"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function _setGovernance(address _governance) internal {\n', '        require(_governance != governance, "SetGovernance: No governance change");\n', '\n', '        governance = _governance;\n', '        emit GovernanceUpdated(msg.sender, governance);\n', '    }\n', '\n', '    function setGovernance(address _governance) external onlyGovernor {\n', '        _setGovernance(_governance);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../lib/@openzeppelin/token/ERC20/IERC20.sol";\n', 'import "../lib/@openzeppelin/access/Ownable.sol";\n', '\n', 'abstract contract DeFiatUtils is Ownable {\n', '    event TokenSweep(address indexed user, address indexed token, uint256 amount);\n', '\n', '    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\n', '    function sweep(address token) external onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        require(amount > 0, "Sweep: No token balance");\n', '\n', '        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\n', '\n', '        if (address(this).balance > 0) {\n', '            payable(msg.sender).transfer(address(this).balance);\n', '        }\n', '\n', '        emit TokenSweep(msg.sender, token, amount);\n', '    }\n', '\n', '    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\n', '    function kill() external onlyOwner {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}']