['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-11\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(address(this), spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '// File: contracts/loopring/iface/IFeeHolder.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/// @author Kongliang Zhong - <[email\xa0protected]>\n', '/// @title IFeeHolder - A contract holding fees.\n', 'contract IFeeHolder {\n', '\n', '    event TokenWithdrawn(\n', '        address owner,\n', '        address token,\n', '        uint value\n', '    );\n', '\n', '    // A map of all fee balances; token --> owner --> balance\n', '    mapping(address => mapping(address => uint)) public feeBalances;\n', '\n', '    // A map of all the nonces for a withdrawTokenFor request\n', '    mapping(address => uint) public nonces;\n', '\n', '    /// @dev   Allows withdrawing the tokens to be burned by\n', '    ///        authorized contracts.\n', '    /// @param token The token to be used to burn buy and burn LRC\n', '    /// @param value The amount of tokens to withdraw\n', '    function withdrawBurned(\n', '        address token,\n', '        uint value\n', '        )\n', '        external\n', '        returns (bool success);\n', '\n', '    /// @dev   Allows withdrawing the fee payments funds\n', '    ///        msg.sender is the recipient of the fee and the address\n', '    ///        to which the tokens will be sent.\n', '    /// @param token The token to withdraw\n', '    /// @param value The amount of tokens to withdraw\n', '    function withdrawToken(\n', '        address token,\n', '        uint value\n', '        )\n', '        external\n', '        returns (bool success);\n', '\n', '    /// @dev   Allows withdrawing the fee payments funds by providing a\n', '    ///        a signature\n', '    function withdrawTokenFor(\n', '      address owner,\n', '      address token,\n', '      uint value,\n', '      address recipient,\n', '      uint feeValue,\n', '      address feeRecipient,\n', '      uint nonce,\n', '      bytes calldata signature\n', '      )\n', '      external\n', '      returns (bool success);\n', '\n', '    function batchAddFeeBalances(\n', '        bytes32[] calldata batch\n', '        )\n', '        external;\n', '}\n', '\n', '// File: contracts/loopring/lib/Ownable.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    constructor()\n', '        public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      newOwner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0x0), "ZERO_ADDRESS");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/loopring/impl/FeeHolderProxyOwner.sol\n', '\n', '/*\n', ' * Copyright 2019 Dolomite\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' * http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', 'pragma solidity ^0.5.13;\n', '\n', '\n', '\n', '\n', 'contract FeeHolderProxyOwner is Ownable {\n', '\n', '    using SafeERC20 for IERC20;\n', '\n', '    event FeeHolderSet(address indexed newFeeHolder, address indexed oldFeeHolder);\n', '    event TokenWithdrawn(address indexed token, address receiver, uint amount);\n', '\n', '    IFeeHolder public feeHolder;\n', '\n', '    constructor(\n', '        address _feeHolder\n', '    ) public {\n', '        feeHolder = IFeeHolder(_feeHolder);\n', '    }\n', '\n', '    // ******************************\n', '    // ***** Getters\n', '    // ******************************\n', '\n', '    function getBalancesByToken(\n', '        address token\n', '    ) public view returns (uint burnBalance, uint feeBalance) {\n', '        burnBalance = feeHolder.feeBalances(token, address(feeHolder));\n', '        feeBalance = feeHolder.feeBalances(token, address(this));\n', '    }\n', '\n', '    // ******************************\n', '    // ***** Setters and Writers\n', '    // ******************************\n', '\n', '    function executeCode(\n', '        address target,\n', '        string calldata signature,\n', '        bytes calldata data\n', '    )\n', '    external\n', '    payable\n', '    onlyOwner\n', '    returns (bytes memory) {\n', '        bytes memory callData;\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        (bool success, bytes memory returnData) = target.call.value(msg.value)(callData);\n', '        require(success, "EXECUTION_REVERTED");\n', '\n', '        return returnData;\n', '    }\n', '\n', '    function setFeeHolder(\n', '        address _feeHolder\n', '    )\n', '    external\n', '    onlyOwner {\n', '        address oldFeeHolder = address(feeHolder);\n', '        feeHolder = IFeeHolder(_feeHolder);\n', '        emit FeeHolderSet(_feeHolder, oldFeeHolder);\n', '    }\n', '\n', '    function withdrawAllFeesByTokens(\n', '        address[] calldata tokens,\n', '        address receiver\n', '    )\n', '    external\n', '    onlyOwner {\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            _withdrawAllFeesByToken(tokens[i], receiver);\n', '        }\n', '    }\n', '\n', '    function withdrawAllFeesByToken(\n', '        address token,\n', '        address receiver\n', '    )\n', '    external\n', '    onlyOwner {\n', '        _withdrawAllFeesByToken(token, receiver);\n', '    }\n', '\n', '    function _withdrawAllFeesByToken(\n', '        address token,\n', '        address receiver\n', '    ) internal {\n', '        (uint burnBalance, uint feeBalance) = getBalancesByToken(token);\n', '        feeHolder.withdrawBurned(token, burnBalance);\n', '        feeHolder.withdrawToken(token, feeBalance);\n', '\n', '        uint balance = IERC20(token).balanceOf(address(this));\n', '        IERC20(token).safeTransfer(receiver, balance);\n', '        emit TokenWithdrawn(token, receiver, balance);\n', '    }\n', '\n', '}']