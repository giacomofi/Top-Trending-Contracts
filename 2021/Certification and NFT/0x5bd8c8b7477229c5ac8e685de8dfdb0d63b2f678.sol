['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface MSiG {\n', '\n', '    function owners() external view returns (address[] memory addresses, uint256[] memory vPowers);\n', '    function request() external view returns (address destination, uint256 value, bytes memory data);\n', '    function requestProgress() external view returns (uint32 requestId, uint64 timestamp, uint16 currentVote, uint16 requiredVote);\n', '    function voteRequirement() external view returns (uint16 requiredVote, uint16 totalVote);\n', '    function hasVoted(address owner) external view returns (bool voted, uint16 vPower);\n', '    function createRequest(address destination, uint256 value, bytes memory data) external returns (bool);\n', '    function vote() external returns (bool);\n', '    function cancelRequest() external returns (bool);\n', '    function changeOwners(address[] memory nOwners, uint16[] memory vPowers, uint16 vRate) external returns (bool);\n', '\n', '    event Requested(uint256 requestId, address indexed destination, uint256 value, bytes data, uint16 currentVote, uint16 requiredVote);\n', '    event Voted(address owner, uint256 requestId, uint16 currentVote, uint16 requiredVote);\n', '    event Executed(bool status, uint256 requestId, address indexed destination, uint256 value, bytes data);\n', '    event Cancelled(uint256 requestId);\n', '    event OwnersChanged(address[] owners, uint16 requireVote, uint16 totalVote);\n', '    event Deposited(address indexed sender, uint256 value);\n', '}\n', '\n', 'contract C98MSiG is MSiG {\n', '\n', '    address[] private _owners;\n', '    mapping(address => uint16) private _votePowers;\n', '    VoteRequirement private _voteRequirement;\n', '\n', '    uint32 private _requestId;\n', '    Request private _request;\n', '    mapping(address => uint32) private _votes;\n', '    VoteProgress private _voteProgress;\n', '\n', '    /// @dev Initialize wallet, with a list of initial owners\n', "    /// @param owners_ Array of owners's address\n", '    /// @param vPowers_ Array of voting weight of the owners, owner with vPower == 0 will be ignored\n', '    /// @param requiredVote_ Number of votes needed to execute the request\n', '    constructor(address[] memory owners_, uint16[] memory vPowers_, uint16 requiredVote_) {\n', '        _changeOwners(owners_, vPowers_, requiredVote_);\n', '    }\n', '\n', '    // Data structure to store information of a request\n', '    struct Request {\n', '        address destination;\n', '        uint256 value;\n', '        bytes data;\n', '    }\n', '\n', '    // Data structure to store information for the vote of current request\n', '    struct VoteProgress {\n', '        uint32 requestId;\n', '        uint64 timestamp;\n', '        uint16 currentVote;\n', '        uint16 requiredVote;\n', '    }\n', '\n', '    // Data structure to store information about voting weight\n', '    struct VoteRequirement {\n', '        uint16 requiredVote;\n', '        uint16 totalVote;\n', '    }\n', '\n', '    modifier selfOnly() {\n', '        require(msg.sender == address(this), "C98MSiG: Wallet only");\n', '        _;\n', '    }\n', '\n', '    modifier isOwner(address owner) {\n', '        require(_votePowers[owner] > 0, "C98MSiG: Not an owner");\n', '        _;\n', '    }\n', '\n', '    modifier notOwner(address owner) {\n', '        require(_votePowers[owner] == 0, "C98MSiG: Already an owner");\n', '        _;\n', '    }\n', '\n', '    modifier validVotingPower(uint256 vPower) {\n', '        require(vPower > 0, "C98MSiG: Invalid vote weight");\n', '        _;\n', '    }\n', '\n', '    fallback() external payable {\n', '        if (msg.value > 0) {\n', '            emit Deposited(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    /// @dev enable wallet to receive ETH\n', '    receive() external payable {\n', '        if (msg.value > 0) {\n', '            emit Deposited(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    /// @dev return list of currents owners and their respective voting weight\n', "    /// @return addresses List of owners's address\n", "    /// @return vPowers List of owner's voting weight\n", '    function owners() external view override returns (address[] memory addresses, uint256[] memory vPowers) {\n', '        uint256[] memory values = new uint256[](_owners.length);\n', '        uint256 i;\n', '        for (i = 0; i < _owners.length; i++) {\n', '            values[i] = (_votePowers[_owners[i]]);\n', '        }\n', '        return (_owners, values);\n', '    }\n', '\n', '    /// @dev Return current request information\n', '    /// @return destination destination address of the recipient to interface with (address/contract...)\n', '    /// @return value value of ETH to send\n', '    /// @return data data data of the function call in ABI encoded format\n', '    function request() external view override returns (address destination, uint256 value, bytes memory data) {\n', '        Request memory req = _request;\n', '        return (req.destination, req.value, req.data);\n', '    }\n', '\n', '    /// @dev Return current number of votes vs required number of votes to execute request\n', '    /// @return requestId ID of current request\n', '    /// @return timestamp Timestamp when the request is created\n', '    /// @return currentVote Number of votes for current request\n', '    /// @return requiredVote Required number of votes to execute current request\n', '    function requestProgress() external view override returns (uint32 requestId, uint64 timestamp, uint16 currentVote, uint16 requiredVote) {\n', '        VoteProgress memory progress = _voteProgress;\n', '        return (progress.requestId, progress.timestamp, progress.currentVote, progress.requiredVote);\n', '    }\n', '\n', '    /// @dev Return required number of votes vs total number of votes of all owners\n', '    /// @return requiredVote Required number of votes to execute request\n', '    /// @return totalVote Total number of votes of all owners\n', '    function voteRequirement() external view override returns (uint16 requiredVote, uint16 totalVote) {\n', '        VoteRequirement memory requirement = _voteRequirement;\n', '        return (requirement.requiredVote, requirement.totalVote);\n', '    }\n', '\n', '    /// @dev Check whether a owner has voted\n', "    /// @return voted user's voting status\n", '    /// @return vPower voting weight of owner\n', '    function hasVoted(address owner) external view override returns (bool voted, uint16 vPower) {\n', '        VoteProgress memory progress = _voteProgress;\n', '        uint16 power = _votePowers[owner];\n', '        if (progress.requestId == 0) {\n', '            return (false, power);\n', '        }\n', '        return (progress.requestId == _votes[owner], power);\n', '    }\n', '\n', '    /// @dev Submit a new request for voting, the owner submitting request will count as voted.\n', '    /// @param destination address of the recipient to interface with (address/contract...)\n', '    /// @param value of ETH to send\n', '    /// @param data data of the function call in ABI encoded format\n', '    function createRequest(address destination, uint256 value, bytes memory data)\n', '        isOwner(msg.sender)\n', '        external override returns (bool) {\n', '        VoteProgress memory progress = _voteProgress;\n', '        require(progress.requestId == 0, "C98MSiG: Request pending");\n', '\n', '        Request memory req;\n', '        req.destination = destination;\n', '        req.value = value;\n', '        req.data = data;\n', '        progress.requestId = _requestId + 1;\n', '        progress.timestamp = uint64(block.timestamp);\n', '        progress.requiredVote = _voteRequirement.requiredVote;\n', '        _request = req;\n', '        _requestId = progress.requestId;\n', '        _voteProgress = progress;\n', '        vote();\n', '\n', '        emit Requested(progress.requestId, req.destination, req.value, req.data, progress.currentVote, progress.requiredVote);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Owner vote for the current request. Then execute the request if enough votes\n', '    function vote()\n', '        isOwner(msg.sender)\n', '        public override returns (bool) {\n', '        VoteProgress memory progress = _voteProgress;\n', '        require(progress.requestId > 0, "C98MSiG: No pending request");\n', '        if (_votes[msg.sender] < progress.requestId) {\n', '            _votes[msg.sender] = progress.requestId;\n', '            progress.currentVote += _votePowers[msg.sender];\n', '            _voteProgress = progress;\n', '            emit Voted(msg.sender, progress.requestId, progress.currentVote, progress.requiredVote);\n', '        }\n', '        if (progress.currentVote >= progress.requiredVote) {\n', '            Request memory req = _request;\n', '            (bool success,) = req.destination.call{value: req.value}(req.data);\n', '            if (success) {\n', '                delete _request;\n', '                delete _voteProgress;\n', '                Executed(true, progress.requestId, req.destination, req.value, req.data);\n', '            }\n', '            else {\n', '                Executed(false, progress.requestId, req.destination, req.value, req.data);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Cancel current request. Throw error if request does not exist\n', '    function cancelRequest()\n', '        isOwner(msg.sender)\n', '        external override returns (bool) {\n', '        VoteProgress memory progress = _voteProgress;\n', '        require(progress.requestId > 0, "C98MSiG: No pending request");\n', '        require(block.timestamp - progress.timestamp > 600, "C98MSiG: 10 mins not passed");\n', '\n', '        delete _request;\n', '        delete _voteProgress;\n', '\n', '        emit Cancelled(progress.requestId);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Add/remove/change owner, with their respective voting weight,\n', '    /// and number of votes needed to perform the request\n', "    /// @param nOwners Array of owners' address that need to change\n", '    /// @param vPowers Array of voting weight of the nOwners, vPower == 0 will remove the respective user\n', '    /// @param vRate New number of required votes to perform the request. vRate == 0 will keep the current number of required votes\n', '    function changeOwners(address[] memory nOwners, uint16[] memory vPowers, uint16 vRate)\n', '        selfOnly()\n', '        external override returns (bool) {\n', '        _changeOwners(nOwners, vPowers, vRate);\n', '        return true;\n', '    }\n', '\n', '    function _changeOwners(address[] memory nOwners, uint16[] memory vPowers, uint16 vRate) internal {\n', '        VoteRequirement memory requirement = _voteRequirement;\n', '        uint256 i;\n', '        for (i = 0; i < nOwners.length; i++) {\n', '            address nOwner = nOwners[i];\n', '            uint16 cPower = _votePowers[nOwner];\n', '            uint16 vPower = vPowers[i];\n', '            require(vPower <= 256, "C98MSiG: Invalid vRate");\n', '            if (cPower > 0) {\n', '                if (vPower == 0) {\n', '                    uint256 j;\n', '                    for(j = 0; j < _owners.length; j++) {\n', '                        if (_owners[j] == nOwner) {\n', '                            _owners[j] = _owners[_owners.length - 1];\n', '                            _owners.pop();\n', '                            delete _votes[nOwner];\n', '                            break;\n', '                        }\n', '                    }\n', '                }\n', '                requirement.totalVote -= cPower;\n', '            }\n', '            else {\n', '                if (vPower > 0) {\n', '                    _owners.push(nOwner);\n', '                }\n', '            }\n', '            _votePowers[nOwner] = vPower;\n', '            requirement.totalVote += vPower;\n', '        }\n', '        if (vRate > 0) {\n', '            requirement.requiredVote = vRate;\n', '        }\n', '        uint256 ownerCount = _owners.length;\n', '        require(requirement.requiredVote > 0, "C98MSiG: Invalid vRate");\n', '        require(requirement.requiredVote <= requirement.totalVote, "C98MSiG: Invalid vRate");\n', '        require(requirement.totalVote <= 4096, "C98MSiG: Max weight reached");\n', '        require(ownerCount > 0, "C98MSiG: At least 1 owner");\n', '        require(ownerCount <= 64, "C98MSiG: Max owner reached");\n', '        _voteRequirement = requirement;\n', '\n', '        OwnersChanged(nOwners, requirement.requiredVote, requirement.totalVote);\n', '    }\n', '}\n', '\n', 'contract C98MSiGFactory {\n', '    event Created(address indexed wallet, address[] owners);\n', '\n', '    /// @dev Create a new multisig wallet\n', '    /// @param owners_ Array of intial owners. If the list is empty, sending adress will be assigned as owner\n', '    /// @param vPowers_ Array of voting weight of the owners, owner with vPower == 0 will be ignored\n', '    /// @param requiredVote_ Number of votes needed to perform the request\n', '    function createMulitSig(address[] memory owners_, uint16[] memory vPowers_, uint16 requiredVote_)\n', '        external returns (C98MSiG wallet) {\n', '        wallet = new C98MSiG(owners_, vPowers_, requiredVote_);\n', '        emit Created(address(wallet), owners_);\n', '    }\n', '}']