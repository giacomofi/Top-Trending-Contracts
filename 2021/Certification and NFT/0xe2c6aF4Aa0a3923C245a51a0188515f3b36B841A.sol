['// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity >=0.6.0;\n', '\n', 'contract VoteBox {\n', '\n', '    event NewAdmin(address indexed newAdmin);\n', '    event Success();\n', '    event Reset();\n', '\n', '    address public admin;\n', '\n', '    bool public success = false;\n', '\n', '    constructor(address admin_) public {\n', '        admin = admin_;\n', '    }\n', '\n', '    function setAdmin(address admin_) public {\n', '        require(msg.sender == admin, "VoteBox::setAdmin: Call must come from admin.");\n', '        admin = admin_;\n', '\n', '        emit NewAdmin(admin);\n', '    }\n', '\n', '    function setSuccess() public {\n', '        require(msg.sender == admin, "VoteBox::setAdmin: Call must come from admin.");\n', '        success = true;\n', '\n', '        emit Success();\n', '    }\n', '\n', '    function reset() public {\n', '        require(msg.sender == admin, "VoteBox::setAdmin: Call must come from admin.");\n', '        success = false;\n', '\n', '        emit Reset();\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']