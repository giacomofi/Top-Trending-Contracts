['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.2;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\n', '// \n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\n', '// \n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\access\\Ownable.sol\n', '// \n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    // //only to debug\n', '    // function char(byte b) private pure returns (byte c) {\n', '    //     if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n', '    //     else return byte(uint8(b) + 0x57);\n', '    // }\n', '\n', '    // function addressToString(address x) private pure returns (string memory) {\n', '    //     bytes memory s = new bytes(40);\n', '    //     for (uint i = 0; i < 20; i++) {\n', '    //         byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '    //         byte hi = byte(uint8(b) / 16);\n', '    //         byte lo = byte(uint8(b) - 16 * uint8(hi));\n', '    //         s[2*i] = char(hi);\n', '    //         s[2*i+1] = char(lo);            \n', '    //     }\n', '    //     return strConcat("0x", string(s), "", "", "");\n', '    // }\n', '\n', '    // function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\n', '    //     bytes memory _ba = bytes(_a);\n', '    //     bytes memory _bb = bytes(_b);\n', '    //     bytes memory _bc = bytes(_c);\n', '    //     bytes memory _bd = bytes(_d);\n', '    //     bytes memory _be = bytes(_e);\n', '    //     string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '    //     bytes memory babcde = bytes(abcde);\n', '    //     uint k = 0;\n', '    //     for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '    //     for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '    //     for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '    //     for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '    //     for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '    //     return string(babcde);\n', '    // }\n', '    // //\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        // TO DEBUG...\n', '        //string memory aaa = strConcat("_owner: ", addressToString(_owner), " | _msgSender: ", addressToString(_msgSender()), " | Ownable: caller is not the owner");\n', '        //require(_owner == _msgSender(), aaa);        \n', '        //\n', '        // TO TEST... (by pass this check)\n', '        //require(1 == 1, "Ownable: 1 is not same as 1");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\Math.sol\n', '// \n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: src\\contracts\\HrsToken.sol\n', '//DappToken.sol\n', 'contract HrsToken is ERC20, Ownable {\n', '    address private _hodlerPool;\n', '\n', '    constructor() public ERC20("Hodler Rewards System Token", "HRST") {\n', '        _mint(msg.sender, 1700000000000000000000);\n', '    }\n', '\n', '    // //only to debug\n', '    // function char(byte b) private pure returns (byte c) {\n', '    //     if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n', '    //     else return byte(uint8(b) + 0x57);\n', '    // }\n', '\n', '    // function addressToString(address x) private pure returns (string memory) {\n', '    //     bytes memory s = new bytes(40);\n', '    //     for (uint i = 0; i < 20; i++) {\n', '    //         byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '    //         byte hi = byte(uint8(b) / 16);\n', '    //         byte lo = byte(uint8(b) - 16 * uint8(hi));\n', '    //         s[2*i] = char(hi);\n', '    //         s[2*i+1] = char(lo);            \n', '    //     }\n', '    //     return strConcat("0x", string(s), "", "", "");\n', '    // }\n', '\n', '    // function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\n', '    //     bytes memory _ba = bytes(_a);\n', '    //     bytes memory _bb = bytes(_b);\n', '    //     bytes memory _bc = bytes(_c);\n', '    //     bytes memory _bd = bytes(_d);\n', '    //     bytes memory _be = bytes(_e);\n', '    //     string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '    //     bytes memory babcde = bytes(abcde);\n', '    //     uint k = 0;\n', '    //     for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '    //     for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '    //     for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '    //     for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '    //     for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '    //     return string(babcde);\n', '    // }\n', '    // //\n', '\n', '    modifier onlyMinter() {\n', '        require(_hodlerPool == _msgSender(), "Ownable: caller is not the Minter");\n', '        \n', '        // TO DEBUG...\n', '        // string memory aaa = strConcat("_hodlerPool: ", addressToString(_hodlerPool), " | _msgSender: ", addressToString(_msgSender()), " | Ownable: caller is not the minter");\n', '        // require(_hodlerPool == _msgSender(), aaa);        \n', '        \n', '        //\n', '        // TO TEST... (by pass this check)\n', '        //require(1 == 1, "Ownable: 1 is not same as 1");\n', '        _;\n', '    }\n', '\n', '    function setHodlerPool(address hodlerPool) external onlyOwner\n', '    {\n', '        _hodlerPool = hodlerPool;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) external onlyMinter returns (bool) \n', '    {\n', '        _mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // function _burn(address account, uint256 amount) internal virtual {\n', '    //     require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '    //     _beforeTokenTransfer(account, address(0), amount);\n', '\n', '    //     _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '    //     _totalSupply = _totalSupply.sub(amount);\n', '    //     emit Transfer(account, address(0), amount);\n', '    // }\n', '\n', '    function burn(address account, uint256 amount) external onlyMinter {\n', '        // TODO: make sure it can only be called by HodlerPool\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: src\\contracts\\RewardDistributionRecipient.sol\n', '// pragma solidity ^0.6.0;\n', '// contract RewardDistributionRecipient is Ownable {\n', '//     address rewardDistribution;\n', '//     function notifyRewardAmount(uint256 reward) external virtual {}\n', '//     modifier onlyRewardDistribution() {\n', '//         require(_msgSender() == rewardDistribution, "Caller is not reward distribution");\n', '//         _;\n', '//     }\n', '//     function setRewardDistribution(address _rewardDistribution)\n', '//         external\n', '//         onlyOwner\n', '//     {\n', '//         rewardDistribution = _rewardDistribution;\n', '//     }\n', '// }\n', '// pragma solidity ^0.6.0;\n', '// contract IRewardDistributionRecipient is Ownable {\n', '//     address public rewardDistribution;\n', '//     function notifyRewardAmount(uint256 reward) external;\n', '//     modifier onlyRewardDistribution() {\n', '//         require(_msgSender() == rewardDistribution, "Caller is not reward distribution");\n', '//         _;\n', '//     }\n', '//     function setRewardDistribution(address _rewardDistribution)\n', '//         external\n', '//         onlyOwner\n', '//     {\n', '//         rewardDistribution = _rewardDistribution;\n', '//     }\n', '// }\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '// \n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: src\\contracts\\HodlerPool.sol\n', '//import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '//import "./TokenWrapper.sol";\n', 'contract Queue {\n', '    mapping(uint256 => address) private queue;\n', '    uint256 private _first = 1;\n', '    uint256 private _last = 0;\n', '    uint256 private _count = 0;\n', '\n', '    function enqueue(address data) external {\n', '        _last += 1;\n', '        queue[_last] = data;\n', '        _count += 1;\n', '    }\n', '\n', '    function dequeue() external returns (address data) {\n', '        require(_last >= _first);  // non-empty queue\n', '        //\n', '        data = queue[_first];\n', '        delete queue[_first];\n', '        _first += 1;\n', '        _count -= 1;\n', '    }\n', '\n', '    function count() external view returns (uint256) {\n', '        return _count;\n', '    }\n', '\n', '    function getItem(uint256 index) external view returns (address) {\n', '        uint256 correctedIndex = index + _first - 1;\n', '        return queue[correctedIndex];\n', '    }\n', '}\n', '\n', 'library Library {\n', '  struct staker {\n', '     uint256 sinceBlockNumber;\n', '     uint256 stakingBalance;\n', '     uint256 rewardsBalance; // should only be used to know how much the staker got paid already (while staking)!\n', '     bool exists;\n', '     bool isTopStaker;\n', '   }\n', '}\n', '\n', '//contract BaseHodlerPool is Ownable, RewardDistributionRecipient {\n', 'abstract contract BaseHodlerPool is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    // function printArray() public returns(uint) {\n', '    //     for (uint i = 0; i < first40Addresses.length; i++){\n', '    //         emit Log(strConcat("printArray, i: ", uint2str(i), " address: " ,addressToString(first40Addresses[i]),""));            \n', '    //     }\n', '    // }\n', '\n', '    function char(byte b) internal  pure returns (byte c) {\n', '        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n', '        else return byte(uint8(b) + 0x57);\n', '    }\n', '\n', '    function addressToString(address x) internal  pure returns (string memory) {\n', '        bytes memory s = new bytes(40);\n', '        for (uint i = 0; i < 20; i++) {\n', '            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '            byte hi = byte(uint8(b) / 16);\n', '            byte lo = byte(uint8(b) - 16 * uint8(hi));\n', '            s[2*i] = char(hi);\n', '            s[2*i+1] = char(lo);            \n', '        }\n', '        return strConcat("0x", string(s), "", "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '\n', '    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint j = _i;\n', '        uint len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = byte(uint8(48 + _i % 10));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '\n', '    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n', '        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n', '    }\n', '\n', '    function getElementPositionInArray(address[] memory array, address account) internal pure returns(uint) {    \n', '        bool foundElement = false;\n', '        uint index = 0;\n', '        for (uint i = 0; i <= array.length-1; i++){\n', '            if (array[i] == account) {\n', '                index = i;\n', '                foundElement = true;\n', '            }\n', '        }\n', '        require(foundElement == true);\n', '        //\n', '        return index;\n', '    }      \n', '\n', '    // if includeMaxNumber is true then min is 1 max is includeMaxNumber\n', '    // else min is 0 and max is (includeMaxNumber - 1)\n', '    function getRandomNumber(bool includeMaxNumber, uint256 maxNumber, address acct) internal view returns (uint256) {\n', '       uint256 randomNumber = uint256(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, acct)))%maxNumber);\n', '       if (includeMaxNumber) return randomNumber.add(1);\n', '       else return randomNumber;\n', '    }\n', '\n', '    // // converts an amount in wei to ether\n', '    // function weiToEther(uint256 amountInWei) internal pure returns(uint256) {\n', '    //     return amountInWei.div(1000000000000000000);\n', '    // }\n', '}\n', '\n', '//TokenFarm.sol\n', '//contract TokenFarm is Ownable {\n', '//contract HodlerPool is Ownable, TokenWrapper, RewardDistributionRecipient {\n', 'contract HodlerPool is BaseHodlerPool {\n', '    using SafeMath for uint256;\n', '    //using SafeERC20 for IERC20;\n', '    using SafeERC20 for HrsToken;\n', '    using Library for Library.staker;\n', '\n', '    //string public name = "Dapp Token Farm";\n', '    string public name = "Hodler Pool";\n', '    //IERC20 public rewardToken = IERC20(address(0)); // HRS Token\n', '    //HrsToken public rewardToken;\n', '    address private rewardTokenAddress; // HRS Token address\n', '    //IERC20 private stakingToken = IERC20(address(0));\n', '    //ERC20 private stakingToken = ERC20(address(0));\n', '    HrsToken private stakingToken;\n', '    //address private devFundAccount = 0xd4350eEcd2D5B7574cAF708A7e98ac4cB51304d3; // this is in kovan ...// TODO: put main net dev account address\n', '    address private devFundAccount;\n', '    //address[] public stakers;\n', '    //address[] allowedTokens;\n', '    uint private stakerLevelNULL = 999999;\n', '\n', '    uint256 private totalStakingBalance = 0; // this is the total staking balance\n', '    //uint256 private _totalSupply = 0; // this is the total supply in the pool (staked + rewards)\n', '    //uint256 private _totalStakingtTimeInBlocks = 0; // this is the total staking time in block numbers (for all users)\n', '    //\n', '    uint256[] private first40BlockNumbers = new uint256[](0);\n', '    address[] private first40Addresses = new address[](0);\n', '    uint private maxTopStakersByTime = 40;\n', '    Queue private followers = new Queue();\n', '    mapping(address => Library.staker) private _allStakers;\n', '    //\n', '\n', '    uint256 private blockStart;\n', '    //uint256 private startTime; \n', '    uint256 private periodFinish; \n', '    uint256 private penaltyPercentage = 20;\n', '\n', '    //uint256 private constant duration = 604800; // ~7 days\n', '    //uint256 private _totalSupply;\n', '    uint256 private duration;\n', '    uint256 private startTime; //= 1597172400; // 2020-08-11 19:00:00 (UTC UTC +00:00)\n', '    //uint256 private periodFinish = 0;\n', '    //uint256 private rewardRate = 0;\n', '    uint256 private rewardsPerTokenStakedPerBlock = 1000000; //0.000001\n', '    //uint256 private lastUpdateTime;\n', '    //uint256 private rewardPerTokenStored;\n', '    //mapping(address => uint256) private userRewardPerTokenPaid;\n', "    //mapping(address => uint256) private rewards; // won't be used for now as we don't allow to get rewards without exiting...\n", '\n', '    // events\n', '    event Staked(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward, string message);\n', '    event RewardAdded(uint256 reward);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event Log(string message);\n', '    event TokenTransferred(address indexed user, uint256 amount, string message);\n', '    event BurntTokens(address indexed user, uint256 amount);\n', '\n', '    constructor(address _rewardTokenAddress, address _devFundAddress) public {\n', '        rewardTokenAddress = _rewardTokenAddress;\n', '        stakingToken = HrsToken(_rewardTokenAddress);\n', '        devFundAccount = _devFundAddress;\n', '        blockStart = block.number;\n', '        startTime = block.timestamp;\n', '        periodFinish = startTime + 26 weeks; // Pool valid for 26 weeks (6 months) since contract is deployed\n', '        //duration = periodFinish - startTime;        \n', '    }    \n', '\n', '    // ideally we should move this to a library, \n', "    // for that we need to pass the arrays as parameters..but we can't do that due to solidity limitations :(\n", '    function removeElementFromArray(uint index) private {\n', '        require (index < first40BlockNumbers.length);\n', '        require (index < first40Addresses.length);\n', '        //\n', '        for (uint i = index; i<first40BlockNumbers.length-1; i++){\n', '            first40BlockNumbers[i] = first40BlockNumbers[i+1];\n', '        }\n', '        for (uint i = index; i<first40Addresses.length-1; i++){\n', '            first40Addresses[i] = first40Addresses[i+1];\n', '        }\n', '        //\n', '        first40BlockNumbers.pop();\n', '        first40Addresses.pop();\n', '    }  \n', '\n', '    function getFirst40Addresses() external view returns(address  [] memory){\n', '        return first40Addresses;\n', '    }\n', '\n', '    function isFollower(address account) external view returns(bool){\n', '        if (_allStakers[account].exists) {\n', '            if (isTopStaker(account)) \n', '                return false;\n', '            else\n', '                return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function isTopStaker(address account) public view returns (bool){\n', '    //function isTopStaker(address account) public returns (bool){\n', '        // THIS WORKS BUT IS NOT EFFICIENT\n', '        // for (uint8 i = 0; i < first40Addresses.length; i++) {\n', '        //     if (first40Addresses[i] == account)\n', '        //         return true;\n', '        // }\n', '        // return false;\n', '\n', "        // THIS DOESN'T WORK\n", '        // emit Log(strConcat("isTopStaker sinceBlockNumber: ", uint2str(_allStakers[account].sinceBlockNumber),"","",""));\n', '        // emit Log(strConcat("isTopStaker first40BlockNumbers.length: ", uint2str(first40BlockNumbers.length),"","",""));\n', '        // emit Log(strConcat("isTopStaker first40BlockNumbers[first40BlockNumbers.length -1]: ", uint2str(first40BlockNumbers[first40BlockNumbers.length -1]),"","",""));\n', '        // if (_allStakers[account].sinceBlockNumber <= first40BlockNumbers[first40BlockNumbers.length -1]) \n', '        //     return true;\n', '        // else\n', '        //     return false;\n', '\n', '        // if (_allStakers[account].exists)\n', '        //     return _allStakers[account].isTopStaker;\n', '        // else\n', '        //     return false;\n', '        return _allStakers[account].isTopStaker;\n', '    }\n', '\n', '    function getStakerLevel(address account) public view returns (uint) {\n', '        uint stakerLevel = 0;\n', '        if (isTopStaker(account)) {\n', '            uint index = getElementPositionInArray(first40Addresses, account);\n', '            stakerLevel = getStakerLevelByIndex(index);\n', '        }\n', '        return stakerLevel;\n', '    }\n', '\n', '    // function totalSupply() public view returns (uint256) {\n', '    //     return _totalSupply;\n', '    // }\n', '\n', '    function getFollowersCount() external view returns (uint256){\n', '        return followers.count();\n', '    }\n', '\n', '    function stake(uint256 amount) external checkStart {\n', '        require(amount > 0, "Cannot stake 0");\n', '        require(block.timestamp < periodFinish, "Pool has expired!");\n', '        //emit Log("staking...");\n', '        //super.stake(amount);\n', '        //printArray(); // TODO: comment it out!\n', '        totalStakingBalance = totalStakingBalance.add(amount);\n', '        //_totalSupply = _totalSupply.add(amount);\n', '        //\n', '        emit Log(strConcat("stake - msg.sender: ", addressToString(msg.sender),"","",""));\n', '        emit Log(strConcat("stake - block.number: ", uint2str(block.number),"","",""));\n', '        _allStakers[msg.sender].sinceBlockNumber = block.number;\n', '        emit Log(strConcat("stake - _allStakers[msg.sender].sinceBlockNumber: ", uint2str(_allStakers[msg.sender].sinceBlockNumber),"","",""));\n', '        _allStakers[msg.sender].stakingBalance = _allStakers[msg.sender].stakingBalance.add(amount);\n', '        _allStakers[msg.sender].rewardsBalance = 0;\n', '        _allStakers[msg.sender].exists = true;\n', '        //\n', '        if (first40BlockNumbers.length < maxTopStakersByTime) {\n', '            //emit Log("add staker to first40BlockNumbers and first40Addresses");\n', '            first40BlockNumbers.push(block.number);\n', '            first40Addresses.push(msg.sender);\n', '            _allStakers[msg.sender].isTopStaker = true;\n', '        }\n', '        else {\n', '            //emit Log("add staker to followers queue");\n', '            followers.enqueue(msg.sender);\n', '            _allStakers[msg.sender].isTopStaker = false;\n', '        }\n', '        //doUpdateReward(stakerLevelNULL);\n', '        //\n', '        //stakingBalance[msg.sender] = stakingBalance[msg.sender].add(amount);\n', '        //startedStakingAtBlockNumber[msg.sender] = block.number;\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        //\n', '        //printArray(); // TODO: comment it out!\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function getStartTime() external view returns (uint256) {\n', '        return startTime;\n', '    }\n', '\n', '    function getPeriodFinish() external view returns (uint256) {\n', '        return periodFinish;\n', '    }\n', '\n', '    function getTotalStakingBalance() external view returns (uint256) {\n', '        return totalStakingBalance;\n', '    }\n', '\n', '    function stakingBalanceOf(address account) public view returns (uint256) {\n', '        return _allStakers[account].stakingBalance;\n', '    }\n', '\n', '    function rewardsBalanceOf(address account) external view returns (uint256) {\n', '        return _allStakers[account].rewardsBalance;\n', '    }\n', '\n', '    // function totalBalanceOf(address account) external view returns (uint256) {\n', '    //     return _allStakers[account].stakingBalance.add(_allStakers[account].rewardsBalance);\n', '    // }\n', '\n', '    function getDevFundAccount() external view returns (address) {\n', '        return devFundAccount;\n', '    }\n', '\n', '    function exit() external {\n', '        emit Log(strConcat("exit - block.number: ", uint2str(block.number),"","",""));\n', '        emit Log(strConcat("earned: ", uint2str(earned(msg.sender)),"","","")); // 12.48\n', '        //emit Log("call function: exit");\n', '        uint stakerLevel = getStakerLevel(msg.sender);\n', '        unstake();\n', '        Library.staker memory staker = _allStakers[msg.sender];        \n', '        //staker.rewardsBalance = earned(msg.sender);\n', '        emit Log(strConcat("staker.stakingBalance: ", uint2str(staker.stakingBalance),"","",""));// 1\n', '        emit Log(strConcat("earned(msg.sender): ", uint2str(earned(msg.sender)),"","",""));// 12.9792\n', '        //withdraw(staker.stakingBalance, staker.rewardsBalance);\n', '        withdraw(staker.stakingBalance, earned(msg.sender), stakerLevel);\n', '        delete _allStakers[msg.sender]; // delete account from mapping\n', '        //emit Log("account deleted");\n', '        \n', '    }\n', '\n', '    function unstake() private  {\n', '        bool _isTopStaker = isTopStaker(msg.sender);\n', '        if (_isTopStaker) {\n', '            removeStaker(_isTopStaker, msg.sender);\n', '            _allStakers[msg.sender].isTopStaker = false;\n', '            _allStakers[msg.sender].exists = false;\n', '            // add staker from _allStakers (followers) to both first40BlockNumbers and first40Addresses\n', '            if (followers.count() > 0) {\n', '                address follower;\n', '                bool foundOne = false;\n', '                for (uint i = 0; i < 10; i++){\n', '                    // try max 10 times...if\n', '                    follower = followers.dequeue();\n', '                    if (_allStakers[follower].exists) {\n', '                        foundOne = true;\n', '                        break;\n', '                    }\n', '                }\n', '                if (foundOne) {\n', '                    //emit Log("foundOne == true");\n', '                    first40BlockNumbers.push(_allStakers[follower].sinceBlockNumber);\n', '                    first40Addresses.push(follower);\n', '                    _allStakers[follower].isTopStaker = true;\n', '                }\n', '                else {\n', '                    //emit Log("foundOne == false");\n', '                }\n', '            }\n', '            //\n', '        }\n', '        else {\n', '            followers.dequeue();\n', '        }\n', '    }\n', '\n', '    function removeStaker(bool _isTopStaker, address account) private {\n', '        if (_isTopStaker) {\n', '            // if sinceBlockNumber is within the top 40 it means that:\n', '            //  * we need to remove it from the top 40 array\n', '            //  * it will get some rewards depeding in the level :)\n', '            uint index = getElementPositionInArray(first40Addresses, account);\n', '            removeElementFromArray(index);\n', '        }\n', '    }\n', '\n', '    // should be payable??\n', '    function withdraw(uint256 stakingAmount, uint256 rewardsAmount, uint stakerLevel) private {\n', '        require(stakingAmount > 0, "staking amount has to be > 0");\n', '        // uint256 amountToGetIfUnstaking = amountToGetIfUnstaking(msg.sender, stakerLevel);\n', '        // emit Log(strConcat("amountToGetIfUnstaking: ", uint2str(amountToGetIfUnstaking),"","",""));\n', '        // here we pay/mint the rewards the staker is getting, this is paid to the contract, as it will be taxed and that tax will be distributed to other stakers\n', '        stakingToken.mint(address(this), rewardsAmount);\n', '        emit RewardPaid(msg.sender, rewardsAmount, "reward paid/minted (before tax)"); // 0.7436\n', '        //emit Log("call function: withdraw");\n', '        //emit Log(strConcat("stakingAmount: ", uint2str(stakingAmount),"","",""));\n', '        //emit Log(strConcat("rewardsAmount: ", uint2str(rewardsAmount),"","",""));\n', '        uint256 totalAmount = stakingAmount.add(rewardsAmount); // 1.7436\n', '        emit Log(strConcat("totalAmount: ", uint2str(totalAmount),"","",""));\n', '        uint256 taxPercentageBasedOnStakerLevel = getTaxPercentage(stakerLevel);\n', '        //uint256 taxPercentageBasedOnStakerLevel = 4;\n', '        emit Log(strConcat("taxPercentageBasedOnStakerLevel: ", uint2str(taxPercentageBasedOnStakerLevel),"","",""));\n', '        uint256 taxedAmount = totalAmount.mul(taxPercentageBasedOnStakerLevel).div(100);\n', '        uint256 actualAmount = totalAmount.sub(taxedAmount); \n', '        //require(actualAmount == amountToGetIfUnstaking);\n', '        emit Log(strConcat("actualAmount: ", uint2str(actualAmount),"","",""));\n', '        //uint256 taxedAmount = totalAmount.sub(actualAmount);\n', '        emit Log(strConcat("taxedAmount: ", uint2str(taxedAmount),"","",""));\n', '        manageTaxCollected(taxedAmount); // 0.17436\n', '        //emit Log(strConcat("taxReturn: ", uint2str(taxReturn),"","",""));\n', '        // taxReturn is the amount of rewards the staker got back from the tax he paid for being a top staker (so only if they are level 1 or higher)\n', '        //emit Log(strConcat("actualAmount: ", uint2str(actualAmount),"","",""));\n', '        //\n', '        totalStakingBalance = totalStakingBalance.sub(stakingAmount);\n', '        //_totalSupply = _totalSupply.sub(stakingAmount);\n', '        _allStakers[msg.sender].stakingBalance = 0;\n', '        _allStakers[msg.sender].rewardsBalance = 0;\n', '        //emit Log(strConcat("actualAmount: ", uint2str(actualAmount),"","","")); // 1.56924\n', '        stakingToken.safeTransfer(msg.sender, actualAmount); // this is when the actual staker gets paid (after tax)\n', '        emit Withdrawn(msg.sender, actualAmount);\n', '        //\n', '    }\n', '\n', '    function manageTaxCollected(uint256 taxedAmount) private returns (uint256) {\n', '        // this is for current plan:\n', '        // 70% top stakers\n', '        // 20% burnt (to offset inflation)\n', '        // 10% to dev fund\n', '        // uint256 tokensForTopStakers = taxedAmount.mul(70).div(100);\n', '    \t// uint256 tokensToBurn = taxedAmount.mul(20).div(100);\n', '        // uint256 tokensForDevFund = taxedAmount.mul(10).div(100);\n', '\n', '        // new current plan?    \n', '        // 90% or 100% to all top 40 stakers\n', '        // 10% to 1 random follower (in case there are at least 10 followers)\n', '        uint256 tokensForTopStakers = 0;\n', '        uint256 tokensForRandomFollower = 0;\n', '        emit Log(strConcat("followers.count(): ", uint2str(followers.count()),"","",""));\n', '        if (followers.count() > 9) {\n', '            tokensForTopStakers = taxedAmount.mul(90).div(100);\n', '            tokensForRandomFollower = taxedAmount.mul(10).div(100);\n', '            emit Log("Sending 10% of tokens from tax to a random follower, and the rest (90%) to top stakers,");\n', '        }\n', '        else {\n', '            // 100% to top stakers\n', '            tokensForTopStakers = taxedAmount;\n', '            emit Log("All tokens from tax sent to top stakers");\n', '        }\n', '        \n', '        emit Log(strConcat("taxedAmount: ", uint2str(taxedAmount),"","","")); // 0.34872\n', '        emit Log(strConcat("tokensForTopStakers: ", uint2str(tokensForTopStakers),"","","")); // 0.244104\n', '        emit Log(strConcat("tokensForRandomFollower: ", uint2str(tokensForRandomFollower),"","","")); // 0.069744\n', '        require (taxedAmount == tokensForTopStakers.add(tokensForRandomFollower), "wrong distribution of tax collected");\n', '        //\n', '        //uint256 taxReturn = distributeTokensToTopStakers(tokensForTopStakers); // no tax return as the staker cannot be in top 40 anymore\n', '        distributeTokensToTopStakers(tokensForTopStakers);\n', '        //burnTokens(tokensToBurn);\n', '        //sendTokensToDevFund(tokensForDevFund);\n', '        if (tokensForRandomFollower > 0)\n', '            sendTokensToRandomFollower(tokensForRandomFollower);\n', '            \n', '        //\n', '        // emit Log("tax collected successfully distributed");\n', '        //emit Log(strConcat("taxReturn: ", uint2str(taxReturn),"","",""));\n', '        //\n', '        //return taxReturn; // no tax return as the staker cannot be in top 40 anymore\n', '    }\n', '\n', '    function distributeTokensToTopStakers(uint256 tokensAmount) private {\n', '        // emit Log("call function: distributeTokensToTopStakers");\n', '        // distribute tokens amongst top stakers\n', '        uint256 tokensAmountLeft = tokensAmount;\n', '        for (uint8 i = 0; i < first40Addresses.length; i++) {\n', '            if (tokensAmountLeft > 0) {\n', '                uint256 rewardsForStakingAmount = getRewardsBasedOnStakingAmountScore(tokensAmount, _allStakers[first40Addresses[i]].stakingBalance);\n', '                // emit Log(strConcat("tokensAmount: ", uint2str(tokensAmount),"","",""));\n', '                // emit Log(strConcat("_allStakers[first40Addresses[i]].stakingBalance: ", uint2str(_allStakers[first40Addresses[i]].stakingBalance),"","",""));\n', '                // emit Log(strConcat("rewardsForStakingAmount: ", uint2str(rewardsForStakingAmount),"","",""));\n', '                stakingToken.safeTransfer(first40Addresses[i], rewardsForStakingAmount);\n', '                _allStakers[first40Addresses[i]].rewardsBalance = _allStakers[first40Addresses[i]].rewardsBalance.add(rewardsForStakingAmount);\n', '                tokensAmountLeft = tokensAmountLeft.sub(rewardsForStakingAmount);\n', '                emit RewardPaid(first40Addresses[i], rewardsForStakingAmount, "reward paid from distributeTokensToTopStakers");\n', '            }\n', '            else {\n', '                break;\n', '            }\n', '        }\n', '        if (tokensAmountLeft > 0) {\n', '            // emit Log(strConcat("tokensAmountLeft will be burnt... tokensAmountLeft:", uint2str(tokensAmountLeft),"","",""));\n', '            //burnTokens(tokensAmountLeft);\n', '            sendTokensToDevFund(tokensAmountLeft);\n', '        }\n', '    }\n', '\n', '    function getTopStaker() private view returns (address){\n', '        return first40Addresses[0];\n', '    }\n', '    \n', '    function getRandomNumber(uint256 maxNumber, address someAddress) public view returns (uint256) { \n', '        return getRandomNumber(true, maxNumber, someAddress);\n', '    }\n', '\n', '    function getFollower(uint index) external returns (address) { \n', '        address follower = followers.getItem(index);\n', '        emit Log(strConcat("follower: ", addressToString(follower),"","",""));\n', '        return follower;\n', '    }\n', '\n', '    function getRandomFollower() public returns (address) { \n', '    //function getRandomFollower() private view returns (address) { \n', '        uint256 randomNumber = getRandomNumber(followers.count(), getTopStaker());\n', '        emit Log(strConcat("followers.count(): ", uint2str(followers.count()),"","",""));\n', '        emit Log(strConcat("randomNumber: ", uint2str(randomNumber),"","",""));\n', '        //return followers.getItem(randomNumber);\n', '        address randomFollower = followers.getItem(randomNumber);\n', '        emit Log(strConcat("randomFollower: ", addressToString(randomFollower),"","",""));\n', '        return randomFollower;\n', '    }\n', '\n', '    function sendTokensToRandomFollower(uint256 tokensAmount) private{\n', '        // get random follower\n', '        address randomFollower = getRandomFollower();\n', '        stakingToken.safeTransfer(randomFollower, tokensAmount);\n', '        _allStakers[randomFollower].rewardsBalance = _allStakers[randomFollower].rewardsBalance.add(tokensAmount);\n', '        emit TokenTransferred(randomFollower, tokensAmount, "tokens sent to random follower");\n', '    }\n', '\n', '    function burnTokens(uint256 tokensAmount) private{\n', '        //stakingToken._burn(address(this), tokensAmount);\n', '        stakingToken.burn(address(this), tokensAmount);\n', '        emit BurntTokens(address(this), tokensAmount);\n', '    }\n', '\n', '    function sendTokensToDevFund(uint256 tokensAmount) private{\n', '        stakingToken.safeTransfer(devFundAccount, tokensAmount);\n', '        emit TokenTransferred(devFundAccount, tokensAmount, "tokens sent to dev fund");\n', '    }\n', '\n', '    function getRewardsBasedOnStakingAmountScore(uint256 totalRewardsBasedOnAmount, uint256 stakerStakingBalance) private view returns (uint256) {\n', '        // total = 100\n', '        // account1 - 10\n', '        // account2 - 4\n', '        // account3 - 1\n', '        // account4 - 55\n', '        // account5 - 30\n', '\n', '        // get staking percentage (this is the percentage that the holder has of the total staked in the pool)\n', '        uint256 stakingPercentage = stakerStakingBalance\n', '                                        .mul(100)\n', '                                        .div(totalStakingBalance);\n', '\n', '        uint256 rewardsBasedOnStakingAmountScore = stakingPercentage\n', '                                                        .mul(totalRewardsBasedOnAmount)\n', '                                                        .div(100);\n', '\n', '        //\n', '        return rewardsBasedOnStakingAmountScore;\n', '    }\n', '\n', '    \n', '\n', '    // to be called only for top stakers!!!! it onlu returns 4, 3, 2 or 1 (but not 0)\n', '    function getStakerLevelByIndex(uint index) private pure returns (uint) {\n', '        uint stakerLevel;\n', '        if (index < 10) {\n', '            stakerLevel = 4; // max level\n', '        }\n', '        else if (index < 20) {\n', '            stakerLevel = 3; // second best level\n', '        }\n', '        else if (index < 30) {\n', '            stakerLevel = 2;\n', '        }\n', '        else {\n', '            stakerLevel = 1;\n', '        }\n', '        return stakerLevel;\n', '    }\n', '\n', '    // this function is to be called from the UI\n', '    function getPosition(address account) external view returns (uint256)  {\n', '    //function getPosition(address account) external returns (uint256)  {\n', '        if (isTopStaker(account)) \n', '            return (getElementPositionInArray(first40Addresses, account) + 1);\n', '        else {\n', '            return 404;\n', '        }\n', '    }\n', '\n', '    // this function is to be called from the UI\n', '    function getTotalNumberOfStakers() external view returns (uint256)  {\n', '        return first40Addresses.length + followers.count();\n', '    }\n', '\n', '    // this function is to be called from the UI\n', '    function poolHasExpired() public view returns (bool)  {\n', '        if (block.timestamp > periodFinish)\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '    modifier checkStart(){\n', '        require(block.timestamp >= startTime,"not started");\n', '        _;\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '    //function earned(address account) public returns (uint256) {\n', '        // emit Log(strConcat("stakingBalanceOf(account): ", uint2str(stakingBalanceOf(account)),"","",""));\n', '        // emit Log(strConcat("getNumberOfBlocksStaking(): ", uint2str(getNumberOfBlocksStaking(account)),"","",""));\n', '        // emit Log(strConcat("rewardsPerTokenStakedPerBlock: ", uint2str(rewardsPerTokenStakedPerBlock),"","",""));\n', '        // emit Log(strConcat("_allStakers[account].rewardsBalance: ", uint2str(_allStakers[account].rewardsBalance),"","",""));\n', '        uint256 earnedBeforeTax;\n', '        if (poolHasExpired()) {\n', '            // the pool has expired!\n', '            // they will only get the rewards from tax collected (if anything), nothing for actually staking\n', '            //earnedBeforeTax = _allStakers[account].rewardsBalance;\n', '            earnedBeforeTax = 0;\n', '        }\n', '        else {\n', '            earnedBeforeTax = stakingBalanceOf(account)\n', '                .mul(getNumberOfBlocksStaking(account))\n', '                .div(rewardsPerTokenStakedPerBlock);\n', '                //.add(_allStakers[account].rewardsBalance);\n', '        }\n', '        //emit Log(strConcat("earnedBeforeTax: ", uint2str(earnedBeforeTax),"","",""));\n', '        return earnedBeforeTax;\n', '    }\n', '\n', '    // this function should be called when the account is staking only!\n', '    function amountToGetIfUnstaking(address account, uint stakerLevel) public view returns (uint256) {\n', '        if (stakerLevel == stakerLevelNULL)\n', '            stakerLevel = getStakerLevel(account);\n', '        // emit Log(strConcat("stakingBalanceOf(account): ", uint2str(stakingBalanceOf(account)),"","",""));\n', '        // emit Log(strConcat("earned(account): ", uint2str(earned(account)),"","",""));\n', '        uint256 amountBeforeTax = stakingBalanceOf(account).add(earned(account));\n', '        //emit Log(strConcat("amountBeforeTax: ", uint2str(amountBeforeTax),"","",""));\n', '        uint256 taxPercentageBasedOnStakerLevel = getTaxPercentage(stakerLevel);\n', '        //emit Log(strConcat("taxPercentageBasedOnStakerLevel: ", uint2str(taxPercentageBasedOnStakerLevel),"","",""));\n', '        uint256 taxToPay = amountBeforeTax.mul(taxPercentageBasedOnStakerLevel).div(100);\n', '        //emit Log(strConcat("taxToPay: ", uint2str(taxToPay),"","",""));\n', '        return amountBeforeTax.sub(taxToPay);\n', '    }\n', '\n', '    // get Tax Percentage Based On Staker Level\n', '    function getTaxPercentage(uint stakerLevel) public view returns (uint256) {\n', '        return penaltyPercentage.sub(stakerLevel.mul(4));\n', '    }\n', '\n', '    function getNumberOfBlocksStaking(address account) public view returns (uint256) {\n', '    //function getNumberOfBlocksStaking(address account) public returns (uint256) {\n', '        // emit Log(strConcat("getNumberOfBlocksStaking - account: ", addressToString(account),"","",""));\n', '        // emit Log(strConcat("getNumberOfBlocksStaking - block.number: ", uint2str(block.number),"","",""));\n', '        // emit Log(strConcat("getNumberOfBlocksStaking - _allStakers[account].sinceBlockNumber: ", uint2str(_allStakers[account].sinceBlockNumber),"","",""));\n', '        return block.number.sub(_allStakers[account].sinceBlockNumber);\n', '    }\n', '    \n', '    // only used for testing (to force blochain to advance one block number)\n', '    function skipBlockNumber() external {\n', '        emit Log(strConcat("this block.number: ", uint2str(block.number),"","",""));\n', '    }\n', '}']