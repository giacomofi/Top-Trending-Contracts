['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.12 <0.8.0;\n', '\n', 'import { IFujiAdmin } from "./IFujiAdmin.sol";\n', 'import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'contract FujiAdmin is IFujiAdmin, Ownable {\n', '  address[] private _vaults;\n', '  address private _flasher;\n', '  address private _fliquidator;\n', '  address payable private _ftreasury;\n', '  address private _controller;\n', '  address private _aWhiteList;\n', '  address private _vaultHarvester;\n', '\n', '  struct Factor {\n', '    uint64 a;\n', '    uint64 b;\n', '  }\n', '\n', '  // Bonus Factor for Flash Liquidation\n', '  Factor public bonusFlashL;\n', '\n', '  // Bonus Factor for normal Liquidation\n', '  Factor public bonusL;\n', '\n', '  constructor() public {\n', '    // 0.04\n', '    bonusFlashL.a = 1;\n', '    bonusFlashL.b = 25;\n', '\n', '    // 0.05\n', '    bonusL.a = 1;\n', '    bonusL.b = 20;\n', '  }\n', '\n', '  // Setter Functions\n', '\n', '  /**\n', '   * @dev Sets the flasher contract address\n', '   * @param _newFlasher: flasher address\n', '   */\n', '  function setFlasher(address _newFlasher) external onlyOwner {\n', '    _flasher = _newFlasher;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the fliquidator contract address\n', '   * @param _newFliquidator: new fliquidator address\n', '   */\n', '  function setFliquidator(address _newFliquidator) external onlyOwner {\n', '    _fliquidator = _newFliquidator;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the Treasury contract address\n', '   * @param _newTreasury: new Fuji Treasury address\n', '   */\n', '  function setTreasury(address payable _newTreasury) external onlyOwner {\n', '    _ftreasury = _newTreasury;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the controller contract address.\n', '   * @param _newController: controller address\n', '   */\n', '  function setController(address _newController) external onlyOwner {\n', '    _controller = _newController;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the Whitelistingcontract address\n', '   * @param _newAWhiteList: controller address\n', '   */\n', '  function setaWhitelist(address _newAWhiteList) external onlyOwner {\n', '    _aWhiteList = _newAWhiteList;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the VaultHarvester address\n', '   * @param _newVaultHarverster: controller address\n', '   */\n', '  function setVaultHarvester(address _newVaultHarverster) external onlyOwner {\n', '    _vaultHarvester = _newVaultHarverster;\n', '  }\n', '\n', '  /**\n', '   * @dev Set Factors "a" and "b" for a Struct Factor\n', '   * For bonusL; Sets the Bonus for normal Liquidation, should be < 1, a/b\n', '   * For bonusFlashL; Sets the Bonus for flash Liquidation, should be < 1, a/b\n', '   * @param _newFactorA: A number\n', '   * @param _newFactorB: A number\n', '   * @param _isbonusFlash: is bonusFlashFactor\n', '   */\n', '  function setFactor(\n', '    uint64 _newFactorA,\n', '    uint64 _newFactorB,\n', '    bool _isbonusFlash\n', '  ) external onlyOwner {\n', '    if (_isbonusFlash) {\n', '      bonusFlashL.a = _newFactorA;\n', '      bonusFlashL.b = _newFactorB;\n', '    } else {\n', '      bonusL.a = _newFactorA;\n', '      bonusL.b = _newFactorB;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Adds a Vault.\n', '   * @param _vaultAddr: Address of vault to be added\n', '   */\n', '  function addVault(address _vaultAddr) external onlyOwner {\n', '    //Loop to check if vault address is already there\n', '    _vaults.push(_vaultAddr);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides a Vault address at location in the vaults Array\n', '   * @param _position: position in the array\n', '   * @param _vaultAddr: new provider fuji address\n', '   */\n', '  function overrideVault(uint8 _position, address _vaultAddr) external onlyOwner {\n', '    _vaults[_position] = _vaultAddr;\n', '  }\n', '\n', '  // Getter Functions\n', '\n', '  function getFlasher() external view override returns (address) {\n', '    return _flasher;\n', '  }\n', '\n', '  function getFliquidator() external view override returns (address) {\n', '    return _fliquidator;\n', '  }\n', '\n', '  function getTreasury() external view override returns (address payable) {\n', '    return _ftreasury;\n', '  }\n', '\n', '  function getController() external view override returns (address) {\n', '    return _controller;\n', '  }\n', '\n', '  function getaWhiteList() external view override returns (address) {\n', '    return _aWhiteList;\n', '  }\n', '\n', '  function getVaultHarvester() external view override returns (address) {\n', '    return _vaultHarvester;\n', '  }\n', '\n', '  function getvaults() external view returns (address[] memory theVaults) {\n', '    theVaults = _vaults;\n', '  }\n', '\n', '  function getBonusFlashL() external view override returns (uint64, uint64) {\n', '    return (bonusFlashL.a, bonusFlashL.b);\n', '  }\n', '\n', '  function getBonusLiq() external view override returns (uint64, uint64) {\n', '    return (bonusL.a, bonusL.b);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.12 <0.8.0;\n', '\n', 'interface IFujiAdmin {\n', '  function getFlasher() external view returns (address);\n', '\n', '  function getFliquidator() external view returns (address);\n', '\n', '  function getController() external view returns (address);\n', '\n', '  function getTreasury() external view returns (address payable);\n', '\n', '  function getaWhiteList() external view returns (address);\n', '\n', '  function getVaultHarvester() external view returns (address);\n', '\n', '  function getBonusFlashL() external view returns (uint64, uint64);\n', '\n', '  function getBonusLiq() external view returns (uint64, uint64);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']