['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract IntermediaryBank {\n', '\n', 'using SafeMath for uint256;\n', '\n', 'address public bonusPool;\n', 'address public _admin;\n', '\n', '    event LOG_SETADMIN(\n', '        address indexed caller,\n', '        address indexed admin\n', '    );\n', '    \n', '    event LOG_SETPOOL(\n', '        address indexed caller,\n', '        address indexed pool\n', '    );\n', '    \n', '    event LOG_ETHTRANSFER(\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '\n', '\n', '   constructor(\n', '    address _pool\n', '  ) public {\n', '      _admin=msg.sender;\n', '      bonusPool=_pool;\n', '  }\n', '    function () external payable {}\n', '    function setAdmin(address b)\n', '        external\n', '    {\n', '        require(msg.sender == _admin, "ERR_NOT_ADMIN");\n', '        emit LOG_SETADMIN(msg.sender, b);\n', '        _admin = b;\n', '    }\n', '    function setBonusPool(address b)\n', '        external\n', '    {\n', '        require(msg.sender == _admin, "ERR_NOT_ADMIN");\n', '        emit LOG_SETPOOL(msg.sender, b);\n', '        bonusPool = b;\n', '    }\n', '    \n', '    function poolTransferALL()\n', '        external\n', '    {\n', '        require(msg.sender == _admin, "ERR_NOT_ADMIN");\n', '        uint256 balance=address(this).balance;\n', '        (bool success, ) =address(uint160(bonusPool)).call.value(balance)("");\n', '        require(success,"ERR contract transfer eth to bonusPool fail,maybe gas fail");\n', '        emit LOG_ETHTRANSFER(bonusPool, balance);\n', '    }\n', '    function transferPercentage(address _to, uint256 _percentage)\n', '        external\n', '    {\n', '        require(msg.sender == _admin, "ERR_NOT_ADMIN");\n', '        require(_percentage<=100, "ERR_PERCENTAGE_TOO_LARGE");\n', '        uint256 balance=(address(this).balance).mul(_percentage).div(100);\n', '        (bool success, ) =address(uint160(_to)).call.value(balance)("");\n', '        require(success,"ERR contract transfer eth fail,maybe gas fail");\n', '        emit LOG_ETHTRANSFER(_to, balance);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _rawAmount)\n', '        external\n', '    {\n', '        require(msg.sender == _admin, "ERR_NOT_ADMIN");\n', '        \n', '        uint256 balance=address(this).balance;\n', '        \n', '        require(_rawAmount<=balance, "amount exceed balance");\n', '        \n', '        (bool success, ) =address(uint160(_to)).call.value(_rawAmount)("");\n', '        require(success,"ERR contract transfer eth fail,maybe gas fail");\n', '        emit LOG_ETHTRANSFER(_to, _rawAmount);\n', '    }\n', '  \n', '}']