['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// File contracts/interfaces/IHordCongressMembersRegistry.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * IHordCongressMembersRegistry contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 21.3.21.\n', ' * Github: madjarevicn\n', ' */\n', 'interface IHordCongressMembersRegistry {\n', '    function isMember(address _address) external view returns (bool);\n', '    function getMinimalQuorum() external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/governance/HordCongress.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * HordCogress contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 18.3.21.\n', ' * Github: madjarevicn\n', ' */\n', 'contract HordCongress {\n', '    // Use SafeMath library\n', '    using SafeMath for *;\n', '\n', '    /// @notice The name of this contract\n', '    string public constant name = "HordCongress";\n', '\n', '    // Members registry contract\n', '    IHordCongressMembersRegistry membersRegistry;\n', '\n', '    /// @notice The total number of proposals\n', '    uint public proposalCount;\n', '\n', '    struct Proposal {\n', '        // Unique id for looking up a proposal\n', '        uint id;\n', '\n', '        // Creator of the proposal\n', '        address proposer;\n', '\n', '        // the ordered list of target addresses for calls to be made\n', '        address[] targets;\n', '\n', '        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '        uint[] values;\n', '\n', '        // The ordered list of function signatures to be called\n', '        string[] signatures;\n', '\n', '        // The ordered list of calldata to be passed to each call\n', '        bytes[] calldatas;\n', '\n', '        // Current number of votes in favor of this proposal\n', '        uint forVotes;\n', '\n', '        // Current number of votes in opposition to this proposal\n', '        uint againstVotes;\n', '\n', '        // Flag marking whether the proposal has been canceled\n', '        bool canceled;\n', '\n', '        // Flag marking whether the proposal has been executed\n', '        bool executed;\n', '\n', '        // Timestamp when proposal is created\n', '        uint timestamp;\n', '\n', '        // Receipts of ballots for the entire set of voters\n', '        mapping (address => Receipt) receipts;\n', '    }\n', '\n', '    /// @notice Ballot receipt record for a voter\n', '    struct Receipt {\n', '        // Whether or not a vote has been cast\n', '        bool hasVoted;\n', '\n', '        // Whether or not the voter supports the proposal\n', '        bool support;\n', '    }\n', '\n', '    /// @notice The official record of all proposals ever proposed\n', '    mapping (uint => Proposal) public proposals;\n', '\n', '    /// @notice An event emitted when a new proposal is created\n', '    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\n', '\n', '    /// @notice An event emitted when a vote has been cast on a proposal\n', '    event VoteCast(address voter, uint proposalId, bool support);\n', '\n', '    /// @notice An event emitted when a proposal has been canceled\n', '    event ProposalCanceled(uint id);\n', '\n', '    /// @notice An event emitted when a proposal has been executed\n', '    event ProposalExecuted(uint id);\n', '\n', '    /// @notice An event emitted everytime ether is received\n', '    event ReceivedEther(address sender, uint amount);\n', '\n', '    /// @notice Event which will fire every time transaction is executed\n', '    event ExecuteTransaction(address indexed target, uint value, string signature,  bytes data);\n', '\n', '    modifier onlyMember {\n', '        require(membersRegistry.isMember(msg.sender) == true, "Only HordCongress member can call this function");\n', '        _;\n', '    }\n', '\n', '    /// One time call function to set members registry contract\n', '    function setMembersRegistry(\n', '        address _membersRegistry\n', '    )\n', '    external\n', '    {\n', '        require(address(membersRegistry) == address(0x0));\n', '        membersRegistry = IHordCongressMembersRegistry(_membersRegistry);\n', '    }\n', '\n', '    function propose(\n', '        address[] memory targets,\n', '        uint[] memory values,\n', '        string[] memory signatures,\n', '        bytes[] memory calldatas,\n', '        string memory description\n', '    )\n', '    external\n', '    onlyMember\n', '    returns (uint)\n', '    {\n', '        require(\n', '            targets.length == values.length &&\n', '            targets.length == signatures.length &&\n', '            targets.length == calldatas.length,\n', '            "HordCongress::propose: proposal function information arity mismatch"\n', '        );\n', '\n', '        require(targets.length != 0, "HordCongress::propose: must provide actions");\n', '\n', '        proposalCount++;\n', '\n', '        Proposal memory newProposal = Proposal({\n', '            id: proposalCount,\n', '            proposer: msg.sender,\n', '            targets: targets,\n', '            values: values,\n', '            signatures: signatures,\n', '            calldatas: calldatas,\n', '            forVotes: 0,\n', '            againstVotes: 0,\n', '            canceled: false,\n', '            executed: false,\n', '            timestamp: block.timestamp\n', '        });\n', '\n', '        proposals[newProposal.id] = newProposal;\n', '\n', '        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, description);\n', '        return newProposal.id;\n', '    }\n', '\n', '\n', '    function castVote(\n', '        uint proposalId,\n', '        bool support\n', '    )\n', '    external\n', '    onlyMember\n', '    {\n', '        return _castVote(msg.sender, proposalId, support);\n', '    }\n', '\n', '\n', '    function execute(\n', '        uint proposalId\n', '    )\n', '    external\n', '    onlyMember\n', '    payable\n', '    {\n', '        // load the proposal\n', '        Proposal storage proposal = proposals[proposalId];\n', '        // Require that proposal is not previously executed neither cancelled\n', '        require(proposal.executed == false && proposal.canceled == false);\n', '        // Mark that proposal is executed\n', '        proposal.executed = true;\n', '        // Require that votes in favor of proposal are greater or equal to minimalQuorum\n', '        require(proposal.forVotes >= membersRegistry.getMinimalQuorum());\n', '\n', '        for (uint i = 0; i < proposal.targets.length; i++) {\n', '            bytes memory callData;\n', '\n', '            if (bytes(proposal.signatures[i]).length == 0) {\n', '                callData = proposal.calldatas[i];\n', '            } else {\n', '                callData = abi.encodePacked(bytes4(keccak256(bytes(proposal.signatures[i]))), proposal.calldatas[i]);\n', '            }\n', '\n', '            // solium-disable-next-line security/no-call-value\n', '            (bool success,) = proposal.targets[i].call.value(proposal.values[i])(callData);\n', '\n', '            // Require that transaction went through\n', '            require(success, "HordCongress::executeTransaction: Transaction execution reverted.");\n', '\n', '            // Emit event that transaction is being executed\n', '            emit ExecuteTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i]);\n', '        }\n', '\n', '        // Emit event that proposal executed\n', '        emit ProposalExecuted(proposalId);\n', '    }\n', '\n', '    function cancel(uint proposalId) external onlyMember {\n', '        Proposal storage proposal = proposals[proposalId];\n', '        // Require that proposal is not previously executed neither cancelled\n', '        require(proposal.executed == false && proposal.canceled == false);\n', '        // 3 days before proposal can get cancelled\n', '        require(block.timestamp >= proposal.timestamp + 259200);\n', '        // Proposal with reached minimalQuorum cant be cancelled\n', '        require(proposal.forVotes < membersRegistry.getMinimalQuorum(), "HordCongress:cancel: Proposal already reached quorum");\n', '        // Set that proposal is cancelled\n', '        proposal.canceled = true;\n', '        // Emit event\n', '        emit ProposalCanceled(proposalId);\n', '    }\n', '\n', '    function _castVote(address voter, uint proposalId, bool support) internal {\n', '        Proposal storage proposal = proposals[proposalId];\n', '        Receipt storage receipt = proposal.receipts[voter];\n', '        require(receipt.hasVoted == false, "HordCongress::_castVote: voter already voted");\n', '\n', '        if (support) {\n', '            proposal.forVotes = proposal.forVotes.add(1);\n', '        } else {\n', '            proposal.againstVotes = proposal.againstVotes.sub(1);\n', '        }\n', '\n', '        receipt.hasVoted = true;\n', '        receipt.support = support;\n', '\n', '        emit VoteCast(voter, proposalId, support);\n', '    }\n', '\n', '    function getActions(uint proposalId) external view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\n', '        Proposal storage p = proposals[proposalId];\n', '        return (p.targets, p.values, p.signatures, p.calldatas);\n', '    }\n', '\n', '    function getMembersRegistry()\n', '    external\n', '    view\n', '    returns (address)\n', '    {\n', '        return address(membersRegistry);\n', '    }\n', '\n', '    receive() external payable {\n', '        emit ReceivedEther(msg.sender, msg.value);\n', '    }\n', '}']