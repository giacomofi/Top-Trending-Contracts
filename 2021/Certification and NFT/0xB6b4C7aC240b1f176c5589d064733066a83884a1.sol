['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-05-25\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/interfaces/ICongressMembersRegistry.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * IHordCongressMembersRegistry contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 21.3.21.\n', ' * Github: madjarevicn\n', ' */\n', 'interface ICongressMembersRegistry {\n', '    function isMember(address _address) external view returns (bool);\n', '    function getMinimalQuorum() external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/governance/ChainportCongress.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * ChainportCongress contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 18.3.21.\n', ' * Github: madjarevicn\n', ' */\n', 'contract ChainportCongress {\n', '    /// @notice The name of this contract\n', '    string public constant name = "ChainportCongress";\n', '\n', '    // Members registry contract\n', '    ICongressMembersRegistry membersRegistry;\n', '\n', '    /// @notice The total number of proposals\n', '    uint public proposalCount;\n', '\n', '    struct Proposal {\n', '        // Unique id for looking up a proposal\n', '        uint id;\n', '\n', '        // Creator of the proposal\n', '        address proposer;\n', '\n', '        // the ordered list of target addresses for calls to be made\n', '        address[] targets;\n', '\n', '        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '        uint[] values;\n', '\n', '        // The ordered list of function signatures to be called\n', '        string[] signatures;\n', '\n', '        // The ordered list of calldata to be passed to each call\n', '        bytes[] calldatas;\n', '\n', '        // Current number of votes in favor of this proposal\n', '        uint forVotes;\n', '\n', '        // Current number of votes in opposition to this proposal\n', '        uint againstVotes;\n', '\n', '        // Flag marking whether the proposal has been canceled\n', '        bool canceled;\n', '\n', '        // Flag marking whether the proposal has been executed\n', '        bool executed;\n', '\n', '        // Timestamp when proposal is created\n', '        uint timestamp;\n', '\n', '        // Receipts of ballots for the entire set of voters\n', '        mapping (address => Receipt) receipts;\n', '    }\n', '\n', '    /// @notice Ballot receipt record for a voter\n', '    struct Receipt {\n', '        // Whether or not a vote has been cast\n', '        bool hasVoted;\n', '\n', '        // Whether or not the voter supports the proposal\n', '        bool support;\n', '    }\n', '\n', '    /// @notice The official record of all proposals ever proposed\n', '    mapping (uint => Proposal) public proposals;\n', '\n', '    /// @notice An event emitted when a new proposal is created\n', '    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\n', '\n', '    /// @notice An event emitted when a vote has been cast on a proposal\n', '    event VoteCast(address voter, uint proposalId, bool support);\n', '\n', '    /// @notice An event emitted when a proposal has been canceled\n', '    event ProposalCanceled(uint id);\n', '\n', '    /// @notice An event emitted when a proposal has been executed\n', '    event ProposalExecuted(uint id);\n', '\n', '    /// @notice An event emitted everytime ether is received\n', '    event ReceivedEther(address sender, uint amount);\n', '\n', '    /// @notice Event which will fire every time transaction is executed\n', '    event ExecuteTransaction(address indexed target, uint value, string signature,  bytes data);\n', '\n', '    modifier onlyMember {\n', '        require(membersRegistry.isMember(msg.sender) == true, "Only ChainportCongress member can call this function");\n', '        _;\n', '    }\n', '\n', '    /// One time call function to set members registry contract\n', '    function setMembersRegistry(\n', '        address _membersRegistry\n', '    )\n', '    external\n', '    {\n', '        require(address(membersRegistry) == address(0x0), "ChainportCongress:setMembersRegistry: membersRegistry is already set");\n', '        membersRegistry = ICongressMembersRegistry(_membersRegistry);\n', '    }\n', '\n', '    function propose(\n', '        address[] memory targets,\n', '        uint[] memory values,\n', '        string[] memory signatures,\n', '        bytes[] memory calldatas,\n', '        string memory description\n', '    )\n', '    external\n', '    onlyMember\n', '    returns (uint)\n', '    {\n', '        require(\n', '            targets.length == values.length &&\n', '            targets.length == signatures.length &&\n', '            targets.length == calldatas.length,\n', '            "ChainportCongress::propose: proposal function information arity mismatch"\n', '        );\n', '\n', '        require(targets.length != 0, "ChainportCongress::propose: must provide actions");\n', '\n', '        proposalCount++;\n', '\n', '        Proposal memory newProposal = Proposal({\n', '            id: proposalCount,\n', '            proposer: msg.sender,\n', '            targets: targets,\n', '            values: values,\n', '            signatures: signatures,\n', '            calldatas: calldatas,\n', '            forVotes: 0,\n', '            againstVotes: 0,\n', '            canceled: false,\n', '            executed: false,\n', '            timestamp: block.timestamp\n', '        });\n', '\n', '        proposals[newProposal.id] = newProposal;\n', '\n', '        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, description);\n', '        return newProposal.id;\n', '    }\n', '\n', '\n', '    function castVote(\n', '        uint proposalId,\n', '        bool support\n', '    )\n', '    external\n', '    onlyMember\n', '    {\n', '        return _castVote(msg.sender, proposalId, support);\n', '    }\n', '\n', '\n', '    function execute(\n', '        uint proposalId\n', '    )\n', '    external\n', '    onlyMember\n', '    payable\n', '    {\n', '        // load the proposal\n', '        Proposal storage proposal = proposals[proposalId];\n', '        // Require that proposal is not previously executed neither cancelled\n', '        require(proposal.executed == false && proposal.canceled == false);\n', '        // Mark that proposal is executed\n', '        proposal.executed = true;\n', '        // Require that votes in favor of proposal are greater or equal to minimalQuorum\n', '        require(proposal.forVotes >= membersRegistry.getMinimalQuorum());\n', '\n', '        for (uint i = 0; i < proposal.targets.length; i++) {\n', '            bytes memory callData;\n', '\n', '            if (bytes(proposal.signatures[i]).length == 0) {\n', '                callData = proposal.calldatas[i];\n', '            } else {\n', '                callData = abi.encodePacked(bytes4(keccak256(bytes(proposal.signatures[i]))), proposal.calldatas[i]);\n', '            }\n', '\n', '            // solium-disable-next-line security/no-call-value\n', '            (bool success,) = proposal.targets[i].call{value:proposal.values[i]}(callData);\n', '\n', '            // Require that transaction went through\n', '            require(success, "ChainportCongress::executeTransaction: Transaction execution reverted.");\n', '\n', '            // Emit event that transaction is being executed\n', '            emit ExecuteTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i]);\n', '        }\n', '\n', '        // Emit event that proposal executed\n', '        emit ProposalExecuted(proposalId);\n', '    }\n', '\n', '    function cancel(uint proposalId) external onlyMember {\n', '        Proposal storage proposal = proposals[proposalId];\n', '        // Require that proposal is not previously executed neither cancelled\n', '        require(proposal.executed == false && proposal.canceled == false, "ChainportCongress:cancel: Proposal already executed or canceled");\n', '        // 3 days after proposal can get cancelled\n', '        require(block.timestamp >= proposal.timestamp + 259200, "ChainportCongress:cancel: Time lock hasn\'t ended yet");\n', '        // Proposal with reached minimalQuorum cant be cancelled\n', '        require(proposal.forVotes < membersRegistry.getMinimalQuorum(), "ChainportCongress:cancel: Proposal already reached quorum");\n', '        // Set that proposal is cancelled\n', '        proposal.canceled = true;\n', '        // Emit event\n', '        emit ProposalCanceled(proposalId);\n', '    }\n', '\n', '    function _castVote(address voter, uint proposalId, bool support) internal {\n', '        Proposal storage proposal = proposals[proposalId];\n', '        Receipt storage receipt = proposal.receipts[voter];\n', '        require(receipt.hasVoted == false, "ChainportCongress::_castVote: voter already voted");\n', '\n', '        if (support) {\n', '            proposal.forVotes = add256(proposal.forVotes, 1);\n', '        } else {\n', '            proposal.againstVotes = add256(proposal.againstVotes, 1);\n', '        }\n', '\n', '        receipt.hasVoted = true;\n', '        receipt.support = support;\n', '\n', '        emit VoteCast(voter, proposalId, support);\n', '    }\n', '\n', '    function getActions(uint proposalId) external view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\n', '        Proposal storage p = proposals[proposalId];\n', '        return (p.targets, p.values, p.signatures, p.calldatas);\n', '    }\n', '\n', '    function getMembersRegistry()\n', '    external\n', '    view\n', '    returns (address)\n', '    {\n', '        return address(membersRegistry);\n', '    }\n', '\n', '    function add256(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "addition overflow");\n', '        return c;\n', '    }\n', '\n', '    receive() external payable {\n', '        emit ReceivedEther(msg.sender, msg.value);\n', '    }\n', '}']