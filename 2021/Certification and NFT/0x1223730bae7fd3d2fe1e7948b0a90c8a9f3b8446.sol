['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', '//SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity 0.8.1;\n', '\n', '// bigshortbets.com collection contract\n', 'contract BigShortBets {\n', '    //minimum to collect\n', '    uint256 constant public minETH = 1000 ether;\n', '    //maximum pay-in w/o AML/KYC\n', '    uint256 constant public noAmlMax = 9 ether;\n', '\n', '    //list of balances\n', '    mapping(address => uint256) private balances;\n', '\n', '    //you-know-who\n', '    address constant public owner = 0x23E7f318C383a5e9af702EE11e342632006A23Cc;\n', '\n', '    //flags\n', '    bool collectEnd = false;\n', '    bool failed = false;\n', '\n', '    // now + 6 months\n', '    uint256 constant public failsafe = 1629155926;\n', '\n', '    //pay in - just send ETH to contract address\n', '    receive() external payable {\n', '        require(!collectEnd, "Collect ended");\n', '        uint256 amount = msg.value + balances[msg.sender];\n', '        //if you want pay in more than 9 ETH - contact staff to KYC/AML\n', '        //and pay directly to owner address\n', '        //not KYC/AML-ed payments will be treated as a donation\n', '        require(amount <= noAmlMax, "Need KYC/AML");\n', '        balances[msg.sender] = amount;\n', '        //fail in case that somethig* happend and collection not closed in 6 months\n', '        if (block.timestamp > failsafe) {\n', '            collectEnd = true;\n', '            failed = true;\n', '        }\n', '        //*ie you-know-who dies\n', '    }\n', '\n', '    //check balance paid in - will be needed for token distribution\n', '    function blanceOf(address user) external view returns (uint256) {\n', '        return balances[user];\n', '    }\n', '\n', '    //total collected by this contract and KYC/AML-ed collect to owner address\n', '    function totalCollected() public view returns (uint256) {\n', '        return address(this).balance + address(owner).balance;\n', '    }\n', '\n', '    //withdraw ETH if collection failed\n', '    function withdraw() external {\n', '        require(failed, "Collect not failed");\n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        send(msg.sender, amount);\n', '    }\n', '\n', '    //end collecting - take ETH or fail and allow to withdraw\n', '    function end() external {\n', '        require(!collectEnd, "Collect ended");\n', '        collectEnd = true;\n', '        require(msg.sender == owner, "Only for owner");\n', '        if (totalCollected() < minETH) {\n', '            failed = true;\n', '        } else {\n', '            send(owner, address(this).balance);\n', '        }\n', '    }\n', '\n', '    //internal "gas safe" ETH send function\n', '    function send(address user, uint256 amount) private {\n', '        bool success = false;\n', '        (success, ) = address(user).call{value: amount}("");\n', '        require(success, "Send failed");\n', '    }\n', '}\n', '\n', '//rav3n_pl was here']