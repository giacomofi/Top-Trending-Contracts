['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/// SPDX-License-Identifier: MIT\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/// @title A proxy interface for The Protocol\n', '/// @author bZeroX\n', '/// @notice This is just an interface, not to be deployed itself.\n', '/// @dev This interface is to be used for the protocol interactions.\n', 'interface IBZx {\n', '    ////// Protocol //////\n', '\n', '    /// @dev adds or replaces existing proxy module\n', '    /// @param target target proxy module address\n', '    function replaceContract(address target) external;\n', '\n', '    /// @dev updates all proxy modules addreses and function signatures.\n', '    /// sigsArr and targetsArr should be of equal length\n', '    /// @param sigsArr array of function signatures\n', '    /// @param targetsArr array of target proxy module addresses\n', '    function setTargets(\n', '        string[] calldata sigsArr,\n', '        address[] calldata targetsArr\n', '    ) external;\n', '\n', '    /// @dev returns protocol module address given a function signature\n', '    /// @return module address\n', '    function getTarget(string calldata sig) external view returns (address);\n', '\n', '    ////// Protocol Settings //////\n', '\n', '    /// @dev sets price feed contract address. The contract on the addres should implement IPriceFeeds interface\n', '    /// @param newContract module address for the IPriceFeeds implementation\n', '    function setPriceFeedContract(address newContract) external;\n', '\n', '    /// @dev sets swaps contract address. The contract on the addres should implement ISwapsImpl interface\n', '    /// @param newContract module address for the ISwapsImpl implementation\n', '    function setSwapsImplContract(address newContract) external;\n', '\n', '    /// @dev sets loan pool with assets. Accepts two arrays of equal length\n', '    /// @param pools array of address of pools\n', '    /// @param assets array of addresses of assets\n', '    function setLoanPool(address[] calldata pools, address[] calldata assets)\n', '        external;\n', '\n', '    /// @dev updates list of supported tokens, it can be use also to disable or enable particualr token\n', '    /// @param addrs array of address of pools\n', '    /// @param toggles array of addresses of assets\n', '    /// @param withApprovals resets tokens to unlimited approval with the swaps integration (kyber, etc.)\n', '    function setSupportedTokens(\n', '        address[] calldata addrs,\n', '        bool[] calldata toggles,\n', '        bool withApprovals\n', '    ) external;\n', '\n', '    /// @dev sets lending fee with WEI_PERCENT_PRECISION\n', '    /// @param newValue lending fee percent\n', '    function setLendingFeePercent(uint256 newValue) external;\n', '\n', '    /// @dev sets trading fee with WEI_PERCENT_PRECISION\n', '    /// @param newValue trading fee percent\n', '    function setTradingFeePercent(uint256 newValue) external;\n', '\n', '    /// @dev sets borrowing fee with WEI_PERCENT_PRECISION\n', '    /// @param newValue borrowing fee percent\n', '    function setBorrowingFeePercent(uint256 newValue) external;\n', '\n', '    /// @dev sets affiliate fee with WEI_PERCENT_PRECISION\n', '    /// @param newValue affiliate fee percent\n', '    function setAffiliateFeePercent(uint256 newValue) external;\n', '\n', '    /// @dev sets liquidation inncetive percent per loan per token. This is the profit percent\n', '    /// that liquidator gets in the process of liquidating.\n', '    /// @param loanTokens array list of loan tokens\n', '    /// @param collateralTokens array list of collateral tokens\n', '    /// @param amounts array list of liquidation inncetive amount\n', '    function setLiquidationIncentivePercent(\n', '        address[] calldata loanTokens,\n', '        address[] calldata collateralTokens,\n', '        uint256[] calldata amounts\n', '    ) external;\n', '\n', '    /// @dev sets max swap rate slippage percent.\n', '    /// @param newAmount max swap rate slippage percent.\n', '    function setMaxDisagreement(uint256 newAmount) external;\n', '\n', '    /// TODO\n', '    function setSourceBufferPercent(uint256 newAmount) external;\n', '\n', '    /// @dev sets maximum supported swap size in ETH\n', '    /// @param newAmount max swap size in ETH.\n', '    function setMaxSwapSize(uint256 newAmount) external;\n', '\n', '    /// @dev sets fee controller address\n', '    /// @param newController address of the new fees controller\n', '    function setFeesController(address newController) external;\n', '\n', '    /// @dev withdraws lending fees to receiver. Only can be called by feesController address\n', '    /// @param tokens array of token addresses.\n', '    /// @param receiver fees receiver address\n', '    /// @return amounts array of amounts withdrawn\n', '    function withdrawFees(\n', '        address[] calldata tokens,\n', '        address receiver,\n', '        FeeClaimType feeType\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    /// @dev withdraw protocol token (BZRX) from vesting contract vBZRX\n', '    /// @param receiver address of BZRX tokens claimed\n', '    /// @param amount of BZRX token to be claimed. max is claimed if amount is greater than balance.\n', '    /// @return rewardToken reward token address\n', '    /// @return withdrawAmount amount\n', '    function withdrawProtocolToken(address receiver, uint256 amount)\n', '        external\n', '        returns (address rewardToken, uint256 withdrawAmount);\n', '\n', '    /// @dev depozit protocol token (BZRX)\n', '    /// @param amount address of BZRX tokens to deposit\n', '    function depositProtocolToken(uint256 amount) external;\n', '\n', '    function grantRewards(address[] calldata users, uint256[] calldata amounts)\n', '        external\n', '        returns (uint256 totalAmount);\n', '\n', "    // NOTE: this doesn't sanitize inputs -> inaccurate values may be returned if there are duplicates tokens input\n", '    function queryFees(address[] calldata tokens, FeeClaimType feeType)\n', '        external\n', '        view\n', '        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\n', '\n', '    function priceFeeds() external view returns (address);\n', '\n', '    function swapsImpl() external view returns (address);\n', '\n', '    function logicTargets(bytes4) external view returns (address);\n', '\n', '    function loans(bytes32) external view returns (Loan memory);\n', '\n', '    function loanParams(bytes32) external view returns (LoanParams memory);\n', '\n', "    // we don't use this yet\n", '    // function lenderOrders(address, bytes32) external returns (Order memory);\n', '    // function borrowerOrders(address, bytes32) external returns (Order memory);\n', '\n', '    function delegatedManagers(bytes32, address) external view returns (bool);\n', '\n', '    function lenderInterest(address, address)\n', '        external\n', '        view\n', '        returns (LenderInterest memory);\n', '\n', '    function loanInterest(bytes32) external view returns (LoanInterest memory);\n', '\n', '    function feesController() external view returns (address);\n', '\n', '    function lendingFeePercent() external view returns (uint256);\n', '\n', '    function lendingFeeTokensHeld(address) external view returns (uint256);\n', '\n', '    function lendingFeeTokensPaid(address) external view returns (uint256);\n', '\n', '    function borrowingFeePercent() external view returns (uint256);\n', '\n', '    function borrowingFeeTokensHeld(address) external view returns (uint256);\n', '\n', '    function borrowingFeeTokensPaid(address) external view returns (uint256);\n', '\n', '    function protocolTokenHeld() external view returns (uint256);\n', '\n', '    function protocolTokenPaid() external view returns (uint256);\n', '\n', '    function affiliateFeePercent() external view returns (uint256);\n', '\n', '    function liquidationIncentivePercent(address, address)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function loanPoolToUnderlying(address) external view returns (address);\n', '\n', '    function underlyingToLoanPool(address) external view returns (address);\n', '\n', '    function supportedTokens(address) external view returns (bool);\n', '\n', '    function maxDisagreement() external view returns (uint256);\n', '\n', '    function sourceBufferPercent() external view returns (uint256);\n', '\n', '    function maxSwapSize() external view returns (uint256);\n', '\n', '    /// @dev get list of loan pools in the system. Ordering is not guaranteed\n', '    /// @param start start index\n', '    /// @param count number of pools to return\n', '    /// @return loanPoolsList array of loan pools\n', '    function getLoanPoolsList(uint256 start, uint256 count)\n', '        external\n', '        view\n', '        returns (address[] memory loanPoolsList);\n', '\n', '    /// @dev checks whether addreess is a loan pool address\n', '    /// @return boolean\n', '    function isLoanPool(address loanPool) external view returns (bool);\n', '\n', '    ////// Loan Settings //////\n', '\n', '    /// @dev creates new loan param settings\n', '    /// @param loanParamsList array of LoanParams\n', '    /// @return loanParamsIdList array of loan ids created\n', '    function setupLoanParams(LoanParams[] calldata loanParamsList)\n', '        external\n', '        returns (bytes32[] memory loanParamsIdList);\n', '\n', '    /// @dev Deactivates LoanParams for future loans. Active loans using it are unaffected.\n', '    /// @param loanParamsIdList array of loan ids\n', '    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\n', '\n', '    /// @dev gets array of LoanParams by given ids\n', '    /// @param loanParamsIdList array of loan ids\n', '    /// @return loanParamsList array of LoanParams\n', '    function getLoanParams(bytes32[] calldata loanParamsIdList)\n', '        external\n', '        view\n', '        returns (LoanParams[] memory loanParamsList);\n', '\n', '    /// @dev Enumerates LoanParams in the system by owner\n', '    /// @param owner of the loan params\n', '    /// @param start number of loans to return\n', '    /// @param count total number of the items\n', '    /// @return loanParamsList array of LoanParams\n', '    function getLoanParamsList(\n', '        address owner,\n', '        uint256 start,\n', '        uint256 count\n', '    ) external view returns (bytes32[] memory loanParamsList);\n', '\n', '    /// @dev returns total loan principal for token address\n', '    /// @param lender address\n', '    /// @param loanToken address\n', '    /// @return total principal of the loan\n', '    function getTotalPrincipal(address lender, address loanToken)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    ////// Loan Openings //////\n', '\n', '    /// @dev This is THE function that borrows or trades on the protocol\n', '    /// @param loanParamsId id of the LoanParam created beforehand by setupLoanParams function\n', '    /// @param loanId id of existing loan, if 0, start a new loan\n', '    /// @param isTorqueLoan boolean whether it is toreque or non torque loan\n', '    /// @param initialMargin in WEI_PERCENT_PRECISION\n', '    /// @param sentAddresses array of size 4:\n', '    ///         lender: must match loan if loanId provided\n', '    ///         borrower: must match loan if loanId provided\n', '    ///         receiver: receiver of funds (address(0) assumes borrower address)\n', '    ///         manager: delegated manager of loan unless address(0)\n', '    /// @param sentValues array of size 5:\n', '    ///         newRate: new loan interest rate\n', '    ///         newPrincipal: new loan size (borrowAmount + any borrowed interest)\n', '    ///         torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\n', '    ///         loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\n', '    ///         collateralTokenReceived: total collateralToken deposit\n', '    /// @param loanDataBytes required when sending ether\n', '    /// @return principal of the loan and collateral amount\n', '    function borrowOrTradeFromPool(\n', '        bytes32 loanParamsId,\n', '        bytes32 loanId,\n', '        bool isTorqueLoan,\n', '        uint256 initialMargin,\n', '        address[4] calldata sentAddresses,\n', '        uint256[5] calldata sentValues,\n', '        bytes calldata loanDataBytes\n', '    ) external payable returns (LoanOpenData memory);\n', '\n', '    /// @dev sets/disables/enables the delegated manager for the loan\n', '    /// @param loanId id of the loan\n', '    /// @param delegated delegated manager address\n', '    /// @param toggle boolean set enabled or disabled\n', '    function setDelegatedManager(\n', '        bytes32 loanId,\n', '        address delegated,\n', '        bool toggle\n', '    ) external;\n', '\n', '    /// @dev estimates margin exposure for simulated position\n', '    /// @param loanToken address of the loan token\n', '    /// @param collateralToken address of collateral token\n', '    /// @param loanTokenSent amout of loan token sent\n', '    /// @param collateralTokenSent amount of collateral token sent\n', '    /// @param interestRate yearly interest rate\n', '    /// @param newPrincipal principal amount of the loan\n', '    /// @return estimated margin exposure amount\n', '    function getEstimatedMarginExposure(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanTokenSent,\n', '        uint256 collateralTokenSent,\n', '        uint256 interestRate,\n', '        uint256 newPrincipal\n', '    ) external view returns (uint256);\n', '\n', '    /// @dev calculates required collateral for simulated position\n', '    /// @param loanToken address of loan token\n', '    /// @param collateralToken address of collateral token\n', '    /// @param newPrincipal principal amount of the loan\n', '    /// @param marginAmount margin amount of the loan\n', '    /// @param isTorqueLoan boolean torque or non torque loan\n', '    /// @return collateralAmountRequired amount required\n', '    function getRequiredCollateral(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 newPrincipal,\n', '        uint256 marginAmount,\n', '        bool isTorqueLoan\n', '    ) external view returns (uint256 collateralAmountRequired);\n', '\n', '    function getRequiredCollateralByParams(\n', '        bytes32 loanParamsId,\n', '        uint256 newPrincipal\n', '    ) external view returns (uint256 collateralAmountRequired);\n', '\n', '    /// @dev calculates borrow amount for simulated position\n', '    /// @param loanToken address of loan token\n', '    /// @param collateralToken address of collateral token\n', '    /// @param collateralTokenAmount amount of collateral token sent\n', '    /// @param marginAmount margin amount\n', '    /// @param isTorqueLoan boolean torque or non torque loan\n', '    /// @return borrowAmount possible borrow amount\n', '    function getBorrowAmount(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 collateralTokenAmount,\n', '        uint256 marginAmount,\n', '        bool isTorqueLoan\n', '    ) external view returns (uint256 borrowAmount);\n', '\n', '    function getBorrowAmountByParams(\n', '        bytes32 loanParamsId,\n', '        uint256 collateralTokenAmount\n', '    ) external view returns (uint256 borrowAmount);\n', '\n', '    function owner() external view returns (address);\n', '\n', '    ////// Loan Closings //////\n', '\n', '    /// @dev liquidates unhealty loans\n', '    /// @param loanId id of the loan\n', '    /// @param receiver address receiving liquidated loan collateral\n', '    /// @param closeAmount amount to close denominated in loanToken\n', '    /// @return loanCloseAmount amount of the collateral token of the loan\n', '    /// @return seizedAmount sezied amount in the collateral token\n', '    /// @return seizedToken loan token address\n', '    function liquidate(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        uint256 closeAmount\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 seizedAmount,\n', '            address seizedToken\n', '        );\n', '\n', '    /// @dev rollover loan\n', '    /// @param loanId id of the loan\n', '    /// @param loanDataBytes reserved for future use.\n', '    function rollover(bytes32 loanId, bytes calldata loanDataBytes)\n', '        external\n', '        returns (address rebateToken, uint256 gasRebate);\n', '\n', '    /// @dev close position with loan token deposit\n', '    /// @param loanId id of the loan\n', '    /// @param receiver collateral token reciever address\n', '    /// @param depositAmount amount of loan token to deposit\n', '    /// @return loanCloseAmount loan close amount\n', '    /// @return withdrawAmount loan token withdraw amount\n', '    /// @return withdrawToken loan token address\n', '    function closeWithDeposit(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        uint256 depositAmount // denominated in loanToken\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 withdrawAmount,\n', '            address withdrawToken\n', '        );\n', '\n', '    /// @dev close position with swap\n', '    /// @param loanId id of the loan\n', '    /// @param receiver collateral token reciever address\n', '    /// @param swapAmount amount of loan token to swap\n', '    /// @param returnTokenIsCollateral boolean whether to return tokens is collateral\n', '    /// @param loanDataBytes reserved for future use\n', '    /// @return loanCloseAmount loan close amount\n', '    /// @return withdrawAmount loan token withdraw amount\n', '    /// @return withdrawToken loan token address\n', '    function closeWithSwap(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        uint256 swapAmount, // denominated in collateralToken\n', '        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\n', '        bytes calldata loanDataBytes\n', '    )\n', '        external\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 withdrawAmount,\n', '            address withdrawToken\n', '        );\n', '\n', '    ////// Loan Closings With Gas Token //////\n', '\n', '    /// @dev liquidates unhealty loans by using Gas token\n', '    /// @param loanId id of the loan\n', '    /// @param receiver address receiving liquidated loan collateral\n', '    /// @param gasTokenUser user address of the GAS token\n', '    /// @param closeAmount amount to close denominated in loanToken\n', '    /// @return loanCloseAmount loan close amount\n', '    /// @return seizedAmount loan token withdraw amount\n', '    /// @return seizedToken loan token address\n', '    function liquidateWithGasToken(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        address gasTokenUser,\n', '        uint256 closeAmount // denominated in loanToken\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 seizedAmount,\n', '            address seizedToken\n', '        );\n', '\n', '    /// @dev rollover loan\n', '    /// @param loanId id of the loan\n', '    /// @param gasTokenUser user address of the GAS token\n', '    function rolloverWithGasToken(\n', '        bytes32 loanId,\n', '        address gasTokenUser,\n', '        bytes calldata /*loanDataBytes*/\n', '    ) external returns (address rebateToken, uint256 gasRebate);\n', '\n', '    /// @dev close position with loan token deposit\n', '    /// @param loanId id of the loan\n', '    /// @param receiver collateral token reciever address\n', '    /// @param gasTokenUser user address of the GAS token\n', '    /// @param depositAmount amount of loan token to deposit denominated in loanToken\n', '    /// @return loanCloseAmount loan close amount\n', '    /// @return withdrawAmount loan token withdraw amount\n', '    /// @return withdrawToken loan token address\n', '    function closeWithDepositWithGasToken(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        address gasTokenUser,\n', '        uint256 depositAmount\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 withdrawAmount,\n', '            address withdrawToken\n', '        );\n', '\n', '    /// @dev close position with swap\n', '    /// @param loanId id of the loan\n', '    /// @param receiver collateral token reciever address\n', '    /// @param gasTokenUser user address of the GAS token\n', '    /// @param swapAmount amount of loan token to swap denominated in collateralToken\n', '    /// @param returnTokenIsCollateral  true: withdraws collateralToken, false: withdraws loanToken\n', '    /// @return loanCloseAmount loan close amount\n', '    /// @return withdrawAmount loan token withdraw amount\n', '    /// @return withdrawToken loan token address\n', '    function closeWithSwapWithGasToken(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        address gasTokenUser,\n', '        uint256 swapAmount,\n', '        bool returnTokenIsCollateral,\n', '        bytes calldata loanDataBytes\n', '    )\n', '        external\n', '        returns (\n', '            uint256 loanCloseAmount,\n', '            uint256 withdrawAmount,\n', '            address withdrawToken\n', '        );\n', '\n', '    ////// Loan Maintenance //////\n', '\n', '    /// @dev deposit collateral to existing loan\n', '    /// @param loanId existing loan id\n', '    /// @param depositAmount amount to deposit which must match msg.value if ether is sent\n', '    function depositCollateral(bytes32 loanId, uint256 depositAmount)\n', '        external\n', '        payable;\n', '\n', '    /// @dev withdraw collateral from existing loan\n', '    /// @param loanId existing lona id\n', '    /// @param receiver address of withdrawn tokens\n', '    /// @param withdrawAmount amount to withdraw\n', '    /// @return actualWithdrawAmount actual amount withdrawn\n', '    function withdrawCollateral(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        uint256 withdrawAmount\n', '    ) external returns (uint256 actualWithdrawAmount);\n', '\n', '    /// @dev withdraw accrued interest rate for a loan given token address\n', '    /// @param loanToken loan token address\n', '    function withdrawAccruedInterest(address loanToken) external;\n', '\n', '    /// @dev extends loan duration by depositing more collateral\n', '    /// @param loanId id of the existing loan\n', '    /// @param depositAmount amount to deposit\n', '    /// @param useCollateral boolean whether to extend using collateral or deposit amount\n', '    /// @return secondsExtended by that number of seconds loan duration was extended\n', '    function extendLoanDuration(\n', '        bytes32 loanId,\n', '        uint256 depositAmount,\n', '        bool useCollateral,\n', '        bytes calldata // for future use /*loanDataBytes*/\n', '    ) external payable returns (uint256 secondsExtended);\n', '\n', '    /// @dev reduces loan duration by withdrawing collateral\n', '    /// @param loanId id of the existing loan\n', '    /// @param receiver address to receive tokens\n', '    /// @param withdrawAmount amount to withdraw\n', '    /// @return secondsReduced by that number of seconds loan duration was extended\n', '    function reduceLoanDuration(\n', '        bytes32 loanId,\n', '        address receiver,\n', '        uint256 withdrawAmount\n', '    ) external returns (uint256 secondsReduced);\n', '\n', '    function setDepositAmount(\n', '        bytes32 loanId,\n', '        uint256 depositValueAsLoanToken,\n', '        uint256 depositValueAsCollateralToken\n', '    ) external;\n', '\n', '    function claimRewards(address receiver)\n', '        external\n', '        returns (uint256 claimAmount);\n', '\n', '    function transferLoan(bytes32 loanId, address newOwner) external;\n', '\n', '    function rewardsBalanceOf(address user)\n', '        external\n', '        view\n', '        returns (uint256 rewardsBalance);\n', '\n', '    /// @dev Gets current lender interest data totals for all loans with a specific oracle and interest token\n', '    /// @param lender The lender address\n', '    /// @param loanToken The loan token address\n', '    /// @return interestPaid The total amount of interest that has been paid to a lender so far\n', '    /// @return interestPaidDate The date of the last interest pay out, or 0 if no interest has been withdrawn yet\n', '    /// @return interestOwedPerDay The amount of interest the lender is earning per day\n', '    /// @return interestUnPaid The total amount of interest the lender is owned and not yet withdrawn\n', '    /// @return interestFeePercent The fee retained by the protocol before interest is paid to the lender\n', '    /// @return principalTotal The total amount of outstading principal the lender has loaned\n', '    function getLenderInterestData(address lender, address loanToken)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 interestPaid,\n', '            uint256 interestPaidDate,\n', '            uint256 interestOwedPerDay,\n', '            uint256 interestUnPaid,\n', '            uint256 interestFeePercent,\n', '            uint256 principalTotal\n', '        );\n', '\n', '    /// @dev Gets current interest data for a loan\n', '    /// @param loanId A unique id representing the loan\n', '    /// @return loanToken The loan token that interest is paid in\n', '    /// @return interestOwedPerDay The amount of interest the borrower is paying per day\n', '    /// @return interestDepositTotal The total amount of interest the borrower has deposited\n', '    /// @return interestDepositRemaining The amount of deposited interest that is not yet owed to a lender\n', '    function getLoanInterestData(bytes32 loanId)\n', '        external\n', '        view\n', '        returns (\n', '            address loanToken,\n', '            uint256 interestOwedPerDay,\n', '            uint256 interestDepositTotal,\n', '            uint256 interestDepositRemaining\n', '        );\n', '\n', '    /// @dev gets list of loans of particular user address\n', '    /// @param user address of the loans\n', '    /// @param start of the index\n', '    /// @param count number of loans to return\n', '    /// @param loanType type of the loan: All(0), Margin(1), NonMargin(2)\n', '    /// @param isLender whether to list lender loans or borrower loans\n', '    /// @param unsafeOnly booleat if true return only unsafe loans that are open for liquidation\n', '    /// @return loansData LoanReturnData array of loans\n', '    function getUserLoans(\n', '        address user,\n', '        uint256 start,\n', '        uint256 count,\n', '        LoanType loanType,\n', '        bool isLender,\n', '        bool unsafeOnly\n', '    ) external view returns (LoanReturnData[] memory loansData);\n', '\n', '    function getUserLoansCount(address user, bool isLender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /// @dev gets existing loan\n', '    /// @param loanId id of existing loan\n', '    /// @return loanData array of loans\n', '    function getLoan(bytes32 loanId)\n', '        external\n', '        view\n', '        returns (LoanReturnData memory loanData);\n', '\n', '    /// @dev get current active loans in the system\n', '    /// @param start of the index\n', '    /// @param count number of loans to return\n', '    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\n', '    function getActiveLoans(\n', '        uint256 start,\n', '        uint256 count,\n', '        bool unsafeOnly\n', '    ) external view returns (LoanReturnData[] memory loansData);\n', '\n', '    /// @dev get current active loans in the system\n', '    /// @param start of the index\n', '    /// @param count number of loans to return\n', '    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\n', '    /// @param isLiquidatable boolean if true return liquidatable loans only\n', '    function getActiveLoansAdvanced(\n', '        uint256 start,\n', '        uint256 count,\n', '        bool unsafeOnly,\n', '        bool isLiquidatable\n', '    ) external view returns (LoanReturnData[] memory loansData);\n', '\n', '    function getActiveLoansCount() external view returns (uint256);\n', '\n', '     // protocol holds WMATIC, 100k matic will be held as native \n', '    function withdraw(address receiver, uint256 amount) \n', '        external \n', '        returns (uint256 withdrawAmount);\n', '\n', '    function deposit() external payable;\n', '\n', '    ////// Swap External //////\n', '\n', '    /// @dev swap thru external integration\n', '    /// @param sourceToken source token address\n', '    /// @param destToken destintaion token address\n', '    /// @param receiver address to receive tokens\n', '    /// @param returnToSender TODO\n', '    /// @param sourceTokenAmount source token amount\n', '    /// @param requiredDestTokenAmount destination token amount\n', '    /// @param swapData TODO\n', '    /// @return destTokenAmountReceived destination token received\n', '    /// @return sourceTokenAmountUsed source token amount used\n', '    function swapExternal(\n', '        address sourceToken,\n', '        address destToken,\n', '        address receiver,\n', '        address returnToSender,\n', '        uint256 sourceTokenAmount,\n', '        uint256 requiredDestTokenAmount,\n', '        bytes calldata swapData\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 destTokenAmountReceived,\n', '            uint256 sourceTokenAmountUsed\n', '        );\n', '\n', '    /// @dev swap thru external integration using GAS\n', '    /// @param sourceToken source token address\n', '    /// @param destToken destintaion token address\n', '    /// @param receiver address to receive tokens\n', '    /// @param returnToSender TODO\n', '    /// @param gasTokenUser user address of the GAS token\n', '    /// @param sourceTokenAmount source token amount\n', '    /// @param requiredDestTokenAmount destination token amount\n', '    /// @param swapData TODO\n', '    /// @return destTokenAmountReceived destination token received\n', '    /// @return sourceTokenAmountUsed source token amount used\n', '    function swapExternalWithGasToken(\n', '        address sourceToken,\n', '        address destToken,\n', '        address receiver,\n', '        address returnToSender,\n', '        address gasTokenUser,\n', '        uint256 sourceTokenAmount,\n', '        uint256 requiredDestTokenAmount,\n', '        bytes calldata swapData\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 destTokenAmountReceived,\n', '            uint256 sourceTokenAmountUsed\n', '        );\n', '\n', '    /// @dev calculate simulated return of swap\n', '    /// @param sourceToken source token address\n', '    /// @param destToken destination token address\n', '    /// @param sourceTokenAmount source token amount\n', '    /// @return amoun denominated in destination token\n', '    function getSwapExpectedReturn(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceTokenAmount\n', '    ) external view returns (uint256);\n', '\n', '    struct LoanParams {\n', '        bytes32 id;\n', '        bool active;\n', '        address owner;\n', '        address loanToken;\n', '        address collateralToken;\n', '        uint256 minInitialMargin;\n', '        uint256 maintenanceMargin;\n', '        uint256 maxLoanTerm;\n', '    }\n', '\n', '    struct LoanOpenData {\n', '        bytes32 loanId;\n', '        uint256 principal;\n', '        uint256 collateral;\n', '    }\n', '\n', '    enum LoanType {\n', '        All,\n', '        Margin,\n', '        NonMargin\n', '    }\n', '\n', '    struct LoanReturnData {\n', '        bytes32 loanId;\n', '        uint96 endTimestamp;\n', '        address loanToken;\n', '        address collateralToken;\n', '        uint256 principal;\n', '        uint256 collateral;\n', '        uint256 interestOwedPerDay;\n', '        uint256 interestDepositRemaining;\n', '        uint256 startRate;\n', '        uint256 startMargin;\n', '        uint256 maintenanceMargin;\n', '        uint256 currentMargin;\n', '        uint256 maxLoanTerm;\n', '        uint256 maxLiquidatable;\n', '        uint256 maxSeizable;\n', '        uint256 depositValueAsLoanToken;\n', '        uint256 depositValueAsCollateralToken;\n', '    }\n', '\n', '    enum FeeClaimType {\n', '        All,\n', '        Lending,\n', '        Trading,\n', '        Borrowing\n', '    }\n', '\n', '    struct Loan {\n', '        bytes32 id; // id of the loan\n', '        bytes32 loanParamsId; // the linked loan params id\n', '        bytes32 pendingTradesId; // the linked pending trades id\n', '        uint256 principal; // total borrowed amount outstanding\n', '        uint256 collateral; // total collateral escrowed for the loan\n', '        uint256 startTimestamp; // loan start time\n', '        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n', '        uint256 startMargin; // initial margin when the loan opened\n', '        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\n', '        address borrower; // borrower of this loan\n', '        address lender; // lender of this loan\n', '        bool active; // if false, the loan has been fully closed\n', '    }\n', '\n', '    struct LenderInterest {\n', '        uint256 principalTotal; // total borrowed amount outstanding of asset\n', '        uint256 owedPerDay; // interest owed per day for all loans of asset\n', '        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\n', '        uint256 paidTotal; // total interest paid so far for asset\n', '        uint256 updatedTimestamp; // last update\n', '    }\n', '\n', '    struct LoanInterest {\n', '        uint256 owedPerDay; // interest owed per day for loan\n', '        uint256 depositTotal; // total escrowed interest for loan\n', '        uint256 updatedTimestamp; // last update\n', '    }\n', '}\n', '\n', 'interface IToken {\n', '    function flashBorrow(\n', '        uint256 borrowAmount,\n', '        address borrower,\n', '        address target,\n', '        string calldata signature,\n', '        bytes calldata data\n', '    ) external payable returns (bytes memory);\n', '}\n', '\n', 'interface ISwapsImpl {\n', '    function dexSwap(\n', '        address sourceTokenAddress,\n', '        address destTokenAddress,\n', '        address receiverAddress,\n', '        address returnToSenderAddress,\n', '        uint256 minSourceTokenAmount,\n', '        uint256 maxSourceTokenAmount,\n', '        uint256 requiredDestTokenAmount)\n', '        external\n', '        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\n', '\n', '    function dexExpectedRate(\n', '        address sourceTokenAddress,\n', '        address destTokenAddress,\n', '        uint256 sourceTokenAmount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IKyber {\n', '    function swapTokenToToken(\n', '        IERC20 src,\n', '        uint256 srcAmount,\n', '        IERC20 dest,\n', '        uint256 minConversionRate\n', '    ) external returns (uint256);\n', '\n', '    function getExpectedRate(\n', '        IERC20 src,\n', '        IERC20 dest,\n', '        uint256 srcQty\n', '    ) external view returns (uint256 expectedRate, uint256 slippageRate);\n', '}\n', '\n', 'interface KeeperCompatibleInterface {\n', '    /**\n', '     * @notice method that is simulated by the keepers to see if any work actually\n', '     * needs to be performed. This method does does not actually need to be\n', '     * executable, and since it is only ever simulated it can consume lots of gas.\n', '     * @dev To ensure that it is never called, you may want to add the\n', '     * cannotExecute modifier from KeeperBase to your implementation of this\n', '     * method.\n', '     * @param checkData specified in the upkeep registration so it is always the\n', '     * same for a registered upkeep. This can easily be broken down into specific\n', '     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n', '     * same contract and easily differentiated by the contract.\n', '     * @return upkeepNeeded boolean to indicate whether the keeper should call\n', '     * performUpkeep or not.\n', '     * @return performData bytes that the keeper should call performUpkeep with, if\n', '     * upkeep is needed. If you would like to encode data to decode later, try\n', '     * `abi.encode`.\n', '     */\n', '    function checkUpkeep(bytes calldata checkData)\n', '        external\n', '        returns (bool upkeepNeeded, bytes memory performData);\n', '\n', '    /**\n', '     * @notice method that is actually executed by the keepers, via the registry.\n', '     * The data returned by the checkUpkeep simulation will be passed into\n', '     * this method to actually be executed.\n', '     * @dev The input to this method should not be trusted, and the caller of the\n', '     * method should not even be restricted to any single registry. Anyone should\n', '     * be able call it, and the input should be validated, there is no guarantee\n', '     * that the data passed in is the performData returned from checkUpkeep. This\n', '     * could happen due to malicious keepers, racing keepers, or simply a state\n', '     * change while the performUpkeep transaction is waiting for confirmation.\n', '     * Always validate the data passed in.\n', '     * @param performData is the data which was passed back from the checkData\n', '     * simulation. If it is encoded, it can easily be decoded into other types by\n', '     * calling `abi.decode`. This data should not be trusted, and should be\n', "     * validated against the contract's current state.\n", '     */\n', '    function performUpkeep(bytes calldata performData) external;\n', '}\n', '\n', 'interface IKeep3rV1 {\n', '    function isKeeper(address) external returns (bool);\n', '\n', '    function worked(address keeper) external;\n', '}\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', 'contract BzxLiquidateV2 is Ownable, KeeperCompatibleInterface {\n', '    using SafeERC20 for IERC20;\n', '    IBZx public constant BZX = IBZx(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\n', '\n', '    IKyber public constant KYBER_PROXY =\n', '        IKyber(0x9AAb3f75489902f3a48495025729a0AF77d4b11e);\n', '\n', '    IKeep3rV1 public constant KP3R =\n', '        IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\n', '\n', '    IWeth public constant WETH =\n', '        IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    modifier upkeep() {\n', '        require(\n', '            KP3R.isKeeper(msg.sender),\n', '            "::isKeeper: keeper is not registered"\n', '        );\n', '        _;\n', '        KP3R.worked(msg.sender);\n', '    }\n', '\n', '    fallback() external payable {}\n', '\n', '    receive() external payable {}\n', '\n', '    function liquidateInternal(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address flashLoanToken,\n', '        bool allowLoss,\n', '        bool checkBeforeExecuting\n', '    ) internal returns (address, uint256) {\n', '        if (checkBeforeExecuting) {\n', '            IBZx.LoanReturnData memory loan = BZX.getLoan(loanId);\n', '            require(\n', '                loan.maxLiquidatable > 0 && loan.maxSeizable > 0,\n', '                "healty loan"\n', '            );\n', '        }\n', '\n', '        bytes memory b = IToken(flashLoanToken).flashBorrow(\n', '            maxLiquidatable,\n', '            address(this),\n', '            address(this),\n', '            "",\n', '            abi.encodeWithSelector(\n', '                this.executeOperation.selector, //"executeOperation(bytes32,address,address,uint256,address,bool,address)",\n', '                loanId,\n', '                loanToken,\n', '                collateralToken,\n', '                maxLiquidatable,\n', '                flashLoanToken,\n', '                allowLoss,\n', '                msg.sender\n', '            )\n', '        );\n', '\n', '        (, , , uint256 profitAmount) = abi.decode(\n', '            b,\n', '            (uint256, uint256, address, uint256)\n', '        );\n', '        return (loanToken, profitAmount);\n', '    }\n', '\n', '    function liquidate(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address flashLoanToken\n', '    ) external upkeep returns (address, uint256) {\n', '        return\n', '            liquidateInternal(\n', '                loanId,\n', '                loanToken,\n', '                collateralToken,\n', '                maxLiquidatable,\n', '                flashLoanToken,\n', '                false,\n', '                false\n', '            );\n', '    }\n', '\n', '    function liquidateCheckBeforeExecuting(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address flashLoanToken\n', '    ) external upkeep returns (address, uint256) {\n', '        return\n', '            liquidateInternal(\n', '                loanId,\n', '                loanToken,\n', '                collateralToken,\n', '                maxLiquidatable,\n', '                flashLoanToken,\n', '                false,\n', '                true\n', '            );\n', '    }\n', '\n', '    function liquidatePublic(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address flashLoanToken\n', '    ) external returns (address, uint256) {\n', '        return\n', '            liquidateInternal(\n', '                loanId,\n', '                loanToken,\n', '                collateralToken,\n', '                maxLiquidatable,\n', '                flashLoanToken,\n', '                false,\n', '                false\n', '            );\n', '    }\n', '\n', '    function liquidateAllowLoss(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address flashLoanToken,\n', '        bool checkBeforeExecuting\n', '    ) external onlyOwner returns (address, uint256) {\n', '        return\n', '            liquidateInternal(\n', '                loanId,\n', '                loanToken,\n', '                collateralToken,\n', '                maxLiquidatable,\n', '                flashLoanToken,\n', '                true,\n', '                checkBeforeExecuting\n', '            );\n', '    }\n', '\n', '    function executeOperation(\n', '        bytes32 loanId,\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 maxLiquidatable,\n', '        address iToken,\n', '        bool allowLoss,\n', '        address gasTokenUser\n', '    ) external returns (bytes memory) {\n', '        (uint256 _liquidatedLoanAmount, uint256 _liquidatedCollateral, ) = BZX\n', '        .liquidate(loanId, address(this), uint256(-1));\n', '\n', '        if (collateralToken == address(WETH) && address(this).balance != 0) {\n', '            WETH.deposit{value: address(this).balance}();\n', '        }\n', '        // his is testnet\n', '        // (uint256 _realLiquidatedLoanAmount,) = ISwapsImpl(BZX.swapsImpl()).dexSwap(\n', '        //     collateralToken,\n', '        //     loanToken,\n', '        //     address(this),\n', '        //     address(this),\n', '        //     _liquidatedCollateral,\n', '        //     _liquidatedCollateral,\n', '        //     0\n', '        // );\n', '        uint256 _realLiquidatedLoanAmount = KYBER_PROXY.swapTokenToToken(\n', '            IERC20(collateralToken),\n', '            _liquidatedCollateral,\n', '            IERC20(loanToken),\n', '            0\n', '        );\n', '\n', '        if (!allowLoss) {\n', '            require(\n', '                _realLiquidatedLoanAmount > _liquidatedLoanAmount,\n', '                "no profit"\n', '            );\n', '        }\n', '\n', '        // repay flash loan\n', '        IERC20(loanToken).safeTransfer(iToken, maxLiquidatable);\n', '\n', '        return\n', '            abi.encode(\n', '                loanToken,\n', '                uint256(_realLiquidatedLoanAmount - _liquidatedLoanAmount)\n', '            );\n', '    }\n', '\n', '    function wrapEther() public onlyOwner {\n', '        if (address(this).balance != 0) {\n', '            WETH.deposit{value: address(this).balance}();\n', '        }\n', '    }\n', '\n', '    function withdrawIERC20(IERC20 token) public onlyOwner {\n', '        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\n', '    }\n', '\n', '    function infiniteApproveIERC20(IERC20[] calldata tokens) public onlyOwner {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            if (tokens[i].allowance(address(this), address(BZX)) != 0) {\n', '                tokens[i].safeApprove(address(BZX), 0);\n', '            }\n', '            tokens[i].safeApprove(address(BZX), uint256(-1));\n', '\n', '            if (tokens[i].allowance(address(this), address(KYBER_PROXY)) != 0) {\n', '                tokens[i].safeApprove(address(KYBER_PROXY), 0);\n', '            }\n', '            tokens[i].safeApprove(address(KYBER_PROXY), uint256(-1));\n', '        }\n', '    }\n', '\n', '    // chainlink registry mainnet 0x109A81F1E0A35D4c1D0cae8aCc6597cd54b47Bc6\n', '    // chainlink registry kovan 0xAaaD7966EBE0663b8C9C6f683FB9c3e66E03467F\n', '    // link token mainnet 0x514910771AF9Ca656af840dff83E8264EcF986CA\n', '    // link token kovan 0xa36085F69e2889c224210F603D836748e7dC0088\n', '    function infiniteApproveLinkRegistry(address registry, IERC20 token)\n', '        public\n', '        onlyOwner\n', '    {\n', '        if (token.allowance(address(this), registry) != 0) {\n', '            token.safeApprove(registry, 0);\n', '        }\n', '        token.safeApprove(registry, uint256(-1));\n', '    }\n', '\n', '    // event Logger(string name, uint256 value);\n', '    // event LoggerAddress(string name, address value);\n', '    // event LoggerBytes32(string name, bytes32 value);\n', '\n', '    struct LoanReturnDataMinimal {\n', '        bytes32 loanId; // id of the loan\n', '        address loanToken; // loan token address\n', '        address collateralToken; // collateral token address\n', '        uint256 maxLiquidatable; // is the collateral you can get liquidating\n', '        uint256 maxSeizable; // is the loan you available for liquidation\n', '        address iToken; // iToken for liquidation\n', '    }\n', '\n', '    function getLiquidatableLoans(uint256 start, uint256 count)\n', '        public\n', '        view\n', '        returns (LoanReturnDataMinimal[] memory liquidatableLoans)\n', '    {\n', '        IBZx.LoanReturnData[] memory loans;\n', '        loans = BZX.getActiveLoansAdvanced(start, count, true, true);\n', '        liquidatableLoans = new LoanReturnDataMinimal[](loans.length);\n', '\n', '        for (uint256 i = 0; i < loans.length; i++) {\n', '            liquidatableLoans[i] = LoanReturnDataMinimal(\n', '                loans[i].loanId,\n', '                loans[i].loanToken,\n', '                loans[i].collateralToken,\n', '                loans[i].maxLiquidatable,\n', '                loans[i].maxSeizable,\n', '                BZX.underlyingToLoanPool(loans[i].loanToken)\n', '            );\n', '        }\n', '        // assembly {\n', '        //     mstore(liquidatableLoans, counter)\n', '        // }\n', '    }\n', '\n', '    // function isProfitalbe(IBZx.LoanReturnData memory loan)\n', '    //     public\n', '    //     pure\n', '    //     returns (bool)\n', '    // {\n', '    //     return\n', '    //         loan.currentMargin > 0 &&\n', '    //         loan.principal > 0 &&\n', '    //         loan.collateral > 0 &&\n', '    //         loan.maxLiquidatable > 0 &&\n', '    //         loan.maxSeizable > 0;\n', '    // }\n', '\n', '    function checkUpkeep(bytes calldata checkData)\n', '        external\n', '        override\n', '        returns (bool upkeepNeeded, bytes memory performData)\n', '    {\n', '        (uint256 start, uint256 count) = abi.decode(\n', '            checkData,\n', '            (uint256, uint256)\n', '        );\n', '        LoanReturnDataMinimal[] memory liquidatableLoans = getLiquidatableLoans(\n', '            start,\n', '            count\n', '        );\n', '\n', '        return (liquidatableLoans.length > 0, abi.encode(liquidatableLoans));\n', '    }\n', '\n', '    function encode(uint256 start, uint256 count)\n', '        external\n', '        pure\n', '        returns (bytes memory checkData)\n', '    {\n', '        return abi.encode(start, count);\n', '    }\n', '\n', '    function performUpkeep(bytes calldata performData) external override {\n', '        LoanReturnDataMinimal[] memory loans = abi.decode(\n', '            performData,\n', '            (LoanReturnDataMinimal[])\n', '        );\n', '        require(loans.length > 0, "Cannot execute");\n', '\n', '        // liquidation uses approximately 1.6m gas lets round to 2m. current ethereum gasLimit ~12.5m\n', '        // we agreed to liquidate just one in single performUpkeep call\n', '        address(this).call(\n', '            abi.encodeWithSelector(\n', '                this.liquidatePublic.selector,\n', '                loans[1].loanId,\n', '                loans[1].loanToken,\n', '                loans[1].collateralToken,\n', '                loans[1].maxLiquidatable,\n', '                loans[1].iToken\n', '            )\n', '        );\n', '        \n', '    }\n', '}']