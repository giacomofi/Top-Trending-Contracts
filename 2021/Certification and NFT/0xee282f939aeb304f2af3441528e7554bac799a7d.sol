['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface INUXAsset {\n', '    function availableBalanceOf(address _holder) external view returns(uint);\n', '    function scheduleReleaseStart() external;\n', '    function transferLock(address _to, uint _value) external;\n', '    function publicSaleTransferLock(address _to, uint _value) external;\n', '    function locked(address _holder) external view returns(uint, uint);\n', '    function preSaleScheduleReleaseStart() external;\n', '    function preSaleTransferLock(address _to, uint _value) external;\n', '}\n', '\n', 'contract NUXConstants {\n', '    uint constant NUX = 10**18;\n', '}\n', '\n', 'contract Readable {\n', '    function since(uint _timestamp) internal view returns(uint) {\n', '        if (not(passed(_timestamp))) {\n', '            return 0;\n', '        }\n', '        return block.timestamp - _timestamp;\n', '    }\n', '\n', '    function passed(uint _timestamp) internal view returns(bool) {\n', '        return _timestamp < block.timestamp;\n', '    }\n', '\n', '    function not(bool _condition) internal pure returns(bool) {\n', '        return !_condition;\n', '    }\n', '}\n', '\n', 'library ExtraMath {\n', '    function toUInt32(uint _a) internal pure returns(uint32) {\n', "        require(_a <= uint32(-1), 'uint32 overflow');\n", '        return uint32(_a);\n', '    }\n', '\n', '    function toUInt40(uint _a) internal pure returns(uint40) {\n', "        require(_a <= uint40(-1), 'uint40 overflow');\n", '        return uint40(_a);\n', '    }\n', '\n', '    function toUInt64(uint _a) internal pure returns(uint64) {\n', "        require(_a <= uint64(-1), 'uint64 overflow');\n", '        return uint64(_a);\n', '    }\n', '\n', '    function toUInt128(uint _a) internal pure returns(uint128) {\n', "        require(_a <= uint128(-1), 'uint128 overflow');\n", '        return uint128(_a);\n', '    }\n', '}\n', '\n', 'contract NUXSale is Ownable, NUXConstants, Readable {\n', '    using SafeERC20 for IERC20;\n', '    using ExtraMath for *;\n', '    using SafeMath for *;\n', '    INUXAsset public NUXAsset;\n', '    address payable public treasury;\n', '\n', '\n', '    struct State {\n', '        uint32 etherPriceUSD;\n', '        uint40 minimumDepositUSD;\n', '        uint40 maximumDepositUSD;\n', '        uint64 totalDepositedInUSD;\n', '        uint32 nextDepositId;\n', '        uint32 clearedDepositId;\n', '    }\n', '    State private _state;\n', '    mapping(uint => Deposit) public deposits;\n', '\n', '    uint public constant SALE_START = 1612278000; // Tuesday, February 2, 2021 3:00:00 PM UTC\n', '    uint public constant SALE_END = SALE_START + 84 hours; // Saturday, February 6, 2021 3:00:00 PM UTC\n', '\n', '    struct Deposit {\n', '        address payable user;\n', '        uint amount;\n', '        uint clearing1;\n', '        uint clearing2;\n', '        uint clearing3;\n', '        uint clearing4;\n', '    }\n', '\n', '    event DepositEvent(address _from, uint _value);\n', '    event ETHReturned(address _to, uint _amount);\n', '    event ETHPriceSet(uint _usdPerETH);\n', '    event Cleared();\n', '    event ClearingPaused(uint _lastDepositId);\n', '    event TreasurySet(address _treasury);\n', '\n', '    modifier onlyTreasury {\n', "        require(msg.sender == treasury, 'Only treasury');\n", '        _;\n', '    }\n', '\n', '    constructor(INUXAsset _nux, address payable _treasury) public {\n', '        NUXAsset = _nux;\n', '        treasury = _treasury;\n', '    }\n', '\n', '    function etherPriceUSD() public view returns(uint) {\n', '        return _state.etherPriceUSD;\n', '    }\n', '\n', '    function minimumDepositUSD() public view returns(uint) {\n', '        return _state.minimumDepositUSD;\n', '    }\n', '\n', '    function maximumDepositUSD() public view returns(uint) {\n', '        return _state.maximumDepositUSD;\n', '    }\n', '\n', '    function totalDepositedInUSD() public view returns(uint) {\n', '        return _state.totalDepositedInUSD;\n', '    }\n', '\n', '    function nextDepositId() public view returns(uint) {\n', '        return _state.nextDepositId;\n', '    }\n', '\n', '    function clearedDepositId() public view returns(uint) {\n', '        return _state.clearedDepositId;\n', '    }\n', '\n', '    function setETHPrice(uint _usdPerETH) public onlyOwner {\n', '        State memory state = _state;\n', "        require(state.etherPriceUSD == 0, 'Already set');\n", '        state.etherPriceUSD = _usdPerETH.toUInt32();\n', '        state.minimumDepositUSD = (_usdPerETH / 10).toUInt40(); // 0.1 ETH\n', '        state.maximumDepositUSD = (50 * _usdPerETH).toUInt40(); // 50 ETH\n', '        _state = state;\n', '        emit ETHPriceSet(_usdPerETH);\n', '    }\n', '\n', '    function setTreasury(address payable _treasury) public onlyOwner {\n', "        require(_treasury != address(0), 'Zero address not allowed');\n", '        treasury = _treasury;\n', '        emit TreasurySet(_treasury);\n', '    }\n', '\n', '    function saleStarted() public view returns(bool) {\n', '        return passed(SALE_START);\n', '    }\n', '\n', '    function tokensSold() public view returns(uint) {\n', '        return totalDepositedInUSD() * NUX / getSalePrice();\n', '    }\n', '\n', '    function saleEnded() public view returns(bool) {\n', '        return passed(SALE_END) || _isTokensSold(getSalePrice(), totalDepositedInUSD());\n', '    }\n', '\n', '    function _saleEnded(uint _salePrice, uint _totalDeposited) private view returns(bool) {\n', '        return passed(SALE_END) || _isTokensSold(_salePrice, _totalDeposited);\n', '    }\n', '\n', '    function ETHToUSD(uint _value) public view returns(uint) {\n', '        return _ETHToUSD(_value, etherPriceUSD());\n', '    }\n', '\n', '    function _ETHToUSD(uint _value, uint _etherPrice) private pure returns(uint) {\n', '        return (_value * _etherPrice) / 1 ether;\n', '    }\n', '\n', '    function USDtoETH(uint _value) public view returns(uint) {\n', '        return (_value * 1 ether) / etherPriceUSD();\n', '    }\n', '\n', '    function USDToNUX(uint _value) public view returns(uint) {\n', '        return (_value * NUX) / getSalePrice();\n', '    }\n', '\n', '    function NUXToUSD(uint _value) public view returns(uint) {\n', '        return (_value * getSalePrice()) / NUX;\n', '    }\n', '\n', '    function ETHToNUX(uint _value) public view returns(uint) {\n', '        return _ETHToNUX(_value, etherPriceUSD(), getSalePrice());\n', '    }\n', '\n', '    function NUXToETH(uint _value) public view returns(uint) {\n', '        return _NUXToETH(_value, etherPriceUSD(), getSalePrice());\n', '    }\n', '\n', '    function _ETHToNUX(uint _value, uint _ethPrice, uint _salePrice) private pure returns(uint) {\n', '        return _value * _ethPrice / _salePrice;\n', '    }\n', '\n', '    function _NUXToETH(uint _value, uint _ethPrice, uint _salePrice) private pure returns(uint) {\n', '        return _value * _salePrice / _ethPrice;\n', '    }\n', '\n', '    function getSalePrice() public view returns(uint) {\n', '        return _getSalePrice(totalDepositedInUSD());\n', '    }\n', '\n', '    function _getSalePrice(uint _totalDeposited) private view returns(uint) {\n', '        if (_isTokensSold(2500000, _totalDeposited) || not(passed(SALE_START + 12 hours))) {\n', '            return 2500000; // 2.5 USD\n', '        } else if (_isTokensSold(1830000, _totalDeposited) || not(passed(SALE_START + 24 hours))) {\n', '            return 1830000; // 1.83 USD\n', '        } else if (_isTokensSold(1350000, _totalDeposited) || not(passed(SALE_START + 36 hours))) {\n', '            return 1350000; // 1.35 USD\n', '        } else if (_isTokensSold(990000, _totalDeposited) || not(passed(SALE_START + 48 hours))) {\n', '            return 990000; // 0.99 USD\n', '        } else if (_isTokensSold(730000, _totalDeposited) || not(passed(SALE_START + 60 hours))){\n', '            return 730000; // 0.73 USD\n', '        } else if (_isTokensSold(530000, _totalDeposited) || not(passed(SALE_START + 72 hours))) {\n', '            return 530000; // 0.53 USD\n', '        } else {\n', '            return 350000; // 0.35 USD\n', '        }\n', '    }\n', '\n', '    function _isTokensSold(uint _price, uint _totalDeposited) internal pure returns(bool) {\n', '        return ((_totalDeposited * NUX) / _price) >= (4000000 * NUX);\n', '    }\n', '\n', '    function () external payable {\n', '        if (msg.sender == treasury) {\n', '            return;\n', '        }\n', '        _deposit();\n', '    }\n', '\n', '    function depositETH() public payable {\n', '        _deposit();\n', '    }\n', '\n', '    function _deposit() internal {\n', '        State memory state = _state;\n', '        treasury.transfer(msg.value);\n', '        uint usd = _ETHToUSD(msg.value, state.etherPriceUSD);\n', "        require(saleStarted(), 'Public sale not started yet');\n", "        require(not(_saleEnded(_getSalePrice(state.totalDepositedInUSD), state.totalDepositedInUSD)), 'Public sale already ended');\n", "        require(usd >= uint(state.minimumDepositUSD), 'Minimum deposit not met');\n", "        require(usd <= uint(state.maximumDepositUSD), 'Maximum deposit reached');\n", '\n', '        deposits[state.nextDepositId] = Deposit(msg.sender, msg.value, 1, 1, 1, 1);\n', '        state.nextDepositId = (state.nextDepositId.add(1)).toUInt32();\n', '\n', '        state.totalDepositedInUSD = (state.totalDepositedInUSD.add(usd)).toUInt64();\n', '        _state = state;\n', '        emit DepositEvent(msg.sender, msg.value);\n', '    }\n', '\n', '    function clearing() public onlyOwner {\n', '        State memory state = _state;\n', '        uint salePrice = _getSalePrice(state.totalDepositedInUSD);\n', "        require(_saleEnded(salePrice, state.totalDepositedInUSD), 'Public sale not ended yet');\n", "        require(state.nextDepositId > state.clearedDepositId, 'Clearing finished');\n", '        INUXAsset nuxAsset = NUXAsset;\n', '\n', '        (, uint lockedBalance) = nuxAsset.locked(address(this));\n', '        for (uint i = state.clearedDepositId; i < state.nextDepositId; i++) {\n', '            if (gasleft() < 500000) {\n', '                state.clearedDepositId = i.toUInt32();\n', '                _state = state;\n', '                emit ClearingPaused(i);\n', '                return;\n', '            }\n', '            Deposit memory deposit = deposits[i];\n', '            delete deposits[i];\n', '\n', '            uint nux = _ETHToNUX(deposit.amount, state.etherPriceUSD, salePrice);\n', '            if (lockedBalance >= nux) {\n', '                nuxAsset.publicSaleTransferLock(deposit.user, nux);\n', '                lockedBalance = lockedBalance - nux;\n', '            } else if (lockedBalance > 0) {\n', '                nuxAsset.publicSaleTransferLock(deposit.user, lockedBalance);\n', '                uint tokensLeftToETH = nux - lockedBalance;\n', '                uint ethAmount = _NUXToETH(tokensLeftToETH, state.etherPriceUSD, salePrice);\n', '                lockedBalance = 0;\n', '                deposit.user.transfer(ethAmount);\n', '                emit ETHReturned(deposit.user, ethAmount);\n', '            } else {\n', '                deposit.user.transfer(deposit.amount);\n', '                emit ETHReturned(deposit.user, deposit.amount);\n', '            }\n', '        }\n', '        state.clearedDepositId = state.nextDepositId;\n', '\n', '        if (lockedBalance > 0) {\n', '            nuxAsset.publicSaleTransferLock(address(0), lockedBalance);\n', '        }\n', '\n', '        _state = state;\n', '        emit Cleared();\n', '    }\n', '\n', '    function recoverTokens(IERC20 _token, address _to, uint _value) public onlyTreasury {\n', '        _token.safeTransfer(_to, _value);\n', '    }\n', '\n', '    function recoverETH() public onlyTreasury {\n', '        treasury.transfer(address(this).balance);\n', '    }\n', '\n', '}']