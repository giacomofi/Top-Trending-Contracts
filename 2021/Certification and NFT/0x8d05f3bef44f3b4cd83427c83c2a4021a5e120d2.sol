['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(\n', '                token,\n', '                abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IFarmFactory.sol\n', '\n', 'interface IFarmFactory {\n', '    function userEnteredFarm(address _user) external;\n', '\n', '    function userLeftFarm(address _user) external;\n', '\n', '    function addFarm(address _farmAddress) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IFarm.sol\n', '\n', 'interface IFarm {\n', '    function owner() external view returns (address);\n', '}\n', '\n', '// File: contracts/Vesting.sol\n', '\n', 'contract Vesting is ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '    IERC20 public token;\n', '    uint256 public vestingDuration; // 1170000 blocks ~ 180 days\n', '    address public farm;\n', '\n', '    struct VestingInfo {\n', '        uint256 amount;\n', '        uint256 startBlock;\n', '        uint256 claimedAmount;\n', '    }\n', '\n', '    // user address => vestingInfo[]\n', '    mapping(address => VestingInfo[]) private _userToVestingList;\n', '\n', '    modifier onlyFarm() {\n', '        require(msg.sender == farm, "Vesting: FORBIDDEN");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFarmOwner() {\n', '        require(msg.sender == IFarm(farm).owner(), "Vesting: FORBIDDEN");\n', '        _;\n', '    }\n', '\n', '    constructor(address _token, uint256 _vestingDuration) {\n', '        token = IERC20(_token);\n', '        require(_vestingDuration > 0, "Vesting: Invalid duration");\n', '\n', '        vestingDuration = _vestingDuration;\n', '        farm = msg.sender;\n', '    }\n', '\n', '    function addVesting(address _user, uint256 _amount) external onlyFarm {\n', '        token.safeTransferFrom(msg.sender, address(this), _amount);\n', '        VestingInfo memory info = VestingInfo(_amount, block.number, 0);\n', '        _userToVestingList[_user].push(info);\n', '    }\n', '\n', '    function claimVesting(uint256 _index) external nonReentrant {\n', '        _claimVestingInternal(_index);\n', '    }\n', '\n', '    function claimTotalVesting() external nonReentrant {\n', '        uint256 count = _userToVestingList[msg.sender].length;\n', '        for (uint256 _index = 0; _index < count; _index++) {\n', '            if (_getVestingClaimableAmount(msg.sender, _index) > 0) {\n', '                _claimVestingInternal(_index);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _claimVestingInternal(uint256 _index) internal {\n', '        require(_index < _userToVestingList[msg.sender].length, "Vesting: Invalid index");\n', '        uint256 claimableAmount = _getVestingClaimableAmount(msg.sender, _index);\n', '        require(claimableAmount > 0, "Vesting: Nothing to claim");\n', '        _userToVestingList[msg.sender][_index].claimedAmount =\n', '            _userToVestingList[msg.sender][_index].claimedAmount +\n', '            claimableAmount;\n', '        require(token.transfer(msg.sender, claimableAmount), "Vesting: transfer failed");\n', '    }\n', '\n', '    function _getVestingClaimableAmount(address _user, uint256 _index)\n', '        internal\n', '        view\n', '        returns (uint256 claimableAmount)\n', '    {\n', '        VestingInfo memory info = _userToVestingList[_user][_index];\n', '        if (block.number <= info.startBlock) return 0;\n', '        uint256 passedBlocks = block.number - info.startBlock;\n', '\n', '        uint256 releasedAmount;\n', '        if (passedBlocks >= vestingDuration) {\n', '            releasedAmount = info.amount;\n', '        } else {\n', '            releasedAmount = (info.amount * passedBlocks) / vestingDuration;\n', '        }\n', '\n', '        claimableAmount = 0;\n', '        if (releasedAmount > info.claimedAmount) {\n', '            claimableAmount = releasedAmount - info.claimedAmount;\n', '        }\n', '    }\n', '\n', '    function getVestingTotalClaimableAmount(address _user)\n', '        external\n', '        view\n', '        returns (uint256 totalClaimableAmount)\n', '    {\n', '        uint256 count = _userToVestingList[_user].length;\n', '        for (uint256 _index = 0; _index < count; _index++) {\n', '            totalClaimableAmount = totalClaimableAmount + _getVestingClaimableAmount(_user, _index);\n', '        }\n', '    }\n', '\n', '    function getVestingClaimableAmount(address _user, uint256 _index)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _getVestingClaimableAmount(_user, _index);\n', '    }\n', '\n', '    function getVestingsCountByUser(address _user) external view returns (uint256) {\n', '        uint256 count = _userToVestingList[_user].length;\n', '        return count;\n', '    }\n', '\n', '    function getVestingInfo(address _user, uint256 _index)\n', '        external\n', '        view\n', '        returns (VestingInfo memory)\n', '    {\n', '        require(_index < _userToVestingList[_user].length, "Vesting: Invalid index");\n', '        VestingInfo memory info = _userToVestingList[_user][_index];\n', '        return info;\n', '    }\n', '\n', '    function getTotalAmountLockedByUser(address _user) external view returns (uint256) {\n', '        uint256 count = _userToVestingList[_user].length;\n', '        uint256 amountLocked = 0;\n', '        for (uint256 _index = 0; _index < count; _index++) {\n', '            amountLocked =\n', '                amountLocked +\n', '                _userToVestingList[_user][_index].amount -\n', '                _userToVestingList[_user][_index].claimedAmount;\n', '        }\n', '\n', '        return amountLocked;\n', '    }\n', '\n', '    function updateVestingDuration(uint256 _vestingDuration) external onlyFarmOwner {\n', '        vestingDuration = _vestingDuration;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '// File: contracts/Farm.sol\n', '\n', 'contract Farm {\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @notice information stuct on each user than stakes LP tokens.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt.\n', '    }\n', '\n', '    address public owner;\n', '\n', '    IERC20 public lpToken;\n', '    IERC20 public rewardToken;\n', '    uint256 public startBlock;\n', '    uint256 public rewardPerBlock;\n', '    uint256 public lastRewardBlock;\n', '    uint256 public accRewardPerShare;\n', '    uint256 public farmerCount;\n', '    bool public isActive;\n', '\n', '    uint256 public firstCycleRate;\n', '    uint256 public initRate;\n', '    uint256 public reducingRate; // 95 equivalent to 95%\n', '    uint256 public reducingCycle; // 195000 equivalent 195000 block\n', '\n', '    IFarmFactory public factory;\n', '    address public farmGenerator;\n', '\n', '    Vesting public vesting;\n', '    uint256 public percentForVesting; // 50 equivalent to 50%\n', '\n', '    /// @notice information on each user than stakes LP tokens\n', '    mapping(address => UserInfo) public userInfo;\n', '\n', '    event Deposit(address indexed user, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Farm: FORBIDDEN");\n', '        _;\n', '    }\n', '\n', '    modifier mustActive() {\n', '        require(isActive == true, "Farm: Not active");\n', '        _;\n', '    }\n', '\n', '    constructor(address _factory, address _farmGenerator) {\n', '        factory = IFarmFactory(_factory);\n', '        farmGenerator = _farmGenerator;\n', '    }\n', '\n', '    /**\n', '     * @notice initialize the farming contract. This is called only once upon farm creation and the FarmGenerator ensures the farm has the correct paramaters\n', '     */\n', '    function init(\n', '        IERC20 _rewardToken,\n', '        IERC20 _lpToken,\n', '        uint256 _rewardPerBlock,\n', '        uint256 _startBlock,\n', '        uint256[] memory _rateParameters, // 0: firstCycleRate , 1: initRate, 2: reducingRate, 3: reducingCycle\n', '        uint256[] memory _vestingParameters, // 0: percentForVesting, 1: vestingDuration\n', '        address _owner\n', '    ) public {\n', '        require(msg.sender == address(farmGenerator), "Farm: FORBIDDEN");\n', '        require(address(_rewardToken) != address(0), "Farm: Invalid reward token");\n', '        require(_rewardPerBlock > 1000, "Farm: Invalid block reward"); // minimum 1000 divisibility per block reward\n', '        require(_startBlock > block.number, "Farm: Invalid start block"); // ideally at least 24 hours more to give farmers time\n', '        require(_vestingParameters[0] <= 100, "Farm: Invalid percent for vesting");\n', '        require(_rateParameters[0] > 0, "Farm: Invalid first cycle rate");\n', '        require(_rateParameters[1] > 0, "Farm: Invalid initial rate");\n', '        require(_rateParameters[2] > 0 && _rateParameters[1] < 100, "Farm: Invalid reducing rate");\n', '        require(_rateParameters[3] > 0, "Farm: Invalid reducing cycle");\n', '\n', '        rewardToken = _rewardToken;\n', '        startBlock = _startBlock;\n', '        rewardPerBlock = _rewardPerBlock;\n', '        firstCycleRate = _rateParameters[0];\n', '        initRate = _rateParameters[1];\n', '        reducingRate = _rateParameters[2];\n', '        reducingCycle = _rateParameters[3];\n', '        isActive = true;\n', '        owner = _owner;\n', '\n', '        uint256 _lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\n', '        lpToken = _lpToken;\n', '        lastRewardBlock = _lastRewardBlock;\n', '        accRewardPerShare = 0;\n', '\n', '        if (_vestingParameters[0] > 0) {\n', '            percentForVesting = _vestingParameters[0];\n', '            vesting = new Vesting(address(_rewardToken), _vestingParameters[1]);\n', '            _rewardToken.safeApprove(address(vesting), type(uint256).max);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the reward multiplier over the given _fromBlock until _to block\n', '     * @param _fromBlock the start of the period to measure rewards for\n', '     * @param _toBlock the end of the period to measure rewards for\n', '     * @return The weighted multiplier for the given period\n', '     */\n', '    function getMultiplier(uint256 _fromBlock, uint256 _toBlock) public view returns (uint256) {\n', '        return _getMultiplierFromStart(_toBlock) - _getMultiplierFromStart(_fromBlock);\n', '    }\n', '\n', '    function _getMultiplierFromStart(uint256 _block) internal view returns (uint256) {\n', '        uint256 roundPassed = (_block - startBlock) / reducingCycle;\n', '\n', '        if (roundPassed == 0) {\n', '            return (_block - startBlock) * firstCycleRate * 1e12;\n', '        } else {\n', '            uint256 multiplier = reducingCycle * firstCycleRate * 1e12;\n', '            uint256 i = 0;\n', '            for (i = 0; i < roundPassed - 1; i++) {\n', '                multiplier =\n', '                    multiplier +\n', '                    ((1e12 * initRate * reducingRate**i) / 100**i) *\n', '                    reducingCycle;\n', '            }\n', '\n', '            if ((_block - startBlock) % reducingCycle > 0) {\n', '                multiplier =\n', '                    multiplier +\n', '                    ((1e12 * initRate * reducingRate**i) / 100**i) *\n', '                    ((_block - startBlock) % reducingCycle);\n', '            }\n', '\n', '            return multiplier;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice function to see accumulated balance of reward token for specified user\n', '     * @param _user the user for whom unclaimed tokens will be shown\n', '     * @return total amount of withdrawable reward tokens\n', '     */\n', '    function pendingReward(address _user) public view returns (uint256) {\n', '        UserInfo storage user = userInfo[_user];\n', '        uint256 _accRewardPerShare = accRewardPerShare;\n', '        uint256 _lpSupply = lpToken.balanceOf(address(this));\n', '        if (block.number > lastRewardBlock && _lpSupply != 0 && isActive == true) {\n', '            uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\n', '            uint256 _tokenReward = (_multiplier * rewardPerBlock) / 1e12;\n', '            _accRewardPerShare = _accRewardPerShare + ((_tokenReward * 1e12) / _lpSupply);\n', '        }\n', '        return ((user.amount * _accRewardPerShare) / 1e12) - user.rewardDebt;\n', '    }\n', '\n', '    /**\n', '     * @notice updates pool information to be up to date to the current block\n', '     */\n', '    function updatePool() public mustActive {\n', '        if (block.number <= lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 _lpSupply = lpToken.balanceOf(address(this));\n', '        if (_lpSupply == 0) {\n', '            lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 _multiplier = getMultiplier(lastRewardBlock, block.number);\n', '        uint256 _tokenReward = (_multiplier * rewardPerBlock) / 1e12;\n', '        accRewardPerShare = accRewardPerShare + ((_tokenReward * 1e12) / _lpSupply);\n', '        lastRewardBlock = block.number;\n', '    }\n', '\n', '    /**\n', '     * @notice deposit LP token function for msg.sender\n', '     * @param _amount the total deposit amount\n', '     */\n', '    function deposit(uint256 _amount) public mustActive {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        updatePool();\n', '        if (user.amount > 0) {\n', '            uint256 _pending = ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\n', '\n', '            uint256 availableRewardToken = rewardToken.balanceOf(address(this));\n', '            if (_pending > availableRewardToken) {\n', '                _pending = availableRewardToken;\n', '            }\n', '\n', '            uint256 _forVesting = 0;\n', '            if (percentForVesting > 0) {\n', '                _forVesting = (_pending * percentForVesting) / 100;\n', '                vesting.addVesting(msg.sender, _forVesting);\n', '            }\n', '\n', '            rewardToken.safeTransfer(msg.sender, _pending - _forVesting);\n', '        }\n', '        if (user.amount == 0 && _amount > 0) {\n', '            factory.userEnteredFarm(msg.sender);\n', '            farmerCount++;\n', '        }\n', '        lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '        user.amount = user.amount + _amount;\n', '        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\n', '        emit Deposit(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw LP token function for msg.sender\n', '     * @param _amount the total withdrawable amount\n', '     */\n', '    function withdraw(uint256 _amount) public {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require(user.amount >= _amount, "INSUFFICIENT");\n', '\n', '        if (isActive == true) {\n', '            updatePool();\n', '        }\n', '\n', '        if (user.amount == _amount && _amount > 0) {\n', '            factory.userLeftFarm(msg.sender);\n', '            farmerCount--;\n', '        }\n', '\n', '        uint256 _pending = ((user.amount * accRewardPerShare) / 1e12) - user.rewardDebt;\n', '\n', '        uint256 availableRewardToken = rewardToken.balanceOf(address(this));\n', '        if (_pending > availableRewardToken) {\n', '            _pending = availableRewardToken;\n', '        }\n', '\n', '        uint256 _forVesting = 0;\n', '        if (percentForVesting > 0) {\n', '            _forVesting = (_pending * percentForVesting) / 100;\n', '            vesting.addVesting(msg.sender, _forVesting);\n', '        }\n', '\n', '        rewardToken.safeTransfer(msg.sender, _pending - _forVesting);\n', '\n', '        user.amount = user.amount - _amount;\n', '        user.rewardDebt = (user.amount * accRewardPerShare) / 1e12;\n', '        lpToken.safeTransfer(msg.sender, _amount);\n', '        emit Withdraw(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice emergency functoin to withdraw LP tokens and forego harvest rewards. Important to protect users LP tokens\n', '     */\n', '    function emergencyWithdraw() public {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        lpToken.safeTransfer(msg.sender, user.amount);\n', '        emit EmergencyWithdraw(msg.sender, user.amount);\n', '        if (user.amount > 0) {\n', '            factory.userLeftFarm(msg.sender);\n', '            farmerCount--;\n', '        }\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\n', '     * @param _to the user address to transfer tokens to\n', '     * @param _amount the total amount of tokens to transfer\n', '     */\n', '    function _safeRewardTransfer(address _to, uint256 _amount) internal {\n', '        rewardToken.transfer(_to, _amount);\n', '    }\n', '\n', '    function rescueFunds(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyOwner {\n', '        require(address(lpToken) != tokenToRescue, "Farm: Cannot claim token held by the contract");\n', '\n', '        IERC20(tokenToRescue).safeTransfer(to, amount);\n', '    }\n', '\n', '    function updateReducingRate(uint256 _reducingRate) external onlyOwner mustActive {\n', '        require(_reducingRate > 0 && _reducingRate <= 100, "Farm: Invalid reducing rate");\n', '        reducingRate = _reducingRate;\n', '    }\n', '\n', '    function updatePercentForVesting(uint256 _percentForVesting) external onlyOwner {\n', '        require(\n', '            _percentForVesting >= 0 && _percentForVesting <= 100,\n', '            "Farm: Invalid percent for vesting"\n', '        );\n', '        percentForVesting = _percentForVesting;\n', '    }\n', '\n', '    function forceEnd() external onlyOwner mustActive {\n', '        updatePool();\n', '        isActive = false;\n', '    }\n', '\n', '    function transferOwnership(address _owner) external onlyOwner {\n', '        owner = _owner;\n', '    }\n', '}']