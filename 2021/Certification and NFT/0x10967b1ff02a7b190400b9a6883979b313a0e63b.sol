['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', ' * @title Cover FlashBorrower\n', ' * @author alan\n', ' */\n', ' \n', '// File contracts/interfaces/IProtocol.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IProtocol {\n', '  function coverMap(address _collateral, uint48 _expirationTimestamp) external view returns (address);\n', '  function addCover(address _collateral, uint48 _timestamp, uint256 _amount) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC3156FlashBorrower.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC3156FlashBorrower {\n', '\n', '    /**\n', '     * @dev Receive a flash loan.\n', '     * @param initiator The initiator of the loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param fee The additional amount of tokens to repay.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"\n', '     */\n', '    function onFlashLoan(\n', '        address initiator,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external returns (bytes32);\n', '}\n', '\n', '\n', '// File contracts/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ICover.sol\n', '\n', 'pragma solidity ^0.8.0;\n', 'interface ICover {\n', '  function claimCovToken() external view returns (IERC20);\n', '  function noclaimCovToken() external view returns (IERC20);\n', '  function redeemCollateral(uint256 _amount) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IBPool.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IBPool {\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint256 tokenAmountIn,\n', '        address tokenOut,\n', '        uint256 minAmountOut,\n', '        uint256 maxPrice\n', '    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\n', '\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint256 maxAmountIn,\n', '        address tokenOut,\n', '        uint256 tokenAmountOut,\n', '        uint256 maxPrice\n', '    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\n', '\n', '    function calcOutGivenIn(\n', '        uint256 tokenBalanceIn,\n', '        uint256 tokenWeightIn,\n', '        uint256 tokenBalanceOut,\n', '        uint256 tokenWeightOut,\n', '        uint256 tokenAmountIn,\n', '        uint256 swapFee\n', '    ) external view returns (uint256 tokenAmountOut);\n', '\n', '    function calcInGivenOut(\n', '        uint256 tokenBalanceIn,\n', '        uint256 tokenWeightIn,\n', '        uint256 tokenBalanceOut,\n', '        uint256 tokenWeightOut,\n', '        uint256 tokenAmountOut,\n', '        uint256 swapFee\n', '    ) external view returns (uint256 tokenAmountIn);\n', '\n', '    function getNormalizedWeight(address token) external view returns (uint256);\n', '    function getBalance(address token) external view returns (uint256);\n', '    function getSwapFee() external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IFlashBorrower.sol\n', '\n', 'pragma solidity ^0.8.0;\n', 'interface IFlashBorrower is IERC3156FlashBorrower {\n', '    /// @notice emit when a new flashlender is set\n', '    event NewFlashLender(address flashLender);\n', '\n', '    struct FlashLoanData {\n', '        bool isBuy;\n', '        IBPool bpool;\n', '        IProtocol protocol;\n', '        address caller;\n', '        address collateral;\n', '        uint48 timestamp;\n', '        uint256 amount;\n', '        uint256 limit;\n', '    }\n', '\n', '    function flashBuyClaim(\n', '        IBPool _bpool,\n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToBuy, \n', '        uint256 _maxAmountToSpend\n', '    ) external;\n', '    \n', '    function flashSellClaim(\n', '        IBPool _bpool,\n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToSell, \n', '        uint256 _minAmountToReturn\n', '    ) external;\n', '\n', '    function getBuyClaimCost(\n', '        IBPool _bpool, \n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToBuy\n', '    ) external view returns (uint256 totalCost);\n', '\n', '    function getSellClaimReturn(\n', '        IBPool _bpool, \n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToSell,\n', '        uint256 _redeemFeeNumerator\n', '    ) external view returns (uint256 totalReturn);\n', '\n', '    function setFlashLender(address _flashLender) external;\n', '    function collect(IERC20 _token) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC3156FlashLender.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC3156FlashLender {\n', '\n', '    /**\n', '     * @dev The amount of currency available to be lended.\n', '     * @param token The loan currency.\n', '     * @return The amount of `token` that can be borrowed.\n', '     */\n', '    function maxFlashLoan(\n', '        address token\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev The fee to be charged for a given loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n', '     */\n', '    function flashFee(\n', '        address token,\n', '        uint256 amount\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Initiate a flash loan.\n', '     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     */\n', '    function flashLoan(\n', '        address receiver,\n', '        address token,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '\n', '// File contracts/ERC20/IYERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', 'interface IYERC20 is IERC20 {\n', '    function deposit(uint256 _amount) external;\n', '    function withdraw(uint256 _shares) external;\n', '    function getPricePerFullShare() external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) - value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/utils/Context.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/utils/Ownable.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/CoverFlashBorrower.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract CoverFlashBorrower is Ownable, IFlashBorrower {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC3156FlashLender public flashLender;\n', '    IERC20 public immutable dai;\n', '    IYERC20 public immutable ydai;\n', '\n', '    modifier onlySupportedCollaterals(address _collateral) {\n', '        require(_collateral == address(dai) || _collateral == address(ydai), "only supports DAI and yDAI collaterals");\n', '        _;\n', '    }\n', '    \n', '    constructor (IERC3156FlashLender _flashLender, IERC20 _dai, IYERC20 _ydai) {\n', '        flashLender = _flashLender;\n', '        dai = _dai;\n', '        ydai = _ydai;\n', '    }\n', '\n', '    /**\n', '     * @dev Receive a flash loan.\n', '     * @param initiator The initiator of the loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param fee The additional amount of tokens to repay.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"\n', '     */\n', '    function onFlashLoan(\n', '        address initiator, \n', '        address token, \n', '        uint256 amount, \n', '        uint256 fee, \n', '        bytes calldata data\n', '    ) external override returns(bytes32) {\n', '        require(msg.sender == address(flashLender), "CoverFlashBorrower: Untrusted lender");\n', '        require(initiator == address(this), "CoverFlashBorrower: Untrusted loan initiator");\n', '        require(token == address(dai), "!dai"); // For v1, can only flashloan DAI\n', '        uint256 amountOwed = amount + fee;\n', '        FlashLoanData memory flashLoanData = abi.decode(data, (FlashLoanData));\n', '        if (flashLoanData.isBuy) {\n', '            _onFlashLoanBuyClaim(flashLoanData, amount, amountOwed);\n', '        } else {\n', '            _onFlashLoanSellClaim(flashLoanData, amount, amountOwed);\n', '        }\n', '        return keccak256("ERC3156FlashBorrower.onFlashLoan");\n', '    }\n', '\n', '    /**\n', '     * @dev Flash loan the amount of collateral needed to mint `_amountCovTokens` covTokens\n', '     * - If collateral is yDAI, `_amountCovTokens` is scaled by current price of yDAI to flash borrow enough DAI\n', '     */\n', '    function flashBuyClaim(\n', '        IBPool _bpool,\n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToBuy, \n', '        uint256 _maxAmountToSpend\n', '    ) external override onlySupportedCollaterals(_collateral) {\n', '        bytes memory data = abi.encode(FlashLoanData({\n', '            isBuy: true,\n', '            bpool: _bpool,\n', '            protocol: _protocol,\n', '            caller: msg.sender,\n', '            collateral: _collateral,\n', '            timestamp: _timestamp,\n', '            amount: _amountToBuy,\n', '            limit: _maxAmountToSpend\n', '        }));\n', '        uint256 amountDaiNeeded;\n', '        if (_collateral == address(dai)) {\n', '            amountDaiNeeded = _amountToBuy;\n', '        } else if (_collateral == address(ydai)) {\n', '            amountDaiNeeded = _amountToBuy * ydai.getPricePerFullShare() / 1e18;\n', '        }\n', '        require(amountDaiNeeded <= flashLender.maxFlashLoan(address(dai)), "_amount > lender reserves");\n', '        uint256 _allowance = dai.allowance(address(this), address(flashLender));\n', '        uint256 _fee = flashLender.flashFee(address(dai), amountDaiNeeded);\n', '        uint256 _repayment = amountDaiNeeded + _fee;\n', '        _approve(dai, address(flashLender), _allowance + _repayment);\n', '        flashLender.flashLoan(address(this), address(dai), amountDaiNeeded, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Flash loan the amount of DAI needed to buy enough NOCLAIM to redeem with CLAIM tokens\n', '     */\n', '    function flashSellClaim(\n', '        IBPool _bpool,\n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToSell, \n', '        uint256 _minAmountToReturn\n', '    ) external override onlySupportedCollaterals(_collateral) {\n', '        bytes memory data = abi.encode(FlashLoanData({\n', '            isBuy: false,\n', '            bpool: _bpool,\n', '            protocol: _protocol,\n', '            caller: msg.sender,\n', '            collateral: _collateral,\n', '            timestamp: _timestamp,\n', '            amount: _amountToSell,\n', '            limit: _minAmountToReturn\n', '        }));\n', '        (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\n', '        uint256 amountDaiNeeded = _calcInGivenOut(_bpool, address(dai), address(noclaimToken), _amountToSell);\n', '        require(amountDaiNeeded <= flashLender.maxFlashLoan(address(dai)), "_amount > lender reserves");\n', '        uint256 _allowance = dai.allowance(address(this), address(flashLender));\n', '        uint256 _fee = flashLender.flashFee(address(dai), amountDaiNeeded);\n', '        uint256 _repayment = amountDaiNeeded + _fee;\n', '        _approve(dai, address(flashLender), _allowance + _repayment);\n', '        flashLender.flashLoan(address(this), address(dai), amountDaiNeeded, data);\n', '    }\n', '\n', '    function setFlashLender(address _flashLender) external override onlyOwner {\n', '        require(_flashLender != address(0), "_flashLender is 0");\n', '        flashLender = IERC3156FlashLender(_flashLender);\n', '        emit NewFlashLender(_flashLender);\n', '    }\n', '\n', '    /// @notice Tokens that are accidentally sent to this contract can be recovered\n', '    function collect(IERC20 _token) external override onlyOwner {\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        require(balance > 0, "_token balance is 0");\n', '        _token.safeTransfer(msg.sender, balance);\n', '    }\n', '\n', '    function getBuyClaimCost(\n', '        IBPool _bpool, \n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToBuy\n', '    ) external override view onlySupportedCollaterals(_collateral) returns (uint256 totalCost) {\n', '        uint256 amountDaiNeeded = _amountToBuy;\n', '        if (_collateral == address(ydai)) {\n', '            amountDaiNeeded = amountDaiNeeded * ydai.getPricePerFullShare() / 1e18;\n', '        }\n', '        uint256 flashFee = flashLender.flashFee(address(dai), amountDaiNeeded);\n', '        uint256 daiReceivedFromSwap;\n', '        {\n', '            (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\n', '            daiReceivedFromSwap = _calcOutGivenIn(_bpool, address(noclaimToken), _amountToBuy, address(dai));\n', '        }\n', '        if (amountDaiNeeded + flashFee < daiReceivedFromSwap) {\n', '            totalCost = 0;\n', '        } else {\n', '            totalCost =  amountDaiNeeded + flashFee - daiReceivedFromSwap;\n', '        }\n', '    }\n', '\n', '    /// @notice redeem fee denominator is assumed to be 10000\n', '    function getSellClaimReturn(\n', '        IBPool _bpool, \n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp, \n', '        uint256 _amountToSell,\n', '        uint256 _redeemFeeNumerator\n', '    ) external override view onlySupportedCollaterals(_collateral) returns (uint256 totalReturn) {\n', '        require(_redeemFeeNumerator <= 10000, "fee > 10000");\n', '        (, IERC20 noclaimToken) = _getCovTokenAddresses(_protocol, _collateral, _timestamp);\n', '        uint256 amountDaiNeeded = _calcInGivenOut(_bpool, address(dai), address(noclaimToken), _amountToSell);\n', '        uint256 flashFee = flashLender.flashFee(address(dai), amountDaiNeeded);\n', '        uint256 daiReceivedFromRedeem;\n', '        if (_collateral == address(dai)) {\n', '            daiReceivedFromRedeem = _amountToSell;\n', '        } else if (_collateral == address(ydai)) {\n', '            // Adjust for price of yDAI\n', '            daiReceivedFromRedeem = _amountToSell * ydai.getPricePerFullShare() / 1e18;\n', '        }\n', '        // Adjust for redemption fee\n', '        daiReceivedFromRedeem = daiReceivedFromRedeem * (10000 - _redeemFeeNumerator) / 10000;\n', '        if (daiReceivedFromRedeem < amountDaiNeeded + flashFee) {\n', '            totalReturn = 0;\n', '        } else {\n', '            totalReturn = daiReceivedFromRedeem - amountDaiNeeded - flashFee;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * - If collateral is yDAI, wrap borrowed DAI\n', '     * - Deposit collateral for covTokens\n', '     * - Sell NOCLAIM tokens on Balancer to receive DAI\n', '     * - Calculate amount user needs to pay to repay loan + slippage + fee\n', '     * - Send minted CLAIM tokens to user\n', '     */\n', '    function _onFlashLoanBuyClaim(FlashLoanData memory data, uint256 amount, uint256 amountOwed) internal {\n', '        uint256 mintAmount;\n', '\n', '        // Wrap DAI to yDAI if necessary\n', '        if (data.collateral == address(dai)) {\n', '            mintAmount = amount;\n', '            _approve(dai, address(data.protocol), mintAmount);\n', '        } else if (data.collateral == address(ydai)) {\n', '            _approve(dai, address(ydai), amount);\n', '            uint256 ydaiBalBefore = ydai.balanceOf(address(this));\n', '            ydai.deposit(amount);\n', '            mintAmount = ydai.balanceOf(address(this)) - ydaiBalBefore;\n', '            _approve(ydai, address(data.protocol), mintAmount);\n', '        }\n', '\n', '        // Mint claim and NOCLAIM tokens using collateral\n', '        require(mintAmount > 0, "mintAmount is 0");\n', '        data.protocol.addCover(data.collateral, data.timestamp, mintAmount);\n', '        (IERC20 claimToken, IERC20 noclaimToken) = _getCovTokenAddresses(\n', '            data.protocol, \n', '            data.collateral, \n', '            data.timestamp\n', '        );\n', '        \n', '        // Swap exact number of NOCLAIM tokens for DAI on Balancer\n', '        _approve(noclaimToken, address(data.bpool), mintAmount);\n', '        (uint256 daiReceived, ) = data.bpool.swapExactAmountIn(\n', '            address(noclaimToken),\n', '            mintAmount,\n', '            address(dai),\n', '            0,\n', '            type(uint256).max\n', '        );\n', '        require(daiReceived > 0, "received 0 DAI from swap");\n', '        // Make sure cost is not greater than limit\n', '        require(amountOwed <= data.limit + daiReceived, "cost exceeds limit");\n', '        // User pays for slippage + flash loan fee\n', '        if (amountOwed > daiReceived) {\n', '            dai.safeTransferFrom(data.caller, address(this), amountOwed - daiReceived);\n', '        }\n', '        // Transfer claim tokens to caller\n', '        claimToken.safeTransfer(data.caller, mintAmount);\n', '    }\n', '\n', '    /**\n', '     * - Sell DAI for NOCLAIM tokens\n', '     * - Transfer CLAIM tokens from user to this contract\n', '     * - Redeem CLAIM and NOCLAIM tokens for collateral\n', '     * - If collateral is yDAI, unwrap to DAI\n', '     * - Calculate amount user needs to repay loan + slippage + fee\n', '     * - Send leftover DAI to user\n', '     */\n', '    function _onFlashLoanSellClaim(FlashLoanData memory data, uint256 amount, uint256 amountOwed) internal {\n', '        uint256 daiAvailable = amount;\n', '        _approve(dai, address(data.bpool), amount);\n', '        (IERC20 claimToken, IERC20 noclaimToken) = _getCovTokenAddresses(\n', '            data.protocol, \n', '            data.collateral, \n', '            data.timestamp\n', '        );\n', '        // Swap DAI for exact number of NOCLAIM tokens\n', '        (uint256 daiSpent, ) = data.bpool.swapExactAmountOut(\n', '            address(dai),\n', '            amount,\n', '            address(noclaimToken),\n', '            data.amount,\n', '            type(uint256).max\n', '        );\n', '        daiAvailable = daiAvailable - daiSpent;\n', '        // Need an equal number of CLAIM and NOCLAIM tokens\n', '        claimToken.safeTransferFrom(data.caller, address(this), data.amount);\n', '        \n', '        // Redeem CLAIM and NOCLAIM tokens for collateral\n', '        uint256 collateralBalBefore = IERC20(data.collateral).balanceOf(address(this));\n', '        address cover = data.protocol.coverMap(data.collateral, data.timestamp);\n', '        ICover(cover).redeemCollateral(data.amount);\n', '        uint256 collateralReceived = IERC20(data.collateral).balanceOf(address(this)) - collateralBalBefore;\n', '        // Unwrap yDAI to DAI if necessary\n', '        if (data.collateral == address(dai)) {\n', '            daiAvailable = daiAvailable + collateralReceived;\n', '        } else if (data.collateral == address(ydai)) {\n', '            _approve(ydai, address(ydai), collateralReceived);\n', '            uint256 daiBalBefore = dai.balanceOf(address(this));\n', '            ydai.withdraw(collateralReceived);\n', '            uint256 daiReceived = dai.balanceOf(address(this)) - daiBalBefore;\n', '            daiAvailable = daiAvailable + daiReceived;\n', '        }\n', '        // Make sure return is not less than limit\n', '        require(daiAvailable >= data.limit + amountOwed, "returns are less than limit");\n', '        // Transfer leftover DAI to caller\n', '        if (daiAvailable > amountOwed) {\n', '            dai.safeTransfer(data.caller, daiAvailable - amountOwed);\n', '        }\n', '    }\n', '\n', '    function _calcInGivenOut(IBPool _bpool, address _tokenIn, address _tokenOut, uint256 _tokenAmountOut) internal view returns (uint256 tokenAmountIn) {\n', '        uint256 tokenBalanceIn = _bpool.getBalance(_tokenIn);\n', '        uint256 tokenWeightIn = _bpool.getNormalizedWeight(_tokenIn);\n', '        uint256 tokenBalanceOut = _bpool.getBalance(_tokenOut);\n', '        uint256 tokenWeightOut = _bpool.getNormalizedWeight(_tokenOut);\n', '        uint256 swapFee = _bpool.getSwapFee();\n', '\n', '        tokenAmountIn = _bpool.calcInGivenOut(\n', '            tokenBalanceIn,\n', '            tokenWeightIn,\n', '            tokenBalanceOut,\n', '            tokenWeightOut,\n', '            _tokenAmountOut,\n', '            swapFee\n', '        );\n', '    }\n', '\n', '    function _calcOutGivenIn(IBPool _bpool, address _tokenIn, uint256 _tokenAmountIn, address _tokenOut) internal view returns (uint256 tokenAmountOut) {\n', '        uint256 tokenBalanceIn = _bpool.getBalance(_tokenIn);\n', '        uint256 tokenWeightIn = _bpool.getNormalizedWeight(_tokenIn);\n', '        uint256 tokenBalanceOut = _bpool.getBalance(_tokenOut);\n', '        uint256 tokenWeightOut = _bpool.getNormalizedWeight(_tokenOut);\n', '        uint256 swapFee = _bpool.getSwapFee();\n', '\n', '        tokenAmountOut = _bpool.calcOutGivenIn(\n', '            tokenBalanceIn,\n', '            tokenWeightIn,\n', '            tokenBalanceOut,\n', '            tokenWeightOut,\n', '            _tokenAmountIn,\n', '            swapFee\n', '        );\n', '    } \n', '\n', '    function _getCovTokenAddresses(\n', '        IProtocol _protocol, \n', '        address _collateral, \n', '        uint48 _timestamp\n', '    ) internal view returns (IERC20 claimToken, IERC20 noclaimToken) {\n', '        address cover = _protocol.coverMap(_collateral, _timestamp);\n', '        claimToken = ICover(cover).claimCovToken();\n', '        noclaimToken = ICover(cover).noclaimCovToken();\n', '    }\n', '\n', '    function _approve(IERC20 _token, address _spender, uint256 _amount) internal {\n', '        if (_token.allowance(address(this), _spender) < _amount) {\n', '            _token.safeApprove(_spender, type(uint256).max);\n', '        }\n', '    }\n', '}']