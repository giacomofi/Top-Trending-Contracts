['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', 'abstract contract AuctionHouseLike {\n', '    function bids(uint256) virtual external view returns (uint, uint);\n', '    function buyCollateral(uint256 id, uint256 wad) external virtual;\n', '    function liquidationEngine() view public virtual returns (LiquidationEngineLike);\n', '    function collateralType() view public virtual returns (bytes32);\n', '}\n', '\n', 'abstract contract SAFEEngineLike {\n', '    mapping (bytes32 => mapping (address => uint256))  public tokenCollateral;  // [wad]\n', '    function canModifySAFE(address, address) virtual public view returns (uint);\n', '    function collateralTypes(bytes32) virtual public view returns (uint, uint, uint, uint, uint);\n', '    function coinBalance(address) virtual public view returns (uint);\n', '    function safes(bytes32, address) virtual public view returns (uint, uint);\n', '    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\n', '    function approveSAFEModification(address) virtual public;\n', '    function transferInternalCoins(address, address, uint) virtual public;\n', '}\n', '\n', 'abstract contract CollateralJoinLike {\n', '    function decimals() virtual public returns (uint);\n', '    function collateral() virtual public returns (CollateralLike);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '}\n', '\n', 'abstract contract CoinJoinLike {\n', '    function safeEngine() virtual public returns (SAFEEngineLike);\n', '    function systemCoin() virtual public returns (CollateralLike);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '}\n', '\n', 'abstract contract CollateralLike {\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public;\n', '    function transferFrom(address, address, uint) virtual public;\n', '    function deposit() virtual public payable;\n', '    function withdraw(uint) virtual public;\n', '    function balanceOf(address) virtual public view returns (uint);\n', '}\n', '\n', 'abstract contract LiquidationEngineLike {\n', '    function chosenSAFESaviour(bytes32, address) virtual public view returns (address);\n', '    function safeSaviours(address) virtual public view returns (uint256);\n', '    function liquidateSAFE(bytes32 collateralType, address safe) virtual external returns (uint256 auctionId);\n', '    function safeEngine() view public virtual returns (SAFEEngineLike);\n', '}\n', '\n', '/// @title GEB Keeper Flash Proxy\n', '/// @notice Trustless proxy that facilitates SAFE liquidation and bidding in auctions using Uniswap V2 flashswaps\n', '/// @notice Single collateral version, only meant to work with ETH collateral types\n', 'contract GebUniswapV2KeeperFlashProxyETH {\n', '    AuctionHouseLike       public auctionHouse;\n', '    SAFEEngineLike         public safeEngine;\n', '    CollateralLike         public weth;\n', '    CollateralLike         public coin;\n', '    CoinJoinLike           public coinJoin;\n', '    CoinJoinLike           public ethJoin;\n', '    IUniswapV2Pair         public uniswapPair;\n', '    LiquidationEngineLike  public liquidationEngine;\n', '    address payable        public caller;\n', '    bytes32                public collateralType;\n', '\n', '    uint256 public constant ZERO           = 0;\n', '    uint256 public constant ONE            = 1;\n', '    uint256 public constant THOUSAND       = 1000;\n', '    uint256 public constant NET_OUT_AMOUNT = 997;\n', '\n', '    /// @notice Constructor\n', '    /// @param auctionHouseAddress Address of the auction house\n', '    /// @param wethAddress WETH address\n', '    /// @param systemCoinAddress System coin address\n', '    /// @param uniswapPairAddress Uniswap V2 pair address\n', '    /// @param coinJoinAddress CoinJoin address\n', '    /// @param ethJoinAddress ETHJoin address\n', '    constructor(\n', '        address auctionHouseAddress,\n', '        address wethAddress,\n', '        address systemCoinAddress,\n', '        address uniswapPairAddress,\n', '        address coinJoinAddress,\n', '        address ethJoinAddress\n', '    ) public {\n', '        require(auctionHouseAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-auction-house");\n', '        require(wethAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-weth");\n', '        require(systemCoinAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-system-coin");\n', '        require(uniswapPairAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-uniswap-pair");\n', '        require(coinJoinAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-coin-join");\n', '        require(ethJoinAddress != address(0), "GebUniswapV2KeeperFlashProxyETH/null-eth-join");\n', '\n', '        auctionHouse        = AuctionHouseLike(auctionHouseAddress);\n', '        weth                = CollateralLike(wethAddress);\n', '        coin                = CollateralLike(systemCoinAddress);\n', '        uniswapPair         = IUniswapV2Pair(uniswapPairAddress);\n', '        coinJoin            = CoinJoinLike(coinJoinAddress);\n', '        ethJoin             = CoinJoinLike(ethJoinAddress);\n', '        collateralType      = auctionHouse.collateralType();\n', '        liquidationEngine   = auctionHouse.liquidationEngine();\n', '        safeEngine          = liquidationEngine.safeEngine();\n', '\n', '        safeEngine.approveSAFEModification(address(auctionHouse));\n', '    }\n', '\n', '    // --- Math ---\n', '    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "GebUniswapV2KeeperFlashProxyETH/add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "GebUniswapV2KeeperFlashProxyETH/sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == ZERO || (z = x * y) / y == x, "GebUniswapV2KeeperFlashProxyETH/mul-overflow");\n', '    }\n', '    function wad(uint rad) internal pure returns (uint) {\n', '        return rad / 10 ** 27;\n', '    }\n', '\n', '    // --- External Utils ---\n', '    /// @notice Bids in a single auction\n', '    /// @param auctionId Auction Id\n', '    /// @param amount Amount to bid\n', '    function bid(uint auctionId, uint amount) external {\n', '        require(msg.sender == address(this), "GebUniswapV2KeeperFlashProxyETH/only-self");\n', '        auctionHouse.buyCollateral(auctionId, amount);\n', '    }\n', '    /// @notice Bids in multiple auctions atomically\n', '    /// @param auctionIds Auction IDs\n', '    /// @param amounts Amounts to bid\n', '    function multipleBid(uint[] calldata auctionIds, uint[] calldata amounts) external {\n', '        require(msg.sender == address(this), "GebUniswapV2KeeperFlashProxyETH/only-self");\n', '        for (uint i = ZERO; i < auctionIds.length; i++) {\n', '            auctionHouse.buyCollateral(auctionIds[i], amounts[i]);\n', '        }\n', '    }\n', '    /// @notice Callback for/from Uniswap V2\n', '    /// @param _sender Requestor of the flashswap (must be this address)\n', '    /// @param _amount0 Amount of token0\n', '    /// @param _amount1 Amount of token1\n', '    /// @param _data Data sent back from Uniswap\n', '    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\n', '        require(_sender == address(this), "GebUniswapV2KeeperFlashProxyETH/invalid-sender");\n', '        require(msg.sender == address(uniswapPair), "GebUniswapV2KeeperFlashProxyETH/invalid-uniswap-pair");\n', '\n', '        // join system coins\n', '        uint amount = (_amount0 == ZERO ? _amount1 : _amount0);\n', '        coin.approve(address(coinJoin), amount);\n', '        coinJoin.join(address(this), amount);\n', '\n', '        // bid\n', '        (bool success, ) = address(this).call(_data);\n', '        require(success, "GebUniswapV2KeeperFlashProxyETH/failed-bidding");\n', '\n', '        // exit WETH\n', '        ethJoin.exit(address(this), safeEngine.tokenCollateral(collateralType, address(this)));\n', '\n', '        // repay loan\n', '        uint pairBalanceTokenBorrow = coin.balanceOf(address(uniswapPair));\n', '        uint pairBalanceTokenPay = weth.balanceOf(address(uniswapPair));\n', '        uint amountToRepay = addition((\n', '          multiply(multiply(THOUSAND, pairBalanceTokenPay), amount) /\n', '          multiply(NET_OUT_AMOUNT, pairBalanceTokenBorrow)\n', '        ), ONE);\n', '\n', '        require(amountToRepay <= weth.balanceOf(address(this)), "GebUniswapV2KeeperFlashProxyETH/unprofitable");\n', '        weth.transfer(address(uniswapPair), amountToRepay);\n', '\n', '        // send profit back\n', '        uint profit = weth.balanceOf(address(this));\n', '        weth.withdraw(profit);\n', '        caller.call{value: profit}("");\n', '        caller = address(0x0);\n', '    }\n', '\n', '    // --- Internal Utils ---\n', '    /// @notice Initiates a flashwap\n', '    /// @param amount Amount to borrow\n', '    /// @param data Callback data\n', '    function _startSwap(uint amount, bytes memory data) internal {\n', '        caller = msg.sender;\n', '\n', '        uint amount0Out = address(coin) == uniswapPair.token0() ? amount : ZERO;\n', '        uint amount1Out = address(coin) == uniswapPair.token1() ? amount : ZERO;\n', '\n', '        uniswapPair.swap(amount0Out, amount1Out, address(this), data);\n', '    }\n', '    /// @notice Returns all available opportunities from a provided auction list\n', '    /// @param auctionIds Auction IDs\n', '    /// @return ids IDs of active auctions\n', '    /// @return bidAmounts Rad amounts still requested by auctions\n', '    /// @return totalAmount Wad amount to be borrowed\n', '    function getOpenAuctionsBidSizes(uint[] memory auctionIds) internal returns (uint[] memory, uint[] memory, uint) {\n', '        uint            amountToRaise;\n', '        uint            totalAmount;\n', '        uint            opportunityCount;\n', '\n', '        uint[] memory   ids = new uint[](auctionIds.length);\n', '        uint[] memory   bidAmounts = new uint[](auctionIds.length);\n', '\n', '        for (uint i = ZERO; i < auctionIds.length; i++) {\n', '            (, amountToRaise) = auctionHouse.bids(auctionIds[i]);\n', '\n', '            if (amountToRaise > ZERO) {\n', '                totalAmount                  = addition(totalAmount, addition(wad(amountToRaise), ONE));\n', '                ids[opportunityCount]        = auctionIds[i];\n', '                bidAmounts[opportunityCount] = amountToRaise;\n', '                opportunityCount++;\n', '            }\n', '        }\n', '\n', '        assembly {\n', '            mstore(ids, opportunityCount)\n', '            mstore(bidAmounts, opportunityCount)\n', '        }\n', '\n', '        return(ids, bidAmounts, totalAmount);\n', '    }\n', '\n', '    // --- Core Bidding and Settling Logic ---\n', '    /// @notice Liquidates an underwater safe and settles the auction right away\n', '    /// @dev It will revert for protected SAFEs (those that have saviours). Protected SAFEs need to be liquidated through the LiquidationEngine\n', "    /// @param safe A SAFE's ID\n", '    /// @return auction The auction ID\n', '    function liquidateAndSettleSAFE(address safe) public returns (uint auction) {\n', '        if (liquidationEngine.safeSaviours(liquidationEngine.chosenSAFESaviour(collateralType, safe)) == ONE) {\n', '            require (liquidationEngine.chosenSAFESaviour(collateralType, safe) == address(0),\n', '            "GebUniswapV2KeeperFlashProxyETH/safe-is-protected");\n', '        }\n', '\n', '        auction = liquidationEngine.liquidateSAFE(collateralType, safe);\n', '        settleAuction(auction);\n', '    }\n', '    /// @notice Settle auction\n', '    /// @param auctionId ID of the auction to be settled\n', '    function settleAuction(uint auctionId) public {\n', '        (, uint amountToRaise) = auctionHouse.bids(auctionId);\n', '        require(amountToRaise > ZERO, "GebUniswapV2KeeperFlashProxyETH/auction-already-settled");\n', '\n', '        bytes memory callbackData = abi.encodeWithSelector(this.bid.selector, auctionId, amountToRaise);\n', '\n', '        _startSwap(addition(wad(amountToRaise), ONE), callbackData);\n', '    }\n', '    /// @notice Settle auctions\n', '    /// @param auctionIds IDs of the auctions to be settled\n', '    function settleAuction(uint[] memory auctionIds) public {\n', '        (uint[] memory ids, uint[] memory bidAmounts, uint totalAmount) = getOpenAuctionsBidSizes(auctionIds);\n', '        require(totalAmount > ZERO, "GebUniswapV2KeeperFlashProxyETH/all-auctions-already-settled");\n', '\n', '        bytes memory callbackData = abi.encodeWithSelector(this.multipleBid.selector, ids, bidAmounts);\n', '\n', '        _startSwap(totalAmount, callbackData);\n', '    }\n', '\n', '    // --- Fallback ---\n', '    receive() external payable {\n', '        require(msg.sender == address(weth), "GebUniswapV2KeeperFlashProxyETH/only-weth-withdrawals-allowed");\n', '    }\n', '}']