['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.7.6;  \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '} \n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IWETH {\n', '    function allowance(address, address) public virtual view returns (uint256);\n', '\n', '    function balanceOf(address) public virtual view returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) public virtual returns (bool);\n', '\n', '    function deposit() public payable virtual;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  \n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TokenUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function approveToken(\n', '        address _tokenAddr,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_tokenAddr == ETH_ADDR) return;\n', '\n', '        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n', '            IERC20(_tokenAddr).safeApprove(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function pullTokensIfNeeded(\n', '        address _token,\n', '        address _from,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        // handle max uint amount\n', '        if (_amount == type(uint256).max) {\n', '            uint256 userAllowance = IERC20(_token).allowance(_from, address(this));\n', '            uint256 balance = getBalance(_token, _from);\n', '\n', '            // pull max allowance amount if balance is bigger than allowance\n', '            _amount = (balance > userAllowance) ? userAllowance : balance;\n', '        }\n', '\n', '        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n', '            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawTokens(\n', '        address _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, address(this));\n', '        }\n', '\n', '        if (_to != address(0) && _to != address(this) && _amount != 0) {\n', '            if (_token != ETH_ADDR) {\n', '                IERC20(_token).safeTransfer(_to, _amount);\n', '            } else {\n', '                payable(_to).transfer(_amount);\n', '            }\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function depositWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).deposit{value: _amount}();\n', '    }\n', '\n', '    function withdrawWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).withdraw(_amount);\n', '    }\n', '\n', '    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n', '        if (_tokenAddr == ETH_ADDR) {\n', '            return _acc.balance;\n', '        } else {\n', '            return IERC20(_tokenAddr).balanceOf(_acc);\n', '        }\n', '    }\n', '\n', '    function getTokenDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == ETH_ADDR) return 18;\n', '\n', '        return IERC20(_token).decimals();\n', '    }\n', '}  \n', '\n', '\n', '\n', 'abstract contract IDFSRegistry {\n', ' \n', '    function getAddr(bytes32 _id) public view virtual returns (address);\n', '\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public virtual;\n', '\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n', '\n', '    function approveContractChange(bytes32 _id) public virtual;\n', '\n', '    function cancelContractChange(bytes32 _id) public virtual;\n', '\n', '    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n', '}  \n', '\n', '\n', '\n', '/// @title A stateful contract that holds and can change owner/admin\n', 'contract AdminVault {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function changeOwner(address _owner) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function changeAdmin(address _admin) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        admin = _admin;\n', '    }\n', '\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title AdminAuth Handles owner/admin privileges over smart contracts\n', 'contract AdminAuth {\n', '    using SafeERC20 for IERC20;\n', '\n', '    AdminVault public constant adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\n', '\n', '    modifier onlyOwner() {\n', '        require(adminVault.owner() == msg.sender, "msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(adminVault.admin() == msg.sender, "msg.sender not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(_receiver).transfer(_amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyAdmin {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}  \n', '\n', '\n', '\n', 'contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(\n', '        address _contract,\n', '        address _caller,\n', '        string memory _logName,\n', '        bytes memory _data\n', '    ) public {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Stores all the important DFS addresses and can be changed (timelock)\n', 'contract DFSRegistry is AdminAuth {\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";\n', '    string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn\'t exists";\n', '    string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";\n', '    string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";\n', '    string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";\n', '    string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";\n', '    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";\n', '    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";\n', '\n', '    struct Entry {\n', '        address contractAddr;\n', '        uint256 waitPeriod;\n', '        uint256 changeStartTime;\n', '        bool inContractChange;\n', '        bool inWaitPeriodChange;\n', '        bool exists;\n', '    }\n', '\n', '    mapping(bytes32 => Entry) public entries;\n', '    mapping(bytes32 => address) public previousAddresses;\n', '\n', '    mapping(bytes32 => address) public pendingAddresses;\n', '    mapping(bytes32 => uint256) public pendingWaitTimes;\n', '\n', '    /// @notice Given an contract id returns the registered address\n', '    /// @dev Id is keccak256 of the contract name\n', '    /// @param _id Id of contract\n', '    function getAddr(bytes32 _id) public view returns (address) {\n', '        return entries[_id].contractAddr;\n', '    }\n', '\n', '    /// @notice Helper function to easily query if id is registered\n', '    /// @param _id Id of contract\n', '    function isRegistered(bytes32 _id) public view returns (bool) {\n', '        return entries[_id].exists;\n', '    }\n', '\n', '    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n', '\n', '    /// @notice Adds a new contract to the registry\n', '    /// @param _id Id of contract\n', '    /// @param _contractAddr Address of the contract\n', '    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public onlyOwner {\n', '        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\n', '\n', '        entries[_id] = Entry({\n', '            contractAddr: _contractAddr,\n', '            waitPeriod: _waitPeriod,\n', '            changeStartTime: 0,\n', '            inContractChange: false,\n', '            inWaitPeriodChange: false,\n', '            exists: true\n', '        });\n', '\n', '        // Remember tha address so we can revert back to old addr if needed\n', '        previousAddresses[_id] = _contractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "AddNewContract",\n', '            abi.encode(_id, _contractAddr, _waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Reverts to the previous address immediately\n', '    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n', '    /// @param _id Id of contract\n', '    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\n', '\n', '        address currentAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = previousAddresses[_id];\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "RevertToPreviousAddress",\n', '            abi.encode(_id, currentAddr, previousAddresses[_id])\n', '        );\n', '    }\n', '\n', '    /// @notice Starts an address change for an existing entry\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    /// @param _newContractAddr Address of the new contract\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inContractChange = true;\n', '\n', '        pendingAddresses[_id] = _newContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartContractChange",\n', '            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new contract address, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        address oldContractAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = pendingAddresses[_id];\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        previousAddresses[_id] = oldContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel pending change\n', '    /// @param _id Id of contract\n', '    function cancelContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        address oldContractAddr = pendingAddresses[_id];\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Starts the change for waitPeriod\n', '    /// @param _id Id of contract\n', '    /// @param _newWaitPeriod New wait time\n', '    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\n', '\n', '        pendingWaitTimes[_id] = _newWaitPeriod;\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inWaitPeriodChange = true;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartWaitPeriodChange",\n', '            abi.encode(_id, _newWaitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new wait period, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        uint256 oldWaitTime = entries[_id].waitPeriod;\n', '        entries[_id].waitPeriod = pendingWaitTimes[_id];\n', '        \n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveWaitPeriodChange",\n', '            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel wait period change\n', '    /// @param _id Id of contract\n', '    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelWaitPeriodChange",\n', '            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '/// @title Implements Action interface and common helpers for passing inputs\n', 'abstract contract ActionBase is AdminAuth {\n', '    address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\n', '    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";\n', '    string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";\n', '\n', '    /// @dev Subscription params index range [128, 255]\n', '    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n', '    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n', '\n', '    /// @dev Return params index range [1, 127]\n', '    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n', '    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n', '\n', '    /// @dev If the input value should not be replaced\n', '    uint8 public constant NO_PARAM_MAPPING = 0;\n', '\n', '    /// @dev We need to parse Flash loan actions in a different way\n', '    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\n', '\n', '    /// @notice Parses inputs and runs the implemented action through a proxy\n', '    /// @dev Is called by the TaskExecutor chaining actions together\n', '    /// @param _callData Array of input values each value encoded as bytes\n', '    /// @param _subData Array of subscribed vales, replaces input values if specified\n', '    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n', '    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n', '    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual returns (bytes32);\n', '\n', '    /// @notice Parses inputs and runs the single implemented action through a proxy\n', '    /// @dev Used to save gas when executing a single action directly\n', '    function executeActionDirect(bytes[] memory _callData) public virtual payable;\n', '\n', '    /// @notice Returns the type of action we are implementing\n', '    function actionType() public pure virtual returns (uint8);\n', '\n', '\n', '    //////////////////////////// HELPER METHODS ////////////////////////////\n', '\n', '    /// @notice Given an uint256 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamUint(\n', '        uint _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (uint) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '\n', '    /// @notice Given an addr input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamAddr(\n', '        address _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (address) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Given an bytes32 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamABytes32(\n', '        bytes32 _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (bytes32) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = (_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value indicated that we need to inject values\n', '    /// @param _type Indicated the type of the input\n', '    function isReplaceable(uint8 _type) internal pure returns (bool) {\n', '        return _type != NO_PARAM_MAPPING;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value is in the return value range\n', '    /// @param _type Indicated the type of the input\n', '    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n', '        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in return array value\n', '    /// @param _type Indicated the type of the input\n', '    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\n', '\n', '        return (_type - RETURN_MIN_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in sub array value\n', '    /// @param _type Indicated the type of the input\n', '    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\n', '\n', '        return (_type - SUB_MIN_INDEX_VALUE);\n', '    }\n', '}\n', '\n', '\n', ' \n', '\n', '\n', 'library Account {\n', '    enum Status {Normal, Liquid, Vapor}\n', '    struct Info {\n', '        address owner; // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '    struct Storage {\n', '        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n', '        Status status;\n', '    }\n', '}\n', '\n', '\n', 'library Actions {\n', '    enum ActionType {\n', '        Deposit, // supply tokens\n', '        Withdraw, // borrow tokens\n', '        Transfer, // transfer balance between accounts\n', '        Buy, // buy an amount of some token (public virtually)\n', '        Sell, // sell an amount of some token (public virtually)\n', '        Trade, // trade tokens against another account\n', '        Liquidate, // liquidate an undercollateralized or expiring account\n', '        Vaporize, // use excess tokens to zero-out a completely negative account\n', '        Call // send arbitrary data to an address\n', '    }\n', '\n', '    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\n', '\n', '    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\n', '\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        Types.AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '\n', '    struct DepositArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address from;\n', '    }\n', '\n', '    struct WithdrawArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 market;\n', '        address to;\n', '    }\n', '\n', '    struct TransferArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info accountOne;\n', '        Account.Info accountTwo;\n', '        uint256 market;\n', '    }\n', '\n', '    struct BuyArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 makerMarket;\n', '        uint256 takerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct SellArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info account;\n', '        uint256 takerMarket;\n', '        uint256 makerMarket;\n', '        address exchangeWrapper;\n', '        bytes orderData;\n', '    }\n', '\n', '    struct TradeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info takerAccount;\n', '        Account.Info makerAccount;\n', '        uint256 inputMarket;\n', '        uint256 outputMarket;\n', '        address autoTrader;\n', '        bytes tradeData;\n', '    }\n', '\n', '    struct LiquidateArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info liquidAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct VaporizeArgs {\n', '        Types.AssetAmount amount;\n', '        Account.Info solidAccount;\n', '        Account.Info vaporAccount;\n', '        uint256 owedMarket;\n', '        uint256 heldMarket;\n', '    }\n', '\n', '    struct CallArgs {\n', '        Account.Info account;\n', '        address callee;\n', '        bytes data;\n', '    }\n', '}\n', '\n', '\n', 'library Decimal {\n', '    struct D256 {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Interest {\n', '    struct Rate {\n', '        uint256 value;\n', '    }\n', '\n', '    struct Index {\n', '        uint96 borrow;\n', '        uint96 supply;\n', '        uint32 lastUpdate;\n', '    }\n', '}\n', '\n', '\n', 'library Monetary {\n', '    struct Price {\n', '        uint256 value;\n', '    }\n', '    struct Value {\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'library Storage {\n', '    // All information necessary for tracking a market\n', '    struct Market {\n', '        // Contract address of the associated ERC20 token\n', '        address token;\n', '        // Total aggregated supply and borrow amount of the entire market\n', '        Types.TotalPar totalPar;\n', '        // Interest index of the market\n', '        Interest.Index index;\n', '        // Contract address of the price oracle for this market\n', '        address priceOracle;\n', '        // Contract address of the interest setter for this market\n', '        address interestSetter;\n', '        // Multiplier on the marginRatio for this market\n', '        Decimal.D256 marginPremium;\n', '        // Multiplier on the liquidationSpread for this market\n', '        Decimal.D256 spreadPremium;\n', '        // Whether additional borrows are allowed for this market\n', '        bool isClosing;\n', '    }\n', '\n', '    // The global risk parameters that govern the health and security of the system\n', '    struct RiskParams {\n', '        // Required ratio of over-collateralization\n', '        Decimal.D256 marginRatio;\n', '        // Percentage penalty incurred by liquidated accounts\n', '        Decimal.D256 liquidationSpread;\n', "        // Percentage of the borrower's interest fee that gets passed to the suppliers\n", '        Decimal.D256 earningsRate;\n', '        // The minimum absolute borrow value of an account\n', '        // There must be sufficient incentivize to liquidate undercollateralized accounts\n', '        Monetary.Value minBorrowedValue;\n', '    }\n', '\n', '    // The maximum RiskParam values that can be set\n', '    struct RiskLimits {\n', '        uint64 marginRatioMax;\n', '        uint64 liquidationSpreadMax;\n', '        uint64 earningsRateMax;\n', '        uint64 marginPremiumMax;\n', '        uint64 spreadPremiumMax;\n', '        uint128 minBorrowedValueMax;\n', '    }\n', '\n', '    // The entire storage state of Solo\n', '    struct State {\n', '        // number of markets\n', '        uint256 numMarkets;\n', '        // marketId => Market\n', '        mapping(uint256 => Market) markets;\n', '        // owner => account number => Account\n', '        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n', '        // Addresses that can control other users accounts\n', '        mapping(address => mapping(address => bool)) operators;\n', '        // Addresses that can control all users accounts\n', '        mapping(address => bool) globalOperators;\n', '        // mutable risk parameters of the system\n', '        RiskParams riskParams;\n', '        // immutable risk limits of the system\n', '        RiskLimits riskLimits;\n', '    }\n', '}\n', '\n', '\n', 'library Types {\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    struct TotalPar {\n', '        uint128 borrow;\n', '        uint128 supply;\n', '    }\n', '\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ISoloMargin {\n', '    struct OperatorArg {\n', '        address operator;\n', '        bool trusted;\n', '    }\n', '\n', '    function ownerSetSpreadPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public virtual;\n', '\n', '    function getIsGlobalOperator(address operator) public virtual view returns (bool);\n', '\n', '    function getMarketTokenAddress(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\n', '        public virtual;\n', '\n', '    function getAccountValues(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketPriceOracle(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function getMarketInterestSetter(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (address);\n', '\n', '    function getMarketSpreadPremium(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getNumMarkets() public virtual view returns (uint256);\n', '\n', '    function ownerWithdrawUnsupportedTokens(address token, address recipient)\n', '        public virtual\n', '        returns (uint256);\n', '\n', '    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\n', '        public virtual;\n', '\n', '    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public virtual;\n', '\n', '    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public virtual;\n', '\n', '    function getIsLocalOperator(address, address)\n', '        public virtual\n', '        view\n', '        returns (bool);\n', '\n', '    function getAccountPar(Account.Info memory account, uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Par memory);\n', '\n', '    function ownerSetMarginPremium(\n', '        uint256 marketId,\n', '        Decimal.D256 memory marginPremium\n', '    ) public virtual;\n', '\n', '    function getMarginRatio() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getMarketCurrentIndex(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Index memory);\n', '\n', '    function getMarketIsClosing(uint256 marketId) public virtual view returns (bool);\n', '\n', '    function getRiskParams() public virtual view returns (Storage.RiskParams memory);\n', '\n', '    function getAccountBalances(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\n', '\n', '    function renounceOwnership() public virtual;\n', '\n', '    function getMinBorrowedValue() public virtual view returns (Monetary.Value memory);\n', '\n', '    function setOperators(OperatorArg[] memory args) public virtual;\n', '\n', '    function getMarketPrice(uint256 marketId) public virtual view returns (address);\n', '\n', '    function owner() public virtual view returns (address);\n', '\n', '    function isOwner() public virtual view returns (bool);\n', '\n', '    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\n', '        public virtual\n', '        returns (uint256);\n', '\n', '    function ownerAddMarket(\n', '        address token,\n', '        address priceOracle,\n', '        address interestSetter,\n', '        Decimal.D256 memory marginPremium,\n', '        Decimal.D256 memory spreadPremium\n', '    ) public virtual;\n', '\n', '    function operate(\n', '        Account.Info[] memory accounts,\n', '        Actions.ActionArgs[] memory actions\n', '    ) public virtual;\n', '\n', '    function getMarketWithInfo(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (\n', '            Storage.Market memory,\n', '            Interest.Index memory,\n', '            Monetary.Price memory,\n', '            Interest.Rate memory\n', '        );\n', '\n', '    function ownerSetMarginRatio(Decimal.D256 memory ratio) public virtual;\n', '\n', '    function getLiquidationSpread() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getAccountWei(Account.Info memory account, uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketTotalPar(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.TotalPar memory);\n', '\n', '    function getLiquidationSpreadForPair(\n', '        uint256 heldMarketId,\n', '        uint256 owedMarketId\n', '    ) public virtual view returns (Decimal.D256 memory);\n', '\n', '    function getNumExcessTokens(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Types.Wei memory);\n', '\n', '    function getMarketCachedIndex(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Index memory);\n', '\n', '    function getAccountStatus(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (uint8);\n', '\n', '    function getEarningsRate() public virtual view returns (Decimal.D256 memory);\n', '\n', '    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public virtual;\n', '\n', '    function getRiskLimits() public virtual view returns (Storage.RiskLimits memory);\n', '\n', '    function getMarket(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Storage.Market memory);\n', '\n', '    function ownerSetIsClosing(uint256 marketId, bool isClosing) public virtual;\n', '\n', '    function ownerSetGlobalOperator(address operator, bool approved) public virtual;\n', '\n', '    function transferOwnership(address newOwner) public virtual;\n', '\n', '    function getAdjustedAccountValues(Account.Info memory account)\n', '        public virtual\n', '        view\n', '        returns (Monetary.Value memory, Monetary.Value memory);\n', '\n', '    function getMarketMarginPremium(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Decimal.D256 memory);\n', '\n', '    function getMarketInterestRate(uint256 marketId)\n', '        public virtual\n', '        view\n', '        returns (Interest.Rate memory);\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', 'contract DyDxHelper {\n', '    ISoloMargin public constant soloMargin =\n', '        ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\n', '\n', '    function getWeiBalance(\n', '        address _user,\n', '        uint256 _index,\n', '        uint256 _marketId\n', '    ) public view returns (Types.Wei memory) {\n', '        Types.Wei[] memory weiBalances;\n', '        (, , weiBalances) = soloMargin.getAccountBalances(getAccount(_user, _index));\n', '\n', '        return weiBalances[_marketId];\n', '    }\n', '\n', '    function getAccount(address _user, uint256 _index) public pure returns (Account.Info memory) {\n', '        Account.Info memory account = Account.Info({owner: _user, number: _index});\n', '\n', '        return account;\n', '    }\n', '\n', '    function getMarketIdFromTokenAddress(address _token)\n', '        public\n', '        view\n', '        returns (uint256 marketId)\n', '    {\n', '        uint256 numTokenIds = soloMargin.getNumMarkets();\n', '\n', '        for (uint256 i = 0; i < numTokenIds; i++) {\n', '            if (soloMargin.getMarketTokenAddress(i) == _token) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        // if we get this far no id has been found\n', '        revert("No DyDx market id found for token");\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '\n', '/// @title Supply tokens to Dydx\n', 'contract DyDxSupply is ActionBase, DyDxHelper {\n', '    using TokenUtils for address;\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual override returns (bytes32) {\n', '        (\n', '            address tokenAddr,\n', '            uint256 amount,\n', '            address from\n', '        ) = parseInputs(_callData);\n', '\n', '        tokenAddr = _parseParamAddr(tokenAddr, _paramMapping[0], _subData, _returnValues);\n', '        amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);\n', '        from = _parseParamAddr(from, _paramMapping[2], _subData, _returnValues);\n', '\n', '        uint256 supplyAmount = _supply(tokenAddr, amount, from);\n', '\n', '        return bytes32(supplyAmount);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeActionDirect(bytes[] memory _callData) public payable override {\n', '        (\n', '            address tokenAddr,\n', '            uint256 amount,\n', '            address from\n', '        ) = parseInputs(_callData);\n', '\n', '        _supply(tokenAddr, amount, from);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function actionType() public pure virtual override returns (uint8) {\n', '        return uint8(ActionType.STANDARD_ACTION);\n', '    }\n', '\n', '    //////////////////////////// ACTION LOGIC ////////////////////////////\n', '\n', '    /// @notice User deposits tokens to the DyDx protocol\n', '    /// @dev User needs to approve the DSProxy to pull the _tokenAddr tokens\n', '    /// @param _tokenAddr The address of the token to be deposited\n', '    /// @param _amount Amount of tokens to be deposited\n', '    /// @param _from Where are we pulling the supply tokens amount from\n', '    function _supply(\n', '        address _tokenAddr,\n', '        uint256 _amount,\n', '        address _from\n', '    ) internal returns (uint256) {\n', '\n', '        // if amount is set to max, take the whole _from balance\n', '        if (_amount == type(uint256).max) {\n', '            _amount = _tokenAddr.getBalance(_from);\n', '        }\n', '\n', '        _tokenAddr.pullTokensIfNeeded(_from, _amount);\n', '        _tokenAddr.approveToken(address(soloMargin), _amount);\n', '\n', '        uint marketId = getMarketIdFromTokenAddress(_tokenAddr);\n', '\n', '        Account.Info[] memory accounts = new Account.Info[](1);\n', '        accounts[0] = getAccount(address(this), 0);\n', '\n', '        Actions.ActionArgs[] memory actions = new Actions.ActionArgs[](1);\n', '        Types.AssetAmount memory amount = Types.AssetAmount({\n', '            sign: true,\n', '            denomination: Types.AssetDenomination.Wei,\n', '            ref: Types.AssetReference.Delta,\n', '            value: _amount\n', '        });\n', '\n', '        actions[0] = Actions.ActionArgs({\n', '            actionType: Actions.ActionType.Deposit,\n', '            accountId: 0,\n', '            amount: amount,\n', '            primaryMarketId: marketId,\n', '            otherAddress: address(this),\n', '            secondaryMarketId: 0, //not used\n', '            otherAccountId: 0, //not used\n', '            data: "" //not used\n', '        });\n', '\n', '        soloMargin.operate(accounts, actions);\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "DyDxSupply",\n', '            abi.encode(_tokenAddr, _amount, _from)\n', '        );\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function parseInputs(bytes[] memory _callData)\n', '        internal\n', '        pure\n', '        returns (\n', '            address tokenAddr,\n', '            uint256 amount,\n', '            address from\n', '        )\n', '    {\n', '        tokenAddr = abi.decode(_callData[0], (address));\n', '        amount = abi.decode(_callData[1], (uint256));\n', '        from = abi.decode(_callData[2], (address));\n', '    }\n', '}']