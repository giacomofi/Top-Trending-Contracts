['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity ^0.6.12;\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'library DssExecLib {\n', '\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function increaseIlkDebtCeiling(bytes32 , uint256 , bool) public {}\n', '    function sendPaymentFromSurplusBuffer(address, uint256) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Modifier required to\n', '    modifier limited {\n', '        if (officeHours()) {\n', '            uint day = (block.timestamp / 1 days + 3) % 7;\n', '            require(day < 5, "Can only be cast on a weekday");\n', '            uint hour = block.timestamp / 1 hours % 24;\n', '            require(hour >= 14 && hour < 21, "Outside office hours");\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        require(eta != 0, "DssExec/spell-not-scheduled");\n', '        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\n', '\n', '        if (SpellAction(action).officeHours()) {\n', '            uint256 day    = (castTime / 1 days + 3) % 7;\n', '            uint256 hour   = castTime / 1 hours % 24;\n', '            uint256 minute = castTime / 1 minutes % 60;\n', '            uint256 second = castTime % 60;\n', '\n', '            if (day >= 5) {\n', '                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\n', '                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\n', '                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\n', '            } else {\n', '                if (hour >= 21) {\n', '                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\n', '                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                } else if (hour < 14) {\n', '                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/d04bee8084c5724496ef72a0c06d00e2c7b8905e/governance/votes/Executive%20vote%20-%20April%202%2C%202021.md -q -O - 2>/dev/null)"\n', '    string public constant description =\n', '        "2021-04-02 MakerDAO Executive Spell | Hash: 0xdb1339f86f456759bc4ec97f49b7b10abb86d97bbb9f56577731efd715d978c9";\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '\n', '    uint256 constant THOUSAND = 10**3;\n', '    uint256 constant MILLION = 10**6;\n', '    uint256 constant BILLION = 10**9;\n', '\n', '    // Core Units Budget Addresses\n', '    address constant INTERIM_MULTISIG = 0x73f09254a81e1F835Ee442d1b3262c1f1d7A13ff;\n', '    address constant RISK = 0xd98ef20520048a35EdA9A202137847A62120d2d9;\n', '\n', '    // Disable Office Hours\n', '    function officeHours() public override returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function actions() public override {\n', '        // Increase the COMP-A Maximum Debt Ceiling from 10M to 30M\n', '        DssExecLib.setIlkAutoLineDebtCeiling("COMP-A", 30 * MILLION);\n', '\n', '        // Increase the ZRX-A Maximum Debt Ceiling from 5M to 10M\n', '        DssExecLib.setIlkAutoLineDebtCeiling("ZRX-A", 10 * MILLION);\n', '\n', '        // Increase the YFI-A Maximum Debt Ceiling from 45M to 75M\n', '        DssExecLib.setIlkAutoLineDebtCeiling("YFI-A", 75 * MILLION);\n', '\n', '        // Increase the PSM-USDC-A Debt Ceiling from 1B to 2B\n', '        DssExecLib.increaseIlkDebtCeiling("PSM-USDC-A", 1 * BILLION, true);\n', '\n', '        // Provide Core Unit Budgets\n', '\n', '        // Real-World Finance + Governance (Interim Multi-Sig)\n', '        DssExecLib.sendPaymentFromSurplusBuffer(INTERIM_MULTISIG, (40 + 80) * THOUSAND);\n', '\n', '        // Risk\n', '        DssExecLib.sendPaymentFromSurplusBuffer(RISK, 100_500);\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']