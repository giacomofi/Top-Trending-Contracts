['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./ERC20.sol";\n', 'import "./Ownable.sol";\n', '\n', '// SpaceXToken with Governance.\n', 'contract SpaceXToken is ERC20("SpaceX", "SPEX"), Ownable {\n', '    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n', '    function mint(address _to, uint256 _amount) public onlyOwner {\n', '        _mint(_to, _amount);\n', '        _moveDelegates(address(0), _delegates[_to], _amount);\n', '    }\n', '\n', '    // Copied and modified from YAM code:\n', '    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\n', '    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\n', '    // Which is copied and modified from COMPOUND:\n', '    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\n', '\n', '    /// @dev A record of each accounts delegate\n', '    mapping(address => address) internal _delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint256 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping(address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH =\n', '        keccak256(\n', '            "EIP712Domain(string name,uint256 chainId,address verifyingContract)"\n', '        );\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH =\n', '        keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(\n', '        address indexed delegator,\n', '        address indexed fromDelegate,\n', '        address indexed toDelegate\n', '    );\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(\n', '        address indexed delegate,\n', '        uint256 previousBalance,\n', '        uint256 newBalance\n', '    );\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegator The address to get delegatee for\n', '     */\n', '    function delegates(address delegator) external view returns (address) {\n', '        return _delegates[delegator];\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee) external {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates votes from signatory to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function delegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external {\n', '        bytes32 domainSeparator =\n', '            keccak256(\n', '                abi.encode(\n', '                    DOMAIN_TYPEHASH,\n', '                    keccak256(bytes(name())),\n', '                    getChainId(),\n', '                    address(this)\n', '                )\n', '            );\n', '\n', '        bytes32 structHash =\n', '            keccak256(\n', '                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\n', '            );\n', '\n', '        bytes32 digest =\n', '            keccak256(\n', '                abi.encodePacked("\\x19\\x01", domainSeparator, structHash)\n', '            );\n', '\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(\n', '            signatory != address(0),\n', '            "SPEX::delegateBySig: invalid signature"\n', '        );\n', '        require(\n', '            nonce == nonces[signatory]++,\n', '            "SPEX::delegateBySig: invalid nonce"\n', '        );\n', '        require(now <= expiry, "SPEX::delegateBySig: signature expired");\n', '        return _delegate(signatory, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint256) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return\n', '            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint256 blockNumber)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            blockNumber < block.number,\n', '            "SPEX::getPriorVotes: not yet determined"\n', '        );\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = _delegates[delegator];\n', '        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying SPEXs (not scaled);\n', '        _delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _moveDelegates(\n', '        address srcRep,\n', '        address dstRep,\n', '        uint256 amount\n', '    ) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                // decrease old representative\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint256 srcRepOld =\n', '                    srcRepNum > 0\n', '                        ? checkpoints[srcRep][srcRepNum - 1].votes\n', '                        : 0;\n', '                uint256 srcRepNew = srcRepOld.sub(amount);\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                // increase new representative\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint256 dstRepOld =\n', '                    dstRepNum > 0\n', '                        ? checkpoints[dstRep][dstRepNum - 1].votes\n', '                        : 0;\n', '                uint256 dstRepNew = dstRepOld.add(amount);\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(\n', '        address delegatee,\n', '        uint32 nCheckpoints,\n', '        uint256 oldVotes,\n', '        uint256 newVotes\n', '    ) internal {\n', '        uint32 blockNumber =\n', '            safe32(\n', '                block.number,\n', '                "SPEX::_writeCheckpoint: block number exceeds 32 bits"\n', '            );\n', '\n', '        if (\n', '            nCheckpoints > 0 &&\n', '            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n', '        ) {\n', '            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[delegatee][nCheckpoints] = Checkpoint(\n', '                blockNumber,\n', '                newVotes\n', '            );\n', '            numCheckpoints[delegatee] = nCheckpoints + 1;\n', '        }\n', '\n', '        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint256 n, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint32)\n', '    {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '}']