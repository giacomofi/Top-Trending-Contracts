['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', '/**\n', ' *  @authors: [@unknownunknown1*, @clesaege]\n', ' *  @reviewers: []\n', ' *  @auditors: []\n', ' *  @bounties: []\n', ' *  @deployments: []\n', ' *  @tools: []\n', ' */\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IProofOfHumanity {\n', '    \n', '    /** @dev Return true if the submission is registered and not expired.\n', '     *  @param _submissionID The address of the submission.\n', '     *  @return Whether the submission is registered or not.\n', '     */\n', '    function isRegistered(address _submissionID) external view returns (bool);\n', '    \n', '    /** @dev Return the number of submissions irrespective of their status.\n', '     *  @return The number of submissions.\n', '     */\n', '    function submissionCounter() external view returns (uint);\n', '    \n', '}\n', '\n', '/**\n', ' *  @title ProofOfHumanityProxy\n', ' *  A proxy contract for ProofOfHumanity that implements a token interface to interact with other dapps.\n', " *  Note that it isn't an ERC20 and only implements its interface in order to be compatible with Snapshot.\n", ' */\n', 'contract ProofOfHumanityProxy {\n', '\n', '    IProofOfHumanity public PoH;\n', '    address public governor = msg.sender;\n', '    string public name = "Human Vote";\n', '    string public symbol = "VOTE";\n', '    uint8 public decimals = 0;\n', '\n', '    /** @dev Constructor.\n', '     *  @param _PoH The address of the related ProofOfHumanity contract.\n', '     */\n', '    constructor(IProofOfHumanity _PoH) public {\n', '        PoH = _PoH;\n', '    }\n', '\n', '    /** @dev Changes the address of the the related ProofOfHumanity contract.\n', '     *  @param _PoH The address of the new contract.\n', '     */\n', '    function changePoH(IProofOfHumanity _PoH) external {\n', '        require(msg.sender == governor, "The caller must be the governor.");\n', '        PoH = _PoH;\n', '    }\n', '    \n', '    /** @dev Changes the address of the the governor.\n', '     *  @param _governor The address of the new governor.\n', '     */\n', '    function changeGovernor(address _governor) external {\n', '        require(msg.sender == governor, "The caller must be the governor.");\n', '        governor = _governor;\n', '    }\n', '    \n', '\n', '    /** @dev Returns true if the submission is registered and not expired.\n', '     *  @param _submissionID The address of the submission.\n', '     *  @return Whether the submission is registered or not.\n', '     */\n', '    function isRegistered(address _submissionID) public view returns (bool) {\n', '        return PoH.isRegistered(_submissionID);\n', '    }\n', '\n', '    // ******************** //\n', '    // *      IERC20      * //\n', '    // ******************** //\n', '\n', '    /** @dev Returns the balance of a particular submission of the ProofOfHumanity contract.\n', '     *  Note that this function takes the expiration date into account.\n', '     *  @param _submissionID The address of the submission.\n', '     *  @return The balance of the submission.\n', '     */\n', '    function balanceOf(address _submissionID) external view returns (uint256) {\n', '        return isRegistered(_submissionID) ? 1 : 0;\n', '    }\n', '\n', '    /** @dev Returns the count of all submissions that made a registration request at some point, including those that were added manually.\n', "     *  Note that with the current implementation of ProofOfHumanity it'd be very costly to count only the submissions that are currently registered.\n", '     *  @return The total count of submissions.\n', '     */\n', '    function totalSupply() external view returns (uint256) {\n', '        return PoH.submissionCounter();\n', '    }\n', '\n', '    function transfer(address _recipient, uint256 _amount) external returns (bool) { return false; }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {}\n', '\n', '    function approve(address _spender, uint256 _amount) external returns (bool) { return false; }\n', '\n', '    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool) { return false; }\n', '}']