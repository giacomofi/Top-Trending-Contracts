['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "DODO_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/CloneFactory.sol\n', '\n', 'interface ICloneFactory {\n', '    function clone(address prototype) external returns (address proxy);\n', '}\n', '\n', '// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\n', '// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\n', '\n', 'contract CloneFactory is ICloneFactory {\n', '    function clone(address prototype) external override returns (address proxy) {\n', '        bytes20 targetBytes = bytes20(prototype);\n', '        assembly {\n', '            let clone := mload(0x40)\n', '            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone, 0x14), targetBytes)\n', '            mstore(\n', '                add(clone, 0x28),\n', '                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n', '            )\n', '            proxy := create(0, clone, 0x37)\n', '        }\n', '        return proxy;\n', '    }\n', '}\n', '\n', '// File: contracts/CrowdPooling/intf/ICP.sol\n', '\n', '\n', 'interface ICP {\n', '    function init(\n', '        address[] calldata addressList,\n', '        uint256[] calldata timeLine,\n', '        uint256[] calldata valueList,\n', '        bool isOpenTWAP\n', '    ) external;\n', '\n', '    function bid(address to) external;\n', '\n', '    function cancel(address assetTo, uint256 amount) external;\n', '\n', '    function settle() external;\n', '\n', '    function emergencySettle() external;\n', '\n', '    function claimBase() external;\n', '\n', '    function claimQuote() external;\n', '\n', '    function claimLPToken() external;\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/lib/DecimalMath.sol\n', '\n', '\n', '\n', '/**\n', ' * @title DecimalMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Functions for fixed point number with 18 decimals\n', ' */\n', 'library DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant ONE = 10**18;\n', '    uint256 internal constant ONE2 = 10**36;\n', '\n', '    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d) / (10**18);\n', '    }\n', '\n', '    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d).divCeil(10**18);\n', '    }\n', '\n', '    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).div(d);\n', '    }\n', '\n', '    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).divCeil(d);\n', '    }\n', '\n', '    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).div(target);\n', '    }\n', '\n', '    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).divCeil(target);\n', '    }\n', '}\n', '\n', '// File: contracts/Factory/UpCrowdPoolingFactory.sol\n', '\n', '\n', '/**\n', ' * @title UpCrowdPoolingFacotry\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Create And Register vary price CP Pools \n', ' */\n', 'contract UpCrowdPoolingFactory is InitializableOwnable {\n', '    using SafeMath for uint256;\n', '    // ============ Templates ============\n', '\n', '    address public immutable _CLONE_FACTORY_;\n', '    address public immutable _DVM_FACTORY_;\n', '    address public immutable _DEFAULT_MAINTAINER_;\n', '    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\n', '    address public immutable _DEFAULT_PERMISSION_MANAGER_;\n', '    address public _CP_TEMPLATE_;\n', '\n', '    // ============ Settings =============\n', '\n', '    uint256 public _FREEZE_DURATION_ =  30 days;\n', '    uint256 public _CALM_DURATION_ = 0;\n', '    uint256 public _VEST_DURATION_ = 0;\n', '    uint256 public _K_ = 0;\n', '    uint256 public _CLIFF_RATE_ = 10**18;\n', '\n', '\n', '    // ============ Registry ============\n', '\n', '    // base -> quote -> CP address list\n', '    mapping(address => mapping(address => address[])) public _REGISTRY_;\n', '    // creator -> CP address list\n', '    mapping(address => address[]) public _USER_REGISTRY_;\n', '\n', '    // ============ modifiers ===========\n', '\n', '    modifier valueCheck(\n', '        address cpAddress,\n', '        address baseToken,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList)\n', '    {\n', '        require(timeLine[2] == _CALM_DURATION_, "CP_FACTORY : PHASE_CALM_DURATION_INVALID");\n', '        require(timeLine[4] == _VEST_DURATION_, "CP_FACTORY : VEST_DURATION_INVALID");\n', '        require(valueList[1] == _K_, "CP_FACTORY : K_INVALID");\n', '        require(valueList[3] == _CLIFF_RATE_, "CP_FACTORY : CLIFF_RATE_INVALID");\n', '        require(timeLine[3]>= _FREEZE_DURATION_, "CP_FACTORY : FREEZE_DURATION_INVALID");\n', '        _;\n', '    }\n', '\n', '    // ============ Events ============\n', '\n', '    event NewCP(\n', '        address baseToken,\n', '        address quoteToken,\n', '        address creator,\n', '        address cp\n', '    );\n', '\n', '    constructor(\n', '        address cloneFactory,\n', '        address cpTemplate,\n', '        address dvmFactory,\n', '        address defaultMaintainer,\n', '        address defaultMtFeeRateModel,\n', '        address defaultPermissionManager\n', '    ) public {\n', '        _CLONE_FACTORY_ = cloneFactory;\n', '        _CP_TEMPLATE_ = cpTemplate;\n', '        _DVM_FACTORY_ = dvmFactory;\n', '        _DEFAULT_MAINTAINER_ = defaultMaintainer;\n', '        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\n', '        _DEFAULT_PERMISSION_MANAGER_ = defaultPermissionManager;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function createCrowdPooling() external returns (address newCrowdPooling) {\n', '        newCrowdPooling = ICloneFactory(_CLONE_FACTORY_).clone(_CP_TEMPLATE_);\n', '    }\n', '\n', '    function initCrowdPooling(\n', '        address cpAddress,\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList,\n', '        bool isOpenTWAP\n', '    ) external valueCheck(cpAddress,baseToken,timeLine,valueList) {\n', '        {\n', '        address[] memory addressList = new address[](7);\n', '        addressList[0] = creator;\n', '        addressList[1] = _DEFAULT_MAINTAINER_;\n', '        addressList[2] = baseToken;\n', '        addressList[3] = quoteToken;\n', '        addressList[4] = _DEFAULT_PERMISSION_MANAGER_;\n', '        addressList[5] = _DEFAULT_MT_FEE_RATE_MODEL_;\n', '        addressList[6] = _DVM_FACTORY_;\n', '\n', '        if(valueList[0] == 0) valueList[0] = uint112(-1);\n', '\n', '        ICP(cpAddress).init(\n', '            addressList,\n', '            timeLine,\n', '            valueList,\n', '            isOpenTWAP\n', '        );\n', '        }\n', '\n', '        _REGISTRY_[baseToken][quoteToken].push(cpAddress);\n', '        _USER_REGISTRY_[creator].push(cpAddress);\n', '\n', '        emit NewCP(baseToken, quoteToken, creator, cpAddress);\n', '    }\n', '\n', '    // ============ View Functions ============\n', '\n', '    function getCrowdPooling(address baseToken, address quoteToken)\n', '        external\n', '        view\n', '        returns (address[] memory pools)\n', '    {\n', '        return _REGISTRY_[baseToken][quoteToken];\n', '    }\n', '\n', '    function getCrowdPoolingBidirection(address token0, address token1)\n', '        external\n', '        view\n', '        returns (address[] memory baseToken0Pools, address[] memory baseToken1Pools)\n', '    {\n', '        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\n', '    }\n', '\n', '    function getCrowdPoolingByUser(address user)\n', '        external\n', '        view\n', '        returns (address[] memory pools)\n', '    {\n', '        return _USER_REGISTRY_[user];\n', '    }\n', '\n', '    // ============ Owner Functions ============\n', '    \n', '    function updateCPTemplate(address _newCPTemplate) external onlyOwner {\n', '        _CP_TEMPLATE_ = _newCPTemplate;\n', '    }\n', '\n', '    function setFreezeDuration(uint256 _newFreeDuration) public onlyOwner {\n', '        _FREEZE_DURATION_ = _newFreeDuration;\n', '    }\n', '\n', '    function setCalmDuration(uint256 _newCalmDuration) public onlyOwner {\n', '        _CALM_DURATION_ = _newCalmDuration;\n', '    }\n', '\n', '    function setVestDuration(uint256 _newVestDuration) public onlyOwner {\n', '        _VEST_DURATION_ = _newVestDuration;\n', '    }\n', '\n', '    function setK(uint256 _newK) public onlyOwner {\n', '        require(_newK <= 10**18, "CP_FACTORY : INVALID");\n', '        _K_ = _newK;\n', '    }\n', '\n', '    function setCliffRate(uint256 _newCliffRate) public onlyOwner {\n', '        require(_newCliffRate <= 10**18, "CP_FACTORY : INVALID");\n', '        _CLIFF_RATE_ = _newCliffRate;\n', '    }\n', '}']