['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-20\n', '*/\n', '\n', 'pragma solidity >=0.6.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    function ReentrancyGuardInitialize() internal {\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title VersionedInitializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' *\n', ' * @author Aave, inspired by the OpenZeppelin Initializable contract\n', ' */\n', 'abstract contract VersionedInitializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    uint256 private lastInitializedRevision = 0;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        uint256 revision = getRevision();\n', '        require(\n', '            initializing ||\n', '                isConstructor() ||\n', '                revision > lastInitializedRevision,\n', '            "Contract instance has already been initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            lastInitializedRevision = revision;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev returns the revision number of the contract.\n', '    /// Needs to be defined in the inherited class as a constant.\n', '    function getRevision() internal virtual pure returns (uint256);\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        uint256 cs;\n', '        //solium-disable-next-line\n', '        assembly {\n', '            cs := extcodesize(address())\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[16] private ______gap;\n', '}\n', '\n', '// /**\n', '//  *Submitted for verification at Etherscan.io on 2020-07-29\n', '// */\n', '// /*\n', '//    ____            __   __        __   _\n', '//   / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n', '//  _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n', '// /___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n', '//      /___/\n', '// * Synthetix: YFIRewards.sol\n', '// *\n', '// * Docs: https://docs.synthetix.io/\n', '// *\n', '// *\n', '// * MIT License\n', '// * ===========\n', '// *\n', '// * Copyright (c) 2020 Synthetix\n', '// *\n', '// * Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// * of this software and associated documentation files (the "Software"), to deal\n', '// * in the Software without restriction, including without limitation the rights\n', '// * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// * copies of the Software, and to permit persons to whom the Software is\n', '// * furnished to do so, subject to the following conditions:\n', '// *\n', '// * The above copyright notice and this permission notice shall be included in all\n', '// * copies or substantial portions of the Software.\n', '// *\n', '// * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '// */\n', 'interface Executor {\n', '    function execute(\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256\n', '    ) external;\n', '}\n', '\n', 'contract FortubeGovernance is ReentrancyGuard, VersionedInitializable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    event RegisterVoter(address voter, uint256 votes, uint256 totalVotes);\n', '    event RevokeVoter(address voter, uint256 votes, uint256 totalVotes);\n', '    event NewProposal(\n', '        uint256 id,\n', '        address creator,\n', '        uint256 start,\n', '        uint256 duration,\n', '        address executor\n', '    );\n', '    event Vote(\n', '        uint256 indexed id,\n', '        address indexed voter,\n', '        bool vote,\n', '        uint256 weight\n', '    );\n', '    event ProposalFinished(\n', '        uint256 indexed id,\n', '        uint256 _for,\n', '        uint256 _against,\n', '        bool quorumReached\n', '    );\n', '    event Staked(address indexed user, bytes32 select, uint256 amount, uint256 supply);\n', '    event Withdrawn(address indexed user, bytes32 receipt);\n', '\n', '    struct Select {\n', '        uint256 duration;\n', '        uint256 exrate; //GFOR生成比率\n', '        uint256 reward; //FOR的周期收益率\n', '        uint256 __RESERVED__0;\n', '        uint256 __RESERVED__1;\n', '        uint256 __RESERVED__2;\n', '    }\n', '\n', '    struct Staking {\n', '        address account;\n', '        uint256 amount;\n', '        uint256 start;\n', '        uint256 duration;\n', '        uint256 exrate;\n', '        uint256 reward;\n', '        // uint256 supply;\n', '        uint256 __RESERVED__0;\n', '        uint256 __RESERVED__1;\n', '        uint256 __RESERVED__2;\n', '    }\n', '\n', '    struct Proposal {\n', '        uint256 id;\n', '        address proposer;\n', '        mapping(address => uint256) forVotes;\n', '        mapping(address => uint256) againstVotes;\n', '        uint256 totalForVotes;\n', '        uint256 totalAgainstVotes;\n', '        uint256 start; // block start;\n', '        uint256 end; // start + period\n', '        address executor;\n', '        string hash;\n', '        uint256 totalVotesAvailable;\n', '        uint256 quorum;\n', '        uint256 quorumRequired;\n', '        bool open;\n', '    }\n', '\n', '    //vote required\n', '\n', '    mapping(uint256 => Proposal) public proposals;\n', '    mapping(address => uint256) public votes;\n', '    mapping(address => bool) public voters;\n', '    mapping(address => uint256) public voteLock; // period that your sake it locked to keep it for voting\n', '    uint256 public totalVotes;\n', '    uint256 public proposalCount;\n', '\n', '    uint256 public period; // voting period in blocks\n', '    uint256 public lock; // vote lock in block\n', '    uint256 public minimum;\n', '    uint256 public quorum;\n', '\n', '    //system required\n', '\n', '    bool public breaker = false;\n', '\n', '    address public governance;\n', '    address public staketoken;\n', '    address public rewarder; //奖励支付者\n', '\n', '    //ERC20 required\n', '\n', '    uint8 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _totalStake;\n', '\n', '    //stake required\n', '\n', '    mapping(bytes32 => Select) private _selects; //锁仓选项\n', '    mapping(address => uint256) private _stakes; //锁仓额度\n', '    mapping(address => uint256) private _balances; //GFOR额度\n', '    mapping(address => bytes32[]) private _receipts; //锁仓记录回执\n', '    mapping(bytes32 => Staking) private _stakings; //锁仓记录\n', '\n', '    uint256 private _stakeNonce = 0;\n', '\n', '    //initializer required \n', '\n', '    function getRevision() internal override pure returns (uint256) {\n', '        return uint256(0x1);\n', '    }\n', '\n', '    function initialize(\n', '        address _governance,\n', '        address _staketoken,\n', '        address _rewarder\n', '    ) public initializer {\n', '        ReentrancyGuard.ReentrancyGuardInitialize();\n', '\n', '        governance = _governance;\n', '        staketoken = _staketoken;\n', '        rewarder = _rewarder;\n', '\n', '        decimals = 18;\n', '        name = "ForTube Governance Token";\n', '        symbol = "GFOR";\n', '    }\n', '\n', '    function totalStake() public view returns (uint256) {\n', '        return _totalStake;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function stakeOf(address account) public view returns (uint256) {\n', '        return _stakes[account];\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function receipts(address account) public view returns (bytes32[] memory) {\n', '        return _receipts[account];\n', '    }\n', '\n', '    function staking(bytes32 receipt) public view returns (Staking memory) {\n', '        return _stakings[receipt];\n', '    }\n', '\n', '    function getSelect(bytes32 select)\n', '        public\n', '        view\n', '        returns (Select memory)\n', '    {\n', '        return _selects[select];\n', '    }\n', '\n', '    /* Fee collection for any other token */\n', '\n', '    function seize(address _token, uint256 amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_token != staketoken, "can not staketoken");\n', '        IERC20(_token).safeTransfer(governance, amount);\n', '    }\n', '\n', '    /* Fees breaker, to protect withdraws if anything ever goes wrong */\n', '\n', '    function setBreaker(bool _breaker) external {\n', '        require(msg.sender == governance, "!governance");\n', '        breaker = _breaker;\n', '    }\n', '\n', '    /* Modifications for proposals */\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setQuorum(uint256 _quorum) public {\n', '        require(msg.sender == governance, "!governance");\n', '        quorum = _quorum;\n', '    }\n', '\n', '    function setMinimum(uint256 _minimum) public {\n', '        require(msg.sender == governance, "!governance");\n', '        minimum = _minimum;\n', '    }\n', '\n', '    function setPeriod(uint256 _period) public {\n', '        require(msg.sender == governance, "!governance");\n', '        period = _period;\n', '    }\n', '\n', '    function setLock(uint256 _lock) public {\n', '        require(msg.sender == governance, "!governance");\n', '        lock = _lock;\n', '    }\n', '    \n', '    function setRewarder(address _rewarder) public {\n', '        require(msg.sender == governance, "!governance");\n', '        rewarder = _rewarder;\n', '    }\n', '    //add stake arguments\n', '\n', '    function addSelect(\n', '        bytes32 select,\n', '        uint256 duration,\n', '        uint256 exrate,\n', '        uint256 reward\n', '    ) public {\n', '        require(msg.sender == governance, "!governance");\n', '        _selects[select].duration = duration;\n', '        _selects[select].exrate = exrate;\n', '        _selects[select].reward = reward;\n', '    }\n', '\n', '    // governance\n', '\n', '    function propose(address executor, string memory hash) public {\n', '        require(votesOf(msg.sender) > minimum, "<minimum");\n', '        proposals[proposalCount++] = Proposal({\n', '            id: proposalCount,\n', '            proposer: msg.sender,\n', '            totalForVotes: 0,\n', '            totalAgainstVotes: 0,\n', '            start: block.number,\n', '            end: period.add(block.number),\n', '            executor: executor,\n', '            hash: hash,\n', '            totalVotesAvailable: totalVotes,\n', '            quorum: 0,\n', '            quorumRequired: quorum,\n', '            open: true\n', '        });\n', '\n', '        emit NewProposal(\n', '            proposalCount,\n', '            msg.sender,\n', '            block.number,\n', '            period,\n', '            executor\n', '        );\n', '        voteLock[msg.sender] = lock.add(block.number);\n', '    }\n', '\n', '    function execute(uint256 id) public {\n', '        (uint256 _for, uint256 _against, uint256 _quorum) = getStats(id);\n', '        require(proposals[id].quorumRequired < _quorum, "!quorum");\n', '        require(proposals[id].end < block.number, "!end");\n', '        if (proposals[id].open == true) {\n', '            tallyVotes(id);\n', '        }\n', '        Executor(proposals[id].executor).execute(id, _for, _against, _quorum);\n', '    }\n', '\n', '    function getStats(uint256 id)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 _for,\n', '            uint256 _against,\n', '            uint256 _quorum\n', '        )\n', '    {\n', '        _for = proposals[id].totalForVotes;\n', '        _against = proposals[id].totalAgainstVotes;\n', '\n', '        uint256 _total = _for.add(_against);\n', '        _for = _for.mul(10000).div(_total);\n', '        _against = _against.mul(10000).div(_total);\n', '\n', '        _quorum = _total.mul(10000).div(proposals[id].totalVotesAvailable);\n', '    }\n', '\n', '    function getVoterStats(uint256 id, address voter)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        return (\n', '            proposals[id].forVotes[voter],\n', '            proposals[id].againstVotes[voter]\n', '        );\n', '    }\n', '\n', '    function tallyVotes(uint256 id) public {\n', '        require(proposals[id].open == true, "!open");\n', '        require(proposals[id].end < block.number, "!end");\n', '\n', '        (uint256 _for, uint256 _against, ) = getStats(id);\n', '        bool _quorum = false;\n', '        if (proposals[id].quorum >= proposals[id].quorumRequired) {\n', '            _quorum = true;\n', '        }\n', '        proposals[id].open = false;\n', '        emit ProposalFinished(id, _for, _against, _quorum);\n', '    }\n', '\n', '    function votesOf(address voter) public view returns (uint256) {\n', '        return votes[voter];\n', '    }\n', '\n', '    function register() public {\n', '        require(voters[msg.sender] == false, "voter");\n', '        voters[msg.sender] = true;\n', '        votes[msg.sender] = balanceOf(msg.sender);\n', '        totalVotes = totalVotes.add(votes[msg.sender]);\n', '        emit RegisterVoter(msg.sender, votes[msg.sender], totalVotes);\n', '    }\n', '\n', '    function revoke() public {\n', '        require(voters[msg.sender] == true, "!voter");\n', '        voters[msg.sender] = false;\n', '        if (totalVotes < votes[msg.sender]) {\n', '            //edge case, should be impossible, but this is defi\n', '            totalVotes = 0;\n', '        } else {\n', '            totalVotes = totalVotes.sub(votes[msg.sender]);\n', '        }\n', '        emit RevokeVoter(msg.sender, votes[msg.sender], totalVotes);\n', '        votes[msg.sender] = 0;\n', '    }\n', '\n', '    function voteFor(uint256 id) public {\n', '        require(proposals[id].start < block.number, "<start");\n', '        require(proposals[id].end > block.number, ">end");\n', '\n', '        uint256 _against = proposals[id].againstVotes[msg.sender];\n', '        if (_against > 0) {\n', '            proposals[id].totalAgainstVotes = proposals[id]\n', '                .totalAgainstVotes\n', '                .sub(_against);\n', '            proposals[id].againstVotes[msg.sender] = 0;\n', '        }\n', '\n', '        uint256 vote = votesOf(msg.sender).sub(\n', '            proposals[id].forVotes[msg.sender]\n', '        );\n', '        proposals[id].totalForVotes = proposals[id].totalForVotes.add(vote);\n', '        proposals[id].forVotes[msg.sender] = votesOf(msg.sender);\n', '\n', '        proposals[id].totalVotesAvailable = totalVotes;\n', '        uint256 _votes = proposals[id].totalForVotes.add(\n', '            proposals[id].totalAgainstVotes\n', '        );\n', '        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\n', '\n', '        voteLock[msg.sender] = lock.add(block.number);\n', '\n', '        emit Vote(id, msg.sender, true, vote);\n', '    }\n', '\n', '    function voteAgainst(uint256 id) public {\n', '        require(proposals[id].start < block.number, "<start");\n', '        require(proposals[id].end > block.number, ">end");\n', '\n', '        uint256 _for = proposals[id].forVotes[msg.sender];\n', '        if (_for > 0) {\n', '            proposals[id].totalForVotes = proposals[id].totalForVotes.sub(_for);\n', '            proposals[id].forVotes[msg.sender] = 0;\n', '        }\n', '\n', '        uint256 vote = votesOf(msg.sender).sub(\n', '            proposals[id].againstVotes[msg.sender]\n', '        );\n', '        proposals[id].totalAgainstVotes = proposals[id].totalAgainstVotes.add(\n', '            vote\n', '        );\n', '        proposals[id].againstVotes[msg.sender] = votesOf(msg.sender);\n', '\n', '        proposals[id].totalVotesAvailable = totalVotes;\n', '        uint256 _votes = proposals[id].totalForVotes.add(\n', '            proposals[id].totalAgainstVotes\n', '        );\n', '        proposals[id].quorum = _votes.mul(10000).div(totalVotes);\n', '\n', '        voteLock[msg.sender] = lock.add(block.number);\n', '\n', '        emit Vote(id, msg.sender, false, vote);\n', '    }\n', '\n', '    //stake / withdraw\n', '\n', '    function stake(bytes32 select, uint256 amount) public {\n', '        require(false, "stake was disable");\n', '        require(amount > 0, "Cannot stake 0");\n', '        uint256 supply = _onstake(select, amount);\n', '        if (voters[msg.sender] == true) {\n', '            votes[msg.sender] = votes[msg.sender].add(supply);\n', '            totalVotes = totalVotes.add(supply);\n', '        }\n', '        emit Staked(msg.sender, select, amount, supply);\n', '    }\n', '\n', '    function withdraw(bytes32 receipt) public {\n', '        uint256 supply = _onwithdraw(receipt);\n', '        if (voters[msg.sender] == true) {\n', '            votes[msg.sender] = votes[msg.sender].sub(supply);\n', '            totalVotes = totalVotes.sub(supply);\n', '        }\n', '        if (breaker == false) {\n', '            require(voteLock[msg.sender] < block.number, "!locked");\n', '        }\n', '        emit Withdrawn(msg.sender, receipt);\n', '    }\n', '\n', '    function _onstake(bytes32 select, uint256 amount)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        Staking memory staking = Staking(\n', '            msg.sender,\n', '            amount,\n', '            now,\n', '            _selects[select].duration,\n', '            _selects[select].exrate,\n', '            _selects[select].reward,\n', '            0,\n', '            0,\n', '            0\n', '        );\n', '        bytes32 receipt = keccak256(abi.encode(_stakeNonce++, staking));\n', '        _stakings[receipt] = staking;\n', '        _receipts[msg.sender].push(receipt);\n', '        _totalStake = _totalStake.add(amount);\n', '        _stakes[msg.sender] = _stakes[msg.sender].add(amount);\n', '        uint256 supply = amount.mul(_stakings[receipt].exrate).div(1e18);\n', '        require(supply > 0, "!supply");\n', '        _totalSupply = _totalSupply.add(supply);\n', '        _balances[msg.sender] = _balances[msg.sender].add(supply);\n', '        IERC20(staketoken).safeTransferFrom(msg.sender, address(this), amount);\n', '        return supply;\n', '    }\n', '\n', '    //取回指定的锁仓到期的FOR\n', '    function _onwithdraw(bytes32 receipt) internal returns (uint256) {\n', '        uint256 at = _findReceipt(msg.sender, receipt);\n', '        require(at != uint256(-1), "not found receipt");\n', '        Staking memory _staking = _stakings[receipt];\n', '        require(now > _staking.start.add(_staking.duration), "stake has not expired"); //到期\n', '\n', '        uint256 amount = _staking.amount;\n', '        _totalStake = _totalStake.sub(amount);\n', '        _stakes[msg.sender] = _stakes[msg.sender].sub(amount);\n', '        uint256 supply = amount.mul(_staking.exrate).div(1e18);\n', '        require(supply > 0, "!supply");\n', '        _totalSupply = _totalSupply.sub(supply);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(supply);\n', '\n', '        uint256 last = _receipts[msg.sender].length - 1;\n', '        _receipts[msg.sender][at] = _receipts[msg.sender][last];\n', '        _receipts[msg.sender].pop();\n', '        delete _stakings[receipt];\n', '\n', '        IERC20(staketoken).safeTransfer(msg.sender, amount);\n', '        if(_staking.reward != 0) {\n', '            uint256 reward = amount.mul(_staking.reward).div(1e18);\n', '            IERC20(staketoken).safeTransferFrom(rewarder, msg.sender, reward);\n', '        }\n', '        return supply;\n', '    }\n', '\n', '    function _findReceipt(address account, bytes32 receipt)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 length = _receipts[account].length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            if (receipt == _receipts[account][i]) {\n', '                return i;\n', '            }\n', '        }\n', '        return uint256(-1);\n', '    }\n', '}']