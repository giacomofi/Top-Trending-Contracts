['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/tokens/IERC20MintedBurnable.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', 'interface IERC20MintedBurnable is IERC20 {\n', '    function mint(address to, uint256 amount) external;\n', '\n', '    function burn(uint256 amount) external;\n', '\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/IDerivativeSpecification.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/// @title Derivative Specification interface\n', '/// @notice Immutable collection of derivative attributes\n', "/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\n", 'interface IDerivativeSpecification {\n', '    /// @notice Proof of a derivative specification\n', '    /// @dev Verifies that contract is a derivative specification\n', '    /// @return true if contract is a derivative specification\n', '    function isDerivativeSpecification() external pure returns (bool);\n', '\n', '    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\n', '    /// between the start and the end of the Live period\n', '    /// @dev Should be resolved through OracleRegistry contract\n', '    /// @return oracle symbols\n', '    function oracleSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    /// finds the value closest to a given timestamp\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbols\n', '    function oracleIteratorSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Type of collateral that users submit to mint the derivative\n', '    /// @dev Should be resolved through CollateralTokenRegistry contract\n', '    /// @return collateral token symbol\n', '    function collateralTokenSymbol() external view returns (bytes32);\n', '\n', '    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\n', '    /// and the initial collateral split to the final collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split symbol\n', '    function collateralSplitSymbol() external view returns (bytes32);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\n", '    /// @dev Set in seconds\n', '    /// @return live period value\n', '    function livePeriod() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of primary asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\n', '    /// @return primary nominal value\n', '    function primaryNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of complement asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\n', '    /// @return complement nominal value\n', '    function complementNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Minting fee rate due to the author of the derivative specification.\n', '    /// @dev Percentage fee multiplied by 10 ^ 12\n', '    /// @return author fee\n', '    function authorFee() external view returns (uint256);\n', '\n', '    /// @notice Symbol of the derivative\n', '    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\n', '    /// @return derivative specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Return optional long name of the derivative\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return long name\n', '    function name() external view returns (string memory);\n', '\n', '    /// @notice Optional URI to the derivative specs\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return URI to the derivative specs\n', '    function baseURI() external view returns (string memory);\n', '\n', '    /// @notice Derivative spec author\n', "    /// @dev Used to set and receive author's fee\n", '    /// @return address of the author\n', '    function author() external view returns (address);\n', '}\n', '\n', '// File: contracts/tokens/ITokenBuilder.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', 'interface ITokenBuilder {\n', '    function isTokenBuilder() external pure returns (bool);\n', '\n', '    function buildTokens(\n', '        IDerivativeSpecification derivative,\n', '        uint256 settlement,\n', '        address _collateralToken\n', '    ) external returns (IERC20MintedBurnable, IERC20MintedBurnable);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/EnumerableSet.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/AccessControl.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/ERC20PresetMinterPermitted.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev {ERC20} token, including:\n', ' *\n', ' *  - ability for holders to burn (destroy) their tokens\n', ' *  - a minter role that allows for token minting (creation)\n', ' *\n', ' * This contract uses {AccessControl} to lock permissioned functions using the\n', ' * different roles - head to its documentation for details.\n', ' *\n', ' * The account that deploys the contract will be granted the minter\n', ' * role, as well as the default admin role, which will let it grant both minter\n', ' * and pauser roles to another accounts\n', ' */\n', 'contract ERC20PresetMinterPermitted is Context, AccessControl, ERC20Burnable {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH =\n', '        keccak256(\n', '            "EIP712Domain(string name,uint256 chainId,address verifyingContract)"\n', '        );\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH =\n', '        keccak256(\n', '            "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"\n', '        );\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '\n', '    /**\n', '     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` to the\n', '     * account that deploys the contract.\n', '     *\n', '     * See {ERC20-constructor}.\n', '     */\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        address owner,\n', '        uint8 decimals\n', '    ) public ERC20(name, symbol) {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, owner);\n', '\n', '        _setupRole(MINTER_ROLE, owner);\n', '\n', '        _setupDecimals(decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` new tokens for `to`.\n', '     *\n', '     * See {ERC20-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MINTER_ROLE`.\n', '     */\n', '    function mint(address to, uint256 amount) public {\n', '        require(\n', '            hasRole(MINTER_ROLE, _msgSender()),\n', '            "ERC20PresetMinterPermitted: must have minter role to mint"\n', '        );\n', '        _mint(to, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal override(ERC20) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spends\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external {\n', '        bytes32 domainSeparator =\n', '            keccak256(\n', '                abi.encode(\n', '                    DOMAIN_TYPEHASH,\n', '                    keccak256(bytes(name())),\n', '                    getChainId(),\n', '                    address(this)\n', '                )\n', '            );\n', '        bytes32 structHash =\n', '            keccak256(\n', '                abi.encode(\n', '                    PERMIT_TYPEHASH,\n', '                    owner,\n', '                    spender,\n', '                    amount,\n', '                    nonces[owner]++,\n', '                    deadline\n', '                )\n', '            );\n', '        bytes32 digest =\n', '            keccak256(\n', '                abi.encodePacked("\\x19\\x01", domainSeparator, structHash)\n', '            );\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "Permit: invalid signature");\n', '        require(signatory == owner, "Permit: unauthorized");\n', '        require(block.timestamp <= deadline, "Permit: signature expired");\n', '\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/IERC20Metadata.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IERC20Metadata {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts/libs/BokkyPooBahsDateTimeLibrary/BokkyPooBahsDateTimeLibrary.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '// ----------------------------------------------------------------------------\n', "// BokkyPooBah's DateTime Library v1.01\n", '//\n', '// A gas-efficient Solidity date and time library\n', '//\n', '// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n', '//\n', '// Tested date range 1970/01/01 to 2345/12/31\n', '//\n', '// Conventions:\n', '// Unit      | Range         | Notes\n', '// :-------- |:-------------:|:-----\n', '// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n', '// year      | 1970 ... 2345 |\n', '// month     | 1 ... 12      |\n', '// day       | 1 ... 31      |\n', '// hour      | 0 ... 23      |\n', '// minute    | 0 ... 59      |\n', '// second    | 0 ... 59      |\n', '// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n', '//\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', 'library BokkyPooBahsDateTimeLibrary {\n', '    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n', '    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n', '    uint256 constant SECONDS_PER_MINUTE = 60;\n', '    int256 constant OFFSET19700101 = 2440588;\n', '\n', '    uint256 constant DOW_MON = 1;\n', '    uint256 constant DOW_TUE = 2;\n', '    uint256 constant DOW_WED = 3;\n', '    uint256 constant DOW_THU = 4;\n', '    uint256 constant DOW_FRI = 5;\n', '    uint256 constant DOW_SAT = 6;\n', '    uint256 constant DOW_SUN = 7;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Calculate the number of days from 1970/01/01 to year/month/day using\n', '    // the date conversion algorithm from\n', '    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n', '    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n', '    //\n', '    // days = day\n', '    //      - 32075\n', '    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n', '    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n', '    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n', '    //      - offset\n', '    // ------------------------------------------------------------------------\n', '    function _daysFromDate(\n', '        uint256 year,\n', '        uint256 month,\n', '        uint256 day\n', '    ) internal pure returns (uint256 _days) {\n', '        require(year >= 1970);\n', '        int256 _year = int256(year);\n', '        int256 _month = int256(month);\n', '        int256 _day = int256(day);\n', '\n', '        int256 __days =\n', '            _day -\n', '                32075 +\n', '                (1461 * (_year + 4800 + (_month - 14) / 12)) /\n', '                4 +\n', '                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\n', '                12 -\n', '                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\n', '                4 -\n', '                OFFSET19700101;\n', '\n', '        _days = uint256(__days);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Calculate year/month/day from the number of days since 1970/01/01 using\n', '    // the date conversion algorithm from\n', '    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n', '    // and adding the offset 2440588 so that 1970/01/01 is day 0\n', '    //\n', '    // int L = days + 68569 + offset\n', '    // int N = 4 * L / 146097\n', '    // L = L - (146097 * N + 3) / 4\n', '    // year = 4000 * (L + 1) / 1461001\n', '    // L = L - 1461 * year / 4 + 31\n', '    // month = 80 * L / 2447\n', '    // dd = L - 2447 * month / 80\n', '    // L = month / 11\n', '    // month = month + 2 - 12 * L\n', '    // year = 100 * (N - 49) + year + L\n', '    // ------------------------------------------------------------------------\n', '    function _daysToDate(uint256 _days)\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256 year,\n', '            uint256 month,\n', '            uint256 day\n', '        )\n', '    {\n', '        int256 __days = int256(_days);\n', '\n', '        int256 L = __days + 68569 + OFFSET19700101;\n', '        int256 N = (4 * L) / 146097;\n', '        L = L - (146097 * N + 3) / 4;\n', '        int256 _year = (4000 * (L + 1)) / 1461001;\n', '        L = L - (1461 * _year) / 4 + 31;\n', '        int256 _month = (80 * L) / 2447;\n', '        int256 _day = L - (2447 * _month) / 80;\n', '        L = _month / 11;\n', '        _month = _month + 2 - 12 * L;\n', '        _year = 100 * (N - 49) + _year + L;\n', '\n', '        year = uint256(_year);\n', '        month = uint256(_month);\n', '        day = uint256(_day);\n', '    }\n', '\n', '    function timestampFromDate(\n', '        uint256 year,\n', '        uint256 month,\n', '        uint256 day\n', '    ) internal pure returns (uint256 timestamp) {\n', '        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n', '    }\n', '\n', '    function timestampFromDateTime(\n', '        uint256 year,\n', '        uint256 month,\n', '        uint256 day,\n', '        uint256 hour,\n', '        uint256 minute,\n', '        uint256 second\n', '    ) internal pure returns (uint256 timestamp) {\n', '        timestamp =\n', '            _daysFromDate(year, month, day) *\n', '            SECONDS_PER_DAY +\n', '            hour *\n', '            SECONDS_PER_HOUR +\n', '            minute *\n', '            SECONDS_PER_MINUTE +\n', '            second;\n', '    }\n', '\n', '    function timestampToDate(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256 year,\n', '            uint256 month,\n', '            uint256 day\n', '        )\n', '    {\n', '        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function timestampToDateTime(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256 year,\n', '            uint256 month,\n', '            uint256 day,\n', '            uint256 hour,\n', '            uint256 minute,\n', '            uint256 second\n', '        )\n', '    {\n', '        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        uint256 secs = timestamp % SECONDS_PER_DAY;\n', '        hour = secs / SECONDS_PER_HOUR;\n', '        secs = secs % SECONDS_PER_HOUR;\n', '        minute = secs / SECONDS_PER_MINUTE;\n', '        second = secs % SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function isValidDate(\n', '        uint256 year,\n', '        uint256 month,\n', '        uint256 day\n', '    ) internal pure returns (bool valid) {\n', '        if (year >= 1970 && month > 0 && month <= 12) {\n', '            uint256 daysInMonth = _getDaysInMonth(year, month);\n', '            if (day > 0 && day <= daysInMonth) {\n', '                valid = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function isValidDateTime(\n', '        uint256 year,\n', '        uint256 month,\n', '        uint256 day,\n', '        uint256 hour,\n', '        uint256 minute,\n', '        uint256 second\n', '    ) internal pure returns (bool valid) {\n', '        if (isValidDate(year, month, day)) {\n', '            if (hour < 24 && minute < 60 && second < 60) {\n', '                valid = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function isLeapYear(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (bool leapYear)\n', '    {\n', '        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        leapYear = _isLeapYear(year);\n', '    }\n', '\n', '    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\n', '        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n', '    }\n', '\n', '    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\n', '        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\n', '    }\n', '\n', '    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\n', '        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\n', '    }\n', '\n', '    function getDaysInMonth(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 daysInMonth)\n', '    {\n', '        (uint256 year, uint256 month, ) =\n', '            _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        daysInMonth = _getDaysInMonth(year, month);\n', '    }\n', '\n', '    function _getDaysInMonth(uint256 year, uint256 month)\n', '        internal\n', '        pure\n', '        returns (uint256 daysInMonth)\n', '    {\n', '        if (\n', '            month == 1 ||\n', '            month == 3 ||\n', '            month == 5 ||\n', '            month == 7 ||\n', '            month == 8 ||\n', '            month == 10 ||\n', '            month == 12\n', '        ) {\n', '            daysInMonth = 31;\n', '        } else if (month != 2) {\n', '            daysInMonth = 30;\n', '        } else {\n', '            daysInMonth = _isLeapYear(year) ? 29 : 28;\n', '        }\n', '    }\n', '\n', '    // 1 = Monday, 7 = Sunday\n', '    function getDayOfWeek(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 dayOfWeek)\n', '    {\n', '        uint256 _days = timestamp / SECONDS_PER_DAY;\n', '        dayOfWeek = ((_days + 3) % 7) + 1;\n', '    }\n', '\n', '    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\n', '        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\n', '        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\n', '        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\n', '        uint256 secs = timestamp % SECONDS_PER_DAY;\n', '        hour = secs / SECONDS_PER_HOUR;\n', '    }\n', '\n', '    function getMinute(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 minute)\n', '    {\n', '        uint256 secs = timestamp % SECONDS_PER_HOUR;\n', '        minute = secs / SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function getSecond(uint256 timestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 second)\n', '    {\n', '        second = timestamp % SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function addYears(uint256 timestamp, uint256 _years)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        (uint256 year, uint256 month, uint256 day) =\n', '            _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        year += _years;\n', '        uint256 daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp =\n', '            _daysFromDate(year, month, day) *\n', '            SECONDS_PER_DAY +\n', '            (timestamp % SECONDS_PER_DAY);\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function addMonths(uint256 timestamp, uint256 _months)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        (uint256 year, uint256 month, uint256 day) =\n', '            _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        month += _months;\n', '        year += (month - 1) / 12;\n', '        month = ((month - 1) % 12) + 1;\n', '        uint256 daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp =\n', '            _daysFromDate(year, month, day) *\n', '            SECONDS_PER_DAY +\n', '            (timestamp % SECONDS_PER_DAY);\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function addDays(uint256 timestamp, uint256 _days)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function addHours(uint256 timestamp, uint256 _hours)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function addMinutes(uint256 timestamp, uint256 _minutes)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function addSeconds(uint256 timestamp, uint256 _seconds)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp + _seconds;\n', '        require(newTimestamp >= timestamp);\n', '    }\n', '\n', '    function subYears(uint256 timestamp, uint256 _years)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        (uint256 year, uint256 month, uint256 day) =\n', '            _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        year -= _years;\n', '        uint256 daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp =\n', '            _daysFromDate(year, month, day) *\n', '            SECONDS_PER_DAY +\n', '            (timestamp % SECONDS_PER_DAY);\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function subMonths(uint256 timestamp, uint256 _months)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        (uint256 year, uint256 month, uint256 day) =\n', '            _daysToDate(timestamp / SECONDS_PER_DAY);\n', '        uint256 yearMonth = year * 12 + (month - 1) - _months;\n', '        year = yearMonth / 12;\n', '        month = (yearMonth % 12) + 1;\n', '        uint256 daysInMonth = _getDaysInMonth(year, month);\n', '        if (day > daysInMonth) {\n', '            day = daysInMonth;\n', '        }\n', '        newTimestamp =\n', '            _daysFromDate(year, month, day) *\n', '            SECONDS_PER_DAY +\n', '            (timestamp % SECONDS_PER_DAY);\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function subDays(uint256 timestamp, uint256 _days)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function subHours(uint256 timestamp, uint256 _hours)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function subMinutes(uint256 timestamp, uint256 _minutes)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function subSeconds(uint256 timestamp, uint256 _seconds)\n', '        internal\n', '        pure\n', '        returns (uint256 newTimestamp)\n', '    {\n', '        newTimestamp = timestamp - _seconds;\n', '        require(newTimestamp <= timestamp);\n', '    }\n', '\n', '    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _years)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n', '        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\n', '        _years = toYear - fromYear;\n', '    }\n', '\n', '    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _months)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        (uint256 fromYear, uint256 fromMonth, ) =\n', '            _daysToDate(fromTimestamp / SECONDS_PER_DAY);\n', '        (uint256 toYear, uint256 toMonth, ) =\n', '            _daysToDate(toTimestamp / SECONDS_PER_DAY);\n', '        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\n', '    }\n', '\n', '    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _days)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\n', '    }\n', '\n', '    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _hours)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\n', '    }\n', '\n', '    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _minutes)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\n', '    }\n', '\n', '    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\n', '        internal\n', '        pure\n', '        returns (uint256 _seconds)\n', '    {\n', '        require(fromTimestamp <= toTimestamp);\n', '        _seconds = toTimestamp - fromTimestamp;\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/TokenMetadataGenerator.sol\n', '\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', 'contract TokenMetadataGenerator {\n', '    function formatDate(uint256 _posixDate)\n', '        internal\n', '        view\n', '        returns (string memory)\n', '    {\n', '        uint256 year;\n', '        uint256 month;\n', '        uint256 day;\n', '        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(\n', '            _posixDate\n', '        );\n', '\n', '        return\n', '            concat(\n', '                uint2str(day),\n', '                concat(\n', '                    getMonthShortName(month),\n', '                    uint2str(getCenturyYears(year))\n', '                )\n', '            );\n', '    }\n', '\n', '    function formatMeta(\n', '        string memory _prefix,\n', '        string memory _concatenator,\n', '        string memory _date,\n', '        string memory _postfix\n', '    ) internal pure returns (string memory) {\n', '        return concat(_prefix, concat(_concatenator, concat(_date, _postfix)));\n', '    }\n', '\n', '    function makeTokenName(\n', '        string memory _baseName,\n', '        string memory _date,\n', '        string memory _postfix\n', '    ) internal pure returns (string memory) {\n', '        return formatMeta(_baseName, " ", _date, _postfix);\n', '    }\n', '\n', '    function makeTokenSymbol(\n', '        string memory _baseName,\n', '        string memory _date,\n', '        string memory _postfix\n', '    ) internal pure returns (string memory) {\n', '        return formatMeta(_baseName, "-", _date, _postfix);\n', '    }\n', '\n', '    function getCenturyYears(uint256 _year) internal pure returns (uint256) {\n', '        return _year % 100;\n', '    }\n', '\n', '    function concat(string memory _a, string memory _b)\n', '        internal\n', '        pure\n', '        returns (string memory)\n', '    {\n', '        return string(abi.encodePacked(bytes(_a), bytes(_b)));\n', '    }\n', '\n', '    function uint2str(uint256 _i)\n', '        internal\n', '        pure\n', '        returns (string memory _uintAsString)\n', '    {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint256 j = _i;\n', '        uint256 len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint256 k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '\n', '    function getMonthShortName(uint256 _month)\n', '        internal\n', '        pure\n', '        returns (string memory)\n', '    {\n', '        if (_month == 1) {\n', '            return "Jan";\n', '        }\n', '        if (_month == 2) {\n', '            return "Feb";\n', '        }\n', '        if (_month == 3) {\n', '            return "Mar";\n', '        }\n', '        if (_month == 4) {\n', '            return "Arp";\n', '        }\n', '        if (_month == 5) {\n', '            return "May";\n', '        }\n', '        if (_month == 6) {\n', '            return "Jun";\n', '        }\n', '        if (_month == 7) {\n', '            return "Jul";\n', '        }\n', '        if (_month == 8) {\n', '            return "Aug";\n', '        }\n', '        if (_month == 9) {\n', '            return "Sep";\n', '        }\n', '        if (_month == 10) {\n', '            return "Oct";\n', '        }\n', '        if (_month == 11) {\n', '            return "Nov";\n', '        }\n', '        if (_month == 12) {\n', '            return "Dec";\n', '        }\n', '        return "NaN";\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/TokenBuilder.sol\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenBuilder is ITokenBuilder, TokenMetadataGenerator {\n', '    string public constant PRIMARY_TOKEN_NAME_POSTFIX = " UP";\n', '    string public constant COMPLEMENT_TOKEN_NAME_POSTFIX = " DOWN";\n', '    string public constant PRIMARY_TOKEN_SYMBOL_POSTFIX = "-UP";\n', '    string public constant COMPLEMENT_TOKEN_SYMBOL_POSTFIX = "-DOWN";\n', '    uint8 public constant DECIMALS_DEFAULT = 18;\n', '\n', '    event DerivativeTokensCreated(\n', '        address primaryTokenAddress,\n', '        address complementTokenAddress\n', '    );\n', '\n', '    function isTokenBuilder() external pure override returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function buildTokens(\n', '        IDerivativeSpecification _derivativeSpecification,\n', '        uint256 _settlement,\n', '        address _collateralToken\n', '    ) external override returns (IERC20MintedBurnable, IERC20MintedBurnable) {\n', '        string memory settlementDate = formatDate(_settlement);\n', '\n', '        uint8 decimals = IERC20Metadata(_collateralToken).decimals();\n', '        if (decimals == 0) {\n', '            decimals = DECIMALS_DEFAULT;\n', '        }\n', '\n', '        address primaryToken =\n', '            address(\n', '                new ERC20PresetMinterPermitted(\n', '                    makeTokenName(\n', '                        _derivativeSpecification.name(),\n', '                        settlementDate,\n', '                        PRIMARY_TOKEN_NAME_POSTFIX\n', '                    ),\n', '                    makeTokenSymbol(\n', '                        _derivativeSpecification.symbol(),\n', '                        settlementDate,\n', '                        PRIMARY_TOKEN_SYMBOL_POSTFIX\n', '                    ),\n', '                    msg.sender,\n', '                    decimals\n', '                )\n', '            );\n', '\n', '        address complementToken =\n', '            address(\n', '                new ERC20PresetMinterPermitted(\n', '                    makeTokenName(\n', '                        _derivativeSpecification.name(),\n', '                        settlementDate,\n', '                        COMPLEMENT_TOKEN_NAME_POSTFIX\n', '                    ),\n', '                    makeTokenSymbol(\n', '                        _derivativeSpecification.symbol(),\n', '                        settlementDate,\n', '                        COMPLEMENT_TOKEN_SYMBOL_POSTFIX\n', '                    ),\n', '                    msg.sender,\n', '                    decimals\n', '                )\n', '            );\n', '\n', '        emit DerivativeTokensCreated(primaryToken, complementToken);\n', '\n', '        return (\n', '            IERC20MintedBurnable(primaryToken),\n', '            IERC20MintedBurnable(complementToken)\n', '        );\n', '    }\n', '}']