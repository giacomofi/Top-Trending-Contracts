['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface CTokenInterface {\n', '    function underlying() external view returns (address);\n', '}\n', '\n', 'interface GemJoinInterface {\n', '    function ilk() external view returns (bytes32);\n', '}\n', '\n', 'interface ConnectorsInterface {\n', '    function chief(address) external view returns (bool);\n', '}\n', '\n', 'interface IndexInterface {\n', '    function master() external view returns (address);\n', '}\n', '\n', '\n', 'contract Helpers {\n', '    address public constant instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\n', '\n', '    mapping (address => address) public cTokenMapping;\n', '\n', '    event LogAddCTokenMapping(address indexed token, address indexed cToken);\n', '    event LogUpdateCTokenMapping(address indexed token, address indexed oldCToken, address indexed newCToken);\n', '    \n', '    modifier isMaster {\n', '        require(\n', '            IndexInterface(instaIndex).master() == msg.sender, "not-master");\n', '        _;\n', '    }\n', '\n', '    function _addCtknMapping(address[] memory cTkns) internal {\n', '        require(cTkns.length > 0, "No-CToken-Address");\n', '        for (uint i = 0; i < cTkns.length; i++) {\n', '            address cErc20 = cTkns[i];\n', '            address erc20 = CTokenInterface(cErc20).underlying();\n', '            require(cTokenMapping[erc20] == address(0), "Token-already-added");\n', '            cTokenMapping[erc20] = cErc20;\n', '            emit LogAddCTokenMapping(cErc20, erc20);\n', '        }\n', '    }\n', '\n', '    function addCtknMapping(address[] memory cTkns) public isMaster {\n', '        _addCtknMapping(cTkns);\n', '    }\n', '\n', '    function updateCtknMapping(address[] memory cTkn) public isMaster {\n', '        require(cTkn.length > 0, "No-CToken-Address");\n', '        for (uint i = 0; i < cTkn.length; i++) {\n', '            address cErc20 = cTkn[i];\n', '            address erc20 = CTokenInterface(cErc20).underlying();\n', '            require(cTokenMapping[erc20] != address(0), "Token-not-added");\n', '            emit LogUpdateCTokenMapping(erc20, cTokenMapping[erc20], cErc20);\n', '            cTokenMapping[erc20] = cErc20;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract InstaPoolCompoundMapping is Helpers {\n', '    string constant public name = "Instapool-Compound-Mapping-v1";\n', '    constructor(address[] memory ctokens) public {\n', '        address ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '        address cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '        cTokenMapping[ethAddress] = cEth;\n', '        _addCtknMapping(ctokens);\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']