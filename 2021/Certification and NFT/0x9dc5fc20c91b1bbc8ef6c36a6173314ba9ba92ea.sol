['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface PriceFeedOracle {\n', '\tfunction fetchPrice() external returns (uint);\n', '}\n', '\n', 'interface TroveManagerLike {\n', '    function getBorrowingRateWithDecay() external view returns (uint);\n', '    function getTCR(uint _price) external view returns (uint);\n', '    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\n', '    function checkRecoveryMode(uint _price) external view returns (bool);\n', '    function getEntireDebtAndColl(address _borrower) external view returns (\n', '        uint debt, \n', '        uint coll, \n', '        uint pendingLUSDDebtReward, \n', '        uint pendingETHReward\n', '    );\n', '}\n', '\n', 'interface StabilityPoolLike {\n', '    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint);\n', '    function getDepositorETHGain(address _depositor) external view returns (uint);\n', '    function getDepositorLQTYGain(address _depositor) external view returns (uint);\n', '}\n', '\n', 'interface StakingLike {\n', '    function stakes(address owner) external view returns (uint);\n', '    function getPendingETHGain(address _user) external view returns (uint);\n', '    function getPendingLUSDGain(address _user) external view returns (uint);\n', '}\n', '\n', 'interface PoolLike {\n', '    function getETH() external view returns (uint);\n', '}\n', '\n', 'interface HintHelpersLike {\n', '    function computeNominalCR(uint _coll, uint _debt) external pure returns (uint);\n', '    function computeCR(uint _coll, uint _debt, uint _price) external pure returns (uint);\n', '    function getApproxHint(uint _CR, uint _numTrials, uint _inputRandomSeed) external view returns (\n', '        address hintAddress,\n', '        uint diff,\n', '        uint latestRandomSeed\n', '    );\n', '    function getRedemptionHints(uint _LUSDamount, uint _price, uint _maxIterations) external view returns (\n', '        address firstHint,\n', '        uint partialRedemptionHintNICR,\n', '        uint truncatedLUSDamount\n', '    );\n', '}\n', '\n', 'interface SortedTrovesLike {\n', '    function getSize() external view returns (uint256);\n', '    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\n', '}\n', '\n', 'contract Math {\n', '    /* DSMath add */\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '    \n', '    /* DSMath mul */\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '                require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '        }\n', '\n', '    /* Uniswap V2 sqrt */\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '            }\n', '        }\n', '}\n', '\n', 'contract Helpers is Math {\n', '    TroveManagerLike internal constant troveManager =\n', '        TroveManagerLike(0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2);\n', '\n', '    StabilityPoolLike internal constant stabilityPool = \n', '        StabilityPoolLike(0x66017D22b0f8556afDd19FC67041899Eb65a21bb);\n', '\n', '    StakingLike internal constant staking =\n', '        StakingLike(0x4f9Fbb3f1E99B56e0Fe2892e623Ed36A76Fc605d);\n', '\n', '    PoolLike internal constant activePool =\n', '        PoolLike(0xDf9Eb223bAFBE5c5271415C75aeCD68C21fE3D7F);\n', '    \n', '    PoolLike internal constant defaultPool =\n', '        PoolLike(0x896a3F03176f05CFbb4f006BfCd8723F2B0D741C);\n', '\n', '    HintHelpersLike internal constant hintHelpers =\n', '        HintHelpersLike(0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0);\n', '    \n', '    SortedTrovesLike internal constant sortedTroves =\n', '        SortedTrovesLike(0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6);\n', '\n', '    PriceFeedOracle internal constant priceFeedOracle =\n', '        PriceFeedOracle(0x4c517D4e2C851CA76d7eC94B805269Df0f2201De);\n', '\n', '    struct Trove {\n', '        uint collateral;\n', '        uint debt;\n', '        uint icr;\n', '    }\n', '\n', '    struct StabilityDeposit {\n', '        uint deposit;\n', '        uint ethGain;\n', '        uint lqtyGain;\n', '    }\n', '\n', '    struct Stake {\n', '        uint amount;\n', '        uint ethGain;\n', '        uint lusdGain;\n', '    }\n', '\n', '    struct Position {\n', '        Trove trove;\n', '        StabilityDeposit stability;\n', '        Stake stake;\n', '    }\n', '\n', '    struct System {\n', '        uint borrowFee;\n', '        uint ethTvl;\n', '        uint tcr;\n', '        bool isInRecoveryMode;\n', '    }\n', '}\n', '\n', '\n', 'contract Resolver is Helpers {\n', '\n', '    function fetchETHPrice() public returns (uint) {\n', '\treturn priceFeedOracle.fetchPrice();\n', '    }\n', '\n', '    function getTrove(address owner) public returns (Trove memory) {\n', '\tuint oracleEthPrice = fetchETHPrice();\n', '        (uint debt, uint collateral, , ) = troveManager.getEntireDebtAndColl(owner);\n', '        uint icr = troveManager.getCurrentICR(owner, oracleEthPrice);\n', '        return Trove(collateral, debt, icr);\n', '    }\n', '\n', '    function getStabilityDeposit(address owner) public view returns (StabilityDeposit memory) {\n', '        uint deposit = stabilityPool.getCompoundedLUSDDeposit(owner);\n', '        uint ethGain = stabilityPool.getDepositorETHGain(owner);\n', '        uint lqtyGain = stabilityPool.getDepositorLQTYGain(owner);\n', '        return StabilityDeposit(deposit, ethGain, lqtyGain);\n', '    }\n', '\n', '    function getStake(address owner) public view returns (Stake memory) {\n', '        uint amount = staking.stakes(owner);\n', '        uint ethGain = staking.getPendingETHGain(owner);\n', '        uint lusdGain = staking.getPendingLUSDGain(owner);\n', '        return Stake(amount, ethGain, lusdGain);\n', '    }\n', '\n', '    function getPosition(address owner) external returns (Position memory) {\n', '        Trove memory trove = getTrove(owner);\n', '        StabilityDeposit memory stability = getStabilityDeposit(owner);\n', '        Stake memory stake = getStake(owner);\n', '        return Position(trove, stability, stake);\n', '    }\n', '\n', '    function getSystemState() external returns (System memory) {\n', '\tuint oracleEthPrice = fetchETHPrice();\n', '        uint borrowFee = troveManager.getBorrowingRateWithDecay();\n', '        uint ethTvl = add(activePool.getETH(), defaultPool.getETH());\n', '        uint tcr = troveManager.getTCR(oracleEthPrice);\n', '        bool isInRecoveryMode = troveManager.checkRecoveryMode(oracleEthPrice);\n', '        return System(borrowFee, ethTvl, tcr, isInRecoveryMode);\n', '    }\n', '\n', '    function getTrovePositionHints(uint collateral, uint debt, uint searchIterations, uint randomSeed) external view returns (\n', '        address upperHint,\n', '        address lowerHint\n', '    ) {\n', '        // See: https://github.com/liquity/dev#supplying-hints-to-trove-operations\n', '        uint nominalCr = hintHelpers.computeNominalCR(collateral, debt);\n', '        searchIterations = searchIterations == 0 ? mul(10, sqrt(sortedTroves.getSize())) : searchIterations;\n', '        randomSeed = randomSeed == 0 ? block.number : randomSeed;\n', '        (address hintAddress, ,) = hintHelpers.getApproxHint(nominalCr, searchIterations, randomSeed);\n', '        return sortedTroves.findInsertPosition(nominalCr, hintAddress, hintAddress);\n', '    }\n', '\n', '    function getRedemptionPositionHints(uint amount, uint searchIterations, uint randomSeed) external returns (\n', '        uint partialHintNicr,\n', '        address firstHint,\n', '        address upperHint,\n', '        address lowerHint\n', '    ) {\n', '\tuint oracleEthPrice = fetchETHPrice();\n', '        // See: https://github.com/liquity/dev#hints-for-redeemcollateral\n', '        (firstHint, partialHintNicr, ) = hintHelpers.getRedemptionHints(amount, oracleEthPrice, 0);\n', '        searchIterations = searchIterations == 0 ? mul(10, sqrt(sortedTroves.getSize())) : searchIterations;\n', '        randomSeed = randomSeed == 0 ? block.number : randomSeed;\n', '        (address hintAddress, ,) = hintHelpers.getApproxHint(partialHintNicr, searchIterations, randomSeed);\n', '        (upperHint, lowerHint) = sortedTroves.findInsertPosition(partialHintNicr, hintAddress, hintAddress);\n', '    }\n', '}\n', '\n', 'contract InstaLiquityResolver is Resolver {\n', '    string public constant name = "Liquity-Resolver-v1";\n', '}']