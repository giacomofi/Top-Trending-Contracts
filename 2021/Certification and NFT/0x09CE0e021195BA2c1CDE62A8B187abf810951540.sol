['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: contracts\\lib\\TransferHelper.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts\\interface\\INestLedger.sol\n', '\n', '/// @dev This interface defines the nest ledger methods\n', 'interface INestLedger {\n', '\n', '    /// @dev Application Flag Changed event\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    event ApplicationChanged(address addr, uint flag);\n', '    \n', '    /// @dev Configuration structure of nest ledger contract\n', '    struct Config {\n', '        \n', '        // nest reward scale(10000 based). 2000\n', '        uint16 nestRewardScale;\n', '\n', '        // // ntoken reward scale(10000 based). 8000\n', '        // uint16 ntokenRewardScale;\n', '    }\n', '    \n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) external;\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) external view returns (uint);\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) external view returns (uint);\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\n', '}\n', '\n', '// File: contracts\\interface\\INestMapping.sol\n', '\n', '/// @dev The interface defines methods for nest builtin contract address mapping\n', 'interface INestMapping {\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) external;\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    );\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() external view returns (address);\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() external view returns (address);\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() external view returns (address);\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() external view returns (address);\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() external view returns (address);\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) external;\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) external view returns (address);\n', '}\n', '\n', '// File: contracts\\interface\\INestGovernance.sol\n', '\n', '/// @dev This interface defines the governance methods\n', 'interface INestGovernance is INestMapping {\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) external;\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) external view returns (uint);\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) external view returns (bool);\n', '}\n', '\n', '// File: contracts\\NestBase.sol\n', '\n', '/// @dev Base contract of nest\n', 'contract NestBase {\n', '\n', '    // Address of nest token contract\n', '    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\n', '\n', '    // Genesis block number of nest\n', '    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\n', '    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\n', '    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\n', '    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\n', '    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\n', '    // on-line flow, the actual block is 5120000\n', '    uint constant NEST_GENESIS_BLOCK = 5120000;\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) virtual public {\n', "        require(_governance == address(0), 'NEST:!initialize');\n", '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev INestGovernance implementation contract address\n', '    address public _governance;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) virtual public {\n', '\n', '        address governance = _governance;\n', '        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev Migrate funds from current contract to NestLedger\n', '    /// @param tokenAddress Destination token address.(0 means eth)\n', '    /// @param value Migrate amount\n', '    function migrate(address tokenAddress, uint value) external onlyGovernance {\n', '\n', '        address to = INestGovernance(_governance).getNestLedgerAddress();\n', '        if (tokenAddress == address(0)) {\n', '            INestLedger(to).addETHReward { value: value } (address(0));\n', '        } else {\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    //---------modifier------------\n', '\n', '    modifier onlyGovernance() {\n', '        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _;\n', '    }\n', '\n', '    modifier noContract() {\n', '        require(msg.sender == tx.origin, "NEST:!contract");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\NestLedger.sol\n', '\n', '/// @dev Nest ledger contract\n', 'contract NestLedger is NestBase, INestLedger {\n', '\n', '    // /// @param nestTokenAddress Address of nest token contract\n', '    // constructor(address nestTokenAddress) {\n', '    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\n', '    // }\n', '\n', '    /// @dev Structure is used to represent a storage location. Storage variable can be used to avoid indexing from mapping many times\n', '    struct UINT {\n', '        uint value;\n', '    }\n', '\n', '    // Configuration\n', '    Config _config;\n', '\n', '    // nest ledger\n', '    uint _nestLedger;\n', '\n', '    // ntoken ledger\n', '    mapping(address=>UINT) _ntokenLedger;\n', '\n', '    // DAO applications\n', '    mapping(address=>uint) _applications;\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) override external onlyGovernance {\n', '        require(uint(config.nestRewardScale) <= 10000, "NestLedger:!value");\n', '        _config = config;\n', '    }\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() override external view returns (Config memory) {\n', '        return _config;\n', '    }\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) override external onlyGovernance {\n', '        _applications[addr] = flag;\n', '        emit ApplicationChanged(addr, flag);\n', '    }\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) override external view returns (uint) {\n', '        return _applications[addr];\n', '    }\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) override external payable {\n', '\n', '        // nest not carve\n', '        if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '            _nestLedger += msg.value;\n', '        }\n', '        // ntoken need carve\n', '        else {\n', '\n', '            Config memory config = _config;\n', '            UINT storage balance = _ntokenLedger[ntokenAddress];\n', '\n', '            // Calculate nest reward\n', '            uint nestReward = msg.value * uint(config.nestRewardScale) / 10000;\n', '            // The part of ntoken is msg.value - nestReward\n', '            balance.value += msg.value - nestReward;\n', '            // nest reward\n', '            _nestLedger += nestReward;\n', '        }\n', '    }\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) override external payable {\n', '\n', '        // Ledger for nest is independent\n', '        if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '            _nestLedger += msg.value;\n', '        }\n', '        // Ledger for ntoken is in a mapping\n', '        else {\n', '            UINT storage balance = _ntokenLedger[ntokenAddress];\n', '            balance.value += msg.value;\n', '        }\n', '    }\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) override external view returns (uint) {\n', '\n', '        if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '            return _nestLedger;\n', '        }\n', '        return _ntokenLedger[ntokenAddress].value;\n', '    }\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) override external {\n', '\n', '        require(_applications[msg.sender] == 1, "NestLedger:!app");\n', '\n', '        // Pay eth from ledger\n', '        if (tokenAddress == address(0)) {\n', '            // nest ledger\n', '            if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '                _nestLedger -= value;\n', '            }\n', '            // ntoken ledger\n', '            else {\n', '                UINT storage balance = _ntokenLedger[ntokenAddress];\n', '                balance.value -= value;\n', '            }\n', '            // pay\n', '            payable(to).transfer(value);\n', '        }\n', '        // Pay token\n', '        else {\n', '            // pay\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) override external payable {\n', '\n', '        require(_applications[msg.sender] == 1, "NestLedger:!app");\n', '\n', '        // Pay eth from ledger\n', '        if (tokenAddress == address(0)) {\n', '            // nest ledger\n', '            if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '                // If msg.value is not 0, add to ledger\n', '                _nestLedger = _nestLedger + msg.value - value;\n', '            }\n', '            // ntoken ledger\n', '            else {\n', '                // If msg.value is not 0, add to ledger\n', '                UINT storage balance = _ntokenLedger[ntokenAddress];\n', '                balance.value = balance.value + msg.value - value;\n', '            }\n', '            // pay\n', '            payable(to).transfer(value);\n', '        }\n', '        // Pay token\n', '        else {\n', '            // If msg.value is not 0, add to ledger\n', '            if (msg.value > 0) {\n', '                if (ntokenAddress == NEST_TOKEN_ADDRESS) {\n', '                    _nestLedger += msg.value;\n', '                } else {\n', '                    UINT storage balance = _ntokenLedger[ntokenAddress];\n', '                    balance.value += msg.value;\n', '                }\n', '            }\n', '            // pay\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    } \n', '}']