['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '/**\n', ' * SPDX-License-Identifier: UNLICENSED\n', ' */\n', 'pragma solidity =0.6.10;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// File: contracts/packages/oz/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/packages/oz/Context.sol\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/packages/oz/Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/OtokenInterface.sol\n', '\n', 'interface OtokenInterface {\n', '    function addressBook() external view returns (address);\n', '\n', '    function underlyingAsset() external view returns (address);\n', '\n', '    function strikeAsset() external view returns (address);\n', '\n', '    function collateralAsset() external view returns (address);\n', '\n', '    function strikePrice() external view returns (uint256);\n', '\n', '    function expiryTimestamp() external view returns (uint256);\n', '\n', '    function isPut() external view returns (bool);\n', '\n', '    function init(\n', '        address _addressBook,\n', '        address _underlyingAsset,\n', '        address _strikeAsset,\n', '        address _collateralAsset,\n', '        uint256 _strikePrice,\n', '        uint256 _expiry,\n', '        bool _isPut\n', '    ) external;\n', '\n', '    function getOtokenDetails()\n', '        external\n', '        view\n', '        returns (\n', '            address,\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            bool\n', '        );\n', '\n', '    function mintOtoken(address account, uint256 amount) external;\n', '\n', '    function burnOtoken(address account, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/interfaces/OracleInterface.sol\n', '\n', 'interface OracleInterface {\n', '    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\n', '\n', '    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\n', '\n', '    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\n', '\n', '    function getDisputer() external view returns (address);\n', '\n', '    function getPricer(address _asset) external view returns (address);\n', '\n', '    function getPrice(address _asset) external view returns (uint256);\n', '\n', '    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\n', '\n', '    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\n', '\n', '    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\n', '\n', '    // Non-view function\n', '\n', '    function setAssetPricer(address _asset, address _pricer) external;\n', '\n', '    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\n', '\n', '    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\n', '\n', '    function setExpiryPrice(\n', '        address _asset,\n', '        uint256 _expiryTimestamp,\n', '        uint256 _price\n', '    ) external;\n', '\n', '    function disputeExpiryPrice(\n', '        address _asset,\n', '        uint256 _expiryTimestamp,\n', '        uint256 _price\n', '    ) external;\n', '\n', '    function setDisputer(address _disputer) external;\n', '}\n', '\n', '// File: contracts/interfaces/ERC20Interface.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface ERC20Interface {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/packages/oz/SignedSafeMath.sol\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 private constant _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/libs/SignedConverter.sol\n', '\n', '/**\n', ' * @title SignedConverter\n', ' * @author Opyn Team\n', ' * @notice A library to convert an unsigned integer to signed integer or signed integer to unsigned integer.\n', ' */\n', 'library SignedConverter {\n', '    /**\n', '     * @notice convert an unsigned integer to a signed integer\n', '     * @param a uint to convert into a signed integer\n', '     * @return converted signed integer\n', '     */\n', '    function uintToInt(uint256 a) internal pure returns (int256) {\n', '        require(a < 2**255, "FixedPointInt256: out of int range");\n', '\n', '        return int256(a);\n', '    }\n', '\n', '    /**\n', '     * @notice convert a signed integer to an unsigned integer\n', '     * @param a int to convert into an unsigned integer\n', '     * @return converted unsigned integer\n', '     */\n', '    function intToUint(int256 a) internal pure returns (uint256) {\n', '        if (a < 0) {\n', '            return uint256(-a);\n', '        } else {\n', '            return uint256(a);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libs/FixedPointInt256.sol\n', '\n', '/**\n', ' * @title FixedPointInt256\n', ' * @author Opyn Team\n', ' * @notice FixedPoint library\n', ' */\n', 'library FPI {\n', '    using SignedSafeMath for int256;\n', '    using SignedConverter for int256;\n', '    using SafeMath for uint256;\n', '    using SignedConverter for uint256;\n', '\n', '    int256 private constant SCALING_FACTOR = 1e27;\n', '    uint256 private constant BASE_DECIMALS = 27;\n', '\n', '    struct FixedPointInt {\n', '        int256 value;\n', '    }\n', '\n', '    /**\n', '     * @notice constructs an `FixedPointInt` from an unscaled int, e.g., `b=5` gets stored internally as `5**27`.\n', '     * @param a int to convert into a FixedPoint.\n', '     * @return the converted FixedPoint.\n', '     */\n', '    function fromUnscaledInt(int256 a) internal pure returns (FixedPointInt memory) {\n', '        return FixedPointInt(a.mul(SCALING_FACTOR));\n', '    }\n', '\n', '    /**\n', '     * @notice constructs an FixedPointInt from an scaled uint with {_decimals} decimals\n', '     * Examples:\n', '     * (1)  USDC    decimals = 6\n', '     *      Input:  5 * 1e6 USDC  =>    Output: 5 * 1e27 (FixedPoint 5.0 USDC)\n', '     * (2)  cUSDC   decimals = 8\n', '     *      Input:  5 * 1e6 cUSDC =>    Output: 5 * 1e25 (FixedPoint 0.05 cUSDC)\n', '     * @param _a uint256 to convert into a FixedPoint.\n', '     * @param _decimals  original decimals _a has\n', '     * @return the converted FixedPoint, with 27 decimals.\n', '     */\n', '    function fromScaledUint(uint256 _a, uint256 _decimals) internal pure returns (FixedPointInt memory) {\n', '        FixedPointInt memory fixedPoint;\n', '\n', '        if (_decimals == BASE_DECIMALS) {\n', '            fixedPoint = FixedPointInt(_a.uintToInt());\n', '        } else if (_decimals > BASE_DECIMALS) {\n', '            uint256 exp = _decimals.sub(BASE_DECIMALS);\n', '            fixedPoint = FixedPointInt((_a.div(10**exp)).uintToInt());\n', '        } else {\n', '            uint256 exp = BASE_DECIMALS - _decimals;\n', '            fixedPoint = FixedPointInt((_a.mul(10**exp)).uintToInt());\n', '        }\n', '\n', '        return fixedPoint;\n', '    }\n', '\n', '    /**\n', '     * @notice convert a FixedPointInt number to an uint256 with a specific number of decimals\n', '     * @param _a FixedPointInt to convert\n', '     * @param _decimals number of decimals that the uint256 should be scaled to\n', '     * @param _roundDown True to round down the result, False to round up\n', '     * @return the converted uint256\n', '     */\n', '    function toScaledUint(\n', '        FixedPointInt memory _a,\n', '        uint256 _decimals,\n', '        bool _roundDown\n', '    ) internal pure returns (uint256) {\n', '        uint256 scaledUint;\n', '\n', '        if (_decimals == BASE_DECIMALS) {\n', '            scaledUint = _a.value.intToUint();\n', '        } else if (_decimals > BASE_DECIMALS) {\n', '            uint256 exp = _decimals - BASE_DECIMALS;\n', '            scaledUint = (_a.value).intToUint().mul(10**exp);\n', '        } else {\n', '            uint256 exp = BASE_DECIMALS - _decimals;\n', '            uint256 tailing;\n', '            if (!_roundDown) {\n', '                uint256 remainer = (_a.value).intToUint().mod(10**exp);\n', '                if (remainer > 0) tailing = 1;\n', '            }\n', '            scaledUint = (_a.value).intToUint().div(10**exp).add(tailing);\n', '        }\n', '\n', '        return scaledUint;\n', '    }\n', '\n', '    /**\n', '     * @notice add two signed integers, a + b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return sum of the two signed integers\n', '     */\n', '    function add(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return FixedPointInt(a.value.add(b.value));\n', '    }\n', '\n', '    /**\n', '     * @notice subtract two signed integers, a-b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return difference of two signed integers\n', '     */\n', '    function sub(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return FixedPointInt(a.value.sub(b.value));\n', '    }\n', '\n', '    /**\n', '     * @notice multiply two signed integers, a by b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return mul of two signed integers\n', '     */\n', '    function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return FixedPointInt((a.value.mul(b.value)) / SCALING_FACTOR);\n', '    }\n', '\n', '    /**\n', '     * @notice divide two signed integers, a by b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return div of two signed integers\n', '     */\n', '    function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return FixedPointInt((a.value.mul(SCALING_FACTOR)) / b.value);\n', '    }\n', '\n', '    /**\n', '     * @notice minimum between two signed integers, a and b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return min of two signed integers\n', '     */\n', '    function min(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return a.value < b.value ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @notice maximum between two signed integers, a and b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return max of two signed integers\n', '     */\n', '    function max(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\n', '        return a.value > b.value ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @notice is a is equal to b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return True if equal, False if not\n', '     */\n', '    function isEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\n', '        return a.value == b.value;\n', '    }\n', '\n', '    /**\n', '     * @notice is a greater than b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return True if a > b, False if not\n', '     */\n', '    function isGreaterThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\n', '        return a.value > b.value;\n', '    }\n', '\n', '    /**\n', '     * @notice is a greater than or equal to b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return True if a >= b, False if not\n', '     */\n', '    function isGreaterThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\n', '        return a.value >= b.value;\n', '    }\n', '\n', '    /**\n', '     * @notice is a is less than b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return True if a < b, False if not\n', '     */\n', '    function isLessThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\n', '        return a.value < b.value;\n', '    }\n', '\n', '    /**\n', '     * @notice is a less than or equal to b\n', '     * @param a FixedPointInt\n', '     * @param b FixedPointInt\n', '     * @return True if a <= b, False if not\n', '     */\n', '    function isLessThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\n', '        return a.value <= b.value;\n', '    }\n', '}\n', '\n', '// File: contracts/libs/MarginVault.sol\n', '\n', '/**\n', ' * MarginVault Error Codes\n', ' * V1: invalid short otoken amount\n', ' * V2: invalid short otoken index\n', ' * V3: short otoken address mismatch\n', ' * V4: invalid long otoken amount\n', ' * V5: invalid long otoken index\n', ' * V6: long otoken address mismatch\n', ' * V7: invalid collateral amount\n', ' * V8: invalid collateral token index\n', ' * V9: collateral token address mismatch\n', ' */\n', '\n', '/**\n', ' * @title MarginVault\n', ' * @author Opyn Team\n', ' * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\n', ' * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\n', ' */\n', 'library MarginVault {\n', '    using SafeMath for uint256;\n', '\n', '    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\n', '    struct Vault {\n', '        // addresses of oTokens a user has shorted (i.e. written) against this vault\n', '        address[] shortOtokens;\n', '        // addresses of oTokens a user has bought and deposited in this vault\n', '        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\n', "        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\n", '        address[] longOtokens;\n', '        // addresses of other ERC-20s a user has deposited as collateral in this vault\n', '        address[] collateralAssets;\n', '        // quantity of oTokens minted/written for each oToken address in shortOtokens\n', '        uint256[] shortAmounts;\n', '        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\n', '        uint256[] longAmounts;\n', '        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\n', '        uint256[] collateralAmounts;\n', '    }\n', '\n', '    /**\n', '     * @dev increase the short oToken balance in a vault when a new oToken is minted\n', '     * @param _vault vault to add or increase the short position in\n', "     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\n", "     * @param _amount number of _shortOtoken being minted from the user's vault\n", "     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\n", '     */\n', '    function addShort(\n', '        Vault storage _vault,\n', '        address _shortOtoken,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        require(_amount > 0, "V1");\n', '\n', '        // valid indexes in any array are between 0 and array.length - 1.\n', '        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\n', '        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\n', '            _vault.shortOtokens.push(_shortOtoken);\n', '            _vault.shortAmounts.push(_amount);\n', '        } else {\n', '            require((_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length), "V2");\n', '            address existingShort = _vault.shortOtokens[_index];\n', '            require((existingShort == _shortOtoken) || (existingShort == address(0)), "V3");\n', '\n', '            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\n', '            _vault.shortOtokens[_index] = _shortOtoken;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev decrease the short oToken balance in a vault when an oToken is burned\n', '     * @param _vault vault to decrease short position in\n', "     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\n", "     * @param _amount number of _shortOtoken being reduced in the user's vault\n", "     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\n", '     */\n', '    function removeShort(\n', '        Vault storage _vault,\n', '        address _shortOtoken,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        // check that the removed short oToken exists in the vault at the specified index\n', '        require(_index < _vault.shortOtokens.length, "V2");\n', '        require(_vault.shortOtokens[_index] == _shortOtoken, "V3");\n', '\n', '        uint256 newShortAmount = _vault.shortAmounts[_index].sub(_amount);\n', '\n', '        if (newShortAmount == 0) {\n', '            delete _vault.shortOtokens[_index];\n', '        }\n', '        _vault.shortAmounts[_index] = newShortAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev increase the long oToken balance in a vault when an oToken is deposited\n', '     * @param _vault vault to add a long position to\n', "     * @param _longOtoken address of the _longOtoken being added to the user's vault\n", "     * @param _amount number of _longOtoken the protocol is adding to the user's vault\n", "     * @param _index index of _longOtoken in the user's vault.longOtokens array\n", '     */\n', '    function addLong(\n', '        Vault storage _vault,\n', '        address _longOtoken,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        require(_amount > 0, "V4");\n', '\n', '        // valid indexes in any array are between 0 and array.length - 1.\n', '        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\n', '        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\n', '            _vault.longOtokens.push(_longOtoken);\n', '            _vault.longAmounts.push(_amount);\n', '        } else {\n', '            require((_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length), "V5");\n', '            address existingLong = _vault.longOtokens[_index];\n', '            require((existingLong == _longOtoken) || (existingLong == address(0)), "V6");\n', '\n', '            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\n', '            _vault.longOtokens[_index] = _longOtoken;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\n', '     * @param _vault vault to remove a long position from\n', "     * @param _longOtoken address of the _longOtoken being removed from the user's vault\n", "     * @param _amount number of _longOtoken the protocol is removing from the user's vault\n", "     * @param _index index of _longOtoken in the user's vault.longOtokens array\n", '     */\n', '    function removeLong(\n', '        Vault storage _vault,\n', '        address _longOtoken,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        // check that the removed long oToken exists in the vault at the specified index\n', '        require(_index < _vault.longOtokens.length, "V5");\n', '        require(_vault.longOtokens[_index] == _longOtoken, "V6");\n', '\n', '        uint256 newLongAmount = _vault.longAmounts[_index].sub(_amount);\n', '\n', '        if (newLongAmount == 0) {\n', '            delete _vault.longOtokens[_index];\n', '        }\n', '        _vault.longAmounts[_index] = newLongAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev increase the collateral balance in a vault\n', '     * @param _vault vault to add collateral to\n', "     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\n", "     * @param _amount number of _collateralAsset being added to the user's vault\n", "     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\n", '     */\n', '    function addCollateral(\n', '        Vault storage _vault,\n', '        address _collateralAsset,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        require(_amount > 0, "V7");\n', '\n', '        // valid indexes in any array are between 0 and array.length - 1.\n', '        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\n', '        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\n', '            _vault.collateralAssets.push(_collateralAsset);\n', '            _vault.collateralAmounts.push(_amount);\n', '        } else {\n', '            require((_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length), "V8");\n', '            address existingCollateral = _vault.collateralAssets[_index];\n', '            require((existingCollateral == _collateralAsset) || (existingCollateral == address(0)), "V9");\n', '\n', '            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\n', '            _vault.collateralAssets[_index] = _collateralAsset;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev decrease the collateral balance in a vault\n', '     * @param _vault vault to remove collateral from\n', "     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\n", "     * @param _amount number of _collateralAsset being removed from the user's vault\n", "     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\n", '     */\n', '    function removeCollateral(\n', '        Vault storage _vault,\n', '        address _collateralAsset,\n', '        uint256 _amount,\n', '        uint256 _index\n', '    ) external {\n', '        // check that the removed collateral exists in the vault at the specified index\n', '        require(_index < _vault.collateralAssets.length, "V8");\n', '        require(_vault.collateralAssets[_index] == _collateralAsset, "V9");\n', '\n', '        uint256 newCollateralAmount = _vault.collateralAmounts[_index].sub(_amount);\n', '\n', '        if (newCollateralAmount == 0) {\n', '            delete _vault.collateralAssets[_index];\n', '        }\n', '        _vault.collateralAmounts[_index] = newCollateralAmount;\n', '    }\n', '}\n', '\n', '// File: contracts/core/MarginCalculator.sol\n', '\n', '/**\n', ' * @title MarginCalculator\n', ' * @author Opyn\n', ' * @notice Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds\n', ' */\n', 'contract MarginCalculator is Ownable {\n', '    using SafeMath for uint256;\n', '    using FPI for FPI.FixedPointInt;\n', '\n', '    /// @dev decimals option upper bound value, spot shock and oracle deviation\n', '    uint256 internal constant SCALING_FACTOR = 27;\n', '\n', '    /// @dev decimals used by strike price and oracle price\n', '    uint256 internal constant BASE = 8;\n', '\n', '    /// @notice auction length\n', '    uint256 public constant AUCTION_TIME = 3600;\n', '\n', '    /// @dev struct to store all needed vault details\n', '    struct VaultDetails {\n', '        address shortUnderlyingAsset;\n', '        address shortStrikeAsset;\n', '        address shortCollateralAsset;\n', '        address longUnderlyingAsset;\n', '        address longStrikeAsset;\n', '        address longCollateralAsset;\n', '        uint256 shortStrikePrice;\n', '        uint256 shortExpiryTimestamp;\n', '        uint256 shortCollateralDecimals;\n', '        uint256 longStrikePrice;\n', '        uint256 longExpiryTimestamp;\n', '        uint256 longCollateralDecimals;\n', '        uint256 collateralDecimals;\n', '        uint256 vaultType;\n', '        bool isShortPut;\n', '        bool isLongPut;\n', '        bool hasLong;\n', '        bool hasShort;\n', '        bool hasCollateral;\n', '    }\n', '\n', '    /// @dev oracle deviation value (1e27)\n', '    uint256 internal oracleDeviation;\n', '\n', '    /// @dev FixedPoint 0\n', '    FPI.FixedPointInt internal ZERO = FPI.fromScaledUint(0, BASE);\n', '\n', '    /// @dev mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)\n', '    mapping(address => uint256) internal dust;\n', '\n', '    /// @dev mapping to store array of time to expiry for a given product\n', '    mapping(bytes32 => uint256[]) internal timesToExpiryForProduct;\n', '\n', '    /// @dev mapping to store option upper bound value at specific time to expiry for a given product (1e27)\n', '    mapping(bytes32 => mapping(uint256 => uint256)) internal maxPriceAtTimeToExpiry;\n', '\n', '    /// @dev mapping to store shock value for spot price of a given product (1e27)\n', '    mapping(bytes32 => uint256) internal spotShock;\n', '\n', '    /// @dev oracle module\n', '    OracleInterface public oracle;\n', '\n', '    /// @notice emits an event when collateral dust is updated\n', '    event CollateralDustUpdated(address indexed collateral, uint256 dust);\n', '    /// @notice emits an event when new time to expiry is added for a specific product\n', '    event TimeToExpiryAdded(bytes32 indexed productHash, uint256 timeToExpiry);\n', '    /// @notice emits an event when new upper bound value is added for a specific time to expiry timestamp\n', '    event MaxPriceAdded(bytes32 indexed productHash, uint256 timeToExpiry, uint256 value);\n', '    /// @notice emits an event when updating upper bound value at specific expiry timestamp\n', '    event MaxPriceUpdated(bytes32 indexed productHash, uint256 timeToExpiry, uint256 oldValue, uint256 newValue);\n', '    /// @notice emits an event when spot shock value is updated for a specific product\n', '    event SpotShockUpdated(bytes32 indexed product, uint256 spotShock);\n', '    /// @notice emits an event when oracle deviation value is updated\n', '    event OracleDeviationUpdated(uint256 oracleDeviation);\n', '\n', '    /**\n', '     * @notice constructor\n', '     * @param _oracle oracle module address\n', '     */\n', '    constructor(address _oracle) public {\n', '        require(_oracle != address(0), "MarginCalculator: invalid oracle address");\n', '\n', '        oracle = OracleInterface(_oracle);\n', '    }\n', '\n', '    /**\n', '     * @notice set dust amount for collateral asset\n', '     * @dev can only be called by owner\n', '     * @param _collateral collateral asset address\n', '     * @param _dust dust amount, should be scaled by collateral asset decimals\n', '     */\n', '    function setCollateralDust(address _collateral, uint256 _dust) external onlyOwner {\n', '        require(_dust > 0, "MarginCalculator: dust amount should be greater than zero");\n', '\n', '        dust[_collateral] = _dust;\n', '\n', '        emit CollateralDustUpdated(_collateral, _dust);\n', '    }\n', '\n', '    /**\n', '     * @notice set product upper bound values\n', '     * @dev can only be called by owner\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @param _timesToExpiry array of times to expiry timestamp\n', '     * @param _values upper bound values array\n', '     */\n', '    function setUpperBoundValues(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut,\n', '        uint256[] calldata _timesToExpiry,\n', '        uint256[] calldata _values\n', '    ) external onlyOwner {\n', '        require(_timesToExpiry.length > 0, "MarginCalculator: invalid times to expiry array");\n', '        require(_timesToExpiry.length == _values.length, "MarginCalculator: invalid values array");\n', '\n', '        // get product hash\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '\n', '        uint256[] storage expiryArray = timesToExpiryForProduct[productHash];\n', '\n', '        // check that this is the first expiry to set\n', '        // if not, the last expiry should be less than the new one to insert (to make sure the array stay in order)\n', '        require(\n', '            (expiryArray.length == 0) || (_timesToExpiry[0] > expiryArray[expiryArray.length.sub(1)]),\n', '            "MarginCalculator: expiry array is not in order"\n', '        );\n', '\n', '        for (uint256 i = 0; i < _timesToExpiry.length; i++) {\n', '            // check that new times array is in order\n', '            if (i.add(1) < _timesToExpiry.length) {\n', '                require(_timesToExpiry[i] < _timesToExpiry[i.add(1)], "MarginCalculator: time should be in order");\n', '            }\n', '\n', '            require(_values[i] > 0, "MarginCalculator: no expiry upper bound value found");\n', '\n', '            // add new upper bound value for this product at specific time to expiry\n', '            maxPriceAtTimeToExpiry[productHash][_timesToExpiry[i]] = _values[i];\n', '\n', '            // add new time to expiry to array\n', '            expiryArray.push(_timesToExpiry[i]);\n', '\n', '            emit TimeToExpiryAdded(productHash, _timesToExpiry[i]);\n', '            emit MaxPriceAdded(productHash, _timesToExpiry[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice set option upper bound value for specific time to expiry (1e27)\n', '     * @dev can only be called by owner\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @param _timeToExpiry option time to expiry timestamp\n', '     * @param _value upper bound value\n', '     */\n', '    function updateUpperBoundValue(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut,\n', '        uint256 _timeToExpiry,\n', '        uint256 _value\n', '    ) external onlyOwner {\n', '        require(_value > 0, "MarginCalculator: invalid option upper bound value");\n', '\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '        uint256 oldMaxPrice = maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\n', '\n', '        require(oldMaxPrice != 0, "MarginCalculator: upper bound value not found");\n', '\n', '        // update upper bound value for the time to expiry\n', '        maxPriceAtTimeToExpiry[productHash][_timeToExpiry] = _value;\n', '\n', '        emit MaxPriceUpdated(productHash, _timeToExpiry, oldMaxPrice, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice set spot shock value, scaled to 1e27\n', '     * @dev can only be called by owner\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @param _shockValue spot shock value\n', '     */\n', '    function setSpotShock(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut,\n', '        uint256 _shockValue\n', '    ) external onlyOwner {\n', '        require(_shockValue > 0, "MarginCalculator: invalid spot shock value");\n', '\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '\n', '        spotShock[productHash] = _shockValue;\n', '\n', '        emit SpotShockUpdated(productHash, _shockValue);\n', '    }\n', '\n', '    /**\n', '     * @notice set oracle deviation (1e27)\n', '     * @dev can only be called by owner\n', '     * @param _deviation deviation value\n', '     */\n', '    function setOracleDeviation(uint256 _deviation) external onlyOwner {\n', '        oracleDeviation = _deviation;\n', '\n', '        emit OracleDeviationUpdated(_deviation);\n', '    }\n', '\n', '    /**\n', '     * @notice get dust amount for collateral asset\n', '     * @param _collateral collateral asset address\n', '     * @return dust amount\n', '     */\n', '    function getCollateralDust(address _collateral) external view returns (uint256) {\n', '        return dust[_collateral];\n', '    }\n', '\n', '    /**\n', '     * @notice get times to expiry for a specific product\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @return array of times to expiry\n', '     */\n', '    function getTimesToExpiry(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut\n', '    ) external view returns (uint256[] memory) {\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '        return timesToExpiryForProduct[productHash];\n', '    }\n', '\n', '    /**\n', '     * @notice get option upper bound value for specific time to expiry\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @param _timeToExpiry option time to expiry timestamp\n', '     * @return option upper bound value (1e27)\n', '     */\n', '    function getMaxPrice(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut,\n', '        uint256 _timeToExpiry\n', '    ) external view returns (uint256) {\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '\n', '        return maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\n', '    }\n', '\n', '    /**\n', '     * @notice get spot shock value\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _collateral otoken collateral asset\n', '     * @param _isPut otoken type\n', '     * @return _shockValue spot shock value (1e27)\n', '     */\n', '    function getSpotShock(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut\n', '    ) external view returns (uint256) {\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '\n', '        return spotShock[productHash];\n', '    }\n', '\n', '    /**\n', '     * @notice get oracle deviation\n', '     * @return oracle deviation value (1e27)\n', '     */\n', '    function getOracleDeviation() external view returns (uint256) {\n', '        return oracleDeviation;\n', '    }\n', '\n', '    /**\n', '     * @notice return the collateral required for naked margin vault, in collateral asset decimals\n', '     * @dev _shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8\n', '     * @param _underlying underlying asset address\n', '     * @param _strike strike asset address\n', '     * @param _collateral collateral asset address\n', '     * @param _shortAmount amount of short otoken\n', '     * @param  _strikePrice otoken strike price\n', '     * @param _underlyingPrice otoken underlying price\n', '     * @param _shortExpiryTimestamp otoken expiry timestamp\n', '     * @param _collateralDecimals otoken collateral asset decimals\n', '     * @param _isPut otoken type\n', '     * @return collateral required for a naked margin vault, in collateral asset decimals\n', '     */\n', '    function getNakedMarginRequired(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        uint256 _shortAmount,\n', '        uint256 _strikePrice,\n', '        uint256 _underlyingPrice,\n', '        uint256 _shortExpiryTimestamp,\n', '        uint256 _collateralDecimals,\n', '        bool _isPut\n', '    ) external view returns (uint256) {\n', '        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\n', '\n', '        // scale short amount from 1e8 to 1e27 (oToken is always in 1e8)\n', '        FPI.FixedPointInt memory shortAmount = FPI.fromScaledUint(_shortAmount, BASE);\n', '        // scale short strike from 1e8 to 1e27\n', '        FPI.FixedPointInt memory shortStrike = FPI.fromScaledUint(_strikePrice, BASE);\n', '        // scale short underlying price from 1e8 to 1e27\n', '        FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(_underlyingPrice, BASE);\n', '\n', '        // return required margin, scaled by collateral asset decimals, explicitly rounded up\n', '        return\n', '            FPI.toScaledUint(\n', '                _getNakedMarginRequired(\n', '                    productHash,\n', '                    shortAmount,\n', '                    shortUnderlyingPrice,\n', '                    shortStrike,\n', '                    _shortExpiryTimestamp,\n', '                    _isPut\n', '                ),\n', '                _collateralDecimals,\n', '                false\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @notice return the cash value of an expired oToken, denominated in collateral\n', '     * @param _otoken oToken address\n', '     * @return how much collateral can be taken out by 1 otoken unit, scaled by 1e8,\n', '     * or how much collateral can be taken out for 1 (1e8) oToken\n', '     */\n', '    function getExpiredPayoutRate(address _otoken) external view returns (uint256) {\n', '        require(_otoken != address(0), "MarginCalculator: Invalid token address");\n', '\n', '        (\n', '            address collateral,\n', '            address underlying,\n', '            address strikeAsset,\n', '            uint256 strikePrice,\n', '            uint256 expiry,\n', '            bool isPut\n', '        ) = _getOtokenDetails(_otoken);\n', '\n', '        require(now >= expiry, "MarginCalculator: Otoken not expired yet");\n', '\n', '        FPI.FixedPointInt memory cashValueInStrike = _getExpiredCashValue(\n', '            underlying,\n', '            strikeAsset,\n', '            expiry,\n', '            strikePrice,\n', '            isPut\n', '        );\n', '\n', '        FPI.FixedPointInt memory cashValueInCollateral = _convertAmountOnExpiryPrice(\n', '            cashValueInStrike,\n', '            strikeAsset,\n', '            collateral,\n', '            expiry\n', '        );\n', '\n', '        // the exchangeRate was scaled by 1e8, if 1e8 otoken can take out 1 USDC, the exchangeRate is currently 1e8\n', '        // we want to return: how much USDC units can be taken out by 1 (1e8 units) oToken\n', '        uint256 collateralDecimals = uint256(ERC20Interface(collateral).decimals());\n', '        return cashValueInCollateral.toScaledUint(collateralDecimals, true);\n', '    }\n', '\n', '    // structs to avoid stack too deep error\n', '    // struct to store shortAmount, shortStrike and shortUnderlyingPrice scaled to 1e27\n', '    struct ShortScaledDetails {\n', '        FPI.FixedPointInt shortAmount;\n', '        FPI.FixedPointInt shortStrike;\n', '        FPI.FixedPointInt shortUnderlyingPrice;\n', '    }\n', '\n', '    /**\n', '     * @notice check if a specific vault is undercollateralized at a specific chainlink round\n', '     * @dev if the vault is of type 0, the function will revert\n', '     * @param _vault vault struct\n', '     * @param _vaultType vault type (0 for max loss/spread and 1 for naked margin vault)\n', '     * @param _vaultLatestUpdate vault latest update (timestamp when latest vault state change happened)\n', '     * @param _roundId chainlink round id\n', '     * @return isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount\n', '     */\n', '    function isLiquidatable(\n', '        MarginVault.Vault memory _vault,\n', '        uint256 _vaultType,\n', '        uint256 _vaultLatestUpdate,\n', '        uint256 _roundId\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            bool,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        // liquidation is only supported for naked margin vault\n', '        require(_vaultType == 1, "MarginCalculator: invalid vault type to liquidate");\n', '\n', '        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\n', '\n', '        // can not liquidate vault that have no short position\n', '        if (!vaultDetails.hasShort) return (false, 0, 0);\n', '\n', '        require(now < vaultDetails.shortExpiryTimestamp, "MarginCalculator: can not liquidate expired position");\n', '\n', '        (uint256 price, uint256 timestamp) = oracle.getChainlinkRoundData(\n', '            vaultDetails.shortUnderlyingAsset,\n', '            uint80(_roundId)\n', '        );\n', '\n', '        // check that price timestamp is after latest timestamp the vault was updated at\n', '        require(\n', '            timestamp > _vaultLatestUpdate,\n', '            "MarginCalculator: auction timestamp should be post vault latest update"\n', '        );\n', '\n', '        // another struct to store some useful short otoken details, to avoid stack to deep error\n', '        ShortScaledDetails memory shortDetails = ShortScaledDetails({\n', '            shortAmount: FPI.fromScaledUint(_vault.shortAmounts[0], BASE),\n', '            shortStrike: FPI.fromScaledUint(vaultDetails.shortStrikePrice, BASE),\n', '            shortUnderlyingPrice: FPI.fromScaledUint(price, BASE)\n', '        });\n', '\n', '        bytes32 productHash = _getProductHash(\n', '            vaultDetails.shortUnderlyingAsset,\n', '            vaultDetails.shortStrikeAsset,\n', '            vaultDetails.shortCollateralAsset,\n', '            vaultDetails.isShortPut\n', '        );\n', '\n', '        // convert vault collateral to a fixed point (1e27) from collateral decimals\n', '        FPI.FixedPointInt memory depositedCollateral = FPI.fromScaledUint(\n', '            _vault.collateralAmounts[0],\n', '            vaultDetails.collateralDecimals\n', '        );\n', '\n', '        FPI.FixedPointInt memory collateralRequired = _getNakedMarginRequired(\n', '            productHash,\n', '            shortDetails.shortAmount,\n', '            shortDetails.shortUnderlyingPrice,\n', '            shortDetails.shortStrike,\n', '            vaultDetails.shortExpiryTimestamp,\n', '            vaultDetails.isShortPut\n', '        );\n', '\n', '        // if collateral required <= collateral in the vault, the vault is not liquidatable\n', '        if (collateralRequired.isLessThanOrEqual(depositedCollateral)) {\n', '            return (false, 0, 0);\n', '        }\n', '\n', '        FPI.FixedPointInt memory cashValue = _getCashValue(\n', '            shortDetails.shortStrike,\n', '            shortDetails.shortUnderlyingPrice,\n', '            vaultDetails.isShortPut\n', '        );\n', '\n', '        // get the amount of collateral per 1 repaid otoken\n', '        uint256 debtPrice = _getDebtPrice(\n', '            depositedCollateral,\n', '            shortDetails.shortAmount,\n', '            cashValue,\n', '            shortDetails.shortUnderlyingPrice,\n', '            timestamp,\n', '            vaultDetails.collateralDecimals,\n', '            vaultDetails.isShortPut\n', '        );\n', '\n', '        return (true, debtPrice, dust[vaultDetails.shortCollateralAsset]);\n', '    }\n', '\n', '    /**\n', '     * @notice calculate required collateral margin for a vault\n', '     * @param _vault theoretical vault that needs to be checked\n', '     * @param _vaultType vault type\n', '     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27\n', '     */\n', '    function getMarginRequired(MarginVault.Vault memory _vault, uint256 _vaultType)\n', '        external\n', '        view\n', '        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\n', '    {\n', '        VaultDetails memory vaultDetail = _getVaultDetails(_vault, _vaultType);\n', '        return _getMarginRequired(_vault, vaultDetail);\n', '    }\n', '\n', '    /**\n', '     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\n', '     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\n', '     * @param _vault theoretical vault that needs to be checked\n', '     * @param _vaultType vault type (0 for spread/max loss, 1 for naked margin)\n', '     * @return excessCollateral the amount by which the margin is above or below the required amount\n', '     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\n', '     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\n', '     */\n', '    function getExcessCollateral(MarginVault.Vault memory _vault, uint256 _vaultType)\n', '        public\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\n', '\n', '        // include all the checks for to ensure the vault is valid\n', '        _checkIsValidVault(_vault, vaultDetails);\n', '\n', '        // if the vault contains no oTokens, return the amount of collateral\n', '        if (!vaultDetails.hasShort && !vaultDetails.hasLong) {\n', '            uint256 amount = vaultDetails.hasCollateral ? _vault.collateralAmounts[0] : 0;\n', '            return (amount, true);\n', '        }\n', '\n', '        // get required margin, denominated in collateral, scaled in 1e27\n', '        (FPI.FixedPointInt memory collateralAmount, FPI.FixedPointInt memory collateralRequired) = _getMarginRequired(\n', '            _vault,\n', '            vaultDetails\n', '        );\n', '        FPI.FixedPointInt memory excessCollateral = collateralAmount.sub(collateralRequired);\n', '\n', '        bool isExcess = excessCollateral.isGreaterThanOrEqual(ZERO);\n', '        uint256 collateralDecimals = vaultDetails.hasLong\n', '            ? vaultDetails.longCollateralDecimals\n', '            : vaultDetails.shortCollateralDecimals;\n', '        // if is excess, truncate the tailing digits in excessCollateralExternal calculation\n', '        uint256 excessCollateralExternal = excessCollateral.toScaledUint(collateralDecimals, isExcess);\n', '        return (excessCollateralExternal, isExcess);\n', '    }\n', '\n', '    /**\n', '     * @notice return the cash value of an expired oToken, denominated in strike asset\n', '     * @dev for a call, return Max (0, underlyingPriceInStrike - otoken.strikePrice)\n', '     * @dev for a put, return Max(0, otoken.strikePrice - underlyingPriceInStrike)\n', '     * @param _underlying otoken underlying asset\n', '     * @param _strike otoken strike asset\n', '     * @param _expiryTimestamp otoken expiry timestamp\n', '     * @param _strikePrice otoken strike price\n', '     * @param _strikePrice true if otoken is put otherwise false\n', '     * @return cash value of an expired otoken, denominated in the strike asset\n', '     */\n', '    function _getExpiredCashValue(\n', '        address _underlying,\n', '        address _strike,\n', '        uint256 _expiryTimestamp,\n', '        uint256 _strikePrice,\n', '        bool _isPut\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        // strike price is denominated in strike asset\n', '        FPI.FixedPointInt memory strikePrice = FPI.fromScaledUint(_strikePrice, BASE);\n', '        FPI.FixedPointInt memory one = FPI.fromScaledUint(1, 0);\n', '\n', '        // calculate the value of the underlying asset in terms of the strike asset\n', '        FPI.FixedPointInt memory underlyingPriceInStrike = _convertAmountOnExpiryPrice(\n', '            one, // underlying price is 1 (1e27) in term of underlying\n', '            _underlying,\n', '            _strike,\n', '            _expiryTimestamp\n', '        );\n', '\n', '        return _getCashValue(strikePrice, underlyingPriceInStrike, _isPut);\n', '    }\n', '\n', '    /// @dev added this struct to avoid stack-too-deep error\n', '    struct OtokenDetails {\n', '        address otokenUnderlyingAsset;\n', '        address otokenCollateralAsset;\n', '        address otokenStrikeAsset;\n', '        uint256 otokenExpiry;\n', '        bool isPut;\n', '    }\n', '\n', '    /**\n', '     * @notice calculate the amount of collateral needed for a vault\n', '     * @dev vault passed in has already passed the checkIsValidVault function\n', '     * @param _vault theoretical vault that needs to be checked\n', '     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault,\n', '     * scaled to 1e27\n', '     */\n', '    function _getMarginRequired(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\n', '        internal\n', '        view\n', '        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\n', '    {\n', '        FPI.FixedPointInt memory shortAmount = _vaultDetails.hasShort\n', '            ? FPI.fromScaledUint(_vault.shortAmounts[0], BASE)\n', '            : ZERO;\n', '        FPI.FixedPointInt memory longAmount = _vaultDetails.hasLong\n', '            ? FPI.fromScaledUint(_vault.longAmounts[0], BASE)\n', '            : ZERO;\n', '        FPI.FixedPointInt memory collateralAmount = _vaultDetails.hasCollateral\n', '            ? FPI.fromScaledUint(_vault.collateralAmounts[0], _vaultDetails.collateralDecimals)\n', '            : ZERO;\n', '        FPI.FixedPointInt memory shortStrike = _vaultDetails.hasShort\n', '            ? FPI.fromScaledUint(_vaultDetails.shortStrikePrice, BASE)\n', '            : ZERO;\n', '\n', '        // struct to avoid stack too deep error\n', '        OtokenDetails memory otokenDetails = OtokenDetails(\n', '            _vaultDetails.hasShort ? _vaultDetails.shortUnderlyingAsset : _vaultDetails.longUnderlyingAsset,\n', '            _vaultDetails.hasShort ? _vaultDetails.shortCollateralAsset : _vaultDetails.longCollateralAsset,\n', '            _vaultDetails.hasShort ? _vaultDetails.shortStrikeAsset : _vaultDetails.longStrikeAsset,\n', '            _vaultDetails.hasShort ? _vaultDetails.shortExpiryTimestamp : _vaultDetails.longExpiryTimestamp,\n', '            _vaultDetails.hasShort ? _vaultDetails.isShortPut : _vaultDetails.isLongPut\n', '        );\n', '\n', '        if (now < otokenDetails.otokenExpiry) {\n', "            // it's not expired, return amount of margin required based on vault type\n", '            if (_vaultDetails.vaultType == 1) {\n', '                // this is a naked margin vault\n', '                // fetch dust amount for otoken collateral asset as FixedPointInt, assuming dust is already scaled by collateral decimals\n', '                FPI.FixedPointInt memory dustAmount = FPI.fromScaledUint(\n', '                    dust[_vaultDetails.shortCollateralAsset],\n', '                    _vaultDetails.collateralDecimals\n', '                );\n', '\n', '                // check that collateral deposited in naked margin vault is greater than dust amount for that particular collateral asset\n', '                if (collateralAmount.isGreaterThan(ZERO)) {\n', '                    require(\n', '                        collateralAmount.isGreaterThan(dustAmount),\n', '                        "MarginCalculator: naked margin vault should have collateral amount greater than dust amount"\n', '                    );\n', '                }\n', '\n', '                // get underlying asset price for short option\n', '                FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(\n', '                    oracle.getPrice(_vaultDetails.shortUnderlyingAsset),\n', '                    BASE\n', '                );\n', '\n', '                // encode product hash\n', '                bytes32 productHash = _getProductHash(\n', '                    _vaultDetails.shortUnderlyingAsset,\n', '                    _vaultDetails.shortStrikeAsset,\n', '                    _vaultDetails.shortCollateralAsset,\n', '                    _vaultDetails.isShortPut\n', '                );\n', '\n', '                // return amount of collateral in vault and needed collateral amount for margin\n', '                return (\n', '                    collateralAmount,\n', '                    _getNakedMarginRequired(\n', '                        productHash,\n', '                        shortAmount,\n', '                        shortUnderlyingPrice,\n', '                        shortStrike,\n', '                        otokenDetails.otokenExpiry,\n', '                        otokenDetails.isPut\n', '                    )\n', '                );\n', '            } else {\n', '                // this is a fully collateralized vault\n', '                FPI.FixedPointInt memory longStrike = _vaultDetails.hasLong\n', '                    ? FPI.fromScaledUint(_vaultDetails.longStrikePrice, BASE)\n', '                    : ZERO;\n', '\n', '                if (otokenDetails.isPut) {\n', '                    FPI.FixedPointInt memory strikeNeeded = _getPutSpreadMarginRequired(\n', '                        shortAmount,\n', '                        longAmount,\n', '                        shortStrike,\n', '                        longStrike\n', '                    );\n', '                    // convert amount to be denominated in collateral\n', '                    return (\n', '                        collateralAmount,\n', '                        _convertAmountOnLivePrice(\n', '                            strikeNeeded,\n', '                            otokenDetails.otokenStrikeAsset,\n', '                            otokenDetails.otokenCollateralAsset\n', '                        )\n', '                    );\n', '                } else {\n', '                    FPI.FixedPointInt memory underlyingNeeded = _getCallSpreadMarginRequired(\n', '                        shortAmount,\n', '                        longAmount,\n', '                        shortStrike,\n', '                        longStrike\n', '                    );\n', '                    // convert amount to be denominated in collateral\n', '                    return (\n', '                        collateralAmount,\n', '                        _convertAmountOnLivePrice(\n', '                            underlyingNeeded,\n', '                            otokenDetails.otokenUnderlyingAsset,\n', '                            otokenDetails.otokenCollateralAsset\n', '                        )\n', '                    );\n', '                }\n', '            }\n', '        } else {\n', '            // the vault has expired. calculate the cash value of all the minted short options\n', '            FPI.FixedPointInt memory shortCashValue = _vaultDetails.hasShort\n', '                ? _getExpiredCashValue(\n', '                    _vaultDetails.shortUnderlyingAsset,\n', '                    _vaultDetails.shortStrikeAsset,\n', '                    _vaultDetails.shortExpiryTimestamp,\n', '                    _vaultDetails.shortStrikePrice,\n', '                    otokenDetails.isPut\n', '                )\n', '                : ZERO;\n', '            FPI.FixedPointInt memory longCashValue = _vaultDetails.hasLong\n', '                ? _getExpiredCashValue(\n', '                    _vaultDetails.longUnderlyingAsset,\n', '                    _vaultDetails.longStrikeAsset,\n', '                    _vaultDetails.longExpiryTimestamp,\n', '                    _vaultDetails.longStrikePrice,\n', '                    otokenDetails.isPut\n', '                )\n', '                : ZERO;\n', '\n', '            FPI.FixedPointInt memory valueInStrike = _getExpiredSpreadCashValue(\n', '                shortAmount,\n', '                longAmount,\n', '                shortCashValue,\n', '                longCashValue\n', '            );\n', '\n', '            // convert amount to be denominated in collateral\n', '            return (\n', '                collateralAmount,\n', '                _convertAmountOnExpiryPrice(\n', '                    valueInStrike,\n', '                    otokenDetails.otokenStrikeAsset,\n', '                    otokenDetails.otokenCollateralAsset,\n', '                    otokenDetails.otokenExpiry\n', '                )\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice get required collateral for naked margin position\n', '     * if put:\n', '     * a = min(strike price, spot shock * underlying price)\n', '     * b = max(strike price - spot shock * underlying price, 0)\n', '     * marginRequired = ( option upper bound value * a + b) * short amount\n', '     * if call:\n', '     * a = min(1, strike price / (underlying price / spot shock value))\n', '     * b = max(1- (strike price / (underlying price / spot shock value)), 0)\n', '     * marginRequired = (option upper bound value * a + b) * short amount\n', '     * @param _productHash product hash\n', '     * @param _shortAmount short amount in vault, in FixedPointInt type\n', '     * @param _strikePrice strike price of short otoken, in FixedPointInt type\n', '     * @param _underlyingPrice underlying price of short otoken underlying asset, in FixedPointInt type\n', '     * @param _shortExpiryTimestamp short otoken expiry timestamp\n', '     * @param _isPut otoken type, true if put option, false for call option\n', '     * @return required margin for this naked vault, in FixedPointInt type (scaled by 1e27)\n', '     */\n', '    function _getNakedMarginRequired(\n', '        bytes32 _productHash,\n', '        FPI.FixedPointInt memory _shortAmount,\n', '        FPI.FixedPointInt memory _underlyingPrice,\n', '        FPI.FixedPointInt memory _strikePrice,\n', '        uint256 _shortExpiryTimestamp,\n', '        bool _isPut\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        // find option upper bound value\n', '        FPI.FixedPointInt memory optionUpperBoundValue = _findUpperBoundValue(_productHash, _shortExpiryTimestamp);\n', '        // convert spot shock value of this product to FixedPointInt (already scaled by 1e27)\n', '        FPI.FixedPointInt memory spotShockValue = FPI.FixedPointInt(int256(spotShock[_productHash]));\n', '\n', '        FPI.FixedPointInt memory a;\n', '        FPI.FixedPointInt memory b;\n', '        FPI.FixedPointInt memory marginRequired;\n', '\n', '        if (_isPut) {\n', '            a = FPI.min(_strikePrice, spotShockValue.mul(_underlyingPrice));\n', '            b = FPI.max(_strikePrice.sub(spotShockValue.mul(_underlyingPrice)), ZERO);\n', '            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\n', '        } else {\n', '            FPI.FixedPointInt memory one = FPI.fromScaledUint(1e27, SCALING_FACTOR);\n', '            a = FPI.min(one, _strikePrice.mul(spotShockValue).div(_underlyingPrice));\n', '            b = FPI.max(one.sub(_strikePrice.mul(spotShockValue).div(_underlyingPrice)), ZERO);\n', '            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\n', '        }\n', '\n', '        return marginRequired;\n', '    }\n', '\n', '    /**\n', '     * @notice find upper bound value for product by specific expiry timestamp\n', '     * @dev should return the upper bound value that correspond to option time to expiry, of if not found should return the next greater one, revert if no value found\n', '     * @param _productHash product hash\n', '     * @param _expiryTimestamp expiry timestamp\n', '     * @return option upper bound value\n', '     */\n', '    function _findUpperBoundValue(bytes32 _productHash, uint256 _expiryTimestamp)\n', '        internal\n', '        view\n', '        returns (FPI.FixedPointInt memory)\n', '    {\n', '        // get time to expiry array of this product hash\n', '        uint256[] memory timesToExpiry = timesToExpiryForProduct[_productHash];\n', '\n', '        // check that this product have upper bound values stored\n', '        require(timesToExpiry.length != 0, "MarginCalculator: product have no expiry values");\n', '\n', '        uint256 optionTimeToExpiry = _expiryTimestamp.sub(now);\n', '\n', '        // check that the option time to expiry is in the expiry array\n', '        require(\n', '            timesToExpiry[timesToExpiry.length.sub(1)] >= optionTimeToExpiry,\n', '            "MarginCalculator: product have no upper bound value"\n', '        );\n', '\n', '        // loop through the array and return the upper bound value in FixedPointInt type (already scaled by 1e27)\n', '        for (uint8 i = 0; i < timesToExpiry.length; i++) {\n', '            if (timesToExpiry[i] >= optionTimeToExpiry)\n', '                return FPI.fromScaledUint(maxPriceAtTimeToExpiry[_productHash][timesToExpiry[i]], SCALING_FACTOR);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev returns the strike asset amount of margin required for a put or put spread with the given short oTokens, long oTokens and amounts\n', '     *\n', '     * marginRequired = max( (short amount * short strike) - (long strike * min (short amount, long amount)) , 0 )\n', '     *\n', '     * @return margin requirement denominated in the strike asset\n', '     */\n', '    function _getPutSpreadMarginRequired(\n', '        FPI.FixedPointInt memory _shortAmount,\n', '        FPI.FixedPointInt memory _longAmount,\n', '        FPI.FixedPointInt memory _shortStrike,\n', '        FPI.FixedPointInt memory _longStrike\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        return FPI.max(_shortAmount.mul(_shortStrike).sub(_longStrike.mul(FPI.min(_shortAmount, _longAmount))), ZERO);\n', '    }\n', '\n', '    /**\n', '     * @dev returns the underlying asset amount required for a call or call spread with the given short oTokens, long oTokens, and amounts\n', '     *\n', '     *                           (long strike - short strike) * short amount\n', '     * marginRequired =  max( ------------------------------------------------- , max (short amount - long amount, 0) )\n', '     *                                           long strike\n', '     *\n', '     * @dev if long strike = 0, return max( short amount - long amount, 0)\n', '     * @return margin requirement denominated in the underlying asset\n', '     */\n', '    function _getCallSpreadMarginRequired(\n', '        FPI.FixedPointInt memory _shortAmount,\n', '        FPI.FixedPointInt memory _longAmount,\n', '        FPI.FixedPointInt memory _shortStrike,\n', '        FPI.FixedPointInt memory _longStrike\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        // max (short amount - long amount , 0)\n', '        if (_longStrike.isEqual(ZERO)) {\n', '            return FPI.max(_shortAmount.sub(_longAmount), ZERO);\n', '        }\n', '\n', '        /**\n', '         *             (long strike - short strike) * short amount\n', '         * calculate  ----------------------------------------------\n', '         *                             long strike\n', '         */\n', '        FPI.FixedPointInt memory firstPart = _longStrike.sub(_shortStrike).mul(_shortAmount).div(_longStrike);\n', '\n', '        /**\n', '         * calculate max ( short amount - long amount , 0)\n', '         */\n', '        FPI.FixedPointInt memory secondPart = FPI.max(_shortAmount.sub(_longAmount), ZERO);\n', '\n', '        return FPI.max(firstPart, secondPart);\n', '    }\n', '\n', '    /**\n', '     * @notice convert an amount in asset A to equivalent amount of asset B, based on a live price\n', '     * @dev function includes the amount and applies .mul() first to increase the accuracy\n', '     * @param _amount amount in asset A\n', '     * @param _assetA asset A\n', '     * @param _assetB asset B\n', '     * @return _amount in asset B\n', '     */\n', '    function _convertAmountOnLivePrice(\n', '        FPI.FixedPointInt memory _amount,\n', '        address _assetA,\n', '        address _assetB\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        if (_assetA == _assetB) {\n', '            return _amount;\n', '        }\n', '        uint256 priceA = oracle.getPrice(_assetA);\n', '        uint256 priceB = oracle.getPrice(_assetB);\n', '        // amount A * price A in USD = amount B * price B in USD\n', '        // amount B = amount A * price A / price B\n', '        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\n', '    }\n', '\n', '    /**\n', '     * @notice convert an amount in asset A to equivalent amount of asset B, based on an expiry price\n', '     * @dev function includes the amount and apply .mul() first to increase the accuracy\n', '     * @param _amount amount in asset A\n', '     * @param _assetA asset A\n', '     * @param _assetB asset B\n', '     * @return _amount in asset B\n', '     */\n', '    function _convertAmountOnExpiryPrice(\n', '        FPI.FixedPointInt memory _amount,\n', '        address _assetA,\n', '        address _assetB,\n', '        uint256 _expiry\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        if (_assetA == _assetB) {\n', '            return _amount;\n', '        }\n', '        (uint256 priceA, bool priceAFinalized) = oracle.getExpiryPrice(_assetA, _expiry);\n', '        (uint256 priceB, bool priceBFinalized) = oracle.getExpiryPrice(_assetB, _expiry);\n', '        require(priceAFinalized && priceBFinalized, "MarginCalculator: price at expiry not finalized yet");\n', '        // amount A * price A in USD = amount B * price B in USD\n', '        // amount B = amount A * price A / price B\n', '        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\n', '    }\n', '\n', '    /**\n', '     * @notice return debt price, how much collateral asset per 1 otoken repaid in collateral decimal\n', '     * ending price = vault collateral / vault debt\n', '     * if auction ended, return ending price\n', '     * else calculate starting price\n', '     * for put option:\n', '     * starting price = max(cash value - underlying price * oracle deviation, 0)\n', '     * for call option:\n', '     *                      max(cash value - underlying price * oracle deviation, 0)\n', '     * starting price =  ---------------------------------------------------------------\n', '     *                                          underlying price\n', '     *\n', '     *\n', '     *                  starting price + (ending price - starting price) * auction elapsed time\n', '     * then price = --------------------------------------------------------------------------\n', '     *                                      auction time\n', '     *\n', '     *\n', '     * @param _vaultCollateral vault collateral amount\n', '     * @param _vaultDebt vault short amount\n', '     * @param _cashValue option cash value\n', '     * @param _spotPrice option underlying asset price (in USDC)\n', '     * @param _auctionStartingTime auction starting timestamp (_spotPrice timestamp from chainlink)\n', '     * @param _collateralDecimals collateral asset decimals\n', '     * @param _isPut otoken type, true for put, false for call option\n', '     * @return price of 1 debt otoken in collateral asset scaled by collateral decimals\n', '     */\n', '    function _getDebtPrice(\n', '        FPI.FixedPointInt memory _vaultCollateral,\n', '        FPI.FixedPointInt memory _vaultDebt,\n', '        FPI.FixedPointInt memory _cashValue,\n', '        FPI.FixedPointInt memory _spotPrice,\n', '        uint256 _auctionStartingTime,\n', '        uint256 _collateralDecimals,\n', '        bool _isPut\n', '    ) internal view returns (uint256) {\n', '        // price of 1 repaid otoken in collateral asset, scaled to 1e27\n', '        FPI.FixedPointInt memory price;\n', '        // auction ending price\n', '        FPI.FixedPointInt memory endingPrice = _vaultCollateral.div(_vaultDebt);\n', '\n', '        // auction elapsed time\n', '        uint256 auctionElapsedTime = now.sub(_auctionStartingTime);\n', '\n', '        // if auction ended, return ending price\n', '        if (auctionElapsedTime >= AUCTION_TIME) {\n', '            price = endingPrice;\n', '        } else {\n', '            // starting price\n', '            FPI.FixedPointInt memory startingPrice;\n', '\n', '            {\n', '                // store oracle deviation in a FixedPointInt (already scaled by 1e27)\n', '                FPI.FixedPointInt memory fixedOracleDeviation = FPI.fromScaledUint(oracleDeviation, SCALING_FACTOR);\n', '\n', '                if (_isPut) {\n', '                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO);\n', '                } else {\n', '                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO).div(_spotPrice);\n', '                }\n', '            }\n', '\n', '            // store auctionElapsedTime in a FixedPointInt scaled by 1e27\n', '            FPI.FixedPointInt memory auctionElapsedTimeFixedPoint = FPI.fromScaledUint(auctionElapsedTime, 18);\n', '            // store AUCTION_TIME in a FixedPointInt (already scaled by 1e27)\n', '            FPI.FixedPointInt memory auctionTime = FPI.fromScaledUint(AUCTION_TIME, 18);\n', '\n', '            // calculate price of 1 repaid otoken, scaled by the collateral decimals, expilictly rounded down\n', '            price = startingPrice.add(\n', '                (endingPrice.sub(startingPrice)).mul(auctionElapsedTimeFixedPoint).div(auctionTime)\n', '            );\n', '\n', '            // cap liquidation price to ending price\n', '            if (price.isGreaterThan(endingPrice)) price = endingPrice;\n', '        }\n', '\n', '        return price.toScaledUint(_collateralDecimals, true);\n', '    }\n', '\n', '    /**\n', '     * @notice get vault details to save us from making multiple external calls\n', '     * @param _vault vault struct\n', '     * @param _vaultType vault type, 0 for max loss/spreads and 1 for naked margin vault\n', '     * @return vault details in VaultDetails struct\n', '     */\n', '    function _getVaultDetails(MarginVault.Vault memory _vault, uint256 _vaultType)\n', '        internal\n', '        view\n', '        returns (VaultDetails memory)\n', '    {\n', '        VaultDetails memory vaultDetails = VaultDetails(\n', '            address(0),\n', '            address(0),\n', '            address(0),\n', '            address(0),\n', '            address(0),\n', '            address(0),\n', '            0,\n', '            0,\n', '            0,\n', '            0,\n', '            0,\n', '            0,\n', '            0,\n', '            0,\n', '            false,\n', '            false,\n', '            false,\n', '            false,\n', '            false\n', '        );\n', '\n', '        // check if vault has long, short otoken and collateral asset\n', '        vaultDetails.hasLong = _isNotEmpty(_vault.longOtokens);\n', '        vaultDetails.hasShort = _isNotEmpty(_vault.shortOtokens);\n', '        vaultDetails.hasCollateral = _isNotEmpty(_vault.collateralAssets);\n', '\n', '        vaultDetails.vaultType = _vaultType;\n', '\n', '        // get vault long otoken if available\n', '        if (vaultDetails.hasLong) {\n', '            OtokenInterface long = OtokenInterface(_vault.longOtokens[0]);\n', '            (\n', '                vaultDetails.longCollateralAsset,\n', '                vaultDetails.longUnderlyingAsset,\n', '                vaultDetails.longStrikeAsset,\n', '                vaultDetails.longStrikePrice,\n', '                vaultDetails.longExpiryTimestamp,\n', '                vaultDetails.isLongPut\n', '            ) = _getOtokenDetails(address(long));\n', '            vaultDetails.longCollateralDecimals = uint256(ERC20Interface(vaultDetails.longCollateralAsset).decimals());\n', '        }\n', '\n', '        // get vault short otoken if available\n', '        if (vaultDetails.hasShort) {\n', '            OtokenInterface short = OtokenInterface(_vault.shortOtokens[0]);\n', '            (\n', '                vaultDetails.shortCollateralAsset,\n', '                vaultDetails.shortUnderlyingAsset,\n', '                vaultDetails.shortStrikeAsset,\n', '                vaultDetails.shortStrikePrice,\n', '                vaultDetails.shortExpiryTimestamp,\n', '                vaultDetails.isShortPut\n', '            ) = _getOtokenDetails(address(short));\n', '            vaultDetails.shortCollateralDecimals = uint256(\n', '                ERC20Interface(vaultDetails.shortCollateralAsset).decimals()\n', '            );\n', '        }\n', '\n', '        if (vaultDetails.hasCollateral) {\n', '            vaultDetails.collateralDecimals = uint256(ERC20Interface(_vault.collateralAssets[0]).decimals());\n', '        }\n', '\n', '        return vaultDetails;\n', '    }\n', '\n', '    /**\n', '     * @dev calculate the cash value obligation for an expired vault, where a positive number is an obligation\n', '     *\n', '     * Formula: net = (short cash value * short amount) - ( long cash value * long Amount )\n', '     *\n', '     * @return cash value obligation denominated in the strike asset\n', '     */\n', '    function _getExpiredSpreadCashValue(\n', '        FPI.FixedPointInt memory _shortAmount,\n', '        FPI.FixedPointInt memory _longAmount,\n', '        FPI.FixedPointInt memory _shortCashValue,\n', '        FPI.FixedPointInt memory _longCashValue\n', '    ) internal pure returns (FPI.FixedPointInt memory) {\n', '        return _shortCashValue.mul(_shortAmount).sub(_longCashValue.mul(_longAmount));\n', '    }\n', '\n', '    /**\n', '     * @dev check if asset array contain a token address\n', '     * @return True if the array is not empty\n', '     */\n', '    function _isNotEmpty(address[] memory _assets) internal pure returns (bool) {\n', '        return _assets.length > 0 && _assets[0] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev ensure that:\n', '     * a) at most 1 asset type used as collateral\n', '     * b) at most 1 series of option used as the long option\n', '     * c) at most 1 series of option used as the short option\n', '     * d) asset array lengths match for long, short and collateral\n', '     * e) long option and collateral asset is acceptable for margin with short asset\n', '     * @param _vault the vault to check\n', '     * @param _vaultDetails vault details struct\n', '     */\n', '    function _checkIsValidVault(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails) internal pure {\n', '        // ensure all the arrays in the vault are valid\n', '        require(_vault.shortOtokens.length <= 1, "MarginCalculator: Too many short otokens in the vault");\n', '        require(_vault.longOtokens.length <= 1, "MarginCalculator: Too many long otokens in the vault");\n', '        require(_vault.collateralAssets.length <= 1, "MarginCalculator: Too many collateral assets in the vault");\n', '\n', '        require(\n', '            _vault.shortOtokens.length == _vault.shortAmounts.length,\n', '            "MarginCalculator: Short asset and amount mismatch"\n', '        );\n', '        require(\n', '            _vault.longOtokens.length == _vault.longAmounts.length,\n', '            "MarginCalculator: Long asset and amount mismatch"\n', '        );\n', '        require(\n', '            _vault.collateralAssets.length == _vault.collateralAmounts.length,\n', '            "MarginCalculator: Collateral asset and amount mismatch"\n', '        );\n', '\n', '        // ensure the long asset is valid for the short asset\n', '        require(\n', '            _isMarginableLong(_vault, _vaultDetails),\n', '            "MarginCalculator: long asset not marginable for short asset"\n', '        );\n', '\n', '        // ensure that the collateral asset is valid for the short asset\n', '        require(\n', '            _isMarginableCollateral(_vault, _vaultDetails),\n', '            "MarginCalculator: collateral asset not marginable for short asset"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev if there is a short option and a long option in the vault, ensure that the long option is able to be used as collateral for the short option\n', '     * @param _vault the vault to check\n', '     * @param _vaultDetails vault details struct\n', '     * @return true if long is marginable or false if not\n', '     */\n', '    function _isMarginableLong(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        if (_vaultDetails.vaultType == 1)\n', '            require(!_vaultDetails.hasLong, "MarginCalculator: naked margin vault cannot have long otoken");\n', '\n', '        // if vault is missing a long or a short, return True\n', '        if (!_vaultDetails.hasLong || !_vaultDetails.hasShort) return true;\n', '\n', '        return\n', '            _vault.longOtokens[0] != _vault.shortOtokens[0] &&\n', '            _vaultDetails.longUnderlyingAsset == _vaultDetails.shortUnderlyingAsset &&\n', '            _vaultDetails.longStrikeAsset == _vaultDetails.shortStrikeAsset &&\n', '            _vaultDetails.longCollateralAsset == _vaultDetails.shortCollateralAsset &&\n', '            _vaultDetails.longExpiryTimestamp == _vaultDetails.shortExpiryTimestamp &&\n', '            _vaultDetails.isLongPut == _vaultDetails.isShortPut;\n', '    }\n', '\n', '    /**\n', '     * @dev if there is short option and collateral asset in the vault, ensure that the collateral asset is valid for the short option\n', '     * @param _vault the vault to check\n', '     * @param _vaultDetails vault details struct\n', '     * @return true if marginable or false\n', '     */\n', '    function _isMarginableCollateral(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        bool isMarginable = true;\n', '\n', '        if (!_vaultDetails.hasCollateral) return isMarginable;\n', '\n', '        if (_vaultDetails.hasShort) {\n', '            isMarginable = _vaultDetails.shortCollateralAsset == _vault.collateralAssets[0];\n', '        } else if (_vaultDetails.hasLong) {\n', '            isMarginable = _vaultDetails.longCollateralAsset == _vault.collateralAssets[0];\n', '        }\n', '\n', '        return isMarginable;\n', '    }\n', '\n', '    /**\n', '     * @notice get a product hash\n', '     * @param _underlying option underlying asset\n', '     * @param _strike option strike asset\n', '     * @param _collateral option collateral asset\n', '     * @param _isPut option type\n', '     * @return product hash\n', '     */\n', '    function _getProductHash(\n', '        address _underlying,\n', '        address _strike,\n', '        address _collateral,\n', '        bool _isPut\n', '    ) internal pure returns (bytes32) {\n', '        return keccak256(abi.encode(_underlying, _strike, _collateral, _isPut));\n', '    }\n', '\n', '    /**\n', '     * @notice get option cash value\n', '     * @dev this assume that the underlying price is denominated in strike asset\n', '     * cash value = max(underlying price - strike price, 0)\n', '     * @param _strikePrice option strike price\n', '     * @param _underlyingPrice option underlying price\n', '     * @param _isPut option type, true for put and false for call option\n', '     */\n', '    function _getCashValue(\n', '        FPI.FixedPointInt memory _strikePrice,\n', '        FPI.FixedPointInt memory _underlyingPrice,\n', '        bool _isPut\n', '    ) internal view returns (FPI.FixedPointInt memory) {\n', '        if (_isPut) return _strikePrice.isGreaterThan(_underlyingPrice) ? _strikePrice.sub(_underlyingPrice) : ZERO;\n', '\n', '        return _underlyingPrice.isGreaterThan(_strikePrice) ? _underlyingPrice.sub(_strikePrice) : ZERO;\n', '    }\n', '\n', '    /**\n', '     * @dev get otoken detail, from both otoken versions\n', '     */\n', '    function _getOtokenDetails(address _otoken)\n', '        internal\n', '        view\n', '        returns (\n', '            address,\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            bool\n', '        )\n', '    {\n', '        OtokenInterface otoken = OtokenInterface(_otoken);\n', '        try otoken.getOtokenDetails() returns (\n', '            address collateral,\n', '            address underlying,\n', '            address strike,\n', '            uint256 strikePrice,\n', '            uint256 expiry,\n', '            bool isPut\n', '        ) {\n', '            return (collateral, underlying, strike, strikePrice, expiry, isPut);\n', '        } catch {\n', '            // v1 otoken\n', '            return (\n', '                otoken.collateralAsset(),\n', '                otoken.underlyingAsset(),\n', '                otoken.strikeAsset(),\n', '                otoken.strikePrice(),\n', '                otoken.expiryTimestamp(),\n', '                otoken.isPut()\n', '            );\n', '        }\n', '    }\n', '}']