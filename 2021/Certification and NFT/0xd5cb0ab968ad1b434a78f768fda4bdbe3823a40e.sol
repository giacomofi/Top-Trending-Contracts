['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// File: contracts\\fixed-inflation\\FixedInflationData.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct FixedInflationEntryConfiguration {\n', '    bool add;\n', '    bool remove;\n', '    FixedInflationEntry data;\n', '}\n', '\n', 'struct FixedInflationEntry {\n', '    uint256 lastBlock;\n', '    bytes32 id;\n', '    string name;\n', '    uint256 blockInterval;\n', '    uint256 callerRewardPercentage;\n', '}\n', '\n', 'struct FixedInflationOperation {\n', '\n', '    address inputTokenAddress;\n', '    uint256 inputTokenAmount;\n', '    bool inputTokenAmountIsPercentage;\n', '    bool inputTokenAmountIsByMint;\n', '\n', '    address ammPlugin;\n', '    address[] liquidityPoolAddresses;\n', '    address[] swapPath;\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '\n', '    address[] receivers;\n', '    uint256[] receiversPercentages;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\IFixedInflationExtension.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IFixedInflationExtension {\n', '\n', '    function init(address host) external;\n', '\n', '    function setHost(address host) external;\n', '\n', '    function data() external view returns(address fixedInflationContract, address host);\n', '\n', '    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) external;\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\util\\IERC20.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\AMMData.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct LiquidityPoolData {\n', '    address liquidityPoolAddress;\n', '    uint256 amount;\n', '    address tokenAddress;\n', '    bool amountIsLiquidityPool;\n', '    bool involvingETH;\n', '    address receiver;\n', '}\n', '\n', 'struct SwapData {\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '    address[] liquidityPoolAddresses;\n', '    address[] path;\n', '    address inputToken;\n', '    uint256 amount;\n', '    address receiver;\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\IAMM.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IAMM {\n', '\n', '    event NewLiquidityPoolAddress(address indexed);\n', '\n', '    function info() external view returns(string memory name, uint256 version);\n', '\n', '    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\n', '\n', '    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\n', '\n', '    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\n', '    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\n', '    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\n', '\n', '    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\n', '    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\IFixedInflationFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IFixedInflationFactory {\n', '\n', '    function fixedInflationDefaultExtension() external view returns (address);\n', '\n', '    function feePercentageInfo() external view returns (uint256, address);\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\IFixedInflation.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IFixedInflation {\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\FixedInflation.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract FixedInflation is IFixedInflation {\n', '\n', '    event Entry(bytes32 indexed id);\n', '\n', '    uint256 public constant ONE_HUNDRED = 1e18;\n', '\n', '    address public _factory;\n', '\n', '    mapping(address => uint256) private _tokenIndex;\n', '    mapping(address => uint256) private _tokenTotalSupply;\n', '    address[] private _tokensToTransfer;\n', '    uint256[] private _tokenAmounts;\n', '    uint256[] private _tokenMintAmounts;\n', '\n', '    address public extension;\n', '\n', '    mapping(bytes32 => FixedInflationEntry) private _entries;\n', '    mapping(bytes32 => FixedInflationOperation[]) private _operations;\n', '\n', '    function init(address _extension, bytes memory extensionPayload, FixedInflationEntry[] memory newEntries, FixedInflationOperation[][] memory operationSets) public returns(bytes memory extensionInitResult) {\n', '        require(_factory == address(0), "Already init");\n', '        require(_extension != address(0), "Blank extension");\n', '        _factory = msg.sender;\n', '        extension = _extension;\n', '        if(_extension == address(0)) {\n', '            _extension = _clone(IFixedInflationFactory(_factory).fixedInflationDefaultExtension());\n', '        }\n', '        if(keccak256(extensionPayload) != keccak256("")) {\n', '            extensionInitResult = _call(_extension, extensionPayload);\n', '        }\n', '        require(newEntries.length > 0 && newEntries.length == operationSets.length, "Same length > 0");\n', '        (uint256 dfoFeePercentage,) = IFixedInflationFactory(_factory).feePercentageInfo();\n', '        for(uint256 i = 0; i < newEntries.length; i++) {\n', '            _add(newEntries[i], operationSets[i], dfoFeePercentage);\n', '        }\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    modifier extensionOnly() {\n', '        require(msg.sender == extension, "Unauthorized");\n', '        _;\n', '    }\n', '\n', '    function entry(bytes32 key) public view returns(FixedInflationEntry memory entriesArray, FixedInflationOperation[] memory operations) {\n', '        return (_entries[key], _operations[key]);\n', '    }\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) public override extensionOnly {\n', '        require(newEntries.length > 0 && newEntries.length == operationSets.length, "Same length > 0");\n', '        (uint256 dfoFeePercentage,) = IFixedInflationFactory(_factory).feePercentageInfo();\n', '        for(uint256 i = 0; i < newEntries.length; i++) {\n', '            FixedInflationEntryConfiguration memory entryConfiguration = newEntries[i];\n', '            if(entryConfiguration.add) {\n', '                _add(entryConfiguration.data, operationSets[i], dfoFeePercentage);\n', '                continue;\n', '            }\n', '            require(_entries[entryConfiguration.data.id].id == entryConfiguration.data.id, "Invalid id");\n', '            if(entryConfiguration.remove) {\n', '                _remove(entryConfiguration.data.id);\n', '                continue;\n', '            }\n', '            entryConfiguration.data.lastBlock = _entries[entryConfiguration.data.id].lastBlock;\n', '            _entries[entryConfiguration.data.id] = entryConfiguration.data;\n', '            if(operationSets[i].length > 0) {\n', '                _setOperations(entryConfiguration.data.id, operationSets[i], dfoFeePercentage);\n', '            }\n', '        }\n', '    }\n', '\n', '    function nextBlock(bytes32 id) public view returns(uint256) {\n', '        return _entries[id].lastBlock == 0 ? block.number : (_entries[id].lastBlock + _entries[id].blockInterval);\n', '    }\n', '\n', '    function execute(bytes32[] memory ids, bool[] memory earnByAmounts) public {\n', '        require(ids.length > 0 && ids.length == earnByAmounts.length, "Invalid input data");\n', '        for(uint256 i = 0; i < ids.length; i++) {\n', '            require(_entries[ids[i]].id == ids[i], "Invalid id");\n', '            require(block.number >= nextBlock(ids[i]), "Too early to call index");\n', '            FixedInflationEntry storage fixedInflationEntry = _entries[ids[i]];\n', '            fixedInflationEntry.lastBlock = block.number;\n', '            _collectFixedInflationOperationsTokens(_operations[ids[i]]);\n', '        }\n', '        IFixedInflationExtension(extension).receiveTokens(_tokensToTransfer, _tokenAmounts, _tokenMintAmounts);\n', '        for(uint256 i = 0; i < ids.length; i++) {\n', '            _execute(_entries[ids[i]], _operations[ids[i]], earnByAmounts[i], msg.sender);\n', '        }\n', '        _clearVars();\n', '    }\n', '\n', '    function _collectFixedInflationOperationsTokens(FixedInflationOperation[] memory operations) private {\n', '        for(uint256 i = 0; i < operations.length; i++) {\n', '            FixedInflationOperation memory operation = operations[i];\n', '            _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount, operation.inputTokenAmountIsPercentage, operation.inputTokenAmountIsByMint);\n', '        }\n', '    }\n', '\n', '    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount, bool inputTokenAmountIsPercentage, bool inputTokenAmountIsByMint) private {\n', '        if(inputTokenAmount == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 position = _tokenIndex[inputTokenAddress];\n', '\n', '        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\n', '            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\n', '            _tokensToTransfer.push(inputTokenAddress);\n', '            _tokenAmounts.push(0);\n', '            _tokenMintAmounts.push(0);\n', '        }\n', '        uint256 amount = _calculateTokenAmount(inputTokenAddress, inputTokenAmount, inputTokenAmountIsPercentage);\n', '        if(inputTokenAmountIsByMint) {\n', '            _tokenMintAmounts[position] = _tokenMintAmounts[position] + amount;\n', '        } else {\n', '            _tokenAmounts[position] = _tokenAmounts[position] + amount;\n', '        }\n', '    }\n', '\n', '    function _calculateTokenAmount(address tokenAddress, uint256 tokenAmount, bool tokenAmountIsPercentage) private returns(uint256) {\n', '        if(!tokenAmountIsPercentage) {\n', '            return tokenAmount;\n', '        }\n', '        _tokenTotalSupply[tokenAddress] = _tokenTotalSupply[tokenAddress] != 0 ? _tokenTotalSupply[tokenAddress] : IERC20(tokenAddress).totalSupply();\n', '        return (_tokenTotalSupply[tokenAddress] * ((tokenAmount * 1e18) / ONE_HUNDRED)) / 1e18;\n', '    }\n', '\n', '    function _execute(FixedInflationEntry memory fixedInflationEntry, FixedInflationOperation[] memory operations, bool earnByInput, address rewardReceiver) private {\n', '        for(uint256 i = 0 ; i < operations.length; i++) {\n', '            FixedInflationOperation memory operation = operations[i];\n', '            uint256 amountIn = _calculateTokenAmount(operation.inputTokenAddress, operation.inputTokenAmount, operation.inputTokenAmountIsPercentage);\n', '            if(operation.ammPlugin == address(0)) {\n', '                _transferTo(operation.inputTokenAddress, amountIn, rewardReceiver, fixedInflationEntry.callerRewardPercentage, operation.receivers, operation.receiversPercentages);\n', '            } else {\n', '                _swap(operation, amountIn, rewardReceiver, fixedInflationEntry.callerRewardPercentage, earnByInput);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _swap(FixedInflationOperation memory operation, uint256 amountIn, address rewardReceiver, uint256 callerRewardPercentage, bool earnByInput) private {\n', '\n', '        uint256 inputReward = earnByInput ? _calculateRewardPercentage(amountIn, callerRewardPercentage) : 0;\n', '\n', '        (address ethereumAddress,,) = IAMM(operation.ammPlugin).data();\n', '\n', '        if(operation.exitInETH) {\n', '            operation.swapPath[operation.swapPath.length - 1] = ethereumAddress;\n', '        }\n', '\n', '        address outputToken = operation.swapPath[operation.swapPath.length - 1];\n', '\n', '        SwapData memory swapData = SwapData(\n', '            operation.enterInETH,\n', '            operation.exitInETH,\n', '            operation.liquidityPoolAddresses,\n', '            operation.swapPath,\n', '            operation.enterInETH ? ethereumAddress : operation.inputTokenAddress,\n', '            amountIn - inputReward,\n', '            address(this)\n', '        );\n', '\n', '        if(swapData.inputToken != address(0) && !swapData.enterInETH) {\n', '            _safeApprove(swapData.inputToken, operation.ammPlugin, swapData.amount);\n', '        }\n', '\n', '        uint256 amountOut;\n', '        if(swapData.enterInETH) {\n', '            amountOut = IAMM(operation.ammPlugin).swapLiquidity{value : amountIn}(swapData);\n', '        } else {\n', '            amountOut = IAMM(operation.ammPlugin).swapLiquidity(swapData);\n', '        }\n', '\n', '        if(earnByInput) {\n', '            _transferTo(operation.enterInETH ? address(0) : operation.inputTokenAddress, rewardReceiver, inputReward);\n', '        }\n', '        _transferTo(operation.exitInETH ? address(0) : outputToken, amountOut, earnByInput ? address(0) : rewardReceiver, earnByInput ? 0 : callerRewardPercentage, operation.receivers, operation.receiversPercentages);\n', '    }\n', '\n', '    function _calculateRewardPercentage(uint256 totalAmount, uint256 rewardPercentage) private pure returns (uint256) {\n', '        return (totalAmount * ((rewardPercentage * 1e18) / ONE_HUNDRED)) / 1e18;\n', '    }\n', '\n', '    function _transferTo(address erc20TokenAddress, uint256 totalAmount, address rewardReceiver, uint256 callerRewardPercentage, address[] memory receivers, uint256[] memory receiversPercentages) private {\n', '        uint256 availableAmount = totalAmount;\n', '\n', '        uint256 currentPartialAmount = rewardReceiver == address(0) ? 0 : _calculateRewardPercentage(totalAmount, callerRewardPercentage);\n', '        _transferTo(erc20TokenAddress, rewardReceiver, currentPartialAmount);\n', '        availableAmount -= currentPartialAmount;\n', '\n', '        (uint256 dfoFeePercentage, address dfoWallet) = IFixedInflationFactory(_factory).feePercentageInfo();\n', '        currentPartialAmount = dfoFeePercentage == 0 || dfoWallet == address(0) ? 0 : _calculateRewardPercentage(totalAmount, dfoFeePercentage);\n', '        _transferTo(erc20TokenAddress, dfoWallet, currentPartialAmount);\n', '        availableAmount -= currentPartialAmount;\n', '\n', '        for(uint256 i = 0; i < receiversPercentages.length; i++) {\n', '            _transferTo(erc20TokenAddress, receivers[i], currentPartialAmount = _calculateRewardPercentage(totalAmount, receiversPercentages[i]));\n', '            availableAmount -= currentPartialAmount;\n', '        }\n', '\n', '        _transferTo(erc20TokenAddress, receivers[receivers.length - 1], availableAmount);\n', '    }\n', '\n', '    function _transferTo(address erc20TokenAddress, address to, uint256 value) private {\n', '        if(value == 0) {\n', '            return;\n', '        }\n', '        if(erc20TokenAddress == address(0)) {\n', '            payable(to).transfer(value);\n', '            return;\n', '        }\n', '        _safeTransfer(erc20TokenAddress, to, value);\n', '    }\n', '\n', '    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\n", '    }\n', '\n', '    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\n", '    }\n', '\n', '    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\n', '        assembly {\n', '            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\n', '            let size := returndatasize()\n', '            returnData := mload(0x40)\n', '            mstore(returnData, size)\n', '            let returnDataPayloadStart := add(returnData, 0x20)\n', '            returndatacopy(returnDataPayloadStart, 0, size)\n', '            mstore(0x40, add(returnDataPayloadStart, size))\n', '            switch result case 0 {revert(returnDataPayloadStart, size)}\n', '        }\n', '    }\n', '\n', '    function _clearVars() private {\n', '        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\n', '            if(_tokensToTransfer[i] == address(0) && _tokenAmounts[i] == 0 && _tokenMintAmounts[i] == 0) {\n', '                break;\n', '            }\n', '            delete _tokenIndex[_tokensToTransfer[i]];\n', '            delete _tokenTotalSupply[_tokensToTransfer[i]];\n', '        }\n', '        delete _tokensToTransfer;\n', '        delete _tokenAmounts;\n', '        delete _tokenMintAmounts;\n', '    }\n', '\n', '    function _add(FixedInflationEntry memory fixedInflationEntry, FixedInflationOperation[] memory operations, uint256 dfoFeePercentage) private {\n', '        emit Entry(fixedInflationEntry.id = keccak256(abi.encode(fixedInflationEntry, operations, dfoFeePercentage, msg.sender, block.number, block.timestamp)));\n', '        _entries[fixedInflationEntry.id] = fixedInflationEntry;\n', '        _setOperations(fixedInflationEntry.id, operations, dfoFeePercentage);\n', '    }\n', '\n', '    function _setOperations(bytes32 id, FixedInflationOperation[] memory operations, uint256 dfoFeePercentage) private {\n', '        require(_entries[id].id == id, "Invalid id");\n', '        require(operations.length > 0, "Length > 0");\n', '        delete _operations[id];\n', '        for(uint256 i = 0; i < operations.length; i++) {\n', '            FixedInflationOperation memory operation = operations[i];\n', '            require(operation.receivers.length > 0, "No receivers");\n', '            require(operation.receiversPercentages.length == (operation.receivers.length - 1), "Percentages must be less than receivers");\n', '            uint256 percentage = dfoFeePercentage + _entries[id].callerRewardPercentage;\n', '            for(uint256 j = 0; j < operation.receiversPercentages.length; j++) {\n', '                percentage += operation.receiversPercentages[j];\n', '                require(operation.receivers[j] != address(0), "Void receiver");\n', '            }\n', '            require(operation.receivers[operation.receivers.length - 1] != address(0), "Void receiver");\n', '            require(percentage < ONE_HUNDRED, "More than one hundred");\n', '            _operations[id].push(operations[i]);\n', '        }\n', '    }\n', '\n', '    function _remove(bytes32 id) private {\n', '        require(_entries[id].id == id, "Invalid id");\n', '        delete _entries[id];\n', '        delete _operations[id];\n', '    }\n', '\n', '    /** @dev clones the input contract address and returns the copied contract address.\n', '     * @param original address of the original contract.\n', '     * @return copy copied contract address.\n', '     */\n', '    function _clone(address original) private returns (address copy) {\n', '        assembly {\n', '            mstore(\n', '                0,\n', '                or(\n', '                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\n', '                    mul(original, 0x1000000000000000000)\n', '                )\n', '            )\n', '            copy := create(0, 0, 32)\n', '            switch extcodesize(copy)\n', '                case 0 {\n', '                    invalid()\n', '                }\n', '        }\n', '    }\n', '}']