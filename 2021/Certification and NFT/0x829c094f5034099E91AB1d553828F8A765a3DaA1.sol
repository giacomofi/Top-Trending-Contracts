['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// 13 February 2021\n', 'pragma solidity ^0.7.0;\n', '\n', '/// @notice An upgradable proxy that delegate calls to the underlying `implementation`\n', 'contract UpgradableProxy \n', '{\n', '    /// @notice The implementation to delegate call to\n', '    address public implementation;\n', '\n', '    constructor(address _implementation) {\n', '        implementation = _implementation;\n', '    }\n', '\n', '    /// @notice For any call to the contract (except for querying the `implementation` address) do a delegate\n', '    /// call.\n', '    fallback() external payable {\n', '        // CG: using this assembly instead of the delegate call of solidity allows us to return values in this \n', '        // fallback function.\n', '        assembly\n', '        {\n', '            let _target := sload(0)\n', '            calldatacopy(0x0, 0x0, calldatasize())\n', '            let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\n', '            returndatacopy(0x0, 0x0, returndatasize())\n', '            switch result case 0 {revert(0, returndatasize())} default {return (0, returndatasize())}\n', '        }\n', '    }\n', '}']