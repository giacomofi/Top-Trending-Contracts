['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-29\n', '*/\n', '\n', '// Dependency file: contracts/interfaces/IERC20.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/Ownable.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    // Let contract be functional for proxy contract initialization\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/libraries/Math.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '// a library for performing various math operations\n', '\n', 'library Math {\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/libraries/SafeMath.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '// Dependency file: contracts/libraries/Address.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/libraries/SafeERC20.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '// import "contracts/interfaces/IERC20.sol";\n', '// import "contracts/libraries/SafeMath.sol";\n', '// import "contracts/libraries/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IStakingRewards.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function getRewardForDuration() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // Mutative\n', '\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function getReward() external;\n', '\n', '    function exit() external;\n', '}\n', '\n', '// Dependency file: contracts/ReentrancyGuard.sol\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/staking/StakingRewardsV2.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '\n', "// import 'contracts/libraries/Math.sol';\n", "// import 'contracts/libraries/SafeMath.sol';\n", '// import "contracts/libraries/SafeERC20.sol";\n', '\n', "// import 'contracts/interfaces/IERC20.sol';\n", "// import 'contracts/interfaces/IStakingRewards.sol';\n", '\n', "// import 'contracts/ReentrancyGuard.sol';\n", '\n', 'contract StakingRewardsV2 is ReentrancyGuard, IStakingRewards {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    bool public initialized;\n', '    IERC20 public rewardsToken;\n', '    IERC20 public stakingToken;\n', '    address public rewardsDistributor;\n', '    address public externalController;\n', '\n', '    struct RewardEpoch {\n', '        uint id;\n', '        uint totalSupply;\n', '        uint startEpoch;\n', '        uint finishEpoch;\n', '        uint rewardRate;\n', '        uint lastUpdateTime;\n', '        uint rewardPerTokenStored;\n', '    }\n', '    // epoch\n', '    mapping(uint => RewardEpoch) public epochData;\n', '    mapping(uint => mapping(address => uint)) public userRewardPerTokenPaid;\n', '    mapping(uint => mapping(address => uint)) public rewards;\n', '    mapping(uint => mapping(address => uint)) private _balances;\n', '    mapping(address => uint) public lastAccountEpoch;\n', '    uint public currentEpochId;\n', '\n', '    function initialize(\n', '        address _externalController,\n', '        address _rewardsDistributor,\n', '        address _rewardsToken,\n', '        address _stakingToken\n', '        ) external {\n', '            require(initialized == false, "Contract already initialized.");\n', '            rewardsToken = IERC20(_rewardsToken);\n', '            stakingToken = IERC20(_stakingToken);\n', '            rewardsDistributor = _rewardsDistributor;\n', '            externalController = _externalController;\n', '    }\n', '\n', '    function _totalSupply(uint epoch) internal view returns (uint) {\n', '        return epochData[epoch].totalSupply;\n', '    }\n', '\n', '    function _balanceOf(uint epoch, address account) public view returns (uint) {\n', '        return _balances[epoch][account];\n', '    }\n', '\n', '    function _lastTimeRewardApplicable(uint epoch) internal view returns (uint) {\n', '        if (block.timestamp < epochData[epoch].startEpoch) {\n', '            return 0;\n', '        }\n', '        return Math.min(block.timestamp, epochData[epoch].finishEpoch);\n', '    }\n', '\n', '    function totalSupply() external override view returns (uint) {\n', '        return _totalSupply(currentEpochId);\n', '    }\n', '\n', '    function balanceOf(address account) external override view returns (uint) {\n', '        return _balanceOf(currentEpochId, account);\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public override view returns (uint) {\n', '        return _lastTimeRewardApplicable(currentEpochId);\n', '    }\n', '\n', '    function _rewardPerToken(uint _epoch) internal view returns (uint) {\n', '        RewardEpoch memory epoch = epochData[_epoch];\n', '        if (block.timestamp < epoch.startEpoch) {\n', '            return 0;\n', '        }\n', '        if (epoch.totalSupply == 0) {\n', '            return epoch.rewardPerTokenStored;\n', '        }\n', '        return\n', '            epoch.rewardPerTokenStored.add(\n', '                _lastTimeRewardApplicable(_epoch).sub(epoch.lastUpdateTime).mul(epoch.rewardRate).mul(1e18).div(epoch.totalSupply)\n', '            );\n', '    }\n', '\n', '    function rewardPerToken() public override view returns (uint) {\n', '        _rewardPerToken(currentEpochId);\n', '    }\n', '\n', '    function _earned(uint _epoch, address account) internal view returns (uint256) {\n', '        return _balances[_epoch][account].mul(_rewardPerToken(_epoch).sub(userRewardPerTokenPaid[_epoch][account])).div(1e18).add(rewards[_epoch][account]);\n', '    }\n', '\n', '    function earned(address account) public override view returns (uint256) {\n', '        return _earned(currentEpochId, account);\n', '    }\n', '\n', '    function getRewardForDuration() external override view returns (uint256) {\n', '        RewardEpoch memory epoch = epochData[currentEpochId];\n', '        return epoch.rewardRate.mul(epoch.finishEpoch - epoch.startEpoch);\n', '    }\n', '\n', '    function _stake(uint amount, bool withDepositTransfer) internal {\n', '        require(amount > 0, "Cannot stake 0");\n', '        require(lastAccountEpoch[msg.sender] == currentEpochId || lastAccountEpoch[msg.sender] == 0, "Account should update epoch to stake.");\n', '        epochData[currentEpochId].totalSupply = epochData[currentEpochId].totalSupply.add(amount);\n', '        _balances[currentEpochId][msg.sender] = _balances[currentEpochId][msg.sender].add(amount);\n', '        if(withDepositTransfer) {\n', '            stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        }\n', '        lastAccountEpoch[msg.sender] = currentEpochId;\n', '        emit Staked(msg.sender, amount, currentEpochId);\n', '    }\n', '\n', '    function stake(uint256 amount) nonReentrant updateReward(msg.sender) override external {\n', '        _stake(amount, true);\n', '    }\n', '\n', '    function withdraw(uint256 amount) override public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        uint lastEpoch = lastAccountEpoch[msg.sender];\n', '        epochData[lastEpoch].totalSupply = epochData[lastEpoch].totalSupply.sub(amount);\n', '        _balances[lastEpoch][msg.sender] = _balances[lastEpoch][msg.sender].sub(amount);\n', '        stakingToken.safeTransfer(msg.sender, amount);\n', '        emit Withdrawn(msg.sender, amount, lastEpoch);\n', '    }\n', '\n', '    function getReward() override public nonReentrant updateReward(msg.sender) {\n', '        uint lastEpoch = lastAccountEpoch[msg.sender];\n', '        uint reward = rewards[lastEpoch][msg.sender];\n', '        if (reward > 0) {\n', '            rewards[lastEpoch][msg.sender] = 0;\n', '            rewardsToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function exit() override external {\n', '        withdraw(_balances[lastAccountEpoch[msg.sender]][msg.sender]);\n', '        getReward();\n', '    }\n', '\n', '    function updateStakingEpoch() public {\n', '        uint lastEpochId = lastAccountEpoch[msg.sender];\n', '        _updateRewardForEpoch(msg.sender, lastEpochId);\n', '\n', '        // Remove record about staking on last account epoch\n', '        uint stakedAmount = _balances[lastEpochId][msg.sender];\n', '        _balances[lastEpochId][msg.sender] = 0;\n', '        epochData[lastEpochId].totalSupply = epochData[lastEpochId].totalSupply.sub(stakedAmount);\n', '        // Move collected rewards from last epoch to the current\n', '        rewards[currentEpochId][msg.sender] = rewards[lastEpochId][msg.sender];\n', '        rewards[lastEpochId][msg.sender] = 0;\n', '\n', '        // Restake\n', '        lastAccountEpoch[msg.sender] = currentEpochId;\n', '        _stake(stakedAmount, false);\n', '    }\n', '\n', '    function _updateRewardForEpoch(address account, uint epoch) internal {\n', '        epochData[epoch].rewardPerTokenStored = _rewardPerToken(epoch);\n', '        epochData[epoch].lastUpdateTime = _lastTimeRewardApplicable(epoch);\n', '        if (account != address(0)) {\n', '            rewards[epoch][account] = _earned(epoch, account);\n', '            userRewardPerTokenPaid[epoch][account] = epochData[epoch].rewardPerTokenStored;\n', '        }\n', '    }\n', '\n', '\n', '    modifier updateReward(address account) {\n', '        uint lastEpoch = lastAccountEpoch[account];\n', '        if(account == address(0)) {\n', '            lastEpoch = currentEpochId;\n', '        }\n', '        _updateRewardForEpoch(account, lastEpoch);\n', '        _;\n', '    }\n', '\n', '    function notifyRewardAmount(uint reward, uint startEpoch, uint finishEpoch) nonReentrant external {\n', '        require(msg.sender == rewardsDistributor, "Only reward distribured allowed.");\n', '        require(startEpoch >= block.timestamp, "Provided start date too late.");\n', '        require(finishEpoch > startEpoch, "Wrong end date epoch.");\n', '        require(reward > 0, "Wrong reward amount");\n', '        uint rewardsDuration = finishEpoch - startEpoch;\n', '\n', '        RewardEpoch memory newEpoch;\n', '        // Initialize new epoch\n', '        currentEpochId++;\n', '        newEpoch.id = currentEpochId;\n', '        newEpoch.startEpoch = startEpoch;\n', '        newEpoch.finishEpoch = finishEpoch;\n', '        newEpoch.rewardRate = reward.div(rewardsDuration);\n', '        // last update time will be right when epoch starts\n', '        newEpoch.lastUpdateTime = startEpoch;\n', '\n', '        epochData[newEpoch.id] = newEpoch;\n', '\n', '        emit EpochAdded(newEpoch.id, startEpoch, finishEpoch, reward);\n', '    }\n', '\n', '    function externalWithdraw() external {\n', '        require(msg.sender == externalController, "Only external controller allowed.");\n', '        rewardsToken.transfer(msg.sender, rewardsToken.balanceOf(msg.sender));\n', '    }\n', '\n', '    event EpochAdded(uint epochId, uint startEpoch, uint finishEpoch, uint256 reward);\n', '    event Staked(address indexed user, uint amount, uint epoch);\n', '    event Withdrawn(address indexed user, uint amount, uint epoch);\n', '    event RewardPaid(address indexed user, uint reward);\n', '\n', '\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IWSCustomProxy.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', 'interface IWSCustomProxy {\n', '    function initialize(address _implementation, address _admin, bytes calldata _data) external;\n', '    function upgradeStorageTo(address _proxy) external;\n', '    function upgradeStorageToAndCall(address _proxy, bytes calldata data) external payable;\n', '    function changeAdmin(address newAdmin) external;\n', '    function admin() external returns (address);\n', '    function implementation() external returns (address);\n', '}\n', '\n', '\n', '// Dependency file: contracts/proxy/WSCustomProxy.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', "// import 'contracts/interfaces/IWSCustomProxy.sol';\n", '\n', '/**\n', ' * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n', ' * be specified by overriding the virtual {_implementation} function.\n', ' * \n', ' * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n', ' * different contract through the {_delegate} function.\n', ' * \n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'abstract contract Proxy {\n', '    /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _delegate(address implementation) internal {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n', '     * and {_fallback} should delegate.\n', '     */\n', '    function _implementation() internal virtual returns (address);\n', '\n', '    /**\n', '     * @dev Delegates the current call to the address returned by `_implementation()`.\n', '     * \n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal {\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback () payable external {\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive () payable external {\n', '        _delegate(_implementation());\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n', ' * implementation address that can be changed. This address is stored in storage in the location specified by\n', " * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n", ' * implementation behind the proxy.\n', ' * \n', ' * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n', ' * {TransparentUpgradeableProxy}.\n', ' */\n', 'contract UpgradeableCustomProxy is Proxy {\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n', '     * \n', "     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor() public payable {\n', '        assert(_IMPLEMENTATION_STORAGE_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation_storage")) - 1));\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementationStorage);\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _IMPLEMENTATION_STORAGE_SLOT = 0x32966ed17b28d3117e87cb2c15a847a3829937667aa3286f41cf85a257e10460;\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _implementation() internal virtual override returns (address impl) {\n', '        bytes32 slot = _IMPLEMENTATION_STORAGE_SLOT;\n', '        address storage_address;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            storage_address := sload(slot)\n', '        }\n', '        impl = ImplementationGetter(storage_address).getImplementationAddress();\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the proxy to a new implementation.\n', '     * \n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeStorageTo(address newImplementationStorage) virtual internal {\n', '        _setImplementationStorage(newImplementationStorage);\n', '        emit Upgraded(newImplementationStorage);\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementationStorage(address newImplementationStorage) private {\n', '        bytes32 slot = _IMPLEMENTATION_STORAGE_SLOT;\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newImplementationStorage)\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev This contract implements a proxy that is upgradeable by an admin.\n', ' * \n', ' * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n', ' * clashing], which can potentially be used in an attack, this contract uses the\n', ' * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n', ' * things that go hand in hand:\n', ' * \n', ' * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n', ' * that call matches one of the admin functions exposed by the proxy itself.\n', ' * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n', ' * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n', ' * "admin cannot fallback to proxy target".\n', ' * \n', ' * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n', " * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n", ' * to sudden errors when trying to call a function from the proxy implementation.\n', ' * \n', ' * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n', ' * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\n', ' */\n', 'contract TransparentUpgradeableCustomProxy is UpgradeableCustomProxy, IWSCustomProxy {\n', '    /**\n', '     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n', '     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\n', '     */\n', '    constructor() public payable UpgradeableCustomProxy() {\n', '        require(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1), "Wrong admin slot");\n', '        _setAdmin(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the admin account has changed.\n', '     */\n', '    event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n', '     */\n', '    modifier ifAdmin() {\n', '        if (msg.sender == _admin()) {\n', '            _;\n', '        } else {\n', '            _fallback();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n', '     */\n', '    function admin() external override ifAdmin returns (address) {\n', '        return _admin();\n', '    }\n', '\n', '    function initialize(address _newImplementationStorage, address _admin, bytes calldata _data) external override ifAdmin {\n', '        _upgradeStorageTo(_newImplementationStorage);\n', '        _setAdmin(_admin);\n', '        if(_data.length > 0) {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success,) = _implementation().delegatecall(_data);\n', '            require(success);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current implementation.\n', '     */\n', '    function implementation() external override ifAdmin returns (address) {\n', '        return _implementation();\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the admin of the proxy.\n', '     * \n', '     * Emits an {AdminChanged} event.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n', '     */\n', '    function changeAdmin(address newAdmin) external override ifAdmin {\n', '        require(newAdmin != _admin(), "WSProxy: new admin is the same admin.");\n', '        emit AdminChanged(_admin(), newAdmin);\n', '        _setAdmin(newAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n', '     */\n', '    function upgradeStorageTo(address newImplementation) external override ifAdmin {\n', '        _upgradeStorageTo(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n', '     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n', '     * proxied contract.\n', '     * \n', '     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n', '     */\n', '    function upgradeStorageToAndCall(address newImplementation, bytes calldata data) external override payable ifAdmin {\n', '        _upgradeStorageTo(newImplementation);\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success,) = newImplementation.delegatecall(data);\n', '        require(success);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     */\n', '    function _admin() internal view returns (address adm) {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            adm := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 admin slot.\n', '     */\n', '    function _setAdmin(address newAdmin) private {\n', '        bytes32 slot = _ADMIN_SLOT;\n', '        // remove this protection\n', '        // require(newAdmin != address(0), "WSProxy: Can\'t set admin to zero address.");\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            sstore(slot, newAdmin)\n', '        }\n', '    }\n', '}\n', '\n', 'interface ImplementationGetter {\n', '    function getImplementationAddress() external returns(address);\n', '}\n', '\n', '// Dependency file: contracts/proxy/WSStakingRewardsProxy.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '// import "contracts/proxy/WSCustomProxy.sol";\n', '\n', 'contract StakingProxy is TransparentUpgradeableCustomProxy {\n', '    constructor() public payable TransparentUpgradeableCustomProxy() {\n', '    }\n', '}\n', '\n', '// Root file: contracts/staking/StakingRewardsFactoryV2.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', "// import 'contracts/interfaces/IERC20.sol';\n", "// import 'contracts/Ownable.sol';\n", '\n', "// import 'contracts/staking/StakingRewardsV2.sol';\n", "// import 'contracts/proxy/WSStakingRewardsProxy.sol';\n", '\n', 'contract StakingRewardsFactoryV2 is Ownable {\n', '    uint public SEALED_TIME = 16 days;\n', '\n', '    bool public initialized;\n', '    address public implementationGetter;\n', '    address public externalController;\n', '    address public rewardsToken;\n', '    address[] public stakingTokens;\n', '    mapping(address => address payable) public stakingRewardsByStakingToken;\n', '\n', '    struct Epoch {\n', '        uint id;\n', '        uint startEpoch;\n', '        uint finishEpoch;\n', '        address[] stakingRewards;\n', '        uint[] rewards;\n', '        // could be used later\n', '        uint sealedTimestamp;\n', '        bool executed;\n', '    }\n', '    mapping(uint => Epoch) public stakingEpoch;\n', '    uint public currentEpochId;\n', '    uint public upcomingEpochId;\n', '\n', '    function initialize(address _rewardsToken, address _externalController, address _implementationGetter) external {\n', '        require(initialized == false, "StakingRewardsFactoryV2::initialize:Contract already initialized.");\n', '        rewardsToken = _rewardsToken;\n', '        externalController = _externalController;\n', '        implementationGetter = _implementationGetter;\n', '        super._transferOwnership(msg.sender);\n', '        initialized = true;\n', '    }\n', '\n', '    function setupNewEpoch(address[] memory stakingTokensEpoch, uint[] memory rewards, uint startEpoch, uint finishEpoch) onlyOwner external {\n', '        require(stakingTokensEpoch.length == rewards.length, "StakingRewardsFactoryV2::setupNewEpoch:Array length should be equal.");\n', '        require(stakingTokensEpoch.length > 0, "StakingRewardsFactoryV2::setupNewEpoch:New epoch should not be empty.");\n', '        Epoch storage newEpoch = stakingEpoch[currentEpochId + 1];\n', '        for(uint i = 0; i < stakingTokensEpoch.length; i++) {\n', '            address stakingReward = stakingRewardsByStakingToken[stakingTokensEpoch[i]];\n', '            require(stakingReward != address(0), "StakingRewardsFactoryV2::setupNewEpoch:Wrong staking reward address");\n', '            require(rewards[i] != 0, "StakingRewardsFactoryV2::setupNewEpoch:Wrong staking reward amount");\n', '            newEpoch.stakingRewards.push(stakingReward);\n', '            newEpoch.rewards.push(rewards[i]);\n', '        }\n', '        newEpoch.startEpoch = startEpoch;\n', '        newEpoch.finishEpoch = finishEpoch;\n', '        newEpoch.id = currentEpochId + 1;\n', '    }\n', '\n', '    function cancelNewEpoch() onlyOwner external {\n', '        delete stakingEpoch[currentEpochId + 1];\n', '    }\n', '\n', '    function executeNewEpoch() onlyOwner external {\n', '        currentEpochId++;\n', '        Epoch memory newEpoch = stakingEpoch[currentEpochId];\n', '        require(newEpoch.id == currentEpochId, "StakingRewardsFactoryV2::notifyRewardAmount:New epoch should be configured before execution.");\n', '        assert(newEpoch.executed == false);\n', '        for(uint i = 0; i < newEpoch.stakingRewards.length; i++) {\n', '            require(\n', '                IERC20(rewardsToken).transfer(newEpoch.stakingRewards[i], newEpoch.rewards[i]),\n', "                'StakingRewardsFactoryV2::notifyRewardAmount: transfer failed'\n", '            );\n', '            StakingRewardsV2(newEpoch.stakingRewards[i]).notifyRewardAmount(newEpoch.rewards[i], newEpoch.startEpoch, newEpoch.finishEpoch);\n', '        }\n', '        stakingEpoch[currentEpochId].executed = true;\n', '    }\n', '\n', '    function deploy(address stakingToken) onlyOwner external {\n', "        require(stakingRewardsByStakingToken[stakingToken] == address(0), 'StakingRewardsFactoryV2::deploy: already deployed');\n", '        stakingRewardsByStakingToken[stakingToken] = address(new StakingProxy());\n', '        // We set admin address to zero, because we can change implementation with implementationGetter\n', "        StakingProxy(stakingRewardsByStakingToken[stakingToken]).initialize(implementationGetter, address(0), '');\n", '        StakingRewardsV2(stakingRewardsByStakingToken[stakingToken]).initialize(externalController, address(this), rewardsToken, stakingToken);\n', '        stakingTokens.push(stakingToken);\n', '    }\n', '\n', '}']