['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', '// File: contracts\\modules\\SafeMath.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'SafeMath: addition overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'SafeMath: substraction underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');\n", '    }\n', '}\n', '\n', '// File: contracts\\modules\\SafeInt256.sol\n', '\n', 'pragma solidity =0.5.16;\n', 'library SafeInt256 {\n', '    function add(int256 x, int256 y) internal pure returns (int256 z) {\n', "        require(((z = x + y) >= x) == (y >= 0), 'SafeInt256: addition overflow');\n", '    }\n', '\n', '    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n', "        require(((z = x - y) <= x) == (y >= 0), 'SafeInt256: substraction underflow');\n", '    }\n', '\n', '    function mul(int256 x, int256 y) internal pure returns (int256 z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'SafeInt256: multiplication overflow');\n", '    }\n', '}\n', '\n', '// File: contracts\\modules\\Ownable.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\Halt.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract Halt is Ownable {\n', '    \n', '    bool private halted = false; \n', '    \n', '    modifier notHalted() {\n', '        require(!halted,"This contract is halted");\n', '        _;\n', '    }\n', '\n', '    modifier isHalted() {\n', '        require(halted,"This contract is not halted");\n', '        _;\n', '    }\n', '    \n', '    /// @notice function Emergency situation that requires \n', '    /// @notice contribution period to stop or not.\n', '    function setHalt(bool halt) \n', '        public \n', '        onlyOwner\n', '    {\n', '        halted = halt;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\whiteList.sol\n', '\n', 'pragma solidity =0.5.16;\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint32.\n', '     */\n', 'library whiteListUint32 {\n', '    /**\n', '     * @dev add uint32 into white list.\n', '     * @param whiteList the storage whiteList.\n', '     * @param temp input value\n', '     */\n', '\n', '    function addWhiteListUint32(uint32[] storage whiteList,uint32 temp) internal{\n', '        if (!isEligibleUint32(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    /**\n', '     * @dev remove uint32 from whitelist.\n', '     */\n', '    function removeWhiteListUint32(uint32[] storage whiteList,uint32 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint32(uint32[] memory whiteList,uint32 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible uint256.\n', '     */\n', 'library whiteListUint256 {\n', '    // add whiteList\n', '    function addWhiteListUint256(uint256[] storage whiteList,uint256 temp) internal{\n', '        if (!isEligibleUint256(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListUint256(uint256[] storage whiteList,uint256 temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexUint256(uint256[] memory whiteList,uint256 temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '    /**\n', '     * @dev Implementation of a whitelist which filters a eligible address.\n', '     */\n', 'library whiteListAddress {\n', '    // add whiteList\n', '    function addWhiteListAddress(address[] storage whiteList,address temp) internal{\n', '        if (!isEligibleAddress(whiteList,temp)){\n', '            whiteList.push(temp);\n', '        }\n', '    }\n', '    function removeWhiteListAddress(address[] storage whiteList,address temp)internal returns (bool) {\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        if (i<len){\n', '            if (i!=len-1) {\n', '                whiteList[i] = whiteList[len-1];\n', '            }\n', '            whiteList.length--;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isEligibleAddress(address[] memory whiteList,address temp) internal pure returns (bool){\n', '        uint256 len = whiteList.length;\n', '        for (uint256 i=0;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '    function _getEligibleIndexAddress(address[] memory whiteList,address temp) internal pure returns (uint256){\n', '        uint256 len = whiteList.length;\n', '        uint256 i=0;\n', '        for (;i<len;i++){\n', '            if (whiteList[i] == temp)\n', '                break;\n', '        }\n', '        return i;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\AddressWhiteList.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '    /**\n', '     * @dev Implementation of a whitelist filters a eligible address.\n', '     */\n', 'contract AddressWhiteList is Halt {\n', '\n', '    using whiteListAddress for address[];\n', '    uint256 constant internal allPermission = 0xffffffff;\n', '    uint256 constant internal allowBuyOptions = 1;\n', '    uint256 constant internal allowSellOptions = 1<<1;\n', '    uint256 constant internal allowExerciseOptions = 1<<2;\n', '    uint256 constant internal allowAddCollateral = 1<<3;\n', '    uint256 constant internal allowRedeemCollateral = 1<<4;\n', '    // The eligible adress list\n', '    address[] internal whiteList;\n', '    mapping(address => uint256) internal addressPermission;\n', '    /**\n', '     * @dev Implementation of add an eligible address into the whitelist.\n', '     * @param addAddress new eligible address.\n', '     */\n', '    function addWhiteList(address addAddress)public onlyOwner{\n', '        whiteList.addWhiteListAddress(addAddress);\n', '        addressPermission[addAddress] = allPermission;\n', '    }\n', '    function modifyPermission(address addAddress,uint256 permission)public onlyOwner{\n', '        addressPermission[addAddress] = permission;\n', '    }\n', '    /**\n', '     * @dev Implementation of revoke an invalid address from the whitelist.\n', '     * @param removeAddress revoked address.\n', '     */\n', '    function removeWhiteList(address removeAddress)public onlyOwner returns (bool){\n', '        addressPermission[removeAddress] = 0;\n', '        return whiteList.removeWhiteListAddress(removeAddress);\n', '    }\n', '    /**\n', '     * @dev Implementation of getting the eligible whitelist.\n', '     */\n', '    function getWhiteList()public view returns (address[] memory){\n', '        return whiteList;\n', '    }\n', '    /**\n', '     * @dev Implementation of testing whether the input address is eligible.\n', '     * @param tmpAddress input address for testing.\n', '     */    \n', '    function isEligibleAddress(address tmpAddress) public view returns (bool){\n', '        return whiteList.isEligibleAddress(tmpAddress);\n', '    }\n', '    function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){\n', '        return  (addressPermission[tmpAddress]&state) == state;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\ReentrancyGuard.sol\n', '\n', 'pragma solidity =0.5.16;\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\OptionsPool\\IOptionsPool.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IOptionsPool {\n', '//    function getOptionBalances(address user) external view returns(uint256[]);\n', '\n', '    function getExpirationList()external view returns (uint32[] memory);\n', '    function createOptions(address from,address settlement,uint256 type_ly_expiration,\n', '        uint128 strikePrice,uint128 underlyingPrice,uint128 amount,uint128 settlePrice) external returns(uint256);\n', '    function setSharedState(uint256 newFirstOption,int256[] calldata latestNetWorth,address[] calldata whiteList) external;\n', '    function getAllTotalOccupiedCollateral() external view returns (uint256,uint256);\n', '    function getCallTotalOccupiedCollateral() external view returns (uint256);\n', '    function getPutTotalOccupiedCollateral() external view returns (uint256);\n', '    function getTotalOccupiedCollateral() external view returns (uint256);\n', '//    function buyOptionCheck(uint32 expiration,uint32 underlying)external view;\n', '    function burnOptions(address from,uint256 id,uint256 amount,uint256 optionPrice)external;\n', '    function getOptionsById(uint256 optionsId)external view returns(uint256,address,uint8,uint32,uint256,uint256,uint256);\n', '    function getExerciseWorth(uint256 optionsId,uint256 amount)external view returns(uint256);\n', '    function calculatePhaseOptionsFall(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList) external view returns(int256[] memory);\n', '    function getOptionInfoLength()external view returns (uint256);\n', '    function getNetWrothCalInfo(address[] calldata whiteList)external view returns(uint256,int256[] memory);\n', '    function calRangeSharedPayment(uint256 lastOption,uint256 begin,uint256 end,address[] calldata whiteList)external view returns(int256[] memory,uint256[] memory,uint256);\n', '    function getNetWrothLatestWorth(address settlement)external view returns(int256);\n', '    function getBurnedFullPay(uint256 optionID,uint256 amount) external view returns(address,uint256);\n', '\n', '}\n', 'contract ImportOptionsPool is Ownable{\n', '    IOptionsPool internal _optionsPool;\n', '    function getOptionsPoolAddress() public view returns(address){\n', '        return address(_optionsPool);\n', '    }\n', '    function setOptionsPoolAddress(address optionsPool)public onlyOwner{\n', '        _optionsPool = IOptionsPool(optionsPool);\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\IFNXOracle.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IFNXOracle {\n', '    /**\n', '  * @notice retrieves price of an asset\n', '  * @dev function to get price for an asset\n', '  * @param asset Asset for which to get the price\n', '  * @return uint mantissa of asset price (scaled by 1e8) or zero if unset or contract paused\n', '  */\n', '    function getPrice(address asset) external view returns (uint256);\n', '    function getUnderlyingPrice(uint256 cToken) external view returns (uint256);\n', '    function getPrices(uint256[] calldata assets) external view returns (uint256[]memory);\n', '    function getAssetAndUnderlyingPrice(address asset,uint256 underlying) external view returns (uint256,uint256);\n', '//    function getSellOptionsPrice(address oToken) external view returns (uint256);\n', '//    function getBuyOptionsPrice(address oToken) external view returns (uint256);\n', '}\n', 'contract ImportOracle is Ownable{\n', '    IFNXOracle internal _oracle;\n', '    function oraclegetPrices(uint256[] memory assets) internal view returns (uint256[]memory){\n', '        uint256[] memory prices = _oracle.getPrices(assets);\n', '        uint256 len = assets.length;\n', '        for (uint i=0;i<len;i++){\n', '        require(prices[i] >= 100 && prices[i] <= 1e30);\n', '        }\n', '        return prices;\n', '    }\n', '    function oraclePrice(address asset) internal view returns (uint256){\n', '        uint256 price = _oracle.getPrice(asset);\n', '        require(price >= 100 && price <= 1e30);\n', '        return price;\n', '    }\n', '    function oracleUnderlyingPrice(uint256 cToken) internal view returns (uint256){\n', '        uint256 price = _oracle.getUnderlyingPrice(cToken);\n', '        require(price >= 100 && price <= 1e30);\n', '        return price;\n', '    }\n', '    function oracleAssetAndUnderlyingPrice(address asset,uint256 cToken) internal view returns (uint256,uint256){\n', '        (uint256 price1,uint256 price2) = _oracle.getAssetAndUnderlyingPrice(asset,cToken);\n', '        require(price1 >= 100 && price1 <= 1e30);\n', '        require(price2 >= 100 && price2 <= 1e30);\n', '        return (price1,price2);\n', '    }\n', '    function getOracleAddress() public view returns(address){\n', '        return address(_oracle);\n', '    }\n', '    function setOracleAddress(address oracle)public onlyOwner{\n', '        _oracle = IFNXOracle(oracle);\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\IOptionsPrice.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IOptionsPrice {\n', '    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)external view returns (uint256);\n', '    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\n', '                uint256 ivNumerator,uint8 optType)external view returns (uint256);\n', '    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) external view returns (uint256);\n', '}\n', 'contract ImportOptionsPrice is Ownable{\n', '    IOptionsPrice internal _optionsPrice;\n', '    function getOptionsPriceAddress() public view returns(address){\n', '        return address(_optionsPrice);\n', '    }\n', '    function setOptionsPriceAddress(address optionsPrice)public onlyOwner{\n', '        _optionsPrice = IOptionsPrice(optionsPrice);\n', '    }\n', '}\n', '\n', '// File: contracts\\CollateralPool\\ICollateralPool.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface ICollateralPool {\n', '    function getFeeRateAll()external view returns (uint32[] memory);\n', '    function getUserPayingUsd(address user)external view returns (uint256);\n', '    function getUserInputCollateral(address user,address collateral)external view returns (uint256);\n', '    //function getNetWorthBalance(address collateral)external view returns (int256);\n', '    function getCollateralBalance(address collateral)external view returns (uint256);\n', '\n', '    //add\n', '    function addUserPayingUsd(address user,uint256 amount)external;\n', '    function addUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function addNetWorthBalance(address collateral,int256 amount)external;\n', '    function addCollateralBalance(address collateral,uint256 amount)external;\n', '    //sub\n', '    function subUserPayingUsd(address user,uint256 amount)external;\n', '    function subUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function subNetWorthBalance(address collateral,int256 amount)external;\n', '    function subCollateralBalance(address collateral,uint256 amount)external;\n', '        //set\n', '    function setUserPayingUsd(address user,uint256 amount)external;\n', '    function setUserInputCollateral(address user,address collateral,uint256 amount)external;\n', '    function setNetWorthBalance(address collateral,int256 amount)external;\n', '    function setCollateralBalance(address collateral,uint256 amount)external;\n', '    function transferPaybackAndFee(address recieptor,address settlement,uint256 payback,uint256 feeType)external;\n', '\n', '    function buyOptionsPayfor(address payable recieptor,address settlement,uint256 settlementAmount,uint256 allPay)external;\n', '    function transferPayback(address recieptor,address settlement,uint256 payback)external;\n', '    function transferPaybackBalances(address account,uint256 redeemWorth,address[] calldata tmpWhiteList,uint256[] calldata colBalances,\n', '        uint256[] calldata PremiumBalances,uint256[] calldata prices)external;\n', '    function getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] calldata tmpWhiteList,\n', '        uint256[] calldata _RealBalances,uint256[] calldata prices) external view returns(uint256[] memory,uint256[] memory);\n', '    function addTransactionFee(address collateral,uint256 amount,uint256 feeType)external returns (uint256);\n', '\n', '    function getAllRealBalance(address[] calldata whiteList)external view returns(int256[] memory);\n', '    function getRealBalance(address settlement)external view returns(int256);\n', '    function getNetWorthBalance(address settlement)external view returns(uint256);\n', '}\n', 'contract ImportCollateralPool is Ownable{\n', '    ICollateralPool internal _collateralPool;\n', '    function getCollateralPoolAddress() public view returns(address){\n', '        return address(_collateralPool);\n', '    }\n', '    function setCollateralPoolAddress(address collateralPool)public onlyOwner{\n', '        _collateralPool = ICollateralPool(collateralPool);\n', '    }\n', '}\n', '\n', '// File: contracts\\FPTCoin\\IFPTCoin.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', 'interface IFPTCoin {\n', '    function lockedBalanceOf(address account) external view returns (uint256);\n', '    function lockedWorthOf(address account) external view returns (uint256);\n', '    function getLockedBalance(address account) external view returns (uint256,uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function mint(address account, uint256 amount) external;\n', '    function burn(address account, uint256 amount) external;\n', '    function addlockBalance(address account, uint256 amount,uint256 lockedWorth)external; \n', '    function getTotalLockedWorth() external view returns (uint256);\n', '    function addMinerBalance(address account,uint256 amount) external;\n', '    function redeemLockedCollateral(address account,uint256 tokenAmount,uint256 leftCollateral)external returns (uint256,uint256);\n', '}\n', 'contract ImportIFPTCoin is Ownable{\n', '    IFPTCoin internal _FPTCoin;\n', '    function getFPTCoinAddress() public view returns(address){\n', '        return address(_FPTCoin);\n', '    }\n', '    function setFPTCoinAddress(address FPTCoinAddr)public onlyOwner{\n', '        _FPTCoin = IFPTCoin(FPTCoinAddr);\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\ImputRange.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', 'contract ImputRange is Ownable {\n', '    \n', '    //The maximum input amount limit.\n', '    uint256 private maxAmount = 1e30;\n', '    //The minimum input amount limit.\n', '    uint256 private minAmount = 1e2;\n', '    \n', '    modifier InRange(uint256 amount) {\n', '        require(maxAmount>=amount && minAmount<=amount,"input amount is out of input amount range");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Determine whether the input amount is within the valid range\n', '     * @param Amount Test value which is user input\n', '     */\n', '    function isInputAmountInRange(uint256 Amount)public view returns (bool){\n', '        return(maxAmount>=Amount && minAmount<=Amount);\n', '    }\n', '    /*\n', '    function isInputAmountSmaller(uint256 Amount)public view returns (bool){\n', '        return maxAmount>=amount;\n', '    }\n', '    function isInputAmountLarger(uint256 Amount)public view returns (bool){\n', '        return minAmount<=amount;\n', '    }\n', '    */\n', '    modifier Smaller(uint256 amount) {\n', '        require(maxAmount>=amount,"input amount is larger than maximium");\n', '        _;\n', '    }\n', '    modifier Larger(uint256 amount) {\n', '        require(minAmount<=amount,"input amount is smaller than maximium");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev get the valid range of input amount\n', '     */\n', '    function getInputAmountRange() public view returns(uint256,uint256) {\n', '        return (minAmount,maxAmount);\n', '    }\n', '    /**\n', '     * @dev set the valid range of input amount\n', '     * @param _minAmount the minimum input amount limit\n', '     * @param _maxAmount the maximum input amount limit\n', '     */\n', '    function setInputAmountRange(uint256 _minAmount,uint256 _maxAmount) public onlyOwner{\n', '        minAmount = _minAmount;\n', '        maxAmount = _maxAmount;\n', '    }        \n', '}\n', '\n', '// File: contracts\\modules\\Allowances.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * each operator can be granted exclusive access to specific functions.\n', ' *\n', ' */\n', 'contract Allowances is Ownable {\n', '    mapping (address => uint256) internal allowances;\n', '    bool internal bValid = false;\n', '    /**\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public onlyOwner{\n', '        allowances[spender] = amount;\n', '    }\n', '    function allowance(address spender) public view returns (uint256) {\n', '        return allowances[spender];\n', '    }\n', '    function setValid(bool _bValid) public onlyOwner{\n', '        bValid = _bValid;\n', '    }\n', '    function checkAllowance(address spender, uint256 amount) public view returns(bool){\n', '        return (!bValid) || (allowances[spender] >= amount);\n', '    }\n', '    modifier sufficientAllowance(address spender, uint256 amount){\n', '        require((!bValid) || (allowances[spender] >= amount),"Allowances : user\'s allowance is unsufficient!");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity =0.5.16;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\OptionsManager\\ManagerData.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title collateral calculate module\n', ' * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\n', ' *\n', ' */\n', 'contract ManagerData is ReentrancyGuard,ImputRange,AddressWhiteList,Allowances,ImportIFPTCoin,\n', '                ImportOracle,ImportOptionsPool,ImportCollateralPool,ImportOptionsPrice {\n', '    // The minimum collateral rate for options. This value is thousandths.\n', '    mapping (address=>uint256) collateralRate;\n', '//    uint256 private collateralRate = 5000;\n', '    /**\n', '     * @dev Emitted when `from` added `amount` collateral and minted `tokenAmount` FPTCoin.\n', '     */\n', '    event AddCollateral(address indexed from,address indexed collateral,uint256 amount,uint256 tokenAmount);\n', '    /**\n', '     * @dev Emitted when `from` redeemed `allRedeem` collateral.\n', '     */\n', '    event RedeemCollateral(address indexed from,address collateral,uint256 allRedeem);\n', '    event DebugEvent(uint256 id,uint256 value1,uint256 value2);\n', '        /**\n', '    * @dev input price valid range rate, thousandths.\n', '    * the input price must greater than current price * minPriceRate /1000\n', '    *       and less  than current price * maxPriceRate /1000 \n', '    * maxPriceRate is the maximum limit of the price valid range rate\n', '    * maxPriceRate is the minimum limit of the price valid range rage\n', '    */   \n', '    uint256 internal maxPriceRate = 1500;\n', '    uint256 internal minPriceRate = 500;\n', '    /**\n', '     * @dev Emitted when `from` buy `optionAmount` option and create new option.\n', "     * @param from user's account\n", "     * @param settlement user's input settlement paid for buy new option.\n", "     * @param optionPrice option's paid price\n", '     * @param settlementAmount settement cost\n', '     * @param optionAmount mint option token amount.\n', '     */  \n', '    event BuyOption(address indexed from,address indexed settlement,uint256 optionPrice,uint256 settlementAmount,uint256 optionAmount);\n', '    /**\n', '     * @dev Emitted when `from` sell `amount` option whose id is `optionId` and received sellValue,priced in usd.\n', '     */  \n', '    event SellOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\n', '    /**\n', '     * @dev Emitted when `from` exercise `amount` option whose id is `optionId` and received sellValue,priced in usd.\n', '     */  \n', '    event ExerciseOption(address indexed from,uint256 indexed optionId,uint256 amount,uint256 sellValue);\n', '}\n', '\n', '// File: contracts\\modules\\Address.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call.value(value )(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\ERC20\\safeErc20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\OptionsManager\\CollateralCal.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title collateral calculate module\n', ' * @dev A smart-contract which has operations of collateral and methods of calculate collateral occupation.\n', ' *\n', ' */\n', 'contract CollateralCal is ManagerData {\n', '    using SafeMath for uint256;\n', '    using SafeInt256 for int256;\n', '\n', '    /**\n', '     * @dev  The foundation owner want to set the minimum collateral occupation rate.\n', '     * @param collateral collateral coin address\n', '     * @param colRate The thousandths of the minimum collateral occupation rate.\n', '     */\n', '    function setCollateralRate(address collateral,uint256 colRate) public onlyOwner {\n', '        addWhiteList(collateral);\n', '        collateralRate[collateral] = colRate;\n', '//        collateralRate = colRate;\n', '\n', '    }\n', '    /**\n', '     * @dev Get the minimum collateral occupation rate.\n', '     */\n', '    function getCollateralRate(address collateral)public view returns (uint256) {\n', '        return collateralRate[collateral];\n', '    }\n', '    /**\n', "     * @dev Retrieve user's cost of collateral, priced in USD.\n", '     * @param user input retrieved account \n', '     */\n', '    function getUserPayingUsd(address user)public view returns (uint256){\n', '        return _collateralPool.getUserPayingUsd(user);\n', '        //userCollateralPaying[user];\n', '    }\n', '    /**\n', "     * @dev Retrieve user's amount of the specified collateral.\n", '     * @param user input retrieved account \n', '     * @param collateral input retrieved collateral coin address \n', '     */\n', '    function userInputCollateral(address user,address collateral)public view returns (uint256){\n', '        return _collateralPool.getUserInputCollateral(user,collateral);\n', '        //return userInputCollateral[user][collateral];\n', '    }\n', '\n', '    /**\n', "     * @dev Retrieve user's current total worth, priced in USD.\n", '     * @param account input retrieve account\n', '     */\n', '    function getUserTotalWorth(address account)public view returns (uint256){\n', '        return getTokenNetworth().mul(_FPTCoin.balanceOf(account)).add(_FPTCoin.lockedWorthOf(account));\n', '    }\n', '    /**\n', "     * @dev Retrieve FPTCoin's net worth, priced in USD.\n", '     */\n', '    function getTokenNetworth() public view returns (uint256){\n', '        uint256 _totalSupply = _FPTCoin.totalSupply();\n', '        if (_totalSupply == 0){\n', '            return 1e8;\n', '        }\n', '        uint256 netWorth = getUnlockedCollateral()/_totalSupply;\n', '        return netWorth>100 ? netWorth : 100;\n', '    }\n', '    /**\n', '     * @dev Deposit collateral in this pool from user.\n', '     * @param collateral The collateral coin address which is in whitelist.\n', '     * @param amount the amount of collateral to deposit.\n', '     */\n', '    function addCollateral(address collateral,uint256 amount) nonReentrant notHalted  public payable {\n', '        amount = getPayableAmount(collateral,amount);\n', '        uint256 fee = _collateralPool.addTransactionFee(collateral,amount,3);\n', '        amount = amount-fee;\n', '        uint256 price = oraclePrice(collateral);\n', '        uint256 userPaying = price*amount;\n', '        require(checkAllowance(msg.sender,(_collateralPool.getUserPayingUsd(msg.sender)+userPaying)/1e8),\n', '            "Allowances : user\'s allowance is unsufficient!");\n', '        uint256 mintAmount = userPaying/getTokenNetworth();\n', '        _collateralPool.addUserPayingUsd(msg.sender,userPaying);\n', '        _collateralPool.addUserInputCollateral(msg.sender,collateral,amount);\n', '        emit AddCollateral(msg.sender,collateral,amount,mintAmount);\n', '        _FPTCoin.mint(msg.sender,mintAmount);\n', '    }\n', '    /**\n', '     * @dev redeem collateral from this pool, user can input the prioritized collateral,he will get this coin,\n', '     * if this coin is unsufficient, he will get others collateral which in whitelist.\n', '     * @param tokenAmount the amount of FPTCoin want to redeem.\n', '     * @param collateral The prioritized collateral coin address.\n', '     */\n', '    function redeemCollateral(uint256 tokenAmount,address collateral) nonReentrant notHalted InRange(tokenAmount) public {\n', '        require(checkAddressPermission(collateral,allowRedeemCollateral) , "settlement is unsupported token");\n', '        uint256 lockedAmount = _FPTCoin.lockedBalanceOf(msg.sender);\n', '        require(_FPTCoin.balanceOf(msg.sender)+lockedAmount>=tokenAmount,"SCoin balance is insufficient!");\n', '        uint256 userTotalWorth = getUserTotalWorth(msg.sender);\n', '        uint256 leftCollateral = getLeftCollateral();\n', '        (uint256 burnAmount,uint256 redeemWorth) = _FPTCoin.redeemLockedCollateral(msg.sender,tokenAmount,leftCollateral);\n', '        tokenAmount -= burnAmount;\n', '        burnAmount = 0;\n', '        if (tokenAmount > 0){\n', '            leftCollateral -= redeemWorth;\n', '            \n', '            if (lockedAmount > 0){\n', '                tokenAmount = tokenAmount > lockedAmount ? tokenAmount - lockedAmount : 0;\n', '            }\n', '            (uint256 newRedeem,uint256 newWorth) = _redeemCollateral(tokenAmount,leftCollateral);\n', '            if(newRedeem>0){\n', '                burnAmount = newRedeem;\n', '                redeemWorth += newWorth;\n', '            }\n', '        }\n', '        _redeemCollateralWorth(collateral,redeemWorth,userTotalWorth);\n', '        if (burnAmount>0){\n', '            _FPTCoin.burn(msg.sender, burnAmount);\n', '        }\n', '    }\n', '    /**\n', '     * @dev The subfunction of redeem collateral.\n', '     * @param leftAmount the left amount of FPTCoin want to redeem.\n', '     * @param leftCollateral The left collateral which can be redeemed, priced in USD.\n', '     */\n', '    function _redeemCollateral(uint256 leftAmount,uint256 leftCollateral)internal returns (uint256,uint256){\n', '        uint256 tokenNetWorth = getTokenNetworth();\n', '        uint256 leftWorth = leftAmount*tokenNetWorth;        \n', '        if (leftWorth > leftCollateral){\n', '            uint256 newRedeem = leftCollateral/tokenNetWorth;\n', '            uint256 newWorth = newRedeem*tokenNetWorth;\n', '            uint256 locked = leftAmount - newRedeem;\n', '            _FPTCoin.addlockBalance(msg.sender,locked,locked*tokenNetWorth);\n', '            return (newRedeem,newWorth);\n', '        }\n', '        return (leftAmount,leftWorth);\n', '    }\n', '    /**\n', '     * @dev The auxiliary function of collateral calculation.\n', '     * @param collateral the prioritized collateral which user input.\n', '     * @return the collateral whitelist, in which the prioritized collateral is at the front.\n', '     */\n', '    function getTempWhiteList(address collateral) internal view returns (address[] memory) {\n', '        address[] memory tmpWhiteList = whiteList;\n', '        uint256 index = whiteListAddress._getEligibleIndexAddress(tmpWhiteList,collateral);\n', '        if (index != 0){\n', '            tmpWhiteList[index] = tmpWhiteList[0];\n', '            tmpWhiteList[0] = collateral;\n', '        }\n', '        return tmpWhiteList;\n', '    }\n', '    /**\n', '     * @dev The subfunction of redeem collateral. Calculate all redeem count and tranfer.\n', '     * @param collateral the prioritized collateral which user input.\n', '     * @param redeemWorth user redeem worth, priced in USD.\n', '     * @param userTotalWorth user total worth, priced in USD.\n', '     */\n', '    function _redeemCollateralWorth(address collateral,uint256 redeemWorth,uint256 userTotalWorth) internal {\n', '        if (redeemWorth == 0){\n', '            return;\n', '        }\n', '        emit RedeemCollateral(msg.sender,collateral,redeemWorth);\n', '        address[] memory tmpWhiteList = getTempWhiteList(collateral);\n', '        (uint256[] memory colBalances,uint256[] memory PremiumBalances,uint256[] memory prices) = \n', '                _getCollateralAndPremiumBalances(msg.sender,userTotalWorth,tmpWhiteList);\n', '        _collateralPool.transferPaybackBalances(msg.sender,redeemWorth,tmpWhiteList,colBalances,\n', '                PremiumBalances,prices);\n', '    }\n', '    /**\n', "     * @dev Retrieve user's collateral worth in all collateral coin. \n", '     * If user want to redeem all his collateral,and the vacant collateral is sufficient,\n', '     * He can redeem each collateral amount in return list.\n', "     * @param account the retrieve user's account;\n", '     */\n', '    function calCollateralWorth(address account)public view returns(uint256[] memory){\n', '        uint256 worth = getUserTotalWorth(account);\n', '        (uint256[] memory colBalances,uint256[] memory PremiumBalances,) = \n', '        _getCollateralAndPremiumBalances(account,worth,whiteList);\n', '        uint256 whiteLen = whiteList.length;\n', '        for (uint256 i=0; i<whiteLen;i++){\n', '            colBalances[i] = colBalances[i].add(PremiumBalances[i]);\n', '        }\n', '        return colBalances;\n', '    }\n', '    /**\n', '     * @dev The auxiliary function for redeem collateral calculation. \n', "     * @param account the retrieve user's account;\n", "     * @param userTotalWorth user's total worth, priced in USD.\n", '     * @param tmpWhiteList the collateral white list.\n', "     * @return user's total worth in each collateral, priced in USD.\n", '     */\n', '    function _getCollateralAndPremiumBalances(address account,uint256 userTotalWorth,address[] memory tmpWhiteList) internal view returns(uint256[] memory,uint256[] memory,uint256[] memory){\n', '        uint256[] memory prices = new uint256[](tmpWhiteList.length);\n', '        uint256[] memory netWorthBalances = new uint256[](tmpWhiteList.length);\n', '        for (uint256 i=0; i<tmpWhiteList.length;i++){\n', '            if (checkAddressPermission(tmpWhiteList[i],0x0002)){\n', '                netWorthBalances[i] = getNetWorthBalance(tmpWhiteList[i]);\n', '            }\n', '            prices[i] = oraclePrice(tmpWhiteList[i]);\n', '        }\n', '        (uint256[] memory colBalances,uint256[] memory PremiumBalances) = _collateralPool.getCollateralAndPremiumBalances(account,userTotalWorth,tmpWhiteList,\n', '                netWorthBalances,prices);\n', '        return (colBalances,PremiumBalances,prices);\n', '    } \n', '\n', '    /**\n', '     * @dev Retrieve the occupied collateral worth, multiplied by minimum collateral rate, priced in USD. \n', '     */\n', '    function getOccupiedCollateral() public view returns(uint256){\n', '        uint256 totalOccupied = _optionsPool.getTotalOccupiedCollateral();\n', '        return calculateCollateral(totalOccupied);\n', '    }\n', '    /**\n', '     * @dev Retrieve the available collateral worth, the worth of collateral which can used for buy options, priced in USD. \n', '     */\n', '    function getAvailableCollateral()public view returns(uint256){\n', '        return safeSubCollateral(getUnlockedCollateral(),getOccupiedCollateral());\n', '    }\n', '    /**\n', '     * @dev Retrieve the left collateral worth, the worth of collateral which can used for redeem collateral, priced in USD. \n', '     */\n', '    function getLeftCollateral()public view returns(uint256){\n', '        return safeSubCollateral(getTotalCollateral(),getOccupiedCollateral());\n', '    }\n', '    /**\n', '     * @dev Retrieve the unlocked collateral worth, the worth of collateral which currently used for options, priced in USD. \n', '     */\n', '    function getUnlockedCollateral()public view returns(uint256){\n', '        return safeSubCollateral(getTotalCollateral(),_FPTCoin.getTotalLockedWorth());\n', '    }\n', '    /**\n', '     * @dev The auxiliary function for collateral worth subtraction. \n', '     */\n', '    function safeSubCollateral(uint256 allCollateral,uint256 subCollateral)internal pure returns(uint256){\n', '        return allCollateral > subCollateral ? allCollateral - subCollateral : 0;\n', '    }\n', '    /**\n', '     * @dev The auxiliary function for calculate option occupied. \n', "     * @param strikePrice option's strike price\n", "     * @param underlyingPrice option's underlying price\n", "     * @param amount option's amount\n", "     * @param optType option's type, 0 for call, 1 for put.\n", '     */\n', '    function calOptionsOccupied(uint256 strikePrice,uint256 underlyingPrice,uint256 amount,uint8 optType)public view returns(uint256){\n', '        uint256 totalOccupied = 0;\n', '        if ((optType == 0) == (strikePrice>underlyingPrice)){ // call\n', '            totalOccupied = strikePrice*amount;\n', '        } else {\n', '            totalOccupied = underlyingPrice*amount;\n', '        }\n', '        return calculateCollateral(totalOccupied);\n', '    }\n', '    /**\n', '     * @dev Retrieve the total collateral worth, priced in USD. \n', '     */\n', '    function getTotalCollateral()public view returns(uint256){\n', '        int256 totalNum = 0;\n', '        uint whiteListLen = whiteList.length;\n', '        for (uint256 i=0;i<whiteListLen;i++){\n', '            address addr = whiteList[i];\n', '            int256 price = int256(oraclePrice(addr));\n', '            int256 netWorth = _collateralPool.getRealBalance(addr);\n', '            if (netWorth != 0){\n', '                totalNum = totalNum.add(price.mul(netWorth));\n', '            }\n', '        }\n', '        return totalNum>=0 ? uint256(totalNum) : 0;  \n', '    }\n', '    function getAllRealBalance()public view returns(int256[] memory){\n', '        return _collateralPool.getAllRealBalance(whiteList);\n', '    }\n', '    /**\n', '     * @dev Retrieve the balance of collateral, the auxiliary function for the total collateral calculation. \n', '     */\n', '    function getRealBalance(address settlement)public view returns(int256){\n', '        return _collateralPool.getRealBalance(settlement);\n', '    }\n', '    function getNetWorthBalance(address settlement)public view returns(uint256){\n', '        return _collateralPool.getNetWorthBalance(settlement);\n', '    }\n', '    /**\n', '     * @dev the auxiliary function for payback. \n', '     */\n', '    function _paybackWorth(uint256 worth,uint256 feeType) internal {\n', '        uint256 totalPrice = 0;\n', '        uint whiteLen = whiteList.length;\n', '        uint256[] memory balances = new uint256[](whiteLen);\n', '        uint256 i=0;\n', '        for(;i<whiteLen;i++){\n', '            address addr = whiteList[i];\n', '            if (checkAddressPermission(addr,allowSellOptions)){\n', '                uint256 price = oraclePrice(addr);\n', '                balances[i] = getNetWorthBalance(addr);\n', '                //balances[i] = netWorthBalances[addr];\n', '                totalPrice = totalPrice.add(price.mul(balances[i]));\n', '            }\n', '        }\n', '        require(totalPrice>=worth && worth > 0,"payback settlement is insufficient!");\n', '        for (i=0;i<whiteLen;i++){\n', '            uint256 _payBack = balances[i].mul(worth)/totalPrice;\n', '            _collateralPool.transferPaybackAndFee(msg.sender,whiteList[i],_payBack,feeType);\n', '            //addr = whiteList[i];\n', '            //netWorthBalances[addr] = balances[i].sub(_payBack);\n', '            //_transferPaybackAndFee(msg.sender,addr,_payBack,feeType);\n', '        } \n', '    }\n', '\n', '    /**\n', "     * @dev the auxiliary function for getting user's transer\n", '     */\n', '    function getPayableAmount(address settlement,uint256 settlementAmount) internal returns (uint256) {\n', '        require(checkAddressPermission(settlement,allowBuyOptions) , "settlement is unsupported token");\n', '        if (settlement == address(0)){\n', '            settlementAmount = msg.value;\n', '            address payable poolAddr = address(uint160(address(_collateralPool)));\n', '            poolAddr.transfer(settlementAmount);\n', '        }else if (settlementAmount > 0){\n', '            IERC20 oToken = IERC20(settlement);\n', '            uint256 preBalance = oToken.balanceOf(address(_collateralPool));\n', '            SafeERC20.safeTransferFrom(oToken,msg.sender, address(_collateralPool), settlementAmount);\n', '//            oToken.transferFrom(msg.sender, address(_collateralPool), settlementAmount);\n', '            uint256 afterBalance = oToken.balanceOf(address(_collateralPool));\n', '            require(afterBalance-preBalance==settlementAmount,"settlement token transfer error!");\n', '        }\n', '        require(isInputAmountInRange(settlementAmount),"input amount is out of input amount range");\n', '        return settlementAmount;\n', '    }\n', '    /**\n', '     * @dev collateral occupation rate calculation\n', '     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\n', '     */\n', '    function getCollateralAndRate()internal view returns (uint256,uint256){\n', '        int256 totalNum = 0;\n', '        uint256 totalCollateral = 0;\n', '        uint256 totalRate = 0;\n', '        uint whiteListLen = whiteList.length;\n', '        for (uint256 i=0;i<whiteListLen;i++){\n', '            address addr = whiteList[i];\n', '            int256 balance = _collateralPool.getRealBalance(addr);\n', '            if (balance != 0){\n', '                balance = balance*(int256(oraclePrice(addr)));\n', '                if (balance > 0 && collateralRate[addr] > 0){\n', '                    totalNum = totalNum.add(balance);\n', '                    totalCollateral = totalCollateral.add(uint256(balance));\n', '                    totalRate = totalRate.add(uint256(balance)/collateralRate[addr]);\n', '                } \n', '            }\n', '        }\n', '        if (totalRate > 0){\n', '            totalRate = totalCollateral/totalRate;\n', '        }else{\n', '            totalRate = 5000;\n', '        }\n', '        return (totalNum>=0 ? uint256(totalNum) : 0,totalRate);  \n', '    }\n', '    /**\n', '     * @dev collateral occupation rate calculation\n', '     *      collateral occupation rate = sum(collateral Rate * collateral balance) / sum(collateral balance)\n', '     */\n', '\n', '    function calculateCollateralRate()public view returns (uint256){\n', '        uint256 totalCollateral = 0;\n', '        uint256 totalRate = 0;\n', '        uint whiteLen = whiteList.length;\n', '        uint256 i=0;\n', '        for(;i<whiteLen;i++){\n', '            address addr = whiteList[i];\n', '            uint256 balance = getNetWorthBalance(addr);\n', '            if (balance > 0 && collateralRate[addr] > 0){\n', '                balance = oraclePrice(addr)*balance;\n', '                totalCollateral = totalCollateral.add(balance);\n', '                totalRate = totalRate.add(balance/collateralRate[addr]);\n', '            }\n', '        }\n', '        if (totalRate > 0){\n', '            return totalCollateral/totalRate;\n', '        }else{\n', '            return 5000;\n', '        }\n', '    }\n', '    /**\n', '     * @dev the auxiliary function for collateral calculation\n', '     */\n', '    function calculateCollateral(uint256 amount)internal view returns (uint256){\n', '        return calculateCollateralRate()*amount/1000;\n', '    }\n', '}\n', '\n', '// File: contracts\\modules\\tuple64.sol\n', '\n', 'pragma solidity =0.5.16;\n', 'library tuple64 {\n', '    // add whiteList\n', '    function getValue0(uint256 input) internal pure returns (uint256){\n', '        return uint256(uint64(input));\n', '    }\n', '    function getValue1(uint256 input) internal pure returns (uint256){\n', '        return uint256(uint64(input>>64));\n', '    }\n', '    function getValue2(uint256 input) internal pure returns (uint256){\n', '        return uint256(uint64(input>>128));\n', '    }\n', '    function getValue3(uint256 input) internal pure returns (uint256){\n', '        return uint256(uint64(input>>192));\n', '    }\n', '    function getTuple(uint256 input0,uint256 input1,uint256 input2,uint256 input3) internal pure returns (uint256){\n', '        return input0+(input1<<64)+(input2<<128)+(input3<<192);\n', '    }\n', '    function getTuple3(uint256 input0,uint256 input1,uint256 input2) internal pure returns (uint256){\n', '        return input0+(input1<<64)+(input2<<128);\n', '    }\n', '    function getTuple2(uint256 input0,uint256 input1) internal pure returns (uint256){\n', '        return input0+(input1<<64);\n', '    }\n', '}\n', '\n', '// File: contracts\\OptionsManager\\OptionsManagerV2.sol\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '/**\n', ' * @title Options manager contract for finnexus proposal v2.\n', ' * @dev A Smart-contract to manage Options pool, collatral pool, mine pool, FPTCoin, etc.\n', ' *\n', ' */\n', 'contract OptionsManagerV2 is CollateralCal {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev Options manager constructor. set other contract address\n', '    * @param oracleAddr fnx oracle contract address.\n', '    * @param optionsPriceAddr options price contract address\n', '    * @param optionsPoolAddr optoins pool contract address\n', '    * @param FPTCoinAddr FPTCoin contract address\n', '    */\n', '    constructor (address oracleAddr,address optionsPriceAddr,address optionsPoolAddr,address collateralPoolAddr,address FPTCoinAddr) public{\n', '        _oracle = IFNXOracle(oracleAddr);\n', '        _optionsPrice = IOptionsPrice(optionsPriceAddr);\n', '        _optionsPool = IOptionsPool(optionsPoolAddr);\n', '        _collateralPool = ICollateralPool(collateralPoolAddr);\n', '        _FPTCoin = IFPTCoin(FPTCoinAddr);\n', '    }\n', '    function initialize() onlyOwner public {\n', '        \n', '    }\n', '    function update() onlyOwner public {\n', '        \n', '    }\n', '    /**\n', '    * @dev retrieve input price valid range rate, thousandths.\n', '    */ \n', '    function getPriceRateRange() public view returns(uint256,uint256) {\n', '        return (minPriceRate,maxPriceRate);\n', '    }\n', '    /**\n', '    * @dev set input price valid range rate, thousandths.\n', '    */ \n', '    function setPriceRateRange(uint256 _minPriceRate,uint256 _maxPriceRate) public onlyOwner{\n', '        require(_minPriceRate<_maxPriceRate,"minimum Price rate must be smaller than maximum price rate");\n', '        minPriceRate = _minPriceRate;\n', '        maxPriceRate = _maxPriceRate;\n', '    }\n', '    /**\n', '    * @dev check user input price is in valid range.\n', '    * @param strikePrice user input strikePrice\n', '    * @param underlyingPrice current underlying price.\n', '    */ \n', '    function checkStrikePrice(uint256 strikePrice,uint256 underlyingPrice)internal view{\n', '        require(underlyingPrice*maxPriceRate/1000>=strikePrice && underlyingPrice*minPriceRate/1000<=strikePrice,\n', '                "strikePrice is out of price range");\n', '    }\n', '    /**\n', '    * @dev user buy option and create new option.\n', "    * @param settlement user's settement coin address\n", '    * @param settlementAmount amount of settlement user want fo pay.\n', "    * @param strikePrice user input option's strike price\n", "    * @param underlying user input option's underlying id, 1 for BTC,2 for ETH\n", '    * @param expiration user input expiration,time limit from now\n', '    * @param amount user input amount of new option user want to buy.\n', '    * @param optType user input option type\n', '    */ \n', '    function buyOption(address settlement,uint256 settlementAmount, uint256 strikePrice,uint32 underlying,\n', '                uint32 expiration,uint256 amount,uint8 optType) nonReentrant notHalted InRange(amount) public payable{\n', '        uint256 type_ly_expiration = optType+(uint256(underlying)<<64)+(uint256(expiration)<<128);\n', '        (uint256 settlePrice,uint256 underlyingPrice) = oracleAssetAndUnderlyingPrice(settlement,underlying);\n', '        checkStrikePrice(strikePrice,underlyingPrice);\n', '        uint256 optRate = _getOptionsPriceRate(underlyingPrice,strikePrice,amount,optType);\n', '\n', '        uint256 optPrice = _optionsPool.createOptions(msg.sender,settlement,type_ly_expiration,\n', '            uint128(strikePrice),uint128(underlyingPrice),uint128(amount),uint128((settlePrice<<32)/optRate));\n', '        optPrice = (optPrice*optRate)>>32;\n', '        buyOption_sub(settlement,settlementAmount,optPrice,settlePrice,amount);\n', '    }\n', '    /**\n', '    * @dev subfunction of buy option.\n', "    * @param settlement user's settement coin address\n", '    * @param settlementAmount amount of settlement user want fo pay.\n', "    * @param optionPrice new option's price\n", '    * @param amount user input amount of new option user want to buy.\n', '    */ \n', '    function buyOption_sub(address settlement,uint256 settlementAmount,\n', '            uint256 optionPrice,uint256 settlePrice,uint256 amount)internal{\n', '        settlementAmount = getPayableAmount(settlement,settlementAmount);\n', '        amount = uint256(uint128(amount));\n', '        uint256 allPay = amount*optionPrice;\n', '        uint256 allPayUSd = allPay/1e8;\n', '        allPay = allPay/settlePrice;\n', '        _collateralPool.buyOptionsPayfor(msg.sender,settlement,settlementAmount,allPay);\n', '        //_FPTCoin.addMinerBalance(msg.sender,allPayUSd);\n', '        emit BuyOption(msg.sender,settlement,optionPrice,allPay,amount); \n', '    }\n', '    /**\n', '    * @dev User sell option.\n', "    * @param optionsId option's ID which was wanted to sell, must owned by user\n", '    * @param amount user input amount of option user want to sell.\n', '    */ \n', '    function sellOption(uint256 optionsId,uint256 amount) nonReentrant notHalted InRange(amount) public{\n', '        require(false,"sellOption is not supported");\n', '        // (,,uint8 optType,uint32 underlying,uint256 expiration,uint256 strikePrice,) = _optionsPool.getOptionsById(optionsId);\n', '        // expiration = expiration.sub(now);\n', '        // uint256 currentPrice = oracleUnderlyingPrice(underlying);\n', '        // uint256 optPrice = _optionsPrice.getOptionsPrice(currentPrice,strikePrice,expiration,underlying,optType);\n', '        // _optionsPool.burnOptions(msg.sender,optionsId,amount,optPrice);\n', '        // uint256 allPay = optPrice*amount;\n', '        // (address settlement,uint256 fullPay) = _optionsPool.getBurnedFullPay(optionsId,amount);\n', '        // _collateralPool.addNetWorthBalance(settlement,int256(fullPay));\n', '        // _paybackWorth(allPay,1);\n', '        // emit SellOption(msg.sender,optionsId,amount,allPay);\n', '    }\n', '    /**\n', '    * @dev User exercise option.\n', "    * @param optionsId option's ID which was wanted to exercise, must owned by user\n", '    * @param amount user input amount of option user want to exercise.\n', '    */ \n', '    function exerciseOption(uint256 optionsId,uint256 amount) nonReentrant notHalted InRange(amount) public{\n', '        uint256 allPay = _optionsPool.getExerciseWorth(optionsId,amount);\n', '        require(allPay > 0,"This option cannot exercise");\n', '        (,,uint8 optType,uint32 underlying,uint256 expiration,uint256 strikePrice,) = _optionsPool.getOptionsById(optionsId);\n', '        expiration = expiration.sub(now);\n', '        uint256 currentPrice = oracleUnderlyingPrice(underlying);\n', '        uint256 optPrice = _optionsPrice.getOptionsPrice(currentPrice,strikePrice,expiration,underlying,optType);\n', '        _optionsPool.burnOptions(msg.sender,optionsId,amount,optPrice);\n', '        (address settlement,uint256 fullPay) = _optionsPool.getBurnedFullPay(optionsId,amount);\n', '        _collateralPool.addNetWorthBalance(settlement,int256(fullPay));\n', '        _paybackWorth(allPay,2);\n', '        emit ExerciseOption(msg.sender,optionsId,amount,allPay);\n', '    }\n', '    function getOptionsPrice(uint256 underlyingPrice, uint256 strikePrice, uint256 expiration,\n', '                    uint32 underlying,uint256 amount,uint8 optType) public view returns(uint256){  \n', '        require(underlyingPrice<1e40 && strikePrice < 1e40 && expiration < 1e30 && amount < 1e40 , "Input number is too large");\n', '        uint256 ratio = _getOptionsPriceRate(underlyingPrice,strikePrice,amount,optType);\n', '        uint256 optPrice = _optionsPrice.getOptionsPrice(underlyingPrice,strikePrice,expiration,underlying,optType);\n', '        return (optPrice*ratio)>>32;\n', '    }\n', '    function _getOptionsPriceRate(uint256 underlyingPrice, uint256 strikePrice,uint256 amount,uint8 optType) internal view returns(uint256){\n', '        (uint256 totalCollateral,uint256 rate) = getCollateralAndRate();\n', '        uint256 lockedWorth = _FPTCoin.getTotalLockedWorth();\n', '        require(totalCollateral>=lockedWorth,"collateral is insufficient!");\n', '        totalCollateral = totalCollateral - lockedWorth;\n', '        uint256 buyOccupied = ((optType == 0) == (strikePrice>underlyingPrice)) ? strikePrice*amount:underlyingPrice*amount;\n', '        (uint256 callCollateral,uint256 putCollateral) = _optionsPool.getAllTotalOccupiedCollateral();\n', '        uint256 totalOccupied = (callCollateral + putCollateral + buyOccupied)*rate/1000;\n', '        buyOccupied = ((optType == 0 ? callCollateral : putCollateral) + buyOccupied)*rate/1000;\n', '        require(totalCollateral>=totalOccupied,"collateral is insufficient!");\n', '        return calOptionsPriceRatio(buyOccupied,totalOccupied,totalCollateral);\n', '    }\n', '    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) internal pure returns (uint256){\n', '        //r1 + 0.5\n', '        if (selfOccupied*2<=totalOccupied){\n', '            return 4294967296;\n', '        }\n', '        uint256 r1 = (selfOccupied<<32)/totalOccupied-2147483648;\n', '        uint256 r2 = (totalOccupied<<32)/totalCollateral*2;\n', '        //r1*r2*1.5\n', '        r1 = (r1*r2)>>32;\n', '        return ((r1*r1*r1)>>64)*3+4294967296;\n', '//        return SmallNumbers.pow(r1,r2);\n', '    }\n', '        // totalCollateral,OccupiedCollateral,lockedCollateral,unlockedCollateral,LeftCollateral,AvailableCollateral\n', '    function getALLCollateralinfo(address user)public view \n', '        returns(uint256[] memory,int256[] memory,uint32[] memory,uint32[] memory){\n', '        uint256[] memory values = new uint256[](13); \n', '        values[0] = getTotalCollateral();\n', '        values[1] = getOccupiedCollateral();\n', '        values[2] = _FPTCoin.getTotalLockedWorth();\n', '        values[3] = safeSubCollateral(values[0],values[2]);\n', '        values[4] = safeSubCollateral(values[0],values[1]);\n', '        values[5] = safeSubCollateral(values[3],values[1]);\n', '        values[6] = getTokenNetworth();\n', '        values[7] = getUserPayingUsd(user);\n', '        values[8] = _FPTCoin.totalSupply();\n', '        values[9] = _FPTCoin.balanceOf(user);\n', '        values[10] = calculateCollateralRate();\n', '\n', '        (values[11],values[12]) = getPriceRateRange();\n', '        return (values,\n', '                _collateralPool.getAllRealBalance(whiteList),\n', '                _collateralPool.getFeeRateAll(),\n', '                _optionsPool.getExpirationList());\n', '    }\n', '}']