['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-19\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', '\n', '// File: contracts/GSN/Context.sol\n', '// SPDX-License-Identifier: MIT\n', '// File: contracts/token/ERC20/IERC20.sol\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface UniswapRouterV2 {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '}\n', '\n', 'interface IController {\n', '    function vaults(address) external view returns (address);\n', '\n', '    function devfund() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '}\n', '\n', 'interface ICToken {\n', '\n', '    function repayBorrow(uint256 repayAmount) external returns (uint256);\n', '\n', '    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n', '\n', '    function borrow(uint256 borrowAmount) external returns (uint256);\n', '\n', '    function mint(uint256 mintAmount) external returns (uint256);\n', '\n', '\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '\n', '    function getAccountSnapshot(address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint256);\n', '\n', '    function borrowBalanceStored(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '\n', '    function getCash() external view returns (uint256);\n', '\n', '    function accrueInterest() external returns (uint256);\n', '}\n', '\n', 'interface IComptroller {\n', '\n', '    /*** Assets You Are In ***/\n', '\n', '    function enterMarkets(address[] calldata cTokens)\n', '        external\n', '        returns (uint256[] memory);\n', '\n', '    function exitMarket(address cToken) external returns (uint256);\n', '\n', '\n', '    // Claim all the COMP accrued by holder in specific markets\n', '    function claimComp(address holder, address[] calldata cTokens) external;\n', '\n', '    function markets(address cTokenAddress)\n', '        external\n', '        view\n', '        returns (bool, uint256);\n', '}\n', '\n', 'interface ICompoundLens {\n', '    function getCompBalanceMetadataExt(\n', '        address comp,\n', '        address comptroller,\n', '        address account\n', '    )\n', '        external\n', '        returns (\n', '            uint256 balance,\n', '            uint256 votes,\n', '            address delegate,\n', '            uint256 allocated\n', '        );\n', '}\n', '\n', 'interface IMasterchef {\n', '    function notifyBuybackReward(uint256 _amount) external;\n', '}\n', '\n', '// Strategy Contract Basics\n', 'abstract contract StrategyBase {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    // Perfomance fee 30% to buyback\n', '    uint256 public performanceFee = 30000;\n', '    uint256 public constant performanceMax = 100000;\n', '\n', '    // Withdrawal fee 0.2% to buyback\n', '    // - 0.14% to treasury\n', '    // - 0.06% to dev fund\n', '    uint256 public treasuryFee = 140;\n', '    uint256 public constant treasuryMax = 100000;\n', '\n', '    uint256 public devFundFee = 60;\n', '    uint256 public constant devFundMax = 100000;\n', '\n', '    // buyback ready\n', '    bool public buybackEnabled = true;\n', '    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\n', '    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\n', '\t\n', '    // Tokens\n', '    address public want;\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // buyback coins\n', '    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public constant zrxBuyback = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\n', '\n', '    // User accounts\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public timelock;\n', '\n', '    // Dex\n', '    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '\n', '    constructor(\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    ) public {\n', '        require(_want != address(0));\n', '        require(_governance != address(0));\n', '        require(_strategist != address(0));\n', '        require(_controller != address(0));\n', '        require(_timelock != address(0));\n', '\n', '        want = _want;\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        controller = _controller;\n', '        timelock = _timelock;\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '\n', '    modifier onlyBenevolent {\n', '        require(\n', '            msg.sender == tx.origin ||\n', '                msg.sender == governance ||\n', '                msg.sender == strategist\n', '        );\n', '        _;\n', '    }\n', '\n', '    // **** Views **** //\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public virtual view returns (uint256);\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    function getName() external virtual pure returns (string memory);\n', '\n', '    // **** Setters **** //\n', '\n', '    function setDevFundFee(uint256 _devFundFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        devFundFee = _devFundFee;\n', '    }\n', '\n', '    function setTreasuryFee(uint256 _treasuryFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        treasuryFee = _treasuryFee;\n', '    }\n', '\n', '    function setPerformanceFee(uint256 _performanceFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        performanceFee = _performanceFee;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setTimelock(address _timelock) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        timelock = _timelock;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setMmToken(address _mmToken) external {\n', '        require(msg.sender == governance, "!governance");\n', '        mmToken = _mmToken;\n', '    }\n', '\n', '    function setBuybackEnabled(bool _buybackEnabled) external {\n', '        require(msg.sender == governance, "!governance");\n', '        buybackEnabled = _buybackEnabled;\n', '    }\n', '\n', '    function setMasterChef(address _masterChef) external {\n', '        require(msg.sender == governance, "!governance");\n', '        masterChef = _masterChef;\n', '    }\n', '\n', '    // **** State mutations **** //\n', '    function deposit() public virtual;\n', '\n', '    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\t\t\t\t\n', '        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\n', '        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\n', '\n', '        if (buybackEnabled == true) {            \n', '            // we want buyback mm using LP token\n', '            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\n', '            buybackAndNotify(_buybackPrinciple, _buybackAmount);\t\t\t\n', '        } else {\n', '            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\n', '            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\n', '        }        \n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\n', '    }\n', '\t\n', '    // buyback MM and notify MasterChef\n', '    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\n', '        if (buybackEnabled == true) {\n', '            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\n', '            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\n', '            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\n', '            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\n', '        }\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        _withdrawSome(balanceOfPool());\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\n', '\t\n', '    // convert LP to buyback principle token\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\n', '\n', '    function harvest() public virtual;\n', '\n', '    // **** Emergency functions ****\n', '\n', '\n', '    // **** Internal functions ****\n', '    function _swapUniswap(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(_to != address(0));\n', '\n', '        address[] memory path;\n', '\n', '        if (_to == mmToken && buybackEnabled == true) {\n', '            if(_from == zrxBuyback){\n', '                path = new address[](4);\n', '                path[0] = _from;\n', '                path[1] = weth;\n', '                path[2] = usdcBuyback;\n', '                path[3] = _to;\n', '            }\n', '        } else{\t\t\n', '            path = new address[](3);\n', '            path[0] = _from;\n', '            path[1] = weth;\n', '            path[2] = _to;\t\t\n', '        }\n', '\n', '        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\n', '            _amount,\n', '            0,\n', '            path,\n', '            address(this),\n', '            now.add(60)\n', '        );\n', '    }\n', '\n', '}\n', '\n', 'interface ManagerLike {\n', '    function ilks(uint256) external view returns (bytes32);\n', '    function owns(uint256) external view returns (address);\n', '    function urns(uint256) external view returns (address);\n', '    function vat() external view returns (address);\n', '    function open(bytes32, address) external returns (uint256);\n', '    function give(uint256, address) external;\n', '    function frob(uint256, int256, int256) external;\n', '    function flux(uint256, address, uint256) external;\n', '    function move(uint256, address, uint256) external;\n', '    function exit(address, uint256, address, uint256) external;\n', '    function quit(uint256, address) external;\n', '    function enter(address, uint256) external;\n', '}\n', '\n', 'interface VatLike {\n', '    function can(address, address) external view returns (uint256);\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function frob(bytes32, address, address, address, int256, int256) external;\n', '    function hope(address) external;\n', '    function move(address, address, uint256) external;\n', '}\n', '\n', 'interface GemJoinLike {\n', '    function dec() external returns (uint256);\n', '    function join(address, uint256) external payable;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface DaiJoinLike {\n', '    function join(address, uint256) external payable;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface JugLike {\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', '\n', 'interface AggregatorV3Interface {\n', '  \n', '  function latestRoundData() external view returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '  );\n', '\n', '}\n', '\n', '\n', 'abstract contract StrategyMakerBase is StrategyBase {\n', '    // MakerDAO modules\n', '    address public dssCdpManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n', '    address public daiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n', '    address public jug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address public vat = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address public debtToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    uint256 public minDebt = 2001000000000000000000;\n', '    address public eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n', '\n', '    // sub-strategy related constants\n', '    address public collateral;\n', '    uint256 public collateralDecimal = 1e18;\n', '    address public gemJoin;\n', '    address public collateralOracle;\n', '    bytes32 public collateralIlk;\n', '    AggregatorV3Interface internal priceFeed;\n', '    uint256 public collateralPriceDecimal = 1;\n', '    bool public collateralPriceEth = false;\n', '\t\n', '    // singleton CDP for this strategy\n', '    uint256 public cdpId = 0;\n', '\t\n', '    // configurable minimum collateralization percent this strategy would hold for CDP\n', '    uint256 public minRatio = 300;\n', '    // collateralization percent buffer in CDP debt actions\n', '    uint256 public ratioBuff = 500;\n', '    uint256 public ratioBuffMax = 10000;\n', '    uint256 constant RAY = 10 ** 27;\n', '\n', '    // Keeper bots, maintain ratio above minimum requirement\n', '    mapping(address => bool) public keepers;\n', '\n', '    constructor(\n', '        address _collateralJoin,\n', '        bytes32 _collateralIlk,\n', '        address _collateral,\n', '        uint256 _collateralDecimal,\n', '        address _collateralOracle,\n', '\t\tuint256 _collateralPriceDecimal,\n', '\t\tbool _collateralPriceEth,\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    )\n', '        public\n', '        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\n', '    {\n', "        require(_want == _collateral, '!mismatchWant');\n", '\t\t\n', '        gemJoin = _collateralJoin;\n', '        collateralIlk = _collateralIlk;\t\t    \n', '        collateral = _collateral;   \n', '        collateralDecimal = _collateralDecimal;\n', '        collateralOracle = _collateralOracle;\n', '        priceFeed = AggregatorV3Interface(collateralOracle);\n', '        collateralPriceDecimal = _collateralPriceDecimal;\n', '        collateralPriceEth = _collateralPriceEth;\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '\n', '    modifier onlyKeepers {\n', '        require(\n', '            keepers[msg.sender] ||\n', '                msg.sender == address(this) ||\n', '                msg.sender == strategist ||\n', '                msg.sender == governance,\n', '            "!keepers"\n', '        );\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyGovernanceAndStrategist {\n', '        require(msg.sender == governance || msg.sender == strategist, "!governance");\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyCDPInUse {\n', '        uint256 collateralAmt = getCollateralBalance();\n', "        require(collateralAmt > 0, '!zeroCollateral');\n", '\t\t\n', '        uint256 debtAmt = getDebtBalance();\n', "        require(debtAmt > 0, '!zeroDebt');\t\t\n", '        _;\n', '    }\n', '\t\n', '    modifier onlyCDPInitiated {        \n', "        require(cdpId > 0, '!noCDP');\t\n", '        _;\n', '    }\n', '    \n', '    modifier onlyAboveMinDebt(uint256 _daiAmt) {  \n', '        uint256 debtAmt = getDebtBalance();   \n', "        require((_daiAmt < debtAmt && (debtAmt.sub(_daiAmt) >= minDebt)) || debtAmt <= _daiAmt, '!minDebt');\n", '        _;\n', '    }\n', '\t\n', '    function getCollateralBalance() public view returns (uint256) {\n', '        (uint256 ink, ) = VatLike(vat).urns(collateralIlk, ManagerLike(dssCdpManager).urns(cdpId));\n', '        return ink;\n', '    }\n', '\t\n', '    function getDebtBalance() public view returns (uint256) {\n', '        address urnHandler = ManagerLike(dssCdpManager).urns(cdpId);\n', '        (, uint256 art) = VatLike(vat).urns(collateralIlk, urnHandler);\n', '        (, uint256 rate, , , ) = VatLike(vat).ilks(collateralIlk);\n', '        uint rad = mul(art, rate);\n', '        if (rad == 0) {\n', '            return 0;\n', '        }\n', '        uint256 wad = rad / RAY;\n', '        return mul(wad, RAY) < rad ? wad + 1 : wad;\n', '    }\t\n', '\n', '    // **** Getters ****\n', '\t\n', '    function balanceOfPool() public override view returns (uint256){\n', '        return getCollateralBalance();\n', '    }\n', '\n', '    function collateralValue(uint256 collateralAmt) public view returns (uint256){\n', '        uint256 collateralPrice = getLatestCollateralPrice();\n', '        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal).div(collateralPriceDecimal);\n', '    }\n', '\n', '    function currentRatio() public onlyCDPInUse view returns (uint256) {\t    \n', '        uint256 collateralAmt = collateralValue(getCollateralBalance()).mul(100);\n', '        uint256 debtAmt = getDebtBalance();\t\t\n', '        return collateralAmt.div(debtAmt);\n', '    } \n', '    \n', '    // if borrow is true (for lockAndDraw): return (maxDebt - currentDebt) if positive value, otherwise return 0\n', '    // if borrow is false (for redeemAndFree): return (currentDebt - maxDebt) if positive value, otherwise return 0\n', '    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\n', '        uint256 maxDebt = collateralValue(collateralAmt).mul(10000).div(minRatio.mul(10000).mul(ratioBuffMax + ratioBuff).div(ratioBuffMax).div(100));\n', '\t\t\n', '        uint256 debtAmt = getDebtBalance();\n', '\t\t\n', '        uint256 debt = 0;\n', '        \n', '        if (borrow && maxDebt >= debtAmt){\n', '            debt = maxDebt.sub(debtAmt);\n', '        } else if (!borrow && debtAmt >= maxDebt){\n', '            debt = debtAmt.sub(maxDebt);\n', '        }\n', '        \n', '        return (debt > 0)? debt : 0;\n', '    }\n', '\n', '    function borrowableDebt() public view returns (uint256) {\n', '        uint256 collateralAmt = getCollateralBalance();\n', '        return calculateDebtFor(collateralAmt, true);\n', '    }\n', '\n', '    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\n', '        uint256 collateralAmt = getCollateralBalance().sub(_redeemCollateralAmt);\n', '        return calculateDebtFor(collateralAmt, false);\n', '    }\n', '\n', '    // **** sub-strategy implementation ****\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\n', '\t\n', '    function _depositDAI(uint256 _daiAmt) internal virtual;\n', '\t\n', '    function _withdrawDAI(uint256 _daiAmt) internal virtual;\n', '\t\n', '    // **** Oracle (using chainlink) ****\n', '\t\n', '    function getLatestCollateralPrice() public view returns (uint256){\n', "        require(collateralOracle != address(0), '!_collateralOracle');\t\n", '        (\n', '            uint80 roundID, \n', '            int price,\n', '            uint startedAt,\n', '            uint timeStamp,\n', '            uint80 answeredInRound\n', '        ) = priceFeed.latestRoundData();\n', '\t\t\n', '        if (price > 0){\n', '            int ethPrice = 1;\n', '            if (collateralPriceEth){\n', '               (,ethPrice,,,) = AggregatorV3Interface(eth_usd).latestRoundData();\t\t\t\n', '            }\n', '            return uint256(price).mul(collateralPriceDecimal).mul(uint256(ethPrice)).div(1e8).div(collateralPriceEth? 1e18 : 1);\n', '        } else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    // **** Setters ****\n', ' \n', '    function setMinDebt(uint256 _minDebt) external onlyGovernanceAndStrategist {\n', '        minDebt = _minDebt;\n', '    }\t\n', ' \n', '    function setMinRatio(uint256 _minRatio) external onlyGovernanceAndStrategist {\n', '        minRatio = _minRatio;\n', '    }\t\n', '\t\n', '    function setRatioBuff(uint256 _ratioBuff) external onlyGovernanceAndStrategist {\n', '        ratioBuff = _ratioBuff;\n', '    }\t\n', '\n', '    function setKeeper(address _keeper, bool _enabled) external onlyGovernanceAndStrategist {\n', '        keepers[_keeper] = _enabled;\n', '    }\n', '\t\n', '    // **** MakerDAO CDP actions ****\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "mul-overflow");\n', '    }\n', '\t\n', '    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n', '        rad = mul(wad, RAY);\n', '    }\n', '\t\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "sub-overflow");\n', '    }\n', '\t\n', '    function toInt(uint256 x) internal pure returns (int256 y) {\n', '        y = int256(x);\n', '        require(y >= 0, "int-overflow");\n', '    }\n', '\t\n', '    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\n', '        wad = mul(amt, 10 ** (18 - GemJoinLike(gemJoin).dec()));\n', '    }\n', '\t\n', '    function _getDrawDart(address vat, address jug, address urn, bytes32 ilk, uint wad) internal returns (int256 dart) {\n', '        uint256 rate = JugLike(jug).drip(ilk);\n', '        uint256 dai = VatLike(vat).dai(urn);\n', '        if (dai < toRad(wad)) {\n', '            dart = toInt(sub(toRad(wad), dai).div(rate));\n', '            dart = mul(uint256(dart), rate) < toRad(wad) ? dart + 1 : dart;\n', '        }\n', '    }\n', '\t\n', '    function _getWipeDart(address vat, uint dai, address urn, bytes32 ilk) internal view returns (int256 dart) {\n', '        (, uint256 rate,,,) = VatLike(vat).ilks(ilk);\n', '        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n', '        dart = toInt(dai.div(rate));\n', '        dart = uint256(dart) <= art ? - dart : - toInt(art);\n', '    }\n', '\t\n', '    function openCDP() external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(cdpId <= 0, "!cdpAlreadyOpened");\n', '\t\t\n', '        cdpId = ManagerLike(dssCdpManager).open(collateralIlk, address(this));\t\t\n', '\t\t\n', '        IERC20(collateral).approve(gemJoin, uint256(-1));\n', '        IERC20(debtToken).approve(daiJoin, uint256(-1));\n', '    }\n', '\t\n', '    function getUrnVatIlk() internal returns (address, address, bytes32){\n', '        return (ManagerLike(dssCdpManager).urns(cdpId), ManagerLike(dssCdpManager).vat(), ManagerLike(dssCdpManager).ilks(cdpId));\n', '    }\n', '\t\n', '    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _daiAmt) internal onlyCDPInitiated {   \n', "        require(_daiAmt.add(getDebtBalance()) >= minDebt, '!minDebt');\n", '        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\t\t\n', '\t\tGemJoinLike(gemJoin).join(urn, _collateralAmt);  \n', '\t\tManagerLike(dssCdpManager).frob(cdpId, toInt(convertTo18(gemJoin, _collateralAmt)), _getDrawDart(vat, jug, urn, ilk, _daiAmt));\n', '\t\tManagerLike(dssCdpManager).move(cdpId, address(this), toRad(_daiAmt));\n', '        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\n', '            VatLike(vat).hope(daiJoin);\n', '        }\n', '        DaiJoinLike(daiJoin).exit(address(this), _daiAmt);\n', '    } \n', '\t\n', '    function repayAndRedeemCollateral(uint256 _collateralAmt, uint _daiAmt) internal onlyCDPInitiated onlyAboveMinDebt(_daiAmt) { \n', '        (address urn, address vat, bytes32 ilk) = getUrnVatIlk();\n', '        if (_daiAmt > 0){\n', '            DaiJoinLike(daiJoin).join(urn, _daiAmt);\n', '        }\n', '        uint256 wad18 = _collateralAmt > 0? convertTo18(gemJoin, _collateralAmt) : 0;\n', '        ManagerLike(dssCdpManager).frob(cdpId, -toInt(wad18),  _getWipeDart(vat, VatLike(vat).dai(urn), urn, ilk));\n', '        if (_collateralAmt > 0){\n', '            ManagerLike(dssCdpManager).flux(cdpId, address(this), wad18);\n', '            GemJoinLike(gemJoin).exit(address(this), _collateralAmt);\n', '        }\n', '    } \n', '\n', '    // **** State Mutation functions ****\n', '\t\n', '    function keepMinRatio() external onlyCDPInUse onlyKeepers {\t\t\n', '        uint256 requiredPaidback = requiredPaidDebt(0);\n', '        if (requiredPaidback > 0){\n', '            _withdrawDAI(requiredPaidback);\n', '            uint256 wad = IERC20(debtToken).balanceOf(address(this));\n', "            require(wad >= requiredPaidback, '!keepMinRatioRedeem');\n", '\t\t\t\n', '            repayAndRedeemCollateral(0, requiredPaidback);\n', '            uint256 goodRatio = currentRatio();\n', "            require(goodRatio >= minRatio.sub(1), '!stillBelowMinRatio');\n", '        }\n', '    }\n', '\t\n', '    function deposit() public override {\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\t\n', '            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\n', '            if(_newDebt > 0 && _newDebt.add(getDebtBalance()) >= minDebt){\n', '               addCollateralAndBorrow(_want, _newDebt);\n', '               uint256 wad = IERC20(debtToken).balanceOf(address(this));\n', '               _depositDAI(_newDebt > wad? wad : _newDebt);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\n', '        uint256 requiredPaidback = requiredPaidDebt(_amount);\n', '        if (requiredPaidback > 0){\n', '            _withdrawDAI(requiredPaidback);\n', "            require(IERC20(debtToken).balanceOf(address(this)) >= requiredPaidback, '!mismatchAfterWithdraw');\n", '        }\n', '\t\t\n', '        repayAndRedeemCollateral(_amount, requiredPaidback);\n', '        \n', '        return _amount;\n', '    }\n', '    \n', '}\n', '\n', '/**\n', '  * @title Careful Math\n', '  * @author Compound\n', "  * @notice Derived from OpenZeppelin's SafeMath library\n", '  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '  */\n', 'contract CarefulMath {\n', '\n', '    /**\n', '     * @dev Possible error codes that we can return\n', '     */\n', '    enum MathError {\n', '        NO_ERROR,\n', '        DIVISION_BY_ZERO,\n', '        INTEGER_OVERFLOW\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, returns an error on overflow.\n', '    */\n', '    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (a == 0) {\n', '            return (MathError.NO_ERROR, 0);\n', '        }\n', '\n', '        uint c = a * b;\n', '\n', '        if (c / a != b) {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        } else {\n', '            return (MathError.NO_ERROR, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b == 0) {\n', '            return (MathError.DIVISION_BY_ZERO, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, a / b);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Exponential module for storing fixed-precision decimals\n', ' * @author Compound\n', ' * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n', ' *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n', ' *         `Exp({mantissa: 5100000000000000000})`.\n', ' */\n', 'contract Exponential is CarefulMath {\n', '    uint constant expScale = 1e18;\n', '    uint constant doubleScale = 1e36;\n', '    uint constant halfExpScale = expScale/2;\n', '    uint constant mantissaOne = expScale;\n', '\n', '    struct Exp {\n', '        uint mantissa;\n', '    }\n', '\n', '    struct Double {\n', '        uint mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates an exponential from numerator and denominator values.\n', '     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n', '     *            or if `denom` is zero.\n', '     */\n', '    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, returning a new Exp.\n', '     */\n', '    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n', '     */\n', '    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(product));\n', '    }\n', '\n', '    /**\n', '     * @dev Truncates the given exp to a whole number value.\n', '     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n', '     */\n', '    function truncate(Exp memory exp) pure internal returns (uint) {\n', "        // Note: We are not using careful math here as we're performing a division that cannot fail\n", '        return exp.mantissa / expScale;\n', '    }\n', '}\n', '\n', 'interface IERC3156FlashLender {\n', '    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\n', '}\n', '\n', 'interface IERC3156FlashBorrower {\n', '    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata data) external returns (bytes32);\n', '}\n', '\n', 'abstract contract StrategyCmpdDaiBase is Exponential, IERC3156FlashBorrower{\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    enum Action {LEVERAGE, DELEVERAGE}\n', '    bytes DATA_LEVERAGE = abi.encode(Action.LEVERAGE);\n', '    bytes DATA_DELEVERAGE = abi.encode(Action.DELEVERAGE);\n', '\t\n', '    address public constant comptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '    address public constant lens = 0xd513d22422a3062Bd342Ae374b4b9c20E0a9a074;\n', '    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address public constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n', '    address public constant cdai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n', '    address public constant cether = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '    address public dydxFlashloanWrapper = 0x6bdC1FCB2F13d1bA9D26ccEc3983d5D4bf318693;\n', '    address public constant dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n', '    bool public dydxFlashloanEnabled = true;\n', '\n', "    // Require a 0.1 buffer between market collateral factor and strategy's collateral factor when leveraging\n", '    uint256 colFactorLeverageBuffer = 100;\n', '    uint256 colFactorLeverageBufferMax = 1000;\n', '\n', "    // Allow a 0.05 buffer between market collateral factor and strategy's collateral factor until we have to deleverage\n", '    // This is so we can hit max leverage and keep accruing interest\n', '    uint256 colFactorSyncBuffer = 50;\n', '    uint256 colFactorSyncBufferMax = 1000;\n', '\n', '    event FlashLoanLeverage(uint256 _amount, uint256 _fee, bytes _data, Action action);\n', '    event FlashLoanDeleverage(uint256 _amount, uint256 _fee, bytes _data, Action action);\n', '\n', '    constructor() public {\n', '        // Enter cDAI Market\n', '        address[] memory ctokens = new address[](1);\n', '        ctokens[0] = cdai;\n', '        IComptroller(comptroller).enterMarkets(ctokens);\n', '\n', '        IERC20(dai).safeApprove(cdai, uint256(-1));\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '    // **** Views **** //\n', '\n', '    function getSuppliedView() public view returns (uint256) {\n', '        (, uint256 cTokenBal, , uint256 exchangeRate) = ICToken(cdai).getAccountSnapshot(address(this));\n', '        (, uint256 bal) = mulScalarTruncate(Exp({mantissa: exchangeRate}), cTokenBal);\n', '        return bal;\n', '    }\n', '\n', '    function getBorrowedView() public view returns (uint256) {\n', '        return ICToken(cdai).borrowBalanceStored(address(this));\n', '    }\n', '\n', '    // Given an unleveraged supply balance, return the target leveraged supply balance which is still within the safety buffer\n', '    function getLeveragedSupplyTarget(uint256 supplyBalance) public view returns (uint256) {\n', '        uint256 leverage = getMaxLeverage();\n', '        return supplyBalance.mul(leverage).div(1e18);\n', '    }\n', '\n', '    function getSafeLeverageColFactor() public view returns (uint256) {\n', '        uint256 colFactor = getMarketColFactor();\n', '        // Collateral factor within the buffer\n', '        uint256 safeColFactor = colFactor.sub(colFactorLeverageBuffer.mul(1e18).div(colFactorLeverageBufferMax));\n', '        return safeColFactor;\n', '    }\n', '\n', '    function getSafeSyncColFactor() public view returns (uint256) {\n', '        uint256 colFactor = getMarketColFactor();\n', '        // Collateral factor within the buffer\n', '        uint256 safeColFactor = colFactor.sub(colFactorSyncBuffer.mul(1e18).div(colFactorSyncBufferMax));\n', '        return safeColFactor;\n', '    }\n', '\n', '    function getMarketColFactor() public view returns (uint256) {\n', '        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\n', '        return colFactor;\n', '    }\n', '\n', '    // Max leverage we can go up to, w.r.t safe buffer\n', '    function getMaxLeverage() public view returns (uint256) {\n', '        uint256 safeLeverageColFactor = getSafeLeverageColFactor();\n', '        // Infinite geometric series\n', '        uint256 leverage = uint256(1e36).div(1e18 - safeLeverageColFactor);\n', '        return leverage;\n', '    }\t\n', '\t\n', '    // If we have a strategy position at this SOS borrow rate and left unmonitored for 24+ hours, we might get liquidated\n', '    // To safeguard with enough buffer, we divide the borrow rate by 2 which indicates allowing 48 hours response time\n', '    //function getSOSBorrowRate() public view returns (uint256) {\n', '    //    uint256 safeColFactor = getSafeLeverageColFactor();\n', '    //    return (colFactorLeverageBuffer.mul(182).mul(1e36).div(colFactorLeverageBufferMax)).div(safeColFactor);\n', '    //}\n', '\n', '    // **** Pseudo-view functions (use `callStatic` on these) **** //\n', '    /* The reason why these exists is because of the nature of the\n', '       interest accruing supply + borrow balance. The "view" methods\n', "       are technically snapshots and don't represent the real value.\n", '       As such there are pseudo view methods where you can retrieve the\n', '       results by calling `callStatic`.\n', '    */\n', '\n', '    function getCompAccrued() public returns (uint256) {\n', '        (, , , uint256 accrued) = ICompoundLens(lens).getCompBalanceMetadataExt(comp, comptroller, address(this));\n', '        return accrued;\n', '    }\n', '\n', '    function getColFactor() public returns (uint256) {\n', '        uint256 supplied = getSupplied();\n', '        uint256 borrowed = getBorrowed();\n', '\n', '        return borrowed.mul(1e18).div(supplied);\n', '    }\n', '\n', '    function getSuppliedUnleveraged() public returns (uint256) {\n', '        uint256 supplied = getSupplied();\n', '        uint256 borrowed = getBorrowed();\n', '\n', '        return supplied.sub(borrowed);\n', '    }\n', '\n', '    function getSupplied() public returns (uint256) {\n', '        return ICToken(cdai).balanceOfUnderlying(address(this));\n', '    }\n', '\n', '    function getBorrowed() public returns (uint256) {\n', '        return ICToken(cdai).borrowBalanceCurrent(address(this));\n', '    }\n', '\n', '    function getBorrowable() public returns (uint256) {\n', '        uint256 supplied = getSupplied();\n', '        uint256 borrowed = getBorrowed();\n', '\n', '        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\n', '\n', '        // 99.99% just in case some dust accumulates\n', '        return supplied.mul(colFactor).div(1e18).sub(borrowed).mul(9999).div(10000);\n', '    }\n', '\n', '    function getCurrentLeverage() public returns (uint256) {\n', '        uint256 supplied = getSupplied();\n', '        uint256 borrowed = getBorrowed();\n', '\n', '        return supplied.mul(1e18).div(supplied.sub(borrowed));\n', '    }\n', '\n', '    // **** State mutations **** //\n', '\n', "    // Leverages until we're supplying <x> amount\n", '    function _lUntil(uint256 _supplyAmount) internal {\n', '        uint256 leverage = getMaxLeverage();\n', '        uint256 unleveragedSupply = getSuppliedUnleveraged();\n', '        uint256 supplied = getSupplied();\n', '        require(_supplyAmount >= unleveragedSupply && _supplyAmount <= unleveragedSupply.mul(leverage).div(1e18) && _supplyAmount >= supplied, "!leverage");\n', '\n', "        // Since we're only leveraging one asset\n", '        // Supplied = borrowed\n', '        uint256 _gap = _supplyAmount.sub(supplied);\n', '        if (_flashloanApplicable(_gap)){\n', '           IERC3156FlashLender(dydxFlashloanWrapper).flashLoan(IERC3156FlashBorrower(this), dai, _gap, DATA_LEVERAGE);\n', '        }else{\n', '            uint256 _borrowAndSupply;\n', '            while (supplied < _supplyAmount) {\n', '                _borrowAndSupply = getBorrowable();\n', '                if (supplied.add(_borrowAndSupply) > _supplyAmount) {\n', '                   _borrowAndSupply = _supplyAmount.sub(supplied);\n', '                }\n', '                _leveraging(_borrowAndSupply, false);\n', '                supplied = supplied.add(_borrowAndSupply);\n', '            }\n', '        }\n', '    }\n', '\n', "    // Deleverages until we're supplying <x> amount\n", '    function _dlUntil(uint256 _supplyAmount) internal {\n', '        uint256 unleveragedSupply = getSuppliedUnleveraged();\n', '        uint256 supplied = getSupplied();\n', '        require(_supplyAmount >= unleveragedSupply && _supplyAmount <= supplied, "!deleverage");\n', '\n', "        // Since we're only leveraging on 1 asset\n", '        // redeemable = borrowable\n', '        uint256 _gap = supplied.sub(_supplyAmount);\n', '        if (_flashloanApplicable(_gap)){\n', '            IERC3156FlashLender(dydxFlashloanWrapper).flashLoan(IERC3156FlashBorrower(this), dai, _gap, DATA_DELEVERAGE);\n', '        } else{\n', '            uint256 _redeemAndRepay = getBorrowable();\n', '            do {\n', '                if (supplied.sub(_redeemAndRepay) < _supplyAmount) {\n', '                   _redeemAndRepay = supplied.sub(_supplyAmount);\n', '                }\n', '                _deleveraging(_redeemAndRepay, _redeemAndRepay, false);\n', '                supplied = supplied.sub(_redeemAndRepay);\n', '            } while (supplied > _supplyAmount);\n', '        }\n', '    }\n', '\t\n', '    // **** internal state changer ****\n', '\t\n', '    // for redeem supplied (unleveraged) DAI from compound\n', '    function _redeemDAI(uint256 _want) internal {\n', '        uint256 maxRedeem = getSuppliedUnleveraged();\n', '        _want = _want > maxRedeem? maxRedeem : _want;\n', '        \n', '        uint256 _redeem = _want;\n', '        if (_redeem > 0) {\n', '            // Make sure market can cover liquidity\n', '            require(ICToken(cdai).getCash() >= _redeem, "!cash-liquidity");\n', '\n', '            // How much borrowed amount do we need to free?\n', '            uint256 borrowed = getBorrowed();\n', '            uint256 supplied = getSupplied();\n', '            uint256 curLeverage = getCurrentLeverage();\n', '            uint256 borrowedToBeFree = _redeem.mul(curLeverage).div(1e18);\n', '\n', '            // If the amount we need to free is > borrowed, Just free up all the borrowed amount\n', '            if (borrowedToBeFree > borrowed) {\n', '                _dlUntil(getSuppliedUnleveraged());\n', '            } else {\n', '                // Otherwise just keep freeing up borrowed amounts until we hit a safe number to redeem our underlying\n', '                _dlUntil(supplied.sub(borrowedToBeFree));\n', '            }\n', '\n', '            // Redeems underlying\n', '            require(ICToken(cdai).redeemUnderlying(_redeem) == 0, "!redeem");\n', '        }\n', '    }\n', '\t\n', '    function _supplyDAI(uint256 _wad) internal {\n', '        if (_wad > 0) {\n', '            require(ICToken(cdai).mint(_wad) == 0, "!depositIntoCmpd");\n', '        }\n', '    }\n', '\t\n', '    function _claimComp() internal {\n', '        address[] memory ctokens = new address[](1);\n', '        ctokens[0] = cdai;\n', '        IComptroller(comptroller).claimComp(address(this), ctokens);\n', '    }\n', '\n', '    function _flashloanApplicable(uint256 _gap) internal returns (bool){\n', '        return dydxFlashloanEnabled && IERC20(dai).balanceOf(dydxSoloMargin) > _gap && _gap > 0;\n', '    }\n', '\n', '    //dydx flashloan callback\n', '    function onFlashLoan(address origin, address _token, uint256 _amount, uint256 _loanFee, bytes calldata _data) public override returns (bytes32) {\n', '        require(_token == dai && msg.sender == dydxFlashloanWrapper && origin == address(this), "!Flash");\n', '\n', '        uint256 total = _amount.add(_loanFee);\n', "        require(IERC20(dai).balanceOf(address(this)) >= _amount, '!balFlash');\n", '\n', '        (Action action) = abi.decode(_data, (Action));\n', '\n', '        if (action == Action.LEVERAGE){\n', '            _leveraging(total, true);\n', '            emit FlashLoanLeverage(_amount, _loanFee, _data, Action.LEVERAGE);\n', '        } else{\n', '            _deleveraging(_amount, total, true);\n', '            emit FlashLoanDeleverage(_amount, _loanFee, _data, Action.DELEVERAGE);\n', '        }\n', '\n', "        require(IERC20(dai).balanceOf(address(this)) >= total, '!deficitFlashRepay');\n", '        return 0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9;\n', '    }\n', '    \n', '    function _leveraging(uint256 _borrowAmount, bool _flash) internal {\n', '        if (_flash){\n', '            _supplyDAI(IERC20(dai).balanceOf(address(this)));\n', '            require(ICToken(cdai).borrow(_borrowAmount) == 0, "!bFlashLe");\n', '        } else{\n', '            require(ICToken(cdai).borrow(_borrowAmount) == 0, "!bLe");\n', '            _supplyDAI(IERC20(dai).balanceOf(address(this)));\n', '        }\n', '    }\n', '    \n', '    function _deleveraging(uint256 _repayAmount, uint256 _redeemAmount, bool _flash) internal {\n', '        if (_flash){\n', '            require(ICToken(cdai).repayBorrow(_repayAmount) == 0, "!rFlashDe");\n', '            require(ICToken(cdai).redeemUnderlying(_redeemAmount) == 0, "!reFlashDe");\n', '        } else{\n', '            require(ICToken(cdai).redeemUnderlying(_redeemAmount) == 0, "!reDe");\n', '            require(ICToken(cdai).repayBorrow(_repayAmount) == 0, "!rDe");\n', '        }\n', '    }\n', '}\n', '\n', 'contract StrategyMakerZRXV1 is StrategyMakerBase, StrategyCmpdDaiBase {\n', '    // strategy specific\n', '    address public zrx_collateral = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\n', '    address public zrx_eth = 0x2Da4983a622a8498bb1a21FaE9D8F6C664939962;\n', '    uint256 public zrx_collateral_decimal = 1e18;\n', '    bytes32 public zrx_ilk = "ZRX-A";\n', '    address public zrx_apt = 0xc7e8Cd72BDEe38865b4F5615956eF47ce1a7e5D0;\n', '    uint256 public zrx_price_decimal = 1e2;\n', '    bool public zrx_price_eth = true;\n', '\n', '    constructor(address _governance, address _strategist, address _controller, address _timelock) \n', '        public StrategyMakerBase(\n', '            zrx_apt,\n', '            zrx_ilk,\n', '            zrx_collateral,\n', '            zrx_collateral_decimal,\n', '            zrx_eth,\n', '            zrx_price_decimal,\n', '            zrx_price_eth,\n', '            zrx_collateral,\n', '            _governance,\n', '            _strategist,\n', '            _controller,\n', '            _timelock\n', '        )\n', '    {\n', '        // approve for dex swap\n', '        IERC20(zrx_collateral).safeApprove(univ2Router2, uint256(-1));\n', '        IERC20(comp).safeApprove(univ2Router2, uint256(-1));\n', '        IERC20(dai).safeApprove(dydxFlashloanWrapper, uint256(-1));\n', '    }\n', '\t\n', '    // **** Setters ****\t\n', '\n', '    function setColFactorLeverageBuffer(uint256 _colFactorLeverageBuffer) public onlyGovernanceAndStrategist {\n', '        colFactorLeverageBuffer = _colFactorLeverageBuffer;\n', '    }\n', '\n', '    function setColFactorSyncBuffer(uint256 _colFactorSyncBuffer) public onlyGovernanceAndStrategist {\n', '        colFactorSyncBuffer = _colFactorSyncBuffer;\n', '    }\n', '\n', '    function setDydxFlashloanEnabled(bool _dydxFlashloanEnabled) public onlyGovernanceAndStrategist {\n', '        dydxFlashloanEnabled = _dydxFlashloanEnabled;\n', '    }\n', '\t\n', '    // **** State Mutation functions ****\t\n', '\n', '    function leverageToMax() public onlyKeepers{\n', '        uint256 idealSupply = getLeveragedSupplyTarget(getSuppliedUnleveraged());\n', '        _lUntil(idealSupply);\n', '    }\n', '\n', '    function deleverageToMin() public onlyKeepers{\n', '        _dlUntil(getSuppliedUnleveraged());\n', '    }\n', '\t\n', '    function harvest() public override onlyBenevolent {\n', '        _claimComp();\n', '\t\t\n', '        uint256 _comp = IERC20(comp).balanceOf(address(this));\n', '        if (_comp > 0) {\n', '            _swapUniswap(comp, want, _comp);\n', '        }\n', '\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        uint256 _buybackAmount = _want.mul(performanceFee).div(performanceMax);\n', '\n', '        if (buybackEnabled == true && _buybackAmount > 0) {\n', '            buybackAndNotify(want, _buybackAmount);\n', '        } \n', '\n', '        // re-invest to compounding profit\n', '        deposit();\n', '    }\n', '\t\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\n', '        return (zrx_collateral, _lpAmount);\n', '    }\n', '\t\n', '    function _depositDAI(uint256 _daiAmt) internal override{\t\n', '        _supplyDAI(_daiAmt);\n', '    }\n', '\t\n', '    function _withdrawDAI(uint256 _daiAmt) internal override{\t\n', '        _redeemDAI(_daiAmt);\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\n', '        require(cdai != address(_asset), "!cToken");\n', '        _withdrawNonWantAsset(_asset);\n', '    }\n', '\n', '    // **** Views ****\n', '\n', '    function getName() external override pure returns (string memory) {\n', '        return "StrategyMakerZRXV1";\n', '    }\n', '}']