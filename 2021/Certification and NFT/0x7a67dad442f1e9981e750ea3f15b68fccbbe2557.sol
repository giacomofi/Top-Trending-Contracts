['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "this action is only for owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', '   _________    __  _______  __    ____\n', '  / ____/   |  /  |/  / __ )/ /   / __ \\\n', ' / / __/ /| | / /|_/ / __  / /   / /_/ /\n', '/ /_/ / ___ |/ /  / / /_/ / /___/ _, _/\n', '\\____/_/  |_/_/  /_/_____/_____/_/ |_|\n', '\n', 'Gamblr.one is a nextgen community-driven gambling platform powered by blockchain technology\n', '\n', '⚫ Texas Holdem Poker\n', '⚫ Cash, Tournaments, Sit-n-Go, Speed Poker\n', '⚫ Casino\n', '⚫ Decentralized gambling network where games and profits belong to players\n', '\n', 'Features:\n', '\n', '⚫ Cross-blockchain: Ethereum, EOS, Tron, WAX, Bitcoin and more\n', '⚫ Cross-platform\n', '⚫ Casual mode for non-blockchain players\n', '⚫ Learn more on https://gamblr.one\n', '\n', 'Sale Stages:\n', '\n', '+---------+-------+----------------+\n', '|  Stage  | Bonus |      Date      |\n', '+---------+-------+----------------+\n', '| Presale |  30%  | until March 10 |\n', '| Stage 1 |  20%  | until March 27 |\n', '| Stage 2 |  10%  | until April 15 |\n', '| Stage 3 |  0%   | until May 10   |\n', '+---------+-------+----------------+\n', '\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', 'import "./Lib.sol";\n', '\n', '// ERC20\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public constant returns (uint);\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '\n', '    function mintToken(address to, uint256 value) public returns (uint256);\n', '\n', '    function changeTransfer(bool allowed) public;\n', '\n', '    function getTotalSupply() public returns (uint256 supply);\n', '\n', '    function burnUnused(uint256 _amount) public;\n', '}\n', '\n', '\n', 'contract Sale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public Token;\n', '\n', '    uint256 public maxSupply;\n', '    uint256 public maxSale;\n', '    uint256 public maxBounty;\n', '    uint256 public maxSwap;\n', '    uint public swapTimelimit;\n', '\n', '    uint256 public totalSold;\n', '    uint256[4] public curStageSold;\n', '    uint256 public totalBounty;\n', '    uint256 public totalSwapped;\n', '    uint256 public unSwapped;\n', '    uint256 public burnedOnFinish;\n', '\n', '    uint256 public ratio;\n', '    uint256 public minToBuy;\n', '\n', '    uint256[4] public bonus;\n', '    uint256[4] public hardCap;\n', '    uint256 public curStage;\n', '\n', '    bool public isPaused;\n', '    bool public isFinished;\n', '    bool private configSet;\n', '\n', '    address public ETHWallet;\n', '    address public DEVWallet;\n', '\n', '    event Contribution(address to, uint256 amount);\n', '    event Swap(address to, uint256 amount, uint currenTimestamp, uint edgeTimestamp);\n', '    event Finish(uint256 burned);\n', '\n', '    constructor() public {\n', '        isPaused = true;\n', '        isFinished = false;\n', '        configSet = false;\n', '    }\n', '\n', '    function setup(address _token, address _DEVWallet) external onlyOwner {\n', '        require(!configSet, "config is already set");\n', '\n', '        Token = ERC20(_token);\n', '\n', '        //  100M tokens available to mint (hardcoded in a token contract)\n', '        //  75M tokens for sale\n', '        //      5% is reserved for EOS token swap\n', '        //      3% is reserved for Bounty program\n', '        //      10% of sold tokens will be minted to developers\n', '        //      7% of sold tokens will be minted to operating costs\n', '        //  Once sale is finished, contract will burn:\n', '        //      - Unsold tokens\n', '        //      - Unused bounty tokens\n', '        //  At the end of 2021 contract will burn unclaimed EOS tokens\n', '        maxSupply = Token.getTotalSupply();\n', '        maxSale = 75000000000000000000000000;\n', '        maxBounty = maxSupply * 3 / 100;\n', '        maxSwap = maxSupply * 5 / 100;\n', '\n', '        //  Bonus program\n', '        //  Pre-sale: +30%\n', '        //  Stage 1:  +20%\n', '        //  Stage 2:  +10%\n', '        //  Stage 3:  +0%\n', '        bonus[0] = 30;\n', '        bonus[1] = 20;\n', '        bonus[2] = 10;\n', '        bonus[3] = 0;\n', '\n', '        //  Minimum amount to buy is 500 tokens\n', '        minToBuy = 500000000000000000000;\n', '\n', '        //  EOS token swap is available till 30 Dec 2021 12:00:01\n', '        swapTimelimit = 1640865601;\n', '\n', '        //  Developers\n', '        DEVWallet = _DEVWallet;\n', "        //  Tokens can't be transferred due the sale period\n", '        changeTransferStats(false);\n', '\n', '        //  Calls only once\n', '        configSet = true;\n', '    }\n', '\n', '    //  Run next stage\n', '    function runStage(uint256 _curStage, uint256 _ratio, address _ETHWallet, uint256 _hardCap) external onlyOwner {\n', '        require(isPaused);\n', '        require(!isFinished);\n', '        curStage = _curStage;\n', '        ETHWallet = _ETHWallet;\n', '        ratio = _ratio;\n', '        hardCap[curStage] = _hardCap;\n', '        curStageSold[curStage] = 0;\n', '    }\n', '\n', '    //  Pause sale\n', '    function pause(bool _isPaused) external onlyOwner {\n', '        require(!isFinished);\n', '        isPaused = _isPaused;\n', '    }\n', '\n', '    //  Receive ETH, convert and mint tokens to sender\n', '    function() public payable {\n', '        require(msg.value > 0, "ETH amount should be greater than 0");\n', '        require(!isPaused, "Sale is paused");\n', '        require(!isFinished, "Sale is finished");\n', '        uint256 amount = msg.value.mul(ratio);\n', '        require(amount >= minToBuy, "ETH amount doesn\'t met minimum tokens to buy");\n', '        uint256 amount_with_bonus = amount.add(amount.mul(bonus[curStage]).div(100));\n', '        require(curStageSold[curStage].add(amount_with_bonus) <= hardCap[curStage], "ETH amount exceeds hardcap, try to decrease ETH amount");\n', '        totalSold = totalSold.add(amount_with_bonus);\n', '        curStageSold[curStage] = curStageSold[curStage].add(amount_with_bonus);\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount_with_bonus);\n', '        emit Contribution(msg.sender, amount_with_bonus);\n', '    }\n', '\n', '    // Change transfer status for tokens once sale is finished\n', '    function changeTransferStats(bool _allowed) internal {\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '    // Bounty rewards\n', '    function mintBounty(address _bountyHunter, uint256 _amount) external onlyOwner {\n', '        require(_amount > 0);\n', '        require(!isFinished, "Bounty period is finished");\n', '        require(totalBounty + _amount <= maxBounty);\n', '        totalBounty += _amount;\n', '        Token.mintToken(_bountyHunter, _amount);\n', '        emit Contribution(_bountyHunter, _amount);\n', '    }\n', '\n', '    // EOS tokens swap will be available until the end of 2021\n', '    function mintSwap(address _swapHolder, uint256 _amount) external onlyOwner {\n', '        require(_amount > 0);\n', '        //Swap is available till 30 Dec 2021 12:00:01\n', '        require(block.timestamp <= swapTimelimit, "Swap period finished");\n', '        //Swap is limited to 5% of total supply\n', '        require(totalSwapped + _amount <= maxSwap);\n', '        totalSwapped += _amount;\n', '        if(isFinished) {\n', '            unSwapped -= _amount;\n', '        }\n', '        Token.mintToken(_swapHolder, _amount);\n', '        emit Swap(_swapHolder, _amount, block.timestamp, swapTimelimit);\n', '    }\n', '\n', '    //  Will burn unclaimed tokens on 30 Dec 2021\n', '    function burnUnswapped() external onlyOwner {\n', '        if(unSwapped > 0) {\n', '            Token.burnUnused(unSwapped);\n', '            unSwapped = 0;\n', '        }\n', '    }\n', '\n', '    //  Rates might be updated\n', '    function updateRate(uint256 _rate) external onlyOwner {\n', '        require(!isFinished);\n', '        ratio = _rate;\n', '    }\n', '\n', '    //  Once sale is finished\n', '    function finishSale() external onlyOwner {\n', '        require(!isFinished);\n', '\n', '        //  Allow token transferring\n', '        changeTransferStats(true);\n', '\n', '        //  Mint 15% of sold tokens to devs\n', '        uint256 to_dev = totalSold * 10 / 100;\n', '        Token.mintToken(DEVWallet, to_dev);\n', '\n', '        //  Mint 7% of sold tokens to operating costs\n', '        uint256 to_operating = totalSold * 7 / 100;\n', '        Token.mintToken(DEVWallet, to_operating);\n', '\n', '        //  Swap from EOS is available till the end of 2021\n', '        unSwapped = maxSwap - totalSwapped;\n', '\n', '        //  Burn tokens\n', '        burnedOnFinish = maxSupply - totalSold - totalBounty - totalSwapped - to_dev - to_operating - unSwapped;\n', '        if(burnedOnFinish > 0) {\n', '            Token.burnUnused(burnedOnFinish);\n', '        }\n', '\n', '        isFinished = true;\n', '        emit Finish(burnedOnFinish);\n', '    }\n', '}']