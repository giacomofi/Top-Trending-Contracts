['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-18\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\n', '    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        // If the rewards are null or if the time of the last update is in the future or present, return 0\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '\n', '        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '\n', '        // If too much time elapsed, return the max reward\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '\n', '        // Calculate the reward\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '\n', '        // If the reward is higher than max, set it to max\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '\n', '        // Determine the actual receiver and send funds\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract AccountingEngineLike {\n', '    function surplusBuffer() virtual public view returns (uint256);\n', '    function modifyParameters(bytes32, uint256) virtual external;\n', '}\n', 'abstract contract SAFEEngineLike {\n', '    function globalDebt() virtual external view returns (uint256);\n', '}\n', '\n', 'contract AutoSurplusBufferSetter is IncreasingTreasuryReimbursement {\n', '    // --- Variables ---\n', '    // Whether buffer adjustments are blocked or not\n', '    uint256 public stopAdjustments;\n', '    // Delay between updates after which the reward starts to increase\n', '    uint256 public updateDelay;                                                                 // [seconds]\n', '    // The minimum buffer that must be maintained\n', '    uint256 public minimumBufferSize;                                                           // [rad]\n', '    // The max buffer allowed\n', '    uint256 public maximumBufferSize;                                                           // [rad]\n', '    // Last read global debt\n', '    uint256 public lastRecordedGlobalDebt;                                                      // [rad]\n', '    // Minimum change compared to current globalDebt that allows a new modifyParameters() call\n', '    uint256 public minimumGlobalDebtChange;                                                     // [thousand]\n', '    // Percentage of global debt that should be covered by the buffer\n', '    uint256 public coveredDebt;                                                                 // [thousand]\n', '    // Last timestamp when the median was updated\n', '    uint256 public lastUpdateTime;                                                              // [unix timestamp]\n', '\n', '    // Safe engine contract\n', '    SAFEEngineLike       public safeEngine;\n', '    // Accounting engine contract\n', '    AccountingEngineLike public accountingEngine;\n', '\n', '    constructor(\n', '      address treasury_,\n', '      address safeEngine_,\n', '      address accountingEngine_,\n', '      uint256 minimumBufferSize_,\n', '      uint256 minimumGlobalDebtChange_,\n', '      uint256 coveredDebt_,\n', '      uint256 updateDelay_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        require(both(minimumGlobalDebtChange_ > 0, minimumGlobalDebtChange_ <= THOUSAND), "AutoSurplusBufferSetter/invalid-debt-change");\n', '        require(both(coveredDebt_ > 0, coveredDebt_ <= THOUSAND), "AutoSurplusBufferSetter/invalid-covered-debt");\n', '        require(updateDelay_ > 0, "AutoSurplusBufferSetter/null-update-delay");\n', '\n', '        minimumBufferSize        = minimumBufferSize_;\n', '        maximumBufferSize        = uint(-1);\n', '        coveredDebt              = coveredDebt_;\n', '        minimumGlobalDebtChange  = minimumGlobalDebtChange_;\n', '        updateDelay              = updateDelay_;\n', '\n', '        safeEngine               = SAFEEngineLike(safeEngine_);\n', '        accountingEngine         = AccountingEngineLike(accountingEngine_);\n', '\n', '        emit ModifyParameters(bytes32("minimumBufferSize"), minimumBufferSize);\n', '        emit ModifyParameters(bytes32("maximumBufferSize"), maximumBufferSize);\n', '        emit ModifyParameters(bytes32("coveredDebt"), coveredDebt);\n', '        emit ModifyParameters(bytes32("minimumGlobalDebtChange"), minimumGlobalDebtChange);\n', '        emit ModifyParameters(bytes32("accountingEngine"), address(accountingEngine));\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '      assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Administration ---\n', '    /*\n', '    * @notify Modify an uint256 parameter\n', '    * @param parameter The name of the parameter to change\n', '    * @param val The new parameter value\n', '    */\n', '    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n', '        if (parameter == "minimumBufferSize") minimumBufferSize = val;\n', '        else if (parameter == "maximumBufferSize") {\n', '          require(val >= minimumBufferSize, "AutoSurplusBufferSetter/max-buffer-size-too-small");\n', '          maximumBufferSize = val;\n', '        }\n', '        else if (parameter == "minimumGlobalDebtChange") {\n', '          require(both(val > 0, val <= THOUSAND), "AutoSurplusBufferSetter/invalid-debt-change");\n', '          minimumGlobalDebtChange = val;\n', '        }\n', '        else if (parameter == "coveredDebt") {\n', '          require(both(val > 0, val <= THOUSAND), "AutoSurplusBufferSetter/invalid-covered-debt");\n', '          coveredDebt = val;\n', '        }\n', '        else if (parameter == "baseUpdateCallerReward") {\n', '          require(val <= maxUpdateCallerReward, "AutoSurplusBufferSetter/invalid-min-reward");\n', '          baseUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(val >= baseUpdateCallerReward, "AutoSurplusBufferSetter/invalid-max-reward");\n', '          maxUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(val >= RAY, "AutoSurplusBufferSetter/invalid-reward-increase");\n', '          perSecondCallerRewardIncrease = val;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(val > 0, "AutoSurplusBufferSetter/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = val;\n', '        }\n', '        else if (parameter == "updateDelay") {\n', '          require(val > 0, "AutoSurplusBufferSetter/null-update-delay");\n', '          updateDelay = val;\n', '        }\n', '        else if (parameter == "stopAdjustments") {\n', '          require(val <= 1, "AutoSurplusBufferSetter/invalid-stop-adjust");\n', '          stopAdjustments = val;\n', '        }\n', '        else revert("AutoSurplusBufferSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, val);\n', '    }\n', '    /*\n', '    * @notify Modify an address param\n', '    * @param parameter The name of the parameter to change\n', '    * @param addr The new address for the parameter\n', '    */\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        require(addr != address(0), "AutoSurplusBufferSetter/null-address");\n', '        if (parameter == "accountingEngine") accountingEngine = AccountingEngineLike(addr);\n', '        else if (parameter == "treasury") treasury = StabilityFeeTreasuryLike(addr);\n', '        else revert("AutoSurplusBufferSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(parameter, addr);\n', '    }\n', '\n', '    // --- Math ---\n', '    uint internal constant RAD      = 10 ** 45;\n', '    uint internal constant THOUSAND = 1000;\n', '\n', '    // --- Utils ---\n', '    /*\n', '    * @notify Return the percentage debt change since the last recorded debt amount in the system\n', '    * @param currentGlobalDebt The current globalDebt in the system\n', '    */\n', '    function percentageDebtChange(uint currentGlobalDebt) public view returns (uint256) {\n', '        if (lastRecordedGlobalDebt == 0) return uint(-1);\n', '        uint256 deltaDebt = (currentGlobalDebt >= lastRecordedGlobalDebt) ?\n', '          subtract(currentGlobalDebt, lastRecordedGlobalDebt) : subtract(lastRecordedGlobalDebt, currentGlobalDebt);\n', '        return multiply(deltaDebt, THOUSAND) / lastRecordedGlobalDebt;\n', '    }\n', '    /*\n', '    * @notify Return the upcoming surplus buffer\n', '    * @param currentGlobalDebt The current amount of debt in the system\n', '    * @return newBuffer The new surplus buffer\n', '    */\n', '    function getNewBuffer(uint256 currentGlobalDebt) public view returns (uint newBuffer) {\n', '        if (currentGlobalDebt >= uint(-1) / coveredDebt) return maximumBufferSize;\n', '        newBuffer = multiply(coveredDebt, currentGlobalDebt) / THOUSAND;\n', '        newBuffer = both(newBuffer > maximumBufferSize, maximumBufferSize > 0) ? maximumBufferSize : newBuffer;\n', '        newBuffer = (newBuffer < minimumBufferSize) ? minimumBufferSize : newBuffer;\n', '    }\n', '\n', '    // --- Buffer Adjustment ---\n', '    /*\n', '    * @notify Calculate and set a new surplus buffer\n', '    * @param feeReceiver The address that will receive the SF reward for calling this function\n', '    */\n', '    function adjustSurplusBuffer(address feeReceiver) external {\n', '        // Check if adjustments are forbidden or not\n', '        require(stopAdjustments == 0, "AutoSurplusBufferSetter/cannot-adjust");\n', '        // Check delay between calls\n', '        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), "AutoSurplusBufferSetter/wait-more");\n', "        // Get the caller's reward\n", '        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\n', '        // Store the timestamp of the update\n', '        lastUpdateTime = now;\n', '\n', '        // Get the current global debt\n', '        uint currentGlobalDebt = safeEngine.globalDebt();\n', "        // Check if we didn't already reach the max buffer\n", '        if (both(currentGlobalDebt > lastRecordedGlobalDebt, maximumBufferSize > 0)) {\n', '          require(accountingEngine.surplusBuffer() < maximumBufferSize, "AutoSurplusBufferSetter/max-buffer-reached");\n', '        }\n', '        // Check that global debt changed enough\n', '        require(percentageDebtChange(currentGlobalDebt) >= subtract(THOUSAND, minimumGlobalDebtChange), "AutoSurplusBufferSetter/small-debt-change");\n', '        // Compute the new buffer\n', '        uint newBuffer         = getNewBuffer(currentGlobalDebt);\n', '\n', '        lastRecordedGlobalDebt = currentGlobalDebt;\n', '        accountingEngine.modifyParameters("surplusBuffer", newBuffer);\n', '\n', '        // Pay the caller for updating the rate\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '}']