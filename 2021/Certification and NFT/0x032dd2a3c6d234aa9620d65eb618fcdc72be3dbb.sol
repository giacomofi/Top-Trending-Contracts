['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./ERC721Enumerable.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract HashDemons is ERC721Enumerable, Ownable {\n', '    uint public constant MAX_DEMONS = 6666;\n', '\tstring _baseTokenURI;\n', '\n', '    constructor(string memory baseURI) ERC721("HashDemons", "HASHDEMONS")  {\n', '        setBaseURI(baseURI);\n', '    }\n', '\n', '\n', '    function mintDemons(address _to, uint _count) public payable {\n', '        require(totalSupply() + _count <= MAX_DEMONS, "Max limit");\n', '        require(totalSupply() < MAX_DEMONS, "Sale end");\n', '        require(_count <= 20, "Exceeds 20");\n', '        require(msg.value >= price(_count), "Value below price");\n', '\n', '        for(uint i = 0; i < _count; i++){\n', '            _safeMint(_to, totalSupply());\n', '        }\n', '    }\n', '\n', '    function price(uint _count) public view returns (uint256) {\n', '        uint _id = totalSupply();\n', '        if(_id <= 666 ){\n', '            return 0;\n', '        }\n', '        \n', '        return 13000000000000000 * _count; // 0.013 ETH\n', '    }\n', '\n', '    function _baseURI() internal view virtual override returns (string memory) {\n', '        return _baseTokenURI;\n', '    }\n', '    \n', '    function setBaseURI(string memory baseURI) public onlyOwner {\n', '        _baseTokenURI = baseURI;\n', '    }\n', '\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] memory) {\n', '        uint tokenCount = balanceOf(_owner);\n', '\n', '        uint256[] memory tokensId = new uint256[](tokenCount);\n', '        for(uint i = 0; i < tokenCount; i++){\n', '            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\n', '        }\n', '\n', '        return tokensId;\n', '    }\n', '\n', '    function withdrawAll() public payable onlyOwner {\n', '        require(payable(_msgSender()).send(address(this).balance));\n', '    }\n', '}']