['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', '// File: @openzeppelin/upgrades/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'contract IERC721 is Initializable, IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in `owner`'s account.\n", '     */\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either {approve} or {setApprovalForAll}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either {approve} or {setApprovalForAll}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public;\n', '    function approve(address to, uint256 tokenId) public;\n', '    function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public;\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '    /**\n', '     * @notice Handle the receipt of an NFT\n', '     * @dev The ERC721 smart contract calls this function on the recipient\n', '     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n', '     * otherwise the caller will revert the transaction. The selector to be\n', '     * returned can be obtained as `this.onERC721Received.selector`. This\n', '     * function MAY throw to revert and reject the transfer.\n', '     * Note: the ERC721 contract address is always the message sender.\n', '     * @param operator The address which called `safeTransferFrom` function\n', '     * @param from The address which previously owned the token\n', '     * @param tokenId The NFT identifier which is being transferred\n', '     * @param data Additional data with no specified format\n', '     * @return bytes4 `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n', '    public returns (bytes4);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is Initializable, IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    function initialize() public initializer {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/ERC721.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721 is Initializable, Context, ERC165, IERC721 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using Counters for Counters.Counter;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) private _tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => Counters.Counter) private _ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    function initialize() public initializer {\n', '        ERC165.initialize();\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '    }\n', '\n', '    function _hasBeenInitialized() internal view returns (bool) {\n', '        return supportsInterface(_INTERFACE_ID_ERC721);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner address to query the balance of\n', '     * @return uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _ownedTokensCount[owner].current();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the owner of the specified token ID.\n', '     * @param tokenId uint256 ID of the token to query the owner of\n', '     * @return address currently marked as the owner of the given token ID\n', '     */\n', '    function ownerOf(uint256 tokenId) public view returns (address) {\n', '        address owner = _tokenOwner[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves another address to transfer the given token ID\n', '     * The zero address indicates there is no approved address.\n', '     * There can only be one approved address per token at a given time.\n', '     * Can only be called by the token owner or an approved operator.\n', '     * @param to address to be approved for the given token ID\n', '     * @param tokenId uint256 ID of the token to be approved\n', '     */\n', '    function approve(address to, uint256 tokenId) public {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(owner, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the approved address for a token ID, or zero if no address set\n', '     * Reverts if the token ID does not exist.\n', '     * @param tokenId uint256 ID of the token to query the approval of\n', '     * @return address currently approved for the given token ID\n', '     */\n', '    function getApproved(uint256 tokenId) public view returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Sets or unsets the approval of a given operator\n', '     * An operator is allowed to transfer all tokens of the sender on their behalf.\n', '     * @param to operator address to set the approval\n', '     * @param approved representing the status of the approval to be set\n', '     */\n', '    function setApprovalForAll(address to, bool approved) public {\n', '        require(to != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][to] = approved;\n', '        emit ApprovalForAll(_msgSender(), to, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev Tells whether an operator is approved by a given owner.\n', '     * @param owner owner address which you want to query the approval of\n', '     * @param operator operator address which you want to query the approval of\n', '     * @return bool whether the given operator is approved by the given owner\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the ownership of a given token ID to another address.\n', '     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     * Requires the msg.sender to be the owner, approved, or operator.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transferFrom(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the msg.sender to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the _msgSender() to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransferFrom(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * Requires the _msgSender() to be the owner, approved, or operator\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n', '        _transferFrom(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the specified token exists.\n', '     * @param tokenId uint256 ID of the token to query the existence of\n', '     * @return bool whether the token exists\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        address owner = _tokenOwner[tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the given spender can transfer a given token ID.\n', '     * @param spender address of the spender to query\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @return bool whether the msg.sender is approved for the given token ID,\n', '     * is an operator of the owner, or is the owner of the token\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to safely mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to safely mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * If the target address is a contract, it must implement `onERC721Received`,\n', '     * which is called upon a safe transfer, and return the magic value\n', '     * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '     * the transfer is reverted.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * @param to The address that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _tokenOwner[tokenId] = to;\n', '        _ownedTokensCount[to].increment();\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to transfer ownership of a given token ID to another address.\n', '     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _clearApproval(tokenId);\n', '\n', '        _ownedTokensCount[from].decrement();\n', '        _ownedTokensCount[to].increment();\n', '\n', '        _tokenOwner[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * This is an internal detail of the `ERC721` contract and its use is deprecated.\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        internal returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ));\n', '        if (!success) {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert("ERC721: transfer to non ERC721Receiver implementer");\n', '            }\n', '        } else {\n', '            bytes4 retval = abi.decode(returndata, (bytes4));\n', '            return (retval == _ERC721_RECEIVED);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Private function to clear current approval of a given token ID.\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function _clearApproval(uint256 tokenId) private {\n', '        if (_tokenApprovals[tokenId] != address(0)) {\n', '            _tokenApprovals[tokenId] = address(0);\n', '        }\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract IERC721Enumerable is Initializable, IERC721 {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n', '\n', '    function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/ERC721Enumerable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721Enumerable is Initializable, Context, ERC165, ERC721, IERC721Enumerable {\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) private _ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] private _allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    /**\n', '     * @dev Constructor function.\n', '     */\n', '    function initialize() public initializer {\n', '        require(ERC721._hasBeenInitialized());\n', '        // register the supported interface to conform to ERC721Enumerable via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    function _hasBeenInitialized() internal view returns (bool) {\n', '        return supportsInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n', '     * @param owner address owning the tokens list to be accessed\n', '     * @param index uint256 representing the index to be accessed of the requested tokens list\n', '     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n', '        require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '        return _ownedTokens[owner][index];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the total amount of tokens stored by the contract.\n', '     * @return uint256 representing the total amount of tokens\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of all the tokens in this contract\n', '     * Reverts if the index is greater or equal to the total number of tokens.\n', '     * @param index uint256 representing the index to be accessed of the tokens list\n', '     * @return uint256 token ID at the given index of the tokens list\n', '     */\n', '    function tokenByIndex(uint256 index) public view returns (uint256) {\n', '        require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to transfer ownership of a given token ID to another address.\n', '     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n', '     * @param from current owner of the token\n', '     * @param to address to receive the ownership of the given token ID\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function _transferFrom(address from, address to, uint256 tokenId) internal {\n', '        super._transferFrom(from, to, tokenId);\n', '\n', '        _removeTokenFromOwnerEnumeration(from, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token.\n', '     * Reverts if the given token ID already exists.\n', '     * @param to address the beneficiary that will own the minted token\n', '     * @param tokenId uint256 ID of the token to be minted\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal {\n', '        super._mint(to, tokenId);\n', '\n', '        _addTokenToOwnerEnumeration(to, tokenId);\n', '\n', '        _addTokenToAllTokensEnumeration(tokenId);\n', '    }\n', '\n', '    // /**\n', '    //  * @dev Internal function to burn a specific token.\n', '    //  * Reverts if the token does not exist.\n', '    //  * Deprecated, use {ERC721-_burn} instead.\n', '    //  * @param owner owner of the token to burn\n', '    //  * @param tokenId uint256 ID of the token being burned\n', '    //  */\n', '    // function _burn(address owner, uint256 tokenId) internal {\n', '    //     super._burn(owner, tokenId);\n', '\n', '    //     _removeTokenFromOwnerEnumeration(owner, tokenId);\n', '    //     // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n', '    //     _ownedTokensIndex[tokenId] = 0;\n', '\n', '    //     // _removeTokenFromAllTokensEnumeration(tokenId);\n', '    // }\n', '\n', '    /**\n', '     * @dev Gets the list of token IDs of the requested owner.\n', '     * @param owner address owning the tokens\n', '     * @return uint256[] List of token IDs owned by the requested address\n', '     */\n', '    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n', '        return _ownedTokens[owner];\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n", '     * @param to address representing the new owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n', '        _ownedTokens[to].push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's token tracking data structures.\n", '     * @param tokenId uint256 ID of the token to be added to the tokens list\n', '     */\n', '    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '        _allTokensIndex[tokenId] = _allTokens.length;\n', '        _allTokens.push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n", '     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n', '     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n', '     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', "        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n", '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary\n', '        if (tokenIndex != lastTokenIndex) {\n', '            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '        }\n', '\n', '        // This also deletes the contents at the last position of the array\n', '        _ownedTokens[from].length--;\n', '\n', "        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\n", '        // lastTokenId, or just over the end of the array if the token was the last one).\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's token tracking data structures.\n", '     * This has O(1) time complexity, but alters the order of the _allTokens array.\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list\n', '     */\n', '    // function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '    //     // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n', '    //     // then delete the last slot (swap and pop).\n', '\n', '    //     uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    //     uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '    //     // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n', '    //     // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n', "    //     // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n", '    //     uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '    //     _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "    //     _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '\n', '    //     // This also deletes the contents at the last position of the array\n', '    //     _allTokens.length--;\n', '    //     _allTokensIndex[tokenId] = 0;\n', '    // }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract IERC721Metadata is Initializable, IERC721 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '// File: contracts/ERC721Metadata.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC721Metadata is Initializable, Context, ERC165, ERC721, IERC721Metadata {\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Optional mapping for token URIs\n', '    mapping(uint256 => string) private _tokenURIs;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /**\n', '     * @dev Constructor function\n', '     */\n', '    function initialize(string memory name, string memory symbol) public initializer {\n', '        require(ERC721._hasBeenInitialized());\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '    }\n', '\n', '    function _hasBeenInitialized() internal view returns (bool) {\n', '        return supportsInterface(_INTERFACE_ID_ERC721_METADATA);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token name.\n', '     * @return string representing the token name\n', '     */\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token symbol.\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an URI for a given token ID.\n', '     * Throws if the token ID does not exist. May return an empty string.\n', '     * @param tokenId uint256 ID of the token to query\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '        return _tokenURIs[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the token URI for a given token.\n', '     * Reverts if the token ID does not exist.\n', '     * @param tokenId uint256 ID of the token to set its URI\n', '     * @param uri string URI to assign\n', '     */\n', '    function _setTokenURI(uint256 tokenId, string memory uri) internal {\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = uri;\n', '    }\n', '\n', '    // *\n', '    //  * @dev Internal function to burn a specific token.\n', '    //  * Reverts if the token does not exist.\n', '    //  * Deprecated, use _burn(uint256) instead.\n', '    //  * @param owner owner of the token to burn\n', '    //  * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '     \n', '    // function _burn(address owner, uint256 tokenId) internal {\n', '    //     super._burn(owner, tokenId);\n', '\n', '    //     // Clear metadata (if any)\n', '    //     if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '    //         delete _tokenURIs[tokenId];\n', '    //     }\n', '    // }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// File: contracts/AsyncArtwork_v2.sol\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '\n', '\n', '// interface for the v1 contract\n', 'interface AsyncArtwork_v1 {\n', '    function getControlToken(uint256 controlTokenId)\n', '        external\n', '        view\n', '        returns (int256[] memory);\n', '\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '// Copyright (C) 2020 Asynchronous Art, Inc.\n', '// GNU General Public License v3.0\n', '// Full notice https://github.com/asyncart/async-contracts/blob/master/LICENSE\n', '\n', 'contract AsyncArtwork_v2 is\n', '    Initializable,\n', '    ERC721,\n', '    ERC721Enumerable,\n', '    ERC721Metadata\n', '{\n', '    // An event whenever the platform address is updated\n', '    event PlatformAddressUpdated(address platformAddress);\n', '\n', '    event PermissionUpdated(\n', '        uint256 tokenId,\n', '        address tokenOwner,\n', '        address permissioned\n', '    );\n', '\n', '    // An event whenever a creator is whitelisted with the token id and the layer count\n', '    event CreatorWhitelisted(\n', '        uint256 tokenId,\n', '        uint256 layerCount,\n', '        address creator\n', '    );\n', '\n', '    // An event whenever royalty amount for a token is updated\n', '    event PlatformSalePercentageUpdated(\n', '        uint256 tokenId,\n', '        uint256 platformFirstPercentage,\n', '        uint256 platformSecondPercentage\n', '    );\n', '\n', '    event DefaultPlatformSalePercentageUpdated(\n', '        uint256 defaultPlatformFirstSalePercentage,\n', '        uint256 defaultPlatformSecondSalePercentage\n', '    );\n', '\n', '    // An event whenever artist secondary sale percentage is updated\n', '    event ArtistSecondSalePercentUpdated(uint256 artistSecondPercentage);\n', '\n', '    // An event whenever a bid is proposed\n', '    event BidProposed(uint256 tokenId, uint256 bidAmount, address bidder);\n', '\n', '    // An event whenever an bid is withdrawn\n', '    event BidWithdrawn(uint256 tokenId);\n', '\n', '    // An event whenever a buy now price has been set\n', '    event BuyPriceSet(uint256 tokenId, uint256 price);\n', '\n', '    // An event when a token has been sold\n', '    event TokenSale(\n', '        // the id of the token\n', '        uint256 tokenId,\n', '        // the price that the token was sold for\n', '        uint256 salePrice,\n', '        // the address of the buyer\n', '        address buyer\n', '    );\n', '\n', '    // An event when a token(s) first sale requirement has been waived\n', '    event FirstSaleWaived(\n', '        // the ids of the token\n', '        uint256[] tokenIds\n', '    );\n', '\n', '    // An event whenever a control token has been updated\n', '    event ControlLeverUpdated(\n', '        // the id of the token\n', '        uint256 tokenId,\n', '        // an optional amount that the updater sent to boost priority of the rendering\n', '        uint256 priorityTip,\n', '        // the number of times this control lever can now be updated\n', '        int256 numRemainingUpdates,\n', '        // the ids of the levers that were updated\n', '        uint256[] leverIds,\n', '        // the previous values that the levers had before this update (for clients who want to animate the change)\n', '        int256[] previousValues,\n', '        // the new updated value\n', '        int256[] updatedValues\n', '    );\n', '\n', '    // struct for a token that controls part of the artwork\n', '    struct ControlToken {\n', '        // number that tracks how many levers there are\n', '        uint256 numControlLevers;\n', '        // The number of update calls this token has (-1 for infinite)\n', '        int256 numRemainingUpdates;\n', '        // false by default, true once instantiated\n', '        bool exists;\n', '        // false by default, true once setup by the artist\n', '        bool isSetup;\n', '        // the levers that this control token can use\n', '        mapping(uint256 => ControlLever) levers;\n', '    }\n', '\n', '    // struct for a lever on a control token that can be changed\n', '    struct ControlLever {\n', '        // // The minimum value this token can have (inclusive)\n', '        int256 minValue;\n', '        // The maximum value this token can have (inclusive)\n', '        int256 maxValue;\n', '        // The current value for this token\n', '        int256 currentValue;\n', '        // false by default, true once instantiated\n', '        bool exists;\n', '    }\n', '\n', '    // struct for a pending bid\n', '    struct PendingBid {\n', '        // the address of the bidder\n', '        address payable bidder;\n', '        // the amount that they bid\n', '        uint256 amount;\n', '        // false by default, true once instantiated\n', '        bool exists;\n', '    }\n', '\n', '    struct WhitelistReservation {\n', '        // the address of the creator\n', '        address creator;\n', "        // the amount of layers they're expected to mint\n", '        uint256 layerCount;\n', '    }\n', '\n', '    // track whether this token was sold the first time or not (used for determining whether to use first or secondary sale percentage)\n', '    mapping(uint256 => bool) public tokenDidHaveFirstSale;\n', "    // if a token's URI has been locked or not\n", '    mapping(uint256 => bool) public tokenURILocked;\n', '    // map control token ID to its buy price\n', '    mapping(uint256 => uint256) public buyPrices;\n', '    // mapping of addresses to credits for failed transfers\n', '    mapping(address => uint256) public failedTransferCredits;\n', '    // mapping of tokenId to percentage of sale that the platform gets on first sales\n', '    mapping(uint256 => uint256) public platformFirstSalePercentages;\n', '    // mapping of tokenId to percentage of sale that the platform gets on secondary sales\n', '    mapping(uint256 => uint256) public platformSecondSalePercentages;\n', '    // what tokenId creators are allowed to mint (and how many layers)\n', '    mapping(uint256 => WhitelistReservation) public creatorWhitelist;\n', '    // for each token, holds an array of the creator collaborators. For layer tokens it will likely just be [artist], for master tokens it may hold multiples\n', '    mapping(uint256 => address payable[]) public uniqueTokenCreators;\n', '    // map a control token ID to its highest bid\n', '    mapping(uint256 => PendingBid) public pendingBids;\n', '    // map a control token id to a control token struct\n', '    mapping(uint256 => ControlToken) public controlTokenMapping;\n', '    // mapping of addresses that are allowed to control tokens on your behalf\n', '    mapping(address => mapping(uint256 => address))\n', '        public permissionedControllers;\n', '    // the percentage of sale that an artist gets on secondary sales\n', '    uint256 public artistSecondSalePercentage;\n', '    // gets incremented to placehold for tokens not minted yet\n', '    uint256 public expectedTokenSupply;\n', '    // the minimum % increase for new bids coming\n', '    uint256 public minBidIncreasePercent;\n', '    // the address of the platform (for receving commissions and royalties)\n', '    address payable public platformAddress;\n', '    // the address of the contract that can upgrade from v1 to v2 tokens\n', '    address public upgraderAddress;\n', '    // the address of the contract that can whitelist artists to mint\n', '    address public minterAddress;\n', '\n', '    // v3 vairables\n', '    uint256 public defaultPlatformFirstSalePercentage;\n', '    uint256 public defaultPlatformSecondSalePercentage;\n', '\n', '    function setup(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint256 initialExpectedTokenSupply,\n', '        address _upgraderAddress\n', '    ) public initializer {\n', '        ERC721.initialize();\n', '        ERC721Enumerable.initialize();\n', '        ERC721Metadata.initialize(name, symbol);\n', '\n', '        // starting royalty amounts\n', '        artistSecondSalePercentage = 10;\n', '\n', '        // intitialize the minimum bid increase percent\n', '        minBidIncreasePercent = 1;\n', '\n', '        // by default, the platformAddress is the address that mints this contract\n', '        platformAddress = msg.sender;\n', '\n', '        // set the upgrader address\n', '        upgraderAddress = _upgraderAddress;\n', '\n', '        // set the initial expected token supply\n', '        expectedTokenSupply = initialExpectedTokenSupply;\n', '\n', '        require(expectedTokenSupply > 0);\n', '    }\n', '\n', '    // modifier for only allowing the platform to make a call\n', '    modifier onlyPlatform() {\n', '        require(msg.sender == platformAddress);\n', '        _;\n', '    }\n', '\n', '    // modifier for only allowing the minter to make a call\n', '    modifier onlyMinter() {\n', '        require(msg.sender == minterAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelistedCreator(uint256 masterTokenId, uint256 layerCount) {\n', '        require(creatorWhitelist[masterTokenId].creator == msg.sender);\n', '        require(creatorWhitelist[masterTokenId].layerCount == layerCount);\n', '        _;\n', '    }\n', '\n', '    function setExpectedTokenSupply(uint256 newExpectedTokenSupply)\n', '        external\n', '        onlyPlatform\n', '    {\n', '        expectedTokenSupply = newExpectedTokenSupply;\n', '    }\n', '\n', '    // reserve a tokenID and layer count for a creator. Define a platform royalty percentage per art piece (some pieces have higher or lower amount)\n', '    function whitelistTokenForCreator(\n', '        address creator,\n', '        uint256 masterTokenId,\n', '        uint256 layerCount,\n', '        uint256 platformFirstSalePercentage,\n', '        uint256 platformSecondSalePercentage\n', '    ) external onlyMinter {\n', "        // the tokenID we're reserving must be the current expected token supply\n", '        require(masterTokenId == expectedTokenSupply);\n', '        // reserve the tokenID for this creator\n', '        creatorWhitelist[masterTokenId] = WhitelistReservation(\n', '            creator,\n', '            layerCount\n', '        );\n', '        // increase the expected token supply\n', '        expectedTokenSupply = masterTokenId.add(layerCount).add(1);\n', '        // define the platform percentages for this token here\n', '        platformFirstSalePercentages[\n', '            masterTokenId\n', '        ] = platformFirstSalePercentage;\n', '        platformSecondSalePercentages[\n', '            masterTokenId\n', '        ] = platformSecondSalePercentage;\n', '\n', '        emit CreatorWhitelisted(masterTokenId, layerCount, creator);\n', '    }\n', '\n', '    // Allows the platform to change the minter address\n', '    function updateMinterAddress(address newMinterAddress)\n', '        external\n', '        onlyPlatform\n', '    {\n', '        minterAddress = newMinterAddress;\n', '    }\n', '\n', '    // Allows the current platform address to update to something different\n', '    function updatePlatformAddress(address payable newPlatformAddress)\n', '        external\n', '        onlyPlatform\n', '    {\n', '        platformAddress = newPlatformAddress;\n', '\n', '        emit PlatformAddressUpdated(newPlatformAddress);\n', '    }\n', '\n', '    // Allows platform to waive the first sale requirement for a token (for charity events, special cases, etc)\n', '    function waiveFirstSaleRequirement(uint256[] calldata tokenIds)\n', '        external\n', '        onlyPlatform\n', '    {\n', "        // This allows the token sale proceeds to go to the current owner (rather than be distributed amongst the token's creators)\n", '        for (uint256 k = 0; k < tokenIds.length; k++) {\n', '            tokenDidHaveFirstSale[tokenIds[k]] = true;\n', '        }\n', '\n', '        emit FirstSaleWaived(tokenIds);\n', '    }\n', '\n', '    // Allows platform to change the royalty percentage for a specific token\n', '    function updatePlatformSalePercentage(\n', '        uint256 tokenId,\n', '        uint256 platformFirstSalePercentage,\n', '        uint256 platformSecondSalePercentage\n', '    ) external onlyPlatform {\n', '        // set the percentages for this token\n', '        platformFirstSalePercentages[tokenId] = platformFirstSalePercentage;\n', '        platformSecondSalePercentages[tokenId] = platformSecondSalePercentage;\n', '        // emit an event to notify that the platform percent for this token has changed\n', '        emit PlatformSalePercentageUpdated(\n', '            tokenId,\n', '            platformFirstSalePercentage,\n', '            platformSecondSalePercentage\n', '        );\n', '    }\n', '\n', '    // Allows platform to change the default sales percentages\n', '    function updateDefaultPlatformSalePercentage(\n', '        uint256 _defaultPlatformFirstSalePercentage,\n', '        uint256 _defaultPlatformSecondSalePercentage\n', '    ) external onlyPlatform {\n', '        defaultPlatformFirstSalePercentage = _defaultPlatformFirstSalePercentage;\n', '        defaultPlatformSecondSalePercentage = _defaultPlatformSecondSalePercentage;\n', '\n', '        // emit an event to notify that the platform percent has changed\n', '        emit DefaultPlatformSalePercentageUpdated(\n', '            defaultPlatformFirstSalePercentage,\n', '            defaultPlatformSecondSalePercentage\n', '        );\n', '    }\n', '\n', '    // Allows the platform to change the minimum percent increase for incoming bids\n', '    function updateMinimumBidIncreasePercent(uint256 _minBidIncreasePercent)\n', '        external\n', '        onlyPlatform\n', '    {\n', '        require(\n', '            (_minBidIncreasePercent > 0) && (_minBidIncreasePercent <= 50),\n', '            "Bid increases must be within 0-50%"\n', '        );\n', '        // set the new bid increase percent\n', '        minBidIncreasePercent = _minBidIncreasePercent;\n', '    }\n', '\n', "    // Allow the platform to update a token's URI if it's not locked yet (for fixing tokens post mint process)\n", '    function updateTokenURI(uint256 tokenId, string calldata tokenURI)\n', '        external\n', '        onlyPlatform\n', '    {\n', '        // ensure that this token exists\n', '        require(_exists(tokenId));\n', '        // ensure that the URI for this token is not locked yet\n', '        require(tokenURILocked[tokenId] == false);\n', '        // update the token URI\n', '        super._setTokenURI(tokenId, tokenURI);\n', '    }\n', '\n', "    // Locks a token's URI from being updated\n", '    function lockTokenURI(uint256 tokenId) external onlyPlatform {\n', '        // ensure that this token exists\n', '        require(_exists(tokenId));\n', "        // lock this token's URI from being changed\n", '        tokenURILocked[tokenId] = true;\n', '    }\n', '\n', '    // Allows platform to change the percentage that artists receive on secondary sales\n', '    function updateArtistSecondSalePercentage(\n', '        uint256 _artistSecondSalePercentage\n', '    ) external onlyPlatform {\n', '        // update the percentage that artists get on secondary sales\n', '        artistSecondSalePercentage = _artistSecondSalePercentage;\n', '        // emit an event to notify that the artist second sale percent has updated\n', '        emit ArtistSecondSalePercentUpdated(artistSecondSalePercentage);\n', '    }\n', '\n', '    function setupControlToken(\n', '        uint256 controlTokenId,\n', '        string calldata controlTokenURI,\n', '        int256[] calldata leverMinValues,\n', '        int256[] calldata leverMaxValues,\n', '        int256[] calldata leverStartValues,\n', '        int256 numAllowedUpdates,\n', '        address payable[] calldata additionalCollaborators\n', '    ) external {\n', '        // Hard cap the number of levers a single control token can have\n', '        require(leverMinValues.length <= 500, "Too many control levers.");\n', '        // Hard cap the number of collaborators a single control token can have\n', '        require(\n', '            additionalCollaborators.length <= 50,\n', '            "Too many collaborators."\n', '        );\n', '        // ensure that this token is not setup yet\n', '        require(\n', '            controlTokenMapping[controlTokenId].isSetup == false,\n', '            "Already setup"\n', '        );\n', '        // ensure that only the control token artist is attempting this mint\n', '        require(\n', '            uniqueTokenCreators[controlTokenId][0] == msg.sender,\n', '            "Must be control token artist"\n', '        );\n', '        // enforce that the length of all the array lengths are equal\n', '        require(\n', '            (leverMinValues.length == leverMaxValues.length) &&\n', '                (leverMaxValues.length == leverStartValues.length),\n', '            "Values array mismatch"\n', '        );\n', '        // require the number of allowed updates to be infinite (-1) or some finite number\n', '        require(\n', '            (numAllowedUpdates == -1) || (numAllowedUpdates > 0),\n', '            "Invalid allowed updates"\n', '        );\n', '        // mint the control token here\n', '        super._safeMint(msg.sender, controlTokenId);\n', '        // set token URI\n', '        super._setTokenURI(controlTokenId, controlTokenURI);\n', '        // create the control token\n', '        controlTokenMapping[controlTokenId] = ControlToken(\n', '            leverStartValues.length,\n', '            numAllowedUpdates,\n', '            true,\n', '            true\n', '        );\n', '        // create the control token levers now\n', '        for (uint256 k = 0; k < leverStartValues.length; k++) {\n', '            // enforce that maxValue is greater than or equal to minValue\n', '            require(\n', '                leverMaxValues[k] >= leverMinValues[k],\n', '                "Max val must >= min"\n', '            );\n', '            // enforce that currentValue is valid\n', '            require(\n', '                (leverStartValues[k] >= leverMinValues[k]) &&\n', '                    (leverStartValues[k] <= leverMaxValues[k]),\n', '                "Invalid start val"\n', '            );\n', '            // add the lever to this token\n', '            controlTokenMapping[controlTokenId].levers[k] = ControlLever(\n', '                leverMinValues[k],\n', '                leverMaxValues[k],\n', '                leverStartValues[k],\n', '                true\n', '            );\n', '        }\n', '        // the control token artist can optionally specify additional collaborators on this layer\n', '        for (uint256 i = 0; i < additionalCollaborators.length; i++) {\n', "            // can't provide burn address as collaborator\n", '            require(additionalCollaborators[i] != address(0));\n', '\n', '            uniqueTokenCreators[controlTokenId].push(\n', '                additionalCollaborators[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    // upgrade a token from the v1 contract to this v2 version\n', '    function upgradeV1Token(\n', '        uint256 tokenId,\n', '        address v1Address,\n', '        bool isControlToken,\n', '        address to,\n', '        uint256 platformFirstPercentageForToken,\n', '        uint256 platformSecondPercentageForToken,\n', '        bool hasTokenHadFirstSale,\n', '        address payable[] calldata uniqueTokenCreatorsForToken\n', '    ) external {\n', '        // get reference to v1 token contract\n', '        AsyncArtwork_v1 v1Token = AsyncArtwork_v1(v1Address);\n', '\n', '        // require that only the upgrader address is calling this method\n', '        require(msg.sender == upgraderAddress, "Only upgrader can call.");\n', '        \n', '        // preserve the unique token creators\n', '        uniqueTokenCreators[tokenId] = uniqueTokenCreatorsForToken;\n', '\n', '        if (isControlToken) {\n', "            // preserve the control token details if it's a control token\n", '            int256[] memory controlToken = v1Token.getControlToken(tokenId);\n', '            // Require control token to be a valid size (multiple of 3)\n', '            require(controlToken.length % 3 == 0, "Invalid control token.");\n', '            // Require control token to have at least 1 lever\n', '            require(controlToken.length > 0, "Control token must have levers");\n', '            // Setup the control token\n', '            // Use -1 for numRemainingUpdates since v1 tokens were infinite use\n', '            controlTokenMapping[tokenId] = ControlToken(\n', '                controlToken.length / 3,\n', '                -1,\n', '                true,\n', '                true\n', '            );\n', '\n', '            // set each lever for the control token. getControlToken returns levers like:\n', '            // [minValue, maxValue, curValue, minValue, maxValue, curValue, ...] so they always come in groups of 3\n', '            for (uint256 k = 0; k < controlToken.length; k += 3) {\n', '                controlTokenMapping[tokenId].levers[k / 3] = ControlLever(\n', '                    controlToken[k],\n', '                    controlToken[k + 1],\n', '                    controlToken[k + 2],\n', '                    true\n', '                );\n', '            }\n', '        }\n', '\n', '        // Set the royalty percentage for this token\n', '        platformFirstSalePercentages[tokenId] = platformFirstPercentageForToken;\n', '\n', '        platformSecondSalePercentages[\n', '            tokenId\n', '        ] = platformSecondPercentageForToken;\n', '\n', '        // whether this token has already had its first sale\n', '        tokenDidHaveFirstSale[tokenId] = hasTokenHadFirstSale;\n', '\n', '        // Mint and transfer the token to the original v1 token owner\n', '        super._safeMint(to, tokenId);\n', '\n', '        // set the same token URI\n', '        super._setTokenURI(tokenId, v1Token.tokenURI(tokenId));\n', '    }\n', '\n', '    function mintArtwork(\n', '        uint256 masterTokenId,\n', '        string calldata artworkTokenURI,\n', '        address payable[] calldata controlTokenArtists,\n', '        address payable[] calldata uniqueArtists\n', '    )\n', '        external\n', '        onlyWhitelistedCreator(masterTokenId, controlTokenArtists.length)\n', '    {\n', "        // Can't mint a token with ID 0 anymore\n", '        require(masterTokenId > 0);\n', '        // Mint the token that represents ownership of the entire artwork\n', '        super._safeMint(msg.sender, masterTokenId);\n', '        // set the token URI for this art\n', '        super._setTokenURI(masterTokenId, artworkTokenURI);\n', '        // set the unique artists array for future royalties\n', '        uniqueTokenCreators[masterTokenId] = uniqueArtists;\n', '        // iterate through all control token URIs (1 for each control token)\n', '        for (uint256 i = 0; i < controlTokenArtists.length; i++) {\n', "            // can't provide burn address as artist\n", '            require(controlTokenArtists[i] != address(0));\n', '            // determine the tokenID for this control token\n', '            uint256 controlTokenId = masterTokenId + i + 1;\n', '            // add this control token artist to the unique creator list for that control token\n', '            uniqueTokenCreators[controlTokenId].push(controlTokenArtists[i]);\n', '        }\n', '    }\n', '\n', '    // Bidder functions\n', '    function bid(uint256 tokenId) external payable {\n', "        // don't allow bids of 0\n", '        require(msg.value > 0);\n', "        // don't let owners/approved bid on their own tokens\n", '        require(_isApprovedOrOwner(msg.sender, tokenId) == false);\n', "        // check if there's a high bid\n", '        if (pendingBids[tokenId].exists) {\n', '            // enforce that this bid is higher by at least the minimum required percent increase\n', '            require(\n', '                msg.value >=\n', '                    (\n', '                        pendingBids[tokenId]\n', '                            .amount\n', '                            .mul(minBidIncreasePercent.add(100))\n', '                            .div(100)\n', '                    ),\n', '                "Bid must increase by min %"\n', '            );\n', '            // Return bid amount back to bidder\n', '            safeFundsTransfer(\n', '                pendingBids[tokenId].bidder,\n', '                pendingBids[tokenId].amount\n', '            );\n', '        }\n', '        // set the new highest bid\n', '        pendingBids[tokenId] = PendingBid(msg.sender, msg.value, true);\n', '        // Emit event for the bid proposal\n', '        emit BidProposed(tokenId, msg.value, msg.sender);\n', '    }\n', '\n', '    // allows an address with a pending bid to withdraw it\n', '    function withdrawBid(uint256 tokenId) external {\n', "        // check that there is a bid from the sender to withdraw (also allows platform address to withdraw a bid on someone's behalf)\n", '        require(\n', '            (pendingBids[tokenId].bidder == msg.sender) ||\n', '                (msg.sender == platformAddress)\n', '        );\n', '        // attempt to withdraw the bid\n', '        _withdrawBid(tokenId);\n', '    }\n', '\n', '    function _withdrawBid(uint256 tokenId) internal {\n', '        require(pendingBids[tokenId].exists);\n', '        // Return bid amount back to bidder\n', '        safeFundsTransfer(\n', '            pendingBids[tokenId].bidder,\n', '            pendingBids[tokenId].amount\n', '        );\n', '        // clear highest bid\n', '        pendingBids[tokenId] = PendingBid(address(0), 0, false);\n', '        // emit an event when the highest bid is withdrawn\n', '        emit BidWithdrawn(tokenId);\n', '    }\n', '\n', '    // Buy the artwork for the currently set price\n', "    // Allows the buyer to specify an expected remaining uses they'll accept\n", '    function takeBuyPrice(uint256 tokenId, int256 expectedRemainingUpdates)\n', '        external\n', '        payable\n', '    {\n', "        // don't let owners/approved buy their own tokens\n", '        require(_isApprovedOrOwner(msg.sender, tokenId) == false);\n', '        // get the sale amount\n', '        uint256 saleAmount = buyPrices[tokenId];\n', '        // check that there is a buy price\n', '        require(saleAmount > 0);\n', '        // check that the buyer sent exact amount to purchase\n', '        require(msg.value == saleAmount);\n', '        // if this is a control token\n', '        if (controlTokenMapping[tokenId].exists) {\n', '            // ensure that the remaining uses on the token is equal to what buyer expects\n', '            require(\n', '                controlTokenMapping[tokenId].numRemainingUpdates ==\n', '                    expectedRemainingUpdates\n', '            );\n', '        }\n', "        // Return all highest bidder's money\n", '        if (pendingBids[tokenId].exists) {\n', '            // Return bid amount back to bidder\n', '            safeFundsTransfer(\n', '                pendingBids[tokenId].bidder,\n', '                pendingBids[tokenId].amount\n', '            );\n', '            // clear highest bid\n', '            pendingBids[tokenId] = PendingBid(address(0), 0, false);\n', '        }\n', '        onTokenSold(tokenId, saleAmount, msg.sender);\n', '    }\n', '\n', '    // Take an amount and distribute it evenly amongst a list of creator addresses\n', '    function distributeFundsToCreators(\n', '        uint256 amount,\n', '        address payable[] memory creators\n', '    ) private {\n', '        if (creators.length > 0) {\n', '            uint256 creatorShare = amount.div(creators.length);\n', '\n', '            for (uint256 i = 0; i < creators.length; i++) {\n', '                safeFundsTransfer(creators[i], creatorShare);\n', '            }\n', '        }\n', '    }\n', '\n', '    // When a token is sold via list price or bid. Distributes the sale amount to the unique token creators and transfer\n', '    // the token to the new owner\n', '    function onTokenSold(\n', '        uint256 tokenId,\n', '        uint256 saleAmount,\n', '        address to\n', '    ) private {\n', '        // if the first sale already happened, then give the artist + platform the secondary royalty percentage\n', '        if (tokenDidHaveFirstSale[tokenId]) {\n', '            // give platform its secondary sale percentage\n', '            uint256 platformAmount;\n', '            if (platformSecondSalePercentages[tokenId] == 0) {\n', '                // default amount\n', '                platformAmount = saleAmount\n', '                    .mul(defaultPlatformSecondSalePercentage)\n', '                    .div(100);\n', '            } else {\n', '                platformAmount = saleAmount\n', '                    .mul(platformSecondSalePercentages[tokenId])\n', '                    .div(100);\n', '            }\n', '\n', '            safeFundsTransfer(platformAddress, platformAmount);\n', '            // distribute the creator royalty amongst the creators (all artists involved for a base token, sole artist creator for layer )\n', '            uint256 creatorAmount =\n', '                saleAmount.mul(artistSecondSalePercentage).div(100);\n', '            distributeFundsToCreators(\n', '                creatorAmount,\n', '                uniqueTokenCreators[tokenId]\n', '            );\n', '            // cast the owner to a payable address\n', '            address payable payableOwner = address(uint160(ownerOf(tokenId)));\n', '            // transfer the remaining amount to the owner of the token\n', '            safeFundsTransfer(\n', '                payableOwner,\n', '                saleAmount.sub(platformAmount).sub(creatorAmount)\n', '            );\n', '        } else {\n', '            tokenDidHaveFirstSale[tokenId] = true;\n', '\n', '            // give platform its first sale percentage\n', '            uint256 platformAmount;\n', '            if (platformFirstSalePercentages[tokenId] == 0) {\n', '                // default value\n', '                platformAmount = saleAmount\n', '                    .mul(defaultPlatformFirstSalePercentage)\n', '                    .div(100);\n', '            } else {\n', '                platformAmount = saleAmount\n', '                    .mul(platformFirstSalePercentages[tokenId])\n', '                    .div(100);\n', '            }\n', '\n', '            safeFundsTransfer(platformAddress, platformAmount);\n', '            // this is a token first sale, so distribute the remaining funds to the unique token creators of this token\n', "            // (if it's a base token it will be all the unique creators, if it's a control token it will be that single artist)\n", '            distributeFundsToCreators(\n', '                saleAmount.sub(platformAmount),\n', '                uniqueTokenCreators[tokenId]\n', '            );\n', '        }\n', '        // clear highest bid\n', '        pendingBids[tokenId] = PendingBid(address(0), 0, false);\n', '        // Transfer token to msg.sender\n', '        _transferFrom(ownerOf(tokenId), to, tokenId);\n', '        // Emit event\n', '        emit TokenSale(tokenId, saleAmount, to);\n', '    }\n', '\n', '    // Owner functions\n', '    // Allow owner to accept the highest bid for a token\n', '    function acceptBid(uint256 tokenId, uint256 minAcceptedAmount) external {\n', '        // check if sender is owner/approved of token\n', '        require(_isApprovedOrOwner(msg.sender, tokenId));\n', "        // check if there's a bid to accept\n", '        require(pendingBids[tokenId].exists);\n', '        // check that the current pending bid amount is at least what the accepting owner expects\n', '        require(pendingBids[tokenId].amount >= minAcceptedAmount);\n', '        // process the sale\n', '        onTokenSold(\n', '            tokenId,\n', '            pendingBids[tokenId].amount,\n', '            pendingBids[tokenId].bidder\n', '        );\n', '    }\n', '\n', '    // Allows owner of a control token to set an immediate buy price. Set to 0 to reset.\n', '    function makeBuyPrice(uint256 tokenId, uint256 amount) external {\n', '        // check if sender is owner/approved of token\n', '        require(_isApprovedOrOwner(msg.sender, tokenId));\n', '        // set the buy price\n', '        buyPrices[tokenId] = amount;\n', '        // emit event\n', '        emit BuyPriceSet(tokenId, amount);\n', '    }\n', '\n', '    // return the number of times that a control token can be used\n', '    function getNumRemainingControlUpdates(uint256 controlTokenId)\n', '        external\n', '        view\n', '        returns (int256)\n', '    {\n', '        require(\n', '            controlTokenMapping[controlTokenId].isSetup,\n', '            "Token does not exist."\n', '        );\n', '\n', '        return controlTokenMapping[controlTokenId].numRemainingUpdates;\n', '    }\n', '\n', '    // return the min, max, and current value of a control lever\n', '    function getControlToken(uint256 controlTokenId)\n', '        external\n', '        view\n', '        returns (int256[] memory)\n', '    {\n', '        require(\n', '            controlTokenMapping[controlTokenId].isSetup,\n', '            "Token does not exist."\n', '        );\n', '\n', '        ControlToken storage controlToken = controlTokenMapping[controlTokenId];\n', '\n', '        int256[] memory returnValues =\n', '            new int256[](controlToken.numControlLevers.mul(3));\n', '        uint256 returnValIndex = 0;\n', '\n', '        // iterate through all the control levers for this control token\n', '        for (uint256 i = 0; i < controlToken.numControlLevers; i++) {\n', '            returnValues[returnValIndex] = controlToken.levers[i].minValue;\n', '            returnValIndex = returnValIndex.add(1);\n', '\n', '            returnValues[returnValIndex] = controlToken.levers[i].maxValue;\n', '            returnValIndex = returnValIndex.add(1);\n', '\n', '            returnValues[returnValIndex] = controlToken.levers[i].currentValue;\n', '            returnValIndex = returnValIndex.add(1);\n', '        }\n', '\n', '        return returnValues;\n', '    }\n', '\n', '    // anyone can grant permission to another address to control a specific token on their behalf. Set to Address(0) to reset.\n', '    function grantControlPermission(uint256 tokenId, address permissioned)\n', '        external\n', '    {\n', '        permissionedControllers[msg.sender][tokenId] = permissioned;\n', '\n', '        emit PermissionUpdated(tokenId, msg.sender, permissioned);\n', '    }\n', '\n', '    // Allows owner (or permissioned user) of a control token to update its lever values\n', '    // Optionally accept a payment to increase speed of rendering priority\n', '    function useControlToken(\n', '        uint256 controlTokenId,\n', '        uint256[] calldata leverIds,\n', '        int256[] calldata newValues\n', '    ) external payable {\n', "        // check if sender is owner/approved of token OR if they're a permissioned controller for the token owner\n", '        require(\n', '            _isApprovedOrOwner(msg.sender, controlTokenId) ||\n', '                (permissionedControllers[ownerOf(controlTokenId)][\n', '                    controlTokenId\n', '                ] == msg.sender),\n', '            "Owner or permissioned only"\n', '        );\n', '        // check if control exists\n', '        require(\n', '            controlTokenMapping[controlTokenId].isSetup,\n', '            "Token does not exist."\n', '        );\n', '        // get the control token reference\n', '        ControlToken storage controlToken = controlTokenMapping[controlTokenId];\n', '        // check that number of uses for control token is either infinite or is positive\n', '        require(\n', '            (controlToken.numRemainingUpdates == -1) ||\n', '                (controlToken.numRemainingUpdates > 0),\n', '            "No more updates allowed"\n', '        );\n', '        // collect the previous lever values for the event emit below\n', '        int256[] memory previousValues = new int256[](newValues.length);\n', '\n', '        for (uint256 i = 0; i < leverIds.length; i++) {\n', '            // get the control lever\n', '            ControlLever storage lever =\n', '                controlTokenMapping[controlTokenId].levers[leverIds[i]];\n', '\n', '            // Enforce that the new value is valid\n', '            require(\n', '                (newValues[i] >= lever.minValue) &&\n', '                    (newValues[i] <= lever.maxValue),\n', '                "Invalid val"\n', '            );\n', '\n', '            // Enforce that the new value is different\n', '            require(\n', '                newValues[i] != lever.currentValue,\n', '                "Must provide different val"\n', '            );\n', '\n', '            // grab previous value for the event emit\n', '            previousValues[i] = lever.currentValue;\n', '\n', '            // Update token current value\n', '            lever.currentValue = newValues[i];\n', '        }\n', '\n', "        // if there's a payment then send it to the platform (for higher priority updates)\n", '        if (msg.value > 0) {\n', '            safeFundsTransfer(platformAddress, msg.value);\n', '        }\n', '\n', '        // if this control token is finite in its uses\n', '        if (controlToken.numRemainingUpdates > 0) {\n', '            // decrease it down by 1\n', '            controlToken.numRemainingUpdates =\n', '                controlToken.numRemainingUpdates -\n', '                1;\n', '\n', '            // since we used one of those updates, withdraw any existing bid for this token if exists\n', '            if (pendingBids[controlTokenId].exists) {\n', '                _withdrawBid(controlTokenId);\n', '            }\n', '        }\n', '\n', '        // emit event\n', '        emit ControlLeverUpdated(\n', '            controlTokenId,\n', '            msg.value,\n', '            controlToken.numRemainingUpdates,\n', '            leverIds,\n', '            previousValues,\n', '            newValues\n', '        );\n', '    }\n', '\n', '    // Allows a user to withdraw all failed transaction credits\n', '    function withdrawAllFailedCredits() external {\n', '        uint256 amount = failedTransferCredits[msg.sender];\n', '\n', '        require(amount != 0);\n', '        require(address(this).balance >= amount);\n', '\n', '        failedTransferCredits[msg.sender] = 0;\n', '\n', '        (bool successfulWithdraw, ) = msg.sender.call.value(amount)("");\n', '        require(successfulWithdraw);\n', '    }\n', '\n', '    // Safely transfer funds and if fail then store that amount as credits for a later pull\n', '    function safeFundsTransfer(address payable recipient, uint256 amount)\n', '        internal\n', '    {\n', '        // attempt to send the funds to the recipient\n', '        (bool success, ) = recipient.call.value(amount).gas(2300)("");\n', '        // if it failed, update their credit balance so they can pull it later\n', '        if (success == false) {\n', '            failedTransferCredits[recipient] = failedTransferCredits[recipient]\n', '                .add(amount);\n', '        }\n', '    }\n', '\n', '    // override the default transfer\n', '    function _transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) internal {\n', '        // clear a buy now price\n', '        buyPrices[tokenId] = 0;\n', '        // transfer the token\n', '        super._transferFrom(from, to, tokenId);\n', '    }\n', '}']