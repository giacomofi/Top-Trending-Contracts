['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IXHalfLife.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'interface IXHalfLife {\n', '    function createStream(\n', '        address token,\n', '        address recipient,\n', '        uint256 depositAmount,\n', '        uint256 startBlock,\n', '        uint256 kBlock,\n', '        uint256 unlockRatio,\n', '        bool cancelable\n', '    ) external returns (uint256);\n', '\n', '    function createEtherStream(\n', '        address recipient,\n', '        uint256 startBlock,\n', '        uint256 kBlock,\n', '        uint256 unlockRatio,\n', '        bool cancelable\n', '    ) external payable returns (uint256);\n', '\n', '    function hasStream(uint256 streamId) external view returns (bool);\n', '\n', '    function getStream(uint256 streamId)\n', '        external\n', '        view\n', '        returns (\n', '            address sender,\n', '            address recipient,\n', '            address token,\n', '            uint256 depositAmount,\n', '            uint256 startBlock,\n', '            uint256 kBlock,\n', '            uint256 remaining,\n', '            uint256 withdrawable,\n', '            uint256 unlockRatio,\n', '            uint256 lastRewardBlock,\n', '            bool cancelable\n', '        );\n', '\n', '    function balanceOf(uint256 streamId)\n', '        external\n', '        view\n', '        returns (uint256 withdrawable, uint256 remaining);\n', '\n', '    function withdrawFromStream(uint256 streamId, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function cancelStream(uint256 streamId) external returns (bool);\n', '\n', '    function singleFundStream(uint256 streamId, uint256 amount)\n', '        external\n', '        payable\n', '        returns (bool);\n', '\n', '    function lazyFundStream(\n', '        uint256 streamId,\n', '        uint256 amount,\n', '        uint256 blockHeightDiff\n', '    ) external payable returns (bool);\n', '\n', '    function getVersion() external pure returns (bytes32);\n', '}\n', '\n', '// File: contracts/XdexStream.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', 'contract XdexStream is ReentrancyGuard {\n', '    uint256 constant ONE = 10**18;\n', '\n', '    //The XDEX Token!\n', '    address public xdex;\n', '    address public xdexFarmMaster;\n', '\n', '    /**\n', '     * @notice An interface of XHalfLife, the contract responsible for creating, funding and withdrawing from streams.\n', '     * No one could cancle the xdex resward stream except the recipient, because the stream sender is this contract.\n', '     */\n', '    IXHalfLife public halflife;\n', '\n', '    struct LockStream {\n', '        address depositor;\n', '        bool isEntity;\n', '        uint256 streamId;\n', '    }\n', '\n', '    //unlock ratio is 0.1% for both Voting and Normal Pool\n', '    uint256 private constant unlockRatio = 1;\n', '\n', '    //unlock k block for Voting Pool\n', '    uint256 private constant unlockKBlocksV = 540;\n', '    // key: recipient, value: Locked Stream\n', '    mapping(address => LockStream) private votingStreams;\n', '\n', '    //funds for Normal Pool\n', '    uint256 private constant unlockKBlocksN = 60;\n', '    // key: recipient, value: Locked Stream\n', '    mapping(address => LockStream) private normalStreams;\n', '\n', '    // non cancelable farm streams\n', '    bool private constant cancelable = false;\n', '\n', '    /**\n', '     * @notice User can have at most one votingStream and one normalStream.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    modifier lockStreamExists(address who, uint256 streamType) {\n', '        bool found = false;\n', '        if (streamType == 0) {\n', '            //voting stream\n', '            found = votingStreams[who].isEntity;\n', '        } else if (streamType == 1) {\n', '            //normal stream\n', '            found = normalStreams[who].isEntity;\n', '        }\n', '\n', '        require(found, "the lock stream does not exist");\n', '        _;\n', '    }\n', '\n', '    modifier validStreamType(uint256 streamType) {\n', '        require(\n', '            streamType == 0 || streamType == 1,\n', '            "invalid stream type: 0 or 1"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _xdex,\n', '        address _halfLife,\n', '        address _farmMaster\n', '    ) public {\n', '        xdex = _xdex;\n', '        halflife = IXHalfLife(_halfLife);\n', '        xdexFarmMaster = _farmMaster;\n', '    }\n', '\n', '    /**\n', '     * If the user has VotingStream or has NormalStream.\n', '     */\n', '    function hasStream(address who)\n', '        public\n', '        view\n', '        returns (bool hasVotingStream, bool hasNormalStream)\n', '    {\n', '        hasVotingStream = votingStreams[who].isEntity;\n', '        hasNormalStream = normalStreams[who].isEntity;\n', '    }\n', '\n', '    /**\n', "     * @notice Get a user's voting or normal stream id.\n", '     * @dev stream id must > 0.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    function getStreamId(address who, uint256 streamType)\n', '        public\n', '        view\n', '        lockStreamExists(who, streamType)\n', '        returns (uint256 streamId)\n', '    {\n', '        if (streamType == 0) {\n', '            return votingStreams[who].streamId;\n', '        } else if (streamType == 1) {\n', '            return normalStreams[who].streamId;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a new stream funded by `msg.sender` and paid towards to `recipient`.\n', '     * @param streamType The type of stream: 0 is votingStream, 1 is normalStream;\n', '     */\n', '    function createStream(\n', '        address recipient,\n', '        uint256 depositAmount,\n', '        uint256 streamType,\n', '        uint256 startBlock\n', '    )\n', '        external\n', '        nonReentrant\n', '        validStreamType(streamType)\n', '        returns (uint256 streamId)\n', '    {\n', '        require(msg.sender == xdexFarmMaster, "only farmMaster could create");\n', '        require(recipient != address(0), "stream to the zero address");\n', '        require(recipient != address(this), "stream to the contract itself");\n', '        require(recipient != msg.sender, "stream to the caller");\n', '        require(depositAmount > 0, "depositAmount is zero");\n', '        require(startBlock >= block.number, "start block before block.number");\n', '\n', '        if (streamType == 0) {\n', '            require(\n', '                !(votingStreams[recipient].isEntity),\n', '                "voting stream exists"\n', '            );\n', '        }\n', '        if (streamType == 1) {\n', '            require(\n', '                !(normalStreams[recipient].isEntity),\n', '                "normal stream exists"\n', '            );\n', '        }\n', '\n', '        uint256 unlockKBlocks = unlockKBlocksN;\n', '        if (streamType == 0) {\n', '            unlockKBlocks = unlockKBlocksV;\n', '        }\n', '\n', '        /* Approve the XHalflife contract to spend. */\n', '        IERC20(xdex).approve(address(halflife), depositAmount);\n', '\n', '        /* Transfer the tokens to this contract. */\n', '        IERC20(xdex).transferFrom(msg.sender, address(this), depositAmount);\n', '\n', '        streamId = halflife.createStream(\n', '            xdex,\n', '            recipient,\n', '            depositAmount,\n', '            startBlock,\n', '            unlockKBlocks,\n', '            unlockRatio,\n', '            cancelable\n', '        );\n', '\n', '        if (streamType == 0) {\n', '            votingStreams[recipient] = LockStream({\n', '                depositor: msg.sender,\n', '                isEntity: true,\n', '                streamId: streamId\n', '            });\n', '        } else if (streamType == 1) {\n', '            normalStreams[recipient] = LockStream({\n', '                depositor: msg.sender,\n', '                isEntity: true,\n', '                streamId: streamId\n', '            });\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Send funds to the stream\n', '     * @param streamId The given stream id;\n', '     * @param amount New amount fund to add;\n', "     * @param blockHeightDiff diff of block.number and farmPool's lastRewardBlock;\n", '     */\n', '    function fundsToStream(\n', '        uint256 streamId,\n', '        uint256 amount,\n', '        uint256 blockHeightDiff\n', '    ) public returns (bool result) {\n', '        require(amount > 0, "amount is zero");\n', '\n', '        /* Approve the XHalflife contract to spend. */\n', '        IERC20(xdex).approve(address(halflife), amount);\n', '\n', '        /* Transfer the tokens to this contract. */\n', '        IERC20(xdex).transferFrom(msg.sender, address(this), amount);\n', '\n', '        result = halflife.lazyFundStream(streamId, amount, blockHeightDiff);\n', '    }\n', '}']