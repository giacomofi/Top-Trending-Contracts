['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-05\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override virtual returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override virtual returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// interface for the oneToken\n', 'interface OneToken {\n', '    function getOneTokenUsd() external view returns (uint256);\n', '}\n', '\n', '// interface for CollateralOracle\n', 'interface IOracleInterface {\n', '    function getLatestPrice() external view returns (uint256);\n', '    function update() external;\n', '    function changeInterval(uint256 seconds_) external;\n', '    function priceChangeMax(uint256 change_) external;\n', '}\n', '\n', '/// @title An overcollateralized stablecoin using vBTC\n', '/// @author Masanobu Fukuoka\n', 'contract oneVBTC is ERC20("oneVBTC", "oneVBTC"), Ownable, ReentrancyGuard {\n', '   using SafeMath for uint256;\n', '\n', '    uint256 public MAX_RESERVE_RATIO; // At 100% reserve ratio, each oneVBTC is backed 1-to-1 by $1 of existing stable coins\n', '    uint256 private constant DECIMALS = 9;\n', '    uint256 public lastRefreshReserve; // The last time the reserve ratio was updated by the contract\n', '    uint256 public minimumRefreshTime; // The time between reserve ratio refreshes\n', '\n', '    address public stimulus; // oneVBTC builds a stimulus fund in vBTC.\n', '    uint256 public stimulusDecimals; // used to calculate oracle rate of Uniswap Pair\n', '\n', '    address public oneTokenOracle; // oracle for the oneVBTC stable coin\n', '    bool public oneTokenOracleHasUpdate; //if oneVBTC token oracle requires update\n', '    address public stimulusOracle;  // oracle for a stimulus \n', '    bool public stimulusOracleHasUpdate; //if stimulus oracle requires update\n', '\n', '    // Only governance should cause the coin to go fully agorithmic by changing the minimum reserve\n', '    // ratio.  For now, we will set a conservative minimum reserve ratio.\n', '    uint256 public MIN_RESERVE_RATIO;\n', '    uint256 public MIN_DELAY;\n', '\n', "    // Makes sure that you can't send coins to a 0 address and prevents coins from being sent to the\n", '    // contract address. I want to protect your funds!\n', '    modifier validRecipient(address to) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _oneBalances;\n', '    mapping(address => uint256) private _lastCall;  // used as a record to prevent flash loan attacks\n', '    mapping (address => mapping (address => uint256)) private _allowedOne; // allowance to spend one\n', '\n', '    address public gov; // who has admin rights over certain functions\n', '    address public pendingGov;  // allows you to transfer the governance to a different user - they must accept it!\n', '    uint256 public reserveStepSize; // step size of update of reserve rate (e.g. 5 * 10 ** 8 = 0.5%)\n', '    uint256 public reserveRatio;    // a number between 0 and 100 * 10 ** 9.\n', '                                    // 0 = 0%\n', '                                    // 100 * 10 ** 9 = 100%\n', '\n', '    // map of acceptable collaterals\n', '    mapping (address => bool) public acceptedCollateral;\n', '    mapping (address => uint256) public collateralMintFee; // minting fee for different collaterals (100 * 10 ** 9 = 100% fee)\n', '    address[] public collateralArray; // array of collateral - used to iterate while updating certain things like oracle intervals for TWAP\n', '\n', '    // modifier to allow auto update of TWAP oracle prices\n', '    // also updates reserves rate programatically\n', '    modifier updateProtocol() {\n', '        if (address(oneTokenOracle) != address(0)) {\n', '\n', '            // this is always updated because we always need stablecoin oracle price\n', '            if (oneTokenOracleHasUpdate) IOracleInterface(oneTokenOracle).update();\n', '\n', '            if (stimulusOracleHasUpdate) IOracleInterface(stimulusOracle).update();\n', '\n', '            for (uint i = 0; i < collateralArray.length; i++){\n', '                if (acceptedCollateral[collateralArray[i]] && !oneCoinCollateralOracle[collateralArray[i]]) IOracleInterface(collateralOracle[collateralArray[i]]).update();\n', '            }\n', '\n', '            // update reserve ratio if enough time has passed\n', '            if (block.timestamp - lastRefreshReserve >= minimumRefreshTime) {\n', '                // $Z / 1 one token\n', '                if (getOneTokenUsd() > 1 * 10 ** 9) {\n', '                    setReserveRatio(reserveRatio.sub(reserveStepSize));\n', '                } else {\n', '                    setReserveRatio(reserveRatio.add(reserveStepSize));\n', '                }\n', '\n', '                lastRefreshReserve = block.timestamp;\n', '            }\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    // events for off-chain record keeping\n', '    event NewPendingGov(address oldPendingGov, address newPendingGov);\n', '    event NewGov(address oldGov, address newGov);\n', '    event NewReserveRate(uint256 reserveRatio);\n', '    event Mint(address stimulus, address receiver, address collateral, uint256 collateralAmount, uint256 stimulusAmount, uint256 oneAmount);\n', '    event Withdraw(address stimulus, address receiver, address collateral, uint256 collateralAmount, uint256 stimulusAmount, uint256 oneAmount);\n', '    event NewMinimumRefreshTime(uint256 minimumRefreshTime);\n', '    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data);\n', '\n', '    modifier onlyIchiGov() {\n', '        require(msg.sender == gov, "ACCESS: only Ichi governance");\n', '        _;\n', '    }\n', '\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));  // shortcut for calling transfer\n", '    mapping (address => uint256) public collateralDecimals;     // needed to be able to convert from different collaterals\n', "    mapping (address => bool) public oneCoinCollateralOracle;   // if true, we query the one token contract's usd price\n", '    mapping (address => bool) public previouslySeenCollateral;  // used to allow users to withdraw collateral, even if the collateral has since been deprecated\n', '                                                                // previouslySeenCollateral lets the contract know if a collateral has been used before - this also\n', '                                                                // prevents attacks where uses add a custom address as collateral, but that custom address is actually \n', '                                                                // their own malicious smart contract. Read peckshield blog for more info.\n', '    mapping (address => address) public collateralOracle;       // address of the Collateral-ETH Uniswap Price\n', '    mapping (address => bool) public collateralOracleHasUpdate; // if collatoral oracle requires an update\n', '\n', '    // default to 0\n', '    uint256 public mintFee;\n', '    uint256 public withdrawFee;\n', '\n', '    // fee to charge when minting oneVBTC - this will go into collateral\n', '    event MintFee(uint256 fee_);\n', '    // fee to charge when redeeming oneVBTC - this will go into collateral\n', '    event WithdrawFee(uint256 fee_);\n', '\n', '    // set governance access to only oneVBTC - USDC pool multisig (elected after rewards)\n', '    modifier oneLPGov() {\n', '        require(msg.sender == lpGov, "ACCESS: only oneLP governance");\n', '        _;\n', '    }\n', '\n', '    address public lpGov;\n', '    address public pendingLPGov;\n', '\n', '    event NewPendingLPGov(address oldPendingLPGov, address newPendingLPGov);\n', '    event NewLPGov(address oldLPGov, address newLPGov);\n', '    event NewMintFee(address collateral, uint256 oldFee, uint256 newFee);\n', '\n', '    mapping (address => uint256) private _burnedStablecoin; // maps user to burned oneVBTC\n', '\n', '    // important: make sure changeInterval is a function to allow the interval of update to change\n', '    function addCollateral(address collateral_, uint256 collateralDecimal_, address oracleAddress_, bool oneCoinOracle, bool oracleHasUpdate)\n', '        external\n', '        oneLPGov\n', '    {\n', '        // only add collateral once\n', '        if (!previouslySeenCollateral[collateral_]) collateralArray.push(collateral_);\n', '\n', '        previouslySeenCollateral[collateral_] = true;\n', '        acceptedCollateral[collateral_] = true;\n', '        oneCoinCollateralOracle[collateral_] = oneCoinOracle;\n', '        collateralDecimals[collateral_] = collateralDecimal_;\n', '        collateralOracle[collateral_] = oracleAddress_;\n', '        collateralMintFee[collateral_] = 0;\n', '        collateralOracleHasUpdate[collateral_]= oracleHasUpdate;\n', '    }\n', '\n', '\n', '    function setCollateralMintFee(address collateral_, uint256 fee_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        require(acceptedCollateral[collateral_], "invalid collateral");\n', '        require(fee_ <= 100 * 10 ** 9, "Fee must be valid");\n', '        emit NewMintFee(collateral_, collateralMintFee[collateral_], fee_);\n', '        collateralMintFee[collateral_] = fee_;\n', '    }\n', '\n', '    // step size = how much the reserve rate updates per update cycle\n', '    function setReserveStepSize(uint256 stepSize_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        reserveStepSize = stepSize_;\n', '    }\n', '\n', '    // changes the oracle for a given collaterarl\n', '    function setCollateralOracle(address collateral_, address oracleAddress_, bool oneCoinOracle_, bool oracleHasUpdate)\n', '        external\n', '        oneLPGov\n', '    {\n', '        require(acceptedCollateral[collateral_], "invalid collateral");\n', '        oneCoinCollateralOracle[collateral_] = oneCoinOracle_;\n', '        collateralOracle[collateral_] = oracleAddress_;\n', '        collateralOracleHasUpdate[collateral_] = oracleHasUpdate;\n', '    }\n', '\n', '    // removes a collateral from minting. Still allows withdrawals however\n', '    function removeCollateral(address collateral_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        acceptedCollateral[collateral_] = false;\n', '    }\n', '\n', '    // used for querying\n', '    function getBurnedStablecoin(address _user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _burnedStablecoin[_user];\n', '    }\n', '\n', '    // returns 10 ** 9 price of collateral\n', '    function getCollateralUsd(address collateral_) public view returns (uint256) {\n', '        require(previouslySeenCollateral[collateral_], "must be an existing collateral");\n', '\n', '        if (oneCoinCollateralOracle[collateral_]) return OneToken(collateral_).getOneTokenUsd();\n', '        \n', '        return IOracleInterface(collateralOracle[collateral_]).getLatestPrice();\n', '    }\n', '\n', '    function globalCollateralValue() public view returns (uint256) {\n', '        uint256 totalCollateralUsd = 0;\n', '\n', '        for (uint i = 0; i < collateralArray.length; i++){\n', '            // Exclude null addresses\n', '            if (collateralArray[i] != address(0)){\n', '                totalCollateralUsd += IERC20(collateralArray[i]).balanceOf(address(this)).mul(10 ** 9).div(10 ** collateralDecimals[collateralArray[i]]).mul(getCollateralUsd(collateralArray[i])).div(10 ** 9); // add stablecoin balance\n', '            }\n', '\n', '        }\n', '        return totalCollateralUsd;\n', '    }\n', '\n', '    // return price of oneVBTC in 10 ** 9 decimal\n', '    function getOneTokenUsd()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return IOracleInterface(oneTokenOracle).getLatestPrice();\n', '    }\n', '\n', '    /**\n', '     * @return The total number of oneVBTC.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address.\n', '     */\n', '    function balanceOf(address who)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _oneBalances[who];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        override\n', '        validRecipient(to)\n', '        updateProtocol()\n', '        returns (bool)\n', '    {\n', '        _oneBalances[msg.sender] = _oneBalances[msg.sender].sub(value);\n', '        _oneBalances[to] = _oneBalances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '     * @param owner_ The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner_, address spender)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowedOne[owner_][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address you want to send tokens from.\n', '     * @param to The address you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        override\n', '        validRecipient(to)\n', '        updateProtocol()\n', '        returns (bool)\n', '    {\n', '        _allowedOne[from][msg.sender] = _allowedOne[from][msg.sender].sub(value);\n', '\n', '        _oneBalances[from] = _oneBalances[from].sub(value);\n', '        _oneBalances[to] = _oneBalances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        override\n', '        validRecipient(spender)\n', '        updateProtocol()\n', '        returns (bool)\n', '    {\n', '        _allowedOne[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _allowedOne[msg.sender][spender] = _allowedOne[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowedOne[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = _allowedOne[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowedOne[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowedOne[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, _allowedOne[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function setOneTokenOracle(address oracle_, bool hasUpdate)\n', '        external\n', '        oneLPGov\n', '        returns (bool)\n', '    {\n', '        oneTokenOracle = oracle_;\n', '        oneTokenOracleHasUpdate = hasUpdate;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setStimulusOracle(address oracle_, bool hasUpdate)\n', '        external\n', '        oneLPGov\n', '        returns (bool)\n', '    {\n', '        stimulusOracle = oracle_;\n', '        stimulusOracleHasUpdate = hasUpdate;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setStimulusPriceChangeMax(uint256 change_)\n', '        external\n', '        oneLPGov\n', '        returns (bool)\n', '    {\n', '        IOracleInterface(stimulusOracle).priceChangeMax(change_);\n', '\n', '        return true;\n', '    }\n', '\n', '    // oracle rate is 10 ** 9 decimals\n', '    // returns $Z / Stimulus\n', '    function getStimulusUSD()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return IOracleInterface(stimulusOracle).getLatestPrice();\n', '       \n', '    }\n', '\n', '    // minimum amount of block time (seconds) required for an update in reserve ratio\n', '    function setMinimumRefreshTime(uint256 val_)\n', '        external\n', '        oneLPGov\n', '        returns (bool)\n', '    {\n', '        require(val_ != 0, "minimum refresh time must be valid");\n', '\n', '        minimumRefreshTime = val_;\n', '\n', '        // change collateral array\n', '        for (uint i = 0; i < collateralArray.length; i++){\n', '            if (acceptedCollateral[collateralArray[i]] && !oneCoinCollateralOracle[collateralArray[i]] && collateralOracleHasUpdate[collateralArray[i]]) IOracleInterface(collateralOracle[collateralArray[i]]).changeInterval(val_);\n', '        }\n', '\n', '        if (oneTokenOracleHasUpdate) IOracleInterface(oneTokenOracle).changeInterval(val_);\n', '\n', '        if (stimulusOracleHasUpdate) IOracleInterface(stimulusOracle).changeInterval(val_);\n', '\n', '        // change all the oracles (collateral, stimulus, oneToken)\n', '\n', '        emit NewMinimumRefreshTime(val_);\n', '        return true;\n', '    }\n', '\n', '    constructor(\n', '        uint256 reserveRatio_,\n', '        address stimulus_,\n', '        uint256 stimulusDecimals_\n', '    )\n', '        public\n', '    {\n', '        _setupDecimals(uint8(9));\n', '        stimulus = stimulus_;\n', '        minimumRefreshTime = 3600 * 1; // 1 hour by default\n', '        stimulusDecimals = stimulusDecimals_;\n', '        reserveStepSize = 2 * 10 ** 8;  // 0.2% by default\n', '        MIN_RESERVE_RATIO = 95 * 10 ** 9;\n', '        MAX_RESERVE_RATIO = 100 * 10 ** 9;\n', '        MIN_DELAY = 3;             // 3 blocks\n', '        withdrawFee = 45 * 10 ** 7; // 0.45% fee at first, remains in collateral\n', '        gov = msg.sender;\n', '        lpGov = msg.sender;\n', '        reserveRatio = reserveRatio_;\n', '\n', '        uint256 firstMint = 1000 * 10 ** 9;  //mint 1000 to create LP\n', '\n', '        _totalSupply = firstMint; //mint 1000 to create LP\n', '\n', '        _oneBalances[msg.sender] = firstMint;\n', '        emit Transfer(address(0x0), msg.sender, firstMint);\n', '    }\n', '\n', '    function setMinimumReserveRatio(uint256 val_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        MIN_RESERVE_RATIO = val_;\n', '        if (MIN_RESERVE_RATIO > reserveRatio) setReserveRatio(MIN_RESERVE_RATIO);\n', '    }\n', '\n', '    function setMaximumReserveRatio(uint256 val_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        MAX_RESERVE_RATIO = val_;\n', '        if (MAX_RESERVE_RATIO < reserveRatio) setReserveRatio(MAX_RESERVE_RATIO);\n', '    }\n', '\n', '    function setMinimumDelay(uint256 val_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        MIN_DELAY = val_;\n', '    }\n', '\n', '    // LP pool governance ====================================\n', '    function setPendingLPGov(address pendingLPGov_)\n', '        external\n', '        oneLPGov\n', '    {\n', '        address oldPendingLPGov = pendingLPGov;\n', '        pendingLPGov = pendingLPGov_;\n', '        emit NewPendingLPGov(oldPendingLPGov, pendingLPGov_);\n', '    }\n', '\n', '    function acceptLPGov()\n', '        external\n', '    {\n', '        require(msg.sender == pendingLPGov, "!pending");\n', '        address oldLPGov = lpGov; // that\n', '        lpGov = pendingLPGov;\n', '        pendingLPGov = address(0);\n', '        emit NewGov(oldLPGov, lpGov);\n', '    }\n', '\n', '    // over-arching protocol level governance  ===============\n', '    function setPendingGov(address pendingGov_)\n', '        external\n', '        onlyIchiGov\n', '    {\n', '        address oldPendingGov = pendingGov;\n', '        pendingGov = pendingGov_;\n', '        emit NewPendingGov(oldPendingGov, pendingGov_);\n', '    }\n', '\n', '    function acceptGov()\n', '        external\n', '    {\n', '        require(msg.sender == pendingGov, "!pending");\n', '        address oldGov = gov;\n', '        gov = pendingGov;\n', '        pendingGov = address(0);\n', '        emit NewGov(oldGov, gov);\n', '    }\n', '    // ======================================================\n', '\n', '    // calculates how much you will need to send in order to mint oneVBTC, depending on current market prices + reserve ratio\n', '    // oneAmount: the amount of oneVBTC you want to mint\n', '    // collateral: the collateral you want to use to pay\n', '    // also works in the reverse direction, i.e. how much collateral + stimulus to receive when you burn One\n', '    function consultOneDeposit(uint256 oneAmount, address collateral)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        require(oneAmount != 0, "must use valid oneAmount");\n', '        require(acceptedCollateral[collateral], "must be an accepted collateral");\n', '\n', '        uint256 stimulusUsd = getStimulusUSD();     // 10 ** 9\n', '\n', '        // convert to correct decimals for collateral\n', '        uint256 collateralAmount = oneAmount.mul(reserveRatio).div(MAX_RESERVE_RATIO).mul(10 ** collateralDecimals[collateral]).div(10 ** DECIMALS);\n', '        collateralAmount = collateralAmount.mul(10 ** 9).div(getCollateralUsd(collateral));\n', '\n', '        if (address(oneTokenOracle) == address(0)) return (collateralAmount, 0);\n', '\n', '        uint256 stimulusAmountInOneStablecoin = oneAmount.mul(MAX_RESERVE_RATIO.sub(reserveRatio)).div(MAX_RESERVE_RATIO);\n', '\n', '        uint256 stimulusAmount = stimulusAmountInOneStablecoin.mul(10 ** 9).div(stimulusUsd).mul(10 ** stimulusDecimals).div(10 ** DECIMALS); // must be 10 ** stimulusDecimals\n', '\n', '        return (collateralAmount, stimulusAmount);\n', '    }\n', '\n', '    function consultOneWithdraw(uint256 oneAmount, address collateral)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        require(oneAmount != 0, "must use valid oneAmount");\n', '        require(previouslySeenCollateral[collateral], "must be an accepted collateral");\n', '\n', '        uint256 collateralAmount = oneAmount.sub(oneAmount.mul(withdrawFee).div(100 * 10 ** DECIMALS)).mul(10 ** collateralDecimals[collateral]).div(10 ** DECIMALS);\n', '        collateralAmount = collateralAmount.mul(10 ** 9).div(getCollateralUsd(collateral));\n', '\n', '        return (collateralAmount, 0);\n', '    }\n', '\n', '    // @title: deposit collateral + stimulus token\n', '    // collateral: address of the collateral to deposit (USDC, DAI, TUSD, etc)\n', '    function mint(\n', '        uint256 oneAmount,\n', '        address collateral\n', '    )\n', '        public\n', '        payable\n', '        nonReentrant\n', '        updateProtocol()\n', '    {\n', '        require(acceptedCollateral[collateral], "must be an accepted collateral");\n', '        require(oneAmount != 0, "must mint non-zero amount");\n', '\n', '        // wait 3 blocks to avoid flash loans\n', '        require((_lastCall[msg.sender] + MIN_DELAY) <= block.number, "action too soon - please wait a few more blocks");\n', '\n', '        // validate input amounts are correct\n', '        (uint256 collateralAmount, uint256 stimulusAmount) = consultOneDeposit(oneAmount, collateral);\n', '        require(collateralAmount <= IERC20(collateral).balanceOf(msg.sender), "sender has insufficient collateral balance");\n', '        require(stimulusAmount <= IERC20(stimulus).balanceOf(msg.sender), "sender has insufficient stimulus balance");\n', '\n', '        // checks passed, so transfer tokens\n', '        SafeERC20.safeTransferFrom(IERC20(collateral), msg.sender, address(this), collateralAmount);\n', '        SafeERC20.safeTransferFrom(IERC20(stimulus), msg.sender, address(this), stimulusAmount);\n', '\n', '        oneAmount = oneAmount.sub(oneAmount.mul(mintFee).div(100 * 10 ** DECIMALS));                            // apply mint fee\n', '        oneAmount = oneAmount.sub(oneAmount.mul(collateralMintFee[collateral]).div(100 * 10 ** DECIMALS));      // apply collateral fee\n', '\n', '        _totalSupply = _totalSupply.add(oneAmount);\n', '        _oneBalances[msg.sender] = _oneBalances[msg.sender].add(oneAmount);\n', '\n', '        emit Transfer(address(0x0), msg.sender, oneAmount);\n', '\n', '        _lastCall[msg.sender] = block.number;\n', '\n', '        emit Mint(stimulus, msg.sender, collateral, collateralAmount, stimulusAmount, oneAmount);\n', '    }\n', '\n', '    // fee_ should be 10 ** 9 decimals (e.g. 10% = 10 * 10 ** 9)\n', '    function editMintFee(uint256 fee_)\n', '        external\n', '        onlyIchiGov\n', '    {\n', '        require(fee_ <= 100 * 10 ** 9, "Fee must be valid");\n', '        mintFee = fee_;\n', '        emit MintFee(fee_);\n', '    }\n', '\n', '    // fee_ should be 10 ** 9 decimals (e.g. 10% = 10 * 10 ** 9)\n', '    function editWithdrawFee(uint256 fee_)\n', '        external\n', '        onlyIchiGov\n', '    {\n', '        withdrawFee = fee_;\n', '        emit WithdrawFee(fee_);\n', '    }\n', '\n', '    /// burns stablecoin and increments _burnedStablecoin mapping for user\n', '    ///         user can claim collateral in a 2nd step below\n', '    function withdraw(\n', '        uint256 oneAmount,\n', '        address collateral\n', '    )\n', '        public\n', '        nonReentrant\n', '        updateProtocol()\n', '    {\n', '        require(oneAmount != 0, "must withdraw non-zero amount");\n', '        require(oneAmount <= _oneBalances[msg.sender], "insufficient balance");\n', '        require(previouslySeenCollateral[collateral], "must be an existing collateral");\n', '        require((_lastCall[msg.sender] + MIN_DELAY) <= block.number, "action too soon - please wait a few blocks");\n', '\n', '        // burn oneAmount\n', '        _totalSupply = _totalSupply.sub(oneAmount);\n', '        _oneBalances[msg.sender] = _oneBalances[msg.sender].sub(oneAmount);\n', '\n', '        _burnedStablecoin[msg.sender] = _burnedStablecoin[msg.sender].add(oneAmount);\n', '\n', '        _lastCall[msg.sender] = block.number;\n', '        emit Transfer(msg.sender, address(0x0), oneAmount);\n', '    }\n', '\n', '    // 2nd step for withdrawal of collateral\n', '    // this 2 step withdrawal is important for prevent flash-loan style attacks\n', '    // flash-loan style attacks try to use loops/complex arbitrage strategies to\n', '    // drain collateral so adding a 2-step process prevents any potential attacks\n', '    // because all flash-loans must be repaid within 1 tx and 1 block\n', '\n', '    /// @notice If you are interested, I would recommend reading: https://slowmist.medium.com/\n', '    ///         also https://cryptobriefing.com/50-million-lost-the-top-19-defi-cryptocurrency-hacks-2020/\n', '    function withdrawFinal(address collateral, uint256 amount)\n', '        public\n', '        nonReentrant\n', '        updateProtocol()\n', '    {\n', '        require(previouslySeenCollateral[collateral], "must be an existing collateral");\n', '        require((_lastCall[msg.sender] + MIN_DELAY) <= block.number, "action too soon - please wait a few blocks");\n', '\n', '        uint256 oneAmount = _burnedStablecoin[msg.sender];\n', '        require(oneAmount != 0, "insufficient oneVBTC to redeem");\n', '        require(amount <= oneAmount, "insufficient oneVBTC to redeem");\n', '\n', '        _burnedStablecoin[msg.sender] = _burnedStablecoin[msg.sender].sub(amount);\n', '\n', '        // send collateral - fee (convert to collateral decimals too)\n', '        uint256 collateralAmount = amount.sub(amount.mul(withdrawFee).div(100 * 10 ** DECIMALS)).mul(10 ** collateralDecimals[collateral]).div(10 ** DECIMALS);\n', '        collateralAmount = collateralAmount.mul(10 ** 9).div(getCollateralUsd(collateral));\n', '\n', '        uint256 stimulusAmount = 0;\n', '\n', "        // check enough reserves - don't want to burn one coin if we cannot fulfill withdrawal\n", '        require(collateralAmount <= IERC20(collateral).balanceOf(address(this)), "insufficient collateral reserves - try another collateral");\n', '\n', '        SafeERC20.safeTransfer(IERC20(collateral), msg.sender, collateralAmount);\n', '\n', '        _lastCall[msg.sender] = block.number;\n', '\n', '        emit Withdraw(stimulus, msg.sender, collateral, collateralAmount, stimulusAmount, amount);\n', '    }\n', '\n', '    // internal function used to set the reserve ratio of the token\n', '    // must be between MIN / MAX Reserve Ratio, which are constants\n', '    // cannot be 0\n', '    function setReserveRatio(uint256 newRatio_)\n', '        internal\n', '    {\n', '        require(newRatio_ >= 0, "positive reserve ratio");\n', '\n', '        if (newRatio_ <= MAX_RESERVE_RATIO && newRatio_ >= MIN_RESERVE_RATIO) {\n', '            reserveRatio = newRatio_;\n', '            emit NewReserveRate(reserveRatio);\n', '        }\n', '    }\n', '\n', '    /// @notice easy function transfer ETH (not WETH)\n', '    function safeTransferETH(address to, uint value)\n', '        public\n', '        oneLPGov\n', '    {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'ETH_TRANSFER_FAILED');\n", '    }\n', '\n', '    /// @notice easy funtion to move stimulus to a new location\n', '    //  location: address to send to\n', '    //  amount: amount of stimulus to send (use full decimals)\n', '    function moveStimulus(\n', '        address location,\n', '        uint256 amount\n', '    )\n', '        public\n', '        oneLPGov\n', '    {\n', '        SafeERC20.safeTransfer(IERC20(stimulus), location, amount);\n', '    }\n', '\n', '    // can execute any abstract transaction on this smart contrat\n', '    // target: address / smart contract you are interracting with\n', '    // value: msg.value (amount of eth in WEI you are sending. Most of the time it is 0)\n', '    // signature: the function signature (name of the function and the types of the arguments).\n', '    //            for example: "transfer(address,uint256)", or "approve(address,uint256)"\n', '    // data: abi-encodeded byte-code of the parameter values you are sending. See "./encode.js" for Ether.js library function to make this easier\n', '    function executeTransaction(address target, uint value, string memory signature, bytes memory data) public payable oneLPGov returns (bytes memory) {\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call.value(value)(callData);\n', '        require(success, "oneVBTC::executeTransaction: Transaction execution reverted.");\n', '\n', '        return returnData;\n', '    }\n', '\n', '}']