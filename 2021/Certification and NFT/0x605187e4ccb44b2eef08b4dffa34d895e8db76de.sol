['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'contract ContractGuard {\n', '    mapping(uint256 => mapping(address => bool)) private _status;\n', '\n', '    function checkSameOriginReentranted() internal view returns (bool) {\n', '        return _status[block.number][tx.origin];\n', '    }\n', '\n', '    function checkSameSenderReentranted() internal view returns (bool) {\n', '        return _status[block.number][msg.sender];\n', '    }\n', '\n', '    modifier onlyOneBlock() {\n', '        require(!checkSameOriginReentranted(), "ContractGuard: one block, one function");\n', '        require(!checkSameSenderReentranted(), "ContractGuard: one block, one function");\n', '\n', '        _;\n', '\n', '        _status[block.number][tx.origin] = true;\n', '        _status[block.number][msg.sender] = true;\n', '    }\n', '}\n', '\n', 'interface IEpochController {\n', '    function epoch() external view returns (uint256);\n', '\n', '    function nextEpochPoint() external view returns (uint256);\n', '\n', '    function nextEpochLength() external view returns (uint256);\n', '\n', '    function nextEpochAllocatedReward(address _pool) external view returns (uint256);\n', '}\n', '\n', 'interface ITreasury is IEpochController {\n', '    function dollarPriceOne() external view returns (uint256);\n', '\n', '    function dollarPriceCeiling() external view returns (uint256);\n', '}\n', '\n', 'interface IDollar {\n', '    function burn(uint256 amount) external;\n', '\n', '    function burnFrom(address account, uint256 amount) external;\n', '\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IOracle {\n', '    function epoch() external view returns (uint256);\n', '\n', '    function nextEpochPoint() external view returns (uint256);\n', '\n', '    function updateCumulative() external;\n', '\n', '    function update() external;\n', '\n', '    function consult(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\n', '\n', '    function consultDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _dollarPrice);\n', '\n', '    function twap(uint256 _amountIn) external view returns (uint144 _amountOut);\n', '\n', '    function twapDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _amountOut);\n', '}\n', '\n', 'interface IBondMarket {\n', '    function bondSupply() external view returns (uint256);\n', '\n', '    function isDebtPhase() external view returns (bool);\n', '\n', '    function epoch() external view returns (uint256);\n', '\n', '    function nextEpochPoint() external view returns (uint256);\n', '\n', '    function nextEpochLength() external view returns (uint256);\n', '\n', '    function issueNewBond(uint256 _issuedBond) external;\n', '\n', '    function buyCoupons(uint256 _amount, uint256 _targetPrice) external;\n', '\n', '    function redeemCoupons(\n', '        uint256 _epoch,\n', '        uint256 _amount,\n', '        uint256 _targetPrice\n', '    ) external;\n', '}\n', '\n', 'interface IStakePoolEpochReward {\n', '    function allocateReward(uint256 _amount) external;\n', '}\n', '\n', 'contract Treasury is ContractGuard, ITreasury {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    // governance\n', '    address public operator;\n', '    address public strategist;\n', '\n', '    // flags\n', '    bool public initialized = false;\n', '\n', '    // epoch\n', '    uint256 public baseEpochPeriod;\n', '    uint256 public lastEpochTime;\n', '    uint256 private _epoch = 0;\n', '\n', '    // core components\n', '    address public dollar;\n', '    address public dollarOracle;\n', '    address public bondMarket;\n', '    address public reserveFund;\n', '    address public lpPool; // vUSD-WETH 80/20\n', '    address public stakePool; // vUSD-WETH 98/2\n', '    address public liquidityIncentiveFund;\n', '\n', '    // expansion distribution percents\n', '    uint256 public expansionPercentReserveFund;\n', '    uint256 public expansionPercentLpPool;\n', '    uint256 public expansionPercentStakePool;\n', '    uint256 public expansionPercentLiquidityIncentiveFund;\n', '    uint256 public expansionPercentDebtPhaseReserveFund;\n', '    uint256 public expansionPercentDebtPhaseLpPool;\n', '    uint256 public expansionPercentDebtPhaseStakePool;\n', '    uint256 public expansionPercentDebtPhaseLiquidityIncentiveFund;\n', '\n', '    // price\n', '    uint256 public override dollarPriceOne;\n', '    uint256 public override dollarPriceCeiling;\n', '    address public sideToken; // WETH\n', '\n', '    uint256 public maxSupplyExpansionRate;\n', '\n', '    uint256 public bootstrapEpochs;\n', '    uint256 public bootstrapDollarPrice;\n', '\n', '    uint256 public allocateSeigniorageSalary;\n', '\n', '    /* =================== Events =================== */\n', '\n', '    event Initialized(address indexed executor, uint256 at);\n', '    event SeigniorageFunded(\n', '        uint256 timestamp,\n', '        uint256 reserveFundAmt,\n', '        uint256 lpPoolAmt,\n', '        uint256 stakePoolAmt,\n', '        uint256 liquidityIncentiveFundAmt,\n', '        uint256 bondMarketFundAmt\n', '    );\n', '\n', '    /* =================== Modifier =================== */\n', '\n', '    modifier onlyOperator() {\n', '        require(operator == msg.sender, "Treasury: caller is not the operator");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        require(strategist == msg.sender || operator == msg.sender, "Treasury: caller is not a strategist");\n', '        _;\n', '    }\n', '\n', '    modifier checkEpoch {\n', '        uint256 _nextEpochPoint = nextEpochPoint();\n', '        require(now >= _nextEpochPoint, "Treasury: not opened yet");\n', '        _;\n', '        lastEpochTime = _nextEpochPoint;\n', '        _epoch = _epoch.add(1);\n', '    }\n', '\n', '    modifier notInitialized {\n', '        require(!initialized, "Treasury: already initialized");\n', '        _;\n', '    }\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    // flags\n', '    function isInitialized() public view returns (bool) {\n', '        return initialized;\n', '    }\n', '\n', '    // epoch\n', '    function epoch() public view override returns (uint256) {\n', '        return _epoch;\n', '    }\n', '\n', '    function nextEpochPoint() public view override returns (uint256) {\n', '        return lastEpochTime.add(nextEpochLength());\n', '    }\n', '\n', '    function nextEpochLength() public view override returns (uint256 _length) {\n', '        if (_epoch <= bootstrapEpochs) {\n', '            // 14 first epochs with 12h long\n', '            _length = 12 hours;\n', '        } else {\n', '            uint256 dollarPrice = getDollarPrice();\n', '            if (dollarPrice > dollarPriceOne.mul(2))\n', '                dollarPrice = dollarPriceOne.mul(2); // in expansion: round(10h * min(TWAP, 2))\n', '            else if (dollarPrice < dollarPriceOne.div(2)) dollarPrice = dollarPriceOne.div(2); // in contraction: round(10h * max(TWAP, 0.5))\n', '            _length = dollarPrice.mul(baseEpochPeriod).div(dollarPriceOne);\n', '            _length = _length.div(3600).mul(3600);\n', '        }\n', '    }\n', '\n', '    // oracle\n', '    function getDollarPrice() public view returns (uint256 _dollarPrice) {\n', '        if (dollarOracle == address(0)) {\n', '            return dollarPriceOne;\n', '        }\n', '        try IOracle(dollarOracle).consultDollarPrice(sideToken, 1e18) returns (uint256 price) {\n', '            return price;\n', '        } catch {\n', '            revert("Treasury: failed to consult dollar price from the oracle");\n', '        }\n', '    }\n', '\n', '    // oracle\n', '    function getDollarUpdatedPrice() public view returns (uint256 _dollarPrice) {\n', '        if (dollarOracle == address(0)) {\n', '            return dollarPriceOne;\n', '        }\n', '        try IOracle(dollarOracle).twapDollarPrice(sideToken, 1e18) returns (uint256 price) {\n', '            return price;\n', '        } catch {\n', '            revert("Treasury: failed to get TWAP dollar price from the oracle");\n', '        }\n', '    }\n', '\n', '    function isDebtPhase() public view returns (bool) {\n', '        return (bondMarket == address(0)) ? false : IBondMarket(bondMarket).isDebtPhase();\n', '    }\n', '\n', '    /* ========== GOVERNANCE ========== */\n', '\n', '    function initialize(\n', '        address _dollar,\n', '        address _sideToken,\n', '        address _reserveFund,\n', '        address _lpPool,\n', '        address _stakePool,\n', '        address _liquidityIncentiveFund,\n', '        uint256 _baseEpochPeriod,\n', '        uint256 _startTime\n', '    ) public notInitialized {\n', '        dollar = _dollar;\n', '        sideToken = _sideToken;\n', '        reserveFund = _reserveFund;\n', '        lpPool = _lpPool;\n', '        stakePool = _stakePool;\n', '        liquidityIncentiveFund = _liquidityIncentiveFund;\n', '        baseEpochPeriod = _baseEpochPeriod; // 10 hours\n', '        lastEpochTime = _startTime.sub(12 hours);\n', '\n', '        expansionPercentReserveFund = 500; // 5% goes to reserveFund\n', '        expansionPercentLpPool = 3500; // 35% goes to lpPool (vUSD-WETH 80/20)\n', '        expansionPercentStakePool = 5000; // 50% goes to lpPool (vUSD-WETH 98/2)\n', '        expansionPercentLiquidityIncentiveFund = 1000; // 10% goes to liquidityIncentiveFund\n', '\n', '        // In Debt Phase\n', '        expansionPercentDebtPhaseReserveFund = 500; // 5% goes to reserveFund\n', '        expansionPercentDebtPhaseLpPool = 1500; // 15% goes to lpPool (vUSD-WETH 80/20)\n', '        expansionPercentDebtPhaseStakePool = 1000; // 10% goes to lpPool (vUSD-WETH 98/2)\n', '        expansionPercentDebtPhaseLiquidityIncentiveFund = 500; // 5% goes to liquidityIncentiveFund\n', '\n', '        dollarPriceOne = 10**18;\n', '        dollarPriceCeiling = dollarPriceOne.mul(101).div(100);\n', '\n', '        maxSupplyExpansionRate = 2e16; // Upto 2% supply for expansion\n', '\n', '        bootstrapEpochs = 14;\n', '        bootstrapDollarPrice = dollarPriceOne.mul(120).div(100);\n', '\n', '        allocateSeigniorageSalary = 10 ether;\n', '\n', '        initialized = true;\n', '        operator = msg.sender;\n', '        emit Initialized(msg.sender, block.number);\n', '    }\n', '\n', '    function setOperator(address _operator) external onlyOperator {\n', '        operator = _operator;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external onlyOperator {\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setBaseEpochPeriod(uint256 _baseEpochPeriod) external onlyOperator {\n', '        require(_baseEpochPeriod >= 30 minutes && _baseEpochPeriod <= 48 hours, "out of range");\n', '        baseEpochPeriod = _baseEpochPeriod;\n', '    }\n', '\n', '    function setDollarOracle(address _dollarOracle) external onlyOperator {\n', '        dollarOracle = _dollarOracle;\n', '    }\n', '\n', '    function setBondMarket(address _bondMarket) external onlyOperator {\n', '        bondMarket = _bondMarket;\n', '    }\n', '\n', '    function setReserveFund(address _reserveFund) external onlyOperator {\n', '        reserveFund = _reserveFund;\n', '    }\n', '\n', '    function setLpPool(address _lpPool) external onlyOperator {\n', '        lpPool = _lpPool;\n', '    }\n', '\n', '    function setStakePool(address _stakePool) external onlyOperator {\n', '        stakePool = _stakePool;\n', '    }\n', '\n', '    function setLiquidityIncentiveFund(address _liquidityIncentiveFund) external onlyOperator {\n', '        liquidityIncentiveFund = _liquidityIncentiveFund;\n', '    }\n', '\n', '    function setExpansionPercents(\n', '        uint256 _expansionPercentReserveFund,\n', '        uint256 _expansionPercentLpPool,\n', '        uint256 _expansionPercentStakePool,\n', '        uint256 _expansionPercentLiquidityIncentiveFund\n', '    ) external onlyOperator {\n', '        require(\n', '            _expansionPercentReserveFund.add(_expansionPercentLpPool).add(_expansionPercentStakePool).add(_expansionPercentLiquidityIncentiveFund) == 10000,\n', '            "!100%"\n', '        );\n', '        expansionPercentReserveFund = _expansionPercentReserveFund;\n', '        expansionPercentLpPool = _expansionPercentLpPool;\n', '        expansionPercentStakePool = _expansionPercentStakePool;\n', '        expansionPercentLiquidityIncentiveFund = _expansionPercentLiquidityIncentiveFund;\n', '    }\n', '\n', '    function setExpansionPercentsDebtPhase(\n', '        uint256 _expansionPercentDebtPhaseReserveFund,\n', '        uint256 _expansionPercentDebtPhaseLpPool,\n', '        uint256 _expansionPercentDebtPhaseStakePool,\n', '        uint256 _expansionPercentDebtPhaseLiquidityIncentiveFund\n', '    ) external onlyOperator {\n', '        require(\n', '            _expansionPercentDebtPhaseReserveFund.add(_expansionPercentDebtPhaseLpPool).add(_expansionPercentDebtPhaseStakePool).add(\n', '                _expansionPercentDebtPhaseLiquidityIncentiveFund\n', '            ) <= 5000,\n', '            "over 50%"\n', '        );\n', '        expansionPercentDebtPhaseReserveFund = _expansionPercentDebtPhaseReserveFund;\n', '        expansionPercentDebtPhaseLpPool = _expansionPercentDebtPhaseLpPool;\n', '        expansionPercentDebtPhaseStakePool = _expansionPercentDebtPhaseStakePool;\n', '        expansionPercentDebtPhaseLiquidityIncentiveFund = _expansionPercentDebtPhaseLiquidityIncentiveFund;\n', '    }\n', '\n', '    function setDollarPriceCeiling(uint256 _dollarPriceCeiling) external onlyOperator {\n', '        require(_dollarPriceCeiling >= dollarPriceOne && _dollarPriceCeiling <= dollarPriceOne.mul(120).div(100), "out of range"); // [$1.0, $1.2]\n', '        dollarPriceCeiling = _dollarPriceCeiling;\n', '    }\n', '\n', '    function setMaxSupplyExpansionRate(uint256 _maxSupplyExpansionRate) external onlyOperator {\n', '        require(_maxSupplyExpansionRate >= 10 && _maxSupplyExpansionRate <= 1500, "out of range"); // [0.1%, 15%]\n', '        maxSupplyExpansionRate = _maxSupplyExpansionRate;\n', '    }\n', '\n', '    function setBootstrapEpochs(uint256 _bootstrapEpochs) external onlyOperator {\n', '        require(_bootstrapEpochs <= 60, "_bootstrapEpochs: out of range"); // <= 1 month\n', '        bootstrapEpochs = _bootstrapEpochs;\n', '    }\n', '\n', '    function setAllocateSeigniorageSalary(uint256 _allocateSeigniorageSalary) external onlyOperator {\n', '        require(_allocateSeigniorageSalary <= 100 ether, "Treasury: dont pay too much");\n', '        allocateSeigniorageSalary = _allocateSeigniorageSalary;\n', '    }\n', '\n', '    function governanceRecoverUnsupported(\n', '        IERC20 _token,\n', '        uint256 _amount,\n', '        address _to\n', '    ) external onlyOperator {\n', '        // do not allow to drain core tokens\n', '        require(address(_token) != address(dollar), "dollar");\n', '        _token.safeTransfer(_to, _amount);\n', '    }\n', '\n', '    /* ========== MUTABLE FUNCTIONS ========== */\n', '\n', '    function _updateDollarPrice() internal {\n', '        try IOracle(dollarOracle).update() {} catch {}\n', '    }\n', '\n', '    function _updateDollarPriceCumulative() internal {\n', '        try IOracle(dollarOracle).updateCumulative() {} catch {}\n', '    }\n', '\n', '    function nextEpochAllocatedReward(address _pool) external view override returns (uint256 _allocatedReward) {\n', '        uint256 dollarPrice = (_epoch <= bootstrapEpochs) ? bootstrapDollarPrice : getDollarPrice();\n', '        uint256 _dollarSupply = IERC20(dollar).totalSupply();\n', '        uint256 _supplyExpansion = 0;\n', '        if (dollarPrice >= dollarPriceCeiling) {\n', '            uint256 _percentage = dollarPrice.sub(dollarPriceOne);\n', '            if (_percentage > maxSupplyExpansionRate) {\n', '                _percentage = maxSupplyExpansionRate;\n', '            }\n', '            _supplyExpansion = _dollarSupply.mul(_percentage).div(1e18);\n', '        }\n', '        bool _debtPhase = isDebtPhase();\n', '        if (_pool == reserveFund) {\n', '            _allocatedReward = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseReserveFund : expansionPercentReserveFund).div(10000);\n', '        } else if (_pool == lpPool) {\n', '            uint256 _lpPoolExtraAmt = IERC20(dollar).balanceOf(address(this)); // 5% of the burned vUSD via BondMarket\n', '            _allocatedReward = _lpPoolExtraAmt.add(_supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLpPool : expansionPercentLpPool).div(10000));\n', '        } else if (_pool == stakePool) {\n', '            _allocatedReward = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseStakePool : expansionPercentStakePool).div(10000);\n', '        } else if (_pool == liquidityIncentiveFund) {\n', '            _allocatedReward = _supplyExpansion\n', '                .mul((_debtPhase) ? expansionPercentDebtPhaseLiquidityIncentiveFund : expansionPercentLiquidityIncentiveFund)\n', '                .div(10000);\n', '        }\n', '    }\n', '\n', '    function _allocateReward(address _pool, uint256 _amount) internal {\n', '        if (_amount > 0) {\n', '            IERC20(dollar).safeApprove(_pool, 0);\n', '            IERC20(dollar).safeApprove(_pool, _amount);\n', '            IStakePoolEpochReward(_pool).allocateReward(_amount);\n', '        }\n', '    }\n', '\n', '    function _mintedNewDollars(uint256 _supplyExpansion, bool _debtPhase) internal {\n', '        uint256 _reserveFundAmt = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseReserveFund : expansionPercentReserveFund).div(10000);\n', '        uint256 _lpPoolExtraAmt = IERC20(dollar).balanceOf(address(this)); // 5% of the burned vUSD via BondMarket\n', '        uint256 _lpPoolAmt = _lpPoolExtraAmt.add(_supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLpPool : expansionPercentLpPool).div(10000));\n', '        uint256 _stakePoolAmt = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseStakePool : expansionPercentStakePool).div(10000);\n', '        uint256 _liquidityIncentiveFundAmt =\n', '            _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLiquidityIncentiveFund : expansionPercentLiquidityIncentiveFund).div(10000);\n', '        IDollar(dollar).mint(address(this), _supplyExpansion);\n', '        IERC20(dollar).safeTransfer(reserveFund, _reserveFundAmt);\n', '        _allocateReward(lpPool, _lpPoolAmt);\n', '        _allocateReward(stakePool, _stakePoolAmt);\n', '        IERC20(dollar).safeTransfer(liquidityIncentiveFund, _liquidityIncentiveFundAmt);\n', '        uint256 _bondMarketFundAmt = 0;\n', '        if (_debtPhase) {\n', '            _bondMarketFundAmt = IERC20(dollar).balanceOf(address(this));\n', '            IERC20(dollar).safeTransfer(bondMarket, _bondMarketFundAmt);\n', '        }\n', '        emit SeigniorageFunded(block.timestamp, _reserveFundAmt, _lpPoolAmt, _stakePoolAmt, _liquidityIncentiveFundAmt, _bondMarketFundAmt);\n', '    }\n', '\n', '    function allocateSeigniorage(uint256 _rate) external onlyOneBlock checkEpoch onlyStrategist {\n', '        _updateDollarPrice();\n', '        uint256 dollarPrice = (_epoch <= bootstrapEpochs) ? bootstrapDollarPrice : getDollarPrice();\n', '        uint256 _dollarSupply = IERC20(dollar).totalSupply();\n', '        if (dollarPrice >= dollarPriceCeiling) {\n', '            uint256 _percentage = dollarPrice.sub(dollarPriceOne);\n', '            require(_rate <= _percentage, "Treasury: over expansion rate");\n', '            require(_rate <= maxSupplyExpansionRate, "Treasury: over maxSupplyExpansionRate");\n', '            uint256 _supplyExpansion = _dollarSupply.mul(_rate).div(1e18);\n', '            _mintedNewDollars(_supplyExpansion, isDebtPhase());\n', '        } else if (dollarPrice < dollarPriceOne) {\n', '            require(_rate <= 2e17, "Treasury: issued new bonds is over 20%");\n', '            uint256 _issuedBond = _dollarSupply.mul(_rate).div(1e18);\n', '            IBondMarket(bondMarket).issueNewBond(_issuedBond);\n', '            _allocateReward(lpPool, IERC20(dollar).balanceOf(address(this))); // 5% of the burned vUSD via BondMarket\n', '        }\n', '        if (allocateSeigniorageSalary > 0) {\n', '            IDollar(dollar).mint(address(msg.sender), allocateSeigniorageSalary);\n', '        }\n', '    }\n', '}']