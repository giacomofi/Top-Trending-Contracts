['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface IFsV2owner {\n', '    function setFswFactor(uint _amount) external;\n', '    function setFsBalanceAddress(address _address) external;\n', '    function setEncAddress(address _address) external;\n', '    function setFeeAddress(address payable _address) external;\n', '    function setDexAddress(address _address) external;\n', '    function setRelayer(address _relayer, bool _status) external;\n', '    function enableToken(address _token) external;\n', '    function disableToken(address _token) external;\n', '    function enableBulkToken(address[] calldata _tokens) external;\n', '    function disableBulkToken(address[] calldata _tokens) external;\n', '    function withdrawFsPool(address _token, address payable _to, uint _amount) external;\n', '    \n', '    function renounceOwnership() external;\n', '    function transferOwnership(address newOwner) external;\n', '    \n', '    function fsbalance(address _token) external view returns(uint);\n', '}\n', '\n', '\n', '\n', '\n', 'contract FsV2owner is Ownable {\n', '    IFsV2owner public fsV2;\n', '    mapping(address => bool) public admins;\n', '    \n', '    modifier onlyAdmins() {\n', '        require(admins[_msgSender()], "caller is not the admin");\n', '        _;\n', '    }\n', '    \n', '    \n', '    constructor (address _fsV2){\n', '        fsV2 = IFsV2owner(_fsV2);\n', '    }\n', '    \n', '    \n', '    function fsbalance(address _token) external view returns(uint) {\n', '        return fsV2.fsbalance(_token);\n', '    }\n', '    \n', '    function setAdmin(address _address, bool _status) external onlyOwner {\n', '        admins[_address] = _status;\n', '    }\n', '    \n', '    function setFsV2(address _address) external onlyOwner {\n', '        fsV2 = IFsV2owner(_address);\n', '    }\n', '    \n', '    function enableToken(address _token) external onlyAdmins {\n', '        fsV2.enableToken(_token);\n', '    }\n', '    \n', '    function disableToken(address _token) external onlyAdmins {\n', '        fsV2.disableToken(_token);\n', '    }\n', '    \n', '    function enableBulkToken(address[] calldata _tokens) external onlyAdmins {\n', '        fsV2.enableBulkToken(_tokens);\n', '    }\n', '    \n', '    function disableBulkToken(address[] calldata _tokens) external onlyAdmins {\n', '        fsV2.disableBulkToken(_tokens);\n', '    }\n', '    \n', '    function setFswFactor(uint _amount) external onlyOwner {\n', '        fsV2.setFswFactor(_amount);\n', '    }\n', '    \n', '    function setFsBalanceAddress(address _address) external onlyOwner {\n', '        fsV2.setFsBalanceAddress(_address);\n', '    }\n', '    \n', '    function setEncAddress(address _address) external onlyOwner {\n', '        fsV2.setEncAddress(_address);\n', '    }\n', '    \n', '    function setFeeAddress(address payable _address) external onlyOwner {\n', '        fsV2.setFeeAddress(_address);\n', '    }\n', '    \n', '    function setDexAddress(address _address) external onlyOwner {\n', '        fsV2.setDexAddress(_address);\n', '    }\n', '    \n', '    function setRelayer(address _relayer, bool _status) external onlyOwner {\n', '        fsV2.setRelayer(_relayer, _status);\n', '    }\n', '    \n', '    function withdrawFsPool(address _token, address payable _to, uint _amount) external onlyOwner {\n', '        fsV2.withdrawFsPool(_token, _to, _amount);\n', '    }\n', '    \n', '    function renounceOwnershipFsV2() external onlyOwner {\n', '        fsV2.renounceOwnership();\n', '    }\n', '    \n', '    function transferOwnershipFsV2(address newOwner) external onlyOwner {\n', '        fsV2.transferOwnership(newOwner);\n', '    }\n', '}']