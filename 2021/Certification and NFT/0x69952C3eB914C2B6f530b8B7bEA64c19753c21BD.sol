['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./interfaces/IChainLinkOracle.sol";\n', 'import "./interfaces/IXToken.sol";\n', '\n', 'contract bBadgerOracleHelper is IChainLinkOracle {\n', '    IChainLinkOracle constant public badgerFeed = IChainLinkOracle(0x66a47b7206130e6FF64854EF0E1EDfa237E65339);\n', '    IXToken constant public bBadger = IXToken(0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28);\n', '\n', '    function latestAnswer() external override view returns (uint256 answer) {\n', '        uint256 badgerPrice = badgerFeed.latestAnswer();\n', '        answer = badgerPrice * bBadger.getPricePerFullShare() / 1e18;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IChainLinkOracle {\n', '    function latestAnswer() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IXToken {\n', '    function getPricePerFullShare() external view returns (uint256);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 2000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']