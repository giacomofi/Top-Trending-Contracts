['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/interfaces/kaya/IController.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface IController {\n', '\n', '    function invest(address, uint256) external;\n', '\n', '    function exec(\n', '        address _strategy,\n', '        bool _useToken,\n', '        uint256 _useAmount,\n', '        string memory _signature,\n', '        bytes memory _data) external;\n', '\n', '    function harvest(uint256) external;\n', '\n', '    function harvestAll(address _vault)external;\n', '\n', '    function assets() external view returns (uint256);\n', '\n', '    function vaults(address) external view returns(address);\n', '\n', '    function strategies(address) external view returns(address);\n', '\n', '    function inRegister() external view returns (bool);\n', '}\n', '\n', '// File: contracts/libraries/ExpandMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// a library for performing various math operations\n', '\n', 'library ExpandMath {\n', '\n', '    uint256 internal constant BONE = 10**18;\n', '\n', '    // Add two numbers together checking for overflows\n', '    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // subtract two numbers and return diffecerence when it underflows\n', '    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    // Subtract two numbers checking for underflows\n', '    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        (uint256 c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // Multiply two 18 decimals numbers\n', '    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint256 c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint256 c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    // Divide two 18 decimals numbers\n', '    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint256 c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint256 c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint256 c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/other/ReentryProtection.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract ReentryProtection {\n', '  bytes32 public constant rpSlot = keccak256("ReentryProtection.storage.location");\n', '\n', '  struct rps {\n', '    uint256 lockCounter;\n', '  }\n', '\n', '  modifier denyReentry {\n', '    lrps().lockCounter++;\n', '    uint256 lockValue = lrps().lockCounter;\n', '    _;\n', '    require(lockValue == lrps().lockCounter, "ReentryProtection.noReentry: reentry detected");\n', '  }\n', '\n', '  function lrps() internal pure returns (rps storage s) {\n', '    bytes32 loc = rpSlot;\n', '    assembly {\n', '      s_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/KToken.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract KToken is Context,IERC20{\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowances;\n', '  uint256 private _totalSupply;\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  function _init(string memory name,string memory symbol,uint8 decimals)internal virtual{\n', '    _name=name;\n', '    _symbol=symbol;\n', '    _decimals=decimals;\n', '  }\n', '  /**\n', '   * @dev Returns the name of the token.\n', '   */\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the symbol of the token, usually a shorter version of the\n', '   * name.\n', '   */\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of decimals used to get its user representation.\n', '   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '   *\n', '   * Tokens usually opt for a value of 18, imitating the relationship between\n', '   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '   * called.\n', '   *\n', '   * NOTE: This information is only used for _display_ purposes: it in\n', '   * no way affects any of the arithmetic of the contract, including\n', '   * {IERC20-balanceOf} and {IERC20-transfer}.\n', '   */\n', '  function decimals() public view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-totalSupply}.\n', '   */\n', '  function totalSupply() public view override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-balanceOf}.\n', '   */\n', '  function balanceOf(address account) public view override returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '  /**\n', '       * @dev See {IERC20-transfer}.\n', '       *\n', '       * Requirements:\n', '       *\n', '       * - `recipient` cannot be the zero address.\n', '       * - the caller must have a balance of at least `amount`.\n', '       */\n', '  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '    _transfer(_msgSender(), recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-allowance}.\n', '   */\n', '  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-approve}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '    _approve(_msgSender(), spender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-transferFrom}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance. This is not\n', '   * required by the EIP. See the note at the beginning of {ERC20};\n', '   *\n', '   * Requirements:\n', '   * - `sender` and `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', "   * - the caller must have allowance for ``sender``'s tokens of at least\n", '   * `amount`.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '    require(\n', '      _msgSender() == sender || amount <= _allowances[sender][_msgSender()],\n', '      "ERR_KTOKEN_BAD_CALLER"\n', '    );\n', '    _transfer(sender, recipient, amount);\n', '    if (_msgSender() != sender && _allowances[sender][_msgSender()] != uint256(-1)) {\n', '      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   * - `spender` must have allowance for the caller of at least\n', '   * `subtractedValue`.\n', '   */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '   *\n', '   * This is internal function is equivalent to {transfer}, and can be used to\n', '   * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `sender` cannot be the zero address.\n', '   * - `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', '   */\n', '  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '    require(sender != address(0), "ERC20: transfer from the zero address");\n', '    require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '    _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '    _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '    _balances[recipient] = _balances[recipient].add(amount);\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '\n', '  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '   * the total supply.\n', '   *\n', '   * Emits a {Transfer} event with `from` set to the zero address.\n', '   *\n', '   * Requirements\n', '   *\n', '   * - `to` cannot be the zero address.\n', '   */\n', '  function _mint(address account, uint256 amount) internal virtual {\n', '    require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '    _beforeTokenTransfer(address(0), account, amount);\n', '\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Destroys `amount` tokens from `account`, reducing the\n', '   * total supply.\n', '   *\n', '   * Emits a {Transfer} event with `to` set to the zero address.\n', '   *\n', '   * Requirements\n', '   *\n', '   * - `account` cannot be the zero address.\n', '   * - `account` must have at least `amount` tokens.\n', '   */\n', '  function _burn(address account, uint256 amount) internal virtual {\n', '    require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '    _beforeTokenTransfer(account, address(0), amount);\n', '\n', '    _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '   *\n', '   * This internal function is equivalent to `approve`, and can be used to\n', '   * e.g. set automatic allowances for certain subsystems, etc.\n', '   *\n', '   * Emits an {Approval} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `owner` cannot be the zero address.\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '    require(owner != address(0), "ERC20: approve from the zero address");\n', '    require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    _allowances[owner][spender] = amount;\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Hook that is called before any transfer of tokens. This includes\n', '   * minting and burning.\n', '   *\n', '   * Calling conditions:\n', '   *\n', "   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '   * will be to transferred to `to`.\n', '   * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '   * - `from` and `to` are never both zero.\n', '   *\n', '   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '   */\n', '  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/storage/SmartPoolStorage.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library SmartPoolStorage {\n', '\n', '  bytes32 public constant sSlot = keccak256("SmartPoolStorage.storage.location");\n', '\n', '  struct Storage{\n', '    address controller;\n', '    uint256 cap;\n', '    mapping(FeeType=>Fee) fees;\n', '  }\n', '\n', '  struct Fee{\n', '    uint256 ratio;\n', '    uint256 denominator;\n', '    uint256 lastTimestamp;\n', '  }\n', '\n', '  enum FeeType{\n', '    JOIN_FEE,EXIT_FEE,MANAGEMENT_FEE\n', '  }\n', '\n', '  function load() internal pure returns (Storage storage s) {\n', '    bytes32 loc = sSlot;\n', '    assembly {\n', '      s_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/libraries/ChargeModelLibrary.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', 'library ChargeModelLibrary {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event FeeChanged(address indexed setter, uint256 oldRatio, uint256 oldDenominator, uint256 newRatio, uint256 newDenominator);\n', '\n', '\n', '    function getFee(SmartPoolStorage.FeeType ft)internal view returns(uint256,uint256){\n', '        SmartPoolStorage.Fee memory fee=SmartPoolStorage.load().fees[ft];\n', '        if(fee.denominator==0){\n', '            return(fee.ratio,1000);\n', '        }else{\n', '            return(fee.ratio,fee.denominator);\n', '        }\n', '    }\n', '\n', '    function setFee(SmartPoolStorage.FeeType ft,uint256 ratio,uint256 denominator)internal {\n', '        require(ratio<=denominator,"ChargeModelLibrary.setFee: setFee ratio<=denominator");\n', '        SmartPoolStorage.Fee storage fee=SmartPoolStorage.load().fees[ft];\n', '        fee.ratio=ratio;\n', '        fee.denominator=denominator;\n', '        fee.lastTimestamp=block.timestamp;\n', '        emit FeeChanged(msg.sender, fee.ratio,fee.denominator, ratio,denominator);\n', '    }\n', '\n', '    function calcFee(SmartPoolStorage.FeeType ft,uint256 totalAmount)internal view returns(uint256){\n', '        SmartPoolStorage.Fee memory fee=SmartPoolStorage.load().fees[ft];\n', '        uint256 denominator=fee.denominator==0?1000:fee.denominator;\n', '        uint256 ratio=fee.ratio;\n', '        if(SmartPoolStorage.FeeType.JOIN_FEE==ft||SmartPoolStorage.FeeType.EXIT_FEE==ft){\n', '            uint256 amountRatio=totalAmount.div(denominator);\n', '            return amountRatio.mul(ratio);\n', '        }else if(SmartPoolStorage.FeeType.MANAGEMENT_FEE==ft){\n', '            if(fee.lastTimestamp==0||totalAmount==0){\n', '                return 0;\n', '            }else{\n', '                uint256 diff=block.timestamp.sub(fee.lastTimestamp);\n', '                return totalAmount.mul(diff).mul(ratio).div(denominator*365.25 days);\n', '            }\n', '        }else{\n', '            return 0;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/storage/GovIdentityStorage.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library GovIdentityStorage {\n', '\n', '  bytes32 public constant govSlot = keccak256("GovIdentityStorage.storage.location");\n', '\n', '  struct Identity{\n', '    address governance;\n', '    address strategist;\n', '    address rewards;\n', '  }\n', '\n', '  function load() internal pure returns (Identity storage gov) {\n', '    bytes32 loc = govSlot;\n', '    assembly {\n', '      gov_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/GovIdentity.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract GovIdentity {\n', '\n', '    constructor() public {\n', '        _build();\n', '    }\n', '\n', '    function _build() internal{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = msg.sender;\n', '        identity.strategist = msg.sender;\n', '        identity.rewards = msg.sender;\n', '    }\n', '    modifier onlyGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategistOrGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.strategist || msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance and !strategist");\n', '        _;\n', '    }\n', '\n', '    function setRewards(address _rewards) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.rewards = _rewards;\n', '    }\n', '\n', '    function setStrategist(address _strategist) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = _governance;\n', '    }\n', '\n', '    function getRewards() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.rewards ;\n', '    }\n', '\n', '    function getStrategist() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.strategist;\n', '    }\n', '\n', '    function getGovernance() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.governance;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/BasicSmartPoolV2.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract BasicSmartPoolV2 is KToken,GovIdentity{\n', '\n', '  event ControllerChanged(address indexed previousController, address indexed newController);\n', '  event ChargeManagementFee(uint256 outstandingFee);\n', '  event CapChanged(address indexed setter, uint256 oldCap, uint256 newCap);\n', '\n', '  modifier onlyController() {\n', '    require(msg.sender == getController(), "BasicSmartPoolV2.onlyController: not controller");\n', '    _;\n', '  }\n', '\n', '  modifier withinCap() {\n', '    _;\n', '    require(totalSupply() <= getCap(), "BasicSmartPoolV2.withinCap: Cap limit reached");\n', '  }\n', '\n', '  function _init(string memory name,string memory symbol,uint8 decimals) internal override {\n', '    super._init(name,symbol,decimals);\n', '    _build();\n', '  }\n', '\n', '  function updateName(string memory name,string memory symbol)external onlyGovernance{\n', '     super._init(name,symbol,decimals());\n', '  }\n', '\n', '  function getCap() public view returns (uint256){\n', '    return SmartPoolStorage.load().cap;\n', '  }\n', '\n', '  function setCap(uint256 cap) external onlyGovernance {\n', '    emit CapChanged(msg.sender, getCap(), cap);\n', '    SmartPoolStorage.load().cap= cap;\n', '  }\n', '\n', '  function getController() public view returns (address){\n', '    return SmartPoolStorage.load().controller;\n', '  }\n', '\n', '  function setController(address controller) public onlyGovernance {\n', '    emit ControllerChanged(getController(), controller);\n', '    SmartPoolStorage.load().controller= controller;\n', '  }\n', '\n', '  function getJoinFeeRatio() public view returns (uint256,uint256){\n', '    return getFee(SmartPoolStorage.FeeType.JOIN_FEE);\n', '  }\n', '\n', '  function getExitFeeRatio() public view returns (uint256,uint256){\n', '    return getFee(SmartPoolStorage.FeeType.EXIT_FEE);\n', '  }\n', '\n', '  function getFee(SmartPoolStorage.FeeType ft) public view returns (uint256,uint256){\n', '    return ChargeModelLibrary.getFee(ft);\n', '  }\n', '\n', '  function setFee(SmartPoolStorage.FeeType ft,uint256 ratio,uint256 denominator) external onlyGovernance {\n', '    if(ft==SmartPoolStorage.FeeType.MANAGEMENT_FEE){\n', '      chargeOutstandingManagementFee();\n', '    }\n', '    ChargeModelLibrary.setFee(ft,ratio,denominator);\n', '  }\n', '\n', '  function calcFee(SmartPoolStorage.FeeType ft,uint256 amount)public view returns(uint256){\n', '    return ChargeModelLibrary.calcFee(ft,amount);\n', '  }\n', '\n', '  function chargeOutstandingManagementFee()public onlyGovernance{\n', '    SmartPoolStorage.Fee storage fee=SmartPoolStorage.load().fees[SmartPoolStorage.FeeType.MANAGEMENT_FEE];\n', '    uint256 outstandingFee = calcFee(SmartPoolStorage.FeeType.MANAGEMENT_FEE,totalSupply());\n', '    if (outstandingFee > 0) {\n', '      _mint(getRewards(), outstandingFee);\n', '      fee.lastTimestamp = block.timestamp;\n', '      emit ChargeManagementFee(outstandingFee);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/vaults/KVault.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract KVault is BasicSmartPoolV2{\n', '\n', '  using SafeERC20 for IERC20;\n', '  using ExpandMath for uint256;\n', '\n', '  address public token;\n', '\n', '  event PoolJoined(address indexed sender,address indexed to, uint256 amount);\n', '  event PoolExited(address indexed sender,address indexed from, uint256 amount);\n', '\n', '  function init(string memory _name,string memory _symbol,address _token) public {\n', '    require(token == address(0), "KVault.init: already initialised");\n', '    require(_token != address(0), "KVault.init: _token cannot be 0x00....000");\n', '    super._init(_name,_symbol,ERC20(_token).decimals());\n', '    token=_token;\n', '  }\n', '\n', '  function joinPool(uint256 amount) public {\n', '    IERC20 tokenContract=IERC20(token);\n', '    require(amount<=tokenContract.balanceOf(msg.sender)&&amount>0,"KVault.joinPool: Insufficient balance");\n', '    uint256 shares=calcTokenToKf(amount);\n', '    uint256 fee=calcFee(SmartPoolStorage.FeeType.JOIN_FEE,shares);\n', '    if(fee>0){\n', '      _mint(getRewards(),fee);\n', '    }\n', '    _mint(msg.sender,shares.sub(fee));\n', '    tokenContract.safeTransferFrom(msg.sender, address(this), amount);\n', '    emit PoolJoined(msg.sender,msg.sender,shares);\n', '  }\n', '\n', '  function exitPool(uint256 amount) external{\n', '    require(balanceOf(msg.sender)>=amount&&amount>0,"KVault.exitPool: Insufficient balance");\n', '    uint256 fee=calcFee(SmartPoolStorage.FeeType.EXIT_FEE,amount);\n', '    uint256 exitAmount=amount.sub(fee);\n', '    uint256 tokenAmount = calcKfToToken(exitAmount);\n', '    // Check cash balance\n', '    IERC20 tokenContract=IERC20(token);\n', '    uint256 cashBal = tokenContract.balanceOf(address(this));\n', '    if (cashBal < tokenAmount) {\n', '      uint256 diff = tokenAmount.sub(cashBal);\n', '      IController(getController()).harvest(diff);\n', '      tokenAmount=tokenContract.balanceOf(address(this));\n', '    }\n', '    tokenContract.safeTransfer(msg.sender,tokenAmount);\n', '    if(fee>0){\n', '      transferFrom(msg.sender,getRewards(),fee);\n', '    }\n', '    _burn(msg.sender,exitAmount);\n', '    emit PoolExited(msg.sender,msg.sender,exitAmount);\n', '  }\n', '\n', '  function transferCash(address to,uint256 amount)external onlyController{\n', "    require(amount>0,'KVault.transferCash: Must be greater than 0 amount');\n", '    uint256 available = IERC20(token).balanceOf(address(this));\n', "    require(amount<=available,'KVault.transferCash: Must be less than balance');\n", '    IERC20(token).safeTransfer(to, amount);\n', '  }\n', '\n', '  function calcKfToToken(uint256 amount) public view returns(uint256){\n', '    if(totalSupply()==0){\n', '      return amount;\n', '    }else{\n', '      return (assets().mul(amount)).div(totalSupply());\n', '    }\n', '  }\n', '\n', '  function calcTokenToKf(uint256 amount) public view returns(uint256){\n', '    uint256 shares=0;\n', '    if(totalSupply()==0){\n', '      shares=amount;\n', '    }else{\n', '      shares=amount.mul(totalSupply()).div(assets());\n', '    }\n', '    return shares;\n', '  }\n', '\n', '  function assets()public view returns(uint256){\n', '    return IERC20(token).balanceOf(address(this)).add(IController(getController()).assets());\n', '  }\n', '}']