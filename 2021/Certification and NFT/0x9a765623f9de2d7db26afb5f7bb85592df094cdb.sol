['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.7.6;  \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'abstract contract IDSProxy {\n', '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public\n', '    //     payable\n', '    //     virtual\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public payable virtual returns (bool);\n', '\n', '    function owner() public view virtual returns (address);\n', '}  \n', '\n', '\n', '\n', 'contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "");\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  \n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IWETH {\n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) public virtual returns (bool);\n', '\n', '    function deposit() public payable virtual;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  \n', '\n', '\n', '\n', 'interface IExchangeV3 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '}  \n', '\n', '\n', '\n', 'abstract contract IDFSRegistry {\n', ' \n', '    function getAddr(bytes32 _id) public view virtual returns (address);\n', '\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public virtual;\n', '\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n', '\n', '    function approveContractChange(bytes32 _id) public virtual;\n', '\n', '    function cancelContractChange(bytes32 _id) public virtual;\n', '\n', '    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n', '}  \n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '/// @title A stateful contract that holds and can change owner/admin\n', 'contract AdminVault {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function changeOwner(address _owner) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function changeAdmin(address _admin) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        admin = _admin;\n', '    }\n', '\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title AdminAuth Handles owner/admin privileges over smart contracts\n', 'contract AdminAuth {\n', '    using SafeERC20 for IERC20;\n', '\n', '    AdminVault public constant adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\n', '\n', '    modifier onlyOwner() {\n', '        require(adminVault.owner() == msg.sender, "msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(adminVault.admin() == msg.sender, "msg.sender not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(_receiver).transfer(_amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyAdmin {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', 'contract ZrxAllowlist is AdminAuth {\n', '    mapping(address => bool) public zrxAllowlist;\n', '\n', '    constructor() {\n', '        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\n', '        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\n', '        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n', '        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '    }\n', '\n', '    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n', '        zrxAllowlist[_zrxAddr] = _state;\n', '    }\n', '\n', '    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n', '        return zrxAllowlist[_zrxAddr];\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', 'contract DFSExchangeData {\n', '\n', '    // first is empty to keep the legacy order in place\n', '    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n', '\n', '    enum ExchangeActionType { SELL, BUY }\n', '\n', '    struct OffchainData {\n', '        address wrapper;\n', '        address exchangeAddr;\n', '        address allowanceTarget;\n', '        uint256 price;\n', '        uint256 protocolFee;\n', '        bytes callData;\n', '    }\n', '\n', '    struct ExchangeData {\n', '        address srcAddr;\n', '        address destAddr;\n', '        uint256 srcAmount;\n', '        uint256 destAmount;\n', '        uint256 minPrice;\n', '        uint256 dfsFeeDivider; // service fee divider\n', '        address user; // user to check special fee\n', '        address wrapper;\n', '        bytes wrapperData;\n', '        OffchainData offchainData;\n', '    }\n', '\n', '    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n', '        return abi.encode(_exData);\n', '    }\n', '\n', '    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n', '        _exData = abi.decode(_data, (ExchangeData));\n', '    }\n', '}  \n', '\n', '\n', '\n', 'contract Discount {\n', '    address public owner;\n', '    mapping(address => CustomServiceFee) public serviceFees;\n', '\n', '    uint256 constant MAX_SERVICE_FEE = 400;\n', '\n', '    struct CustomServiceFee {\n', '        bool active;\n', '        uint256 amount;\n', '    }\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isCustomFeeSet(address _user) public view returns (bool) {\n', '        return serviceFees[_user].active;\n', '    }\n', '\n', '    function getCustomServiceFee(address _user) public view returns (uint256) {\n', '        return serviceFees[_user].amount;\n', '    }\n', '\n', '    function setServiceFee(address _user, uint256 _fee) public {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(_fee >= MAX_SERVICE_FEE || _fee == 0, "Wrong fee value");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n', '    }\n', '\n', '    function disableServiceFee(address _user) public {\n', '        require(msg.sender == owner, "Only owner");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '/// @title Stores the fee recipient address and allows the owner to change it\n', 'contract FeeRecipient is AdminAuth {\n', '\n', '    address public wallet;\n', '\n', '    constructor(address _newWallet) {\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    function getFeeAddr() public view returns (address) {\n', '        return wallet;\n', '    }\n', '\n', '    function changeWalletAddr(address _newWallet) public onlyOwner {\n', '        wallet = _newWallet;\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TokenUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function approveToken(\n', '        address _tokenAddr,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_tokenAddr == ETH_ADDR) return;\n', '\n', '        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n', '            IERC20(_tokenAddr).safeApprove(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function pullTokensIfNeeded(\n', '        address _token,\n', '        address _from,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        // handle max uint amount\n', '        if (_amount == type(uint256).max) {\n', '            uint256 userAllowance = IERC20(_token).allowance(_from, address(this));\n', '            uint256 balance = getBalance(_token, _from);\n', '\n', '            // pull max allowance amount if balance is bigger than allowance\n', '            _amount = (balance > userAllowance) ? userAllowance : balance;\n', '        }\n', '\n', '        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n', '            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawTokens(\n', '        address _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, address(this));\n', '        }\n', '\n', '        if (_to != address(0) && _to != address(this) && _amount != 0) {\n', '            if (_token != ETH_ADDR) {\n', '                IERC20(_token).safeTransfer(_to, _amount);\n', '            } else {\n', '                payable(_to).transfer(_amount);\n', '            }\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function depositWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).deposit{value: _amount}();\n', '    }\n', '\n', '    function withdrawWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).withdraw(_amount);\n', '    }\n', '\n', '    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n', '        if (_tokenAddr == ETH_ADDR) {\n', '            return _acc.balance;\n', '        } else {\n', '            return IERC20(_tokenAddr).balanceOf(_acc);\n', '        }\n', '    }\n', '\n', '    function getTokenDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == ETH_ADDR) return 18;\n', '\n', '        return IERC20(_token).decimals();\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchangeHelper {\n', '    \n', '    using TokenUtils for address;\n', '    \n', '    string public constant ERR_OFFCHAIN_DATA_INVALID = "Offchain data invalid";\n', '\n', '    using SafeERC20 for IERC20;\n', '\n', '    function sendLeftover(\n', '        address _srcAddr,\n', '        address _destAddr,\n', '        address payable _to\n', '    ) internal {\n', '        // clean out any eth leftover\n', '        TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);\n', '\n', '        _srcAddr.withdrawTokens(_to, type(uint256).max);\n', '        _destAddr.withdrawTokens(_to, type(uint256).max);\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '\n', '    function writeUint256(\n', '        bytes memory _b,\n', '        uint256 _index,\n', '        uint256 _input\n', '    ) internal pure {\n', '        if (_b.length < _index + 32) {\n', '            revert(ERR_OFFCHAIN_DATA_INVALID);\n', '        }\n', '\n', '        bytes32 input = bytes32(_input);\n', '\n', '        _index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(_b, _index), input)\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', 'contract SaverExchangeRegistry is AdminAuth {\n', '\n', '\tmapping(address => bool) private wrappers;\n', '\n', '\tfunction addWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = true;\n', '\t}\n', '\n', '\tfunction removeWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = false;\n', '\t}\n', '\n', '\tfunction isWrapper(address _wrapper) public view returns(bool) {\n', '\t\treturn wrappers[_wrapper];\n', '\t}\n', '}  \n', '\n', '\n', '\n', ' \n', '\n', '\n', '\n', 'abstract contract IOffchainWrapper is DFSExchangeData {\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ExchangeActionType _type\n', '    ) virtual public payable returns (bool success, uint256);\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\n', '    using SafeERC20 for IERC20;\n', '    using TokenUtils for address;\n', '\n', '    string public constant ERR_SLIPPAGE_HIT = "Slippage hit";\n', '    string public constant ERR_DEST_AMOUNT_MISSING = "Dest amount missing";\n', '    string public constant ERR_WRAPPER_INVALID = "Wrapper invalid";\n', '    string public constant ERR_NOT_ZEROX_EXCHANGE = "Zerox exchange invalid";\n', '\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n', '    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n', '\n', '    FeeRecipient public constant feeRecipient =\n', '        FeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\n', '\n', '    /// @notice Internal method that preforms a sell on 0x/on-chain\n', '    /// @dev Useful for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and destAmount\n', '    function _sell(ExchangeData memory exData) internal returns (address, uint256) {\n', '        uint256 amountWithoutFee = exData.srcAmount;\n', '        address wrapper = exData.offchainData.wrapper;\n', '        bool offChainSwapSuccess;\n', '\n', '        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\n', '\n', '        // Takes DFS exchange fee\n', '        exData.srcAmount = sub(exData.srcAmount, getFee(\n', '            exData.srcAmount,\n', '            exData.user,\n', '            exData.srcAddr,\n', '            exData.dfsFeeDivider\n', '        ));\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.offchainData.price > 0) {\n', '            (offChainSwapSuccess, ) = offChainSwap(exData, ExchangeActionType.SELL);\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!offChainSwapSuccess) {\n', '            onChainSwap(exData, ExchangeActionType.SELL);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\n', '        uint256 amountBought = sub(destBalanceAfter, destBalanceBefore);\n', '\n', '        // check slippage\n', '        require(amountBought >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '\n', '        // revert back exData changes to keep it consistent\n', '        exData.srcAmount = amountWithoutFee;\n', '\n', '        return (wrapper, amountBought);\n', '    }\n', '\n', '    /// @notice Internal method that preforms a buy on 0x/on-chain\n', '    /// @dev Useful for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and srcAmount\n', '    function _buy(ExchangeData memory exData) internal returns (address, uint256) {\n', '        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\n', '\n', '        uint256 amountWithoutFee = exData.srcAmount;\n', '        address wrapper = exData.offchainData.wrapper;\n', '        bool offChainSwapSuccess;\n', '\n', '        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\n', '\n', '        // Takes DFS exchange fee\n', '        exData.srcAmount = sub(exData.srcAmount, getFee(\n', '            exData.srcAmount,\n', '            exData.user,\n', '            exData.srcAddr,\n', '            exData.dfsFeeDivider\n', '        ));\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.offchainData.price > 0) {\n', '            (offChainSwapSuccess, ) = offChainSwap(exData, ExchangeActionType.BUY);\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!offChainSwapSuccess) {\n', '            onChainSwap(exData, ExchangeActionType.BUY);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\n', '        uint256 amountBought = sub(destBalanceAfter, destBalanceBefore);\n', '\n', '        // check slippage\n', '        require(amountBought >= exData.destAmount, ERR_SLIPPAGE_HIT);\n', '\n', '        // revert back exData changes to keep it consistent\n', '        exData.srcAmount = amountWithoutFee;\n', '\n', '        return (wrapper, amountBought);\n', '    }\n', '\n', '    /// @notice Takes order from 0x and returns bool indicating if it is successful\n', '    /// @param _exData Exchange data\n', '    function offChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\n', '        private\n', '        returns (bool success, uint256)\n', '    {\n', '        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        if (\n', '            !SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)\n', '        ) {\n', '            return (false, 0);\n', '        }\n', '\n', '        // send src amount\n', '        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n', '\n', '        return\n', '            IOffchainWrapper(_exData.offchainData.wrapper).takeOrder{\n', '                value: _exData.offchainData.protocolFee\n', '            }(_exData, _type);\n', '    }\n', '\n', '    /// @notice Calls wrapper contract for exchange to preform an on-chain swap\n', '    /// @param _exData Exchange data struct\n', '    /// @param _type Type of action SELL|BUY\n', '    /// @return swappedTokens For Sell that the destAmount, for Buy thats the srcAmount\n', '    function onChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\n', '        internal\n', '        returns (uint256 swappedTokens)\n', '    {\n', '        require(\n', '            SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper),\n', '            ERR_WRAPPER_INVALID\n', '        );\n', '\n', '        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n', '\n', '        if (_type == ExchangeActionType.SELL) {\n', '            swappedTokens = IExchangeV3(_exData.wrapper).sell(\n', '                _exData.srcAddr,\n', '                _exData.destAddr,\n', '                _exData.srcAmount,\n', '                _exData.wrapperData\n', '            );\n', '        } else {\n', '            swappedTokens = IExchangeV3(_exData.wrapper).buy(\n', '                _exData.srcAddr,\n', '                _exData.destAddr,\n', '                _exData.destAmount,\n', '                _exData.wrapperData\n', '            );\n', '        }\n', '    }\n', '\n', '    /// @notice Takes a feePercentage and sends it to wallet\n', '    /// @param _amount Dai amount of the whole trade\n', '    /// @param _user Address of the user\n', '    /// @param _token Address of the token\n', '    /// @param _dfsFeeDivider Dfs fee divider\n', '    /// @return feeAmount Amount in Dai owner earned on the fee\n', '    function getFee(\n', '        uint256 _amount,\n', '        address _user,\n', '        address _token,\n', '        uint256 _dfsFeeDivider\n', '    ) internal returns (uint256 feeAmount) {\n', '        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n', '            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n', '        }\n', '\n', '        if (_dfsFeeDivider == 0) {\n', '            feeAmount = 0;\n', '        } else {\n', '            feeAmount = _amount / _dfsFeeDivider;\n', '\n', "            // fee can't go over 10% of the whole amount\n", '            if (feeAmount > (_amount / 10)) {\n', '                feeAmount = _amount / 10;\n', '            }\n', '\n', '            address walletAddr = feeRecipient.getFeeAddr();\n', '\n', '            _token.withdrawTokens(walletAddr, feeAmount);\n', '        }\n', '    }\n', '\n', '}  \n', '\n', '\n', '\n', 'contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(\n', '        address _contract,\n', '        address _caller,\n', '        string memory _logName,\n', '        bytes memory _data\n', '    ) public {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Stores all the important DFS addresses and can be changed (timelock)\n', 'contract DFSRegistry is AdminAuth {\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";\n', '    string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn\'t exists";\n', '    string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";\n', '    string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";\n', '    string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";\n', '    string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";\n', '    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";\n', '    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";\n', '\n', '    struct Entry {\n', '        address contractAddr;\n', '        uint256 waitPeriod;\n', '        uint256 changeStartTime;\n', '        bool inContractChange;\n', '        bool inWaitPeriodChange;\n', '        bool exists;\n', '    }\n', '\n', '    mapping(bytes32 => Entry) public entries;\n', '    mapping(bytes32 => address) public previousAddresses;\n', '\n', '    mapping(bytes32 => address) public pendingAddresses;\n', '    mapping(bytes32 => uint256) public pendingWaitTimes;\n', '\n', '    /// @notice Given an contract id returns the registered address\n', '    /// @dev Id is keccak256 of the contract name\n', '    /// @param _id Id of contract\n', '    function getAddr(bytes32 _id) public view returns (address) {\n', '        return entries[_id].contractAddr;\n', '    }\n', '\n', '    /// @notice Helper function to easily query if id is registered\n', '    /// @param _id Id of contract\n', '    function isRegistered(bytes32 _id) public view returns (bool) {\n', '        return entries[_id].exists;\n', '    }\n', '\n', '    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n', '\n', '    /// @notice Adds a new contract to the registry\n', '    /// @param _id Id of contract\n', '    /// @param _contractAddr Address of the contract\n', '    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public onlyOwner {\n', '        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\n', '\n', '        entries[_id] = Entry({\n', '            contractAddr: _contractAddr,\n', '            waitPeriod: _waitPeriod,\n', '            changeStartTime: 0,\n', '            inContractChange: false,\n', '            inWaitPeriodChange: false,\n', '            exists: true\n', '        });\n', '\n', '        // Remember tha address so we can revert back to old addr if needed\n', '        previousAddresses[_id] = _contractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "AddNewContract",\n', '            abi.encode(_id, _contractAddr, _waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Reverts to the previous address immediately\n', '    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n', '    /// @param _id Id of contract\n', '    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\n', '\n', '        address currentAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = previousAddresses[_id];\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "RevertToPreviousAddress",\n', '            abi.encode(_id, currentAddr, previousAddresses[_id])\n', '        );\n', '    }\n', '\n', '    /// @notice Starts an address change for an existing entry\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    /// @param _newContractAddr Address of the new contract\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inContractChange = true;\n', '\n', '        pendingAddresses[_id] = _newContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartContractChange",\n', '            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new contract address, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        address oldContractAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = pendingAddresses[_id];\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        previousAddresses[_id] = oldContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel pending change\n', '    /// @param _id Id of contract\n', '    function cancelContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        address oldContractAddr = pendingAddresses[_id];\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Starts the change for waitPeriod\n', '    /// @param _id Id of contract\n', '    /// @param _newWaitPeriod New wait time\n', '    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\n', '\n', '        pendingWaitTimes[_id] = _newWaitPeriod;\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inWaitPeriodChange = true;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartWaitPeriodChange",\n', '            abi.encode(_id, _newWaitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new wait period, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        uint256 oldWaitTime = entries[_id].waitPeriod;\n', '        entries[_id].waitPeriod = pendingWaitTimes[_id];\n', '        \n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveWaitPeriodChange",\n', '            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel wait period change\n', '    /// @param _id Id of contract\n', '    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelWaitPeriodChange",\n', '            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '/// @title Implements Action interface and common helpers for passing inputs\n', 'abstract contract ActionBase is AdminAuth {\n', '    address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\n', '    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";\n', '    string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";\n', '\n', '    /// @dev Subscription params index range [128, 255]\n', '    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n', '    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n', '\n', '    /// @dev Return params index range [1, 127]\n', '    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n', '    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n', '\n', '    /// @dev If the input value should not be replaced\n', '    uint8 public constant NO_PARAM_MAPPING = 0;\n', '\n', '    /// @dev We need to parse Flash loan actions in a different way\n', '    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\n', '\n', '    /// @notice Parses inputs and runs the implemented action through a proxy\n', '    /// @dev Is called by the TaskExecutor chaining actions together\n', '    /// @param _callData Array of input values each value encoded as bytes\n', '    /// @param _subData Array of subscribed vales, replaces input values if specified\n', '    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n', '    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n', '    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual returns (bytes32);\n', '\n', '    /// @notice Parses inputs and runs the single implemented action through a proxy\n', '    /// @dev Used to save gas when executing a single action directly\n', '    function executeActionDirect(bytes[] memory _callData) public virtual payable;\n', '\n', '    /// @notice Returns the type of action we are implementing\n', '    function actionType() public pure virtual returns (uint8);\n', '\n', '\n', '    //////////////////////////// HELPER METHODS ////////////////////////////\n', '\n', '    /// @notice Given an uint256 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamUint(\n', '        uint _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (uint) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '\n', '    /// @notice Given an addr input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamAddr(\n', '        address _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (address) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Given an bytes32 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamABytes32(\n', '        bytes32 _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (bytes32) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = (_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value indicated that we need to inject values\n', '    /// @param _type Indicated the type of the input\n', '    function isReplaceable(uint8 _type) internal pure returns (bool) {\n', '        return _type != NO_PARAM_MAPPING;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value is in the return value range\n', '    /// @param _type Indicated the type of the input\n', '    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n', '        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in return array value\n', '    /// @param _type Indicated the type of the input\n', '    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\n', '\n', '        return (_type - RETURN_MIN_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in sub array value\n', '    /// @param _type Indicated the type of the input\n', '    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\n', '\n', '        return (_type - SUB_MIN_INDEX_VALUE);\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '\n', '/// @title A exchange sell action through the dfs exchange\n', 'contract DFSSell is ActionBase, DFSExchangeCore {\n', '\n', '    using TokenUtils for address;\n', '\n', '    uint internal constant RECIPE_FEE = 400;\n', '    uint internal constant DIRECT_FEE = 800;\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public override payable returns (bytes32) {\n', '        (ExchangeData memory exchangeData, address from, address to) = parseInputs(_callData);\n', '\n', '        exchangeData.srcAddr = _parseParamAddr(\n', '            exchangeData.srcAddr,\n', '            _paramMapping[0],\n', '            _subData,\n', '            _returnValues\n', '        );\n', '        exchangeData.destAddr = _parseParamAddr(\n', '            exchangeData.destAddr,\n', '            _paramMapping[1],\n', '            _subData,\n', '            _returnValues\n', '        );\n', '\n', '        exchangeData.srcAmount = _parseParamUint(\n', '            exchangeData.srcAmount,\n', '            _paramMapping[2],\n', '            _subData,\n', '            _returnValues\n', '        );\n', '        from = _parseParamAddr(from, _paramMapping[3], _subData, _returnValues);\n', '        to = _parseParamAddr(to, _paramMapping[4], _subData, _returnValues);\n', '\n', '        uint256 exchangedAmount = _dfsSell(exchangeData, from, to, RECIPE_FEE);\n', '\n', '        return bytes32(exchangedAmount);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeActionDirect(bytes[] memory _callData) public override payable   {\n', '        (ExchangeData memory exchangeData, address from, address to) = parseInputs(_callData);\n', '\n', '        _dfsSell(exchangeData, from, to, DIRECT_FEE);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function actionType() public override pure returns (uint8) {\n', '        return uint8(ActionType.STANDARD_ACTION);\n', '    }\n', '\n', '\n', '    //////////////////////////// ACTION LOGIC ////////////////////////////\n', '\n', '    /// @notice Sells a specified srcAmount for the dest token\n', '    /// @param _exchangeData DFS Exchange data struct\n', "    /// @param _from Address from which we'll pull the srcTokens\n", "    /// @param _to Address where we'll send the _to token\n", '    /// @param _fee Fee divider for the exchange action\n', '    function _dfsSell(\n', '        ExchangeData memory _exchangeData,\n', '        address _from,\n', '        address _to,\n', '        uint _fee\n', '    ) internal returns (uint256) {\n', '         // if we set srcAmount to max, take the whole proxy balance\n', '        if (_exchangeData.srcAmount == type(uint256).max) {\n', '            _exchangeData.srcAmount = _exchangeData.srcAddr.getBalance(address(this));\n', '        }\n', '\n', '        _exchangeData.srcAddr.pullTokensIfNeeded(_from, _exchangeData.srcAmount);\n', '\n', '        _exchangeData.user = getUserAddress();\n', '        _exchangeData.dfsFeeDivider = _fee;\n', '\n', '        (address wrapper, uint256 exchangedAmount) = _sell(_exchangeData);\n', '\n', '        _exchangeData.destAddr.withdrawTokens(_to, exchangedAmount);\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "DfsSell",\n', '            abi.encode(\n', '                wrapper,\n', '                _exchangeData.srcAddr,\n', '                _exchangeData.destAddr,\n', '                _exchangeData.srcAmount,\n', '                exchangedAmount,\n', '                _fee\n', '            )\n', '        );\n', '\n', '        return exchangedAmount;\n', '    }\n', '\n', '    function parseInputs(bytes[] memory _callData)\n', '        public\n', '        pure\n', '        returns (\n', '            ExchangeData memory exchangeData,\n', '            address from,\n', '            address to\n', '        )\n', '    {\n', '        exchangeData = unpackExchangeData(_callData[0]);\n', '\n', '        from = abi.decode(_callData[1], (address));\n', '        to = abi.decode(_callData[2], (address));\n', '    }\n', '\n', '    /// @notice Returns the owner of the DSProxy that called the contract\n', '    function getUserAddress() internal view returns (address) {\n', '        IDSProxy proxy = IDSProxy(payable(address(this)));\n', '\n', '        return proxy.owner();\n', '    }\n', '}']