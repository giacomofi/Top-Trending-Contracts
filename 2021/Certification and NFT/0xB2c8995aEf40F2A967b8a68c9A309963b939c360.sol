['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'abstract contract ReentrancyGuard {\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() public {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_status != _ENTERED, "REENTRANCY_ERROR");\n', '\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '// Interface declarations\n', '/* solhint-disable func-order */\n', 'interface IUniswapRouter {\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IHarvestVault {\n', '    function deposit(uint256 amount) external;\n', '\n', '    function withdraw(uint256 numberOfShares) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IMintNoRewardPool {\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function rewards(address account) external view returns (uint256);\n', '\n', '    function userRewardPerTokenPaid(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function lastUpdateTime() external view returns (uint256);\n', '\n', '    function rewardRate() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function rewardPerTokenStored() external view returns (uint256);\n', '\n', '    function periodFinish() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function getReward() external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// This contract is used for printing receipt tokens\n', '// Whenever someone joins a pool, a receipt token will be printed for that person\n', 'contract ReceiptToken is ERC20, AccessControl {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");\n', '\n', '    constructor()\n', '        public\n', '        ERC20("pAT", "Parachain Auction Token")\n', '    {\n', '        // Grant the contract deployer the default admin role: it will be able\n', '        // to grant and revoke any roles\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Mint new receipt tokens to some user\n', '     * @param to Address of the user that gets the receipt tokens\n', '     * @param amount Amount of receipt tokens that will get minted\n', '    */\n', '    function mint(address to, uint256 amount) public {\n', '        require(\n', '            hasRole(MINTER_ROLE, msg.sender),\n', '            "ReceiptToken: Caller is not a minter"\n', '        );\n', '        _mint(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burn receipt tokens from some user\n', '     * @param from Address of the user that gets the receipt tokens burne\n', '     * @param amount Amount of receipt tokens that will get burned\n', '    */\n', '    function burn(address from, uint256 amount) public {\n', '        require(\n', '            hasRole(BURNER_ROLE, msg.sender),\n', '            "ReceiptToken: Caller is not a burner"\n', '        );\n', '        _burn(from, amount);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', '  |Strategy Flow| \n', '      - User shows up with ETH. \n', "      - We swap his ETH to DAI and then we deposit it in Havest's Vault. \n", "      - After this we have fDAI that we add in Harvest's Reward Pool which gives FARM as rewards\n", '\n', '    - Withdrawal flow does same thing, but backwards. \n', '*/\n', 'contract HarvestDAI is Ownable, ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    struct UserDeposits {\n', '        uint256 timestamp;\n', '        uint256 amountfDai;\n', '    }\n', '\n', '    /// @notice Info of each user.\n', '    struct UserInfo {\n', '        uint256 amountEth; //how much ETH the user entered with\n', "        uint256 amountDai; //how much DAI was obtained by swapping user's ETH\n", '        uint256 amountfDai; //how much fDAI was obtained after deposit to vault\n', '        uint256 amountReceiptToken; //receipt tokens printed for user; should be equal to amountfDai\n', '        uint256 underlyingRatio; //ratio between obtained fDai and dai\n', '        uint256 userTreasuryEth; //how much eth the user sent to treasury\n', '        uint256 userCollectedFees; //how much eth the user sent to fee address\n', '        uint256 joinTimestamp; //first deposit timestamp; taken into account for lock time\n', '        bool wasUserBlacklisted; //if user was blacklist at deposit time, he is not receiving receipt tokens\n', '        uint256 timestamp; //first deposit timestamp; used for withdrawal lock time check\n', '        UserDeposits[] deposits;\n', '        uint256 earnedTokens; //before fees\n', '        uint256 earnedRewards; //before fees\n', '    }\n', '    mapping(address => UserInfo) public userInfo;\n', '    mapping(address => bool) public blacklisted; //blacklisted users do not receive a receipt token\n', '\n', '    uint256 public firstDepositTimestamp; //used to calculate reward per block\n', '    uint256 public totalDeposits;\n', '\n', '    uint256 public cap = uint256(1000); //eth cap\n', '    uint256 public totalEth; //total invested eth\n', '    uint256 public ethPrice; //for UI; to be updated from a script\n', '    uint256 public lockTime = 10368000; //120 days\n', '\n', '    address payable public feeAddress;\n', '    uint256 public fee = uint256(50);\n', '    uint256 constant feeFactor = uint256(10000);\n', '\n', '    ReceiptToken public receiptToken;\n', '    address public dai;\n', '    address public weth;\n', '    address public farmToken;\n', '    address public harvestPoolToken;\n', '    address payable public treasuryAddress;\n', '    IMintNoRewardPool public harvestRewardPool; //deposit fDai\n', '    IHarvestVault public harvestRewardVault; //get fDai\n', '    IUniswapRouter public sushiswapRouter;\n', '\n', '    uint256 public ethDust;\n', '    uint256 public treasueryEthDust;\n', '\n', '    //events\n', '\n', '    event RewardsExchanged(\n', '        address indexed user,\n', '        uint256 rewardsAmount,\n', '        uint256 obtainedEth\n', '    );\n', '    event ExtraTokensExchanged(\n', '        address indexed user,\n', '        uint256 tokensAmount,\n', '        uint256 obtainedEth\n', '    );\n', '    event ObtainedInfo(\n', '        address indexed user,\n', '        uint256 underlying,\n', '        uint256 underlyingReceipt\n', '    );\n', '    event RewardsEarned(address indexed user, uint256 amount);\n', '    event ExtraTokens(address indexed user, uint256 amount);\n', '    event FeeSet(address indexed sender, uint256 feeAmount);\n', '    event FeeAddressSet(address indexed sender, address indexed feeAddress);\n', '\n', '    /// @notice Event emitted when blacklist status for an address changes\n', '    event BlacklistChanged(\n', '        string actionType,\n', '        address indexed user,\n', '        bool oldVal,\n', '        bool newVal\n', '    );\n', '    /// @notice Event emitted when user makes a deposit and receipt token is minted\n', '    event ReceiptMinted(address indexed user, uint256 amount);\n', '    /// @notice Event emitted when user withdraws and receipt token is burned\n', '    event ReceiptBurned(address indexed user, uint256 amount);\n', '\n', '    /// @notice Event emitted when user makes a deposit\n', '    event Deposit(\n', '        address indexed user,\n', '        address indexed origin,\n', '        uint256 amountEth,\n', '        uint256 amountDai,\n', '        uint256 amountfDai\n', '    );\n', '\n', '    /// @notice Event emitted when user withdraws\n', '    event Withdraw(\n', '        address indexed user,\n', '        address indexed origin,\n', '        uint256 amountEth,\n', '        uint256 amountDai,\n', '        uint256 amountfDai,\n', '        uint256 treasuryAmountEth\n', '    );\n', '\n', '    /// @notice Event emitted when owner makes a rescue dust request\n', '    event RescuedDust(string indexed dustType, uint256 amount);\n', '\n', '    /// @notice Event emitted when owner changes any contract address\n', '    event ChangedAddress(\n', '        string indexed addressType,\n', '        address indexed oldAddress,\n', '        address indexed newAddress\n', '    );\n', '\n', '    //internal\n', '    mapping(address => bool) public approved; //to defend against non whitelisted contracts\n', '\n', '    /// @notice Used internally for avoiding "stack-too-deep" error when depositing\n', '    struct DepositData {\n', '        address[] swapPath;\n', '        uint256[] swapAmounts;\n', '        uint256 obtainedDai;\n', '        uint256 obtainedfDai;\n', '        uint256 prevfDaiBalance;\n', '    }\n', '\n', '    /// @notice Used internally for avoiding "stack-too-deep" error when withdrawing\n', '    struct WithdrawData {\n', '        uint256 prevDustEthBalance;\n', '        uint256 prevfDaiBalance;\n', '        uint256 prevDaiBalance;\n', '        uint256 obtainedfDai;\n', '        uint256 obtainedDai;\n', '        uint256 feeableDai;\n', '        uint256 totalEth;\n', '        uint256 feeableEth;\n', '        uint256 auctionedEth;\n', '        uint256 rewards;\n', '        uint256 farmBalance;\n', '    }\n', '\n', '    /**\n', '     * @notice Create a new HarvestDAI contract\n', '     * @param _harvestRewardVault VaultDAI  address\n', '     * @param _harvestRewardPool NoMintRewardPool address\n', '     * @param _sushiswapRouter Sushiswap Router address\n', "     * @param _harvestPoolToken Pool's underlying token address\n", '     * @param _farmToken Farm address\n', '     * @param _dai DAI address\n', '     * @param _weth WETH address\n', '     * @param _treasuryAddress treasury address\n', '     * @param _receiptToken Receipt token that is minted and burned\n', '     * @param _feeAddress fee address\n', '     */\n', '    constructor(\n', '        address _harvestRewardVault,\n', '        address _harvestRewardPool,\n', '        address _sushiswapRouter,\n', '        address _harvestPoolToken,\n', '        address _farmToken,\n', '        address _dai,\n', '        address _weth,\n', '        address payable _treasuryAddress,\n', '        address _receiptToken,\n', '        address payable _feeAddress\n', '    ) public {\n', '        require(_harvestRewardVault != address(0), "VAULT_0x0");\n', '        require(_harvestRewardPool != address(0), "POOL_0x0");\n', '        require(_sushiswapRouter != address(0), "ROUTER_0x0");\n', '        require(_harvestPoolToken != address(0), "TOKEN_0x0");\n', '        require(_farmToken != address(0), "FARM_0x0");\n', '        require(_dai != address(0), "DAI_0x0");\n', '        require(_weth != address(0), "WETH_0x0");\n', '        require(_treasuryAddress != address(0), "TREASURY_0x0");\n', '        require(_receiptToken != address(0), "RECEIPT_0x0");\n', '        require(_feeAddress != address(0), "FEE_0x0");\n', '\n', '        harvestRewardVault = IHarvestVault(_harvestRewardVault);\n', '        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\n', '        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\n', '        harvestPoolToken = _harvestPoolToken;\n', '        farmToken = _farmToken;\n', '        dai = _dai;\n', '        weth = _weth;\n', '        treasuryAddress = _treasuryAddress;\n', '        receiptToken = ReceiptToken(_receiptToken);\n', '        feeAddress = _feeAddress;\n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Setters -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    /**\n', '     * @notice Update the address of VaultDAI\n', '     * @dev Can only be called by the owner\n', '     * @param _harvestRewardVault Address of VaultDAI\n', '     */\n', '    function setHarvestRewardVault(address _harvestRewardVault)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_harvestRewardVault != address(0), "VAULT_0x0");\n', '        emit ChangedAddress(\n', '            "VAULT",\n', '            address(harvestRewardVault),\n', '            _harvestRewardVault\n', '        );\n', '        harvestRewardVault = IHarvestVault(_harvestRewardVault);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of NoMintRewardPool\n', '     * @dev Can only be called by the owner\n', '     * @param _harvestRewardPool Address of NoMintRewardPool\n', '     */\n', '    function setHarvestRewardPool(address _harvestRewardPool) public onlyOwner {\n', '        require(_harvestRewardPool != address(0), "POOL_0x0");\n', '        emit ChangedAddress(\n', '            "POOL",\n', '            address(harvestRewardPool),\n', '            _harvestRewardPool\n', '        );\n', '        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of Sushiswap Router\n', '     * @dev Can only be called by the owner\n', '     * @param _sushiswapRouter Address of Sushiswap Router\n', '     */\n', '    function setSushiswapRouter(address _sushiswapRouter) public onlyOwner {\n', '        require(_sushiswapRouter != address(0), "0x0");\n', '        emit ChangedAddress(\n', '            "SUSHISWAP_ROUTER",\n', '            address(sushiswapRouter),\n', '            _sushiswapRouter\n', '        );\n', '        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\n', '    }\n', '\n', '    /**\n', "     * @notice Update the address of Pool's underlying token\n", '     * @dev Can only be called by the owner\n', "     * @param _harvestPoolToken Address of Pool's underlying token\n", '     */\n', '    function setHarvestPoolToken(address _harvestPoolToken) public onlyOwner {\n', '        require(_harvestPoolToken != address(0), "TOKEN_0x0");\n', '        emit ChangedAddress("TOKEN", harvestPoolToken, _harvestPoolToken);\n', '        harvestPoolToken = _harvestPoolToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of FARM\n', '     * @dev Can only be called by the owner\n', '     * @param _farmToken Address of FARM\n', '     */\n', '    function setFarmToken(address _farmToken) public onlyOwner {\n', '        require(_farmToken != address(0), "FARM_0x0");\n', '        emit ChangedAddress("FARM", farmToken, _farmToken);\n', '        farmToken = _farmToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address for fees\n', '     * @dev Can only be called by the owner\n', "     * @param _feeAddress Fee's address\n", '     */\n', '    function setTreasury(address payable _feeAddress) public onlyOwner {\n', '        require(_feeAddress != address(0), "0x0");\n', '        emit ChangedAddress(\n', '            "TREASURY",\n', '            address(treasuryAddress),\n', '            address(_feeAddress)\n', '        );\n', '        treasuryAddress = _feeAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve contract (only approved contracts or msg.sender==tx.origin can call this strategy)\n', '     * @dev Can only be called by the owner\n', "     * @param account Contract's address\n", '     */\n', '    function approveContractAccess(address account) external onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        approved[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @notice Revoke contract's access (only approved contracts or msg.sender==tx.origin can call this strategy)\n", '     * @dev Can only be called by the owner\n', "     * @param account Contract's address\n", '     */\n', '    function revokeContractAccess(address account) external onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        approved[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Blacklist address; blacklisted addresses do not receive receipt tokens\n', '     * @dev Can only be called by the owner\n', '     * @param account User/contract address\n', '     */\n', '    function blacklistAddress(address account) external onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        emit BlacklistChanged("BLACKLIST", account, blacklisted[account], true);\n', '        blacklisted[account] = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Remove address from blacklisted addresses; blacklisted addresses do not receive receipt tokens\n', '     * @dev Can only be called by the owner\n', '     * @param account User/contract address\n', '     */\n', '    function removeFromBlacklist(address account) external onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        emit BlacklistChanged("REMOVE", account, blacklisted[account], false);\n', '        blacklisted[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Set max ETH cap for this strategy\n', '     * @dev Can only be called by the owner\n', '     * @param _cap ETH amount\n', '     */\n', '    function setCap(uint256 _cap) external onlyOwner {\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @notice Set ETH price\n', '     * @dev Can only be called by the owner\n', '     * @param _price ETH price\n', '     */\n', '    function setEthPrice(uint256 _price) external onlyOwner {\n', '        require(_price > 0, "PRICE_0");\n', '        ethPrice = _price;\n', '    }\n', '\n', '    /**\n', '     * @notice Set lock time\n', '     * @dev Can only be called by the owner\n', '     * @param _lockTime lock time in seconds\n', '     */\n', '    function setLockTime(uint256 _lockTime) external onlyOwner {\n', '        require(_lockTime > 0, "TIME_0");\n', '        lockTime = _lockTime;\n', '    }\n', '\n', '    function setFeeAddress(address payable _feeAddress) public onlyOwner {\n', '        feeAddress = _feeAddress;\n', '        emit FeeAddressSet(msg.sender, _feeAddress);\n', '    }\n', '\n', '    function setFee(uint256 _fee) public onlyOwner {\n', '        require(_fee <= uint256(9000), "FEE_TOO_HIGH");\n', '        fee = _fee;\n', '        emit FeeSet(msg.sender, _fee);\n', '    }\n', '\n', '    /**\n', '     * @notice Rescue dust resulted from swaps/liquidity\n', '     * @dev Can only be called by the owner\n', '     */\n', '    function rescueDust() public onlyOwner {\n', '        if (ethDust > 0) {\n', '            treasuryAddress.transfer(ethDust);\n', '            treasueryEthDust = treasueryEthDust.add(ethDust);\n', '            emit RescuedDust("ETH", ethDust);\n', '            ethDust = 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Rescue any non-reward token that was airdropped to this contract\n', '     * @dev Can only be called by the owner\n', '     */\n', '    function rescueAirdroppedTokens(address _token, address to)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_token != address(0), "token_0x0");\n', '        require(to != address(0), "to_0x0");\n', '        require(_token != farmToken, "rescue_reward_error");\n', '\n', '        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\n', '        require(balanceOfToken > 0, "balance_0");\n', '\n', '        require(IERC20(_token).transfer(to, balanceOfToken), "rescue_failed");\n', '    }\n', '\n', '    /**\n', '     * @notice Check if user can withdraw based on current lock time\n', '     * @param user Address of the user\n', '     * @return true or false\n', '     */\n', '    function isWithdrawalAvailable(address user) public view returns (bool) {\n', '        if (lockTime > 0) {\n', '            return userInfo[user].timestamp.add(lockTime) <= block.timestamp;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit to this strategy for rewards\n', '     * @param deadline Number of blocks until transaction expires\n', '     * @return Amount of fDAI\n', '     */\n', '    function deposit(uint256 deadline)\n', '        public\n', '        payable\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        // -----\n', '        // validate\n', '        // -----\n', '        _defend();\n', '        require(msg.value > 0, "ETH_0");\n', '        require(deadline >= block.timestamp, "DEADLINE_ERROR");\n', '        require(totalEth.add(msg.value) <= cap, "CAP_REACHED");\n', '\n', '        DepositData memory results;\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        if (user.amountfDai == 0) {\n', '            user.wasUserBlacklisted = blacklisted[msg.sender];\n', '        }\n', '        if (user.timestamp == 0) {\n', '            user.timestamp = block.timestamp;\n', '        }\n', '\n', '        uint256 sentEth = msg.value;\n', '        totalEth = totalEth.add(sentEth);\n', '\n', '        user.amountEth = user.amountEth.add(sentEth);\n', '        // -----\n', '        // obtain DAI from received ETH\n', '        // -----\n', '        results.swapPath = new address[](2);\n', '        results.swapPath[0] = weth;\n', '        results.swapPath[1] = dai;\n', '\n', '        results.swapAmounts = sushiswapRouter.swapExactETHForTokens{\n', '            value: sentEth\n', '        }(uint256(0), results.swapPath, address(this), deadline);\n', '\n', '        results.obtainedDai = results.swapAmounts[\n', '            results.swapAmounts.length - 1\n', '        ];\n', '\n', '        user.amountDai = user.amountDai.add(results.obtainedDai);\n', '\n', '        // -----\n', '        // deposit DAI into harvest and get fDAI\n', '        // -----\n', '        IERC20(dai).safeIncreaseAllowance(\n', '            address(harvestRewardVault),\n', '            results.obtainedDai\n', '        );\n', '\n', '        results.prevfDaiBalance = IERC20(harvestPoolToken).balanceOf(\n', '            address(this)\n', '        );\n', '        harvestRewardVault.deposit(results.obtainedDai);\n', '        results.obtainedfDai = (\n', '            IERC20(harvestPoolToken).balanceOf(address(this))\n', '        )\n', '            .sub(results.prevfDaiBalance);\n', '\n', '        // -----\n', '        // stake fDAI into the NoMintRewardPool\n', '        // -----\n', '        IERC20(harvestPoolToken).safeIncreaseAllowance(\n', '            address(harvestRewardPool),\n', '            results.obtainedfDai\n', '        );\n', '        user.amountfDai = user.amountfDai.add(results.obtainedfDai);\n', '        if (!user.wasUserBlacklisted) {\n', '            user.amountReceiptToken = user.amountReceiptToken.add(\n', '                results.obtainedfDai\n', '            );\n', '            receiptToken.mint(msg.sender, results.obtainedfDai);\n', '            emit ReceiptMinted(msg.sender, results.obtainedfDai);\n', '        }\n', '\n', '        harvestRewardPool.stake(results.obtainedfDai);\n', '\n', '        emit Deposit(\n', '            msg.sender,\n', '            tx.origin,\n', '            sentEth,\n', '            results.obtainedDai,\n', '            results.obtainedfDai\n', '        );\n', '\n', '        if (firstDepositTimestamp == 0) {\n', '            firstDepositTimestamp = block.timestamp;\n', '        }\n', '        if (user.joinTimestamp == 0) {\n', '            user.joinTimestamp = block.timestamp;\n', '        }\n', '        totalDeposits = totalDeposits.add(results.obtainedfDai);\n', '        harvestRewardPool.getReward(); //transfers FARM to this contract\n', '\n', '        user.deposits.push(\n', '            UserDeposits({\n', '                timestamp: block.timestamp,\n', '                amountfDai: results.obtainedfDai\n', '            })\n', '        );\n', '\n', '        user.underlyingRatio = _getRatio(user.amountfDai, user.amountDai, 18);\n', '        return results.obtainedfDai;\n', '    }\n', '\n', '    function _updateDeposits(\n', '        bool removeAll,\n', '        uint256 remainingAmountfDai,\n', '        address account\n', '    ) private {\n', '        UserInfo storage user = userInfo[account];\n', '        if (removeAll) {\n', '            delete user.deposits;\n', '            return;\n', '        }\n', '\n', '        for (uint256 i = user.deposits.length; i > 0; i--) {\n', '            if (remainingAmountfDai >= user.deposits[i - 1].amountfDai) {\n', '                remainingAmountfDai = remainingAmountfDai.sub(\n', '                    user.deposits[i - 1].amountfDai\n', '                );\n', '                user.deposits[i - 1].amountfDai = 0;\n', '            } else {\n', '                user.deposits[i - 1].amountfDai = user.deposits[i - 1]\n', '                    .amountfDai\n', '                    .sub(remainingAmountfDai);\n', '                remainingAmountfDai = 0;\n', '            }\n', '\n', '            if (remainingAmountfDai == 0) {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw tokens and claim rewards\n', '     * @param deadline Number of blocks until transaction expires\n', '     * @return Amount of ETH obtained\n', '     */\n', '    function withdraw(uint256 amount, uint256 deadline)\n', '        public\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        // -----\n', '        // validation\n', '        // -----\n', '        uint256 receiptBalance = receiptToken.balanceOf(msg.sender);\n', '\n', '        _defend();\n', '        require(deadline >= block.timestamp, "DEADLINE_ERROR");\n', '        require(amount > 0, "AMOUNT_0");\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        require(user.amountfDai >= amount, "AMOUNT_GREATER_THAN_BALANCE");\n', '        if (!user.wasUserBlacklisted) {\n', '            require(\n', '                receiptBalance >= user.amountReceiptToken,\n', '                "RECEIPT_AMOUNT"\n', '            );\n', '        }\n', '        if (lockTime > 0) {\n', '            require(\n', '                user.timestamp.add(lockTime) <= block.timestamp,\n', '                "LOCK_TIME"\n', '            );\n', '        }\n', '        WithdrawData memory results;\n', '        results.prevDustEthBalance = address(this).balance;\n', '\n', '        // -----\n', '        // withdraw from NoMintRewardPool and get fDai back\n', '        // -----\n', '        results.prevfDaiBalance = IERC20(harvestPoolToken).balanceOf(\n', '            address(this)\n', '        );\n', '        IERC20(harvestPoolToken).safeIncreaseAllowance(\n', '            address(harvestRewardPool),\n', '            amount\n', '        );\n', '\n', '        harvestRewardPool.getReward(); //transfers FARM to this contract\n', '        results.farmBalance = IERC20(farmToken).balanceOf(address(this));\n', '        results.rewards = getPendingRewards(msg.sender, amount);\n', '\n', '        _updateDeposits(amount == user.amountfDai, amount, msg.sender);\n', '\n', '        harvestRewardPool.withdraw(amount);\n', '\n', '        results.obtainedfDai = (\n', '            IERC20(harvestPoolToken).balanceOf(address(this))\n', '        )\n', '            .sub(results.prevfDaiBalance);\n', '\n', "        //not sure if it's possible to get more from harvest so better to protect\n", '        if (results.obtainedfDai < user.amountfDai) {\n', '            user.amountfDai = user.amountfDai.sub(results.obtainedfDai);\n', '            if (!user.wasUserBlacklisted) {\n', '                user.amountReceiptToken = user.amountReceiptToken.sub(\n', '                    results.obtainedfDai\n', '                );\n', '                receiptToken.burn(msg.sender, results.obtainedfDai);\n', '                emit ReceiptBurned(msg.sender, results.obtainedfDai);\n', '            }\n', '        } else {\n', '            user.amountfDai = 0;\n', '            if (!user.wasUserBlacklisted) {\n', '                receiptToken.burn(msg.sender, user.amountReceiptToken);\n', '                emit ReceiptBurned(msg.sender, user.amountReceiptToken);\n', '                user.amountReceiptToken = 0;\n', '            }\n', '        }\n', '\n', '        // -----\n', '        // withdraw from Harvest-DAI vault and get Dai back\n', '        // -----\n', '        IERC20(harvestPoolToken).safeIncreaseAllowance(\n', '            address(harvestRewardVault),\n', '            results.obtainedfDai\n', '        );\n', '\n', '        results.prevDaiBalance = IERC20(dai).balanceOf(address(this));\n', '        harvestRewardVault.withdraw(results.obtainedfDai);\n', '        results.obtainedDai = (IERC20(dai).balanceOf(address(this))).sub(\n', '            results.prevDaiBalance\n', '        );\n', '\n', '        emit ObtainedInfo(\n', '            msg.sender,\n', '            results.obtainedDai,\n', '            results.obtainedfDai\n', '        );\n', '\n', '        if (amount == user.amountfDai) {\n', '            //there is no point to do the ratio math as we can just get the difference between current obtained tokens and initial obtained tokens\n', '            if (results.obtainedDai > user.amountDai) {\n', '                results.feeableDai = results.obtainedDai.sub(user.amountDai);\n', '            }\n', '        } else {\n', '            uint256 currentRatio =\n', '                _getRatio(results.obtainedfDai, results.obtainedDai, 18);\n', '            results.feeableDai = 0;\n', '\n', '            if (currentRatio < user.underlyingRatio) {\n', '                uint256 noOfOriginalTokensForCurrentAmount =\n', '                    (amount.mul(10**18)).div(user.underlyingRatio);\n', '                if (noOfOriginalTokensForCurrentAmount < results.obtainedDai) {\n', '                    results.feeableDai = results.obtainedDai.sub(\n', '                        noOfOriginalTokensForCurrentAmount\n', '                    );\n', '                }\n', '            }\n', '        }\n', '        if (results.feeableDai > 0) {\n', '            uint256 extraTokensFee = _calculateFee(results.feeableDai);\n', '            emit ExtraTokens(\n', '                msg.sender,\n', '                results.feeableDai.sub(extraTokensFee)\n', '            );\n', '            user.earnedTokens = user.earnedTokens.add(\n', '                results.feeableDai.sub(extraTokensFee)\n', '            );\n', '        }\n', '\n', "        //not sure if it's possible to get more from harvest so better to protect\n", '        if (results.obtainedDai <= user.amountDai) {\n', '            user.amountDai = user.amountDai.sub(results.obtainedDai);\n', '        } else {\n', '            user.amountDai = 0;\n', '        }\n', '        results.obtainedDai = results.obtainedDai.sub(results.feeableDai);\n', '\n', '        // -----\n', '        // swap DAI to ETH\n', '        // -----\n', '        address[] memory swapPath = new address[](2);\n', '        swapPath[0] = dai;\n', '        swapPath[1] = weth;\n', '        if (results.obtainedDai > 0) {\n', '            IERC20(dai).safeIncreaseAllowance(\n', '                address(sushiswapRouter),\n', '                results.obtainedDai.add(results.feeableDai)\n', '            );\n', '\n', '            uint256[] memory daiSwapAmounts =\n', '                sushiswapRouter.swapExactTokensForETH(\n', '                    results.obtainedDai,\n', '                    uint256(0),\n', '                    swapPath,\n', '                    address(this),\n', '                    deadline\n', '                );\n', '\n', '            results.totalEth = results.totalEth.add(\n', '                daiSwapAmounts[daiSwapAmounts.length - 1]\n', '            );\n', '        }\n', '\n', '        if (results.feeableDai > 0) {\n', '            uint256[] memory daiFeeableSwapAmounts =\n', '                sushiswapRouter.swapExactTokensForETH(\n', '                    results.feeableDai,\n', '                    uint256(0),\n', '                    swapPath,\n', '                    address(this),\n', '                    deadline\n', '                );\n', '\n', '            emit ExtraTokensExchanged(\n', '                msg.sender,\n', '                results.feeableDai,\n', '                daiFeeableSwapAmounts[daiFeeableSwapAmounts.length - 1]\n', '            );\n', '\n', '            results.feeableEth = results.feeableEth.add(\n', '                daiFeeableSwapAmounts[daiFeeableSwapAmounts.length - 1]\n', '            );\n', '        }\n', '\n', '        uint256 transferableRewards = results.rewards;\n', '        if (transferableRewards > results.farmBalance) {\n', '            transferableRewards = results.farmBalance;\n', '        }\n', '        if (transferableRewards > 0) {\n', '            emit RewardsEarned(msg.sender, transferableRewards);\n', '            user.earnedRewards = user.earnedRewards.add(transferableRewards);\n', '\n', '            swapPath[0] = farmToken;\n', '\n', '            IERC20(farmToken).safeIncreaseAllowance(\n', '                address(sushiswapRouter),\n', '                transferableRewards\n', '            );\n', '\n', '            uint256[] memory farmSwapAmounts =\n', '                sushiswapRouter.swapExactTokensForETH(\n', '                    transferableRewards,\n', '                    uint256(0),\n', '                    swapPath,\n', '                    address(this),\n', '                    deadline\n', '                );\n', '\n', '            emit RewardsExchanged(\n', '                msg.sender,\n', '                transferableRewards,\n', '                farmSwapAmounts[farmSwapAmounts.length - 1]\n', '            );\n', '\n', '            results.feeableEth = results.feeableEth.add(\n', '                farmSwapAmounts[farmSwapAmounts.length - 1]\n', '            );\n', '        }\n', '\n', '        // -----\n', '        // transfer ETH to usert\n', '        // -----\n', '        results.auctionedEth = results.feeableEth.div(2);\n', '        results.feeableEth = results.feeableEth.sub(results.auctionedEth);\n', '        results.totalEth = results.totalEth.add(results.feeableEth);\n', '\n', '        totalDeposits = totalDeposits.sub(results.obtainedfDai);\n', '        if (user.amountfDai == 0) //full exit\n', '        {\n', '            //if user exits to early, obtained ETH might be lower than what user initially invested and there will be some left in amountEth\n', '            //making sure we reset it\n', '            user.amountEth = 0;\n', '        } else {\n', '            if (user.amountEth > results.totalEth) {\n', '                user.amountEth = user.amountEth.sub(results.totalEth);\n', '            } else {\n', '                user.amountEth = 0;\n', '            }\n', '        }\n', '\n', '        if (results.totalEth < totalEth) {\n', '            totalEth = totalEth.sub(results.totalEth);\n', '        } else {\n', '            totalEth = 0;\n', '        }\n', '\n', '        //at some point we might not have any fees\n', '        if (fee > 0) {\n', '            uint256 feeEth = _calculateFee(results.totalEth);\n', '            results.totalEth = results.totalEth.sub(feeEth);\n', '\n', '            feeAddress.transfer(feeEth);\n', '            user.userCollectedFees = user.userCollectedFees.add(feeEth);\n', '        }\n', '\n', '        msg.sender.transfer(results.totalEth);\n', '        treasuryAddress.transfer(results.auctionedEth);\n', '        user.userTreasuryEth = user.userTreasuryEth.add(results.auctionedEth);\n', '\n', '        emit Withdraw(\n', '            msg.sender,\n', '            tx.origin,\n', '            results.totalEth,\n', '            results.obtainedDai,\n', '            results.obtainedfDai,\n', '            results.auctionedEth\n', '        );\n', '\n', '        ethDust = ethDust.add(\n', '            address(this).balance.sub(results.prevDustEthBalance)\n', '        );\n', '\n', '        if (user.amountfDai == 0 || user.amountDai == 0) {\n', '            user.underlyingRatio = 0;\n', '        } else {\n', '            user.underlyingRatio = _getRatio(\n', '                user.amountfDai,\n', '                user.amountDai,\n', '                18\n', '            );\n', '        }\n', '\n', '        return results.totalEth;\n', '    }\n', '\n', '    /// @notice Transfer rewards to this strategy\n', '    function updateReward() public onlyOwner {\n', '        harvestRewardPool.getReward();\n', '    }\n', '\n', '    function _calculateFee(uint256 amount) private view returns (uint256) {\n', '        return (amount.mul(fee)).div(feeFactor);\n', '    }\n', '\n', '    function _defend() private view returns (bool) {\n', '        require(\n', '            approved[msg.sender] || msg.sender == tx.origin,\n', '            "access_denied"\n', '        );\n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Getters -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    /**\n', '     * @notice View function to see pending rewards for account.\n', '     * @param account user account to check\n', '     * @param amount amount you want to calculate for; if 0 will calculate for entire amount\n', '     * @return pending rewards\n', '     */\n', '    function getPendingRewards(address account, uint256 amount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        UserInfo storage user = userInfo[account];\n', '\n', '        if (amount == 0) {\n', '            amount = user.amountfDai;\n', '        }\n', '        if (user.deposits.length == 0 || user.amountfDai == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 rewards = 0;\n', '        uint256 remaingAmount = amount;\n', '\n', '        uint256 i = user.deposits.length - 1;\n', '        while (remaingAmount > 0) {\n', '            uint256 depositRewards =\n', '                _getPendingRewards(user.deposits[i], remaingAmount);\n', '\n', '            rewards = rewards.add(depositRewards);\n', '\n', '            if (remaingAmount >= user.deposits[i].amountfDai) {\n', '                remaingAmount = remaingAmount.sub(user.deposits[i].amountfDai);\n', '            } else {\n', '                remaingAmount = 0;\n', '            }\n', '\n', '            if (i == 0) {\n', '                break;\n', '            }\n', '            i = i.sub(1);\n', '        }\n', '\n', '        return rewards;\n', '    }\n', '\n', '    function _getPendingRewards(\n', '        UserDeposits memory user,\n', '        uint256 remainingAmount\n', '    ) private view returns (uint256) {\n', '        if (user.amountfDai == 0) {\n', '            return 0;\n', '        }\n', '        uint256 toCalculateForAmount = 0;\n', '        if (user.amountfDai <= remainingAmount) {\n', '            toCalculateForAmount = user.amountfDai;\n', '        } else {\n', '            toCalculateForAmount = remainingAmount;\n', '        }\n', '\n', '        uint256 rewardPerBlock = 0;\n', '        uint256 balance = IERC20(farmToken).balanceOf(address(this));\n', '        if (balance == 0) {\n', '            return 0;\n', '        }\n', '        uint256 diff = block.timestamp.sub(firstDepositTimestamp);\n', '        if (diff == 0) {\n', '            rewardPerBlock = balance;\n', '        } else {\n', '            rewardPerBlock = balance.div(diff);\n', '        }\n', '        uint256 rewardPerBlockUser =\n', '            rewardPerBlock.mul(block.timestamp.sub(user.timestamp));\n', '        uint256 ratio = _getRatio(toCalculateForAmount, totalDeposits, 18);\n', '        return (rewardPerBlockUser.mul(ratio)).div(10**18);\n', '    }\n', '\n', '    function _getRatio(\n', '        uint256 numerator,\n', '        uint256 denominator,\n', '        uint256 precision\n', '    ) private pure returns (uint256) {\n', '        uint256 _numerator = numerator * 10**(precision + 1);\n', '        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '\n', '    receive() external payable {}\n', '}']