['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.5;\n', '\n', 'import "./Ownable.sol";\n', 'import "./ERC721.sol";\n', 'import "./VanityToken.sol";\n', 'import "./Deployer.sol";\n', '\n', 'contract ControlToken is Ownable, ERC721 {\n', '    uint256 constant private TOKEN_BITS = 0xc << 252;\n', '    Deployer immutable deployer;\n', '    VanityToken vanityToken;\n', '\n', '    function toControl(uint256 vanityId) private pure returns (uint256) {\n', '        return vanityId | TOKEN_BITS;\n', '    }\n', '\n', '    function toVanity(uint256 controlId) private pure returns (uint256) {\n', '        return controlId & ~TOKEN_BITS;\n', '    }\n', '\n', '    function setVanityToken(VanityToken _vanityToken) external onlyOwner {\n', '        require(vanityToken == VanityToken(0), "VFC: VFA already set");\n', '        vanityToken = _vanityToken;\n', '    }\n', '\n', '    function setBaseURI(string memory _baseURI) external onlyOwner {\n', '        _setBaseURI(_baseURI);\n', '    }\n', '\n', '    function setTokenURI(uint256 tokenId, string memory _tokenURI) external onlyOwner {\n', '        _setTokenURI(tokenId, _tokenURI);\n', '    }\n', '\n', '    function mint(uint256 vanityId, address owner) external {\n', '        require(msg.sender == address(vanityToken), "VFC: not vanity token");\n', '        _safeMint(owner, toControl(vanityId));\n', '    }\n', '\n', '    function addressOf(uint256 tokenId) public view returns (address) {\n', '        require(_exists(tokenId), "ERC721: address query for nonexistent token");\n', '        return address(toVanity(tokenId));\n', '    }\n', '\n', '    function redeem(uint256 tokenId) external {\n', '        require(\n', '            _isApprovedOrOwner(_msgSender(), tokenId),\n', '            "ERC721: redeem caller is not owner nor approved"\n', '        );\n', '\n', '        address addr = addressOf(tokenId);\n', '\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(addr)\n', '        }\n', '\n', '        require(0 == size, "VFC: account in use");\n', '\n', '        _burn(tokenId);\n', '\n', '        vanityToken.remint(addr, _msgSender());\n', '    }\n', '\n', '    function proxy(uint256 tokenId, bytes calldata data) external payable {\n', '        require(\n', '            _isApprovedOrOwner(_msgSender(), tokenId),\n', '            "ERC721: redeem caller is not owner nor approved"\n', '        );\n', '\n', '        deployer.proxy(addressOf(tokenId), data);\n', '\n', '        assembly {\n', '            returndatacopy(0, 0, returndatasize())\n', '            return(0, returndatasize())\n', '        }\n', '    }\n', '\n', '    constructor(Deployer _deployer) ERC721("VanityFarmControl", "VFC") {\n', '        deployer = _deployer;\n', '    }\n', '}']