['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// File: contracts/interface/MarketInterfaces.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract ShardsMarketAdminStorage {\n', '    /**\n', '     * @notice Administrator for this contract\n', '     */\n', '    address public admin;\n', '    /**\n', '     * @notice Governance for this contract which has the right to adjust the parameters of market\n', '     */\n', '    address public governance;\n', '\n', '    /**\n', '     * @notice Active brains of ShardsMarket\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'contract IShardsMarketStorge is ShardsMarketAdminStorage {\n', '    address public shardsFactory;\n', '\n', '    address public factory;\n', '\n', '    address public router;\n', '\n', '    address public dev;\n', '\n', '    address public platformFund;\n', '\n', '    address public shardsFarm;\n', '\n', '    address public buyoutProposals;\n', '\n', '    address public regulator;\n', '\n', '    address public shardAdditionProposal;\n', '\n', '    address public WETH;\n', '    //The totalSupply of shard in the market\n', '    uint256 public totalSupply = 10000000000000000000000;\n', '    //Stake Time limit: 60*60*24*5\n', '    uint256 public deadlineForStake = 432000;\n', '    //Redeem Time limit:60*60*24*7\n', '    uint256 public deadlineForRedeem = 604800;\n', "    //The Proportion of the shardsCreator's shards\n", '    uint256 public shardsCreatorProportion = 5;\n', "    //The Proportion of the platform's shards\n", '    uint256 public platformProportion = 5;\n', '    //The Proportion for dev of the market profit,the rest of profit is given to platformFund\n', '    uint256 public profitProportionForDev = 20;\n', '    //max\n', '    uint256 internal constant max = 100;\n', '    //shardPool count\n', '    uint256 public shardPoolIdCount;\n', '    // all of the shardpoolId\n', '    uint256[] internal allPools;\n', '    // Info of each pool.\n', '    mapping(uint256 => shardPool) public poolInfo;\n', '    //shardPool struct\n', '    struct shardPool {\n', '        address creator; //shard  creator\n', '        ShardsState state; //shard state\n', '        uint256 createTime;\n', '        uint256 deadlineForStake;\n', '        uint256 deadlineForRedeem;\n', '        uint256 balanceOfWantToken; // all the stake amount of the wantToken in this pool\n', '        uint256 minWantTokenAmount; //Minimum subscription required by the creator\n', '        bool isCreatorWithDraw; //Does the creator withdraw wantToken\n', '        address wantToken; // token address Requested by the creator for others to stake\n', '        uint256 openingPrice;\n', '    }\n', '    //shard of each pool\n', '    mapping(uint256 => shard) public shardInfo;\n', '    //shard struct\n', '    struct shard {\n', '        string shardName;\n', '        string shardSymbol;\n', '        address shardToken;\n', '        uint256 totalShardSupply;\n', '        uint256 shardForCreator;\n', '        uint256 shardForPlatform;\n', '        uint256 shardForStakers;\n', '        uint256 burnAmount;\n', '    }\n', '    //user info of each pool\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    struct UserInfo {\n', '        uint256 amount;\n', '        bool isWithdrawShard;\n', '    }\n', '\n', '    enum ShardsState {\n', '        Live,\n', '        Listed,\n', '        ApplyForBuyout,\n', '        Buyout,\n', '        SubscriptionFailed,\n', '        Pending,\n', '        AuditFailed,\n', '        ApplyForAddition\n', '    }\n', '\n', '    struct Token721 {\n', '        address contractAddress;\n', '        uint256 tokenId;\n', '    }\n', '    struct Token1155 {\n', '        address contractAddress;\n', '        uint256 tokenId;\n', '        uint256 amount;\n', '    }\n', '    //nfts of shard creator stakes in each pool\n', '    mapping(uint256 => Token721[]) internal Token721s;\n', '    mapping(uint256 => Token1155[]) internal Token1155s;\n', '}\n', '\n', 'abstract contract IShardsMarket is IShardsMarketStorge {\n', '    event ShardCreated(\n', '        uint256 shardPoolId,\n', '        address indexed creator,\n', '        string shardName,\n', '        string shardSymbol,\n', '        uint256 minWantTokenAmount,\n', '        uint256 createTime,\n', '        uint256 totalSupply,\n', '        address wantToken\n', '    );\n', '    event Stake(address indexed sender, uint256 shardPoolId, uint256 amount);\n', '    event Redeem(address indexed sender, uint256 shardPoolId, uint256 amount);\n', '    event SettleSuccess(\n', '        uint256 indexed shardPoolId,\n', '        uint256 platformAmount,\n', '        uint256 shardForStakers,\n', '        uint256 balanceOfWantToken,\n', '        uint256 fee,\n', '        address shardToken\n', '    );\n', '    event SettleFail(uint256 indexed shardPoolId);\n', '    event ApplyForBuyout(\n', '        address indexed sender,\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        uint256 shardAmount,\n', '        uint256 wantTokenAmount,\n', '        uint256 voteDeadline,\n', '        uint256 buyoutTimes,\n', '        uint256 price,\n', '        uint256 blockHeight\n', '    );\n', '    event Vote(\n', '        address indexed sender,\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        bool isAgree,\n', '        uint256 voteAmount\n', '    );\n', '    event VoteResultConfirm(\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        bool isPassed\n', '    );\n', '\n', '    // user operation\n', '    function createShard(\n', '        Token721[] calldata Token721s,\n', '        Token1155[] calldata Token1155s,\n', '        string memory shardName,\n', '        string memory shardSymbol,\n', '        uint256 minWantTokenAmount,\n', '        address wantToken\n', '    ) external virtual returns (uint256 shardPoolId);\n', '\n', '    function stakeETH(uint256 _shardPoolId) external payable virtual;\n', '\n', '    function stake(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function redeem(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function redeemETH(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function settle(uint256 _shardPoolId) external virtual;\n', '\n', '    function redeemInSubscriptionFailed(uint256 _shardPoolId) external virtual;\n', '\n', '    function usersWithdrawShardToken(uint256 _shardPoolId) external virtual;\n', '\n', '    function creatorWithdrawWantToken(uint256 _shardPoolId) external virtual;\n', '\n', '    function applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\n', '        external\n', '        virtual\n', '        returns (uint256 proposalId);\n', '\n', '    function applyForBuyoutETH(uint256 _shardPoolId)\n', '        external\n', '        payable\n', '        virtual\n', '        returns (uint256 proposalId);\n', '\n', '    function vote(uint256 _shardPoolId, bool isAgree) external virtual;\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        virtual\n', '        returns (bool result);\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        virtual\n', '        returns (uint256 wantTokenAmount);\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId)\n', '        external\n', '        virtual\n', '        returns (uint256 shardTokenAmount, uint256 wantTokenAmount);\n', '\n', '    //governance operation\n', '    function setShardsCreatorProportion(uint256 _shardsCreatorProportion)\n', '        external\n', '        virtual;\n', '\n', '    function setPlatformProportion(uint256 _platformProportion)\n', '        external\n', '        virtual;\n', '\n', '    function setTotalSupply(uint256 _totalSupply) external virtual;\n', '\n', '    function setDeadlineForRedeem(uint256 _deadlineForRedeem) external virtual;\n', '\n', '    function setDeadlineForStake(uint256 _deadlineForStake) external virtual;\n', '\n', '    function setProfitProportionForDev(uint256 _profitProportionForDev)\n', '        external\n', '        virtual;\n', '\n', '    function setShardsFarm(address _shardsFarm) external virtual;\n', '\n', '    function setRegulator(address _regulator) external virtual;\n', '\n', '    function setFactory(address _factory) external virtual;\n', '\n', '    function setShardsFactory(address _shardsFactory) external virtual;\n', '\n', '    function setRouter(address _router) external virtual;\n', '\n', '    //admin operation\n', '    function setPlatformFund(address _platformFund) external virtual;\n', '\n', '    function setDev(address _dev) external virtual;\n', '\n', '    //function shardAudit(uint256 _shardPoolId, bool isPassed) external virtual;\n', '\n', '    //view function\n', '    function getPrice(uint256 _shardPoolId)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256 currentPrice);\n', '\n', '    function getAllPools()\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256[] memory _pools);\n', '\n', '    function getTokens(uint256 shardPoolId)\n', '        external\n', '        view\n', '        virtual\n', '        returns (Token721[] memory _token721s, Token1155[] memory _token1155s);\n', '}\n', '\n', '// File: contracts/ShardsMarketDelegator.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract ShardsMarketDelegator is IShardsMarketStorge {\n', '    /**\n', '     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n', '     */\n', '    event NewImplementation(\n', '        address oldImplementation,\n', '        address newImplementation\n', '    );\n', '\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '    event NewGovernance(address oldGovernance, address newGovernance);\n', '\n', '    constructor(\n', '        address _WETH,\n', '        address _factory,\n', '        address _governance,\n', '        address _router,\n', '        address _dev,\n', '        address _platformFund,\n', '        address _shardsFactory,\n', '        address _regulator,\n', '        address _buyoutProposals,\n', '        address implementation_\n', '    ) public {\n', '        admin = msg.sender;\n', '        governance = msg.sender;\n', '        _setImplementation(implementation_);\n', '        delegateTo(\n', '            implementation_,\n', '            abi.encodeWithSignature(\n', '                "initialize(address,address,address,address,address,address,address,address,address)",\n', '                _WETH,\n', '                _factory,\n', '                _governance,\n', '                _router,\n', '                _dev,\n', '                _platformFund,\n', '                _shardsFactory,\n', '                _regulator,\n', '                _buyoutProposals\n', '            )\n', '        );\n', '    }\n', '\n', '    function _setImplementation(address implementation_) public {\n', '        require(\n', '            msg.sender == governance,\n', '            "_setImplementation: Caller must be governance"\n', '        );\n', '\n', '        address oldImplementation = implementation;\n', '        implementation = implementation_;\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '    }\n', '\n', '    function _setAdmin(address newAdmin) public {\n', '        require(msg.sender == admin, "UNAUTHORIZED");\n', '\n', '        address oldAdmin = admin;\n', '\n', '        admin = newAdmin;\n', '\n', '        emit NewAdmin(oldAdmin, newAdmin);\n', '    }\n', '\n', '    function _setGovernance(address newGovernance) public {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '\n', '        address oldGovernance = governance;\n', '\n', '        governance = newGovernance;\n', '\n', '        emit NewGovernance(oldGovernance, newGovernance);\n', '    }\n', '\n', '    function delegateTo(address callee, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '    //  */\n', '    fallback() external payable {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '            switch success\n', '                case 0 {\n', '                    revert(free_mem_ptr, returndatasize())\n', '                }\n', '                default {\n', '                    return(free_mem_ptr, returndatasize())\n', '                }\n', '        }\n', '    }\n', '}']