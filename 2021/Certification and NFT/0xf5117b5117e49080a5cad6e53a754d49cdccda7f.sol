['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-05\n', '*/\n', '\n', '/**\n', ' * Copyright 2017-2021, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract IERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "unauthorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return divCeil(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = ((a - 1) / b) + 1;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Library for managing loan sets\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n', ' *\n', ' */\n', 'library EnumerableBytes32Set {\n', '\n', '    struct Bytes32Set {\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) index;\n', '        bytes32[] values;\n', '    }\n', '\n', '    /**\n', '     * @dev Add an address value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return addBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!contains(set, value)){\n', '            set.index[value] = set.values.push(value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes an address value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return removeBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (contains(set, value)){\n', '            uint256 toDeleteIndex = set.index[value] - 1;\n', '            uint256 lastIndex = set.values.length - 1;\n', '\n', "            // If the element we're deleting is the last one, we can just remove it without doing a swap\n", '            if (lastIndex != toDeleteIndex) {\n', '                bytes32 lastValue = set.values[lastIndex];\n', '\n', '                // Move the last value to the index where the deleted value is\n', '                set.values[toDeleteIndex] = lastValue;\n', '                // Update the index for the moved value\n', '                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            }\n', '\n', '            // Delete the index entry for the deleted value\n', '            delete set.index[value];\n', '\n', '            // Delete the old entry for the moved value\n', '            set.values.pop();\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function containsAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an array with all values in the set. O(N).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '\n', '     * WARNING: This function may run out of gas on large sets: use {length} and\n', '     * {get} instead in these cases.\n', '     */\n', '    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\n', '        internal\n', '        view\n', '        returns (bytes32[] memory output)\n', '    {\n', '        uint256 end = start + count;\n', '        require(end >= start, "addition overflow");\n', '        end = set.values.length < end ? set.values.length : end;\n', '        if (end == 0 || start >= end) {\n', '            return output;\n', '        }\n', '\n', '        output = new bytes32[](end-start);\n', '        for (uint256 i = start; i < end; i++) {\n', '            output[i-start] = set.values[i];\n', '        }\n', '        return output;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements on the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return set.values.length;\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function get(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return set.values[index];\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function getAddress(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        bytes32 value = set.values[index];\n', '        address addrvalue;\n', '        assembly {\n', '            addrvalue := value\n', '        }\n', '        return addrvalue;\n', '    }\n', '}\n', '\n', 'contract StakingUpgradeable is Ownable {\n', '    address public implementation;\n', '}\n', '\n', 'contract StakingState is StakingUpgradeable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n', '\n', '    uint256 public constant initialCirculatingSupply = 1030000000e18 - 889389933e18;\n', '    address internal constant ZERO_ADDRESS = address(0);\n', '\n', '    bool public isPaused;\n', '\n', '    address public fundsWallet;\n', '\n', '    mapping(address => uint256) internal _totalSupplyPerToken;                      // token => value\n', '    mapping(address => mapping(address => uint256)) internal _balancesPerToken;     // token => account => value\n', '\n', '    mapping(address => address) public delegate;                                    // user => delegate\n', '    mapping(address => mapping(address => uint256)) public delegatedPerToken;       // token => user => value\n', '\n', '    uint256 public bzrxPerTokenStored;\n', '    mapping(address => uint256) public bzrxRewardsPerTokenPaid;                     // user => value\n', '    mapping(address => uint256) public bzrxRewards;                                 // user => value\n', '    mapping(address => uint256) public bzrxVesting;                                 // user => value\n', '\n', '    uint256 public stableCoinPerTokenStored;\n', '    mapping(address => uint256) public stableCoinRewardsPerTokenPaid;               // user => value\n', '    mapping(address => uint256) public stableCoinRewards;                           // user => value\n', '    mapping(address => uint256) public stableCoinVesting;                           // user => value\n', '\n', '    uint256 public vBZRXWeightStored;\n', '    uint256 public iBZRXWeightStored;\n', '    uint256 public LPTokenWeightStored;\n', '\n', '    EnumerableBytes32Set.Bytes32Set internal _delegatedSet;\n', '\n', '    uint256 public lastRewardsAddTime;\n', '\n', '    mapping(address => uint256) public vestingLastSync;\n', '\n', '    mapping(address => address[]) public swapPaths;\n', '    mapping(address => uint256) public stakingRewards;\n', '    uint256 public rewardPercent = 50e18;\n', '    uint256 public maxUniswapDisagreement = 3e18;\n', '    uint256 public maxCurveDisagreement = 3e18;\n', '    uint256 public callerRewardDivisor = 100;\n', '\n', '    address[] public currentFeeTokens;\n', '}\n', '\n', 'interface IUniswapV2Router {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline)\n', '        external\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(\n', '        uint256 amountIn,\n', '        address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline)\n', '        external\n', '        returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline)\n', '        external\n', '        returns (uint256 amountA, uint256 amountB);\n', '}\n', '\n', 'interface ICurve3Pool {\n', '    function add_liquidity(\n', '        uint256[3] calldata amounts,\n', '        uint256 min_mint_amount)\n', '        external;\n', '\n', '    function get_virtual_price()\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IBZxPartial {\n', '    enum FeeClaimType {\n', '        All,\n', '        Lending,\n', '        Trading,\n', '        Borrowing\n', '    }\n', '    \n', '    function withdrawFees(\n', '        address[] calldata tokens,\n', '        address receiver,\n', '        FeeClaimType feeType)\n', '        external\n', '        returns (uint256[] memory amounts);\n', '\n', '    function queryFees(\n', '        address[] calldata tokens,\n', '        FeeClaimType feeType)\n', '        external\n', '        view\n', '        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\n', '\n', '    function priceFeeds()\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', 'contract StakingConstants {\n', '\n', '    address public constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\n', '    address public constant vBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\n', '    address public constant iBZRX = 0x18240BD9C07fA6156Ce3F3f61921cC82b2619157;\n', '    address public constant LPToken = 0xe26A220a341EAca116bDa64cF9D5638A935ae629;\n', '    IERC20 public constant curve3Crv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n', '\n', '    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '\n', '    IUniswapV2Router public constant uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    ICurve3Pool public constant curve3pool = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n', '    IBZxPartial public constant bZx = IBZxPartial(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\n', '\n', '    uint256 public constant cliffDuration =                15768000; // 86400 * 365 * 0.5\n', '    uint256 public constant vestingDuration =              126144000; // 86400 * 365 * 4\n', '    uint256 internal constant vestingDurationAfterCliff =  110376000; // 86400 * 365 * 3.5\n', '    uint256 internal constant vestingStartTimestamp =      1594648800; // start_time\n', '    uint256 internal constant vestingCliffTimestamp =      vestingStartTimestamp + cliffDuration;\n', '    uint256 internal constant vestingEndTimestamp =        vestingStartTimestamp + vestingDuration;\n', '    uint256 internal constant _startingVBZRXBalance =      889389933e18; // 889,389,933 BZRX\n', '\n', '    uint256 public constant BZRXWeightStored = 1e18;\n', '\n', '    struct DelegatedTokens {\n', '        address user;\n', '        uint256 BZRX;\n', '        uint256 vBZRX;\n', '        uint256 iBZRX;\n', '        uint256 LPToken;\n', '        uint256 totalVotes;\n', '    }\n', '\n', '    event Stake(\n', '        address indexed user,\n', '        address indexed token,\n', '        address indexed delegate,\n', '        uint256 amount\n', '    );\n', '\n', '    event Unstake(\n', '        address indexed user,\n', '        address indexed token,\n', '        address indexed delegate,\n', '        uint256 amount\n', '    );\n', '\n', '    event AddRewards(\n', '        address indexed sender,\n', '        uint256 bzrxAmount,\n', '        uint256 stableCoinAmount\n', '    );\n', '\n', '    event Claim(\n', '        address indexed user,\n', '        uint256 bzrxAmount,\n', '        uint256 stableCoinAmount\n', '    );\n', '\n', '    event ChangeDelegate(\n', '        address indexed user,\n', '        address indexed oldDelegate,\n', '        address indexed newDelegate\n', '    );\n', '\n', '    event WithdrawFees(\n', '        address indexed sender\n', '    );\n', '\n', '    event ConvertFees(\n', '        address indexed sender,\n', '        uint256 bzrxOutput,\n', '        uint256 stableCoinOutput\n', '    );\n', '\n', '    event DistributeFees(\n', '        address indexed sender,\n', '        uint256 bzrxRewards,\n', '        uint256 stableCoinRewards\n', '    );\n', '}\n', '\n', 'contract IVestingToken is IERC20 {\n', '    function claim()\n', '        external;\n', '\n', '    function vestedBalanceOf(\n', '        address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function claimedBalanceOf(\n', '        address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalVested()\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface ILoanPool {\n', '    function tokenPrice()\n', '        external\n', '        view\n', '        returns (uint256 price);\n', '\n', '    function borrowInterestRate()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalAssetSupply()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function assetBalanceOf(\n', '        address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IPriceFeeds {\n', '    function queryRate(\n', '        address sourceToken,\n', '        address destToken)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 precision);\n', '\n', '    function queryPrecision(\n', '        address sourceToken,\n', '        address destToken)\n', '        external\n', '        view\n', '        returns (uint256 precision);\n', '\n', '    function queryReturn(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount)\n', '        external\n', '        view\n', '        returns (uint256 destAmount);\n', '\n', '    function checkPriceDisagreement(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount,\n', '        uint256 destAmount,\n', '        uint256 maxSlippage)\n', '        external\n', '        view\n', '        returns (uint256 sourceToDestSwapRate);\n', '\n', '    function amountInEth(\n', '        address Token,\n', '        uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256 ethAmount);\n', '\n', '    function getMaxDrawdown(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 maintenanceMargin)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getCurrentMarginAndCollateralSize(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        external\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralInEthAmount);\n', '\n', '    function getCurrentMargin(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        external\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralToLoanRate);\n', '\n', '    function shouldLiquidate(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 maintenanceMargin)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function getFastGasPrice(\n', '        address payToken)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract StakingV1 is StakingState, StakingConstants {\n', '\n', '    modifier onlyEOA() {\n', '        require(msg.sender == tx.origin, "unauthorized");\n', '        _;\n', '    }\n', '\n', '    modifier checkPause() {\n', '        require(!isPaused, "paused");\n', '        _;\n', '    }\n', '\n', '    function stake(\n', '        address[] calldata tokens,\n', '        uint256[] calldata values)\n', '        external\n', '        checkPause\n', '        updateRewards(msg.sender)\n', '    {\n', '        require(tokens.length == values.length, "count mismatch");\n', '\n', '        address currentDelegate = delegate[msg.sender];\n', '        if (currentDelegate == address(0)) {\n', '            currentDelegate = msg.sender;\n', '            delegate[msg.sender] = currentDelegate;\n', '            _delegatedSet.addAddress(msg.sender);\n', '        }\n', '\n', '        address token;\n', '        uint256 stakeAmount;\n', '\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            token = tokens[i];\n', '            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken, "invalid token");\n', '\n', '            stakeAmount = values[i];\n', '            if (stakeAmount == 0) {\n', '                continue;\n', '            }\n', '\n', '            _balancesPerToken[token][msg.sender] = _balancesPerToken[token][msg.sender].add(stakeAmount);\n', '            _totalSupplyPerToken[token] = _totalSupplyPerToken[token].add(stakeAmount);\n', '\n', '            delegatedPerToken[currentDelegate][token] = delegatedPerToken[currentDelegate][token]\n', '                .add(stakeAmount);\n', '\n', '            IERC20(token).safeTransferFrom(msg.sender, address(this), stakeAmount);\n', '\n', '            emit Stake(\n', '                msg.sender,\n', '                token,\n', '                currentDelegate,\n', '                stakeAmount\n', '            );\n', '        }\n', '    }\n', '\n', '    function unstake(\n', '        address[] memory tokens,\n', '        uint256[] memory values)\n', '        public\n', '        checkPause\n', '        updateRewards(msg.sender)\n', '    {\n', '        require(tokens.length == values.length, "count mismatch");\n', '\n', '        address currentDelegate = delegate[msg.sender];\n', '\n', '        address token;\n', '        uint256 unstakeAmount;\n', '        uint256 stakedAmount;\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            token = tokens[i];\n', '            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken, "invalid token");\n', '\n', '            unstakeAmount = values[i];\n', '            stakedAmount = _balancesPerToken[token][msg.sender];\n', '            if (unstakeAmount == 0 || stakedAmount == 0) {\n', '                continue;\n', '            }\n', '            if (unstakeAmount > stakedAmount) {\n', '                unstakeAmount = stakedAmount;\n', '            }\n', '\n', '            _balancesPerToken[token][msg.sender] = stakedAmount - unstakeAmount; // will not overflow\n', '            _totalSupplyPerToken[token] = _totalSupplyPerToken[token] - unstakeAmount; // will not overflow\n', '\n', '            uint256 delegatedAmount = delegatedPerToken[currentDelegate][token];\n', '            if (delegatedAmount > unstakeAmount) {\n', '                delegatedPerToken[currentDelegate][token] = delegatedAmount - unstakeAmount;\n', '            } else {\n', '                delegatedPerToken[currentDelegate][token] = 0;\n', '            }\n', '\n', '            if (token == BZRX && IERC20(BZRX).balanceOf(address(this)) < unstakeAmount) {\n', '                // settle vested BZRX only if needed\n', '                IVestingToken(vBZRX).claim();\n', '            }\n', '\n', '            IERC20(token).safeTransfer(msg.sender, unstakeAmount);\n', '\n', '            emit Unstake(\n', '                msg.sender,\n', '                token,\n', '                currentDelegate,\n', '                unstakeAmount\n', '            );\n', '        }\n', '    }\n', '\n', '    /*function changeDelegate(\n', '        address delegateToSet)\n', '        external\n', '        checkPause\n', '    {\n', '        if (delegateToSet == ZERO_ADDRESS) {\n', '            delegateToSet = msg.sender;\n', '        }\n', '\n', '        address currentDelegate = delegate[msg.sender];\n', '        if (delegateToSet != currentDelegate) {\n', '            if (currentDelegate != ZERO_ADDRESS) {\n', '                uint256 balance = _balancesPerToken[BZRX][msg.sender];\n', '                if (balance != 0) {\n', '                    delegatedPerToken[currentDelegate][BZRX] = delegatedPerToken[currentDelegate][BZRX]\n', '                        .sub(balance);\n', '                    delegatedPerToken[delegateToSet][BZRX] = delegatedPerToken[delegateToSet][BZRX]\n', '                        .add(balance);\n', '                }\n', '\n', '                balance = _balancesPerToken[vBZRX][msg.sender];\n', '                if (balance != 0) {\n', '                    delegatedPerToken[currentDelegate][vBZRX] = delegatedPerToken[currentDelegate][vBZRX]\n', '                        .sub(balance);\n', '                    delegatedPerToken[delegateToSet][vBZRX] = delegatedPerToken[delegateToSet][vBZRX]\n', '                        .add(balance);\n', '                }\n', '\n', '                balance = _balancesPerToken[iBZRX][msg.sender];\n', '                if (balance != 0) {\n', '                    delegatedPerToken[currentDelegate][iBZRX] = delegatedPerToken[currentDelegate][iBZRX]\n', '                        .sub(balance);\n', '                    delegatedPerToken[delegateToSet][iBZRX] = delegatedPerToken[delegateToSet][iBZRX]\n', '                        .add(balance);\n', '                }\n', '\n', '                balance = _balancesPerToken[LPToken][msg.sender];\n', '                if (balance != 0) {\n', '                    delegatedPerToken[currentDelegate][LPToken] = delegatedPerToken[currentDelegate][LPToken]\n', '                        .sub(balance);\n', '                    delegatedPerToken[delegateToSet][LPToken] = delegatedPerToken[delegateToSet][LPToken]\n', '                        .add(balance);\n', '                }\n', '            }\n', '\n', '            delegate[msg.sender] = delegateToSet;\n', '            _delegatedSet.addAddress(delegateToSet);\n', '\n', '            emit ChangeDelegate(\n', '                msg.sender,\n', '                currentDelegate,\n', '                delegateToSet\n', '            );\n', '\n', '            currentDelegate = delegateToSet;\n', '        }\n', '    }*/\n', '\n', '    function claim(\n', '        bool restake)\n', '        external\n', '        checkPause\n', '        updateRewards(msg.sender)\n', '        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\n', '    {\n', '        return _claim(restake);\n', '    }\n', '\n', '    function claimBzrx()\n', '        external\n', '        checkPause\n', '        updateRewards(msg.sender)\n', '        returns (uint256 bzrxRewardsEarned)\n', '    {\n', '        bzrxRewardsEarned = _claimBzrx(false);\n', '\n', '        emit Claim(\n', '            msg.sender,\n', '            bzrxRewardsEarned,\n', '            0\n', '        );\n', '    }\n', '\n', '    function claim3Crv()\n', '        external\n', '        checkPause\n', '        updateRewards(msg.sender)\n', '        returns (uint256 stableCoinRewardsEarned)\n', '    {\n', '        stableCoinRewardsEarned = _claim3Crv();\n', '\n', '        emit Claim(\n', '            msg.sender,\n', '            0,\n', '            stableCoinRewardsEarned\n', '        );\n', '    }\n', '\n', '    function _claim(\n', '        bool restake)\n', '        internal\n', '        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\n', '    {\n', '        bzrxRewardsEarned = _claimBzrx(restake);\n', '        stableCoinRewardsEarned = _claim3Crv();\n', '\n', '        emit Claim(\n', '            msg.sender,\n', '            bzrxRewardsEarned,\n', '            stableCoinRewardsEarned\n', '        );\n', '    }\n', '\n', '    function _claimBzrx(\n', '        bool restake)\n', '        internal\n', '        returns (uint256 bzrxRewardsEarned)\n', '    {\n', '        bzrxRewardsEarned = bzrxRewards[msg.sender];\n', '        if (bzrxRewardsEarned != 0) {\n', '            bzrxRewards[msg.sender] = 0;\n', '            if (restake) {\n', '                _restakeBZRX(\n', '                    msg.sender,\n', '                    bzrxRewardsEarned\n', '                );\n', '            } else {\n', '                if (IERC20(BZRX).balanceOf(address(this)) < bzrxRewardsEarned) {\n', '                    // settle vested BZRX only if needed\n', '                    IVestingToken(vBZRX).claim();\n', '                }\n', '\n', '                IERC20(BZRX).transfer(msg.sender, bzrxRewardsEarned);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _claim3Crv()\n', '        internal \n', '        returns (uint256 stableCoinRewardsEarned)\n', '    {\n', '        stableCoinRewardsEarned = stableCoinRewards[msg.sender];\n', '        if (stableCoinRewardsEarned != 0) {\n', '            stableCoinRewards[msg.sender] = 0;\n', '            curve3Crv.transfer(msg.sender, stableCoinRewardsEarned);\n', '        }\n', '    }\n', '\n', '    function _restakeBZRX(\n', '        address account,\n', '        uint256 amount)\n', '        internal\n', '    {\n', '        address currentDelegate = delegate[account];\n', '        _balancesPerToken[BZRX][account] = _balancesPerToken[BZRX][account]\n', '            .add(amount);\n', '\n', '        _totalSupplyPerToken[BZRX] = _totalSupplyPerToken[BZRX]\n', '            .add(amount);\n', '\n', '        delegatedPerToken[currentDelegate][BZRX] = delegatedPerToken[currentDelegate][BZRX]\n', '            .add(amount);\n', '\n', '        emit Stake(\n', '            account,\n', '            BZRX,\n', '            currentDelegate,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function exit()\n', '        public\n', '        // unstake() does a checkPause\n', '    {\n', '        address[] memory tokens = new address[](4);\n', '        uint256[] memory values = new uint256[](4);\n', '        tokens[0] = iBZRX;\n', '        tokens[1] = LPToken;\n', '        tokens[2] = vBZRX;\n', '        tokens[3] = BZRX;\n', '        values[0] = uint256(-1);\n', '        values[1] = uint256(-1);\n', '        values[2] = uint256(-1);\n', '        values[3] = uint256(-1);\n', '        \n', '        unstake(tokens, values); // calls updateRewards\n', '        _claim(false);\n', '    }\n', '\n', '    /*function getDelegateVotes(\n', '        uint256 start,\n', '        uint256 count)\n', '        external\n', '        view\n', '        returns (DelegatedTokens[] memory delegateArr)\n', '    {\n', '        uint256 end = start.add(count).min256(_delegatedSet.length());\n', '        if (start >= end) {\n', '            return delegateArr;\n', '        }\n', '        count = end-start;\n', '\n', '        uint256 idx = count;\n', '        address user;\n', '        delegateArr = new DelegatedTokens[](idx);\n', '        for (uint256 i = --end; i >= start; i--) {\n', '            user = _delegatedSet.getAddress(i);\n', '            delegateArr[count-(idx--)] = DelegatedTokens({\n', '                user: user,\n', '                BZRX: delegatedPerToken[user][BZRX],\n', '                vBZRX: delegatedPerToken[user][vBZRX],\n', '                iBZRX: delegatedPerToken[user][iBZRX],\n', '                LPToken: delegatedPerToken[user][LPToken],\n', '                totalVotes: delegateBalanceOf(user)\n', '            });\n', '\n', '            if (i == 0) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (idx != 0) {\n', '            count -= idx;\n', '            assembly {\n', '                mstore(delegateArr, count)\n', '            }\n', '        }\n', '    }*/\n', '\n', '    modifier updateRewards(address account) {\n', '        uint256 _bzrxPerTokenStored = bzrxPerTokenStored;\n', '        uint256 _stableCoinPerTokenStored = stableCoinPerTokenStored;\n', '\n', '        (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting) = _earned(\n', '            account,\n', '            _bzrxPerTokenStored,\n', '            _stableCoinPerTokenStored\n', '        );\n', '        bzrxRewardsPerTokenPaid[account] = _bzrxPerTokenStored;\n', '        stableCoinRewardsPerTokenPaid[account] = _stableCoinPerTokenStored;\n', '\n', '        // vesting amounts get updated before sync\n', '        bzrxVesting[account] = bzrxRewardsVesting;\n', '        stableCoinVesting[account] = stableCoinRewardsVesting;\n', '\n', '        (bzrxRewards[account], stableCoinRewards[account]) = _syncVesting(\n', '            account,\n', '            bzrxRewardsEarned,\n', '            stableCoinRewardsEarned,\n', '            bzrxRewardsVesting,\n', '            stableCoinRewardsVesting\n', '        );\n', '        vestingLastSync[account] = block.timestamp;\n', '\n', '        _;\n', '    }\n', '\n', '    function earned(\n', '        address account)\n', '        external\n', '        view\n', '        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting)\n', '    {\n', '        (bzrxRewardsEarned, stableCoinRewardsEarned, bzrxRewardsVesting, stableCoinRewardsVesting) = _earned(\n', '            account,\n', '            bzrxPerTokenStored,\n', '            stableCoinPerTokenStored\n', '        );\n', '\n', '        (bzrxRewardsEarned, stableCoinRewardsEarned) = _syncVesting(\n', '            account,\n', '            bzrxRewardsEarned,\n', '            stableCoinRewardsEarned,\n', '            bzrxRewardsVesting,\n', '            stableCoinRewardsVesting\n', '        );\n', '\n', '        // discount vesting amounts for vesting time\n', '        uint256 multiplier = vestedBalanceForAmount(\n', '            1e36,\n', '            0,\n', '            block.timestamp\n', '        );\n', '        bzrxRewardsVesting = bzrxRewardsVesting\n', '            .sub(bzrxRewardsVesting\n', '                .mul(multiplier)\n', '                .div(1e36)\n', '            );\n', '        stableCoinRewardsVesting = stableCoinRewardsVesting\n', '            .sub(stableCoinRewardsVesting\n', '                .mul(multiplier)\n', '                .div(1e36)\n', '            );\n', '    }\n', '\n', '    function _earned(\n', '        address account,\n', '        uint256 _bzrxPerToken,\n', '        uint256 _stableCoinPerToken)\n', '        internal\n', '        view\n', '        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting)\n', '    {\n', '        uint256 bzrxPerTokenUnpaid = _bzrxPerToken.sub(bzrxRewardsPerTokenPaid[account]);\n', '        uint256 stableCoinPerTokenUnpaid = _stableCoinPerToken.sub(stableCoinRewardsPerTokenPaid[account]);\n', '\n', '        bzrxRewardsEarned = bzrxRewards[account];\n', '        stableCoinRewardsEarned = stableCoinRewards[account];\n', '        bzrxRewardsVesting = bzrxVesting[account];\n', '        stableCoinRewardsVesting = stableCoinVesting[account];\n', '\n', '        if (bzrxPerTokenUnpaid != 0 || stableCoinPerTokenUnpaid != 0) {\n', '            uint256 value;\n', '            uint256 multiplier;\n', '            uint256 lastSync;\n', '\n', '            (uint256 vestedBalance, uint256 vestingBalance) = balanceOfStored(account);\n', '\n', '            value = vestedBalance\n', '                .mul(bzrxPerTokenUnpaid);\n', '            value /= 1e36;\n', '            bzrxRewardsEarned = value\n', '                .add(bzrxRewardsEarned);\n', '\n', '            value = vestedBalance\n', '                .mul(stableCoinPerTokenUnpaid);\n', '            value /= 1e36;\n', '            stableCoinRewardsEarned = value\n', '                .add(stableCoinRewardsEarned);\n', '\n', '            if (vestingBalance != 0 && bzrxPerTokenUnpaid != 0) {\n', '                // add new vesting amount for BZRX\n', '                value = vestingBalance\n', '                    .mul(bzrxPerTokenUnpaid);\n', '                value /= 1e36;\n', '                bzrxRewardsVesting = bzrxRewardsVesting\n', '                    .add(value);\n', '\n', '                // true up earned amount to vBZRX vesting schedule\n', '                lastSync = vestingLastSync[account];\n', '                multiplier = vestedBalanceForAmount(\n', '                    1e36,\n', '                    0,\n', '                    lastSync\n', '                );\n', '                value = value\n', '                    .mul(multiplier);\n', '                value /= 1e36;\n', '                bzrxRewardsEarned = bzrxRewardsEarned\n', '                    .add(value);\n', '            }\n', '            if (vestingBalance != 0 && stableCoinPerTokenUnpaid != 0) {\n', '                // add new vesting amount for 3crv\n', '                value = vestingBalance\n', '                    .mul(stableCoinPerTokenUnpaid);\n', '                value /= 1e36;\n', '                stableCoinRewardsVesting = stableCoinRewardsVesting\n', '                    .add(value);\n', '\n', '                // true up earned amount to vBZRX vesting schedule\n', '                if (lastSync == 0) {\n', '                    lastSync = vestingLastSync[account];\n', '                    multiplier = vestedBalanceForAmount(\n', '                        1e36,\n', '                        0,\n', '                        lastSync\n', '                    );\n', '                }\n', '                value = value\n', '                    .mul(multiplier);\n', '                value /= 1e36;\n', '                stableCoinRewardsEarned = stableCoinRewardsEarned\n', '                    .add(value);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _syncVesting(\n', '        address account,\n', '        uint256 bzrxRewardsEarned,\n', '        uint256 stableCoinRewardsEarned,\n', '        uint256 bzrxRewardsVesting,\n', '        uint256 stableCoinRewardsVesting)\n', '        internal\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        uint256 lastVestingSync = vestingLastSync[account];\n', '\n', '        if (lastVestingSync != block.timestamp) {\n', '            uint256 rewardsVested;\n', '            uint256 multiplier = vestedBalanceForAmount(\n', '                1e36,\n', '                lastVestingSync,\n', '                block.timestamp\n', '            );\n', '\n', '            if (bzrxRewardsVesting != 0) {\n', '                rewardsVested = bzrxRewardsVesting\n', '                    .mul(multiplier)\n', '                    .div(1e36);\n', '                bzrxRewardsEarned += rewardsVested;\n', '            }\n', '\n', '            if (stableCoinRewardsVesting != 0) {\n', '                rewardsVested = stableCoinRewardsVesting\n', '                    .mul(multiplier)\n', '                    .div(1e36);\n', '                stableCoinRewardsEarned += rewardsVested;\n', '            }\n', '\n', '            uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];\n', '            if (vBZRXBalance != 0) {\n', '                // add vested BZRX to rewards balance\n', '                rewardsVested = vBZRXBalance\n', '                    .mul(multiplier)\n', '                    .div(1e36);\n', '                bzrxRewardsEarned += rewardsVested;\n', '            }\n', '        }\n', '\n', '        return (bzrxRewardsEarned, stableCoinRewardsEarned);\n', '    }\n', '\n', '    // note: anyone can contribute rewards to the contract\n', '    function addDirectRewards(\n', '        address[] calldata accounts,\n', '        uint256[] calldata bzrxAmounts,\n', '        uint256[] calldata stableCoinAmounts)\n', '        external\n', '        checkPause\n', '        returns (uint256 bzrxTotal, uint256 stableCoinTotal)\n', '    {\n', '        require(accounts.length == bzrxAmounts.length && accounts.length == stableCoinAmounts.length, "count mismatch");\n', '\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            bzrxRewards[accounts[i]] = bzrxRewards[accounts[i]].add(bzrxAmounts[i]);\n', '            bzrxTotal = bzrxTotal.add(bzrxAmounts[i]);\n', '            stableCoinRewards[accounts[i]] = stableCoinRewards[accounts[i]].add(stableCoinAmounts[i]);\n', '            stableCoinTotal = stableCoinTotal.add(stableCoinAmounts[i]);\n', '        }\n', '        if (bzrxTotal != 0) {\n', '            IERC20(BZRX).transferFrom(msg.sender, address(this), bzrxTotal);\n', '        }\n', '        if (stableCoinTotal != 0) {\n', '            curve3Crv.transferFrom(msg.sender, address(this), stableCoinTotal);\n', '        }\n', '    }\n', '\n', '    // note: anyone can contribute rewards to the contract\n', '    function addRewards(\n', '        uint256 newBZRX,\n', '        uint256 newStableCoin)\n', '        external\n', '        checkPause\n', '    {\n', '        if (newBZRX != 0 || newStableCoin != 0) {\n', '            _addRewards(newBZRX, newStableCoin);\n', '            if (newBZRX != 0) {\n', '                IERC20(BZRX).transferFrom(msg.sender, address(this), newBZRX);\n', '            }\n', '            if (newStableCoin != 0) {\n', '                curve3Crv.transferFrom(msg.sender, address(this), newStableCoin);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _addRewards(\n', '        uint256 newBZRX,\n', '        uint256 newStableCoin)\n', '        internal\n', '    {\n', '        (vBZRXWeightStored, iBZRXWeightStored, LPTokenWeightStored) = getVariableWeights();\n', '\n', '        uint256 totalTokens = totalSupplyStored();\n', '        require(totalTokens != 0, "nothing staked");\n', '\n', '        bzrxPerTokenStored = newBZRX\n', '            .mul(1e36)\n', '            .div(totalTokens)\n', '            .add(bzrxPerTokenStored);\n', '\n', '        stableCoinPerTokenStored = newStableCoin\n', '            .mul(1e36)\n', '            .div(totalTokens)\n', '            .add(stableCoinPerTokenStored);\n', '\n', '        lastRewardsAddTime = block.timestamp;\n', '\n', '        emit AddRewards(\n', '            msg.sender,\n', '            newBZRX,\n', '            newStableCoin\n', '        );\n', '    }\n', '\n', '    function getVariableWeights()\n', '        public\n', '        view\n', '        returns (uint256 vBZRXWeight, uint256 iBZRXWeight, uint256 LPTokenWeight)\n', '    {\n', '        uint256 totalVested = vestedBalanceForAmount(\n', '            _startingVBZRXBalance,\n', '            0,\n', '            block.timestamp\n', '        );\n', '\n', '        vBZRXWeight = SafeMath.mul(_startingVBZRXBalance - totalVested, 1e18) // overflow not possible\n', '            .div(_startingVBZRXBalance);\n', '\n', '        iBZRXWeight = ILoanPool(iBZRX).tokenPrice();\n', '\n', '        uint256 lpTokenSupply = _totalSupplyPerToken[LPToken];\n', '        if (lpTokenSupply != 0) {\n', '            // staked LP tokens are assumed to represent the total unstaked supply (circulated supply - staked BZRX)\n', '            uint256 normalizedLPTokenSupply = initialCirculatingSupply +\n', '                totalVested -\n', '                _totalSupplyPerToken[BZRX];\n', '\n', '            LPTokenWeight = normalizedLPTokenSupply\n', '                .mul(1e18)\n', '                .div(lpTokenSupply);\n', '        }\n', '    }\n', '\n', '    function balanceOfByAsset(\n', '        address token,\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        balance = _balancesPerToken[token][account];\n', '    }\n', '\n', '    function balanceOfByAssets(\n', '        address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 bzrxBalance,\n', '            uint256 iBZRXBalance,\n', '            uint256 vBZRXBalance,\n', '            uint256 LPTokenBalance\n', '        )\n', '    {\n', '        return (\n', '            balanceOfByAsset(BZRX, account),\n', '            balanceOfByAsset(iBZRX, account),\n', '            balanceOfByAsset(vBZRX, account),\n', '            balanceOfByAsset(LPToken, account)\n', '        );\n', '    }\n', '\n', '    function balanceOfStored(\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256 vestedBalance, uint256 vestingBalance)\n', '    {\n', '        uint256 balance = _balancesPerToken[vBZRX][account];\n', '        if (balance != 0) {\n', '            vestingBalance = _balancesPerToken[vBZRX][account]\n', '                    .mul(vBZRXWeightStored)\n', '                    .div(1e18);\n', '        }\n', '\n', '        vestedBalance = _balancesPerToken[BZRX][account];\n', '\n', '        balance = _balancesPerToken[iBZRX][account];\n', '        if (balance != 0) {\n', '            vestedBalance = balance\n', '                .mul(iBZRXWeightStored)\n', '                .div(1e18)\n', '                .add(vestedBalance);\n', '        }\n', '\n', '        balance = _balancesPerToken[LPToken][account];\n', '        if (balance != 0) {\n', '            vestedBalance = balance\n', '                .mul(LPTokenWeightStored)\n', '                .div(1e18)\n', '                .add(vestedBalance);\n', '        }\n', '    }\n', '\n', '    function delegateBalanceOf(\n', '        address account)\n', '        public\n', '        view\n', '        returns (uint256 totalVotes)\n', '    {\n', '        uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];\n', '        if (vBZRXBalance != 0) {\n', "            // staked vBZRX counts has 1/2 a vote, that's prorated based on total vested\n", '            totalVotes = vBZRXBalance\n', '                .mul(_startingVBZRXBalance -\n', '                    vestedBalanceForAmount( // overflow not possible\n', '                        _startingVBZRXBalance,\n', '                        0,\n', '                        block.timestamp\n', '                    )\n', '                ).div(_startingVBZRXBalance) / 2;\n', '\n', '            // user is attributed a staked balance of vested BZRX, from their last update to the present\n', '            totalVotes = vestedBalanceForAmount(\n', '                vBZRXBalance,\n', '                vestingLastSync[account],\n', '                block.timestamp\n', '            ).add(totalVotes);\n', '        }\n', '\n', '        totalVotes = _balancesPerToken[BZRX][account]\n', '            .add(bzrxRewards[account]) // unclaimed BZRX rewards count as votes\n', '            .add(totalVotes);\n', '\n', '        totalVotes = _balancesPerToken[iBZRX][account]\n', '            .mul(ILoanPool(iBZRX).tokenPrice())\n', '            .div(1e18)\n', '            .add(totalVotes);\n', '\n', '        // LPToken votes are measured based on amount of underlying BZRX staked\n', '        totalVotes = IERC20(BZRX).balanceOf(LPToken)\n', '            .mul(_balancesPerToken[LPToken][account])\n', '            .div(IERC20(LPToken).totalSupply())\n', '            .add(totalVotes);\n', '    }\n', '\n', '    function totalSupplyByAsset(\n', '        address token)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupplyPerToken[token];\n', '    }\n', '\n', '    function totalSupplyStored()\n', '        public\n', '        view\n', '        returns (uint256 supply)\n', '    {\n', '        supply = _totalSupplyPerToken[vBZRX]\n', '            .mul(vBZRXWeightStored)\n', '            .div(1e18);\n', '\n', '        supply = _totalSupplyPerToken[BZRX]\n', '            .add(supply);\n', '\n', '        supply = _totalSupplyPerToken[iBZRX]\n', '            .mul(iBZRXWeightStored)\n', '            .div(1e18)\n', '            .add(supply);\n', '\n', '        supply = _totalSupplyPerToken[LPToken]\n', '            .mul(LPTokenWeightStored)\n', '            .div(1e18)\n', '            .add(supply);\n', '    }\n', '\n', '    function vestedBalanceForAmount(\n', '        uint256 tokenBalance,\n', '        uint256 lastUpdate,\n', '        uint256 vestingEndTime)\n', '        public\n', '        view\n', '        returns (uint256 vested)\n', '    {\n', '        vestingEndTime = vestingEndTime.min256(block.timestamp);\n', '        if (vestingEndTime > lastUpdate) {\n', '            if (vestingEndTime <= vestingCliffTimestamp ||\n', '                lastUpdate >= vestingEndTimestamp) {\n', '                // time cannot be before vesting starts\n', '                // OR all vested token has already been claimed\n', '                return 0;\n', '            }\n', '            if (lastUpdate < vestingCliffTimestamp) {\n', '                // vesting starts at the cliff timestamp\n', '                lastUpdate = vestingCliffTimestamp;\n', '            }\n', '            if (vestingEndTime > vestingEndTimestamp) {\n', '                // vesting ends at the end timestamp\n', '                vestingEndTime = vestingEndTimestamp;\n', '            }\n', '\n', '            uint256 timeSinceClaim = vestingEndTime.sub(lastUpdate);\n', '            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0\n', '        }\n', '    }\n', '\n', '\n', '    // Fee Conversion Logic //\n', '\n', '    function sweepFees()\n', '        public\n', '        // sweepFeesByAsset() does checkPause\n', '        returns (uint256 bzrxRewards, uint256 crv3Rewards)\n', '    {\n', '        return sweepFeesByAsset(currentFeeTokens);\n', '    }\n', '\n', '    function sweepFeesByAsset(\n', '        address[] memory assets)\n', '        public\n', '        checkPause\n', '        onlyEOA\n', '        returns (uint256 bzrxRewards, uint256 crv3Rewards)\n', '    {\n', '        uint256[] memory amounts = _withdrawFees(assets);\n', '        _convertFees(assets, amounts);\n', '        (bzrxRewards, crv3Rewards) = _distributeFees();\n', '    }\n', '\n', '    function _withdrawFees(\n', '        address[] memory assets)\n', '        internal\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory amounts = bZx.withdrawFees(assets, address(this), IBZxPartial.FeeClaimType.All);\n', '\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            stakingRewards[assets[i]] = stakingRewards[assets[i]]\n', '                .add(amounts[i]);\n', '        }\n', '\n', '        emit WithdrawFees(\n', '            msg.sender\n', '        );\n', '\n', '        return amounts;\n', '    }\n', '\n', '    function _convertFees(\n', '        address[] memory assets,\n', '        uint256[] memory amounts)\n', '        internal\n', '        returns (uint256 bzrxOutput, uint256 crv3Output)\n', '    {\n', '        require(assets.length == amounts.length, "count mismatch");\n', ' \n', '        IPriceFeeds priceFeeds = IPriceFeeds(bZx.priceFeeds());\n', '        (uint256 bzrxRate,) = priceFeeds.queryRate(\n', '            BZRX,\n', '            WETH\n', '        );\n', '        uint256 maxDisagreement = maxUniswapDisagreement;\n', '\n', '        address asset;\n', '        uint256 daiAmount;\n', '        uint256 usdcAmount;\n', '        uint256 usdtAmount;\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            asset = assets[i];\n', '            if (asset == BZRX) {\n', '                continue;\n', '            } else if (asset == DAI) {\n', '                daiAmount = daiAmount.add(amounts[i]);\n', '                continue;\n', '            } else if (asset == USDC) {\n', '                usdcAmount = usdcAmount.add(amounts[i]);\n', '                continue;\n', '            } else if (asset == USDT) {\n', '                usdtAmount = usdtAmount.add(amounts[i]);\n', '                continue;\n', '            }\n', '\n', '            if (amounts[i] != 0) {\n', '                bzrxOutput += _convertFeeWithUniswap(asset, amounts[i], priceFeeds, bzrxRate, maxDisagreement);\n', '            }\n', '        }\n', '        if (bzrxOutput != 0) {\n', '            stakingRewards[BZRX] += bzrxOutput;\n', '        }\n', '\n', '        if (daiAmount != 0 || usdcAmount != 0 || usdtAmount != 0) {\n', '            crv3Output = _convertFeesWithCurve(\n', '                daiAmount,\n', '                usdcAmount,\n', '                usdtAmount\n', '            );\n', '            stakingRewards[address(curve3Crv)] += crv3Output;\n', '        }\n', '\n', '        emit ConvertFees(\n', '            msg.sender,\n', '            bzrxOutput,\n', '            crv3Output\n', '        );\n', '    }\n', '\n', '    function _distributeFees()\n', '        internal\n', '        returns (uint256 bzrxRewards, uint256 crv3Rewards)\n', '    {\n', '        bzrxRewards = stakingRewards[BZRX];\n', '        crv3Rewards = stakingRewards[address(curve3Crv)];\n', '        if (bzrxRewards != 0 || crv3Rewards != 0) {\n', '            address _fundsWallet = fundsWallet;\n', '            uint256 rewardAmount;\n', '            uint256 callerReward;\n', '            if (bzrxRewards != 0) {\n', '                stakingRewards[BZRX] = 0;\n', '\n', '                rewardAmount = bzrxRewards\n', '                    .mul(rewardPercent)\n', '                    .div(1e20);\n', '                IERC20(BZRX).transfer(\n', '                    _fundsWallet,\n', '                    bzrxRewards - rewardAmount\n', '                );\n', '                bzrxRewards = rewardAmount;\n', '\n', '                callerReward = bzrxRewards / callerRewardDivisor;\n', '                IERC20(BZRX).transfer(\n', '                    msg.sender,\n', '                    callerReward\n', '                );\n', '                bzrxRewards = bzrxRewards\n', '                    .sub(callerReward);\n', '            }\n', '            if (crv3Rewards != 0) {\n', '                stakingRewards[address(curve3Crv)] = 0;\n', '\n', '                rewardAmount = crv3Rewards\n', '                    .mul(rewardPercent)\n', '                    .div(1e20);\n', '                curve3Crv.transfer(\n', '                    _fundsWallet,\n', '                    crv3Rewards - rewardAmount\n', '                );\n', '                crv3Rewards = rewardAmount;\n', '\n', '                callerReward = crv3Rewards / callerRewardDivisor;\n', '                curve3Crv.transfer(\n', '                    msg.sender,\n', '                    callerReward\n', '                );\n', '                crv3Rewards = crv3Rewards\n', '                    .sub(callerReward);\n', '            }\n', '\n', '            _addRewards(bzrxRewards, crv3Rewards);\n', '        }\n', '\n', '        emit DistributeFees(\n', '            msg.sender,\n', '            bzrxRewards,\n', '            crv3Rewards\n', '        );\n', '    }\n', '\n', '    function _convertFeeWithUniswap(\n', '        address asset,\n', '        uint256 amount,\n', '        IPriceFeeds priceFeeds,\n', '        uint256 bzrxRate,\n', '        uint256 maxDisagreement)\n', '        internal\n', '        returns (uint256 returnAmount)\n', '    {\n', '        uint256 stakingReward = stakingRewards[asset];\n', '        if (stakingReward != 0) {\n', '            if (amount > stakingReward) {\n', '                amount = stakingReward;\n', '            }\n', '            stakingRewards[asset] = stakingReward\n', '                .sub(amount);\n', '\n', '            uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(\n', '                amount,\n', '                1, // amountOutMin\n', '                swapPaths[asset],\n', '                address(this),\n', '                block.timestamp\n', '            );\n', '\n', '            returnAmount = amounts[amounts.length - 1];\n', '\n', '            // will revert if disagreement found\n', '            _checkUniDisagreement(\n', '                asset,\n', '                amount,\n', '                returnAmount,\n', '                priceFeeds,\n', '                bzrxRate,\n', '                maxDisagreement\n', '            );\n', '        }\n', '    }\n', '\n', '    function _convertFeesWithCurve(\n', '        uint256 daiAmount,\n', '        uint256 usdcAmount,\n', '        uint256 usdtAmount)\n', '        internal\n', '        returns (uint256 returnAmount)\n', '    {\n', '        uint256[3] memory curveAmounts;\n', '        uint256 curveTotal;\n', '        uint256 stakingReward;\n', '\n', '        if (daiAmount != 0) {\n', '            stakingReward = stakingRewards[DAI];\n', '            if (stakingReward != 0) {\n', '                if (daiAmount > stakingReward) {\n', '                    daiAmount = stakingReward;\n', '                }\n', '                stakingRewards[DAI] = stakingReward\n', '                    .sub(daiAmount);\n', '                curveAmounts[0] = daiAmount;\n', '                curveTotal = daiAmount;\n', '            }\n', '        }\n', '        if (usdcAmount != 0) {\n', '            stakingReward = stakingRewards[USDC];\n', '            if (stakingReward != 0) {\n', '                if (usdcAmount > stakingReward) {\n', '                    usdcAmount = stakingReward;\n', '                }\n', '                stakingRewards[USDC] = stakingReward\n', '                    .sub(usdcAmount);\n', '                curveAmounts[1] = usdcAmount;\n', '                curveTotal = curveTotal.add(usdcAmount.mul(1e12)); // normalize to 18 decimals\n', '            }\n', '        }\n', '        if (usdtAmount != 0) {\n', '            stakingReward = stakingRewards[USDT];\n', '            if (stakingReward != 0) {\n', '                if (usdtAmount > stakingReward) {\n', '                    usdtAmount = stakingReward;\n', '                }\n', '                stakingRewards[USDT] = stakingReward\n', '                    .sub(usdtAmount);\n', '                curveAmounts[2] = usdtAmount;\n', '                curveTotal = curveTotal.add(usdtAmount.mul(1e12)); // normalize to 18 decimals\n', '            }\n', '        }\n', '\n', '        uint256 beforeBalance = curve3Crv.balanceOf(address(this));\n', '        curve3pool.add_liquidity(curveAmounts, 0);\n', '\n', '        returnAmount = curve3Crv.balanceOf(address(this)) - beforeBalance;\n', '\n', '        // will revert if disagreement found\n', '        _checkCurveDisagreement(\n', '            curveTotal,\n', '            returnAmount,\n', '            maxCurveDisagreement\n', '        );\n', '    }    \n', '\n', '    function _checkUniDisagreement(\n', '        address asset,\n', '        uint256 assetAmount,\n', '        uint256 bzrxAmount,\n', '        IPriceFeeds priceFeeds,\n', '        uint256 bzrxRate,\n', '        uint256 maxDisagreement)\n', '        internal\n', '        view\n', '    {\n', '        (uint256 rate, uint256 precision) = priceFeeds.queryRate(\n', '            asset,\n', '            WETH\n', '        );\n', '\n', '        rate = rate\n', '            .mul(1e36)\n', '            .div(precision)\n', '            .div(bzrxRate);\n', '\n', '        uint256 sourceToDestSwapRate = bzrxAmount\n', '            .mul(1e18)\n', '            .div(assetAmount);\n', '\n', '        uint256 spreadValue = sourceToDestSwapRate > rate ?\n', '            sourceToDestSwapRate - rate :\n', '            rate - sourceToDestSwapRate;\n', '\n', '        if (spreadValue != 0) {\n', '            spreadValue = spreadValue\n', '                .mul(1e20)\n', '                .div(sourceToDestSwapRate);\n', '\n', '            require(\n', '                spreadValue <= maxDisagreement,\n', '                "uniswap price disagreement"\n', '            );\n', '        }\n', '    }\n', '\n', '    function _checkCurveDisagreement(\n', '        uint256 sendAmount, // deposit tokens\n', '        uint256 actualReturn, // returned lp token\n', '        uint256 maxDisagreement)\n', '        internal\n', '        view\n', '    {\n', '        uint256 expectedReturn = sendAmount\n', '            .mul(1e18)\n', '            .div(curve3pool.get_virtual_price());\n', '\n', '        uint256 spreadValue = actualReturn > expectedReturn ?\n', '            actualReturn - expectedReturn :\n', '            expectedReturn - actualReturn;\n', '\n', '        if (spreadValue != 0) {\n', '            spreadValue = spreadValue\n', '                .mul(1e20)\n', '                .div(actualReturn);\n', '\n', '            require(\n', '                spreadValue <= maxDisagreement,\n', '                "curve price disagreement"\n', '            );\n', '        }\n', '    }\n', '\n', '    // OnlyOwner functions\n', '\n', '    function togglePause(\n', '        bool _isPaused)\n', '        external\n', '        onlyOwner\n', '    {\n', '        isPaused = _isPaused;\n', '    }\n', '\n', '    function setFundsWallet(\n', '        address _fundsWallet)\n', '        external\n', '        onlyOwner\n', '    {\n', '        fundsWallet = _fundsWallet;\n', '    }\n', '\n', '    function setFeeTokens(\n', '        address[] calldata tokens)\n', '        external\n', '        onlyOwner\n', '    {\n', '        currentFeeTokens = tokens;\n', '    }\n', '\n', '    // path should start with the asset to swap and end with BZRX\n', '    // only one path allowed per asset\n', '    // ex: asset -> WETH -> BZRX\n', '    function setPaths(\n', '        address[][] calldata paths)\n', '        external\n', '        onlyOwner\n', '    {\n', '        address[] memory path;\n', '        for (uint256 i = 0; i < paths.length; i++) {\n', '            path = paths[i];\n', '            require(path.length >= 2 &&\n', '                path[0] != path[path.length - 1] &&\n', '                path[path.length - 1] == BZRX,\n', '                "invalid path"\n', '            );\n', '            \n', '            // check that the path exists\n', '            uint256[] memory amountsOut = uniswapRouter.getAmountsOut(1e10, path);\n', '            require(amountsOut[amountsOut.length - 1] != 0, "path does not exist");\n', '            \n', '            swapPaths[path[0]] = path;\n', '            IERC20(path[0]).safeApprove(address(uniswapRouter), 0);\n', '            IERC20(path[0]).safeApprove(address(uniswapRouter), uint256(-1));\n', '        }\n', '    }\n', '\n', '    function setCurveApproval()\n', '        external\n', '        onlyOwner\n', '    {\n', '        IERC20(DAI).safeApprove(address(curve3pool), 0);\n', '        IERC20(DAI).safeApprove(address(curve3pool), uint256(-1));\n', '        IERC20(USDC).safeApprove(address(curve3pool), 0);\n', '        IERC20(USDC).safeApprove(address(curve3pool), uint256(-1));\n', '        IERC20(USDT).safeApprove(address(curve3pool), 0);\n', '        IERC20(USDT).safeApprove(address(curve3pool), uint256(-1));\n', '    }\n', '\n', '    function setRewardPercent(\n', '        uint256 _rewardPercent)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_rewardPercent <= 1e20, "value too high");\n', '        rewardPercent = _rewardPercent;\n', '    }\n', '\n', '    function setMaxUniswapDisagreement(\n', '        uint256 _maxUniswapDisagreement)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_maxUniswapDisagreement != 0, "invalid param");\n', '        maxUniswapDisagreement = _maxUniswapDisagreement;\n', '    }\n', '\n', '    function setMaxCurveDisagreement(\n', '        uint256 _maxCurveDisagreement)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_maxCurveDisagreement != 0, "invalid param");\n', '        maxCurveDisagreement = _maxCurveDisagreement;\n', '    }\n', '\n', '    function setCallerRewardDivisor(\n', '        uint256 _callerRewardDivisor)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_callerRewardDivisor != 0, "invalid param");\n', '        callerRewardDivisor = _callerRewardDivisor;\n', '    }\n', '}']