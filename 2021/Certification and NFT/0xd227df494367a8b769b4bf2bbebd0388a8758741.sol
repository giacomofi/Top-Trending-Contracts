['// SPDX-License-Identifier: MIT\n', '// // Degen Farm. Collectible NFT game\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./ERC721URIStorage.sol";\n', '\n', 'contract Creatures is ERC721URIStorage {\n', '\n', '    enum AnimalType {\n', '        Cow, Horse, Rabbit, Chicken, Pig, Cat, Dog, Goose, Goat, Sheep,\n', '        Snake, Fish, Frog, Worm, Lama, Mouse, Camel, Donkey, Bee, Duck,\n', '        GenesisEgg // 20\n', '    }\n', '    enum Rarity     {\n', '        Normie, // 0\n', '        Chad,   // 1\n', '        Degen,  // 2\n', '        Unique // 3\n', '    }\n', '\n', '    struct Animal {\n', '        AnimalType atype; // uint8\n', '        Rarity     rarity; // uint8\n', '        uint32     index;\n', '        uint64     birthday;\n', '        string     name;\n', '    }\n', '\n', '    mapping (uint256 => Animal) public animals;\n', '\n', '    mapping(address => bool) public trusted_markets;\n', '    event TrustedMarket(address indexed _market, bool _state);\n', '\n', '    constructor(string memory name_,\n', '        string memory symbol_) ERC721(name_, symbol_)  {\n', '    }\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 tokenId,\n', '        uint8 _animalType,\n', '        uint8 _rarity,\n', '        uint32 index\n', '        ) external onlyOwner {\n', '\n', '        _mint(to, tokenId);\n', '        animals[tokenId] = Animal(AnimalType(_animalType), Rarity(_rarity), index, uint64(block.timestamp), "");\n', '    }\n', '\n', '    function setName(uint256 tokenId, string calldata _name) external {\n', "        require(ownerOf(tokenId) == msg.sender, 'Only owner can change name');\n", "        require(bytes(animals[tokenId].name).length == 0, 'The name has already been given');\n", '\n', '        animals[tokenId].name = _name;\n', '    }\n', '\n', '    function setTrustedMarket(address _market, bool _state) external onlyOwner {\n', '        trusted_markets[_market] = _state;\n', '        emit TrustedMarket(_market, _state);\n', '    }\n', '\n', '    function getTypeAndRarity(uint256 _tokenId) external view returns(uint8, uint8) {\n', '        return (uint8(animals[_tokenId].atype), uint8(animals[_tokenId].rarity));\n', '    }\n', '\n', '    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\n', '        //We can return only uint256[] memory\n', '         uint256 n = balanceOf(_owner);\n', '\n', '        uint256[] memory result = new uint256[](n);\n', '        for (uint16 i=0; i < n; i++) {\n', '            result[i]=tokenOfOwnerByIndex(_owner, i);\n', '        }\n', '        return  result;\n', '    }\n', '\n', '    function baseURI() public view override returns (string memory) {\n', "        return 'http://degens.farm/meta/creatures/';\n", '    }\n', '\n', '    /**\n', '     * @dev Overriding standart function for gas safe traiding with trusted parts like DegenFarm\n', '     * Requirements:\n', '     *\n', '     * - `from` and `to` cannot be the zero address.\n', '     * - `caller` must be added to trustedMarkets.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public override {\n', '        if (trusted_markets[msg.sender]) {\n', '            _transfer(from, to, tokenId);\n', '        } else {\n', '            super.transferFrom(from, to, tokenId);\n', '        }\n', '\n', '    }\n', '}']