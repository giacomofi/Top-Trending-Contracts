['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// File: contracts\\fixed-inflation\\FixedInflationData.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct FixedInflationEntryConfiguration {\n', '    bool add;\n', '    bool remove;\n', '    FixedInflationEntry data;\n', '}\n', '\n', 'struct FixedInflationEntry {\n', '    uint256 lastBlock;\n', '    bytes32 id;\n', '    string name;\n', '    uint256 blockInterval;\n', '    uint256 callerRewardPercentage;\n', '}\n', '\n', 'struct FixedInflationOperation {\n', '\n', '    address inputTokenAddress;\n', '    uint256 inputTokenAmount;\n', '    bool inputTokenAmountIsPercentage;\n', '    bool inputTokenAmountIsByMint;\n', '\n', '    address ammPlugin;\n', '    address[] liquidityPoolAddresses;\n', '    address[] swapPath;\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '\n', '    address[] receivers;\n', '    uint256[] receiversPercentages;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\IFixedInflationExtension.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IFixedInflationExtension {\n', '\n', '    function init(address host) external;\n', '\n', '    function setHost(address host) external;\n', '\n', '    function data() external view returns(address fixedInflationContract, address host);\n', '\n', '    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) external;\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\util\\DFOHub.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\IFixedInflation.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IFixedInflation {\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\n', '}\n', '\n', '// File: contracts\\fixed-inflation\\DFOBasedFixedInflationExtension.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', '\n', '\n', '\n', 'contract DFOBasedFixedInflationExtension is IFixedInflationExtension {\n', '\n', '    string private constant FUNCTIONALITY_NAME = "manageFixedInflation";\n', '\n', '    address private _host;\n', '\n', '    address private _fixedInflationContract;\n', '\n', '    modifier fixedInflationOnly() {\n', '        require(_fixedInflationContract == msg.sender, "Unauthorized");\n', '        _;\n', '    }\n', '\n', '    modifier hostOnly() {\n', '        require(_isFromDFO(msg.sender), "Unauthorized");\n', '        _;\n', '    }\n', '\n', '    function init(address doubleProxyAddress) override public {\n', '        require(_host == address(0), "Already init");\n', '        require(doubleProxyAddress != address(0), "blank host");\n', '        _host = doubleProxyAddress;\n', '        _fixedInflationContract = msg.sender;\n', '    }\n', '\n', '    function data() view public override returns(address fixedInflationContract, address host) {\n', '        return(_fixedInflationContract, _host);\n', '    }\n', '\n', '    function setHost(address host) public virtual override hostOnly {\n', '        _host = host;\n', '    }\n', '\n', '    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) public override fixedInflationOnly {\n', '        IMVDProxy(IDoubleProxy(_host).proxy()).submit(FUNCTIONALITY_NAME, abi.encode(address(0), 0, tokenAddresses, transferAmounts, amountsToMint, _fixedInflationContract));\n', '    }\n', '\n', '    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) public override hostOnly {\n', '        IFixedInflation(_fixedInflationContract).setEntries(newEntries, operationSets);\n', '    }\n', '\n', '    function _getFunctionalityAddress() private view returns(address functionalityAddress) {\n', '        (functionalityAddress,,,,) = IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_host).proxy()).getMVDFunctionalitiesManagerAddress()).getFunctionalityData(FUNCTIONALITY_NAME);\n', '    }\n', '\n', '    function _getDFOWallet() private view returns(address) {\n', '        return IMVDProxy(IDoubleProxy(_host).proxy()).getMVDWalletAddress();\n', '    }\n', '\n', '    function _isFromDFO(address sender) private view returns(bool) {\n', '        return IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_host).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender);\n', '    }\n', '}']