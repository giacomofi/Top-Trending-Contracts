['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-02\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.0 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/IQLF.sol\n', '\n', '\n', '/**\n', ' * @author          Yisi Liu\n', ' * @contact         [email\xa0protected]\n', ' * @author_time     01/06/2021\n', '**/\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', 'abstract contract IQLF is IERC165 {\n', '    /**\n', '     * @dev Returns if the given address is qualified, implemented on demand.\n', '     */\n', '    function ifQualified (address account) virtual external view returns (bool);\n', '\n', '    /**\n', '     * @dev Logs if the given address is qualified, implemented on demand.\n', '     */\n', '    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\n', '\n', '    /**\n', '     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector || \n', '            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\n', '    }\n', '\n', '    /**\n', '     * @dev Emit when `ifQualified` is called to decide if the given `address`\n', '     * is `qualified` according to the preset rule by the contract creator and \n', '     * the current block `number` and the current block `timestamp`.\n', '     */\n', '    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\n', '}\n', '\n', '\n', '// File contracts/qualification.sol\n', '\n', '\n', '/**\n', ' * @author          Yisi Liu\n', ' * @contact         [email\xa0protected]\n', ' * @author_time     01/06/2021\n', '**/\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', 'contract QLF is IQLF {\n', '    string private name;\n', '    uint256 private creation_time;\n', '    uint256 start_time;\n', '    address creator;\n', '    mapping(address => bool) black_list;\n', '\n', '    modifier creatorOnly {\n', '        require(msg.sender == creator, "Not Authorized");\n', '        _;\n', '    }\n', '\n', '    constructor (string memory _name, uint256 _start_time) {\n', '        name = _name;\n', '        creation_time = block.timestamp;\n', '        start_time = _start_time;\n', '        creator = msg.sender;\n', '    }\n', '\n', '    function get_name() public view returns (string memory) {\n', '        return name;\n', '    }\n', '\n', '    function get_creation_time() public view returns (uint256) {\n', '        return creation_time;\n', '    }\n', '\n', '    function get_start_time() public view returns (uint256) {\n', '        return start_time;\n', '    }\n', '\n', '    function set_start_time(uint256 _start_time) public creatorOnly {\n', '        start_time = _start_time;\n', '    }\n', '\n', '    function ifQualified(address) public pure override returns (bool qualified) {\n', '        qualified = true;\n', '    } \n', '\n', '    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\n', '        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\n', '            black_list[address(msg.sender)] = true;\n', '            return false;\n', '        }\n', '        if (black_list[msg.sender]) {\n', '            return false;\n', '        }\n', '        emit Qualification(account, true, block.number, block.timestamp);\n', '        return true;\n', '    } \n', '\n', '    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector || \n', '            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\n', '            interfaceId == this.get_start_time.selector;\n', '    }    \n', '}']