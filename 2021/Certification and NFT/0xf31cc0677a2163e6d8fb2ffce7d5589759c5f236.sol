['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', '// File: contracts/MultiSigInterface.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract MultiSigInterface{\n', '  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);\n', '  function is_signer(address addr) public view returns(bool);\n', '}\n', '\n', '// File: contracts/MultiSigTools.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract MultiSigTools{\n', '  MultiSigInterface public multisig_contract;\n', '  constructor(address _contract) public{\n', '    require(_contract!= address(0x0));\n', '    multisig_contract = MultiSigInterface(_contract);\n', '  }\n', '\n', '  modifier only_signer{\n', '    require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");\n', '    _;\n', '  }\n', '\n', '  modifier is_majority_sig(uint64 id, string memory name) {\n', '    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\n', '    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\n', '      _;\n', '    }\n', '  }\n', '\n', '  modifier is_majority_sig_with_hash(uint64 id, string memory name, bytes32 hash) {\n', '    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\n', '      _;\n', '    }\n', '  }\n', '\n', '  event TransferMultiSig(address _old, address _new);\n', '\n', '  function transfer_multisig(uint64 id, address _contract) public only_signer\n', '  is_majority_sig(id, "transfer_multisig"){\n', '    require(_contract != address(0x0));\n', '    address old = address(multisig_contract);\n', '    multisig_contract = MultiSigInterface(_contract);\n', '    emit TransferMultiSig(old, _contract);\n', '  }\n', '}\n', '\n', '// File: contracts/TrustListTools.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract TrustListInterface{\n', '  function is_trusted(address addr) public returns(bool);\n', '}\n', 'contract TrustListTools{\n', '  TrustListInterface public trustlist;\n', '  constructor(address _list) public {\n', '    //require(_list != address(0x0));\n', '    trustlist = TrustListInterface(_list);\n', '  }\n', '\n', '  modifier is_trusted(address addr){\n', '    require(trustlist.is_trusted(addr), "not a trusted issuer");\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/TokenClaimer.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', 'contract TokenClaimer{\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '  function _claimStdTokens(address _token, address payable to) internal {\n', '        if (_token == address(0x0)) {\n', '            to.transfer(address(this).balance);\n', '            return;\n', '        }\n', '        uint balance = IERC20(_token).balanceOf(address(this));\n', '\n', '        (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));\n', '        require(status, "call failed");\n', '        emit ClaimedTokens(_token, to, balance);\n', '  }\n', '}\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/assets/TokenBankV2.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenBankV2 is Ownable, TokenClaimer, TrustListTools{\n', '  using SafeERC20 for IERC20;\n', '\n', '  string public bank_name;\n', '  //address public erc20_token_addr;\n', '\n', '  event withdraw_token(address token, address to, uint256 amount);\n', '  event issue_token(address token, address to, uint256 amount);\n', '\n', '  event RecvETH(uint256 v);\n', '  function() external payable{\n', '    emit RecvETH(msg.value);\n', '  }\n', '\n', '  constructor(string memory name, address _tlist) TrustListTools(_tlist) public{\n', '    bank_name = name;\n', '  }\n', '\n', '\n', '  function claimStdTokens(address _token, address payable to)\n', '    public onlyOwner{\n', '      _claimStdTokens(_token, to);\n', '  }\n', '\n', '  function balance(address erc20_token_addr) public view returns(uint){\n', '    if(erc20_token_addr == address(0x0)){\n', '      return address(this).balance;\n', '    }\n', '    return IERC20(erc20_token_addr).balanceOf(address(this));\n', '  }\n', '\n', '  function transfer(address erc20_token_addr, address payable to, uint tokens)\n', '    public\n', '    onlyOwner\n', '    returns (bool success){\n', '    require(tokens <= balance(erc20_token_addr), "TokenBankV2 not enough tokens");\n', '    if(erc20_token_addr == address(0x0)){\n', '      (bool _success, ) = to.call.value(tokens)("");\n', '      require(_success, "TokenBankV2 transfer eth failed");\n', '      emit withdraw_token(erc20_token_addr, to, tokens);\n', '      return true;\n', '    }\n', '    IERC20(erc20_token_addr).safeTransfer(to, tokens);\n', '    emit withdraw_token(erc20_token_addr, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function issue(address erc20_token_addr, address payable _to, uint _amount)\n', '    public\n', '    is_trusted(msg.sender)\n', '    returns (bool success){\n', '      require(_amount <= balance(erc20_token_addr), "TokenBankV2 not enough tokens");\n', '      if(erc20_token_addr == address(0x0)){\n', '        (bool _success, ) = _to.call.value(_amount)("");\n', '        require(_success, "TokenBankV2 transfer eth failed");\n', '        emit issue_token(erc20_token_addr, _to, _amount);\n', '        return true;\n', '      }\n', '      IERC20(erc20_token_addr).safeTransfer(_to, _amount);\n', '      emit issue_token(erc20_token_addr, _to, _amount);\n', '      return true;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenBankV2Factory {\n', '  event CreateTokenBank(string name, address addr);\n', '\n', '  function newTokenBankV2(string memory name, address tlist) public returns(address){\n', '    TokenBankV2 addr = new TokenBankV2(name, tlist);\n', '    emit CreateTokenBank(name, address(addr));\n', '    addr.transferOwnership(msg.sender);\n', '    return address(addr);\n', '  }\n', '}']