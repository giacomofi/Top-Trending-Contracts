['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.7.5;\n', '\n', 'interface IOwnable {\n', '  function policy() external view returns (address);\n', '\n', '  function renounceManagement() external;\n', '  \n', '  function pushManagement( address newOwner_ ) external;\n', '  \n', '  function pullManagement() external;\n', '}\n', '\n', 'contract Ownable is IOwnable {\n', '\n', '    address internal _owner;\n', '    address internal _newOwner;\n', '\n', '    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n', '    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipPushed( address(0), _owner );\n', '    }\n', '\n', '    function policy() public view override returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyPolicy() {\n', '        require( _owner == msg.sender, "Ownable: caller is not the owner" );\n', '        _;\n', '    }\n', '\n', '    function renounceManagement() public virtual override onlyPolicy() {\n', '        emit OwnershipPushed( _owner, address(0) );\n', '        _owner = address(0);\n', '    }\n', '\n', '    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\n', '        require( newOwner_ != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipPushed( _owner, newOwner_ );\n', '        _newOwner = newOwner_;\n', '    }\n', '    \n', '    function pullManagement() public virtual override {\n', '        require( msg.sender == _newOwner, "Ownable: must be new owner to pull");\n', '        emit OwnershipPulled( _owner, _newOwner );\n', '        _owner = _newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '\n', '  function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'interface IOHMERC20 {\n', '    function burnFrom(address account_, uint256 amount_) external;\n', '}\n', '\n', 'interface IBondCalculator {\n', '  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\n', '}\n', '\n', 'contract MockTreasury is Ownable {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    event Deposit( address indexed token, uint amount, uint value, uint send );\n', '    event Withdrawal( address indexed token, uint amount, uint value );\n', '\n', '    address public immutable OHM;\n', '\n', '    mapping( address => bool ) public isReserveToken;\n', '    mapping( address => bool ) public isReserveDepositor;\n', '    mapping( address => bool ) public isReserveSpender;\n', '    mapping( address => bool ) public isReserveManager;\n', '\n', '    mapping( address => bool ) public isLiquidityToken;\n', '    mapping( address => bool ) public isLiquidityDepositor;\n', '    mapping( address => bool ) public isLiquidityManager;\n', '\n', '    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\n', '\n', '    uint public totalReserves; // Risk-free value of all assets\n', '\n', '    constructor( address _ohm ) {\n', '        OHM = _ohm;\n', '    }\n', '\n', '    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\n', '        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], "Not accepted" );\n', '        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\n', '\n', '        if ( isReserveToken[ _token ] ) {\n', '            require( isReserveDepositor[ msg.sender ], "Not approved" );\n', '        } else {\n', '            require( isLiquidityDepositor[ msg.sender ], "Not approved" );\n', '        }\n', '\n', '        uint value = valueOf( _token, _amount );\n', '        send_ = value.sub( _profit );\n', '\n', '        totalReserves = totalReserves.add( value );\n', '\n', '        emit Deposit( _token, _amount, value, send_ );\n', '    }\n', '\n', '    function withdraw( uint _amount, address _token ) external {\n', '        require( isReserveToken[ _token ], "Not accepted" ); // Only reserves can be used for redemptions\n', '        require( isReserveSpender[ msg.sender ] == true, "Not approved" );\n', '\n', '        uint value = valueOf( _token, _amount );\n', '        IOHMERC20( OHM ).burnFrom( msg.sender, value );\n', '\n', '        totalReserves = totalReserves.sub( value );\n', '\n', '        IERC20( _token ).safeTransfer( msg.sender, _amount );\n', '\n', '        emit Withdrawal( _token, _amount, value );\n', '    }\n', '\n', '    function manage( address _token, uint _amount ) external {\n', '        if( isLiquidityToken[ _token ] ) {\n', '            require( isLiquidityManager[ msg.sender ], "Not approved" );\n', '        } else {\n', '            require( isReserveManager[ msg.sender ], "Not approved" );\n', '        }\n', '\n', '        uint value = valueOf( _token, _amount );\n', '        totalReserves = totalReserves.sub( value );\n', '\n', '        IERC20( _token ).safeTransfer( msg.sender, _amount );\n', '    }\n', '\n', '    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\n', '        if ( isReserveToken[ _token ] ) {\n', '            // convert amount to match OHM decimals\n', '            value_ = _amount.mul( 10 ** IERC20( OHM ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\n', '        } else if ( isLiquidityToken[ _token ] ) {\n', '            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\n', '        }\n', '    }\n', '\n', '    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER }\n', '\n', '    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyPolicy() {\n', '        require( _address != address(0) );\n', '\n', '        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\n', '            isReserveDepositor[ _address ] = !isReserveDepositor[ _address ];\n', '        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\n', '            isReserveSpender[ _address ] = !isReserveSpender[ _address ];\n', '        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\n', '            isReserveToken[ _address ] = !isReserveToken[ _address ];\n', '        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\n', '            isReserveManager[ _address ] = !isReserveManager[ _address ];\n', '        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\n', '            isLiquidityDepositor[ _address ] = !isLiquidityDepositor[ _address ];\n', '        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\n', '            isLiquidityToken[ _address ] = !isLiquidityToken[ _address ];\n', '            bondCalculator[ _address ] = _calculator;\n', '        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\n', '            isLiquidityManager[ _address ] = !isLiquidityManager[ _address ];\n', '        }\n', '    }\n', '}']