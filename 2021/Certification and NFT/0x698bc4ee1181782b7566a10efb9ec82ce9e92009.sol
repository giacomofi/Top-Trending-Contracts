['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity 0.6.4;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'library EthAddressLib {\n', '    /**\n', '     * @dev returns the address used within the protocol to identify ETH\n', '     * @return the address assigned to ETH\n', '     */\n', '    function ethAddress() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IOracleProxy {\n', '    function get(address token) external view returns (uint256, bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IPriceOracles {\n', '    function get(address token) external view returns (uint256, bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a < b) {\n', '            return b - a;\n', '        }\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'library SignedSafeMath {\n', '  int256 constant private _INT256_MIN = -2**255;\n', '\n', '  /**\n', '   * @dev Multiplies two signed integers, reverts on overflow.\n', '   */\n', '  function mul(int256 a, int256 b) internal pure returns (int256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '    int256 c = a * b;\n', '    require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '   */\n', '  function div(int256 a, int256 b) internal pure returns (int256) {\n', '    require(b != 0, "SignedSafeMath: division by zero");\n', '    require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '    int256 c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two signed integers, reverts on overflow.\n', '   */\n', '  function sub(int256 a, int256 b) internal pure returns (int256) {\n', '    int256 c = a - b;\n', '    require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two signed integers, reverts on overflow.\n', '   */\n', '  function add(int256 a, int256 b) internal pure returns (int256) {\n', '    int256 c = a + b;\n', '    require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @notice Computes average of two signed integers, ensuring that the computation\n', "   * doesn't overflow.\n", '   * @dev If the result is not an integer, it is rounded towards zero. For example,\n', '   * avg(-3, -4) = -3\n', '   */\n', '  function avg(int256 _a, int256 _b)\n', '    internal\n', '    pure\n', '    returns (int256)\n', '  {\n', '    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\n', '      return add(_a, _b) / 2;\n', '    }\n', '    int256 remainder = (_a % 2 + _b % 2) / 2;\n', '    return add(add(_a / 2, _b / 2), remainder);\n', '  }\n', '}\n', '\n', 'library Median {\n', '  using SignedSafeMath for int256;\n', '\n', '  int256 constant INT_MAX = 2**255-1;\n', '\n', '  /**\n', '   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\n', '   * array has an even number of elements.\n', "   * @dev The list passed as an argument isn't modified.\n", '   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\n', '   * the runtime is O(n^2).\n', '   * @param list The list of elements to compare\n', '   */\n', '  function calculate(int256[] memory list)\n', '    internal\n', '    pure\n', '    returns (int256)\n', '  {\n', '    return calculateInplace(copy(list));\n', '  }\n', '\n', '  /**\n', '   * @notice See documentation for function calculate.\n', '   * @dev The list passed as an argument may be permuted.\n', '   */\n', '  function calculateInplace(int256[] memory list)\n', '    internal\n', '    pure\n', '    returns (int256)\n', '  {\n', '    require(0 < list.length, "list must not be empty");\n', '    uint256 len = list.length;\n', '    uint256 middleIndex = len / 2;\n', '    if (len % 2 == 0) {\n', '      int256 median1;\n', '      int256 median2;\n', '      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\n', '      return SignedSafeMath.avg(median1, median2);\n', '    } else {\n', '      return quickselect(list, 0, len - 1, middleIndex);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Maximum length of list that shortSelectTwo can handle\n', '   */\n', '  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\n', '\n', '  /**\n', '   * @notice Select the k1-th and k2-th element from list of length at most 7\n', '   * @dev Uses an optimal sorting network\n', '   */\n', '  function shortSelectTwo(\n', '    int256[] memory list,\n', '    uint256 lo,\n', '    uint256 hi,\n', '    uint256 k1,\n', '    uint256 k2\n', '  )\n', '    private\n', '    pure\n', '    returns (int256 k1th, int256 k2th)\n', '  {\n', '    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\n', '    // for lists of length 7. Network layout is taken from\n', '    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\n', '\n', '    uint256 len = hi + 1 - lo;\n', '    int256 x0 = list[lo + 0];\n', '    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\n', '    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\n', '    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\n', '    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\n', '    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\n', '    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\n', '\n', '    if (x0 > x1) {(x0, x1) = (x1, x0);}\n', '    if (x2 > x3) {(x2, x3) = (x3, x2);}\n', '    if (x4 > x5) {(x4, x5) = (x5, x4);}\n', '    if (x0 > x2) {(x0, x2) = (x2, x0);}\n', '    if (x1 > x3) {(x1, x3) = (x3, x1);}\n', '    if (x4 > x6) {(x4, x6) = (x6, x4);}\n', '    if (x1 > x2) {(x1, x2) = (x2, x1);}\n', '    if (x5 > x6) {(x5, x6) = (x6, x5);}\n', '    if (x0 > x4) {(x0, x4) = (x4, x0);}\n', '    if (x1 > x5) {(x1, x5) = (x5, x1);}\n', '    if (x2 > x6) {(x2, x6) = (x6, x2);}\n', '    if (x1 > x4) {(x1, x4) = (x4, x1);}\n', '    if (x3 > x6) {(x3, x6) = (x6, x3);}\n', '    if (x2 > x4) {(x2, x4) = (x4, x2);}\n', '    if (x3 > x5) {(x3, x5) = (x5, x3);}\n', '    if (x3 > x4) {(x3, x4) = (x4, x3);}\n', '\n', '    uint256 index1 = k1 - lo;\n', '    if (index1 == 0) {k1th = x0;}\n', '    else if (index1 == 1) {k1th = x1;}\n', '    else if (index1 == 2) {k1th = x2;}\n', '    else if (index1 == 3) {k1th = x3;}\n', '    else if (index1 == 4) {k1th = x4;}\n', '    else if (index1 == 5) {k1th = x5;}\n', '    else if (index1 == 6) {k1th = x6;}\n', '    else {revert("k1 out of bounds");}\n', '\n', '    uint256 index2 = k2 - lo;\n', '    if (k1 == k2) {return (k1th, k1th);}\n', '    else if (index2 == 0) {return (k1th, x0);}\n', '    else if (index2 == 1) {return (k1th, x1);}\n', '    else if (index2 == 2) {return (k1th, x2);}\n', '    else if (index2 == 3) {return (k1th, x3);}\n', '    else if (index2 == 4) {return (k1th, x4);}\n', '    else if (index2 == 5) {return (k1th, x5);}\n', '    else if (index2 == 6) {return (k1th, x6);}\n', '    else {revert("k2 out of bounds");}\n', '  }\n', '\n', '  /**\n', '   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\n', '   * (inclusive). Modifies list in-place.\n', '   */\n', '  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\n', '    private\n', '    pure\n', '    returns (int256 kth)\n', '  {\n', '    require(lo <= k);\n', '    require(k <= hi);\n', '    while (lo < hi) {\n', '      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\n', '        int256 ignore;\n', '        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\n', '        return kth;\n', '      }\n', '      uint256 pivotIndex = partition(list, lo, hi);\n', '      if (k <= pivotIndex) {\n', '        // since pivotIndex < (original hi passed to partition),\n', '        // termination is guaranteed in this case\n', '        hi = pivotIndex;\n', '      } else {\n', '        // since (original lo passed to partition) <= pivotIndex,\n', '        // termination is guaranteed in this case\n', '        lo = pivotIndex + 1;\n', '      }\n', '    }\n', '    return list[lo];\n', '  }\n', '\n', '  /**\n', '   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\n', '   * lo and hi (inclusive). Modifies list in-place.\n', '   */\n', '  function quickselectTwo(\n', '    int256[] memory list,\n', '    uint256 lo,\n', '    uint256 hi,\n', '    uint256 k1,\n', '    uint256 k2\n', '  )\n', '    internal // for testing\n', '    pure\n', '    returns (int256 k1th, int256 k2th)\n', '  {\n', '    require(k1 < k2);\n', '    require(lo <= k1 && k1 <= hi);\n', '    require(lo <= k2 && k2 <= hi);\n', '\n', '    while (true) {\n', '      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\n', '        return shortSelectTwo(list, lo, hi, k1, k2);\n', '      }\n', '      uint256 pivotIdx = partition(list, lo, hi);\n', '      if (k2 <= pivotIdx) {\n', '        hi = pivotIdx;\n', '      } else if (pivotIdx < k1) {\n', '        lo = pivotIdx + 1;\n', '      } else {\n', '        assert(k1 <= pivotIdx && pivotIdx < k2);\n', '        k1th = quickselect(list, lo, pivotIdx, k1);\n', '        k2th = quickselect(list, pivotIdx + 1, hi, k2);\n', '        return (k1th, k2th);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', "   * @notice Partitions list in-place using Hoare's partitioning scheme.\n", '   * Only elements of list between indices lo and hi (inclusive) will be modified.\n', '   * Returns an index i, such that:\n', '   * - lo <= i < hi\n', '   * - forall j in [lo, i]. list[j] <= list[i]\n', '   * - forall j in [i, hi]. list[i] <= list[j]\n', '   */\n', '  function partition(int256[] memory list, uint256 lo, uint256 hi)\n', '    private\n', '    pure\n', '    returns (uint256)\n', '  {\n', "    // We don't care about overflow of the addition, because it would require a list\n", "    // larger than any feasible computer's memory.\n", '    int256 pivot = list[(lo + hi) / 2];\n', "    lo -= 1; // this can underflow. that's intentional.\n", '    hi += 1;\n', '    while (true) {\n', '      do {\n', '        lo += 1;\n', '      } while (list[lo] < pivot);\n', '      do {\n', '        hi -= 1;\n', '      } while (list[hi] > pivot);\n', '      if (lo < hi) {\n', '        (list[lo], list[hi]) = (list[hi], list[lo]);\n', '      } else {\n', '        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\n', '        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\n', '        // in each loop iteration and\n', '        // - either list[orig_hi] > pivot, in which case the first loop iteration\n', '        //   will achieve hi < orig_hi;\n', '        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\n', '        //   needed:\n', '        //   - lo will have to stop at least once in the interval\n', '        //     [orig_lo, (orig_lo + orig_hi)/2]\n', '        //   - (orig_lo + orig_hi)/2 < orig_hi\n', '        return hi;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Makes an in-memory copy of the array passed in\n', '   * @param list Reference to the array to be copied\n', '   */\n', '  function copy(int256[] memory list)\n', '    private\n', '    pure\n', '    returns(int256[] memory)\n', '  {\n', '    int256[] memory list2 = new int256[](list.length);\n', '    for (uint256 i = 0; i < list.length; i++) {\n', '      list2[i] = list[i];\n', '    }\n', '    return list2;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-06-04\n', '*/\n', 'contract ForTubeOracle is Initializable, IPriceOracles {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '\n', '    event Enable(address feeder);\n', '    event Disable(address feeder);\n', '\n', '    event Enables(address[] feeder);\n', '    event Disables(address[] feeder);\n', '\n', '    event EnableToken(address token);\n', '    event DisableToken(address token);\n', '\n', '    event EnableTokens(address[] ts);\n', '    event DisableTokens(address[] ts);\n', '\n', '    event Set(address who, address token, uint val, uint exp);\n', '    event BatchSet(address[] tokens, uint[] vals, uint exp);\n', '\n', '    address public multiSig;\n', '    address public admin;\n', '\n', '    //所有喂价地址列表，每个节点一个喂价地址，下架节点时，需要删除下架节点的数据。\n', '    EnumerableSet.AddressSet private _tokens;// 支持的币种列表\n', '\n', '    // to save gas\n', '    struct Price {\n', '        uint192 price;\n', '        uint64 expiration;\n', '    }\n', '    mapping (address => Price) public finalPrices;//最终结果\n', '\n', '    //使用新的address作为Key\n', '    EnumerableSet.AddressSet private _feeders;// 支持的喂价者列表\n', '    mapping (address => mapping (address => Price)) public _prices;\n', '\n', '    function initialize(address _multiSig, address[] memory _initFeeders)\n', '        public\n', '        initializer\n', '    {\n', '        multiSig = _multiSig;\n', '        admin = msg.sender;\n', '\n', '        require(_initFeeders.length >= 1, "invalid length");\n', '        for (uint256 i = 0; i < _initFeeders.length; i++) {\n', '            _feeders.add(_initFeeders[i]);\n', '        }\n', '    }\n', '\n', '    // constructor(address _multiSig, address[] memory _initFeeders) public\n', '    // {\n', '    //     multiSig = _multiSig;\n', '    //     admin = msg.sender;\n', '\n', '    //     require(_initFeeders.length >= 1, "invalid length");\n', '    //     for (uint256 i = 0; i < _initFeeders.length; i++) {\n', '    //         _feeders.add(_initFeeders[i]);\n', '    //     }\n', '    // }\n', '\n', '    // 每个节点都能访问该喂价合约，但只能喂价属于本节点的数据\n', '    modifier auth {\n', '        require(_feeders.contains(msg.sender), "unauthorized feeder");\n', '        _;\n', '    }\n', '\n', '    modifier onlyMultiSig {\n', '        require(msg.sender == multiSig, "require multiSig");\n', '        _;\n', '    }\n', '\n', '    function setMultiSig(address _multiSig) external onlyMultiSig {\n', '        multiSig = _multiSig;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "require admin");\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _admin) external onlyMultiSig {\n', '        admin = _admin;\n', '    }\n', '\n', '    function enable(address feeder) public onlyMultiSig {\n', '        require(!_feeders.contains(feeder), "duplicated feeder");\n', '        _feeders.add(feeder);\n', '        emit Enable(feeder);\n', '    }\n', '\n', '    function disable(address feeder) public onlyMultiSig {\n', '        require(_feeders.contains(feeder), "not exist");\n', '        _feeders.remove(feeder);\n', '\n', '        for (uint i = 0; i < _tokens.length(); i++) {\n', '            delete _prices[feeder][_tokens.at(i)];\n', '        }\n', '        emit Disable(feeder);\n', '    }\n', '\n', '    function enables(address[] calldata feeders) external onlyMultiSig {\n', '        for (uint256 i = 0; i < feeders.length; i++) {\n', '            enable(feeders[i]);\n', '        }\n', '        emit Enables(feeders);\n', '    }\n', '\n', '    function disables(address[] calldata feeders) external onlyMultiSig {\n', '        for (uint256 i = 0; i < feeders.length; i++) {\n', '            disable(feeders[i]);\n', '        }\n', '        emit Disables(feeders);\n', '    }\n', '\n', '    function enableToken(address token) public onlyAdmin {\n', '        require(_tokens.add(token), "Duplicate token");\n', '        emit EnableToken(token);\n', '    }\n', '\n', '    function disableToken(address token) public onlyAdmin {\n', '        require(_tokens.remove(token), "nonexist token");\n', "        //TODO: delete feeder's history price data\n", '        emit DisableToken(token);\n', '    }\n', '\n', '    function enableTokens(address[] calldata tokens) external onlyAdmin {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            enableToken(tokens[i]);\n', '        }\n', '        emit EnableTokens(tokens);\n', '    }\n', '\n', '    function disableTokens(address[] calldata tokens) external onlyAdmin {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            disableToken(tokens[i]);\n', '        }\n', '        emit DisableTokens(tokens);\n', '    }\n', '\n', '    function tokens() public view returns (address[] memory) {\n', '        address[] memory values = new address[](_tokens.length());\n', '        for (uint256 i = 0; i < _tokens.length(); ++i) {\n', '            values[i] = _tokens.at(i);\n', '        }\n', '        return values;\n', '    }\n', '\n', '    // 设置价格为 @val, 保持有效时间为 @exp second.\n', '    function set(address token, uint val, uint exp) public auth {\n', '        require(_feeders.contains(msg.sender), "unauth feeder");\n', '\n', '        _prices[msg.sender][token].price = uint192(val);\n', '        _prices[msg.sender][token].expiration = uint64(now + exp);\n', '\n', '        int256[] memory priceList = new int256[](_feeders.length());\n', '        uint256 j = 0;\n', '        for (uint256 i = 0; i < _feeders.length(); i++) {\n', '            address who = _feeders.at(i);\n', '            if (_prices[who][token].price != 0 && now < _prices[who][token].expiration) {\n', '                priceList[j++] = int256(_prices[who][token].price);\n', '            }\n', '        }\n', '\n', '        int256[] memory priceFilter = new int256[](j);\n', '        for (uint256 i = 0; i < j; i++) {\n', '            priceFilter[i] = priceList[i];\n', '        }\n', '\n', '        finalPrices[token].price = uint192(Median.calculateInplace(priceFilter));\n', '        finalPrices[token].expiration = uint64(now + exp);\n', '\n', '        emit Set(msg.sender, token, val, exp);\n', '    }\n', '\n', '    //批量设置，减少gas使用\n', '    function batchSet(address[] calldata tokens, uint[] calldata vals, uint exp) external auth {\n', '        uint nToken = tokens.length;\n', '        require(nToken == vals.length, "invalid array length");\n', '\n', '        for (uint i = 0; i < nToken; ++i) {\n', '            set(tokens[i], vals[i], now + exp);\n', '        }\n', '\n', '        emit BatchSet(tokens, vals, exp);\n', '    }\n', '\n', '    function getExpiration(address token) external view returns (uint) {\n', '        return finalPrices[token].expiration;\n', '    }\n', '\n', '    function getPrice(address token) external view returns (uint) {\n', '        return finalPrices[token].price;\n', '    }\n', '\n', '    function get(address token) external override view returns (uint, bool) {\n', '        return (finalPrices[token].price, valid(token));\n', '    }\n', '\n', '    function valid(address token) public view returns (bool) {\n', '        return now < finalPrices[token].expiration;\n', '    }\n', '\n', '    function getLastPriceByFeeder(address feeder, address token) public view returns (uint price, uint expiration) {\n', '        return (_prices[feeder][token].price, _prices[feeder][token].expiration);\n', '    }\n', '}']