['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-05\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-16\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProofUpgradeable {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '\n', '// File interfaces/badger/IBadgerGeyser.sol\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IBadgerGeyser {\n', '    function stake(address) external returns (uint256);\n', '\n', '    function totalStakedFor(address) external view returns (uint256);\n', '\n', '    function signalTokenLock(\n', '        address token,\n', '        uint256 amount,\n', '        uint256 durationSec,\n', '        uint256 startTime\n', '    ) external;\n', '\n', '    function modifyTokenLock(\n', '        address token,\n', '        uint256 index,\n', '        uint256 amount,\n', '        uint256 durationSec,\n', '        uint256 startTime\n', '    ) external;\n', '}\n', '\n', '\n', '// File interfaces/yearn/GuestlistApi.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface GuestListAPI {\n', '    function authorized(address guest, uint256 amount) external view returns (bool);\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File interfaces/yearn/BadgerWrapperApi.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface BadgerWrapperAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalWrapperBalance(address account) external view returns (uint256);\n', '\n', '    function totalVaultBalance(address account) external view returns (uint256);\n', '\n', '    function shareValue(uint256) external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/yearn/VipCappedGuestListWrapperUpgradeable.sol\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @notice A basic guest list contract for testing.\n', ' * @dev For a Vyper implementation of this contract containing additional\n', ' * functionality, see https://github.com/banteg/guest-list/blob/master/contracts/GuestList.vy\n', ' * The owner can invite arbitrary guests\n', ' * A guest can be added permissionlessly with proof of inclusion in current merkle set\n', ' * The owner can change the merkle root at any time\n', ' * Merkle-based permission that has been claimed cannot be revoked permissionlessly.\n', ' * Any guests can be revoked by the owner at-will\n', ' * The TVL cap is based on the number of want tokens in the underlying vaults.\n', ' * This can only be made more permissive over time. If decreased, existing TVL is maintained and no deposits are possible until the TVL has gone below the threshold\n', ' * A variant of the yearn AffiliateToken that supports guest list control of deposits\n', ' * A guest list that gates access by merkle root and a TVL cap\n', ' */\n', 'contract VipCappedGuestListBbtcUpgradeable is OwnableUpgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    address public wrapper;\n', '\n', '    bytes32 public guestRoot;\n', '    uint256 public userDepositCap;\n', '    uint256 public totalDepositCap;\n', '\n', '    mapping(address => bool) public guests;\n', '\n', '    address public geyser;\n', '\n', '    event ProveInvitation(address indexed account, bytes32 indexed guestRoot);\n', '    event SetGuestRoot(bytes32 indexed guestRoot);\n', '    event SetUserDepositCap(uint256 cap);\n', '    event SetTotalDepositCap(uint256 cap);\n', '    event SetGeyser(address geyser);\n', '\n', '    /**\n', '     * @notice Create the test guest list, setting the message sender as\n', '     * `owner`.\n', "     * @dev Note that since this is just for testing, you're unable to change\n", '     * `owner`.\n', '     */\n', '    function initialize(address wrapper_) public initializer {\n', '        __Ownable_init();\n', '        wrapper = wrapper_;\n', '    }\n', '    \n', '    function setWrapper(address wrapper_) public onlyOwner {\n', '        wrapper = wrapper_;\n', '    }\n', '\n', '    /**\n', '     * @notice Invite guests or kick them from the party.\n', '     * @param _guests The guests to add or update.\n', '     * @param _invited A flag for each guest at the matching index, inviting or\n', '     * uninviting the guest.\n', '     */\n', '    function setGuests(address[] calldata _guests, bool[] calldata _invited) external onlyOwner {\n', '        _setGuests(_guests, _invited);\n', '    }\n', '\n', '    function remainingTotalDepositAllowed() public view returns (uint256) {\n', '        return totalDepositCap.sub(IERC20(wrapper).totalSupply());\n', '    }\n', '\n', '    function remainingUserDepositAllowed(address user) public view returns (uint256) {\n', '        return userDepositCap.sub(IERC20(wrapper).balanceOf(user));\n', '    }\n', '\n', '    /**\n', '     * @notice Permissionly prove an address is included in the current merkle root, thereby granting access\n', '     * @notice Note that the list is designed to ONLY EXPAND in future instances\n', '     * @notice The admin does retain the ability to ban individual addresses\n', '     */\n', '    function proveInvitation(address account, bytes32[] calldata merkleProof) public {\n', '        // Verify Merkle Proof\n', '        require(_verifyInvitationProof(account, merkleProof));\n', '\n', '        address[] memory accounts = new address[](1);\n', '        bool[] memory invited = new bool[](1);\n', '\n', '        accounts[0] = account;\n', '        invited[0] = true;\n', '\n', '        _setGuests(accounts, invited);\n', '\n', '        emit ProveInvitation(account, guestRoot);\n', '    }\n', '\n', '    /**\n', '     * @notice Set the merkle root to verify invitation proofs against.\n', '     * @notice Note that accounts not included in the root will still be invited if their inviation was previously approved.\n', '     * @notice Setting to 0 removes proof verification versus the root, opening access\n', '     */\n', '    function setGuestRoot(bytes32 guestRoot_) external onlyOwner {\n', '        guestRoot = guestRoot_;\n', '\n', '        emit SetGuestRoot(guestRoot);\n', '    }\n', '\n', '    function setUserDepositCap(uint256 cap_) external onlyOwner {\n', '        userDepositCap = cap_;\n', '\n', '        emit SetUserDepositCap(userDepositCap);\n', '    }\n', '\n', '    function setTotalDepositCap(uint256 cap_) external onlyOwner {\n', '        totalDepositCap = cap_;\n', '\n', '        emit SetTotalDepositCap(totalDepositCap);\n', '    }\n', '\n', '    /**\n', '     * @notice Check if a guest with a bag of a certain size is allowed into\n', '     * the party.\n', "     * @dev Note that `_amount` isn't checked to keep test setup simple, since\n", "     * from the wrapper tests' perspective this is a pass/fail call anyway.\n", "     * @param _guest The guest's address to check.\n", '     */\n', '    function authorized(address _guest, uint256 _amount, bytes32[] calldata _merkleProof) external view returns (bool) {\n', '        // Yes: If the user is on the list, and under the cap\n', '        // Yes: If the user is not on the list, supplies a valid proof (thereby being added to the list), and is under the cap\n', '        // No: If the user is not on the list, does not supply a valid proof, or is over the cap\n', '        bool invited = guests[_guest];\n', '\n', '        // If there is no guest root, all users are invited\n', '        if (!invited && guestRoot == bytes32(0)) {\n', '            invited = true;\n', '        }\n', '\n', '        // If the user is not already invited and there is an active guestList, require verification of merkle proof to grant temporary invitation (does not set storage variable)\n', '        if (!invited && guestRoot != bytes32(0)) {\n', '            // Will revert on invalid proof\n', '            invited = _verifyInvitationProof(_guest, _merkleProof);\n', '        }\n', '\n', '        // If the user was previously invited, or proved invitiation via list, verify if the amount to deposit keeps them under the cap\n', '        if (invited && remainingUserDepositAllowed(_guest) >= _amount && remainingTotalDepositAllowed() >= _amount) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _setGuests(address[] memory _guests, bool[] memory _invited) internal {\n', '        require(_guests.length == _invited.length);\n', '        for (uint256 i = 0; i < _guests.length; i++) {\n', '            if (_guests[i] == address(0)) {\n', '                break;\n', '            }\n', '            guests[_guests[i]] = _invited[i];\n', '        }\n', '    }\n', '\n', '    function _verifyInvitationProof(address account, bytes32[] calldata merkleProof) internal view returns (bool) {\n', '        bytes32 node = keccak256(abi.encodePacked(account));\n', '        return MerkleProofUpgradeable.verify(merkleProof, guestRoot, node);\n', '    }\n', '}']