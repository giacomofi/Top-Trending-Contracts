['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface IERC20{\n', '\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  function allowance(address _owner, address spender) external view returns (uint256);\n', '  \n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '  \n', '  function increaseAllowance(address spender, uint256 addedValue) external;\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) external;\n', '\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '}\n', '\n', 'interface contract2{\n', '    \n', '    function claimRewards(address user) external returns(bool);\n', '}\n', '\n', 'interface MCHstakingInterface {\n', '    \n', '    function stakingStats(address user) external view returns(uint256 amount, uint256 stakingBlock) ;\n', '    \n', '    function totalStaked() external view returns(uint256);\n', '    \n', '    function showBlackUser(address user) external view returns(bool) ;\n', '    \n', '    function allowance(address user) external view returns(bool) ;\n', '    \n', '    function transferOwnership(address to) external ;\n', '    \n', '    function giveAllowence(address user) external ;\n', '    \n', '    function removeAllowence(address user) external ;\n', '    \n', '    function addToBlackList(address user) external ;\n', '\n', '    function removeFromBlackList(address user) external ;\n', '    \n', '    function stakeMCH(uint256 amount) external ;\n', '    \n', '    function unstake(address user, uint256 amount) external ;\n', '    \n', '    function refreshBlock(address user) external ;    \n', '    \n', '    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external ;    \n', '    \n', '    function transferMCH(address to, uint256 amount) external ;\n', '    \n', '    function emergencyWithdraw(uint256 amount) external ;    \n', '    \n', '    event Stake(address indexed staker, uint256 indexed amount);\n', '}\n', 'contract MCHstaking is MCHstakingInterface {\n', '    \n', '    address private _owner;\n', '    mapping (address => bool) private _allowence;\n', '    IERC20 MCH;\n', '    contract2 MCF;\n', '    \n', '    mapping (address => uint256) private _staking;\n', '    mapping (address => uint256) private _block;\n', '    \n', '    uint256 _totalStaked;\n', '    \n', '    mapping (address => bool) private _blackListed;\n', '    \n', '    constructor(address MCHtoken) {\n', '        MCH = IERC20(MCHtoken);\n', '        _owner = msg.sender;\n', '        _allowence[msg.sender] = true;\n', '    }\n', '    \n', '    function setMCFcontract(address contractAddress) external {\n', '        require(msg.sender == _owner);\n', '        MCF = contract2(contractAddress);\n', '        _allowence[contractAddress] = true;\n', '    }\n', '    \n', '    //staking stats of a user\n', '    function stakingStats(address user) external view override returns(uint256 amount, uint256 stakingBlock){\n', '        amount = _staking[user];\n', '        stakingBlock = _block[user];\n', '    }\n', '    \n', '    function totalStaked() external view override returns(uint256){\n', '        return _totalStaked;\n', '    }\n', '    //shows if a user is black listed or not\n', '    function showBlackUser(address user) external view override returns(bool){\n', '        require(_allowence[msg.sender]);\n', '        return _blackListed[user];\n', '    }\n', '    \n', '    //shows if a user has allowance or not\n', '    function allowance(address user) external view override returns(bool){\n', '        require(_allowence[msg.sender]);\n', '        return _allowence[user];\n', '    }\n', '    \n', '    //======================================================================================================================================================\n', '    \n', '    function transferOwnership(address to) external override {\n', '        require(_owner == msg.sender);\n', '        _owner = to;\n', '    }\n', '    \n', '    function giveAllowence(address user) external override {\n', '        require(msg.sender == _owner);\n', '        _allowence[user] = true;\n', '    }\n', '    \n', '    function removeAllowence(address user) external override {\n', '        require(msg.sender == _owner);\n', '        _allowence[user] = false;\n', '    }  \n', '    \n', '    function addToBlackList(address user) external override {\n', '        require(_owner == msg.sender);\n', '        _blackListed[user] = true;\n', '    }\n', '\n', '    function removeFromBlackList(address user) external override {\n', '        require(_owner == msg.sender);\n', '        _blackListed[user] = false;\n', '    }    \n', '    \n', '    function stakeMCH(uint256 amount) external override {\n', '        MCH.transferFrom(msg.sender, address(this), amount);\n', '            \n', '        if(address(MCF) != address(0)){MCF.claimRewards(msg.sender);}\n', '        _staking[msg.sender] += amount;\n', '        _block[msg.sender] = block.number;\n', '        _totalStaked += amount;\n', '        emit Stake(msg.sender, amount);\n', '    }\n', '    \n', '    function unstake(address user, uint256 amount) external override {\n', '        require(_allowence[msg.sender]);\n', '        _staking[user] -= amount;\n', '        _block[user] = block.number;\n', '        _totalStaked -= amount;\n', '    }\n', '    \n', '    function refreshBlock(address user) external override {\n', '        require(_allowence[msg.sender]);\n', '        _block[user] = block.number;\n', '    }\n', '    \n', '    function setData(address user, uint256 staked, uint256 stakingBlock, uint256 stakedMCH) external override {\n', '        require(_allowence[msg.sender]);\n', '        _staking[user] = staked;\n', '        _block[user] = stakingBlock;\n', '        _totalStaked = stakedMCH;\n', '        \n', '    }\n', '    \n', '    function transferMCH(address to, uint256 amount) external override {\n', '        require(_allowence[msg.sender]);\n', '        require(MCH.balanceOf(address(this)) - _totalStaked >= amount);\n', '        MCH.transfer(to, amount);\n', '    }\n', '    \n', '    function emergencyWithdraw(uint256 amount) external override {\n', '        require(msg.sender == _owner);\n', '        MCH.transfer(_owner, amount);\n', '    }\n', '}']