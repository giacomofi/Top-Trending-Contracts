['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '//SPDX-License-Identifier: MIT\n', '\n', '// import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4-solc-0.7/contracts/access/Ownable.sol";\n', '// import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4-solc-0.7/contracts/token/ERC20/IERC20.sol";\n', '// import "github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4-solc-0.7/contracts/token/ERC20/SafeERC20.sol";\n', '\n', '//OZ libraries:\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// === end of libs ===\n', '\n', '// NOTE for those re-using this contract code. If your token has implemented "emergency admin method" or similar,\n', '//  that token can be withdrawn from this staking contract. Also please note that pausable tokens have impact\n', '//  on operationability of staking.\n', '\n', 'contract Staking is Ownable {\n', '    \n', '    /*\n', '     * Event fired when administrator withdraws tokens from reserve. \n', '     */\n', '    event AdminWithdrawn(uint256 amount);\n', '    \n', '    /*\n', '     * Event fired when indexes of stakes are re-organised for given user. Any caching mechanism that would cache\n', '     *  methods that use stake id for this user must be invalidated.\n', '     */\n', '    event StakeReorg(address indexed user);\n', '    \n', '    /*\n', '     * Signalizes start of staking for given user, selected plan ID and amount of staked tokens. \n', '     */\n', '    event StakeCreated(address indexed user, uint256 indexed stakeId, uint256 stakeAmount);\n', '\n', '    /*\n', '     * Struct describing ongoing stake\n', '     */\n', '    struct Stake{\n', '        uint256 unlockTime;\n', '        uint256 stakeAmount;\n', '        uint256 stakeReward;\n', '        uint256 stakePlan;\n', '    }\n', '\n', '    /*\n', '     * Struct describing stake plan.\n', '     */\n', '    struct StakePlan{\n', '        // WEI of profit per TOKEN assumed 10 ** 18. This code is prepared to work for ID tokens,\n', '        //  thus only tokens which have 18 decimals are supported.\n', '        uint256 rewardPerToken;\n', '        uint256 planTimeSeconds;\n', '        bool enabled;\n', '    }\n', '\n', '    IERC20 private _token;\n', '    uint256 private _lockedTokens;\n', '    \n', '    mapping (address => Stake[]) private _stakes;\n', '    StakePlan[] private _plans;\n', '\n', '    constructor(IERC20 token) {\n', '        _token = token;\n', '        _lockedTokens = 0;\n', '    }\n', '    \n', '    /*\n', '     * Checks if plan of index planId exists.\n', '     */\n', '    function planExists(uint256 planId) public view returns (bool) {\n', '        return _plans.length > planId;\n', '    }\n', '    \n', '    /*\n', '     * Checks if user can currently create stake with this plan id.\n', "     *  does not check availability of tokens for plan realisation - it's checked in stake method.\n", '     */\n', '    function planAvailable(uint256 planId) public view returns (bool) {\n', '        return planExists(planId) && _plans[planId].enabled;\n', '    }\n', '    \n', '    /*\n', '     * Anwsers how much profit will be available after staking period is over. Does not include "base" stake amount\n', '     */\n', '    function getPlanProfit(uint256 planId, uint256 stakeSizeWei) public view returns (uint256) {\n', '        require(planAvailable(planId), "Plan is unavailable");\n', '        \n', '        return (stakeSizeWei * _plans[planId].rewardPerToken) / 10 ** 18;\n', '    }\n', '    \n', '    /*\n', "     * Locks up user's funds in contract for period of time specified by plan.\n", '     *  after period of time user can call withdrawAllAvailable method to withdraw all available for withdrawal stakes.\n', '     */\n', '    function stake(uint256 amount, uint256 planId) public {\n', '        require(planAvailable(planId), "Plan is not available");\n', '        \n', '        uint256 profit = getPlanProfit(planId, amount);\n', '\n', '        require(profit > 0, "Stake is too low to gain any profit. Refusing the stake.");\n', '        require(_lockedTokens + profit <= _token.balanceOf(address(this)), "Guarantee reserve currently dry, cannot on-chain guarantee profit.");\n', '        SafeERC20.safeTransferFrom(_token, msg.sender, address(this), amount);\n', '\n', '        _lockedTokens += amount;\n', '        _lockedTokens += profit;\n', '        \n', '        _stakes[msg.sender].push(\n', '            Stake(\n', '                block.timestamp + _plans[planId].planTimeSeconds,\n', '                amount,\n', '                profit,\n', '                planId\n', '            )\n', '        );\n', '        emit StakeCreated(msg.sender, planId, amount);\n', '    }\n', '    \n', '    /*\n', '     * Checks if provided address can currently withdraw any stake. If this method returns true user can call\n', '     *  withdrawAllAvailable method.\n', '     */\n', '    function canWithdrawAny(address who) public view returns (bool) {\n', '        for(uint256 i; i < _stakes[who].length; i++) {\n', '            if(block.timestamp > _stakes[who][i].unlockTime) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * Finds all stakes available for withdrawal for sender and transfers them with profits to sender.\n', '     */\n', '    function withdrawAllAvailable() public {\n', '        require(canWithdrawAny(msg.sender), "No stakes can be withdrawn at this point...");\n', '        \n', '        bool stakeReorged = false;\n', '        uint256 withdrawalAmount = 0;\n', '        \n', '        uint256 stakesLength = _stakes[msg.sender].length;\n', '        \n', '        for(uint256 i; i < stakesLength; i++) {\n', '            if(block.timestamp > _stakes[msg.sender][i].unlockTime) {\n', '                \n', '                withdrawalAmount += _stakes[msg.sender][i].stakeAmount;\n', '                withdrawalAmount += _stakes[msg.sender][i].stakeReward;\n', '                \n', '                \n', '                //if last element of array\n', '                if(i == stakesLength - 1) {\n', '                    delete _stakes[msg.sender][i];\n', '                } else {\n', '                    _stakes[msg.sender][i] = _stakes[msg.sender][stakesLength - 1];\n', '                    delete _stakes[msg.sender][stakesLength - 1];\n', '                    stakeReorged = true;\n', '                }\n', '                \n', '                _stakes[msg.sender].pop();\n', '                stakesLength--;\n', '            }\n', '        }\n', '        \n', '        if(stakeReorged) {\n', '            emit StakeReorg(msg.sender);\n', '        }\n', '        \n', '        _lockedTokens -= withdrawalAmount;\n', '        SafeERC20.safeTransfer(_token, msg.sender, withdrawalAmount);\n', '    }\n', '    \n', '    /*\n', "     * Returns amount of plans available. Used for iteration over plans to see what's available at the moment.\n", '     */\n', '    function getPlansCount() public view returns (uint256) {\n', '        return _plans.length;\n', '    }\n', '\n', '    /*\n', '     * Returns amount of total stakes of given address.\n', '     */\n', '    function getStakesCount(address who) public view returns (uint256) {\n', '        return _stakes[who].length;\n', '    }\n', '\n', '    /*\n', '     * Returns how much was staked for given address at given index.\n', '     *  Important: do not cache. Indexes can change during withdrawal - in that scenario StakeReorg event is emited.\n', '     *  StakeReorg effectively invalidates any cache mechanism for given address.\n', '     */\n', '    function getStakeAmount(address who, uint256 stakeIndex) public view returns (uint256) {\n', '        require(_stakes[who].length > stakeIndex, "Invalid stake index");\n', '        return _stakes[who][stakeIndex].stakeAmount;\n', '    }\n', '    \n', '    /*\n', '     * Returns unix timestamp when stake on given index is ready to be withdrawn.\n', '     *  Important: do not cache. Indexes can change during withdrawal - in that scenario StakeReorg event is emited.\n', '     *  StakeReorg effectively invalidates any cache mechanism for given address.\n', '     */\n', '    function getStakeUnlockTimestamp(address who, uint256 stakeIndex) public view returns (uint256) {\n', '    \n', '        require(_stakes[who].length > stakeIndex, "Invalid stake index");\n', '        return _stakes[who][stakeIndex].unlockTime;\n', '    }\n', '    \n', '    /*\n', '     * Returns amount of reward that will be collected by given user on given index.\n', '     *  Important: do not cache. Indexes can change during withdrawal - in that scenario StakeReorg event is emited.\n', '     *  StakeReorg effectively invalidates any cache mechanism for given address.\n', '     */\n', '    function getStakeReward(address who, uint256 stakeIndex) public view returns (uint256) {\n', '        require(_stakes[who].length > stakeIndex, "Invalid stake index");\n', '        return _stakes[who][stakeIndex].stakeReward;\n', '    }\n', '\n', '    /*\n', '     * Returns plan ID of stake used. Note that this plan may be not available anymore.\n', '     *  Important: do not cache. Indexes can change during withdrawal - in that scenario StakeReorg event is emited.\n', '     *  StakeReorg effectively invalidates any cache mechanism for given address.\n', '     */\n', '    function getStakePlan(address who, uint256 stakeIndex) public view returns (uint256) {\n', '        require(_stakes[who].length > stakeIndex, "Invalid stake index");\n', '        return _stakes[who][stakeIndex].stakePlan;\n', '    }\n', '\n', '    /*\n', '     * Returns unix timestamp of when stake was registered.\n', '     *  Important: do not cache. Indexes can change during withdrawal - in that scenario StakeReorg event is emited.\n', '     *  StakeReorg effectively invalidates any cache mechanism for given address.\n', '     */\n', '    function getStakeStartedTimestamp(address who, uint256 stakeIndex) public view returns (uint256) {\n', '        require(_stakes[who].length > stakeIndex, "Invalid stake index");\n', '        return _stakes[who][stakeIndex].unlockTime - _plans[_stakes[who][stakeIndex].stakePlan].planTimeSeconds;\n', '    }\n', '\n', '    /*\n', '     * Returns how much admin can safely withdraw. \n', '     */\n', '    function getAdminWithdrawable() public view returns (uint256) {\n', '        // if code reused for token other than ID, could be bad token that implements "emergency admin method" that will withdraw from any account\n', '        require(_token.balanceOf(address(this)) >= _lockedTokens, "Critical bug in code or bad ERC token! Do not withdraw and resupply reserve ASAP!");\n', '        return _token.balanceOf(address(this)) - _lockedTokens;\n', '    }\n', '\n', '    /*\n', '     * Withdraws available tokens (cannot withdraw guarantee reserve for already ongoing stakes) from reserve\n', '     *  Supplying 0 as amount withdraws all available tokens\n', '     *  Owner only.\n', '     */\n', '    function adminWithdraw(uint256 amount) public onlyOwner {\n', '        if(amount == 0) {\n', '            amount = getAdminWithdrawable();\n', '        } else {\n', '            require(getAdminWithdrawable() >= amount, "Not enough tokens to withdraw");\n', '        }\n', '        require(amount > 0, "No tokens to withdraw");\n', '        emit AdminWithdrawn(amount);\n', '        SafeERC20.safeTransfer(_token, msg.sender, amount);\n', '    }\n', '\n', '    /*\n', '     * Adds available plan for staking. Owner only.\n', '     */\n', '    function addPlan(uint256 rewardsForPlan, uint256 planTimeSeconds) public onlyOwner {\n', '        require(rewardsForPlan > 0, "Plan will never be profitable");\n', '        require(planTimeSeconds > 0, "Plan will finish instantly");\n', '        _plans.push(StakePlan(rewardsForPlan, planTimeSeconds, false));\n', '    }\n', '\n', '    /*\n', "     * Enables or disables plan of given index. If it's set to disabled no new stakes can be started with this plan,\n", '     *  Cannot influence already ongoing stakes.\n', '     *  Owner only.\n', '     */\n', '    function setPlanEnabled(uint256 planId, bool newPlanState) public onlyOwner {\n', '        require(planExists(planId), "Plan does not exist");\n', '        _plans[planId].enabled = newPlanState;\n', '    }\n', '}']