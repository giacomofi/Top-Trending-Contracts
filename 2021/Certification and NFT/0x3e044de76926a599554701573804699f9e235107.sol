['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-19\n', '*/\n', '\n', '// SPDX-License-Identifier: https://github.com/lendroidproject/protocol.2.0/blob/master/LICENSE.md\n', '\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/heartbeat/Pacemaker.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/** @title Pacemaker\n', '    @author Lendroid Foundation\n', '    @notice Smart contract based on which various events in the Protocol take place\n', '    @dev Audit certificate : https://certificate.quantstamp.com/view/lendroid-whalestreet\n', '*/\n', '\n', '\n', '// solhint-disable-next-line\n', 'abstract contract Pacemaker {\n', '\n', '    using SafeMath for uint256;\n', '    uint256 constant public HEART_BEAT_START_TIME = 1607212800;// 2020-12-06 00:00:00 UTC (UTC +00:00)\n', '    uint256 constant public EPOCH_PERIOD = 8 hours;\n', '\n', '    /**\n', '        @notice Displays the epoch which contains the given timestamp\n', '        @return uint256 : Epoch value\n', '    */\n', '    function epochFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp > HEART_BEAT_START_TIME) {\n', '            return timestamp.sub(HEART_BEAT_START_TIME).div(EPOCH_PERIOD).add(1);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '        @notice Displays timestamp when a given epoch began\n', '        @return uint256 : Epoch start time\n', '    */\n', '    function epochStartTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp <= HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME;\n', '        } else {\n', '            return HEART_BEAT_START_TIME.add((epochFromTimestamp(timestamp).sub(1)).mul(EPOCH_PERIOD));\n', '        }\n', '    }\n', '\n', '    /**\n', '        @notice Displays timestamp when a given epoch will end\n', '        @return uint256 : Epoch end time\n', '    */\n', '    function epochEndTimeFromTimestamp(uint256 timestamp) public pure returns (uint256) {\n', '        if (timestamp < HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME;\n', '        } else if (timestamp == HEART_BEAT_START_TIME) {\n', '            return HEART_BEAT_START_TIME.add(EPOCH_PERIOD);\n', '        } else {\n', '            return epochStartTimeFromTimestamp(timestamp).add(EPOCH_PERIOD);\n', '        }\n', '    }\n', '\n', '    /**\n', '        @notice Calculates current epoch value from the block timestamp\n', "        @dev Calculates the nth 8-hour window frame since the heartbeat's start time\n", '        @return uint256 : Current epoch value\n', '    */\n', '    function currentEpoch() public view returns (uint256) {\n', '        return epochFromTimestamp(block.timestamp);// solhint-disable-line not-rely-on-time\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/farming/LPTokenWrapper.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', '/** @title LPTokenWrapper\n', '    @author Lendroid Foundation\n', '    @notice Tracks the state of the LP Token staked / unstaked both in total\n', '        and on a per account basis.\n', '    @dev Audit certificate : https://certificate.quantstamp.com/view/lendroid-whalestreet\n', '*/\n', '\n', '\n', '// solhint-disable-next-line\n', 'abstract contract LPTokenWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    IERC20 public lpToken;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /**\n', '        @notice Registers the LP Token address\n', '        @param lpTokenAddress : address of the LP Token\n', '    */\n', '    // solhint-disable-next-line func-visibility\n', '    constructor(address lpTokenAddress) {\n', '        require(lpTokenAddress.isContract(), "invalid lpTokenAddress");\n', '        lpToken = IERC20(lpTokenAddress);\n', '    }\n', '\n', '    /**\n', '        @notice Displays the total LP Token staked\n', '        @return uint256 : value of the _totalSupply which stores total LP Tokens staked\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '        @notice Displays LP Token staked per account\n', '        @param account : address of a user account\n', '        @return uint256 : total LP staked by given account address\n', '    */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '        @notice Stake / Deposit LP Token into the Pool\n', '        @dev : Increases count of total LP Token staked.\n', '               Increases count of LP Token staked for the msg.sender.\n', '               LP Token is transferred from msg.sender to the Pool.\n', '        @param amount : Amount of LP Token to stake\n', '    */\n', '    function stake(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        lpToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    /**\n', '        @notice Unstake / Withdraw staked LP Token from the Pool\n', '        @dev : Decreases count of total LP Token staked\n', '               Decreases count of LP Token staked for the msg.sender\n', '               LP Token is transferred from the Pool to the msg.sender\n', '        @param amount : Amount of LP Token to withdraw / unstake\n', '    */\n', '    function unstake(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        lpToken.safeTransfer(msg.sender, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/farming/BasePool.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '\n', '\n', '/** @title BasePool\n', '    @author Lendroid Foundation\n', '    @notice Inherits the LPTokenWrapper contract, performs additional functions\n', '        on the stake and unstake functions, and includes logic to calculate and\n', '        withdraw rewards.\n', '        This contract is inherited by all Pool contracts.\n', '    @dev Audit certificate : https://certificate.quantstamp.com/view/lendroid-whalestreet\n', '*/\n', '\n', '\n', '// solhint-disable-next-line\n', 'abstract contract BasePool is LPTokenWrapper, Pacemaker {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    string public poolName;\n', '    IERC20 public rewardToken;\n', '\n', '    uint256 public lastUpdateTime;\n', '    uint256 public cachedRewardPerStake;\n', '\n', '    mapping(address => uint256) public userRewardPerStakePaid;\n', '    mapping(address => uint256) public lastEpochStaked;\n', '    mapping(address => uint256) public rewards;\n', '\n', '    uint256 public startTime = HEART_BEAT_START_TIME;// 2020-12-04 00:00:00 (UTC UTC +00:00)\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Unstaked(address indexed user, uint256 amount);\n', '    event RewardClaimed(address indexed user, uint256 reward);\n', '\n', '    /**\n', '        @notice Registers the Pool name, Reward Token address, and LP Token address.\n', '        @param name : Name of the Pool\n', '        @param rewardTokenAddress : address of the Reward Token\n', '        @param lpTokenAddress : address of the LP Token\n', '    */\n', '    // solhint-disable-next-line func-visibility\n', '    constructor(string memory name, address rewardTokenAddress, address lpTokenAddress) LPTokenWrapper(lpTokenAddress) {\n', '        require(rewardTokenAddress.isContract(), "invalid rewardTokenAddress");\n', '        rewardToken = IERC20(rewardTokenAddress);\n', "        // It's OK for the pool name to be empty.\n", '        poolName = name;\n', '    }\n', '\n', '    /**\n', '        @notice modifier to check if the startTime has been reached\n', '        @dev Pacemaker.currentEpoch() returns values > 0 only from\n', '            HEART_BEAT_START_TIME+1. Therefore, staking is possible only from\n', '            epoch 1\n', '    */\n', '    modifier checkStart() {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp > startTime, "startTime has not been reached");\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @notice Unstake the staked LP Token and claim corresponding earnings from the Pool\n', '        @dev : Perform actions from unstake()\n', '               Perform actions from claim()\n', '    */\n', '    function unstakeAndClaim() external updateRewards(msg.sender) checkStart {\n', '        unstake(balanceOf(msg.sender));\n', '        claim();\n', '    }\n', '\n', '    /**\n', '        @notice Displays reward tokens per Lp token staked. Useful to display APY on the frontend\n', '    */\n', '    function rewardPerStake() public view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return cachedRewardPerStake;\n', '        }\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return cachedRewardPerStake.add(block.timestamp.sub(lastUpdateTime).mul(\n', '                rewardRate(currentEpoch())).mul(1e18).div(totalSupply())\n', '            );\n', '    }\n', '\n', '    /**\n', '        @notice Displays earnings of an address so far. Useful to display claimable rewards on the frontend\n', '        @param account : the given user address\n', '        @return earnings of given address\n', '    */\n', '    function earned(address account) public view returns (uint256) {\n', '        return balanceOf(account).mul(rewardPerStake().sub(\n', '            userRewardPerStakePaid[account])).div(1e18).add(rewards[account]);\n', '    }\n', '\n', '    /**\n', '        @notice modifier to update system and user info whenever a user makes a\n', '            function call to stake, unstake, claim or unstakeAndClaim.\n', '        @dev Updates rewardPerStake and time when system is updated\n', '            Recalculates user rewards\n', '    */\n', '    modifier updateRewards(address account) {\n', '        cachedRewardPerStake = rewardPerStake();\n', '        lastUpdateTime = block.timestamp;// solhint-disable-line not-rely-on-time\n', '        rewards[account] = earned(account);\n', '        userRewardPerStakePaid[account] = cachedRewardPerStake;\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @notice Displays reward tokens per second for a given epoch. This\n', '        function is implemented in contracts that inherit this contract.\n', '    */\n', '    function rewardRate(uint256 epoch) public pure virtual returns (uint256);\n', '\n', '    /**\n', '        @notice Stake / Deposit LP Token into the Pool.\n', '        @dev Increases count of total LP Token staked in the current epoch.\n', '             Increases count of LP Token staked for the caller in the current epoch.\n', '             Register that caller last staked in the current epoch.\n', '             Perform actions from BasePool.stake().\n', '        @param amount : Amount of LP Token to stake\n', '    */\n', '    function stake(uint256 amount) public checkStart updateRewards(msg.sender) override {\n', '        require(amount > 0, "Cannot stake 0");\n', '        lastEpochStaked[msg.sender] = currentEpoch();\n', '        super.stake(amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '        @notice Unstake / Withdraw staked LP Token from the Pool\n', '        @inheritdoc LPTokenWrapper\n', '    */\n', '    function unstake(uint256 amount) public checkStart updateRewards(msg.sender) override {\n', '        require(amount > 0, "Cannot unstake 0");\n', '        require(lastEpochStaked[msg.sender] < currentEpoch(), "Cannot unstake in staked epoch.");\n', '        super.unstake(amount);\n', '        emit Unstaked(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '        @notice Transfers earnings from previous epochs to the caller\n', '    */\n', '    function claim() public checkStart updateRewards(msg.sender) {\n', '        require(rewards[msg.sender] > 0, "No rewards to claim");\n', '        uint256 rewardsEarned = rewards[msg.sender];\n', '        rewards[msg.sender] = 0;\n', '        rewardToken.safeTransfer(msg.sender, rewardsEarned);\n', '        emit RewardClaimed(msg.sender, rewardsEarned);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/farming/B20ETHUNIV2B20Pool.sol\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', '/** @title UNIV2SHRIMPPool\n', '    @author Lendroid Foundation\n', '    @notice Inherits the BasePool contract, and contains reward distribution\n', '        logic for the B20 token.\n', '*/\n', '\n', '\n', '// solhint-disable-next-line\n', 'contract B20ETHUNIV2B20Pool is BasePool {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '        @notice Registers the Pool name as B20ETHUNIV2B20Pool as Pool name,\n', '                B20-WETH-UNIV2 as the LP Token, and\n', '                B20 as the Reward Token.\n', '        @param rewardTokenAddress : B20 Token address\n', '        @param lpTokenAddress : B20-WETH-UNIV2 Token address\n', '    */\n', '    // solhint-disable-next-line func-visibility\n', '    constructor(address rewardTokenAddress, address lpTokenAddress) BasePool("B20ETHUNIV2B20Pool",\n', '        rewardTokenAddress, lpTokenAddress) {}// solhint-disable-line no-empty-blocks\n', '\n', '    /**\n', '        @notice Displays total B20 rewards distributed per second in a given epoch.\n', '        @dev Series 1 :\n', '                Epochs : 162-254\n', '                Total B20 distributed : 32,812.50\n', '                Distribution duration : 31 days and 8 hours (Jan 28:16:00 to Feb 29 59:59:59 GMT)\n', '            Series 2 :\n', '                Epochs : 255-347\n', '                Total B20 distributed : 18,750\n', '                Distribution duration : 31 days (Mar 1 00:00:00 GMT to Mar 31 59:59:59 GMT)\n', '            Series 3 :\n', '                Epochs : 348-437\n', '                Total B20 distributed : 14,062.50\n', '                Distribution duration : 30 days (Apr 1 00:00:00 GMT to Apr 30 59:59:59 GMT)\n', '            Series 4 :\n', '                Epochs : 438-530\n', '                Total B20 distributed : 9,375\n', '                Distribution duration : 31 days (May 1 00:00:00 GMT to May 31 59:59:59 GMT)\n', '            Series 5 :\n', '                Epochs : 531-620\n', '                Total B20 distributed : 9,375\n', '                Distribution duration : 30 days (Jun 1 00:00:00 GMT to Jun 30 59:59:59 GMT)\n', '            Series 6 :\n', '                Epochs : 621-713\n', '                Total B20 distributed : 9,375\n', '                Distribution duration : 31 days (Jul 1 00:00:00 GMT to Jul 31 59:59:59 GMT)\n', '        @param epoch : 8-hour window number\n', '        @return B20 Tokens distributed per second during the given epoch\n', '    */\n', '    function rewardRate(uint256 epoch) public pure override returns (uint256) {\n', '        uint256 seriesRewards = 0;\n', '        require(epoch > 0, "epoch cannot be 0");\n', '        if (epoch > 161 && epoch <= 254) {\n', '            seriesRewards = 328125;// 32,812.50\n', '            return seriesRewards.mul(1e17).div(752 hours);\n', '        } else if (epoch > 254 && epoch <= 347) {\n', '            seriesRewards = 18750;// 10.8 M\n', '            return seriesRewards.mul(1e18).div(31 days);\n', '        } else if (epoch > 347 && epoch <= 437) {\n', '            seriesRewards = 140625;// 14,062.50\n', '            return seriesRewards.mul(1e17).div(30 days);\n', '        } else if (epoch > 437 && epoch <= 530) {\n', '            seriesRewards = 9375;// 9,375\n', '            return seriesRewards.mul(1e18).div(31 days);\n', '        } else if (epoch > 530 && epoch <= 620) {\n', '            seriesRewards = 9375;// 9,375\n', '            return seriesRewards.mul(1e18).div(30 days);\n', '        } else if (epoch > 620 && epoch <= 713) {\n', '            seriesRewards = 9375;// 9,375\n', '            return seriesRewards.mul(1e18).div(31 days);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '}']