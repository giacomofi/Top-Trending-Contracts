['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./IERC20.sol";\n', 'import "./SafeMath.sol";\n', 'import "./ReentrancyGuard.sol";\n', 'import "./CTokenInterface.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./EIP20NonStandardInterface.sol";\n', '\n', '\n', 'contract Staking is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\n', '\n', '    // timestamp for the epoch 1\n', "    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\n", '    uint256 public epoch1Start;\n', '\n', '    // duration of each epoch\n', '    uint256 public epochDuration;\n', '\n', '    // holds the current balance of the user for each token\n', '    mapping(address => mapping(address => uint256)) private balances;\n', '    mapping(address => uint256) public stableCoinBalances;\n', '    \n', '    address constant public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address constant public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address constant public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address constant public wbtcSwappLP = 0x5548F847Fd9a1D3487d5fbB2E8d73972803c4Cce;\n', '    \n', '    address constant public cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\n', '    address constant public cUsdt = 0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9;\n', '    address constant public cDai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n', '    \n', '    // address to pay interest from Ð¡ompound\n', '    address payable constant TEAM_ADDRESS = 0xde121Cc755c1D1786Dd46FfF7e373e9372FD79D8;\n', '\n', '    struct Pool {\n', '        uint256 size;\n', '        bool set;\n', '    }\n', '\n', '    // for each token, we store the total pool size\n', '    mapping(address => mapping(uint256 => Pool)) private poolSize;\n', '\n', '    // a checkpoint of the valid balance of a user for an epoch\n', '    struct Checkpoint {\n', '        uint128 epochId;\n', '        uint128 multiplier;\n', '        uint256 startBalance;\n', '        uint256 newDeposits;\n', '    }\n', '\n', '    // balanceCheckpoints[user][token][]\n', '    mapping(address => mapping(address => Checkpoint[])) private balanceCheckpoints;\n', '\n', '    mapping(address => uint128) private lastWithdrawEpochId;\n', '\n', '\n', '    //referrals\n', '    uint256 public firstReferrerRewardPercentage;\n', '    uint256 public secondReferrerRewardPercentage;\n', '\n', '    struct Referrer {\n', '        // uint256 totalReward;\n', '        uint256 referralsCount;\n', '        mapping(uint256 => address) referrals;\n', '    }\n', '\n', '    // staker to referrer\n', '    mapping(address => address) public referrals;\n', '    // referrer data\n', '    mapping(address => Referrer) public referrers;\n', '\n', '    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount);\n', '    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount);\n', '    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\n', '    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\n', '    event RegisteredReferer(address referral, address referrer);\n', '    \n', '    event GetInterest(address indexed token, uint256 amount);\n', '    event CheckInterest(uint256 cBalance, uint256 uBalance, uint256 interest);\n', '\n', '    address public _owner;\n', '\n', '    constructor () {\n', '        epoch1Start = 1624230000;\n', '        epochDuration = 2419200; // 28 days\n', '\n', '        _owner = msg.sender;\n', '\n', '        firstReferrerRewardPercentage = 1000;\n', '        secondReferrerRewardPercentage = 500;\n', '    }\n', '\n', '    function checkStableCoin(address token) public pure returns (bool) {\n', '        if (token == usdc ||\n', '            token == usdt ||\n', '            token == dai\n', '        ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\n', '     */\n', '    function deposit(address tokenAddress, uint256 amount, address referrer) public nonReentrant {\n', '        require(amount > 0, "Staking: Amount must be > 0");\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '\n', '        require(IERC20(tokenAddress).allowance(msg.sender, address(this)) >= amount, "Staking: Token allowance too small");\n', '        \n', '        if (isStableCoin) {\n', '            stableCoinBalances[tokenAddress] = stableCoinBalances[tokenAddress].add(amount);\n', '            if (tokenAddress == usdt) {\n', '                EIP20NonStandardInterface token = EIP20NonStandardInterface(tokenAddress);\n', '                token.transferFrom(msg.sender, address(this), amount);\n', '            } else {\n', '                IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n', '            }\n', '            _transferToCompound(tokenAddress, amount);\n', '        } else {\n', '            IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n', '        }\n', '\n', '        if (referrer != address(0)) {\n', '            processReferrals(referrer);\n', '        }\n', '\n', '        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\n', '\n', '        // epoch logic\n', '        uint128 currentEpoch = getCurrentEpoch();\n', '        uint128 currentMultiplier = currentEpochMultiplier();\n', '\n', '        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\n', '            address[] memory tokens = new address[](1);\n', '            tokens[0] = tokenAddress;\n', '            manualEpochInit(tokens, currentEpoch);\n', '        }\n', '\n', '        // update the next epoch pool size\n', '        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\n', '        if (isStableCoin) {\n', '            pNextEpoch.size = stableCoinBalances[tokenAddress];\n', '        } else {\n', '            pNextEpoch.size = IERC20(tokenAddress).balanceOf(address(this));\n', '        }\n', '        pNextEpoch.set = true;\n', '\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\n', '\n', '        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\n', '\n', "        // if there's no checkpoint yet, it means the user didn't have any activity\n", '        // we want to store checkpoints both for the current epoch and next epoch because\n', '        // if a user does a withdraw, the current epoch can also be modified and\n', "        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\n", '        if (checkpoints.length == 0) {\n', '            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\n', '\n', '            // next epoch => multiplier is 1, epoch deposits is 0\n', '            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\n', '        } else {\n', '            uint256 last = checkpoints.length - 1;\n', '\n', '            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\n', '            if (checkpoints[last].epochId < currentEpoch) {\n', '                uint128 multiplier = computeNewMultiplier(\n', '                    getCheckpointBalance(checkpoints[last]),\n', '                    BASE_MULTIPLIER,\n', '                    amount,\n', '                    currentMultiplier\n', '                );\n', '                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\n', '                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n', '            }\n', '            // the last action happened in the previous epoch\n', '            else if (checkpoints[last].epochId == currentEpoch) {\n', '                checkpoints[last].multiplier = computeNewMultiplier(\n', '                    getCheckpointBalance(checkpoints[last]),\n', '                    checkpoints[last].multiplier,\n', '                    amount,\n', '                    currentMultiplier\n', '                );\n', '                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\n', '\n', '                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n', '            }\n', '            // the last action happened in the current epoch\n', '            else {\n', '                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\n', '                    checkpoints[last - 1].multiplier = computeNewMultiplier(\n', '                        getCheckpointBalance(checkpoints[last - 1]),\n', '                        checkpoints[last - 1].multiplier,\n', '                        amount,\n', '                        currentMultiplier\n', '                    );\n', '                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\n', '                }\n', '\n', '                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n', '            }\n', '        }\n', '\n', '        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\n', '\n', '        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\n', '\n', '        emit Deposit(msg.sender, tokenAddress, amount);\n', '    }\n', '\n', '    // must be in bases point ( 1,5% = 150 bp)\n', '    function updateReferrersPercentage(uint256 first, uint256 second) external {\n', '        require(msg.sender == _owner, "Only owner can perfrom this action");\n', '        firstReferrerRewardPercentage = first;\n', '        secondReferrerRewardPercentage = second;\n', '    }\n', '\n', '    function processReferrals(address referrer) internal {\n', '        //Return if sender has referrer alredy or referrer is contract or self ref\n', '        if (hasReferrer(msg.sender) || !notContract(referrer) || referrer == msg.sender) {\n', '            return;\n', '        }\n', '\n', '        //check cross refs \n', '        if (referrals[referrer] == msg.sender || referrals[referrals[referrer]] == msg.sender) {\n', '            return;\n', '        }\n', '        \n', '        //check if already has stake, do not add referrer if has\n', '        if (balanceOf(msg.sender, usdc) > 0 || balanceOf(msg.sender, usdt) > 0 || balanceOf(msg.sender, dai) > 0 || balanceOf(msg.sender, wbtcSwappLP) > 0) {\n', '            return;\n', '        }\n', '\n', '        referrals[msg.sender] = referrer;\n', '\n', '        Referrer storage refData = referrers[referrer];\n', '\n', '        refData.referralsCount = refData.referralsCount.add(1);\n', '        refData.referrals[refData.referralsCount] = msg.sender;\n', '        emit RegisteredReferer(msg.sender, referrer);\n', '    }\n', '\n', '    function hasReferrer(address addr) public view returns(bool) {\n', '        return referrals[addr] != address(0);\n', '    }\n', '\n', '    function getReferralById(address referrer, uint256 id) public view returns (address) {\n', '        return referrers[referrer].referrals[id];\n', '    }\n', '    \n', '    function _transferToCompound(address tokenAddress, uint256 amount) internal {\n', '        address cToken = _getCompoundToken(tokenAddress);\n', '        IERC20(tokenAddress).safeApprove(cToken, amount);\n', '        CTokenInterface(cToken).mint(amount);\n', '    }\n', '    \n', '    function _redeemFromCompound(address tokenAddress, uint256 amount) internal {\n', '        address cToken = _getCompoundToken(tokenAddress);\n', '        CTokenInterface(cToken).redeemUnderlying(amount);\n', '    }\n', '    \n', '    function _getCompoundToken(address tokenAddress) internal pure returns (address cToken) {\n', '        if (tokenAddress == usdc) {\n', '            return cUsdc;\n', '        }\n', '        if (tokenAddress == usdt) {\n', '            return cUsdt;\n', '        }\n', '        if (tokenAddress == dai) {\n', '            return cDai;\n', '        }\n', '    }\n', '    \n', '    function checkInterestFromCompound(address tokenAddress) external returns (uint256 interest){\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '        require(isStableCoin, "Wrong token address");\n', '        \n', '        address cToken = _getCompoundToken(tokenAddress);\n', '        uint256 cTBalance = CTokenInterface(cToken).balanceOf(address(this));\n', '        if (cTBalance == 0) {\n', '            emit CheckInterest(cTBalance, 0, 0);\n', '            return 0;\n', '        }\n', '        \n', '        uint256 cBalance = CTokenInterface(cToken).balanceOfUnderlying(address(this));\n', '        uint256 balance = stableCoinBalances[tokenAddress];\n', '        if (balance >= cBalance) {\n', '            emit CheckInterest(cBalance, balance, 0);\n', '            return 0;\n', '        }\n', '        \n', '        uint256 _interest = cBalance.sub(balance);\n', '        emit CheckInterest(cBalance, balance, _interest);\n', '        return _interest;\n', '    }\n', '    \n', '    //Get 80% of interest from Compound\n', '    function getInterestFromCompound(address tokenAddress) external nonReentrant{\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '        require(isStableCoin, "Wrong token address");\n', '        \n', '        address cToken = _getCompoundToken(tokenAddress);\n', '        uint256 cTBalance = CTokenInterface(cToken).balanceOf(address(this));\n', '        require(cTBalance > 0, "There is no interest to withdraw");\n', '\n', '        uint256 cBalance = CTokenInterface(cToken).balanceOfUnderlying(address(this));\n', '        uint256 balance = stableCoinBalances[tokenAddress];\n', '        require(cBalance > balance, "There is no interest to withdraw");\n', '\n', '        uint256 interest = cBalance.sub(balance).mul(4).div(5);\n', '\n', '        if (interest > 0) {\n', '            CTokenInterface(cToken).redeemUnderlying(interest);\n', '            if (tokenAddress == usdt) {\n', '                EIP20NonStandardInterface(tokenAddress).transfer(TEAM_ADDRESS, interest);\n', '            } else {\n', '                IERC20(tokenAddress).transfer(TEAM_ADDRESS, interest);\n', '            }\n', '            emit GetInterest(tokenAddress, interest);\n', '        }\n', '    }\n', '    \n', '     //Get 100% of interest from Compound, recommended only after all users withdrawn their tokens\n', '    function getInterest(address tokenAddress) external nonReentrant{\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '        require(isStableCoin, "Wrong token address");\n', '        \n', '        address cToken = _getCompoundToken(tokenAddress);\n', '        uint256 cBalance = CTokenInterface(cToken).balanceOf(address(this));\n', '        require(cBalance > 0, "No funds to withdraw");\n', '        uint256 balance = stableCoinBalances[tokenAddress];\n', '        CTokenInterface(cToken).redeem(cBalance);\n', '        \n', '        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n', '        \n', '        uint256 interest = tokenBalance.sub(balance);\n', '        if (interest > 0) {\n', '            if (tokenAddress == usdt) {\n', '                EIP20NonStandardInterface(tokenAddress).transfer(TEAM_ADDRESS, interest);\n', '            } else {\n', '                IERC20(tokenAddress).transfer(TEAM_ADDRESS, interest);\n', '            }\n', '            emit GetInterest(tokenAddress, interest);\n', '        }\n', '        \n', '        if (balance > 0) {\n', '            IERC20(tokenAddress).safeApprove(cToken, balance);\n', '            CTokenInterface(cToken).mint(balance);\n', '        }\n', '    }\n', '    \n', '    /*\n', '     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\n', '     */\n', '    function withdraw(address tokenAddress, uint256 amount) public nonReentrant {\n', '        require(balances[msg.sender][tokenAddress] >= amount, "Staking: balance too small");\n', '\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '\n', '        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\n', '\n', '        if (isStableCoin) {\n', '            stableCoinBalances[tokenAddress] = stableCoinBalances[tokenAddress].sub(amount);\n', '            _redeemFromCompound(tokenAddress, amount);\n', '            if (tokenAddress == usdt) {\n', '                EIP20NonStandardInterface(tokenAddress).transfer(msg.sender, amount);\n', '            } else {\n', '                IERC20(tokenAddress).transfer(msg.sender, amount);\n', '            }\n', '        } else {\n', '            IERC20(tokenAddress).transfer(msg.sender, amount);\n', '        }\n', '\n', '        // epoch logic\n', '        uint128 currentEpoch = getCurrentEpoch();\n', '\n', '        lastWithdrawEpochId[tokenAddress] = currentEpoch;\n', '\n', '        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\n', '            address[] memory tokens = new address[](1);\n', '            tokens[0] = tokenAddress;\n', '            manualEpochInit(tokens, currentEpoch);\n', '        }\n', '\n', '        // update the pool size of the next epoch to its current balance\n', '        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\n', '        if (isStableCoin) {\n', '            pNextEpoch.size = stableCoinBalances[tokenAddress];\n', '        } else {\n', '            pNextEpoch.size = IERC20(tokenAddress).balanceOf(address(this));\n', '        }\n', '        pNextEpoch.set = true;\n', '\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\n', '        uint256 last = checkpoints.length - 1;\n', '\n', "        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\n", '\n', '        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\n', '        if (checkpoints[last].epochId < currentEpoch) {\n', '            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n', '\n', '            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\n', '        }\n', '        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\n', '        else if (checkpoints[last].epochId == currentEpoch) {\n', '            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n', '            checkpoints[last].newDeposits = 0;\n', '            checkpoints[last].multiplier = BASE_MULTIPLIER;\n', '\n', '            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\n', '        }\n', '        // there was a deposit in the current epoch\n', '        else {\n', '            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\n', '\n', '            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n', '\n', '            // in case of withdraw, we have 2 branches:\n', '            // 1. the user withdraws less than he added in the current epoch\n', '            // 2. the user withdraws more than he added in the current epoch (including 0)\n', '            if (amount < currentEpochCheckpoint.newDeposits) {\n', '                uint128 avgDepositMultiplier = uint128(\n', '                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\n', '                );\n', '\n', '                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\n', '\n', '                currentEpochCheckpoint.multiplier = computeNewMultiplier(\n', '                    currentEpochCheckpoint.startBalance,\n', '                    BASE_MULTIPLIER,\n', '                    currentEpochCheckpoint.newDeposits,\n', '                    avgDepositMultiplier\n', '                );\n', '            } else {\n', '                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\n', '                    amount.sub(currentEpochCheckpoint.newDeposits)\n', '                );\n', '                currentEpochCheckpoint.newDeposits = 0;\n', '                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\n', '            }\n', '\n', '            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n', '\n', '            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\n', '\n', '            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n', '        }\n', '\n', '        emit Withdraw(msg.sender, tokenAddress, amount);\n', '    }\n', '\n', '    /*\n', '     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\n', '     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\n', '     * Any deposit and withdraw will automatically initialize the current and next epoch.\n', '     */\n', '    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\n', '        require(epochId <= getCurrentEpoch(), "can\'t init a future epoch");\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            Pool storage p = poolSize[tokens[i]][epochId];\n', '\n', '            if (epochId == 0) {\n', '                p.size = uint256(0);\n', '                p.set = true;\n', '            } else {\n', '                require(!epochIsInitialized(tokens[i], epochId), "Staking: epoch already initialized");\n', '                require(epochIsInitialized(tokens[i], epochId - 1), "Staking: previous epoch not initialized");\n', '\n', '                p.size = poolSize[tokens[i]][epochId - 1].size;\n', '                p.set = true;\n', '            }\n', '        }\n', '\n', '        emit ManualEpochInit(msg.sender, epochId, tokens);\n', '    }\n', '\n', '    function emergencyWithdraw(address tokenAddress) public {\n', '        bool isStableCoin = checkStableCoin(tokenAddress);\n', '        require(!isStableCoin, "Cant withdraw stable coins");\n', '        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, "At least 10 epochs must pass without success");\n', '\n', '        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\n', '        require(totalUserBalance > 0, "Amount must be > 0");\n', '\n', '        balances[msg.sender][tokenAddress] = 0;\n', '\n', '        IERC20 token = IERC20(tokenAddress);\n', '        token.transfer(msg.sender, totalUserBalance);\n', '\n', '        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\n', '    }\n', '\n', '    /*\n', '     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\n', '     * A deposit will only change the next epoch balance.\n', '     * A withdraw will decrease the current epoch (and subsequent) balance.\n', '     */\n', '    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\n', '        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\n', '\n', '        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\n', '        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\n', '            return 0;\n', '        }\n', '\n', '        uint min = 0;\n', '        uint max = checkpoints.length - 1;\n', '\n', '        // shortcut for blocks newer than the latest checkpoint == current balance\n', '        if (epochId >= checkpoints[max].epochId) {\n', '            return getCheckpointEffectiveBalance(checkpoints[max]);\n', '        }\n', '\n', '        // binary search of the value in the array\n', '        while (max > min) {\n', '            uint mid = (max + min + 1) / 2;\n', '            if (checkpoints[mid].epochId <= epochId) {\n', '                min = mid;\n', '            } else {\n', '                max = mid - 1;\n', '            }\n', '        }\n', '\n', '        return getCheckpointEffectiveBalance(checkpoints[min]);\n', '    }\n', '\n', '    /*\n', '     * Returns the amount of `token` that the `user` has currently staked\n', '     */\n', '    function balanceOf(address user, address token) public view returns (uint256) {\n', '        return balances[user][token];\n', '    }\n', '\n', '    /*\n', '     * Returns the id of the current epoch derived from block.timestamp\n', '     */\n', '    function getCurrentEpoch() public view returns (uint128) {\n', '        if (block.timestamp < epoch1Start) {\n', '            return 0;\n', '        }\n', '\n', '        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\n', '    }\n', '\n', '    /*\n', '     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\n', '     */\n', '    function getEpochPoolSize(address tokenAddress, uint128 epochId) public view returns (uint256) {\n', '        // Premises:\n', "        // 1. it's impossible to have gaps of uninitialized epochs\n", '        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\n', '        if (epochIsInitialized(tokenAddress, epochId)) {\n', '            return poolSize[tokenAddress][epochId].size;\n', '        }\n', '\n', '        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\n', '        if (!epochIsInitialized(tokenAddress, 0)) {\n', '            return 0;\n', '        }\n', '\n', '        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\n', '        // which means the current pool size is equal to the current balance of token held by the staking contract\n', '        IERC20 token = IERC20(tokenAddress);\n', '\n', '        if (checkStableCoin(tokenAddress)) {\n', '            return stableCoinBalances[tokenAddress];\n', '        }\n', '\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /*\n', '     * Returns the percentage of time left in the current epoch\n', '     */\n', '    function currentEpochMultiplier() public view returns (uint128) {\n', '        uint128 currentEpoch = getCurrentEpoch();\n', '        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\n', '        uint256 timeLeft = currentEpochEnd - block.timestamp;\n', '        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\n', '\n', '        return multiplier;\n', '    }\n', '\n', '    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\n', '        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\n', '        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\n', '        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\n', '\n', '        return newMultiplier;\n', '    }\n', '\n', '    /*\n', '     * Checks if an epoch is initialized, meaning we have a pool size set for it\n', '     */\n', '    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\n', '        return poolSize[token][epochId].set;\n', '    }\n', '\n', '    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\n', '        return c.startBalance.add(c.newDeposits);\n', '    }\n', '\n', '    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\n', '        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\n', '    }\n', '\n', '    function notContract(address _addr) internal view returns (bool) {\n', '        uint32 size;\n', '        assembly { size := extcodesize(_addr) }\n', '        return (size == 0);\n', '    }\n', '}']