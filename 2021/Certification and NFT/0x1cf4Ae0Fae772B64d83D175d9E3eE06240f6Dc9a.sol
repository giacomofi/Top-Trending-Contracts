['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', '// File: contracts/SmartRoute/intf/IDODOV2Proxy01.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', '\n', '\n', 'interface IDODOV2Proxy01 {\n', '    function dodoSwapV2ETHToToken(\n', '        address toToken,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '    function dodoSwapV2TokenToETH(\n', '        address fromToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external returns (uint256 returnAmount);\n', '\n', '    function dodoSwapV2TokenToToken(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external returns (uint256 returnAmount);\n', '\n', '    function createDODOVendingMachine(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP,\n', '        uint256 deadLine\n', '    ) external payable returns (address newVendingMachine, uint256 shares);\n', '\n', '    function addDVMLiquidity(\n', '        address dvmAddress,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 baseMinAmount,\n', '        uint256 quoteMinAmount,\n', '        uint8 flag, //  0 - ERC20, 1 - baseInETH, 2 - quoteInETH\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 shares,\n', '            uint256 baseAdjustedInAmount,\n', '            uint256 quoteAdjustedInAmount\n', '        );\n', '\n', '    function createDODOPrivatePool(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTwap,\n', '        uint256 deadLine\n', '    ) external payable returns (address newPrivatePool);\n', '\n', '    function resetDODOPrivatePool(\n', '        address dppAddress,\n', '        uint256[] memory paramList,  //0 - newLpFeeRate, 1 - newI, 2 - newK\n', '        uint256[] memory amountList, //0 - baseInAmount, 1 - quoteInAmount, 2 - baseOutAmount, 3 - quoteOutAmount\n', '        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH, 3 - baseOutETH, 4 - quoteOutETH\n', '        uint256 minBaseReserve,\n', '        uint256 minQuoteReserve,\n', '        uint256 deadLine\n', '    ) external payable;\n', '\n', '    function createCrowdPooling(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList,\n', '        bool isOpenTWAP,\n', '        uint256 deadLine\n', '    ) external payable returns (address payable newCrowdPooling);\n', '\n', '    function bid(\n', '        address cpAddress,\n', '        uint256 quoteAmount,\n', '        uint8 flag, // 0 - ERC20, 1 - quoteInETH\n', '        uint256 deadLine\n', '    ) external payable;\n', '\n', '    function addLiquidityToV1(\n', '        address pair,\n', '        uint256 baseAmount,\n', '        uint256 quoteAmount,\n', '        uint256 baseMinShares,\n', '        uint256 quoteMinShares,\n', '        uint8 flag, // 0 erc20 Out  1 baseInETH  2 quoteInETH \n', '        uint256 deadLine\n', '    ) external payable returns(uint256, uint256);\n', '\n', '    function dodoSwapV1(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '    function externalSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        address approveTarget,\n', '        address to,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        bytes memory callDataConcat,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '    function mixSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory mixAdapters,\n', '        address[] memory mixPairs,\n', '        address[] memory assetTo,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IDODOV2.sol\n', '\n', '\n', 'interface IDODOV2 {\n', '\n', '    //========== Common ==================\n', '\n', '    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\n', '\n', '    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\n', '\n', '    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n', '\n', '    function _BASE_TOKEN_() external view returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external view returns (address);\n', '\n', '    function getPMMStateForCall() external view returns (\n', '            uint256 i,\n', '            uint256 K,\n', '            uint256 B,\n', '            uint256 Q,\n', '            uint256 B0,\n', '            uint256 Q0,\n', '            uint256 R\n', '    );\n', '\n', '    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\n', '\n', '    \n', '    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\n', '\n', '    //========== DODOVendingMachine ========\n', '    \n', '    function createDODOVendingMachine(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP\n', '    ) external returns (address newVendingMachine);\n', '    \n', '    function buyShares(address to) external returns (uint256,uint256,uint256);\n', '\n', '\n', '    //========== DODOPrivatePool ===========\n', '\n', '    function createDODOPrivatePool() external returns (address newPrivatePool);\n', '\n', '    function initDODOPrivatePool(\n', '        address dppAddress,\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 k,\n', '        uint256 i,\n', '        bool isOpenTwap\n', '    ) external;\n', '\n', '    function reset(\n', '        address operator,\n', '        uint256 newLpFeeRate,\n', '        uint256 newI,\n', '        uint256 newK,\n', '        uint256 baseOutAmount,\n', '        uint256 quoteOutAmount,\n', '        uint256 minBaseReserve,\n', '        uint256 minQuoteReserve\n', '    ) external returns (bool); \n', '\n', '\n', '    function _OWNER_() external returns (address);\n', '    \n', '    //========== CrowdPooling ===========\n', '\n', '    function createCrowdPooling() external returns (address payable newCrowdPooling);\n', '\n', '    function initCrowdPooling(\n', '        address cpAddress,\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList,\n', '        bool isOpenTWAP\n', '    ) external;\n', '\n', '    function bid(address to) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IDODOV1.sol\n', '\n', '\n', 'interface IDODOV1 {\n', '    function init(\n', '        address owner,\n', '        address supervisor,\n', '        address maintainer,\n', '        address baseToken,\n', '        address quoteToken,\n', '        address oracle,\n', '        uint256 lpFeeRate,\n', '        uint256 mtFeeRate,\n', '        uint256 k,\n', '        uint256 gasPriceLimit\n', '    ) external;\n', '\n', '    function transferOwnership(address newOwner) external;\n', '\n', '    function claimOwnership() external;\n', '\n', '    function sellBaseToken(\n', '        uint256 amount,\n', '        uint256 minReceiveQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function buyBaseToken(\n', '        uint256 amount,\n', '        uint256 maxPayQuote,\n', '        bytes calldata data\n', '    ) external returns (uint256);\n', '\n', '    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\n', '\n', '    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\n', '\n', '    function depositBaseTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawBase(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllBase() external returns (uint256);\n', '\n', '    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\n', '\n', '    function withdrawQuote(uint256 amount) external returns (uint256);\n', '\n', '    function withdrawAllQuote() external returns (uint256);\n', '\n', '    function _BASE_CAPITAL_TOKEN_() external returns (address);\n', '\n', '    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\n', '\n', '    function _BASE_TOKEN_() external view returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external view returns (address);\n', '\n', '    function _R_STATUS_() external view returns (uint8);\n', '\n', '    function _QUOTE_BALANCE_() external view returns (uint256);\n', '\n', '    function _BASE_BALANCE_() external view returns (uint256);\n', '\n', '    function _K_() external view returns (uint256);\n', '\n', '    function _MT_FEE_RATE_() external view returns (uint256);\n', '\n', '    function _LP_FEE_RATE_() external view returns (uint256);\n', '\n', '    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n', '\n', '    function getOraclePrice() external view returns (uint256);\n', '\n', '    function getMidPrice() external view returns (uint256 midPrice); \n', '}\n', '\n', '// File: contracts/intf/IDODOApprove.sol\n', '\n', '\n', 'interface IDODOApprove {\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '    function getDODOProxy() external view returns (address);\n', '}\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "DODO_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/SmartRoute/DODOApproveProxy.sol\n', '\n', '\n', '\n', '\n', 'interface IDODOApproveProxy {\n', '    function isAllowedProxy(address _proxy) external view returns (bool);\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title DODOApproveProxy\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Allow different version dodoproxy to claim from DODOApprove\n', ' */\n', 'contract DODOApproveProxy is InitializableOwnable {\n', '    \n', '    // ============ Storage ============\n', '    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\n', '    mapping (address => bool) public _IS_ALLOWED_PROXY_;\n', '    uint256 public _TIMELOCK_;\n', '    address public _PENDING_ADD_DODO_PROXY_;\n', '    address public immutable _DODO_APPROVE_;\n', '\n', '    // ============ Modifiers ============\n', '    modifier notLocked() {\n', '        require(\n', '            _TIMELOCK_ <= block.timestamp,\n', '            "SetProxy is timelocked"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address dodoApporve) public {\n', '        _DODO_APPROVE_ = dodoApporve;\n', '    }\n', '\n', '    function init(address owner, address[] memory proxies) external {\n', '        initOwner(owner);\n', '        for(uint i = 0; i < proxies.length; i++) \n', '            _IS_ALLOWED_PROXY_[proxies[i]] = true;\n', '    }\n', '\n', '    function unlockAddProxy(address newDodoProxy) public onlyOwner {\n', '        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\n', '        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\n', '    }\n', '\n', '    function lockAddProxy() public onlyOwner {\n', '       _PENDING_ADD_DODO_PROXY_ = address(0);\n', '       _TIMELOCK_ = 0;\n', '    }\n', '\n', '\n', '    function addDODOProxy() external onlyOwner notLocked() {\n', '        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\n', '        lockAddProxy();\n', '    }\n', '\n', '    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\n', '        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\n', '    }\n', '    \n', '    function claimTokens(\n', '        address token,\n', '        address who,\n', '        address dest,\n', '        uint256 amount\n', '    ) external {\n', '        require(_IS_ALLOWED_PROXY_[msg.sender], "DODOApproveProxy:Access restricted");\n', '        IDODOApprove(_DODO_APPROVE_).claimTokens(\n', '            token,\n', '            who,\n', '            dest,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function isAllowedProxy(address _proxy) external view returns (bool) {\n', '        return _IS_ALLOWED_PROXY_[_proxy];\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/DecimalMath.sol\n', '\n', '\n', '/**\n', ' * @title DecimalMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Functions for fixed point number with 18 decimals\n', ' */\n', 'library DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant ONE = 10**18;\n', '    uint256 internal constant ONE2 = 10**36;\n', '\n', '    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d) / (10**18);\n', '    }\n', '\n', '    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d).divCeil(10**18);\n', '    }\n', '\n', '    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).div(d);\n', '    }\n', '\n', '    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).divCeil(d);\n', '    }\n', '\n', '    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).div(target);\n', '    }\n', '\n', '    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).divCeil(target);\n', '    }\n', '}\n', '\n', '// File: contracts/SmartRoute/helper/DODOSellHelper.sol\n', '\n', '\n', '\n', '\n', '// import {DODOMath} from "../lib/DODOMath.sol";\n', '\n', 'interface IDODOSellHelper {\n', '    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n', '    \n', '    function querySellBaseToken(address dodo, uint256 amount) external view returns (uint256);\n', '}\n', '\n', 'library DODOMath {\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '        Integrate dodo curve fron V1 to V2\n', '        require V0>=V1>=V2>0\n', '        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\n', '        let V1-V2=delta\n', '        res = i*delta*(1-k+k(V0^2/V1/V2))\n', '    */\n', '    function _GeneralIntegrate(\n', '        uint256 V0,\n', '        uint256 V1,\n', '        uint256 V2,\n', '        uint256 i,\n', '        uint256 k\n', '    ) internal pure returns (uint256) {\n', '        uint256 fairAmount = DecimalMath.mulFloor(i, V1.sub(V2)); // i*delta\n', '        uint256 V0V0V1V2 = DecimalMath.divCeil(V0.mul(V0).div(V1), V2);\n', '        uint256 penalty = DecimalMath.mulFloor(k, V0V0V1V2); // k(V0^2/V1/V2)\n', '        return DecimalMath.mulFloor(fairAmount, DecimalMath.ONE.sub(k).add(penalty));\n', '    }\n', '\n', '    /*\n', '        The same with integration expression above, we have:\n', '        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n', '        Given Q1 and deltaB, solve Q2\n', '        This is a quadratic function and the standard version is\n', '        aQ2^2 + bQ2 + c = 0, where\n', '        a=1-k\n', '        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\n', '        c=-kQ0^2\n', '        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\n', '        note: another root is negative, abondan\n', '        if deltaBSig=true, then Q2>Q1\n', '        if deltaBSig=false, then Q2<Q1\n', '    */\n', '    function _SolveQuadraticFunctionForTrade(\n', '        uint256 Q0,\n', '        uint256 Q1,\n', '        uint256 ideltaB,\n', '        bool deltaBSig,\n', '        uint256 k\n', '    ) internal pure returns (uint256) {\n', '        // calculate -b value and sig\n', '        // -b = (1-k)Q1-kQ0^2/Q1+i*deltaB\n', '        uint256 kQ02Q1 = DecimalMath.mulFloor(k, Q0).mul(Q0).div(Q1); // kQ0^2/Q1\n', '        uint256 b = DecimalMath.mulFloor(DecimalMath.ONE.sub(k), Q1); // (1-k)Q1\n', '        bool minusbSig = true;\n', '        if (deltaBSig) {\n', '            b = b.add(ideltaB); // (1-k)Q1+i*deltaB\n', '        } else {\n', '            kQ02Q1 = kQ02Q1.add(ideltaB); // i*deltaB+kQ0^2/Q1\n', '        }\n', '        if (b >= kQ02Q1) {\n', '            b = b.sub(kQ02Q1);\n', '            minusbSig = true;\n', '        } else {\n', '            b = kQ02Q1.sub(b);\n', '            minusbSig = false;\n', '        }\n', '\n', '        // calculate sqrt\n', '        uint256 squareRoot = DecimalMath.mulFloor(\n', '            DecimalMath.ONE.sub(k).mul(4),\n', '            DecimalMath.mulFloor(k, Q0).mul(Q0)\n', '        ); // 4(1-k)kQ0^2\n', '        squareRoot = b.mul(b).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\n', '\n', '        // final res\n', '        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\n', '        uint256 numerator;\n', '        if (minusbSig) {\n', '            numerator = b.add(squareRoot);\n', '        } else {\n', '            numerator = squareRoot.sub(b);\n', '        }\n', '\n', '        if (deltaBSig) {\n', '            return DecimalMath.divFloor(numerator, denominator);\n', '        } else {\n', '            return DecimalMath.divCeil(numerator, denominator);\n', '        }\n', '    }\n', '\n', '    /*\n', '        Start from the integration function\n', '        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n', '        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\n', '        let fairAmount = i*deltaB\n', '    */\n', '    function _SolveQuadraticFunctionForTarget(\n', '        uint256 V1,\n', '        uint256 k,\n', '        uint256 fairAmount\n', '    ) internal pure returns (uint256 V0) {\n', '        // V0 = V1+V1*(sqrt-1)/2k\n', '        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mulFloor(k, fairAmount).mul(4), V1);\n', '        sqrt = sqrt.add(DecimalMath.ONE).mul(DecimalMath.ONE).sqrt();\n', '        uint256 premium = DecimalMath.divCeil(sqrt.sub(DecimalMath.ONE), k.mul(2));\n', '        // V0 is greater than or equal to V1 according to the solution\n', '        return DecimalMath.mulFloor(V1, DecimalMath.ONE.add(premium));\n', '    }\n', '}\n', '\n', 'contract DODOSellHelper {\n', '    using SafeMath for uint256;\n', '\n', '    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\n', '\n', '    uint256 constant ONE = 10**18;\n', '\n', '    struct DODOState {\n', '        uint256 oraclePrice;\n', '        uint256 K;\n', '        uint256 B;\n', '        uint256 Q;\n', '        uint256 baseTarget;\n', '        uint256 quoteTarget;\n', '        RStatus rStatus;\n', '    }\n', '\n', '    function querySellBaseToken(address dodo, uint256 amount) public view returns (uint256) {\n', '        return IDODOV1(dodo).querySellBaseToken(amount);\n', '    }\n', '\n', '    function querySellQuoteToken(address dodo, uint256 amount) public view returns (uint256) {\n', '        DODOState memory state;\n', '        (state.baseTarget, state.quoteTarget) = IDODOV1(dodo).getExpectedTarget();\n', '        state.rStatus = RStatus(IDODOV1(dodo)._R_STATUS_());\n', '        state.oraclePrice = IDODOV1(dodo).getOraclePrice();\n', '        state.Q = IDODOV1(dodo)._QUOTE_BALANCE_();\n', '        state.B = IDODOV1(dodo)._BASE_BALANCE_();\n', '        state.K = IDODOV1(dodo)._K_();\n', '\n', '        uint256 boughtAmount;\n', '        // Determine the status (RStatus) and calculate the amount\n', '        // based on the state\n', '        if (state.rStatus == RStatus.ONE) {\n', '            boughtAmount = _ROneSellQuoteToken(amount, state);\n', '        } else if (state.rStatus == RStatus.ABOVE_ONE) {\n', '            boughtAmount = _RAboveSellQuoteToken(amount, state);\n', '        } else {\n', '            uint256 backOneBase = state.B.sub(state.baseTarget);\n', '            uint256 backOneQuote = state.quoteTarget.sub(state.Q);\n', '            if (amount <= backOneQuote) {\n', '                boughtAmount = _RBelowSellQuoteToken(amount, state);\n', '            } else {\n', '                boughtAmount = backOneBase.add(\n', '                    _ROneSellQuoteToken(amount.sub(backOneQuote), state)\n', '                );\n', '            }\n', '        }\n', '        // Calculate fees\n', '        return\n', '            DecimalMath.divFloor(\n', '                boughtAmount,\n', '                DecimalMath.ONE.add(IDODOV1(dodo)._MT_FEE_RATE_()).add(\n', '                    IDODOV1(dodo)._LP_FEE_RATE_()\n', '                )\n', '            );\n', '    }\n', '\n', '    function _ROneSellQuoteToken(uint256 amount, DODOState memory state)\n', '        internal\n', '        pure\n', '        returns (uint256 receiveBaseToken)\n', '    {\n', '        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\n', '        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n', '            state.baseTarget,\n', '            state.baseTarget,\n', '            DecimalMath.mulFloor(i, amount),\n', '            false,\n', '            state.K\n', '        );\n', '        return state.baseTarget.sub(B2);\n', '    }\n', '\n', '    function _RAboveSellQuoteToken(uint256 amount, DODOState memory state)\n', '        internal\n', '        pure\n', '        returns (uint256 receieBaseToken)\n', '    {\n', '        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\n', '        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n', '            state.baseTarget,\n', '            state.B,\n', '            DecimalMath.mulFloor(i, amount),\n', '            false,\n', '            state.K\n', '        );\n', '        return state.B.sub(B2);\n', '    }\n', '\n', '    function _RBelowSellQuoteToken(uint256 amount, DODOState memory state)\n', '        internal\n', '        pure\n', '        returns (uint256 receiveBaseToken)\n', '    {\n', '        uint256 Q1 = state.Q.add(amount);\n', '        uint256 i = DecimalMath.divFloor(ONE, state.oraclePrice);\n', '        return DODOMath._GeneralIntegrate(state.quoteTarget, Q1, state.Q, i, state.K);\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/intf/IWETH.sol\n', '\n', '\n', 'interface IWETH {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 wad\n', '    ) external returns (bool);\n', '\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IUni.sol\n', '\n', '\n', 'interface IUni {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function token0() external view returns (address);\n', '    \n', '    function token1() external view returns (address);\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IChi.sol\n', '\n', '\n', 'interface IChi {\n', '    function freeUpTo(uint256 value) external returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/SmartRoute/lib/UniversalERC20.sol\n', '\n', '\n', 'library UniversalERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(\n', '        IERC20 token,\n', '        address payable to,\n', '        uint256 amount\n', '    ) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                token.safeTransfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function universalApproveMax(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        uint256 allowance = token.allowance(address(this), to);\n', '        if (allowance < amount) {\n', '            if (allowance > 0) {\n', '                token.safeApprove(to, 0);\n', '            }\n', '            token.safeApprove(to, uint256(-1));\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '\n', '    function tokenBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n', '        return token.balanceOf(who);\n', '    }\n', '\n', '    function isETH(IERC20 token) internal pure returns (bool) {\n', '        return token == ETH_ADDRESS;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title ReentrancyGuard\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Protect functions from Reentrancy Attack\n', ' */\n', 'contract ReentrancyGuard {\n', '    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\n', '    // zero-state of _ENTERED_ is false\n', '    bool private _ENTERED_;\n', '\n', '    modifier preventReentrant() {\n', '        require(!_ENTERED_, "REENTRANT");\n', '        _ENTERED_ = true;\n', '        _;\n', '        _ENTERED_ = false;\n', '    }\n', '}\n', '\n', '// File: contracts/DODOToken/DODOIncentive.sol\n', '\n', 'interface IDODOIncentive {\n', '    function triggerIncentive(\n', '        address fromToken,\n', '        address toToken,\n', '        address assetTo\n', '    ) external;\n', '}\n', '\n', '/**\n', ' * @title DODOIncentive\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Trade Incentive in DODO platform\n', ' */\n', 'contract DODOIncentive is InitializableOwnable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // ============ Storage ============\n', '    address public immutable _DODO_TOKEN_;\n', '    address public _DODO_PROXY_;\n', '    uint256 public dodoPerBlock;\n', '    uint256 public defaultRate = 10;\n', '    mapping(address => uint256) public boosts;\n', '\n', '    uint32 public lastRewardBlock;\n', '    uint112 public totalReward;\n', '    uint112 public totalDistribution;\n', '\n', '    // ============ Events ============\n', '\n', '    event SetBoost(address token, uint256 boostRate);\n', '    event SetNewProxy(address dodoProxy);\n', '    event SetPerReward(uint256 dodoPerBlock);\n', '    event SetDefaultRate(uint256 defaultRate);\n', '    event Incentive(address user, uint256 reward);\n', '\n', '    constructor(address _dodoToken) public {\n', '        _DODO_TOKEN_ = _dodoToken;\n', '    }\n', '\n', '    // ============ Ownable ============\n', '\n', '    function changeBoost(address _token, uint256 _boostRate) public onlyOwner {\n', '        require(_token != address(0));\n', '        require(_boostRate + defaultRate <= 1000);\n', '        boosts[_token] = _boostRate;\n', '        emit SetBoost(_token, _boostRate);\n', '    }\n', '\n', '    function changePerReward(uint256 _dodoPerBlock) public onlyOwner {\n', '        _updateTotalReward();\n', '        dodoPerBlock = _dodoPerBlock;\n', '        emit SetPerReward(dodoPerBlock);\n', '    }\n', '\n', '    function changeDefaultRate(uint256 _defaultRate) public onlyOwner {\n', '        defaultRate = _defaultRate;\n', '        emit SetDefaultRate(defaultRate);\n', '    }\n', '\n', '    function changeDODOProxy(address _dodoProxy) public onlyOwner {\n', '        _DODO_PROXY_ = _dodoProxy;\n', '        emit SetNewProxy(_DODO_PROXY_);\n', '    }\n', '\n', '    function emptyReward(address assetTo) public onlyOwner {\n', '        uint256 balance = IERC20(_DODO_TOKEN_).balanceOf(address(this));\n', '        IERC20(_DODO_TOKEN_).transfer(assetTo, balance);\n', '    }\n', '\n', '    // ============ Incentive  function ============\n', '\n', '    function triggerIncentive(\n', '        address fromToken,\n', '        address toToken,\n', '        address assetTo\n', '    ) external {\n', '        require(msg.sender == _DODO_PROXY_, "DODOIncentive:Access restricted");\n', '\n', '        uint256 curTotalDistribution = totalDistribution;\n', '        uint256 fromRate = boosts[fromToken];\n', '        uint256 toRate = boosts[toToken];\n', '        uint256 rate = (fromRate >= toRate ? fromRate : toRate) + defaultRate;\n', '        require(rate <= 1000, "RATE_INVALID");\n', '        \n', '        uint256 _totalReward = _getTotalReward();\n', '        uint256 reward = ((_totalReward - curTotalDistribution) * rate) / 1000;\n', '        uint256 _totalDistribution = curTotalDistribution + reward;\n', '\n', '        _update(_totalReward, _totalDistribution);\n', '        if (reward != 0) {\n', '            IERC20(_DODO_TOKEN_).transfer(assetTo, reward);\n', '            emit Incentive(assetTo, reward);\n', '        }\n', '    }\n', '\n', '    function _updateTotalReward() internal {\n', '        uint256 _totalReward = _getTotalReward();\n', '        require(_totalReward < uint112(-1), "OVERFLOW");\n', '        totalReward = uint112(_totalReward);\n', '        lastRewardBlock = uint32(block.number);\n', '    }\n', '\n', '    function _update(uint256 _totalReward, uint256 _totalDistribution) internal {\n', '        require(\n', '            _totalReward < uint112(-1) && _totalDistribution < uint112(-1) && block.number < uint32(-1),\n', '            "OVERFLOW"\n', '        );\n', '        lastRewardBlock = uint32(block.number);\n', '        totalReward = uint112(_totalReward);\n', '        totalDistribution = uint112(_totalDistribution);\n', '    }\n', '\n', '    function _getTotalReward() internal view returns (uint256) {\n', '        if (lastRewardBlock == 0) {\n', '            return totalReward;\n', '        } else {\n', '            return totalReward + (block.number - lastRewardBlock) * dodoPerBlock;\n', '        }\n', '    }\n', '\n', '    // ============= Helper function ===============\n', '\n', '    function incentiveStatus(address fromToken, address toToken)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 reward,\n', '            uint256 baseRate,\n', '            uint256 totalRate,\n', '            uint256 curTotalReward,\n', '            uint256 perBlockReward\n', '        )\n', '    {\n', '        baseRate = defaultRate;\n', '        uint256 fromRate = boosts[fromToken];\n', '        uint256 toRate = boosts[toToken];\n', '        totalRate = (fromRate >= toRate ? fromRate : toRate) + defaultRate;\n', '        uint256 _totalReward = _getTotalReward();\n', '        reward = ((_totalReward - totalDistribution) * totalRate) / 1000;\n', '        curTotalReward = _totalReward - totalDistribution;\n', '        perBlockReward = dodoPerBlock;\n', '    }\n', '}\n', '\n', '// File: contracts/SmartRoute/intf/IDODOAdapter.sol\n', '\n', '\n', 'interface IDODOAdapter {\n', '    \n', '    function sellBase(address to, address pool) external;\n', '\n', '    function sellQuote(address to, address pool) external;\n', '}\n', '\n', '// File: contracts/SmartRoute/DODOV2Proxy02.sol\n', '\n', '\n', '/**\n', ' * @title DODOV2Proxy02\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Entrance of trading in DODO platform\n', ' */\n', 'contract DODOV2Proxy02 is IDODOV2Proxy01, ReentrancyGuard, InitializableOwnable {\n', '    using SafeMath for uint256;\n', '    using UniversalERC20 for IERC20;\n', '\n', '    // ============ Storage ============\n', '\n', '    address constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public immutable _WETH_;\n', '    address public immutable _DODO_APPROVE_PROXY_;\n', '    address public immutable _DODO_SELL_HELPER_;\n', '    address public immutable _DVM_FACTORY_;\n', '    address public immutable _DPP_FACTORY_;\n', '    address public immutable _CP_FACTORY_;\n', '    address public immutable _DODO_INCENTIVE_;\n', '    address public immutable _CHI_TOKEN_;\n', '    uint256 public _GAS_DODO_MAX_RETURN_ = 0;\n', '    uint256 public _GAS_EXTERNAL_RETURN_ = 0;\n', '    mapping (address => bool) public isWhiteListed;\n', '\n', '    // ============ Events ============\n', '\n', '    event OrderHistory(\n', '        address fromToken,\n', '        address toToken,\n', '        address sender,\n', '        uint256 fromAmount,\n', '        uint256 returnAmount\n', '    );\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier judgeExpired(uint256 deadLine) {\n', '        require(deadLine >= block.timestamp, "DODOV2Proxy02: EXPIRED");\n', '        _;\n', '    }\n', '\n', '    fallback() external payable {}\n', '\n', '    receive() external payable {}\n', '\n', '    constructor(\n', '        address dvmFactory,\n', '        address dppFactory,\n', '        address cpFactory,\n', '        address payable weth,\n', '        address dodoApproveProxy,\n', '        address dodoSellHelper,\n', '        address chiToken,\n', '        address dodoIncentive\n', '    ) public {\n', '        _DVM_FACTORY_ = dvmFactory;\n', '        _DPP_FACTORY_ = dppFactory;\n', '        _CP_FACTORY_ = cpFactory;\n', '        _WETH_ = weth;\n', '        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\n', '        _DODO_SELL_HELPER_ = dodoSellHelper;\n', '        _CHI_TOKEN_ = chiToken;\n', '        _DODO_INCENTIVE_ = dodoIncentive;\n', '    }\n', '\n', '    function addWhiteList (address contractAddr) public onlyOwner {\n', '        isWhiteListed[contractAddr] = true;\n', '    }\n', '\n', '    function removeWhiteList (address contractAddr) public onlyOwner {\n', '        isWhiteListed[contractAddr] = false;\n', '    }\n', '\n', '    function updateGasReturn(uint256 newDodoGasReturn, uint256 newExternalGasReturn) public onlyOwner {\n', '        _GAS_DODO_MAX_RETURN_ = newDodoGasReturn;\n', '        _GAS_EXTERNAL_RETURN_ = newExternalGasReturn;\n', '    }\n', '\n', '    // ============ DVM Functions (create & add liquidity) ============\n', '\n', '    function createDODOVendingMachine(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        preventReentrant\n', '        judgeExpired(deadLine)\n', '        returns (address newVendingMachine, uint256 shares)\n', '    {\n', '        {\n', '            address _baseToken = baseToken == _ETH_ADDRESS_ ? _WETH_ : baseToken;\n', '            address _quoteToken = quoteToken == _ETH_ADDRESS_ ? _WETH_ : quoteToken;\n', '            newVendingMachine = IDODOV2(_DVM_FACTORY_).createDODOVendingMachine(\n', '                _baseToken,\n', '                _quoteToken,\n', '                lpFeeRate,\n', '                i,\n', '                k,\n', '                isOpenTWAP\n', '            );\n', '        }\n', '\n', '        {\n', '            address _baseToken = baseToken;\n', '            address _quoteToken = quoteToken;\n', '            _deposit(\n', '                msg.sender,\n', '                newVendingMachine,\n', '                _baseToken,\n', '                baseInAmount,\n', '                _baseToken == _ETH_ADDRESS_\n', '            );\n', '            _deposit(\n', '                msg.sender,\n', '                newVendingMachine,\n', '                _quoteToken,\n', '                quoteInAmount,\n', '                _quoteToken == _ETH_ADDRESS_\n', '            );\n', '        }\n', '\n', '        (shares, , ) = IDODOV2(newVendingMachine).buyShares(msg.sender);\n', '    }\n', '\n', '    function addDVMLiquidity(\n', '        address dvmAddress,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 baseMinAmount,\n', '        uint256 quoteMinAmount,\n', '        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        preventReentrant\n', '        judgeExpired(deadLine)\n', '        returns (\n', '            uint256 shares,\n', '            uint256 baseAdjustedInAmount,\n', '            uint256 quoteAdjustedInAmount\n', '        )\n', '    {\n', '        address _dvm = dvmAddress;\n', '        (baseAdjustedInAmount, quoteAdjustedInAmount) = _addDVMLiquidity(\n', '            _dvm,\n', '            baseInAmount,\n', '            quoteInAmount\n', '        );\n', '        require(\n', '            baseAdjustedInAmount >= baseMinAmount && quoteAdjustedInAmount >= quoteMinAmount,\n', '            "DODOV2Proxy02: deposit amount is not enough"\n', '        );\n', '\n', '        _deposit(msg.sender, _dvm, IDODOV2(_dvm)._BASE_TOKEN_(), baseAdjustedInAmount, flag == 1);\n', '        _deposit(msg.sender, _dvm, IDODOV2(_dvm)._QUOTE_TOKEN_(), quoteAdjustedInAmount, flag == 2);\n', '        \n', '        (shares, , ) = IDODOV2(_dvm).buyShares(msg.sender);\n', '        // refund dust eth\n', '        if (flag == 1 && msg.value > baseAdjustedInAmount) msg.sender.transfer(msg.value - baseAdjustedInAmount);\n', '        if (flag == 2 && msg.value > quoteAdjustedInAmount) msg.sender.transfer(msg.value - quoteAdjustedInAmount);\n', '    }\n', '\n', '    function _addDVMLiquidity(\n', '        address dvmAddress,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount\n', '    ) internal view returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount) {\n', '        (uint256 baseReserve, uint256 quoteReserve) = IDODOV2(dvmAddress).getVaultReserve();\n', '        if (quoteReserve == 0 && baseReserve == 0) {\n', '            baseAdjustedInAmount = baseInAmount;\n', '            quoteAdjustedInAmount = quoteInAmount;\n', '        }\n', '        if (quoteReserve == 0 && baseReserve > 0) {\n', '            baseAdjustedInAmount = baseInAmount;\n', '            quoteAdjustedInAmount = 0;\n', '        }\n', '        if (quoteReserve > 0 && baseReserve > 0) {\n', '            uint256 baseIncreaseRatio = DecimalMath.divFloor(baseInAmount, baseReserve);\n', '            uint256 quoteIncreaseRatio = DecimalMath.divFloor(quoteInAmount, quoteReserve);\n', '            if (baseIncreaseRatio <= quoteIncreaseRatio) {\n', '                baseAdjustedInAmount = baseInAmount;\n', '                quoteAdjustedInAmount = DecimalMath.mulFloor(quoteReserve, baseIncreaseRatio);\n', '            } else {\n', '                quoteAdjustedInAmount = quoteInAmount;\n', '                baseAdjustedInAmount = DecimalMath.mulFloor(baseReserve, quoteIncreaseRatio);\n', '            }\n', '        }\n', '    }\n', '\n', '    // ============ DPP Functions (create & reset) ============\n', '\n', '    function createDODOPrivatePool(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256 quoteInAmount,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTwap,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        preventReentrant\n', '        judgeExpired(deadLine)\n', '        returns (address newPrivatePool)\n', '    {\n', '        newPrivatePool = IDODOV2(_DPP_FACTORY_).createDODOPrivatePool();\n', '\n', '        address _baseToken = baseToken;\n', '        address _quoteToken = quoteToken;\n', '        _deposit(msg.sender, newPrivatePool, _baseToken, baseInAmount, _baseToken == _ETH_ADDRESS_);\n', '        _deposit(\n', '            msg.sender,\n', '            newPrivatePool,\n', '            _quoteToken,\n', '            quoteInAmount,\n', '            _quoteToken == _ETH_ADDRESS_\n', '        );\n', '\n', '        if (_baseToken == _ETH_ADDRESS_) _baseToken = _WETH_;\n', '        if (_quoteToken == _ETH_ADDRESS_) _quoteToken = _WETH_;\n', '\n', '        IDODOV2(_DPP_FACTORY_).initDODOPrivatePool(\n', '            newPrivatePool,\n', '            msg.sender,\n', '            _baseToken,\n', '            _quoteToken,\n', '            lpFeeRate,\n', '            k,\n', '            i,\n', '            isOpenTwap\n', '        );\n', '    }\n', '\n', '    function resetDODOPrivatePool(\n', '        address dppAddress,\n', '        uint256[] memory paramList,  //0 - newLpFeeRate, 1 - newI, 2 - newK\n', '        uint256[] memory amountList, //0 - baseInAmount, 1 - quoteInAmount, 2 - baseOutAmount, 3- quoteOutAmount\n', '        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH, 3 - baseOutETH, 4 - quoteOutETH\n', '        uint256 minBaseReserve,\n', '        uint256 minQuoteReserve,\n', '        uint256 deadLine\n', '    ) external override payable preventReentrant judgeExpired(deadLine) {\n', '        _deposit(\n', '            msg.sender,\n', '            dppAddress,\n', '            IDODOV2(dppAddress)._BASE_TOKEN_(),\n', '            amountList[0],\n', '            flag == 1\n', '        );\n', '        _deposit(\n', '            msg.sender,\n', '            dppAddress,\n', '            IDODOV2(dppAddress)._QUOTE_TOKEN_(),\n', '            amountList[1],\n', '            flag == 2\n', '        );\n', '\n', '        require(IDODOV2(IDODOV2(dppAddress)._OWNER_()).reset(\n', '            msg.sender,\n', '            paramList[0],\n', '            paramList[1],\n', '            paramList[2],\n', '            amountList[2],\n', '            amountList[3],\n', '            minBaseReserve,\n', '            minQuoteReserve\n', '        ), "Reset Failed");\n', '\n', '        _withdraw(msg.sender, IDODOV2(dppAddress)._BASE_TOKEN_(), amountList[2], flag == 3);\n', '        _withdraw(msg.sender, IDODOV2(dppAddress)._QUOTE_TOKEN_(), amountList[3], flag == 4);\n', '    }\n', '\n', '    // ============ Swap ============\n', '\n', '    function dodoSwapV2ETHToToken(\n', '        address toToken,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        judgeExpired(deadLine)\n', '        returns (uint256 returnAmount)\n', '    {\n', '        require(dodoPairs.length > 0, "DODOV2Proxy02: PAIRS_EMPTY");\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '        uint256 originGas = gasleft();\n', '        \n', '        uint256 originToTokenBalance = IERC20(toToken).balanceOf(msg.sender);\n', '        IWETH(_WETH_).deposit{value: msg.value}();\n', '        IWETH(_WETH_).transfer(dodoPairs[0], msg.value);\n', '\n', '        for (uint256 i = 0; i < dodoPairs.length; i++) {\n', '            if (i == dodoPairs.length - 1) {\n', '                if (directions & 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(msg.sender);\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(msg.sender);\n', '                }\n', '            } else {\n', '                if (directions & 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(dodoPairs[i + 1]);\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(dodoPairs[i + 1]);\n', '                }\n', '            }\n', '            directions = directions >> 1;\n', '        }\n', '\n', '        returnAmount = IERC20(toToken).balanceOf(msg.sender).sub(originToTokenBalance);\n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '\n', '        _dodoGasReturn(originGas);\n', '\n', '        _execIncentive(isIncentive, _ETH_ADDRESS_, toToken);\n', '\n', '        emit OrderHistory(\n', '            _ETH_ADDRESS_,\n', '            toToken,\n', '            msg.sender,\n', '            msg.value,\n', '            returnAmount\n', '        );\n', '    }\n', '\n', '    function dodoSwapV2TokenToETH(\n', '        address fromToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        judgeExpired(deadLine)\n', '        returns (uint256 returnAmount)\n', '    {\n', '        require(dodoPairs.length > 0, "DODOV2Proxy02: PAIRS_EMPTY");\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '        uint256 originGas = gasleft();\n', '        \n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(fromToken, msg.sender, dodoPairs[0], fromTokenAmount);\n', '\n', '        for (uint256 i = 0; i < dodoPairs.length; i++) {\n', '            if (i == dodoPairs.length - 1) {\n', '                if (directions & 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(address(this));\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(address(this));\n', '                }\n', '            } else {\n', '                if (directions & 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(dodoPairs[i + 1]);\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(dodoPairs[i + 1]);\n', '                }\n', '            }\n', '            directions = directions >> 1;\n', '        }\n', '        returnAmount = IWETH(_WETH_).balanceOf(address(this));\n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '        IWETH(_WETH_).withdraw(returnAmount);\n', '        msg.sender.transfer(returnAmount);\n', '\n', '        _dodoGasReturn(originGas);\n', '\n', '        _execIncentive(isIncentive, fromToken, _ETH_ADDRESS_);\n', '\n', '        emit OrderHistory(\n', '            fromToken,\n', '            _ETH_ADDRESS_,\n', '            msg.sender,\n', '            fromTokenAmount,\n', '            returnAmount\n', '        );\n', '    }\n', '\n', '    function dodoSwapV2TokenToToken(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        judgeExpired(deadLine)\n', '        returns (uint256 returnAmount)\n', '    {\n', '        require(dodoPairs.length > 0, "DODOV2Proxy02: PAIRS_EMPTY");\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '        uint256 originGas = gasleft();\n', '\n', '        uint256 originToTokenBalance = IERC20(toToken).balanceOf(msg.sender);\n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(fromToken, msg.sender, dodoPairs[0], fromTokenAmount);\n', '\n', '        for (uint256 i = 0; i < dodoPairs.length; i++) {\n', '            if (i == dodoPairs.length - 1) {\n', '                if (directions & 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(msg.sender);\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(msg.sender);\n', '                }\n', '            } else {\n', '                if (directions& 1 == 0) {\n', '                    IDODOV2(dodoPairs[i]).sellBase(dodoPairs[i + 1]);\n', '                } else {\n', '                    IDODOV2(dodoPairs[i]).sellQuote(dodoPairs[i + 1]);\n', '                }\n', '            }\n', '            directions = directions >> 1;\n', '        }\n', '        returnAmount = IERC20(toToken).balanceOf(msg.sender).sub(originToTokenBalance);\n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '        \n', '        _dodoGasReturn(originGas);\n', '\n', '        _execIncentive(isIncentive, fromToken, toToken);\n', '\n', '        emit OrderHistory(\n', '            fromToken,\n', '            toToken,\n', '            msg.sender,\n', '            fromTokenAmount,\n', '            returnAmount\n', '        );\n', '    }\n', '\n', '    function externalSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        address approveTarget,\n', '        address swapTarget,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        bytes memory callDataConcat,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        judgeExpired(deadLine)\n', '        returns (uint256 returnAmount)\n', '    {\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '        require(fromToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_SELL_CHI");\n', '        require(toToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_BUY_CHI");\n', '        \n', '        uint256 toTokenOriginBalance = IERC20(toToken).universalBalanceOf(msg.sender);\n', '        if (fromToken != _ETH_ADDRESS_) {\n', '            IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\n', '                fromToken,\n', '                msg.sender,\n', '                address(this),\n', '                fromTokenAmount\n', '            );\n', '            IERC20(fromToken).universalApproveMax(approveTarget, fromTokenAmount);\n', '        }\n', '\n', '        require(isWhiteListed[swapTarget], "DODOV2Proxy02: Not Whitelist Contract");\n', '        (bool success, ) = swapTarget.call{value: fromToken == _ETH_ADDRESS_ ? msg.value : 0}(callDataConcat);\n', '\n', '        require(success, "DODOV2Proxy02: External Swap execution Failed");\n', '\n', '        IERC20(toToken).universalTransfer(\n', '            msg.sender,\n', '            IERC20(toToken).universalBalanceOf(address(this))\n', '        );\n', '\n', '        returnAmount = IERC20(toToken).universalBalanceOf(msg.sender).sub(toTokenOriginBalance);\n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '\n', '        _externalGasReturn();\n', '\n', '        _execIncentive(isIncentive, fromToken, toToken);\n', '\n', '        emit OrderHistory(\n', '            fromToken,\n', '            toToken,\n', '            msg.sender,\n', '            fromTokenAmount,\n', '            returnAmount\n', '        );\n', '    }\n', '\n', '    function dodoSwapV1(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory dodoPairs,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    )\n', '        external\n', '        override\n', '        payable\n', '        judgeExpired(deadLine)\n', '        returns (uint256 returnAmount)\n', '    {\n', '        require(dodoPairs.length > 0, "DODOV2Proxy02: PAIRS_EMPTY");\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '        require(fromToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_SELL_CHI");\n', '        require(toToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_BUY_CHI");\n', '        \n', '        uint256 originGas = gasleft();\n', '\n', '        address _fromToken = fromToken;\n', '        address _toToken = toToken;\n', '        \n', '        _deposit(msg.sender, address(this), _fromToken, fromTokenAmount, _fromToken == _ETH_ADDRESS_);\n', '\n', '        for (uint256 i = 0; i < dodoPairs.length; i++) {\n', '            address curDodoPair = dodoPairs[i];\n', '            if (directions & 1 == 0) {\n', '                address curDodoBase = IDODOV1(curDodoPair)._BASE_TOKEN_();\n', '                require(curDodoBase != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_CHI");\n', '                uint256 curAmountIn = IERC20(curDodoBase).balanceOf(address(this));\n', '                IERC20(curDodoBase).universalApproveMax(curDodoPair, curAmountIn);\n', '                IDODOV1(curDodoPair).sellBaseToken(curAmountIn, 0, "");\n', '            } else {\n', '                address curDodoQuote = IDODOV1(curDodoPair)._QUOTE_TOKEN_();\n', '                require(curDodoQuote != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_CHI");\n', '                uint256 curAmountIn = IERC20(curDodoQuote).balanceOf(address(this));\n', '                IERC20(curDodoQuote).universalApproveMax(curDodoPair, curAmountIn);\n', '                uint256 canBuyBaseAmount = IDODOSellHelper(_DODO_SELL_HELPER_).querySellQuoteToken(\n', '                    curDodoPair,\n', '                    curAmountIn\n', '                );\n', '                IDODOV1(curDodoPair).buyBaseToken(canBuyBaseAmount, curAmountIn, "");\n', '            }\n', '            directions = directions >> 1;\n', '        }\n', '\n', '        \n', '        if (_toToken == _ETH_ADDRESS_) {\n', '            returnAmount = IWETH(_WETH_).balanceOf(address(this));\n', '            IWETH(_WETH_).withdraw(returnAmount);\n', '        } else {\n', '            returnAmount = IERC20(_toToken).tokenBalanceOf(address(this));\n', '        }\n', '        \n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '        IERC20(_toToken).universalTransfer(msg.sender, returnAmount);\n', '\n', '        _dodoGasReturn(originGas);\n', '\n', '        _execIncentive(isIncentive, _fromToken, _toToken);\n', '\n', '        emit OrderHistory(_fromToken, _toToken, msg.sender, fromTokenAmount, returnAmount);\n', '    }\n', '\n', '\n', '    function mixSwap(\n', '        address fromToken,\n', '        address toToken,\n', '        uint256 fromTokenAmount,\n', '        uint256 minReturnAmount,\n', '        address[] memory mixAdapters,\n', '        address[] memory mixPairs,\n', '        address[] memory assetTo,\n', '        uint256 directions,\n', '        bool isIncentive,\n', '        uint256 deadLine\n', '    ) external override payable judgeExpired(deadLine) returns (uint256 returnAmount) {\n', '        require(mixPairs.length > 0, "DODOV2Proxy02: PAIRS_EMPTY");\n', '        require(mixPairs.length == mixAdapters.length, "DODOV2Proxy02: PAIR_ADAPTER_NOT_MATCH");\n', '        require(mixPairs.length == assetTo.length - 1, "DODOV2Proxy02: PAIR_ASSETTO_NOT_MATCH");\n', '        require(minReturnAmount > 0, "DODOV2Proxy02: RETURN_AMOUNT_ZERO");\n', '\n', '        address _fromToken = fromToken;\n', '        address _toToken = toToken;\n', '        uint256 _fromTokenAmount = fromTokenAmount;\n', '\n', '        require(_fromToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_SELL_CHI");\n', '        require(_toToken != _CHI_TOKEN_, "DODOV2Proxy02: NOT_SUPPORT_BUY_CHI");\n', '        \n', '        uint256 originGas = gasleft();\n', '        uint256 toTokenOriginBalance = IERC20(_toToken).universalBalanceOf(msg.sender);\n', '        \n', '        _deposit(msg.sender, assetTo[0], _fromToken, _fromTokenAmount, _fromToken == _ETH_ADDRESS_);\n', '\n', '        for (uint256 i = 0; i < mixPairs.length; i++) {\n', '            if (directions & 1 == 0) {\n', '                IDODOAdapter(mixAdapters[i]).sellBase(assetTo[i + 1],mixPairs[i]);\n', '            } else {\n', '                IDODOAdapter(mixAdapters[i]).sellQuote(assetTo[i + 1],mixPairs[i]);\n', '            }\n', '            directions = directions >> 1;\n', '        }\n', '\n', '        if(_toToken == _ETH_ADDRESS_) {\n', '            returnAmount = IWETH(_WETH_).balanceOf(address(this));\n', '            IWETH(_WETH_).withdraw(returnAmount);\n', '            msg.sender.transfer(returnAmount);\n', '        }else {\n', '            returnAmount = IERC20(_toToken).tokenBalanceOf(msg.sender).sub(toTokenOriginBalance);\n', '        }\n', '\n', '        require(returnAmount >= minReturnAmount, "DODOV2Proxy02: Return amount is not enough");\n', '        \n', '        _dodoGasReturn(originGas);\n', '\n', '        _execIncentive(isIncentive, _fromToken, _toToken);\n', '\n', '        emit OrderHistory(\n', '            _fromToken,\n', '            _toToken,\n', '            msg.sender,\n', '            _fromTokenAmount,\n', '            returnAmount\n', '        );\n', '    }\n', '\n', '    //============ CrowdPooling Functions (create & bid) ============\n', '\n', '    function createCrowdPooling(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 baseInAmount,\n', '        uint256[] memory timeLine,\n', '        uint256[] memory valueList,\n', '        bool isOpenTWAP,\n', '        uint256 deadLine\n', '    ) external override payable preventReentrant judgeExpired(deadLine) returns (address payable newCrowdPooling) {\n', '        address _baseToken = baseToken;\n', '        address _quoteToken = quoteToken == _ETH_ADDRESS_ ? _WETH_ : quoteToken;\n', '        \n', '        newCrowdPooling = IDODOV2(_CP_FACTORY_).createCrowdPooling();\n', '\n', '        _deposit(\n', '            msg.sender,\n', '            newCrowdPooling,\n', '            _baseToken,\n', '            baseInAmount,\n', '            false\n', '        );\n', '\n', '        newCrowdPooling.transfer(msg.value);\n', '\n', '        IDODOV2(_CP_FACTORY_).initCrowdPooling(\n', '            newCrowdPooling,\n', '            msg.sender,\n', '            _baseToken,\n', '            _quoteToken,\n', '            timeLine,\n', '            valueList,\n', '            isOpenTWAP\n', '        );\n', '    }\n', '\n', '    function bid(\n', '        address cpAddress,\n', '        uint256 quoteAmount,\n', '        uint8 flag, // 0 - ERC20, 1 - quoteInETH\n', '        uint256 deadLine\n', '    ) external override payable preventReentrant judgeExpired(deadLine) {\n', '        _deposit(msg.sender, cpAddress, IDODOV2(cpAddress)._QUOTE_TOKEN_(), quoteAmount, flag == 1);\n', '        IDODOV2(cpAddress).bid(msg.sender);\n', '    }\n', '\n', '\n', '    function addLiquidityToV1(\n', '        address pair,\n', '        uint256 baseAmount,\n', '        uint256 quoteAmount,\n', '        uint256 baseMinShares,\n', '        uint256 quoteMinShares,\n', '        uint8 flag, // 0 erc20 In  1 baseInETH  2 quoteIn ETH \n', '        uint256 deadLine\n', '    ) external override payable preventReentrant judgeExpired(deadLine) returns(uint256 baseShares, uint256 quoteShares) {\n', '        address _baseToken = IDODOV1(pair)._BASE_TOKEN_();\n', '        address _quoteToken = IDODOV1(pair)._QUOTE_TOKEN_();\n', '        \n', '        _deposit(msg.sender, address(this), _baseToken, baseAmount, flag == 1);\n', '        _deposit(msg.sender, address(this), _quoteToken, quoteAmount, flag == 2);\n', '\n', '        \n', '        if(baseAmount > 0) {\n', '            IERC20(_baseToken).universalApproveMax(pair, baseAmount);\n', '            baseShares = IDODOV1(pair).depositBaseTo(msg.sender, baseAmount);\n', '        }\n', '        if(quoteAmount > 0) {\n', '            IERC20(_quoteToken).universalApproveMax(pair, quoteAmount);\n', '            quoteShares = IDODOV1(pair).depositQuoteTo(msg.sender, quoteAmount);\n', '        }\n', '\n', '        require(baseShares >= baseMinShares && quoteShares >= quoteMinShares,"DODOV2Proxy02: Return DLP is not enough");\n', '    }\n', '    \n', '\n', '    function _deposit(\n', '        address from,\n', '        address to,\n', '        address token,\n', '        uint256 amount,\n', '        bool isETH\n', '    ) internal {\n', '        if (isETH) {\n', '            if (amount > 0) {\n', '                IWETH(_WETH_).deposit{value: amount}();\n', '                if (to != address(this)) SafeERC20.safeTransfer(IERC20(_WETH_), to, amount);\n', '            }\n', '        } else {\n', '            IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(token, from, to, amount);\n', '        }\n', '    }\n', '\n', '    function _withdraw(\n', '        address payable to,\n', '        address token,\n', '        uint256 amount,\n', '        bool isETH\n', '    ) internal {\n', '        if (isETH) {\n', '            if (amount > 0) {\n', '                IWETH(_WETH_).withdraw(amount);\n', '                to.transfer(amount);\n', '            }\n', '        } else {\n', '            if (amount > 0) {\n', '                SafeERC20.safeTransfer(IERC20(token), to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _dodoGasReturn(uint256 originGas) internal {\n', '        uint256 _gasDodoMaxReturn = _GAS_DODO_MAX_RETURN_;\n', '        if(_gasDodoMaxReturn > 0) {\n', '            uint256 calcGasTokenBurn = originGas.sub(gasleft()) / 65000;\n', '            uint256 gasTokenBurn = calcGasTokenBurn > _gasDodoMaxReturn ? _gasDodoMaxReturn : calcGasTokenBurn;\n', '            if(gasTokenBurn >= 3 && gasleft() > 27710 + gasTokenBurn * 6080)\n', '                IChi(_CHI_TOKEN_).freeUpTo(gasTokenBurn);\n', '        }\n', '    }\n', '\n', '    function _externalGasReturn() internal {\n', '        uint256 _gasExternalReturn = _GAS_EXTERNAL_RETURN_;\n', '        if(_gasExternalReturn > 0) {\n', '            if(gasleft() > 27710 + _gasExternalReturn * 6080)\n', '                IChi(_CHI_TOKEN_).freeUpTo(_gasExternalReturn);\n', '        }\n', '    }\n', '\n', '    function _execIncentive(bool isIncentive, address fromToken,address toToken) internal {\n', '        if(isIncentive && gasleft() > 30000) {\n', '            IDODOIncentive(_DODO_INCENTIVE_).triggerIncentive(fromToken, toToken, msg.sender);\n', '        }\n', '    }\n', '\n', '}']