['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-04\n', '*/\n', '\n', '// File: contracts/interfaces/AggregatorV3Interface.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.16;\n', '\n', 'interface AggregatorV3Interface {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function description() external view returns (string memory);\n', '\n', '    function version() external view returns (uint256);\n', '\n', '    // getRoundData and latestRoundData should both raise "No data present"\n', '    // if they do not have data to report, instead of returning unset values\n', '    // which could be misinterpreted as actual reported values.\n', '    function getRoundData(uint80 _roundId)\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound\n', '        );\n', '\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound\n', '        );\n', '}\n', '\n', '// File: contracts/interfaces/UniswapPriceOracleInterface.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.16;\n', '\n', 'interface UniswapPriceOracleInterface {\n', '    function update() external;\n', '\n', '    function consult(address token) external view returns (uint256 amountOut);\n', '}\n', '\n', '// File: contracts/interfaces/CTokenInterfaces.sol\n', '\n', 'pragma solidity >0.5.16;\n', '\n', 'interface CTokenInterface {\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', 'interface CErc20Interface {\n', '    function underlying() external view returns (address);\n', '}\n', '\n', 'interface Erc20Interface {\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/SUKUPriceOracle.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >0.5.16;\n', '\n', '\n', '\n', '\n', '\n', 'contract SUKUPriceOracle {\n', '    using SafeMath for uint256;\n', '    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n', '    bool public constant isPriceOracle = true;\n', '    uint256 constant MANTISSA_DECIMALS = 18;\n', '\n', '    AggregatorV3Interface internal priceFeedETHUSD;\n', '    AggregatorV3Interface internal priceFeedUSDCETH;\n', '    UniswapPriceOracleInterface internal uniswapPriceOracle;\n', '\n', '    constructor(\n', '        address priceFeedETHUSD_,\n', '        address priceFeedUSDCETH_,\n', '        address uniswapPriceOracle_\n', '    ) public {\n', '        priceFeedETHUSD = AggregatorV3Interface(priceFeedETHUSD_);\n', '        priceFeedUSDCETH = AggregatorV3Interface(priceFeedUSDCETH_);\n', '        uniswapPriceOracle = UniswapPriceOracleInterface(uniswapPriceOracle_);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the current price of a supported cToken underlying\n', '     * @param cToken The address of the market (token)\n', '     * @return USD price mantissa or failure for unsupported markets\n', '     */\n', '    function getUnderlyingPrice(address cToken) public view returns (uint256) {\n', '        string memory cTokenSymbol = CTokenInterface(cToken).symbol();\n', "        // sETH doesn't not have an underlying field\n", '        if (compareStrings(cTokenSymbol, "sETH")) {\n', '            return getETHUSDCPrice();\n', '        }\n', '        address underlyingAddress = CErc20Interface(cToken).underlying();\n', '        uint underlyingDecimals = Erc20Interface(underlyingAddress).decimals();\n', "        // Becuase decimals places differ among contracts it's necessary to\n", '        //  scale the price so that the values between tokens stays as expected\n', '        uint256 priceFactor = MANTISSA_DECIMALS.sub(underlyingDecimals);\n', '        if (compareStrings(cTokenSymbol, "sUSDC")) {\n', '            return\n', '                getETHUSDCPrice()\n', '                    .mul(getUSDCETHPrice())\n', '                    .div(10**MANTISSA_DECIMALS)\n', '                    .mul(10**priceFactor);\n', '        } else if (compareStrings(cTokenSymbol, "sSUKU")) {\n', '            uint256 SUKUETHpriceMantissa =\n', '                uniswapPriceOracle.consult(\n', '                    address(CErc20Interface(address(cToken)).underlying())\n', '                );\n', '            return\n', '                getETHUSDCPrice()\n', '                    .mul(SUKUETHpriceMantissa)\n', '                    .div(10**MANTISSA_DECIMALS)\n', '                    .mul(10**priceFactor);\n', '        } else {\n', '            revert("This is not a supported market address.");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get the ETHUSD price from ChainLink and convert to a mantissa value\n', '     * @return USD price mantissa\n', '     */\n', '    function getETHUSDCPrice() public view returns (uint256) {\n', '        (\n', '            uint80 roundID,\n', '            int256 price,\n', '            uint256 startedAt,\n', '            uint256 timeStamp,\n', '            uint80 answeredInRound\n', '        ) = priceFeedETHUSD.latestRoundData();\n', '        // Get decimals of price feed\n', '        uint256 decimals = priceFeedETHUSD.decimals();\n', '        // Add decimal places to format an 18 decimal mantissa\n', '        uint256 priceMantissa =\n', '            uint256(price).mul(10**(MANTISSA_DECIMALS.sub(decimals)));\n', '\n', '        return priceMantissa;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the USDCETH price from ChainLink and convert to a mantissa value\n', '     * @return USD price mantissa\n', '     */\n', '    function getUSDCETHPrice() public view returns (uint256) {\n', '        (\n', '            uint80 roundID,\n', '            int256 price,\n', '            uint256 startedAt,\n', '            uint256 timeStamp,\n', '            uint80 answeredInRound\n', '        ) = priceFeedUSDCETH.latestRoundData();\n', '        // Get decimals of price feed\n', '        uint256 decimals = priceFeedUSDCETH.decimals();\n', '        // Add decimal places to format an 18 decimal mantissa\n', '        uint256 priceMantissa =\n', '            uint256(price).mul(10**(MANTISSA_DECIMALS.sub(decimals)));\n', '\n', '        return priceMantissa;\n', '    }\n', '\n', '    function compareStrings(string memory a, string memory b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (keccak256(abi.encodePacked((a))) ==\n', '            keccak256(abi.encodePacked((b))));\n', '    }\n', '}']