['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts-upgradeable/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/utils/[email\xa0protected]\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library StringsUpgradeable {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165Upgradeable {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n', '    function __ERC165_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '    }\n', '\n', '    function __ERC165_init_unchained() internal initializer {\n', '    }\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165Upgradeable).interfaceId;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/access/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev External interface of AccessControl declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControlUpgradeable {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n', '    function grantRole(bytes32 role, address account) external;\n', '    function revokeRole(bytes32 role, address account) external;\n', '    function renounceRole(bytes32 role, address account) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', " * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n", ' * members except through off-chain means by accessing the contract event logs. Some\n', ' * applications may benefit from on-chain enumerability, for those cases see\n', ' * {AccessControlEnumerable}.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n', '    function __AccessControl_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC165_init_unchained();\n', '        __AccessControl_init_unchained();\n', '    }\n', '\n', '    function __AccessControl_init_unchained() internal initializer {\n', '    }\n', '    struct RoleData {\n', '        mapping (address => bool) members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Modifier that checks that an account has a specific role. Reverts\n', '     * with a standardized message including the required role.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    modifier onlyRole(bytes32 role) {\n', '        _checkRole(role, _msgSender());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControlUpgradeable).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view override returns (bool) {\n', '        return _roles[role].members[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Revert with a standard message if `account` is missing `role`.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     */\n', '    function _checkRole(bytes32 role, address account) internal view {\n', '        if(!hasRole(role, account)) {\n', '            revert(string(abi.encodePacked(\n', '                "AccessControl: account ",\n', '                StringsUpgradeable.toHexString(uint160(account), 20),\n', '                " is missing role ",\n', '                StringsUpgradeable.toHexString(uint256(role), 32)\n', '            )));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (!hasRole(role, account)) {\n', '            _roles[role].members[account] = true;\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (hasRole(role, account)) {\n', '            _roles[role].members[account] = false;\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/math/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/SafeDecimalMath.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// Libraries\n', '\n', '// https://docs.synthetix.io/contracts/SafeDecimalMath\n', 'library SafeDecimalMath {\n', '    using SafeMath for uint;\n', '\n', '    /* Number of decimal places in the representations. */\n', '    uint8 public constant decimals = 18;\n', '    uint8 public constant highPrecisionDecimals = 27;\n', '\n', '    /* The number representing 1.0. */\n', '    uint public constant UNIT = 10**uint(decimals);\n', '\n', '    /* The number representing 1.0 for higher fidelity numbers. */\n', '    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n', '    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n', '\n', '    /**\n', '     * @return Provides an interface to UNIT.\n', '     */\n', '    function unit() external pure returns (uint) {\n', '        return UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return Provides an interface to PRECISE_UNIT.\n', '     */\n', '    function preciseUnit() external pure returns (uint) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n', '     * decimals.\n', '     *\n', '     * @dev A unit factor is divided out after the product of x and y is evaluated,\n', '     * so that product must be less than 2**256. As this is an integer division,\n', '     * the internal division always rounds down. This helps save on gas. Rounding\n', '     * is more expensive on gas.\n', '     */\n', '    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        return x.mul(y) / UNIT;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of the specified precision unit.\n', '     *\n', '     * @dev The operands should be in the form of a the specified unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function _multiplyDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        /* Divide by UNIT to remove the extra factor introduced by the product. */\n', '        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a precise unit.\n', '     *\n', '     * @dev The operands should be in the precise unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely multiplying x and y, interpreting the operands\n', '     * as fixed-point decimals of a standard unit.\n', '     *\n', '     * @dev The operands should be in the standard unit factor which will be\n', '     * divided out after the product of x and y is evaluated, so that product must be\n', '     * less than 2**256.\n', '     *\n', '     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n', '     * Rounding is useful when you need to retain fidelity for small decimal numbers\n', '     * (eg. small fractions or percentages).\n', '     */\n', '    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _multiplyDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is a high\n', '     * precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n', '     * this is an integer division, the result is always rounded down.\n', '     * This helps save on gas. Rounding is more expensive on gas.\n', '     */\n', '    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n', '        /* Reintroduce the UNIT factor that will be divided out by y. */\n', '        return x.mul(UNIT).div(y);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * decimal in the precision unit specified in the parameter.\n', '     *\n', '     * @dev y is divided after the product of x and the specified precision unit\n', '     * is evaluated, so the product of x and the specified precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function _divideDecimalRound(\n', '        uint x,\n', '        uint y,\n', '        uint precisionUnit\n', '    ) private pure returns (uint) {\n', '        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n', '\n', '        if (resultTimesTen % 10 >= 5) {\n', '            resultTimesTen += 10;\n', '        }\n', '\n', '        return resultTimesTen / 10;\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * standard precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the standard precision unit\n', '     * is evaluated, so the product of x and the standard precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, UNIT);\n', '    }\n', '\n', '    /**\n', '     * @return The result of safely dividing x and y. The return value is as a rounded\n', '     * high precision decimal.\n', '     *\n', '     * @dev y is divided after the product of x and the high precision unit\n', '     * is evaluated, so the product of x and the high precision unit must\n', '     * be less than 2**256. The result is rounded to the nearest increment.\n', '     */\n', '    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n', '        return _divideDecimalRound(x, y, PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a standard decimal representation to a high precision one.\n', '     */\n', '    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n', '        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Convert a high precision decimal to a standard decimal representation.\n', '     */\n', '    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n', '        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n', '\n', '        if (quotientTimesTen % 10 >= 5) {\n', '            quotientTimesTen += 10;\n', '        }\n', '\n', '        return quotientTimesTen / 10;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ProposalVote.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract ProposalVote {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public threshold;\n', '\n', '    mapping(bytes32 => bool) isFinished;\n', '    mapping(bytes32 => mapping(address => bool)) isVoted;\n', '    mapping(bytes32 => uint256) counter;\n', '\n', '    event ProposalVoted(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        address proposer,\n', '        uint256 count,\n', '        uint256 threshold\n', '    );\n', '\n', '    event ThresholdChanged(address token, uint256 oldThreshold, uint256 newThreshold);\n', '\n', '    function _setThreshold(address token, uint256 _threshold) internal virtual {\n', '        uint256 oldThreshold = threshold[token];\n', '        threshold[token] = _threshold;\n', '        emit ThresholdChanged(token, oldThreshold, _threshold);\n', '    }\n', '\n', '    function _vote(\n', '        address tokenTo,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        string memory txid\n', '    ) internal virtual returns (bool result) {\n', '        require(threshold[tokenTo] > 0, "ProposalVote: threshold should be greater than 0");\n', '        uint256 count = threshold[tokenTo];\n', '        bytes32 mid = keccak256(abi.encodePacked(tokenTo, from, to, amount, txid));\n', '        require(isFinished[mid] == false, "_vote::proposal finished");\n', '        require(isVoted[mid][msg.sender] == false, "_vote::msg.sender voted");\n', '        counter[mid] = counter[mid].add(1);\n', '        isVoted[mid][msg.sender] = true;\n', '\n', '        if (counter[mid] >= count) {\n', '            isFinished[mid] = true;\n', '            result = true;\n', '        }\n', '\n', '        emit ProposalVoted(tokenTo, from, to, amount, msg.sender, counter[mid], count);\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/beacon/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev This is the interface that {BeaconProxy} expects of its beacon.\n', ' */\n', 'interface IBeaconUpgradeable {\n', '    /**\n', '     * @dev Must return an address that can be used as a delegate call target.\n', '     *\n', '     * {BeaconProxy} will check that this address is a contract.\n', '     */\n', '    function implementation() external view returns (address);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Library for reading and writing primitive types to specific storage slots.\n', ' *\n', ' * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n', ' * This library helps with reading and writing to such slots without the need for inline assembly.\n', ' *\n', ' * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n', ' *\n', ' * Example usage to set ERC1967 implementation slot:\n', ' * ```\n', ' * contract ERC1967 {\n', ' *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', ' *\n', ' *     function _getImplementation() internal view returns (address) {\n', ' *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n', ' *     }\n', ' *\n', ' *     function _setImplementation(address newImplementation) internal {\n', ' *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n', ' *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n', ' *     }\n', ' * }\n', ' * ```\n', ' *\n', ' * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n', ' */\n', 'library StorageSlotUpgradeable {\n', '    struct AddressSlot {\n', '        address value;\n', '    }\n', '\n', '    struct BooleanSlot {\n', '        bool value;\n', '    }\n', '\n', '    struct Bytes32Slot {\n', '        bytes32 value;\n', '    }\n', '\n', '    struct Uint256Slot {\n', '        uint256 value;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n', '     */\n', '    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n', '        assembly {\n', '            r.slot := slot\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n', '     */\n', '    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n', '        assembly {\n', '            r.slot := slot\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n', '     */\n', '    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n', '        assembly {\n', '            r.slot := slot\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n', '     */\n', '    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n', '        assembly {\n', '            r.slot := slot\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev This abstract contract provides getters and event emitting update functions for\n', ' * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n', ' *\n', ' * _Available since v4.1._\n', ' *\n', ' * @custom:oz-upgrades-unsafe-allow delegatecall\n', ' */\n', 'abstract contract ERC1967UpgradeUpgradeable is Initializable {\n', '    function __ERC1967Upgrade_init() internal initializer {\n', '        __ERC1967Upgrade_init_unchained();\n', '    }\n', '\n', '    function __ERC1967Upgrade_init_unchained() internal initializer {\n', '    }\n', '    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n', '    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Emitted when the implementation is upgraded.\n', '     */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    /**\n', '     * @dev Returns the current implementation address.\n', '     */\n', '    function _getImplementation() internal view returns (address) {\n', '        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 implementation slot.\n', '     */\n', '    function _setImplementation(address newImplementation) private {\n', '        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n', '        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n', '    }\n', '\n', '    /**\n', '     * @dev Perform implementation upgrade\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeTo(address newImplementation) internal {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Perform implementation upgrade with additional setup call.\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '        if (data.length > 0 || forceCall) {\n', '            _functionDelegateCall(newImplementation, data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n', '     *\n', '     * Emits an {Upgraded} event.\n', '     */\n', '    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n', '        address oldImplementation = _getImplementation();\n', '\n', '        // Initial upgrade and setup call\n', '        _setImplementation(newImplementation);\n', '        if (data.length > 0 || forceCall) {\n', '            _functionDelegateCall(newImplementation, data);\n', '        }\n', '\n', '        // Perform rollback test if not already in progress\n', '        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n', '        if (!rollbackTesting.value) {\n', '            // Trigger rollback using upgradeTo from the new implementation\n', '            rollbackTesting.value = true;\n', '            _functionDelegateCall(\n', '                newImplementation,\n', '                abi.encodeWithSignature(\n', '                    "upgradeTo(address)",\n', '                    oldImplementation\n', '                )\n', '            );\n', '            rollbackTesting.value = false;\n', '            // Check rollback was effective\n', '            require(oldImplementation == _getImplementation(), "ERC1967Upgrade: upgrade breaks further upgrades");\n', '            // Finally reset to the new implementation and log the upgrade\n', '            _setImplementation(newImplementation);\n', '            emit Upgraded(newImplementation);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n', '     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n', '     *\n', '     * Emits a {BeaconUpgraded} event.\n', '     */\n', '    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n', '        _setBeacon(newBeacon);\n', '        emit BeaconUpgraded(newBeacon);\n', '        if (data.length > 0 || forceCall) {\n', '            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '    /**\n', '     * @dev Emitted when the admin account has changed.\n', '     */\n', '    event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     */\n', '    function _getAdmin() internal view returns (address) {\n', '        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new address in the EIP1967 admin slot.\n', '     */\n', '    function _setAdmin(address newAdmin) private {\n', '        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n', '        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the admin of the proxy.\n', '     *\n', '     * Emits an {AdminChanged} event.\n', '     */\n', '    function _changeAdmin(address newAdmin) internal {\n', '        emit AdminChanged(_getAdmin(), newAdmin);\n', '        _setAdmin(newAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n', "     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n", '     */\n', '    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n', '\n', '    /**\n', '     * @dev Emitted when the beacon is upgraded.\n', '     */\n', '    event BeaconUpgraded(address indexed beacon);\n', '\n', '    /**\n', '     * @dev Returns the current beacon.\n', '     */\n', '    function _getBeacon() internal view returns (address) {\n', '        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores a new beacon in the EIP1967 beacon slot.\n', '     */\n', '    function _setBeacon(address newBeacon) private {\n', '        require(\n', '            AddressUpgradeable.isContract(newBeacon),\n', '            "ERC1967: new beacon is not a contract"\n', '        );\n', '        require(\n', '            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n', '            "ERC1967: beacon implementation is not a contract"\n', '        );\n', '        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n', '    }\n', '\n', '    /*\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n', '        require(AddressUpgradeable.isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Base contract for building openzeppelin-upgrades compatible implementations for the {ERC1967Proxy}. It includes\n', ' * publicly available upgrade functions that are called by the plugin and by the secure upgrade mechanism to verify\n', ' * continuation of the upgradability.\n', ' *\n', ' * The {_authorizeUpgrade} function MUST be overridden to include access restriction to the upgrade mechanism.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'abstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n', '    function __UUPSUpgradeable_init() internal initializer {\n', '        __ERC1967Upgrade_init_unchained();\n', '        __UUPSUpgradeable_init_unchained();\n', '    }\n', '\n', '    function __UUPSUpgradeable_init_unchained() internal initializer {\n', '    }\n', '    function upgradeTo(address newImplementation) external virtual {\n', '        _authorizeUpgrade(newImplementation);\n', '        _upgradeToAndCallSecure(newImplementation, bytes(""), false);\n', '    }\n', '\n', '    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\n', '        _authorizeUpgrade(newImplementation);\n', '        _upgradeToAndCallSecure(newImplementation, data, true);\n', '    }\n', '\n', '    function _authorizeUpgrade(address newImplementation) internal virtual;\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/CrossLock.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CrossLock is Initializable, UUPSUpgradeable, ProposalVote, AccessControlUpgradeable {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using SafeDecimalMath for uint256;\n', '\n', '    // eg.ethToken => other\n', '    mapping(address => mapping(uint256 => address)) public supportToken;\n', '    mapping(string => bool) public txUnlocked;\n', '\n', '    event Lock(address token0, address token1, uint256 chainID, address locker, address to, uint256 amount);\n', '    event Unlock(address token0, address token1, uint256 chainID, address from, address to, uint256 amount, string txid);\n', '\n', '    function initialize() initializer public {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '    }\n', '\n', '    function _authorizeUpgrade(address) internal override onlyAdmin {}\n', '\n', '\n', '    function getRoleKey(\n', '        address token0,\n', '        address token1,\n', '        uint256 chainID\n', '    ) public pure returns (bytes32 key) {\n', '        key = keccak256(abi.encodePacked(token0, token1, chainID));\n', '    }\n', '\n', '    function addSupportToken(\n', '        address token0,\n', '        address token1,\n', '        uint256 chainID\n', '    ) public onlyAdmin {\n', '        require(supportToken[token0][chainID] == address(0), "Toke already Supported");\n', '        supportToken[token0][chainID] = token1;\n', '    }\n', '\n', '    function removeSupportToken(address token0, uint256 chainID) public onlyAdmin {\n', '        require(supportToken[token0][chainID] != address(0), "Toke not Supported");\n', '        delete supportToken[token0][chainID];\n', '    }\n', '\n', '    function addSupportTokens(\n', '        address[] memory token0Addrs,\n', '        address[] memory token1Addrs,\n', '        uint256[] memory chainIDs\n', '    ) public {\n', '        require(token0Addrs.length == token1Addrs.length, "Token length not match");\n', '        require(token0Addrs.length == chainIDs.length, "Token length not match");\n', '        for (uint256 i; i < token0Addrs.length; i++) {\n', '            addSupportToken(token0Addrs[i], token1Addrs[i], chainIDs[i]);\n', '        }\n', '    }\n', '\n', '    function removeSupportTokens(address[] memory token1s, uint256[] memory chainIDs) public {\n', '        require(token1s.length == chainIDs.length, "Token length not match");\n', '        for (uint256 i; i < token1s.length; i++) {\n', '            removeSupportToken(token1s[i], chainIDs[i]);\n', '        }\n', '    }\n', '\n', '    function lock(\n', '        address token0,\n', '        uint256 chainID,\n', '        address to,\n', '        uint256 amount\n', '    ) public onlySupportToken(token0, chainID) {\n', '        IERC20Upgradeable(token0).safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Lock(token0, supportToken[token0][chainID], chainID, msg.sender, to, amount);\n', '    }\n', '\n', '    function unlock(\n', '        address token0,\n', '        uint256 chainID,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        string memory txid\n', '    ) public onlySupportToken(token0, chainID) onlyCrosser(token0, chainID) whenNotUnlocked(txid) {\n', '        bool result = _vote(token0, from, to, amount, txid);\n', '        if (result) {\n', '            txUnlocked[txid] = true;\n', '            IERC20Upgradeable(token0).safeTransfer(to, amount);\n', '            address token1 = supportToken[token0][chainID];\n', '            emit Unlock(token0, token1, chainID, from, to, amount, txid);\n', '        }\n', '    }\n', '\n', '    function setThreshold(address token0, uint256 _threshold) public onlyAdmin {\n', '        _setThreshold(token0, _threshold);\n', '    }\n', '\n', '    modifier onlySupportToken(address token0, uint256 chainID) {\n', '        require(supportToken[token0][chainID] != address(0), "Lock::Not Support Token");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "caller is not admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrosser(address token0, uint256 chainID) {\n', '        bytes32 key = getRoleKey(token0, supportToken[token0][chainID], chainID);\n', '        require(hasRole(key, msg.sender), "caller is not crosser");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotUnlocked(string memory _txid) {\n', '        require(txUnlocked[_txid] == false, "tx unlocked");\n', '        _;\n', '    }\n', '}']