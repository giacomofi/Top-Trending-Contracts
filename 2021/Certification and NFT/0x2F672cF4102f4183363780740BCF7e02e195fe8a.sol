['/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20Timelock{\n', '    function AllocationLength() external view returns (uint256);\n', '    function AddAllocation(string memory name, uint256 amount, uint256 releaseDate, bool isInterval, uint256 percentageOfRelease, uint256 intervalOfRelease, address token) external;\n', '    function WithdrawFromAllocation(string memory name) external;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20TimelockFactory\n', '{\n', '    function CreateTimelock(address owner, address tokenOwner) external returns(address);\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./TokenAllocation.sol";\n', 'import "./PresaleDataAddresses.sol";\n', 'import "./PresaleDataState.sol";\n', 'import "./PresaleInfo.sol";\n', '\n', 'struct PresaleData{\n', '    PresaleInfo Info;\n', '    uint256 StartDate;\n', '    uint256 EndDate;\n', '    uint256 Softcap;\n', '    uint256 Hardcap;\n', '    uint256 TokenLiqAmount;\n', '    uint256 LiqPercentage;\n', '    uint256 TokenPresaleAllocation;\n', '    bool PermalockLiq;\n', '    TokenAllocation[] TokenAllocations;// will not be returned in view of PresaleData\n', '    TokenAllocation LiquidityTokenAllocation;\n', '    PresaleDataAddresses Addresses;\n', '    PresaleDataState State;\n', '    mapping(address => uint256) EthContributedPerAddress;// will not be returned in view of PresaleData\n', '    mapping(address => bool) ClaimedAddress;// will not be returned in view of PresaleData\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'struct PresaleDataAddresses\n', '{\n', '    address TokenOwnerAddress;\n', '    address TokenAddress;\n', '    address TokenTimeLock;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'struct PresaleDataState{\n', '    uint256 TotalTokenAmount;\n', '    uint256 Step;\n', '    uint256 ContributedEth;\n', '    uint256 RaisedFeeEth;\n', '    bool Exists;\n', '    uint256 RetrievedTokenAmount;\n', '    uint256 RetrievedEthAmount;\n', '    uint256 NumberOfContributors;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'struct PresaleInfo{\n', '    string Name;\n', '    string Website;\n', '    string Telegram;\n', '    string Twitter;\n', '    string Github;\n', '    string Medium;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./TokenAllocation.sol";\n', '\n', 'struct PresaleSettings{\n', '    string Name;\n', '    uint256 StartDate;\n', '    uint256 EndDate;\n', '    uint256 Softcap;\n', '    uint256 Hardcap;\n', '    uint256 TokenLiqAmount;\n', '    uint256 LiqPercentage;\n', '    uint256 TokenPresaleAllocation;\n', '    bool PermalockLiq;\n', '    TokenAllocation[] TokenAllocations;\n', '    TokenAllocation LiquidityTokenAllocation;\n', '    address Token;\n', '    string Website;\n', '    string Telegram;\n', '    string Twitter;\n', '    string Github;\n', '    string Medium;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'struct TokenAllocation\n', '{\n', '    string Name;\n', '    uint256 Amount;\n', '    uint256 RemainingAmount;\n', '    uint256 ReleaseDate;\n', '    bool IsInterval;\n', '    uint256 PercentageOfRelease;\n', '    uint256 IntervalOfRelease;\n', '    bool Exists;\n', '    address Token;\n', '}\n', '\n', '/*\n', '__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\_        \n', ' _\\///\\\\\\____/\\\\\\/____/\\\\\\/////////\\\\\\_\\/\\\\\\///////////______/\\\\\\////////__       \n', '  ___\\///\\\\\\/\\\\\\/_____\\//\\\\\\______\\///__\\/\\\\\\_______________/\\\\\\/___________      \n', '   _____\\///\\\\\\/________\\////\\\\\\_________\\/\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\_____________     \n', '    _______\\/\\\\\\____________\\////\\\\\\______\\/\\\\\\///////______\\/\\\\\\_____________    \n', '     _______\\/\\\\\\_______________\\////\\\\\\___\\/\\\\\\_____________\\//\\\\\\____________   \n', '      _______\\/\\\\\\________/\\\\\\______\\//\\\\\\__\\/\\\\\\______________\\///\\\\\\__________  \n', '       _______\\/\\\\\\_______\\///\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\////\\\\\\\\\\\\\\\\\\_ \n', '        _______\\///__________\\///////////_____\\///////////////________\\/////////__\n', '\n', 'Visit and follow!\n', '\n', '* Website:  https://www.ysec.finance\n', '* Twitter:  https://twitter.com/YearnSecure\n', '* Telegram: https://t.me/YearnSecure\n', '* Medium:   https://yearnsecure.medium.com/\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./Models/PresaleData.sol";\n', 'import "./Models/PresaleSettings.sol";\n', 'import "./Interfaces/IERC20Timelock.sol";\n', 'import "./Interfaces/IERC20TimelockFactory.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', 'import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";\n', 'import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";\n', '\n', 'contract YsecPresale is Ownable, ReentrancyGuard{\n', '    using SafeMath for uint;\n', '\n', '    //steps\n', '    //0:initialized\n', '    //1:Tokens transfered and ready for contributions\n', '    //>1 presale finished\n', '    //2:Tokens transfered to locks\n', '    //3:Liquidity Added on Uni and ready for withdrawal\n', '    //>3 tokens claimable and eth distributable\n', '\n', '    address public UniswapRouterAddress;\n', '    address public UniswapFactoryAddress;\n', '    \n', '    address public TimelockFactoryAddress;\n', '    address public YieldFeeAddress;\n', '    address public FeeAddress;\n', '\n', '    mapping(uint256 => PresaleData) public Presales;\n', '    uint256[] public PresaleIndexer;\n', '\n', '    event TokensTransfered(uint256 presaleId, uint256 amount);\n', '    event Contributed(uint256 presaleId, address contributor, uint256 amount);\n', '    event RetrievedEth(uint256 presaleId, address contributor, uint256 amount);\n', '    event RetrievedTokens(uint256 presaleId, uint256 amount);\n', '    event TokensTransferedToLocks(uint256 presaleId, uint256 amount);\n', '    event NoTokensTransferedToLocks(uint256 presaleId);\n', '    event UniswapLiquidityAdded(uint256 presaleId, bool permaLockedLiq, uint256 amountOfEth, uint256 amountOfTokens);\n', '    event ClaimedTokens(uint256 presaleId, address claimer, uint256 amount);\n', '    event EthYieldFeeDistributed(uint256 presaleId, address reciever, uint256 amount);\n', '    event EthFeeDistributed(uint256 presaleId, address reciever, uint256 amount);\n', '    event EthDistributed(uint256 presaleId, address reciever, uint256 amount);\n', '\n', '    constructor(address timelockFactoryAddress, address yieldFeeAddress, address feeAddress) public{\n', '        UniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '        UniswapFactoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '        TimelockFactoryAddress = timelockFactoryAddress;\n', '        YieldFeeAddress = yieldFeeAddress;\n', '        FeeAddress = feeAddress;\n', '    }\n', '\n', '    function SetTimelockFactory(address timelockFactoryAddress) onlyOwner() external{\n', '        TimelockFactoryAddress = timelockFactoryAddress;\n', '    }\n', '\n', '    function SetYieldFeeAddress(address yieldFeeAddress) onlyOwner() external{\n', '        YieldFeeAddress = yieldFeeAddress;\n', '    }\n', '\n', '    function SetFeeAddress(address feeAddress) onlyOwner() external{\n', '        FeeAddress = feeAddress;\n', '    }\n', '\n', '    function SetUniswapRouterAddress(address router) onlyOwner() external{\n', '        UniswapRouterAddress = router;\n', '    }\n', '\n', '    function SetUniswapFactoryAddress(address router) onlyOwner() external{\n', '        UniswapFactoryAddress = router;\n', '    }\n', '\n', '    function CreatePresale(PresaleSettings memory settings) external returns(uint256 presaleId){\n', '        require(settings.EndDate > settings.StartDate, "Do not start before end");\n', '        require(settings.StartDate > block.timestamp, "Start in future");\n', '        require(settings.Hardcap >= settings.Softcap, "Hardcap has to equal or exceed softcap");\n', '\n', '        presaleId = PresaleIndexer.length.add(1);\n', '\n', '        Presales[presaleId].StartDate = settings.StartDate;\n', '        Presales[presaleId].EndDate = settings.EndDate;\n', '        Presales[presaleId].Softcap = settings.Softcap;\n', '        Presales[presaleId].Hardcap = settings.Hardcap;\n', '        Presales[presaleId].TokenLiqAmount = settings.TokenLiqAmount;\n', '        Presales[presaleId].LiqPercentage = settings.LiqPercentage;\n', '        Presales[presaleId].TokenPresaleAllocation = settings.TokenPresaleAllocation;\n', '        Presales[presaleId].PermalockLiq = settings.PermalockLiq;\n', '        if(!settings.PermalockLiq) require(settings.LiquidityTokenAllocation.ReleaseDate > block.timestamp, "Liquidity allocation not set in future");\n', '        Presales[presaleId].LiquidityTokenAllocation = settings.LiquidityTokenAllocation;\n', '\n', '        Presales[presaleId].Addresses.TokenOwnerAddress = _msgSender();\n', '        Presales[presaleId].Addresses.TokenAddress = settings.Token;\n', '        Presales[presaleId].Addresses.TokenTimeLock = address(0x0);\n', '\n', '        Presales[presaleId].State.TotalTokenAmount = 0;\n', '        Presales[presaleId].State.Step = 0;\n', '        Presales[presaleId].State.ContributedEth = 0;\n', '        Presales[presaleId].State.RaisedFeeEth = 0;\n', '        Presales[presaleId].State.Exists = true;\n', '        Presales[presaleId].State.RetrievedTokenAmount = 0;\n', '        Presales[presaleId].State.RetrievedEthAmount = 0;\n', '        Presales[presaleId].State.NumberOfContributors = 0;\n', '\n', '        Presales[presaleId].Info.Name = settings.Name;\n', '        Presales[presaleId].Info.Website = settings.Website;\n', '        Presales[presaleId].Info.Telegram = settings.Telegram;\n', '        Presales[presaleId].Info.Twitter = settings.Twitter;\n', '        Presales[presaleId].Info.Github = settings.Github;\n', '        Presales[presaleId].Info.Medium = settings.Medium;\n', '\n', '        Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(settings.TokenLiqAmount);\n', '        Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(settings.TokenPresaleAllocation);\n', '        for(uint i=0; i<settings.TokenAllocations.length; i++)\n', '        {\n', '            require(settings.TokenAllocations[i].ReleaseDate > block.timestamp, "Allocation not set in future");\n', '            TokenAllocation memory allocation = settings.TokenAllocations[i];\n', '            if(allocation.Token == Presales[presaleId].Addresses.TokenAddress) Presales[presaleId].State.TotalTokenAmount = Presales[presaleId].State.TotalTokenAmount.add(allocation.Amount);\n', '            Presales[presaleId].TokenAllocations.push(allocation);\n', '        }\n', '        PresaleIndexer.push(presaleId);\n', '    }\n', '\n', '    //step 0 -> part of init\n', '    function TransferTokens(uint256 presaleId) nonReentrant() RequireTokenOwner(presaleId) external{\n', '        RequireStep(presaleId, 0);\n', '        require(IERC20(Presales[presaleId].Addresses.TokenAddress).allowance(_msgSender(), address(this)) >= Presales[presaleId].State.TotalTokenAmount , "Transfer of token has not been approved");\n', '        IERC20(Presales[presaleId].Addresses.TokenAddress).transferFrom(_msgSender(), address(this), Presales[presaleId].State.TotalTokenAmount);\n', '        Presales[presaleId].State.Step = 1;\n', '        emit TokensTransfered(presaleId, Presales[presaleId].State.TotalTokenAmount);\n', '    }\n', '\n', '    //step 1 -> contributions open\n', '    function Contribute(uint256 presaleId) nonReentrant() public payable{\n', '        RequireStep(presaleId, 1);\n', '        require(msg.value > 0, "Cannot contribute 0");\n', '        require(!PresaleFinished(presaleId), "Presale has already finished");\n', '        require(PresaleStarted(presaleId), "Presale has not started yet!");\n', '\n', '        uint256 amountRecieved = msg.value;\n', '        require(Presales[presaleId].State.ContributedEth + amountRecieved <= Presales[presaleId].Hardcap, "Incoming contribution exceeds hardcap");\n', '        Presales[presaleId].State.ContributedEth = Presales[presaleId].State.ContributedEth.add(amountRecieved);\n', '        Presales[presaleId].State.RaisedFeeEth = Presales[presaleId].State.RaisedFeeEth.add(amountRecieved.div(100).mul(5));//5% is fee\n', '        if(Presales[presaleId].EthContributedPerAddress[_msgSender()] == 0) Presales[presaleId].State.NumberOfContributors = Presales[presaleId].State.NumberOfContributors.add(1);\n', '        Presales[presaleId].EthContributedPerAddress[_msgSender()] = Presales[presaleId].EthContributedPerAddress[_msgSender()].add(amountRecieved);\n', '        emit Contributed(presaleId, _msgSender(), amountRecieved);\n', '     }\n', '\n', '    //step 1 -> in case of failed presale allow users to retrieve invested eth\n', '    //https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now\n', '    function RetrieveEth(uint256 presaleId, address contributor) nonReentrant() external{\n', '        RequireStep(presaleId, 1);\n', '        require(!SoftcapMet(presaleId), "Softcap has been met! you are not able to retrieve ETH");\n', '        require(PresaleFinished(presaleId), "Presale has not finished! you are not able to retrieve ETH");\n', '\n', '        uint256 ethContributedForAddress = Presales[presaleId].EthContributedPerAddress[contributor];\n', '        require(ethContributedForAddress > 0, "No eth available for withdrawal");\n', '        Presales[presaleId].EthContributedPerAddress[contributor] = 0;\n', "        (bool success, ) = contributor.call{value:ethContributedForAddress}('');\n", '        require(success, "Transfer failed.");\n', '        emit RetrievedEth(presaleId, contributor, ethContributedForAddress);\n', '    }\n', '\n', '    //step 1 -> in case of failed presale allow tokenowner to retrieve tokens\n', '    function RetrieveTokens(uint256 presaleId) RequireTokenOwner(presaleId) nonReentrant() external{\n', '        RequireStep(presaleId, 1);\n', '        require(!SoftcapMet(presaleId), "Softcap has been met! you are not able to retrieve ETH");\n', '        require(PresaleFinished(presaleId), "Presale has not finished! you are not able to retrieve ETH");\n', '        \n', '        uint256 remainingAmount = Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].State.RetrievedTokenAmount);\n', '        require(remainingAmount > 0, "No remaining tokens for retrieval");\n', '        uint256 balance = IERC20(Presales[presaleId].Addresses.TokenAddress).balanceOf(address(this));\n', '        require(balance >= remainingAmount, "No tokens left!");\n', '\n', '        Presales[presaleId].State.RetrievedTokenAmount = Presales[presaleId].State.RetrievedTokenAmount.add(remainingAmount);\n', '        IERC20(Presales[presaleId].Addresses.TokenAddress).transfer(_msgSender(), remainingAmount);\n', '        emit RetrievedTokens(presaleId, remainingAmount);\n', '    }\n', '\n', '    //step 1 -> transfer tokens to allocated locks in preperation for step 2 \n', '    function TransferTokensToLocks(uint256 presaleId) nonReentrant() external{\n', '        RequireStep(presaleId, 1);\n', '        require(SoftcapMet(presaleId), "Softcap has not been met!");\n', '        require(PresaleFinished(presaleId), "Presale has not finished!");\n', '        //create timelock\n', '        Presales[presaleId].Addresses.TokenTimeLock = IERC20TimelockFactory(TimelockFactoryAddress).CreateTimelock(address(this), Presales[presaleId].Addresses.TokenOwnerAddress);\n', '\n', '        if(Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount) == 0){\n', '            Presales[presaleId].State.Step = 2;\n', '            emit NoTokensTransferedToLocks(presaleId);\n', '        }else{\n', '            //approve all tokens except used for presale and liq\n', '            IERC20(Presales[presaleId].Addresses.TokenAddress).approve(Presales[presaleId].Addresses.TokenTimeLock, Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount));\n', '            //create and transfer allocations\n', '            for(uint i=0; i<Presales[presaleId].TokenAllocations.length; i++)\n', '            {\n', '                IERC20Timelock(Presales[presaleId].Addresses.TokenTimeLock).AddAllocation(Presales[presaleId].TokenAllocations[i].Name, Presales[presaleId].TokenAllocations[i].Amount, Presales[presaleId].TokenAllocations[i].ReleaseDate, Presales[presaleId].TokenAllocations[i].IsInterval, Presales[presaleId].TokenAllocations[i].PercentageOfRelease, Presales[presaleId].TokenAllocations[i].IntervalOfRelease, Presales[presaleId].Addresses.TokenAddress);\n', '            }\n', '            Presales[presaleId].State.Step = 2;\n', '            emit TokensTransferedToLocks(presaleId, Presales[presaleId].State.TotalTokenAmount.sub(Presales[presaleId].TokenPresaleAllocation).sub(Presales[presaleId].TokenLiqAmount));\n', '        }\n', '    }\n', '\n', '    //step 2 -> add liquidity to uniswap in preperation for step 3\n', '    function AddUniswapLiquidity(uint256 presaleId) nonReentrant() external{\n', '        RequireStep(presaleId, 2);\n', '        IERC20(Presales[presaleId].Addresses.TokenAddress).approve(UniswapRouterAddress, Presales[presaleId].TokenLiqAmount);//approve unirouter\n', '        uint256 amountOfEth = Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RaisedFeeEth).div(100).mul(Presales[presaleId].LiqPercentage);\n', '        if(Presales[presaleId].PermalockLiq)//permanently locked liq\n', '        {\n', '            IUniswapV2Router02(UniswapRouterAddress).addLiquidityETH{value : amountOfEth}(address(Presales[presaleId].Addresses.TokenAddress), Presales[presaleId].TokenLiqAmount, 0, 0, address(0x000000000000000000000000000000000000dEaD), block.timestamp.add(1 days));\n', '        }\n', '        else// use allocation for locking\n', '        {\n', '            IUniswapV2Router02(UniswapRouterAddress).addLiquidityETH{value : amountOfEth}(address(Presales[presaleId].Addresses.TokenAddress), Presales[presaleId].TokenLiqAmount, 0, 0, address(this), block.timestamp.add(1 days));\n', '            address pairAddress = IUniswapV2Factory(UniswapFactoryAddress).getPair(IUniswapV2Router02(UniswapRouterAddress).WETH(), Presales[presaleId].Addresses.TokenAddress);\n', '            IERC20(pairAddress).approve(Presales[presaleId].Addresses.TokenTimeLock, IERC20(pairAddress).balanceOf(address(this)));\n', '            IERC20Timelock(Presales[presaleId].Addresses.TokenTimeLock).AddAllocation(Presales[presaleId].LiquidityTokenAllocation.Name, IERC20(pairAddress).balanceOf(address(this)), Presales[presaleId].LiquidityTokenAllocation.ReleaseDate, Presales[presaleId].LiquidityTokenAllocation.IsInterval, Presales[presaleId].LiquidityTokenAllocation.PercentageOfRelease, Presales[presaleId].LiquidityTokenAllocation.IntervalOfRelease, pairAddress);\n', '        }\n', '        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(amountOfEth);\n', '        Presales[presaleId].State.Step = 3;\n', '        emit UniswapLiquidityAdded(presaleId, Presales[presaleId].PermalockLiq, amountOfEth, Presales[presaleId].TokenLiqAmount);\n', '    }\n', '\n', '    //step 3 -> claim tokens for presale contributors\n', '    function ClaimTokens(uint256 presaleId) nonReentrant() external{\n', '        RequireStep(presaleId, 3);\n', '        require(Presales[presaleId].EthContributedPerAddress[_msgSender()] > 0, "No contributions for address");\n', '        require(Presales[presaleId].ClaimedAddress[_msgSender()] == false, "Already claimed for address");\n', '\n', '        uint256 amountToSend = Presales[presaleId].EthContributedPerAddress[_msgSender()].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\n', '        Presales[presaleId].ClaimedAddress[_msgSender()] = true;\n', '        IERC20(Presales[presaleId].Addresses.TokenAddress).transfer(_msgSender(), amountToSend);\n', '        emit ClaimedTokens(presaleId, _msgSender(), amountToSend);\n', '    }\n', '\n', '    //step 3 -> distribute eth to presale host and fees to ysec\n', '    function DistributeEth(uint256 presaleId) nonReentrant() external{\n', '        RequireStep(presaleId, 3);\n', '        require(Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RetrievedEthAmount) > 0, "No eth left to distribute");\n', '        \n', "        (bool successDiv, ) = YieldFeeAddress.call{value: Presales[presaleId].State.RaisedFeeEth.div(2)}('');\n", '        require(successDiv, "Transfer to yield fee address failed.");\n', '        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(Presales[presaleId].State.RaisedFeeEth.div(2));\n', "        (bool successFee, ) = FeeAddress.call{value: Presales[presaleId].State.RaisedFeeEth.div(2)}('');\n", '        require(successFee, "Transfer to fee address failed.");\n', '        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(Presales[presaleId].State.RaisedFeeEth.div(2));\n', '        uint256 amountSendToOwner = Presales[presaleId].State.ContributedEth.sub(Presales[presaleId].State.RetrievedEthAmount);\n', "        (bool successOwner, ) = Presales[presaleId].Addresses.TokenOwnerAddress.call{value: amountSendToOwner}('');\n", '        require(successOwner, "Transfer to owner failed.");\n', '        Presales[presaleId].State.RetrievedEthAmount = Presales[presaleId].State.RetrievedEthAmount.add(amountSendToOwner);\n', '\n', '        emit EthYieldFeeDistributed(presaleId, YieldFeeAddress, Presales[presaleId].State.RaisedFeeEth.div(2));\n', '        emit EthFeeDistributed(presaleId, FeeAddress, Presales[presaleId].State.RaisedFeeEth.div(2));\n', '        emit EthDistributed(presaleId, Presales[presaleId].Addresses.TokenOwnerAddress, amountSendToOwner);\n', '    }\n', '\n', '    modifier RequireTokenOwner(uint256 presaleId){\n', '        ValidPresale(presaleId);\n', '        require(Presales[presaleId].Addresses.TokenOwnerAddress == _msgSender(), "Sender is not owner of tokens!");\n', '        _;\n', '    }\n', '\n', '    function PresaleStarted(uint256 presaleId) public view returns(bool){\n', '        return Presales[presaleId].State.Step > 0 && Presales[presaleId].StartDate <= block.timestamp && !PresaleFinished(presaleId);\n', '    }\n', '\n', '     function PresaleFinished(uint256 presaleId) public view returns(bool){\n', '        return HardcapMet(presaleId) || Presales[presaleId].EndDate <= block.timestamp;\n', '    }\n', '\n', '    function SoftcapMet(uint256 presaleId) public view returns (bool){\n', '        return Presales[presaleId].State.ContributedEth >= Presales[presaleId].Softcap;\n', '    }\n', '\n', '    function HardcapMet(uint256 presaleId) public view returns (bool){\n', '        return Presales[presaleId].State.ContributedEth >= Presales[presaleId].Hardcap;\n', '    }\n', '\n', '    function RequireStep(uint256 presaleId, uint256 step) private{\n', '        require(Presales[presaleId].State.Step == step, "Required step is not active!");\n', '    }\n', '\n', '    function ValidPresale(uint256 presaleId) private{\n', '        require(Presales[presaleId].State.Exists, "Presale does not exist");\n', '    }\n', '    \n', '    function PresaleIndexerLength() public view returns(uint256){\n', '        return PresaleIndexer.length;\n', '    }\n', '\n', '    function GetTokenAllocations(uint256 presaleId) public view returns(TokenAllocation[] memory){\n', '        TokenAllocation[] memory result = new TokenAllocation[](Presales[presaleId].TokenAllocations.length);\n', '        for(uint i=0; i< Presales[presaleId].TokenAllocations.length; i++)\n', '        {\n', '            TokenAllocation storage allocation = Presales[presaleId].TokenAllocations[i];\n', '            result[i] = allocation;\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function GetEthContributedForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\n', '        return Presales[presaleId].EthContributedPerAddress[forAddress];\n', '    }\n', '\n', '    function GetAmountOfTokensForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\n', '        return Presales[presaleId].EthContributedPerAddress[forAddress].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\n', '    }\n', '\n', '    function GetHardcapAmountOfTokensForAddress(uint256 presaleId, address forAddress) public view returns(uint256){\n', '        return Presales[presaleId].EthContributedPerAddress[forAddress].mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].Hardcap);\n', '    }\n', '\n', '    function GetRatio(uint256 presaleId) public view returns(uint256){\n', '        uint256 oneEth = 1000000000000000000;\n', '        return oneEth.mul(Presales[presaleId].TokenPresaleAllocation).div(Presales[presaleId].State.ContributedEth);\n', '    }\n', '\n', '    function GetNumberOfContributors(uint256 presaleId) public view returns(uint256){\n', '        return Presales[presaleId].State.NumberOfContributors;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', "import './IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}']