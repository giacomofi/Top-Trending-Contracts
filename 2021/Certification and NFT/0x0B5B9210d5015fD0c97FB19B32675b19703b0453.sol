['# @version 0.2.12\n', '"""\n', '@title Crypto LP Burner\n', '@notice Converts Crypto Pool LP tokens to a single asset and forwards to another burner\n', '"""\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface AddressProvider:\n', '    def get_registry() -> address: view\n', '\n', 'interface Registry:\n', '    def get_pool_from_lp_token(_lp_token: address) -> address: view\n', '    def get_coins(_pool: address) -> address[8]: view\n', '\n', 'interface StableSwap:\n', '    def remove_liquidity_one_coin(_amount: uint256, i: uint256, _min_amount: uint256): nonpayable\n', '\n', '\n', 'struct SwapData:\n', '    pool: address\n', '    coin: address\n', '    burner: address\n', '    i: uint256\n', '\n', '\n', 'ADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\n', '\n', '\n', 'swap_data: public(HashMap[address, SwapData])\n', 'recovery: public(address)\n', 'is_killed: public(bool)\n', '\n', 'owner: public(address)\n', 'emergency_owner: public(address)\n', 'future_owner: public(address)\n', 'future_emergency_owner: public(address)\n', '\n', '\n', '@external\n', 'def __init__(_recovery: address, _owner: address, _emergency_owner: address):\n', '    """\n', '    @notice Contract constructor\n', '    @dev Unlike other burners, this contract may transfer tokens to\n', '         multiple addresses after the swap. Receiver addresses are\n', '         set by calling `set_swap_data` instead of setting it\n', '         within the constructor.\n', '    @param _recovery Address that tokens are transferred to during an\n', '                     emergency token recovery.\n', '    @param _owner Owner address. Can kill the contract, recover tokens\n', '                  and modify the recovery address.\n', '    @param _emergency_owner Emergency owner address. Can kill the contract\n', '                            and recover tokens.\n', '    """\n', '    self.recovery = _recovery\n', '    self.owner = _owner\n', '    self.emergency_owner = _emergency_owner\n', '\n', '\n', '\n', '@external\n', 'def burn(_coin: address) -> bool:\n', '    """\n', '    @notice Convert `_coin` by removing liquidity and transfer to another burner\n', '    @param _coin Address of the coin being converted\n', '    @return bool success\n', '    """\n', '    assert not self.is_killed  # dev: is killed\n', '\n', '    # transfer coins from caller\n', '    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\n', '    if amount != 0:\n', '        ERC20(_coin).transferFrom(msg.sender, self, amount)\n', '\n', '    # get actual balance in case of transfer fee or pre-existing balance\n', '    amount = ERC20(_coin).balanceOf(self)\n', '\n', '    if amount != 0:\n', '        # remove liquidity and pass to the next burner\n', '        swap_data: SwapData = self.swap_data[_coin]\n', '        StableSwap(swap_data.pool).remove_liquidity_one_coin(amount, swap_data.i, 0)\n', '\n', '        amount = ERC20(swap_data.coin).balanceOf(self)\n', '        response: Bytes[32] = raw_call(\n', '            swap_data.coin,\n', '            concat(\n', '                method_id("transfer(address,uint256)"),\n', '                convert(swap_data.burner, bytes32),\n', '                convert(amount, bytes32),\n', '            ),\n', '            max_outsize=32,\n', '        )\n', '        if len(response) != 0:\n', '            assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_swap_data(_lp_token: address, _coin: address, _burner: address) -> bool:\n', '    """\n', '    @notice Set conversion and transfer data for `_lp_token`\n', '    @param _lp_token LP token address\n', '    @param _coin Underlying coin to remove liquidity in\n', '    @param _burner Burner to transfer `_coin` to\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '\n', '    # find `i` for `_coin` within the pool\n', '    registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\n', '    pool: address = Registry(registry).get_pool_from_lp_token(_lp_token)\n', '    coins: address[8] = Registry(registry).get_coins(pool)\n', '    for i in range(8):\n', '        if coins[i] == ZERO_ADDRESS:\n', '            raise\n', '        if coins[i] == _coin:\n', '            self.swap_data[_lp_token] = SwapData({\n', '                pool: pool,\n', '                coin: _coin,\n', '                burner: _burner,\n', '                i: i\n', '            })\n', '            return True\n', '    raise\n', '\n', '\n', '@external\n', 'def recover_balance(_coin: address) -> bool:\n', '    """\n', '    @notice Recover ERC20 tokens from this contract\n', '    @dev Tokens are sent to the recovery address\n', '    @param _coin Token address\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '\n', '    amount: uint256 = ERC20(_coin).balanceOf(self)\n', '    response: Bytes[32] = raw_call(\n', '        _coin,\n', '        concat(\n', '            method_id("transfer(address,uint256)"),\n', '            convert(self.recovery, bytes32),\n', '            convert(amount, bytes32),\n', '        ),\n', '        max_outsize=32,\n', '    )\n', '    if len(response) != 0:\n', '        assert convert(response, bool)\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_recovery(_recovery: address) -> bool:\n', '    """\n', '    @notice Set the token recovery address\n', '    @param _recovery Token recovery address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.recovery = _recovery\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def set_killed(_is_killed: bool) -> bool:\n', '    """\n', '    @notice Set killed status for this contract\n', '    @dev When killed, the `burn` function cannot be called\n', '    @param _is_killed Killed status\n', '    @return bool success\n', '    """\n', '    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\n', '    self.is_killed = _is_killed\n', '\n', '    return True\n', '\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.future_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_owner  # dev: only owner\n', '    self.owner = msg.sender\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def commit_transfer_emergency_ownership(_future_owner: address) -> bool:\n', '    """\n', '    @notice Commit a transfer of ownership\n', '    @dev Must be accepted by the new owner via `accept_transfer_ownership`\n', '    @param _future_owner New owner address\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.emergency_owner  # dev: only owner\n', '    self.future_emergency_owner = _future_owner\n', '\n', '    return True\n', '\n', '\n', '@external\n', 'def accept_transfer_emergency_ownership() -> bool:\n', '    """\n', '    @notice Accept a transfer of ownership\n', '    @return bool success\n', '    """\n', '    assert msg.sender == self.future_emergency_owner  # dev: only owner\n', '    self.emergency_owner = msg.sender\n', '\n', '    return True']