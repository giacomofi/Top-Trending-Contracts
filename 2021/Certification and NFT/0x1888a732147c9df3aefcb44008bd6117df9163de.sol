['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity >=0.7.4;\n', '\n', 'import "./IERC20.sol";\n', 'import "./MerkleProof.sol";\n', 'import "./IMerkleDistributor.sol";\n', '\n', 'contract MerkleDistributor is IMerkleDistributor {\n', '    address public immutable override token;\n', '    bytes32 public immutable override merkleRoot;\n', '\n', '    // This is a packed array of booleans.\n', '    mapping(uint256 => uint256) private claimedBitMap;\n', '\n', '    constructor(address token_, bytes32 merkleRoot_) public {\n', '        token = token_;\n', '        merkleRoot = merkleRoot_;\n', '    }\n', '\n', '    function isClaimed(uint256 index) public view override returns (bool) {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function _setClaimed(uint256 index) private {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n', '    }\n', '\n', '    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\n', "        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n", '\n', '        // Verify the merkle proof.\n', '        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n', "        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n", '\n', '        // Mark it claimed and send the token.\n', '        _setClaimed(index);\n', "        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\n", '\n', '        emit Claimed(index, account, amount);\n', '    }\n', '}']