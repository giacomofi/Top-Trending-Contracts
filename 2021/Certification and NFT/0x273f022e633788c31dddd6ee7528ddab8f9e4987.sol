['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-06\n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'contract SmartMatrixStarry{\n', '    struct User{\n', '        address Id;\n', '        address Introducer;\n', '    }\n', '    \n', '    struct Table{\n', '        uint Fee;\n', '        uint Bonus;\n', '    }\n', '\n', '    struct TableDetail{\n', '        uint TableId;\n', '        address A;\n', '        address B;\n', '        address C;\n', '        address D;\n', '        address E;\n', '        address F;\n', '        address G;\n', '        uint Fee;\n', '        uint Bonus;\n', '        uint Status;\n', '    }\n', '\n', '    mapping(uint => Table) tables;\n', '    mapping(uint => TableDetail) tableDetails;\n', '    mapping(address => User) users;\n', '    \n', '    address payable _owner = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n', '    uint detailId = 0;\n', '    \n', '    function init() public{\n', '        tables[1] = Table(1,2);\n', '        tables[2] = Table(10,20);\n', '        \n', '        detailId += 1;\n', '        tableDetails[detailId] = TableDetail(1,address(0),address(0),address(0),address(0),address(0),address(0),address(0),tables[1].Fee,tables[1].Bonus,0);\n', '        detailId += 1;\n', '        tableDetails[detailId] = TableDetail(2,address(0),address(0),address(0),address(0),address(0),address(0),address(0),tables[1].Fee,tables[1].Bonus,0);\n', '    }\n', '\n', '    function register(address introducer) public {\n', '        users[address(this)] = User(address(this),introducer);\n', '    }\n', '    \n', '    function openTable(address user,uint tableId) public{\n', '        address introducer = users[user].Introducer;\n', '        require(introducer == address(0), "user is not exists.");\n', '        \n', '        active(tables[tableId].Fee);\n', '        \n', '        for(uint i = 1;i<=detailId;i++){\n', '            if(tableDetails[i].Status == 0 && tableDetails[i].TableId == tableId &&\n', '               (tableDetails[i].A == introducer ||\n', '                tableDetails[i].B == introducer ||\n', '                tableDetails[i].C == introducer ||\n', '                tableDetails[i].D == introducer ||\n', '                tableDetails[i].E == introducer ||\n', '                tableDetails[i].F == introducer)){\n', '                    if(tableDetails[i].D == address(0)){\n', '                        tableDetails[i].D = user;\n', '                    }else if(tableDetails[i].E == address(0)){\n', '                        tableDetails[i].E= user;\n', '                    }else if(tableDetails[i].F == address(0)){\n', '                        tableDetails[i].F = user;\n', '                    }else{\n', '                        tableDetails[i].G = user;\n', '                        tableDetails[i].Status = 1;\n', '                        //finished \n', '                        detailId +=1;\n', '                        tableDetails[detailId].A = tableDetails[i].B;\n', '                        tableDetails[detailId].B = tableDetails[i].D;\n', '                        tableDetails[detailId].C = tableDetails[i].E;\n', '                        tableDetails[detailId].Fee = tables[tableId].Fee;\n', '                        tableDetails[detailId].Bonus = tables[tableId].Bonus;\n', '                        \n', '                        detailId +=1;\n', '                        tableDetails[detailId].A = tableDetails[i].C;\n', '                        tableDetails[detailId].B = tableDetails[i].F;\n', '                        tableDetails[detailId].C = tableDetails[i].G;\n', '                        tableDetails[detailId].Fee = tables[tableId].Fee;\n', '                        tableDetails[detailId].Bonus = tables[tableId].Bonus;\n', '                        \n', '                        sendBonus(tableDetails[i].Bonus,tableDetails[i].A) ;\n', '                        \n', '                        if(tableId == 1){\n', '                            openTable(tableDetails[i].A,2);\n', '                        }else{\n', '                            openTable(tableDetails[i].A,tableId);\n', '                        }\n', '                    }\n', '                }\n', '        }\n', '    }\n', '    \n', '    function sendBonus(uint bonus,address user)  public{\n', '         address(uint160(user)).transfer(bonus);\n', '    }\n', '    \n', '    function active(uint fee) public {\n', '        _owner.transfer(fee);\n', '    }\n', '}']