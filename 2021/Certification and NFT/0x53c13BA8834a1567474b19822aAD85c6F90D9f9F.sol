['// SPDX-License-Identifier: GPL-2.0-or-later\n', 'pragma solidity >=0.6.11;\n', '\n', 'import "../Staking/Owned.sol";\n', '\n', 'interface SmartWalletChecker {\n', '    function check(address) external view returns (bool);\n', '}\n', '\n', 'contract SmartWalletWhitelist is Owned {\n', '    \n', '    mapping(address => bool) public wallets;\n', '    address public checker;\n', '    address public future_checker;\n', '    \n', '    event ApproveWallet(address);\n', '    event RevokeWallet(address);\n', '    \n', '    constructor(address _owner) Owned(_owner) {\n', '        checker = address(0);\n', '    }\n', '    \n', '    function commitSetChecker(address _checker) external {\n', '        require(msg.sender == owner, "!owner");\n', '        future_checker = _checker;\n', '    }\n', '    \n', '    function applySetChecker() external {\n', '        require(msg.sender == owner, "!owner");\n', '        checker = future_checker;\n', '    }\n', '    \n', '    function approveWallet(address _wallet) public {\n', '        require(msg.sender == owner, "!owner");\n', '        wallets[_wallet] = true;\n', '        \n', '        emit ApproveWallet(_wallet);\n', '    }\n', '    function revokeWallet(address _wallet) external {\n', '        require(msg.sender == owner, "!owner");\n', '        wallets[_wallet] = false;\n', '        \n', '        emit RevokeWallet(_wallet);\n', '    }\n', '    \n', '    function check(address _wallet) external view returns (bool) {\n', '        bool _check = wallets[_wallet];\n', '        if (_check) {\n', '            return _check;\n', '        } else {\n', '            if (checker != address(0)) {\n', '                return SmartWalletChecker(checker).check(_wallet);\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-2.0-or-later\n', 'pragma solidity >=0.6.11;\n', '\n', '// https://docs.synthetix.io/contracts/Owned\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '        _;\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 100000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']