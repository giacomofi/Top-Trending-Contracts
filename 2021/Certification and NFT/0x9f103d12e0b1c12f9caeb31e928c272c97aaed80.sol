['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-09\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/crowdsale/Crowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conforms\n', ' * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is Context, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // The token being sold\n', '    IERC20 private _token;\n', '\n', '    // Address where funds are collected\n', '    address payable private _wallet;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 private _rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param rate Number of token units a buyer gets per wei\n', '     * @dev The rate is the conversion between wei and the smallest and indivisible\n', '     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '     * @param wallet Address where collected funds will be forwarded to\n', '     * @param token Address of the token being sold\n', '     */\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0, "Crowdsale: rate is 0");\n', '        require(wallet != address(0), "Crowdsale: wallet is the zero address");\n', '        require(address(token) != address(0), "Crowdsale: token is the zero address");\n', '\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     * Note that other contracts will transfer funds with a base gas stipend\n', '     * of 2300, which is not enough to call buyTokens. Consider calling\n', '     * buyTokens directly when purchasing tokens from a contract.\n', '     */\n', '    function () external payable {\n', '        buyTokens(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");\n', '        require(weiAmount != 0, "Crowdsale: weiAmount is 0");\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n', '     * conditions are not met.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n', '     * etc.)\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/crowdsale/emission/AllowanceCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title AllowanceCrowdsale\n', ' * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\n', ' */\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address private _tokenWallet;\n', '\n', '    /**\n', '     * @dev Constructor, takes token wallet address.\n', '     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale.\n', '     */\n', '    constructor (address tokenWallet) public {\n', '        require(tokenWallet != address(0), "AllowanceCrowdsale: token wallet is the zero address");\n', '        _tokenWallet = tokenWallet;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the wallet that will hold the tokens.\n', '     */\n', '    function tokenWallet() public view returns (address) {\n', '        return _tokenWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens left in the allowance.\n', '     * @return Amount of tokens left in the allowance\n', '     */\n', '    function remainingTokens() public view returns (uint256) {\n', '        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent behavior by transferring tokens from wallet.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Amount of tokens purchased\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _openingTime;\n', '    uint256 private _closingTime;\n', '\n', '    /**\n', '     * Event for crowdsale extending\n', '     * @param newClosingTime new closing time\n', '     * @param prevClosingTime old closing time\n', '     */\n', '    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\n', '\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyWhileOpen {\n', '        require(isOpen(), "TimedCrowdsale: not open");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor, takes crowdsale opening and closing times.\n', '     * @param openingTime Crowdsale opening time\n', '     * @param closingTime Crowdsale closing time\n', '     */\n', '    constructor (uint256 openingTime, uint256 closingTime) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(openingTime >= block.timestamp, "TimedCrowdsale: opening time is before current time");\n', '        // solhint-disable-next-line max-line-length\n', '        require(closingTime > openingTime, "TimedCrowdsale: opening time is not before closing time");\n', '\n', '        _openingTime = openingTime;\n', '        _closingTime = closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale opening time.\n', '     */\n', '    function openingTime() public view returns (uint256) {\n', '        return _openingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale closing time.\n', '     */\n', '    function closingTime() public view returns (uint256) {\n', '        return _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is open, false otherwise.\n', '     */\n', '    function isOpen() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '     * @return Whether crowdsale period has elapsed\n', '     */\n', '    function hasClosed() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp > _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period.\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Extend crowdsale.\n', '     * @param newClosingTime Crowdsale closing time\n', '     */\n', '    function _extendTime(uint256 newClosingTime) internal {\n', '        require(!hasClosed(), "TimedCrowdsale: already closed");\n', '        // solhint-disable-next-line max-line-length\n', '        require(newClosingTime > _closingTime, "TimedCrowdsale: new closing time is before current closing time");\n', '\n', '        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n', '        _closingTime = newClosingTime;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n', ' * can do extra work after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool private _finalized;\n', '\n', '    event CrowdsaleFinalized();\n', '\n', '    constructor () internal {\n', '        _finalized = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is finalized, false otherwise.\n', '     */\n', '    function finalized() public view returns (bool) {\n', '        return _finalized;\n', '    }\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', "     * work. Calls the contract's finalization function.\n", '     */\n', '    function finalize() public {\n', '        require(!_finalized, "FinalizableCrowdsale: already finalized");\n', '        require(hasClosed(), "FinalizableCrowdsale: not closed");\n', '\n', '        _finalized = true;\n', '\n', '        _finalization();\n', '        emit CrowdsaleFinalized();\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super._finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function _finalization() internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Secondary.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it).\n', ' */\n', 'contract Secondary is Context {\n', '    address private _primary;\n', '\n', '    /**\n', '     * @dev Emitted when the primary contract changes.\n', '     */\n', '    event PrimaryTransferred(\n', '        address recipient\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _primary = msgSender;\n', '        emit PrimaryTransferred(msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if called from any account other than the primary.\n', '     */\n', '    modifier onlyPrimary() {\n', '        require(_msgSender() == _primary, "Secondary: caller is not the primary account");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the primary.\n', '     */\n', '    function primary() public view returns (address) {\n', '        return _primary;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers contract to a new primary.\n', '     * @param recipient The address of new primary.\n', '     */\n', '    function transferPrimary(address recipient) public onlyPrimary {\n', '        require(recipient != address(0), "Secondary: new primary is the zero address");\n', '        _primary = recipient;\n', '        emit PrimaryTransferred(recipient);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/payment/escrow/Escrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', ' /**\n', '  * @title Escrow\n', '  * @dev Base escrow contract, holds funds designated for a payee until they\n', '  * withdraw them.\n', '  *\n', '  * Intended usage: This contract (and derived escrow contracts) should be a\n', '  * standalone contract, that only interacts with the contract that instantiated\n', '  * it. That way, it is guaranteed that all Ether will be handled according to\n', '  * the `Escrow` rules, and there is no need to check for payable functions or\n', '  * transfers in the inheritance tree. The contract that uses the escrow as its\n', '  * payment method should be its primary, and provide public methods redirecting\n', "  * to the escrow's deposit and withdraw.\n", '  */\n', 'contract Escrow is Secondary {\n', '    using SafeMath for uint256;\n', '    using Address for address payable;\n', '\n', '    event Deposited(address indexed payee, uint256 weiAmount);\n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '    mapping(address => uint256) private _deposits;\n', '\n', '    function depositsOf(address payee) public view returns (uint256) {\n', '        return _deposits[payee];\n', '    }\n', '\n', '    /**\n', '     * @dev Stores the sent amount as credit to be withdrawn.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function deposit(address payee) public onlyPrimary payable {\n', '        uint256 amount = msg.value;\n', '        _deposits[payee] = _deposits[payee].add(amount);\n', '\n', '        emit Deposited(payee, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance for a payee, forwarding 2300 gas (a\n', '     * Solidity `transfer`).\n', '     *\n', '     * NOTE: This function has been deprecated, use {withdrawWithGas} instead.\n', '     * Calling contracts with fixed-gas limits is an anti-pattern and may break\n', '     * contract interactions in network upgrades (hardforks).\n', '     * https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more.]\n', '     *\n', '     * @param payee The address whose funds will be withdrawn and transferred to.\n', '     */\n', '    function withdraw(address payable payee) public onlyPrimary {\n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        payee.transfer(payment);\n', '\n', '        emit Withdrawn(payee, payment);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {withdraw}, but forwarding all gas to the recipient.\n', '     *\n', '     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n', '     * Make sure you trust the recipient, or are either following the\n', '     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function withdrawWithGas(address payable payee) public onlyPrimary {\n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        payee.sendValue(payment);\n', '\n', '        emit Withdrawn(payee, payment);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/payment/escrow/ConditionalEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '    /**\n', '     * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '     * implemented by derived contracts.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function withdrawalAllowed(address payee) public view returns (bool);\n', '\n', '    function withdraw(address payable payee) public {\n', '        require(withdrawalAllowed(payee), "ConditionalEscrow: payee is not allowed to withdraw");\n', '        super.withdraw(payee);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/payment/escrow/RefundEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n', ' * parties.\n', ' * @dev Intended usage: See {Escrow}. Same usage guidelines apply here.\n', ' * @dev The primary account (that is, the contract that instantiates this\n', ' * contract) may deposit, close the deposit period, and allow for either\n', ' * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n', ' * with `RefundEscrow` will be made through the primary contract. See the\n', ' * `RefundableCrowdsale` contract for an example of `RefundEscrow`’s use.\n', ' */\n', 'contract RefundEscrow is ConditionalEscrow {\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    event RefundsClosed();\n', '    event RefundsEnabled();\n', '\n', '    State private _state;\n', '    address payable private _beneficiary;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param beneficiary The beneficiary of the deposits.\n', '     */\n', '    constructor (address payable beneficiary) public {\n', '        require(beneficiary != address(0), "RefundEscrow: beneficiary is the zero address");\n', '        _beneficiary = beneficiary;\n', '        _state = State.Active;\n', '    }\n', '\n', '    /**\n', '     * @return The current state of the escrow.\n', '     */\n', '    function state() public view returns (State) {\n', '        return _state;\n', '    }\n', '\n', '    /**\n', '     * @return The beneficiary of the escrow.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores funds that may later be refunded.\n', '     * @param refundee The address funds will be sent to if a refund occurs.\n', '     */\n', '    function deposit(address refundee) public payable {\n', '        require(_state == State.Active, "RefundEscrow: can only deposit while active");\n', '        super.deposit(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '     * further deposits.\n', '     */\n', '    function close() public onlyPrimary {\n', '        require(_state == State.Active, "RefundEscrow: can only close while active");\n', '        _state = State.Closed;\n', '        emit RefundsClosed();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for refunds to take place, rejecting further deposits.\n', '     */\n', '    function enableRefunds() public onlyPrimary {\n', '        require(_state == State.Active, "RefundEscrow: can only enable refunds while active");\n', '        _state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /**\n', "     * @dev Withdraws the beneficiary's funds.\n", '     */\n', '    function beneficiaryWithdraw() public {\n', '        require(_state == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");\n', '        _beneficiary.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n', "     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n", '     */\n', '    function withdrawalAllowed(address) public view returns (bool) {\n', '        return _state == State.Refunding;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/crowdsale/distribution/RefundableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of `FinalizableCrowdsale` contract that adds a funding goal, and the possibility of users\n', ' * getting a refund if goal is not met.\n', ' *\n', ' * Deprecated, use `RefundablePostDeliveryCrowdsale` instead. Note that if you allow tokens to be traded before the goal\n', ' * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\n', ' * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\n', ' * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\n', ' */\n', 'contract RefundableCrowdsale is Context, FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 private _goal;\n', '\n', '    // refund escrow used to hold funds while crowdsale is running\n', '    RefundEscrow private _escrow;\n', '\n', '    /**\n', '     * @dev Constructor, creates RefundEscrow.\n', '     * @param goal Funding goal\n', '     */\n', '    constructor (uint256 goal) public {\n', '        require(goal > 0, "RefundableCrowdsale: goal is 0");\n', '        _escrow = new RefundEscrow(wallet());\n', '        _goal = goal;\n', '    }\n', '\n', '    /**\n', '     * @return minimum amount of funds to be raised in wei.\n', '     */\n', '    function goal() public view returns (uint256) {\n', '        return _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful.\n', '     * @param refundee Whose refund will be claimed.\n', '     */\n', '    function claimRefund(address payable refundee) public {\n', '        require(finalized(), "RefundableCrowdsale: not finalized");\n', '        require(!goalReached(), "RefundableCrowdsale: goal reached");\n', '\n', '        _escrow.withdraw(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev Escrow finalization task, called when finalize() is called.\n', '     */\n', '    function _finalization() internal {\n', '        if (goalReached()) {\n', '            _escrow.close();\n', '            _escrow.beneficiaryWithdraw();\n', '        } else {\n', '            _escrow.enableRefunds();\n', '        }\n', '\n', '        super._finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _escrow.deposit.value(msg.value)(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ds-hub.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface DSAuthority {\n', '  function canCall(\n', '    address src,\n', '    address dst,\n', '    bytes4 sig\n', '  ) external view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '  event LogSetAuthority(address indexed authority);\n', '  event LogSetOwner(address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '  DSAuthority public authority;\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    emit LogSetOwner(msg.sender);\n', '  }\n', '\n', '  function setOwner(address owner_) public auth {\n', '    owner = owner_;\n', '    emit LogSetOwner(owner);\n', '  }\n', '\n', '  function setAuthority(DSAuthority authority_) public auth {\n', '    authority = authority_;\n', '    emit LogSetAuthority(address(authority));\n', '  }\n', '\n', '  modifier auth {\n', '    require(isAuthorized(msg.sender, msg.sig), "ds-auth-unauthorized");\n', '    _;\n', '  }\n', '\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    if (src == address(this)) {\n', '      return true;\n', '    } else if (src == owner) {\n', '      return true;\n', '    } else if (authority == DSAuthority(0)) {\n', '      return false;\n', '    } else {\n', '      return authority.canCall(src, address(this), sig);\n', '    }\n', '  }\n', '}\n', '\n', 'contract DSNote {\n', '  event LogNote(bytes4 indexed sig, address indexed guy, bytes32 indexed foo, bytes32 indexed bar, uint256 wad, bytes fax) anonymous;\n', '\n', '  modifier note {\n', '    bytes32 foo;\n', '    bytes32 bar;\n', '    uint256 wad;\n', '\n', '    assembly {\n', '      foo := calldataload(4)\n', '      bar := calldataload(36)\n', '      wad := callvalue()\n', '    }\n', '\n', '    _;\n', '\n', '    emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\n', '  }\n', '}\n', '\n', 'contract DSMath {\n', '  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require((z = x + y) >= x, "ds-math-add-overflow");\n', '  }\n', '\n', '  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require((z = x - y) <= x, "ds-math-sub-underflow");\n', '  }\n', '\n', '  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '  }\n', '\n', '  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    return x <= y ? x : y;\n', '  }\n', '\n', '  function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    return x >= y ? x : y;\n', '  }\n', '\n', '  function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '    return x <= y ? x : y;\n', '  }\n', '\n', '  function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '    return x >= y ? x : y;\n', '  }\n', '\n', '  uint256 constant WAD = 10**18;\n', '  uint256 constant RAY = 10**27;\n', '\n', '  //rounds to zero if x*y < WAD / 2\n', '  function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = add(mul(x, y), WAD / 2) / WAD;\n', '  }\n', '\n', '  //rounds to zero if x*y < WAD / 2\n', '  function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = add(mul(x, y), RAY / 2) / RAY;\n', '  }\n', '\n', '  //rounds to zero if x*y < WAD / 2\n', '  function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = add(mul(x, WAD), y / 2) / y;\n', '  }\n', '\n', '  //rounds to zero if x*y < RAY / 2\n', '  function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '    z = add(mul(x, RAY), y / 2) / y;\n', '  }\n', '\n', '  // This famous algorithm is called "exponentiation by squaring"\n', '  // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '  //\n', "  // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '  //\n', '  // These facts are why it works:\n', '  //\n', '  //  If n is even, then x^n = (x^2)^(n/2).\n', '  //  If n is odd,  then x^n = x * x^(n-1),\n', '  //   and applying the equation for even x gives\n', '  //    x^n = x * (x^2)^((n-1) / 2).\n', '  //\n', '  //  Also, EVM division is flooring and\n', '  //    floor[(n-1) / 2] = floor[n / 2].\n', '  //\n', '  function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '    z = n % 2 != 0 ? x : RAY;\n', '\n', '    for (n /= 2; n != 0; n /= 2) {\n', '      x = rmul(x, x);\n', '\n', '      if (n % 2 != 0) {\n', '        z = rmul(z, x);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', 'contract DSThing is DSAuth, DSNote, DSMath {\n', '  function S(string memory s) internal pure returns (bytes4) {\n', '    return bytes4(keccak256(abi.encodePacked(s)));\n', '  }\n', '}\n', '\n', 'contract DSValue is DSThing {\n', '  bool has;\n', '  bytes32 val;\n', '\n', '  function peek() public view returns (bytes32, bool) {\n', '    return (val, has);\n', '  }\n', '\n', '  function read() public view returns (bytes32) {\n', '    bytes32 wut;\n', '    bool haz;\n', '    (wut, haz) = peek();\n', '    require(haz, "haz-not");\n', '    return wut;\n', '  }\n', '\n', '  function poke(bytes32 wut) public note auth {\n', '    val = wut;\n', '    has = true;\n', '  }\n', '\n', '  function void() public note auth {\n', '    // unset the value\n', '    has = false;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.10;\n', '\n', 'interface IUniswapV2Pair {\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  function name() external pure returns (string memory);\n', '\n', '  function symbol() external pure returns (string memory);\n', '\n', '  function decimals() external pure returns (uint8);\n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address owner) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  ) external returns (bool);\n', '\n', '  function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '  function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '  function nonces(address owner) external view returns (uint256);\n', '\n', '  function permit(\n', '    address owner,\n', '    address spender,\n', '    uint256 value,\n', '    uint256 deadline,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external;\n', '\n', '  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n', '  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n', '  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n', '  event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '  function MINIMUM_LIQUIDITY() external pure returns (uint256);\n', '\n', '  function factory() external view returns (address);\n', '\n', '  function token0() external view returns (address);\n', '\n', '  function token1() external view returns (address);\n', '\n', '  function getReserves() external view returns (uint112 reserve0, uint112 reserve1);\n', '\n', '  function price0CumulativeLast() external view returns (uint256);\n', '\n', '  function price1CumulativeLast() external view returns (uint256);\n', '\n', '  function kLast() external view returns (uint256);\n', '\n', '  function mint(address to) external returns (uint256 liquidity);\n', '\n', '  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n', '\n', '  function swap(\n', '    uint256 amount0Out,\n', '    uint256 amount1Out,\n', '    address to,\n', '    bytes calldata data\n', '  ) external;\n', '\n', '  function skim(address to) external;\n', '\n', '  function sync() external;\n', '\n', '  function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/sale/PricePicker.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '// calc eth price in usd\n', 'contract PricePicker is DSMath, Ownable {\n', '  function src() public pure returns (address) {\n', '    return 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11;\n', '  }\n', '\n', '  function getPrice() public view returns (uint256) {\n', '    (uint112 reserve0, uint112 reserve1) = IUniswapV2Pair(src()).getReserves();\n', '    return wdiv(uint256(reserve0), uint256(reserve1));\n', '  }\n', '}\n', '\n', '// File: contracts/sale/RoundCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', 'contract RoundCrowdsale is DSMath, Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool private _initialized;\n', '\n', '  uint256 private _startTime;\n', '\n', '  uint256 private _nRound;\n', '\n', '  // array of block time stamps\n', '  uint256[] private _roundEndTime;\n', '\n', '  // array of rates of tokens per wei in WAD unit.\n', '  uint256[] private _rates;\n', '\n', '  uint256 private _roundTokenCap;\n', '\n', '  mapping(uint256 => uint256) private _roundSoldToken;\n', '\n', '  function initialize(\n', '    uint256 roundTokenCap,\n', '    uint256 startTime,\n', '    uint256[] memory roundEndTime,\n', '    uint256[] memory rates\n', '  ) public {\n', '    require(_initialized == false);\n', '    require(roundEndTime.length == rates.length, "RoundCrowdsale: invalid input length");\n', '    require(startTime < roundEndTime[0], "RoundCrowdsale: invalid start time");\n', '\n', '    uint256 n = roundEndTime.length;\n', '\n', '    for (uint256 i = 1; i < n; i++) {\n', '      require(roundEndTime[i - 1] < roundEndTime[i], "RoundCrowdsale: time not sorted");\n', '    }\n', '    _startTime = startTime;\n', '    _nRound = n;\n', '\n', '    _roundEndTime = roundEndTime;\n', '    _rates = rates;\n', '\n', '    _roundTokenCap = roundTokenCap;\n', '\n', '    _initialized = true;\n', '  }\n', '\n', '  function nRound() public view returns (uint256) {\n', '    return _nRound;\n', '  }\n', '\n', '  function startTime() public view returns (uint256) {\n', '    return _startTime;\n', '  }\n', '\n', '  function roundEndTimes(uint256 i) public view returns (uint256) {\n', '    return _roundEndTime[i];\n', '  }\n', '\n', '  function roundSoldToken(uint256 i) public view returns (uint256) {\n', '    return _roundSoldToken[i];\n', '  }\n', '\n', '  function roundTokenCap() public view returns (uint256) {\n', '    return _roundTokenCap;\n', '  }\n', '\n', '  function rates(uint256 i) external view returns (uint256) {\n', '    return _rates[i];\n', '  }\n', '\n', '  function isOpen() public view returns (bool) {\n', '    // solhint-disable-next-line not-rely-on-time\n', '    return block.timestamp >= _startTime && block.timestamp <= _roundEndTime[_roundEndTime.length - 1];\n', '  }\n', '\n', '  /**\n', "   * The base rate function is overridden to revert, since this crowdsale doesn't use it, and\n", '   * all calls to it are a mistake.\n', '   */\n', '  function rate() public view returns (uint256) {\n', '    revert("RoundCrowdsale: rate() called");\n', '  }\n', '\n', '  function getCurrentRound() public view returns (uint256) {\n', '    require(isOpen());\n', '\n', '    uint256 index;\n', '    for (; index < _rates.length; index++) {\n', '      if (block.timestamp <= _roundEndTime[index]) break;\n', '    }\n', '\n', '    return index;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the rate of tokens per wei at the present time.\n', '   * Note that, as price _increases_ with time, the rate _decreases_.\n', '   * @return The number of tokens a buyer gets per wei at a given time\n', '   */\n', '  function getCurrentRate() public view returns (uint256) {\n', '    if (!isOpen()) {\n', '      return 0;\n', '    }\n', '\n', '    return _rates[getCurrentRound()];\n', '  }\n', '\n', '  /**\n', '   * @dev Override Crowdsale#_processPurchase\n', '   * @param beneficiary Address receiving the tokens\n', '   * @param tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '    uint256 index = getCurrentRound();\n', '\n', '    require(_roundSoldToken[index].add(tokenAmount) < _roundTokenCap, "RoundCrowdsale: over payment");\n', '\n', '    _roundSoldToken[index] = _roundSoldToken[index].add(tokenAmount);\n', '    super._processPurchase(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent method taking into account variable rate.\n', '   * @param weiAmount The value in wei to be converted into tokens\n', '   * @return The number of tokens _weiAmount wei will buy at present time\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    uint256 currentRate = getCurrentRate();\n', '    return wmul(currentRate, weiAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale._preValidatePurchase\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(isOpen(), "RoundCrowdsale: not open yet");\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '  }\n', '}\n', '\n', '// File: contracts/lib/MerkleProof.sol\n', '\n', '// https://github.com/ameensol/merkle-tree-solidity/blob/master/src/MerkleProof.sol\n', '\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'contract MerkleProof {\n', '  function checkProof(\n', '    bytes memory proof,\n', '    bytes32 root,\n', '    bytes32 hash\n', '  ) public pure returns (bool) {\n', '    bytes32 el;\n', '    bytes32 h = hash;\n', '\n', '    for (uint256 i = 32; i <= proof.length; i += 32) {\n', '      assembly {\n', '        el := mload(add(proof, i))\n', '      }\n', '\n', '      if (h < el) {\n', '        h = keccak256(abi.encodePacked(h, el));\n', '      } else {\n', '        h = keccak256(abi.encodePacked(el, h));\n', '      }\n', '    }\n', '\n', '    return h == root;\n', '  }\n', '\n', '  // from StorJ -- https://github.com/nginnever/storj-audit-verifier/blob/master/contracts/MerkleVerifyv3.sol\n', '  function checkProofOrdered(\n', '    bytes memory proof,\n', '    bytes32 root,\n', '    bytes32 hash,\n', '    uint256 index\n', '  ) public pure returns (bool) {\n', '    // use the index to determine the node ordering\n', '    // index ranges 1 to n\n', '\n', '    bytes32 el;\n', '    bytes32 h = hash;\n', '    uint256 remaining;\n', '\n', '    for (uint256 j = 32; j <= proof.length; j += 32) {\n', '      assembly {\n', '        el := mload(add(proof, j))\n', '      }\n', '\n', '      // calculate remaining elements in proof\n', '      remaining = (proof.length - j + 32) / 32;\n', '\n', "      // we don't assume that the tree is padded to a power of 2\n", '      // if the index is odd then the proof will start with a hash at a higher\n', '      // layer, so we have to adjust the index to be the index at that layer\n', '      while (remaining > 0 && index % 2 == 1 && index > 2**remaining) {\n', '        index = uint256(index) / 2 + 1;\n', '      }\n', '\n', '      if (index % 2 == 0) {\n', '        h = keccak256(abi.encodePacked(el, h));\n', '        index = index / 2;\n', '      } else {\n', '        h = keccak256(abi.encodePacked(h, el));\n', '        index = uint256(index) / 2 + 1;\n', '      }\n', '    }\n', '\n', '    return h == root;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/LeafLib.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', '\n', 'contract LeafLib is MerkleProof {\n', '  mapping(address => uint256) public amounts;\n', '  mapping(bytes32 => bool) public isRoot;\n', '  bytes32[] public roots;\n', '\n', '  function addRoot(bytes32 root) public {\n', '    require(!isRoot[root], "duplicate-root");\n', '    isRoot[root] = true;\n', '    roots.push(root);\n', '  }\n', '\n', '  function addLeaf(\n', '    bytes32 root,\n', '    address account,\n', '    uint256 amount,\n', '    bytes memory proof\n', '  ) public {\n', '    require(isRoot[root], "no-root");\n', '\n', '    bytes32 h = keccak256(abi.encode(account, amount));\n', '\n', '    require(checkProof(proof, root, h), "invalid-proof");\n', '\n', '    amounts[account] = amount;\n', '  }\n', '}\n', '\n', '// File: contracts/sale/MerkleProofCappedCrowdsale.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '\n', 'contract MerkleProofCappedCrowdsale is Ownable, LeafLib, Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => bool) public isRootAdder;\n', '\n', '  modifier onlyRootAdder() {\n', '    require(msg.sender == owner() || isRootAdder[msg.sender], "no-root-adder");\n', '    _;\n', '  }\n', '\n', '  function addRootAdder(address account) external onlyOwner {\n', '    isRootAdder[account] = true;\n', '  }\n', '\n', '  function addRoot(bytes32 root) public onlyRootAdder {\n', '    super.addRoot(root);\n', '  }\n', '\n', '  mapping(address => uint256) private _contributions;\n', '\n', '  /**\n', '   * @dev Returns the amount contributed so far by a specific beneficiary.\n', '   * @param beneficiary Address of contributor\n', '   * @return Beneficiary contribution so far\n', '   */\n', '  function getContribution(address beneficiary) public view returns (uint256) {\n', '    return _contributions[beneficiary];\n', '  }\n', '\n', '  /**\n', '   * @param amount cap\n', '   * @param root merkle root\n', '   * @param proof merkle proof\n', '   */\n', '  function buyTokensWithProof(\n', '    uint256 amount,\n', '    bytes32 root,\n', '    bytes calldata proof\n', '  ) external payable {\n', '    addLeaf(root, msg.sender, amount, proof);\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(_contributions[beneficiary].add(weiAmount) <= amounts[beneficiary], "MerkleProofCappedCrowdsale: exceeds cap");\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior to update beneficiary contributions.\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '    super._updatePurchasingState(beneficiary, weiAmount);\n', '    _contributions[beneficiary] = _contributions[beneficiary].add(weiAmount);\n', '  }\n', '}\n', '\n', '// File: contracts/sale/PublicSale.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev RefundableCrowdsale is only used to prevent `wallet` from receiving Ether\n', ' *      during crowdsale.\n', ' */\n', 'contract PublicSale is\n', '  DSMath,\n', '  Ownable,\n', '  Crowdsale,\n', '  AllowanceCrowdsale,\n', '  TimedCrowdsale,\n', '  MerkleProofCappedCrowdsale,\n', '  FinalizableCrowdsale,\n', '  RefundableCrowdsale,\n', '  RoundCrowdsale,\n', '  PricePicker\n', '{\n', '  constructor(\n', '    IERC20 token, // The token being sold\n', '    address payable wallet, // Address where funds are collected\n', '    address tokenWallet, // Address where the token is stored\n', '    uint256 openingTime, // Time when the sale is opened\n', '    uint256 closingTime\n', '  ) public Crowdsale(1, wallet, token) AllowanceCrowdsale(tokenWallet) TimedCrowdsale(openingTime, closingTime) RefundableCrowdsale(1) {}\n', '\n', '  ////////////////////////\n', '  // Prices\n', '  ////////////////////////\n', '  function DAI_CFX() public view returns (uint256) {\n', '    return getCurrentRate();\n', '  }\n', '\n', '  function ETH_DAI() public view returns (uint256) {\n', '    return getPrice();\n', '  }\n', '\n', '  function ETH_CFX() public view returns (uint256) {\n', '    return wdiv(ETH_DAI(), DAI_CFX());\n', '  }\n', '\n', '  /**\n', '   * @dev Override Crowdsale#_getTokenAmount\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    return calcTokenAmountWithEthPrice(weiAmount);\n', '  }\n', '\n', '  function calcTokenAmountWithEthPrice(uint256 ethAmount) public view returns (uint256) {\n', '    return wmul(ethAmount, ETH_CFX());\n', '  }\n', '\n', '  function isOpen() public view returns (bool) {\n', '    return RoundCrowdsale.isOpen() && TimedCrowdsale.isOpen();\n', '  }\n', '\n', '  /**\n', '   * @dev Override FinalizableCrowdsale#finalize\n', '   */\n', '  function finalize() public onlyOwner {\n', '    super.finalize();\n', '  }\n', '\n', '  /**\n', '   * @dev Override RefundableCrowdsale#claimRefund\n', '   */\n', '  function claimRefund(address payable) public {\n', '    revert("PublicSale: not supported");\n', '  }\n', '\n', '  /**\n', '   * @dev Override RefundableCrowdsale#goalReached\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return hasClosed();\n', '  }\n', '\n', '  function goal() public view returns (uint256) {\n', '    revert("PublicSale: not supported");\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale._preValidatePurchase\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(msg.sender == tx.origin, "PublicSale: invalid tx origin");\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '  }\n', '}']