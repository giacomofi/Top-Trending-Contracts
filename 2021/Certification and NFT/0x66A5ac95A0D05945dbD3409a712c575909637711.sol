['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-15\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.3 https://hardhat.org\n', '\n', '// File contracts/core/ArmorToken.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '// This minime token contract adjusted by ArmorFi to remove all functionality of\n', '// inheriting from a parent and only keep functionality related to keeping track of\n', '// balances through different checkpoints.\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract ArmorToken {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = '69_420'; //An arbitrary versioning scheme\n", '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Shield that is allowed to mint tokens to peeps.\n', '    address public arShield;\n', '    // ShieldController--can just withdraw tokens.\n', '    address public controller;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    constructor(\n', '        address _arShield,\n', '        string memory _tokenName,\n', '        string memory _tokenSymbol\n', '    ) \n', '    {\n', '        require(arShield == address(0), "Contract already initialized.");\n', '        arShield = _arShield;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = 18;                                     // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        creationBlock = block.number;\n', '        controller = msg.sender;\n', '    }\n', '\n', '    modifier onlyController\n', '    {\n', '        require(msg.sender == controller, "Sender must be controller.");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyShield\n', '    {\n', '        require(msg.sender == arShield, "Sender must be shield.");\n', '        _;\n', '    }\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return success Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return success True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '\n', '        // The standard ERC 20 transferFrom functionality\n', '        require(allowed[_from][msg.sender] >= _amount);\n', '        allowed[_from][msg.sender] -= _amount;\n', '\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '           if (_amount == 0) {\n', '               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '               return;\n', '           }\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require(_to != address(this));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '\n', '           require(previousBalanceFrom >= _amount);\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           emit Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return balance The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return success True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        \n', "        // Armor is removing this cause frankly it's a bit annoying and so unlikely.\n", '        //require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return remaining Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '                return 0;\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '                return 0;\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function mint(address _owner, uint _amount\n', '    ) public onlyShield returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(address(0), _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function burn(uint _amount\n', '    )  public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(msg.sender);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[msg.sender], previousBalanceFrom - _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) view internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint minimum = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > minimum) {\n', '            uint mid = (max + minimum + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                minimum = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[minimum].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               //Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               checkpoints.push( Checkpoint( uint128(block.number), uint128(_value) ) );\n', '               //newCheckPoint.fromBlock =  uint128(block.number);\n', '               //newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == address(0)) {\n', '            payable(controller).transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ArmorToken token = ArmorToken(_token);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(controller, balance);\n', '        emit ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '// File contracts/general/Governable.sol\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '/**\n', ' * @title Governable\n', ' * @dev Pretty default ownable but with variable names changed to better convey owner.\n', ' */\n', 'contract Governable {\n', '    address payable private _governor;\n', '    address payable private _pendingGovernor;\n', '\n', '    event OwnershipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function initializeOwnable() internal {\n', '        require(_governor == address(0), "already initialized");\n', '        _governor = payable(msg.sender);\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function governor() public view returns (address payable) {\n', '        return _governor;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGov() {\n', '        require(isGov(), "msg.sender is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isGov() public view returns (bool) {\n', '        return msg.sender == _governor;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newGovernor The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address payable newGovernor) public onlyGov {\n', '        _pendingGovernor = newGovernor;\n', '    }\n', '\n', '    function receiveOwnership() public {\n', '        require(msg.sender == _pendingGovernor, "Only pending governor can call this function");\n', '        _transferOwnership(_pendingGovernor);\n', '        _pendingGovernor = payable(address(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newGovernor The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address payable newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit OwnershipTransferred(_governor, newGovernor);\n', '        _governor = newGovernor;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IarShield.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IarShield {\n', '    function initialize(\n', '        address _oracle,\n', '        address _pToken,\n', '        address _arToken,\n', '        address _uTokenLink,\n', '        uint256[] calldata _fees,\n', '        address[] calldata _covBases\n', '    ) \n', '      external;\n', '    function locked() external view returns(bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ICovBase.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', 'interface ICovBase {\n', '    function editShield(address shield, bool active) external;\n', '    function updateShield(uint256 ethValue) external payable;\n', '    function checkCoverage(uint256 pAmount) external view returns (bool);\n', '    function getShieldOwed(address shield) external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/proxies/Proxy.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'abstract contract Proxy {\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    fallback() external payable {\n', '        address _impl = implementation();\n', '        require(_impl != address(0));\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize())\n', '            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n', '            let size := returndatasize()\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '            }\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function implementation() public view virtual returns (address);\n', '}\n', '\n', '\n', '// File contracts/proxies/UpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param implementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    // Storage position of the address of the current implementation\n', '    bytes32 private constant IMPLEMENTATION_POSITION = keccak256("org.armor.proxy.implementation");\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor() public {}\n', '\n', '    /**\n', '    * @dev Tells the address of the current implementation\n', '    * @return impl address of the current implementation\n', '    */\n', '    function implementation() public view override returns (address impl) {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '            impl := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the current implementation\n', '    * @param _newImplementation address representing the new implementation to be set\n', '    */\n', '    function _setImplementation(address _newImplementation) internal {\n', '        bytes32 position = IMPLEMENTATION_POSITION;\n', '        assembly {\n', '        sstore(position, _newImplementation)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Upgrades the implementation address\n', '    * @param _newImplementation representing the address of the new implementation to be set\n', '    */\n', '    function _upgradeTo(address _newImplementation) internal {\n', '        address currentImplementation = implementation();\n', '        require(currentImplementation != _newImplementation);\n', '        _setImplementation(_newImplementation);\n', '        emit Upgraded(_newImplementation);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/proxies/OwnedUpgradeabilityProxy.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '/**\n', ' * @title OwnedUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n', ' */\n', 'contract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    // Storage position of the owner of the contract\n', '    bytes32 private constant PROXY_OWNER_POSITION = keccak256("org.armor.proxy.owner");\n', '\n', '    /**\n', '    * @dev the constructor sets the original owner of the contract to the sender account.\n', '    */\n', '    constructor(address _implementation) public {\n', '        _setUpgradeabilityOwner(msg.sender);\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == proxyOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return owner the address of the owner\n', '    */\n', '    function proxyOwner() public view returns (address owner) {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            owner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n', '        require(_newOwner != address(0));\n', '        _setUpgradeabilityOwner(_newOwner);\n', '        emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n', '    * @param _implementation representing the address of the new implementation to be set.\n', '    */\n', '    function upgradeTo(address _implementation) public onlyProxyOwner {\n', '        _upgradeTo(_implementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of the owner\n', '    */\n', '    function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n', '        bytes32 position = PROXY_OWNER_POSITION;\n', '        assembly {\n', '            sstore(position, _newProxyOwner)\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/core/ShieldController.sol\n', '\n', '// SPDX-License-Identifier: (c) Armor.Fi, 2021\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '/** \n', ' * @title Shield Controller\n', ' * @notice Shield Controller is in charge of creating new shields and storing universal variables.\n', ' * @author Armor.fi -- Robert M.C. Forster\n', '**/\n', 'contract ShieldController is Governable {\n', '\n', '    // Liquidation bonus for users who are liquidating funds.\n', '    uint256 public bonus;\n', '    // Fee % for referrals. 10000 == 100% of the rest of the fees.\n', '    uint256 public refFee;\n', '    // Amount that needs to be deposited to lock the contract.\n', '    uint256 public depositAmt;\n', '    // Default beneficiary of all shields.\n', '    address payable public beneficiary;\n', '    // List of all arShields\n', '    address[] private arShields;\n', '\n', '    function initialize(\n', '        uint256 _bonus,\n', '        uint256 _refFee,\n', '        uint256 _depositAmt\n', '    )\n', '      external\n', '    {\n', '        require(arShields.length == 0, "Contract already initialized.");\n', '        initializeOwnable();\n', '        bonus = _bonus;\n', '        refFee = _refFee;\n', '        depositAmt = _depositAmt;\n', '        beneficiary = payable(msg.sender);\n', '    }\n', '\n', '    // In case a token has Ether lost in it we need to be able to receive.\n', '    receive() external payable {}\n', '\n', '    /**\n', '     * @notice Create a new arShield from an already-created family.\n', '     * @param _name Name of the armorToken to be created.\n', '     * @param _symbol Symbol of the armorToken to be created.\n', "     * @param _oracle Address of the family's oracle contract to find token value.\n", '     * @param _pToken Protocol token that the shield will use.\n', '     * @param _uTokenLink Address of the ChainLink contract for the underlying token.\n', '     * @param _masterCopy Mastercopy for the arShield proxy.\n', '     * @param _fees Mint/redeem fee for each coverage base.\n', '     * @param _covBases Coverage bases that the shield will subscribe to.\n', '    **/\n', '    function createShield(\n', '        string calldata _name,\n', '        string calldata _symbol,\n', '        address _oracle,\n', '        address _pToken,\n', '        address _uTokenLink,\n', '        address _masterCopy,\n', '        uint256[] calldata _fees,\n', '        address[] calldata _covBases\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        address proxy = address( new OwnedUpgradeabilityProxy(_masterCopy) );\n', '        address token = address( new ArmorToken(proxy, _name, _symbol) );\n', '        \n', '        IarShield(proxy).initialize(\n', '            _oracle,\n', '            _pToken,\n', '            token,\n', '            _uTokenLink,\n', '            _fees,\n', '            _covBases\n', '        );\n', '        \n', '        for(uint256 i = 0; i < _covBases.length; i++) ICovBase(_covBases[i]).editShield(proxy, true);\n', '\n', '        arShields.push(proxy);\n', '        OwnedUpgradeabilityProxy( payable(proxy) ).transferProxyOwnership(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Delete a shield. We use both shield address and index for safety.\n', '     * @param _shield Address of the shield to delete from array.\n', '     * @param _idx Index of the shield in the arShields array.\n', '    **/\n', '    function deleteShield(\n', '        address _shield,\n', '        uint256 _idx\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        if (arShields[_idx] == _shield) delete arShields[_idx];\n', '        arShields[_idx] = arShields[arShields.length - 1];\n', '        arShields.pop();\n', '    }\n', '\n', '    /**\n', '     * @notice Claim any lost tokens on an arShield contract.\n', '     * @param _armorToken Address of the Armor token that has tokens or ether lost in it.\n', '     * @param _token The address of the lost token.\n', '     * @param _beneficiary Address to send the tokens to.\n', '    **/\n', '    function claimTokens(\n', '        address _armorToken,\n', '        address _token,\n', '        address payable _beneficiary\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        ArmorToken(_armorToken).claimTokens(_token);\n', '        if (_token == address(0)) _beneficiary.transfer(address(this).balance);\n', '        else ArmorToken(_token).transfer( _beneficiary, ArmorToken(_token).balanceOf( address(this) ) );\n', '    }\n', '\n', '    /**\n', '     * @notice Edit the discount on Chainlink price that liquidators receive.\n', '     * @param _newBonus The new bonus amount that will be given to liquidators.\n', '    **/\n', '    function changeBonus(\n', '        uint256 _newBonus\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        bonus = _newBonus;\n', '    }\n', '\n', '    /**\n', '     * @notice Change amount required to deposit to lock a shield.\n', '     * @param _depositAmt New required deposit amount in Ether to lock a contract.\n', '    **/\n', '    function changeDepositAmt(\n', '        uint256 _depositAmt\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        depositAmt = _depositAmt;\n', '    }\n', '\n', '    /**\n', '     * @notice Change amount required to deposit to lock a shield.\n', '     * @param _refFee New fee to be paid to referrers. 10000 == 100%\n', '     *                of the protocol fees that will be charged.\n', '    **/\n', '    function changeRefFee(\n', '        uint256 _refFee\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        refFee = _refFee;\n', '    }\n', '\n', '    /**\n', '     * @notice Change the main beneficiary of all shields.\n', '     * @param _beneficiary New address to withdraw excess funds and get default referral fees.\n', '    **/\n', '    function changeBeneficiary(\n', '        address payable _beneficiary\n', '    )\n', '      external\n', '      onlyGov\n', '    {\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @notice Get all arShields.\n', '    **/\n', '    function getShields()\n', '      external\n', '      view\n', '    returns(\n', '        address[] memory shields\n', '    )\n', '    {\n', '        shields = arShields;\n', '    }\n', '\n', '}']