['pragma solidity 0.5.16;\n', '\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol";\n', 'import "@openzeppelin/contracts/ownership/Ownable.sol";\n', 'import "@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol";\n', 'import "./interfaces/IVault.sol";\n', '\n', 'contract StaticsHelper is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => address) public priceFeeds;\n', '    mapping(address => address) public lpSubTokens;\n', '    mapping(address => address) public rewardPools;\n', '\n', '    function setPriceFeed(address token, address feed) external onlyOwner {\n', '        priceFeeds[token] = feed;\n', '    }\n', '\n', '    function setLpSubToken(address token, address subToken) external onlyOwner {\n', '        lpSubTokens[token] = subToken;\n', '    }\n', '\n', '    function setRewardPool(address vault, address rewardPool)\n', '        external\n', '        onlyOwner\n', '    {\n', '        rewardPools[vault] = rewardPool;\n', '    }\n', '\n', '    function getBalances(address[] memory tokens, address user)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < tokens.length; i += 1) {\n', '            if (tokens[i] == address(0)) {\n', '                amounts[i] = user.balance;\n', '            } else {\n', '                amounts[i] = IERC20(tokens[i]).balanceOf(user);\n', '            }\n', '        }\n', '        return amounts;\n', '    }\n', '\n', '    function getTotalSupplies(address[] memory tokens)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < tokens.length; i += 1) {\n', '            amounts[i] = IERC20(tokens[i]).totalSupply();\n', '        }\n', '        return amounts;\n', '    }\n', '\n', '    function getTokenAllowances(\n', '        address[] memory tokens,\n', '        address[] memory spenders,\n', '        address user\n', '    ) public view returns (uint256[] memory) {\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < tokens.length; i += 1) {\n', '            amounts[i] = IERC20(tokens[i]).allowance(user, spenders[i]);\n', '        }\n', '        return amounts;\n', '    }\n', '\n', '    function getTotalDeposits(address[] memory vaults)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory deposits = new uint256[](vaults.length);\n', '        for (uint256 i = 0; i < vaults.length; i += 1) {\n', '            deposits[i] = IVault(vaults[i]).totalDeposits();\n', '        }\n', '        return deposits;\n', '    }\n', '\n', '    function underlyingBalanceWithInvestment(address[] memory vaults)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory amounts = new uint256[](vaults.length);\n', '        for (uint256 i = 0; i < vaults.length; i += 1) {\n', '            amounts[i] = IVault(vaults[i]).underlyingBalanceWithInvestment();\n', '        }\n', '        return amounts;\n', '    }\n', '\n', '    function getChainlinkPrice(address token) public view returns (uint256) {\n', '        if (priceFeeds[token] == address(0)) return 0;\n', '        (, int256 price, , , ) =\n', '            AggregatorV3Interface(priceFeeds[token]).latestRoundData();\n', '        uint256 decimals =\n', '            uint256(AggregatorV3Interface(priceFeeds[token]).decimals());\n', '        uint256 uPrice = uint256(price);\n', '        if (decimals < 18) {\n', '            return uPrice.mul(10**(18 - decimals));\n', '        } else if (decimals > 18) {\n', '            return uPrice.div(10**(decimals - 18));\n', '        }\n', '        return uPrice;\n', '    }\n', '\n', '    function getLPPrice(address lp) public view returns (uint256) {\n', '        if (lpSubTokens[lp] == address(0)) return 0;\n', '        address subToken = lpSubTokens[lp];\n', '        uint256 subTokenPrice = getChainlinkPrice(subToken);\n', '        address _lp = lp;\n', '        uint256 lpPrice =\n', '            IERC20(subToken)\n', '                .balanceOf(_lp)\n', '                .mul(2)\n', '                .mul(subTokenPrice)\n', '                .mul(1e18)\n', '                .div(IERC20(_lp).totalSupply())\n', '                .div(10**uint256(ERC20Detailed(subToken).decimals()));\n', '        return lpPrice;\n', '    }\n', '\n', '    function getPrices(address[] memory tokens)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < tokens.length; i += 1) {\n', '            amounts[i] = getPrice(tokens[i]);\n', '        }\n', '        return amounts;\n', '    }\n', '\n', '    function getPrice(address token) public view returns (uint256) {\n', '        if (priceFeeds[token] != address(0)) {\n', '            return getChainlinkPrice(token);\n', '        }\n', '        if (lpSubTokens[token] != address(0)) {\n', '            return getLPPrice(token);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getPortfolio(address[] memory tokens, address user)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 portfolio;\n', '        uint256[] memory balances = getBalances(tokens, user);\n', '        uint256[] memory prices = getPrices(tokens);\n', '        for (uint256 i = 0; i < tokens.length; i += 1) {\n', '            portfolio = portfolio.add(\n', '                prices[i].mul(balances[i]).div(\n', '                    10**uint256(ERC20Detailed(tokens[i]).decimals())\n', '                )\n', '            );\n', '        }\n', '        return portfolio;\n', '    }\n', '\n', '    function getTVL(address[] memory vaults) public view returns (uint256) {\n', '        uint256 tvl;\n', '        for (uint256 i = 0; i < vaults.length; i += 1) {\n', '            uint256 price = getPrice(IVault(vaults[i]).underlying());\n', '            uint256 investment =\n', '                IVault(vaults[i]).underlyingBalanceWithInvestment();\n', '            tvl = tvl.add(price.mul(investment));\n', '        }\n', '        return tvl;\n', '    }\n', '\n', '    function getVaultEarning(address vault)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        address underlying = IVault(vault).underlying();\n', '        uint256 totalEarning =\n', '            IVault(vault).underlyingBalanceWithInvestment().sub(\n', '                IVault(vault).totalDeposits()\n', '            );\n', '        uint256 totalEarningInUSD =\n', '            totalEarning.mul(getPrice(underlying)).div(\n', '                10**uint256(ERC20Detailed(underlying).decimals())\n', '            );\n', '        return (totalEarning, totalEarningInUSD);\n', '    }\n', '\n', '    function getUserVaultEarning(address vault, address user)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        (uint256 totalEarning, uint256 totalEarningInUSD) =\n', '            getVaultEarning(vault);\n', '        uint256 position =\n', '            IERC20(vault).balanceOf(user).add(\n', '                IERC20(rewardPools[vault]).balanceOf(user)\n', '            );\n', '        uint256 vaultTotalSupply = IERC20(vault).totalSupply();\n', '        uint256 userEarning = totalEarning.mul(position).div(vaultTotalSupply);\n', '        uint256 userEarningInUSD =\n', '            totalEarningInUSD.mul(position).div(vaultTotalSupply);\n', '        return (userEarning, userEarningInUSD);\n', '    }\n', '\n', '    function getUserVaultEarning(address[] memory vaults, address user)\n', '        public\n', '        view\n', '        returns (uint256[] memory, uint256[] memory)\n', '    {\n', '        uint256[] memory earnings = new uint256[](vaults.length);\n', '        uint256[] memory earningsInUSD = new uint256[](vaults.length);\n', '        for (uint256 i = 0; i < vaults.length; i += 1) {\n', '            (earnings[i], earningsInUSD[i]) = getUserVaultEarning(\n', '                vaults[i],\n', '                user\n', '            );\n', '        }\n', '        return (earnings, earningsInUSD);\n', '    }\n', '}\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IVault {\n', '    function underlyingBalanceInVault() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestment() external view returns (uint256);\n', '\n', '    function governance() external view returns (address);\n', '\n', '    function controller() external view returns (address);\n', '\n', '    function underlying() external view returns (address);\n', '\n', '    function strategy() external view returns (address);\n', '\n', '    function setStrategy(address _strategy) external;\n', '\n', '    function setVaultFractionToInvest(uint256 numerator, uint256 denominator)\n', '        external;\n', '\n', '    function deposit(uint256 amountWei) external;\n', '\n', '    function depositFor(uint256 amountWei, address holder) external;\n', '\n', '    function withdrawAll() external;\n', '\n', '    function withdraw(uint256 numberOfShares) external;\n', '\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestmentForHolder(address holder)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    // force unleash should be callable only by the controller (by the force unleasher) or by governance\n', '    function forceUnleashed() external;\n', '\n', '    function rebalance() external;\n', '\n', '    function totalDeposits() external view returns (uint256);\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "./IERC20.sol";\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']