['pragma solidity ^0.5.17;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./Address.sol";\n', 'import "./IERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./IStrategy.sol";\n', 'import "./IConverter.sol";\n', 'import "./IOneSplitAudit.sol";\n', '\n', 'contract RecomController {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address public governance;\n', '    address public strategist;\n', '\n', '    address public onesplit;\n', '    address public rewards;\n', '    mapping(address => address) public vaults;\n', '    mapping(address => address) public strategies;\n', '    mapping(address => mapping(address => address)) public converters;\n', '\n', '    mapping(address => mapping(address => bool)) public approvedStrategies;\n', '\n', '    uint256 public split = 495;\n', '    uint256 public constant max = 10000;\n', '\n', '    constructor(address _rewards) public {\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\n', '        rewards = _rewards;\n', '    }\n', '\n', '    function setRewards(address _rewards) public {\n', '        require(msg.sender == governance, "!governance");\n', '        rewards = _rewards;\n', '    }\n', '\n', '    function setStrategist(address _strategist) public {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setSplit(uint256 _split) public {\n', '        require(msg.sender == governance, "!governance");\n', '        split = _split;\n', '    }\n', '\n', '    function setOneSplit(address _onesplit) public {\n', '        require(msg.sender == governance, "!governance");\n', '        onesplit = _onesplit;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setVault(address _token, address _vault) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        require(vaults[_token] == address(0), "vault");\n', '        vaults[_token] = _vault;\n', '    }\n', '\n', '    function approveStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == governance, "!governance");\n', '        approvedStrategies[_token][_strategy] = true;\n', '    }\n', '\n', '    function revokeStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == governance, "!governance");\n', '        approvedStrategies[_token][_strategy] = false;\n', '    }\n', '\n', '    function setConverter(\n', '        address _input,\n', '        address _output,\n', '        address _converter\n', '    ) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        converters[_input][_output] = _converter;\n', '    }\n', '\n', '    function setStrategy(address _token, address _strategy) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        require(approvedStrategies[_token][_strategy] == true, "!approved");\n', '\n', '        address _current = strategies[_token];\n', '        if (_current != address(0)) {\n', '            IStrategy(_current).withdrawAll();\n', '        }\n', '        strategies[_token] = _strategy;\n', '    }\n', '\n', '    function earn(address _token, uint256 _amount) public {\n', '        address _strategy = strategies[_token];\n', '        address _want = IStrategy(_strategy).want();\n', '        if (_want != _token) {\n', '            address converter = converters[_token][_want];\n', '            IERC20(_token).safeTransfer(converter, _amount);\n', '            _amount = IConverter(converter).convert(_strategy);\n', '            IERC20(_want).safeTransfer(_strategy, _amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_strategy, _amount);\n', '        }\n', '        IStrategy(_strategy).deposit();\n', '    }\n', '\n', '    function balanceOf(address _token) external view returns (uint256) {\n', '        return IStrategy(strategies[_token]).balanceOf();\n', '    }\n', '\n', '    function withdrawAll(address _token) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!strategist");\n', '        IStrategy(strategies[_token]).withdrawAll();\n', '    }\n', '\n', '    function inCaseTokensGetStuck(address _token, uint256 _amount) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!governance");\n', '        IERC20(_token).safeTransfer(msg.sender, _amount);\n', '    }\n', '\n', '    function inCaseStrategyTokenGetStuck(address _strategy, address _token) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!governance");\n', '        IStrategy(_strategy).withdraw(_token);\n', '    }\n', '\n', '    function getExpectedReturn(\n', '        address _strategy,\n', '        address _token,\n', '        uint256 parts\n', '    ) public view returns (uint256 expected) {\n', '        uint256 _balance = IERC20(_token).balanceOf(_strategy);\n', '        address _want = IStrategy(_strategy).want();\n', '        (expected, ) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);\n', '    }\n', '\n', '    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\n', '    function yearn(\n', '        address _strategy,\n', '        address _token,\n', '        uint256 parts\n', '    ) public {\n', '        require(msg.sender == strategist || msg.sender == governance, "!governance");\n', '        // This contract should never have value in it, but just incase since this is a public call\n', '        uint256 _before = IERC20(_token).balanceOf(address(this));\n', '        IStrategy(_strategy).withdraw(_token);\n', '        uint256 _after = IERC20(_token).balanceOf(address(this));\n', '        if (_after > _before) {\n', '            uint256 _amount = _after.sub(_before);\n', '            address _want = IStrategy(_strategy).want();\n', '            uint256[] memory _distribution;\n', '            uint256 _expected;\n', '            _before = IERC20(_want).balanceOf(address(this));\n', '            IERC20(_token).safeApprove(onesplit, 0);\n', '            IERC20(_token).safeApprove(onesplit, _amount);\n', '            (_expected, _distribution) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\n', '            IOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\n', '            _after = IERC20(_want).balanceOf(address(this));\n', '            if (_after > _before) {\n', '                _amount = _after.sub(_before);\n', '                uint256 _reward = _amount.mul(split).div(max);\n', '                earn(_want, _amount.sub(_reward));\n', '                IERC20(_want).safeTransfer(rewards, _reward);\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdraw(address _token, uint256 _amount) public {\n', '        require(msg.sender == vaults[_token], "!vault");\n', '        IStrategy(strategies[_token]).withdraw(_amount);\n', '    }\n', '}']