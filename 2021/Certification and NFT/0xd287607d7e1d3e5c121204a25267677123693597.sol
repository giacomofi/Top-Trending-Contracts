['pragma solidity ^0.8.0;\n', '\n', 'import  "./ERC20-v0.8.0.sol";\n', '\n', 'contract GoodPayGlobal is ERC20 {\n', '    \n', '    address owner;\n', "    string Name = 'GoodPayGlobal';\n", "    string Symbol = 'GPG';\n", '  \n', ' constructor( address _owner) ERC20(Name, Symbol){\n', '        owner =_owner;\n', '        uint256 initialSupply = 2000000000*10**18;\n', '        _mint(owner, initialSupply);\n', '    }\n', '\n', '      modifier onlyOwner() {\n', "            require(owner == msg.sender, 'caller is not admin'); \n", '            _;\n', '      }\n', '      \n', '      function BeginTokenLock() external onlyOwner{\n', '          tokenLocked = true;\n', '      }\n', '      \n', '    function EndTokenLock() external onlyOwner{\n', '          tokenLocked = false;\n', '    }\n', '    \n', '    function RestrictAddress( address _addressToBeRestricted) public onlyOwner{\n', '        RestrictedAddress[_addressToBeRestricted] = true;\n', '     \n', '    }\n', '    \n', '    function UnestrictAddress( address _addressToBeUnrestricted) public onlyOwner{\n', '    RestrictedAddress[_addressToBeUnrestricted] = false;\n', '   \n', '    }\n', '\n', '\n', '    function setOwner(address _owner) external onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function mint(address recipient, uint256 amount) external onlyOwner {\n', "         require(tokenLocked == false, 'token locked');\n", '        _mint(recipient, amount);\n', '    }\n', '\n', '    function burn(address recipient, uint256 amount) external onlyOwner {\n', "         require(tokenLocked == false, 'token locked');\n", '        _burn(recipient, amount);\n', '    }\n', '}']