['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-15\n', '*/\n', '\n', '// File: contracts/NFTMint.sol\n', '\n', 'pragma solidity ^0.5.0;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () public{\n', '        address msgSender = msg.sender;\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) internal onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract NFTBANK721 is Ownable{\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed from, address indexed to, uint256 indexed tokenId);\n', '     // Token name\n', '    string private _name;\n', '    uint256 public tokenCount;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping (uint256 => address) public _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping (address => uint256) public _balances;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) public _tokenApprovals;\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '    mapping (uint256 => string) private _tokenURIs;\n', '    mapping (uint256 => address) public _creator;\n', '    constructor (string memory name_, string memory symbol_) public{\n', '\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '    function _transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        transferOwnership(newOwner);\n', '       \n', '    }\n', '    function balanceOf(address owner) public view  returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '     function ownerOf(uint256 tokenId) public view returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '    function name() public view  returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    function getApproved(uint256 tokenId) public view returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '    function _approve(address to, uint256 tokenId) public  onlyOwner{\n', '        _tokenApprovals[tokenId] = to;\n', '    }\n', '     function _mint(address to, uint256 tokenId,string memory _tokenuri) public onlyOwner{\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '        _creator[tokenId] = to;\n', '        _setTokenURI(tokenId, _tokenuri);\n', '        tokenCount++;\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '    function setApprovalForAll(address from, address to, bool approved, uint256 tokenId) public onlyOwner{\n', '        require(to == msg.sender, "ERC721: approve to caller");\n', '        _approve(to, tokenId);\n', '        _operatorApprovals[from][to] = approved;\n', '        emit Approval(from, to, tokenId);\n', '    }\n', '    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal onlyOwner{\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = _tokenURI;\n', '    }\n', '    function tokenTransfer(address from, address to, uint256 tokenId) public onlyOwner{\n', '        _transfer(from, to, tokenId);\n', '    }\n', '    function _transfer(address from, address to, uint256 tokenId) public onlyOwner{\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '        require(_operatorApprovals[_creator[tokenId]][owner()] == true , "Need operator approval for 3rd party transfers.");\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '    function _burn(uint256 tokenId, address from, address admin) public onlyOwner{\n', '        require(_owners[tokenId] == from || from == owner(), "Only Burn Allowed Token Owner or Admin");\n', '        require(_operatorApprovals[_creator[tokenId]][admin] == true, "Need operator approval for 3rd party burns.");\n', '\n', '        // // Clear approvals\n', '        _approve(address(0), tokenId);\n', '        _operatorApprovals[_creator[tokenId]][admin] = false;\n', '        _balances[_owners[tokenId]] -= 1;\n', '        delete _owners[tokenId];\n', '        delete _creator[tokenId];\n', '        emit Transfer(from, address(0), tokenId);\n', '    }\n', '}\n', '\n', 'contract NFTMint is NFTBANK721{\n', '     mapping(string => bool) _nameexits;\n', '    // uint256 public tokenCount;\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol\n', '    ) NFTBANK721(name, symbol) public{\n', '      \n', '    }     \n', '}']