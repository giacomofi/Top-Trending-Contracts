['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: contracts\\lib\\IERC20.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\lib\\TransferHelper.sol\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts\\interface\\INTokenController.sol\n', '\n', '///@dev This interface defines the methods for ntoken management\n', 'interface INTokenController {\n', '    \n', '    /// @notice when the auction of a token gets started\n', '    /// @param tokenAddress The address of the (ERC20) token\n', '    /// @param ntokenAddress The address of the ntoken w.r.t. token for incentives\n', '    /// @param owner The address of miner who opened the oracle\n', '    event NTokenOpened(address tokenAddress, address ntokenAddress, address owner);\n', '    \n', '    /// @notice ntoken disable event\n', '    /// @param tokenAddress token address\n', '    event NTokenDisabled(address tokenAddress);\n', '    \n', '    /// @notice ntoken enable event\n', '    /// @param tokenAddress token address\n', '    event NTokenEnabled(address tokenAddress);\n', '\n', '    /// @dev ntoken configuration structure\n', '    struct Config {\n', '\n', '        // The number of nest needed to pay for opening ntoken. 10000 ether\n', '        uint96 openFeeNestAmount;\n', '\n', '        // ntoken management is enabled. 0: not enabled, 1: enabled\n', '        uint8 state;\n', '    }\n', '\n', '    /// @dev A struct for an ntoken\n', '    struct NTokenTag {\n', '\n', '        // ntoken address\n', '        address ntokenAddress;\n', '\n', '        // How much nest has paid for open this ntoken\n', '        uint96 nestFee;\n', '    \n', '        // token address\n', '        address tokenAddress;\n', '\n', '        // Index for this ntoken\n', '        uint40 index;\n', '\n', '        // Create time\n', '        uint48 startTime;\n', '\n', '        // State of this ntoken. 0: disabled; 1 normal\n', '        uint8 state;\n', '    }\n', '\n', '    /* ========== Governance ========== */\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set the token mapping\n', '    /// @param tokenAddress Destination token address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @param state status for this map\n', '    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) external;\n', '\n', '    /// @dev Get token address from ntoken address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @return token address\n', '    function getTokenAddress(address ntokenAddress) external view returns (address);\n', '\n', '    /// @dev Get ntoken address from token address\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken address\n', '    function getNTokenAddress(address tokenAddress) external view returns (address);\n', '\n', '    /* ========== ntoken management ========== */\n', '    \n', '    /// @dev Bad tokens should be banned \n', '    function disable(address tokenAddress) external;\n', '\n', '    /// @dev enable ntoken\n', '    function enable(address tokenAddress) external;\n', '\n', "    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\n", '    /// @dev Create and map the (Token, NToken) pair in NestPool\n', '    /// @param tokenAddress The address of token contract\n', '    function open(address tokenAddress) external;\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    /// @dev Get ntoken information\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken information\n', '    function getNTokenTag(address tokenAddress) external view returns (NTokenTag memory);\n', '\n', '    /// @dev Get opened ntoken count\n', '    /// @return ntoken count\n', '    function getNTokenCount() external view returns (uint);\n', '\n', '    /// @dev List ntoken information by page\n', '    /// @param offset Skip previous (offset) records\n', '    /// @param count Return (count) records\n', '    /// @param order Order. 0 reverse order, non-0 positive order\n', '    /// @return ntoken information by page\n', '    function list(uint offset, uint count, uint order) external view returns (NTokenTag[] memory);\n', '}\n', '\n', '// File: contracts\\interface\\INToken.sol\n', '\n', '/// @dev ntoken interface\n', 'interface INToken {\n', '        \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /// @dev Mint \n', '    /// @param value The amount of NToken to add\n', '    function increaseTotal(uint256 value) external;\n', '\n', '    /// @notice The view of variables about minting \n', '    /// @dev The naming follows Nestv3.0\n', '    /// @return createBlock The block number where the contract was created\n', '    /// @return recentlyUsedBlock The block number where the last minting went\n', '    function checkBlockInfo() external view returns(uint256 createBlock, uint256 recentlyUsedBlock);\n', '\n', '    /// @dev The ABI keeps unchanged with old NTokens, so as to support token-and-ntoken-mining\n', '    /// @return The address of bidder\n', '    function checkBidder() external view returns(address);\n', '    \n', '    /// @notice The view of totalSupply\n', '    /// @return The total supply of ntoken\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /// @dev The view of balances\n', '    /// @param owner The address of an account\n', '    /// @return The balance of the account\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256); \n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', '\n', '// File: contracts\\interface\\INestMapping.sol\n', '\n', '/// @dev The interface defines methods for nest builtin contract address mapping\n', 'interface INestMapping {\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) external;\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    );\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() external view returns (address);\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() external view returns (address);\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() external view returns (address);\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() external view returns (address);\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() external view returns (address);\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) external;\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) external view returns (address);\n', '}\n', '\n', '// File: contracts\\interface\\INestGovernance.sol\n', '\n', '/// @dev This interface defines the governance methods\n', 'interface INestGovernance is INestMapping {\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) external;\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) external view returns (uint);\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) external view returns (bool);\n', '}\n', '\n', '// File: contracts\\interface\\INestLedger.sol\n', '\n', '/// @dev This interface defines the nest ledger methods\n', 'interface INestLedger {\n', '\n', '    /// @dev Application Flag Changed event\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    event ApplicationChanged(address addr, uint flag);\n', '    \n', '    /// @dev Configuration structure of nest ledger contract\n', '    struct Config {\n', '        \n', '        // nest reward scale(10000 based). 2000\n', '        uint16 nestRewardScale;\n', '\n', '        // // ntoken reward scale(10000 based). 8000\n', '        // uint16 ntokenRewardScale;\n', '    }\n', '    \n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) external;\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) external view returns (uint);\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) external view returns (uint);\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\n', '}\n', '\n', '// File: contracts\\NestBase.sol\n', '\n', '/// @dev Base contract of nest\n', 'contract NestBase {\n', '\n', '    // Address of nest token contract\n', '    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\n', '\n', '    // Genesis block number of nest\n', '    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\n', '    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\n', '    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\n', '    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\n', '    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\n', '    // on-line flow, the actual block is 5120000\n', '    uint constant NEST_GENESIS_BLOCK = 5120000;\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) virtual public {\n', "        require(_governance == address(0), 'NEST:!initialize');\n", '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev INestGovernance implementation contract address\n', '    address public _governance;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) virtual public {\n', '\n', '        address governance = _governance;\n', '        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev Migrate funds from current contract to NestLedger\n', '    /// @param tokenAddress Destination token address.(0 means eth)\n', '    /// @param value Migrate amount\n', '    function migrate(address tokenAddress, uint value) external onlyGovernance {\n', '\n', '        address to = INestGovernance(_governance).getNestLedgerAddress();\n', '        if (tokenAddress == address(0)) {\n', '            INestLedger(to).addETHReward { value: value } (address(0));\n', '        } else {\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    //---------modifier------------\n', '\n', '    modifier onlyGovernance() {\n', '        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _;\n', '    }\n', '\n', '    modifier noContract() {\n', '        require(msg.sender == tx.origin, "NEST:!contract");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\NToken.sol\n', '\n', '// The contract is based on Nest_NToken from Nest Protocol v3.0. Considering compatibility, the interface\n', '// keeps the same. \n', '/// @dev ntoken contract\n', 'contract NToken is NestBase, INToken {\n', '\n', '    /// @notice Constructor\n', '    /// @dev Given the address of NestPool, NToken can get other contracts by calling addrOfxxx()\n', '    /// @param _name The name of NToken\n', '    /// @param _symbol The symbol of NToken\n', '    constructor (string memory _name, string memory _symbol) {\n', '\n', '        GENESIS_BLOCK_NUMBER = block.number;\n', '        name = _name;                                                               \n', '        symbol = _symbol;\n', '        _state = block.number;\n', '    }\n', '\n', '    // INestMining implementation contract address\n', '    address _ntokenMiningAddress;\n', '    \n', '    // token information: name\n', '    string public name;\n', '\n', '    // token information: symbol\n', '    string public symbol;\n', '\n', '    // token information: decimals\n', '    uint8 constant public decimals = 18;\n', '\n', '    // token state，high 128 bits represent _totalSupply, low 128 bits represent lastestMintAtHeight\n', '    uint256 _state;\n', '    \n', '    // Balances ledger\n', '    mapping (address=>uint) private _balances;\n', '\n', '    // Approve ledger\n', '    mapping (address=>mapping(address=>uint)) private _allowed;\n', '\n', '    // ntoken genesis block number\n', '    uint256 immutable public GENESIS_BLOCK_NUMBER;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) override public {\n', '        super.update(nestGovernanceAddress);\n', '        _ntokenMiningAddress = INestGovernance(nestGovernanceAddress).getNTokenMiningAddress();\n', '    }\n', '\n', '    /// @dev Mint \n', '    /// @param value The amount of NToken to add\n', '    function increaseTotal(uint256 value) override public {\n', '\n', '        require(msg.sender == _ntokenMiningAddress, "NToken:!Auth");\n', '        \n', '        // Increases balance for target address\n', '        _balances[msg.sender] += value;\n', '\n', '        // Increases total supply\n', '        uint totalSupply_ = (_state >> 128) + value;\n', '        require(totalSupply_ < 0x100000000000000000000000000000000, "NToken:!totalSupply");\n', '        // Total supply and lastest mint height share one storage unit\n', '        _state = (totalSupply_ << 128) | block.number;\n', '    }\n', '        \n', '    /// @notice The view of variables about minting \n', '    /// @dev The naming follows Nestv3.0\n', '    /// @return createBlock The block number where the contract was created\n', '    /// @return recentlyUsedBlock The block number where the last minting went\n', '    function checkBlockInfo() \n', '        override public view \n', '        returns(uint256 createBlock, uint256 recentlyUsedBlock) \n', '    {\n', '        return (GENESIS_BLOCK_NUMBER, _state & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    }\n', '\n', '    /// @dev The ABI keeps unchanged with old NTokens, so as to support token-and-ntoken-mining\n', '    /// @return The address of bidder\n', '    function checkBidder() override public view returns(address) {\n', '        return _ntokenMiningAddress;\n', '    }\n', '\n', '    /// @notice The view of totalSupply\n', '    /// @return The total supply of ntoken\n', '    function totalSupply() override public view returns (uint256) {\n', '        // The high 128 bits means total supply\n', '        return _state >> 128;\n', '    }\n', '\n', '    /// @dev The view of balances\n', '    /// @param owner The address of an account\n', '    /// @return The balance of the account\n', '    function balanceOf(address owner) override public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) override public view returns (uint256) \n', '    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) override public returns (bool) \n', '    {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) override public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) override public returns (bool) \n', '    {\n', '        mapping(address=>uint) storage allowed = _allowed[from];\n', '        allowed[msg.sender] -= value;\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, allowed[msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        mapping(address=>uint) storage allowed = _allowed[msg.sender];\n', '        allowed[spender] += addedValue;\n', '        emit Approval(msg.sender, spender, allowed[spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        mapping(address=>uint) storage allowed = _allowed[msg.sender];\n', '        allowed[spender] -= subtractedValue;\n', '        emit Approval(msg.sender, spender, allowed[spender]);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        _balances[from] -= value;\n', '        _balances[to] += value;\n', '        emit Transfer(from, to, value);\n', '    }\n', '}\n', '\n', '// File: contracts\\NTokenController.sol\n', '\n', '/// @dev NToken Controller, management for ntoken\n', 'contract NTokenController is NestBase, INTokenController {\n', '\n', '    // /// @param nestTokenAddress Address of nest token contract\n', '    // constructor(address nestTokenAddress)\n', '    // {\n', '    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\n', '    // }\n', '\n', '    // Configuration\n', '    Config _config;\n', '\n', '    // ntoken information array\n', '    NTokenTag[] _nTokenTagList;\n', '\n', '    // A mapping for all ntoken\n', '    mapping(address=>uint) public _nTokenTags;\n', '\n', '    /* ========== Governance ========== */\n', '\n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) override external onlyGovernance {\n', '        require(uint(config.state) <= 1, "NTokenController:!value");\n', '        _config = config;\n', '    }\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() override external view returns (Config memory) {\n', '        return _config;\n', '    }\n', '\n', '    /// @dev Set the token mapping\n', '    /// @param tokenAddress Destination token address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @param state status for this map\n', '    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) override external onlyGovernance {\n', '        \n', '        uint index = _nTokenTags[tokenAddress];\n', '        if (index == 0) {\n', '\n', '            _nTokenTagList.push(NTokenTag(\n', '                // address ntokenAddress;\n', '                ntokenAddress,\n', '                // uint96 nestFee;\n', '                uint96(0),\n', '                // address tokenAddress;\n', '                tokenAddress,\n', '                // uint40 index;\n', '                uint40(_nTokenTagList.length),\n', '                // uint48 startTime;\n', '                uint48(block.timestamp),\n', '                // uint8 state;  \n', '                uint8(state)\n', '            ));\n', '            _nTokenTags[tokenAddress] = _nTokenTags[ntokenAddress] = _nTokenTagList.length;\n', '        } else {\n', '\n', '            NTokenTag memory tag = _nTokenTagList[index - 1];\n', '            tag.ntokenAddress = ntokenAddress;\n', '            tag.tokenAddress = tokenAddress;\n', '            tag.index = uint40(index - 1);\n', '            tag.startTime = uint48(block.timestamp);\n', '            tag.state = uint8(state);\n', '\n', '            _nTokenTagList[index - 1] = tag;\n', '            _nTokenTags[tokenAddress] = _nTokenTags[ntokenAddress] = index;\n', '        }\n', '    }\n', '\n', '    /// @dev Get token address from ntoken address\n', '    /// @param ntokenAddress Destination ntoken address\n', '    /// @return token address\n', '    function getTokenAddress(address ntokenAddress) override external view returns (address) {\n', '\n', '        uint index = _nTokenTags[ntokenAddress];\n', '        if (index > 0) {\n', '            return _nTokenTagList[index - 1].tokenAddress;\n', '        }\n', '        return address(0);\n', '    }\n', '\n', '    /// @dev Get ntoken address from token address\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken address\n', '    function getNTokenAddress(address tokenAddress) override public view returns (address) {\n', '\n', '        uint index = _nTokenTags[tokenAddress];\n', '        if (index > 0) {\n', '            return _nTokenTagList[index - 1].ntokenAddress;\n', '        }\n', '        return address(0);\n', '    }\n', '\n', '    /* ========== ntoken management ========== */\n', '    \n', '    /// @dev Bad tokens should be banned \n', '    function disable(address tokenAddress) override external onlyGovernance\n', '    {\n', '        // When tokenAddress does not exist, _nTokenTags[tokenAddress] - 1 will overflow error\n', '        _nTokenTagList[_nTokenTags[tokenAddress] - 1].state = 0;\n', '        emit NTokenDisabled(tokenAddress);\n', '    }\n', '\n', '    /// @dev enable ntoken\n', '    function enable(address tokenAddress) override external onlyGovernance\n', '    {\n', '        // When tokenAddress does not exist, _nTokenTags[tokenAddress] - 1 will overflow error\n', '        _nTokenTagList[_nTokenTags[tokenAddress] - 1].state = 1;\n', '        emit NTokenEnabled(tokenAddress);\n', '    }\n', '\n', "    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\n", '    /// @dev Create and map the (Token, NToken) pair in NestPool\n', '    /// @param tokenAddress The address of token contract\n', '    function open(address tokenAddress) override external noContract\n', '    {\n', '        Config memory config = _config;\n', '        require(config.state == 1, "NTokenController:!state");\n', '\n', '        // Check token mapping\n', '        require(getNTokenAddress(tokenAddress) == address(0), "NTokenController:!exists");\n', '\n', '        // Check token state\n', '        uint index = _nTokenTags[tokenAddress];\n', '        require(index == 0 || _nTokenTagList[index - 1].state == 0, "NTokenController:!active");\n', '\n', '        uint ntokenCounter = _nTokenTagList.length;\n', '\n', '        // Create ntoken contract\n', '        string memory sn = getAddressStr(ntokenCounter);\n', '        NToken ntoken = new NToken(strConcat("NToken", sn), strConcat("N", sn));\n', '\n', '        address governance = _governance;\n', '        ntoken.initialize(address(this));\n', '        ntoken.update(governance);\n', '\n', '        // Is token valid ?\n', '        TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), 1);\n', '        require(IERC20(tokenAddress).balanceOf(address(this)) >= 1, "NTokenController:!transfer");\n', '        TransferHelper.safeTransfer(tokenAddress, msg.sender, 1);\n', '\n', '        // Pay nest\n', '        IERC20(NEST_TOKEN_ADDRESS).transferFrom(msg.sender, governance, uint(config.openFeeNestAmount));\n', '\n', '        // TODO: Consider how to migrate the existing token information\n', '        _nTokenTags[tokenAddress] = _nTokenTags[address(ntoken)] = ntokenCounter + 1;\n', '        _nTokenTagList.push(NTokenTag(\n', '            // address ntokenAddress;\n', '            address(ntoken),\n', '            // uint96 nestFee;\n', '            config.openFeeNestAmount,\n', '            // address tokenAddress;\n', '            tokenAddress,\n', '            // uint40 index;\n', '            uint40(_nTokenTagList.length),\n', '            // uint48 startTime;\n', '            uint48(block.timestamp),\n', '            // uint8 state;  \n', '            1\n', '        ));\n', '\n', '        emit NTokenOpened(tokenAddress, address(ntoken), msg.sender);\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    /// @dev Get ntoken information\n', '    /// @param tokenAddress Destination token address\n', '    /// @return ntoken information\n', '    function getNTokenTag(address tokenAddress) override external view returns (NTokenTag memory) \n', '    {\n', '        return _nTokenTagList[_nTokenTags[tokenAddress] - 1];\n', '    }\n', '\n', '    /// @dev Get opened ntoken count\n', '    /// @return ntoken count\n', '    function getNTokenCount() override external view returns (uint) {\n', '        return _nTokenTagList.length;\n', '    }\n', '\n', '    /// @dev List ntoken information by page\n', '    /// @param offset Skip previous (offset) records\n', '    /// @param count Return (count) records\n', '    /// @param order Order. 0 reverse order, non-0 positive order\n', '    /// @return ntoken information by page\n', '    function list(uint offset, uint count, uint order) override external view returns (NTokenTag[] memory) {\n', '        \n', '        NTokenTag[] storage nTokenTagList = _nTokenTagList;\n', '        NTokenTag[] memory result = new NTokenTag[](count);\n', '        uint length = nTokenTagList.length;\n', '        uint i = 0;\n', '\n', '        // Reverse order\n', '        if (order == 0) {\n', '\n', '            uint index = length - offset;\n', '            uint end = index > count ? index - count : 0;\n', '            while (index > end) {\n', '                result[i++] = nTokenTagList[--index];\n', '            }\n', '        } \n', '        // Positive order\n', '        else {\n', '            \n', '            uint index = offset;\n', '            uint end = index + count;\n', '            if (end > length) {\n', '                end = length;\n', '            }\n', '            while (index < end) {\n', '                result[i++] = nTokenTagList[index++];\n', '            }\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /* ========== HELPERS ========== */\n', '\n', '    /// @dev from NESTv3.0\n', '    function strConcat(string memory _a, string memory _b) public pure returns (string memory)\n', '    {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        string memory ret = new string(_ba.length + _bb.length);\n', '        bytes memory bret = bytes(ret);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) {\n', '            bret[k++] = _ba[i];\n', '        } \n', '        for (uint i = 0; i < _bb.length; i++) {\n', '            bret[k++] = _bb[i];\n', '        } \n', '        return string(ret);\n', '    } \n', '    \n', '    /// @dev Convert number into a string, if less than 4 digits, make up 0 in front, from NestV3.0\n', '    function getAddressStr(uint256 iv) public pure returns (string memory) \n', '    {\n', '        bytes memory buf = new bytes(64);\n', '        uint256 index = 0;\n', '        do {\n', '            buf[index++] = bytes1(uint8(iv % 10 + 48));\n', '            iv /= 10;\n', '        } while (iv > 0 || index < 4);\n', '        bytes memory str = new bytes(index);\n', '        for(uint256 i = 0; i < index; ++i) {\n', '            str[i] = buf[index - i - 1];\n', '        }\n', '        return string(str);\n', '    }\n', '}']