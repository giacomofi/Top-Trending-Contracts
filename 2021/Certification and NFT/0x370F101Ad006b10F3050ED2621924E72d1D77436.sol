['// SPDX-License-Identifier: UNLICENSED\n', '// DELTA-BUG-BOUNTY\n', 'pragma solidity ^0.5.3;\n', '\n', 'import "./DELTA_Vault_Withdrawal_Proxy.sol";\n', '\n', 'contract ProxyFactory {\n', '\n', '    function createProxy(address masterCopy)\n', '        public\n', '        returns (address proxy)\n', '    {\n', '        proxy = address(new Proxy(masterCopy));\n', '       \n', '    }\n', '\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '// DELTA-BUG-BOUNTY\n', 'pragma solidity ^0.5.3;\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <[email\xa0protected]>\n', '/// @author Richard Meissner - <[email\xa0protected]>\n', 'contract Proxy {\n', '\n', '    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n', '    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n', '    address internal masterCopy;\n', '\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != address(0), "Invalid master copy address provided");\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n', '            // 0xa619486e == keccak("masterCopy()"). The value is right padded to 32-bytes with 0s\n', '            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n', '                mstore(0, masterCopy)\n', '                return(0, 0x20)\n', '            }\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            if eq(success, 0) { revert(0, returndatasize()) }\n', '            return(0, returndatasize())\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 99999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']