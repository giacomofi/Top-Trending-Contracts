['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// File: eip1996/contracts/libraries/StringUtil.sol\n', '\n', 'pragma solidity ^0.5.9;\n', '\n', '\n', 'library StringUtil {\n', '    function toHash(string memory _s) internal pure returns (bytes32) {\n', '        return keccak256(abi.encode(_s));\n', '    }\n', '\n', '    function isEmpty(string memory _s) internal pure returns (bool) {\n', '        return bytes(_s).length == 0;\n', '    }\n', '}\n', '\n', '// File: contracts/AccountCreator.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', 'contract AccountCreator {\n', '    using StringUtil for string;\n', '\n', '    enum RequestStatus {\n', '        Nonexistent,\n', '        Requested,\n', '        Confirmed,\n', '        Failed,\n', '        Refunded\n', '    }\n', '\n', '    struct AccountRequest {\n', '        string hederaPublicKey;\n', '        address payable requestor;\n', '        uint256 paid;\n', '        RequestStatus status;\n', '    }\n', '\n', '    mapping(bytes32 => AccountRequest) private requests;\n', '    address public accountCreator;\n', '    uint256 private fee;\n', '\n', '    constructor(\n', '        address creator, \n', '        uint256 accountCreationFee\n', '    ) public {\n', '        accountCreator = creator;\n', '        fee = accountCreationFee;\n', '    }\n', '\n', '    function getAccountCreator() public view returns (address) {\n', '        return accountCreator;\n', '    }\n', '\n', '    function getAccountCreationFee() external view returns (uint256) {\n', '        return fee;\n', '    }\n', '\n', '    function setAccountCreationFee(uint256 feeInWei) external returns (bool) {\n', '        require(\n', '            msg.sender == accountCreator,\n', '            "Only the account creator can call this function"\n', '        );\n', '        fee = feeInWei;\n', '        return true;\n', '    }\n', '\n', '    // User calls createAccount\n', '    function _createAccount(\n', '        string memory operationId,\n', '        string memory hederaPublicKey\n', '    ) internal returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '        AccountRequest storage request = requests[operationIdHash];\n', '\n', '        require(!hederaPublicKey.isEmpty(), "Hedera Public Key cannot be empty");\n', '        require(request.paid == 0, "A request with this id already exists");\n', '\n', '        request.requestor = msg.sender;\n', '        request.hederaPublicKey = hederaPublicKey;\n', '        request.status = RequestStatus.Requested;\n', '        request.paid = msg.value;\n', '\n', '        emit CreateAccountRequest(\n', '            operationId,\n', '            msg.sender,\n', '            hederaPublicKey\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function createAccount(\n', '        string calldata operationId, \n', '        string calldata hederaPublicKey\n', '    ) external payable returns (bool) {\n', '        require(\n', '            msg.value == fee, \n', '            "Incorrect fee amount, call getAccountCreationFee"\n', '        );\n', '\n', '        // Make accountcreator a payable address, then transfer the value\n', '        address(uint160(accountCreator)).transfer(msg.value);\n', '\n', '        return _createAccount(\n', '            operationId,\n', '            hederaPublicKey\n', '        );\n', '    }\n', '\n', '    // contract creates record and emits\n', '    event CreateAccountRequest(\n', '        string operationId, \n', '        address requestor, \n', '        string hederaPublicKey\n', '    );\n', '    // request is created with status Requested\n', '    \n', '    // Bridge program sees HederaAccountRequest\n', '    // Tries to create a hedera account using the oracle, \n', '    // and if successful, should call\n', '    function createAccountSuccess(\n', '        string calldata operationId, \n', '        string calldata hederaAccountId\n', '    ) external returns (bool) {\n', '        require(\n', '            msg.sender == accountCreator,\n', '            "Only the account creator can call this function"\n', '        );\n', '\n', '        bytes32 operationIdHash = operationId.toHash();\n', '        AccountRequest storage request = requests[operationIdHash];\n', '        \n', '        require(\n', '            request.status == RequestStatus.Requested, \n', '            "Account Request must have status Requested to be set to status Confirmed"\n', '        );\n', '        \n', '        request.status = RequestStatus.Confirmed;\n', '\n', '        emit CreateAccountSuccess(\n', '            operationId,\n', '            request.requestor,\n', '            request.hederaPublicKey,\n', '            hederaAccountId\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    //which emits\n', '    event CreateAccountSuccess(\n', '        string operationId, \n', '        address requestor, \n', '        string hederaPublicKey, \n', '        string hederaAccountId\n', '    );\n', '    // request has status Confirmed\n', '\n', '    // if Hedera account creation fails, bridge program should call\n', '    function createAccountFail(\n', '        string calldata operationId, \n', '        string calldata reason\n', '    ) external returns (bool) {\n', '        require(\n', '            msg.sender == accountCreator,\n', '            "Only the account creator can call this function"\n', '        );\n', '\n', '        bytes32 operationIdHash = operationId.toHash();\n', '        AccountRequest storage request = requests[operationIdHash];\n', '        \n', '        require(\n', '            request.status == RequestStatus.Requested, \n', '            "Account Request must have status Requested to be set to status Failed"\n', '        );\n', '        \n', '        request.status = RequestStatus.Failed;\n', '\n', '        emit CreateAccountFail(\n', '            operationId,\n', '            request.requestor,\n', '            request.hederaPublicKey,\n', '            request.paid,\n', '            reason\n', '        );\n', '\n', '        return true;\n', '    }\n', '    \n', '    // which emits\n', '    event CreateAccountFail(\n', '        string operationId,\n', '        address requestor,\n', '        string hederaPublicKey,\n', '        uint256 amount,\n', '        string reason\n', '    );\n', '    // request has status Failed\n', '\n', '    // Set to Refunded for confirmation\n', '    function createAccountRefund(\n', '        string calldata operationId\n', '    ) external returns (bool) {\n', '        require(\n', '            msg.sender == accountCreator,\n', '            "Only the account creator can call this function"\n', '        );\n', '\n', '        bytes32 operationIdHash = operationId.toHash();\n', '        AccountRequest storage request = requests[operationIdHash];\n', '\n', '        require(\n', '            request.status == RequestStatus.Failed,\n', '            "Account Request must have status Failed to be refunded"\n', '        );\n', '\n', '        request.status = RequestStatus.Refunded;\n', '\n', '        emit CreateAccountRefund(operationId, request.requestor, request.paid);\n', '        return true;\n', '    }\n', '\n', '    // emits\n', '    event CreateAccountRefund(\n', '        string id, \n', '        address requestor, \n', '        uint256 refundAmountWei\n', '    );\n', '}\n', '\n', '// File: eip2021/contracts/IPayoutable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IPayoutable {\n', '    enum PayoutStatusCode {\n', '        Nonexistent,\n', '        Ordered,\n', '        InProcess,\n', '        FundsInSuspense,\n', '        Executed,\n', '        Rejected,\n', '        Cancelled\n', '    }\n', '\n', '    function orderPayout(string calldata operationId, uint256 value, string calldata instructions) external returns (bool);\n', '    function orderPayoutFrom(\n', '        string calldata operationId,\n', '        address walletToBePaidOut,\n', '        uint256 value,\n', '        string calldata instructions\n', '    ) external returns (bool);\n', '    function cancelPayout(string calldata operationId) external returns (bool);\n', '    function processPayout(string calldata operationId) external returns (bool);\n', '    function putFundsInSuspenseInPayout(string calldata operationId) external returns (bool);\n', '    function executePayout(string calldata operationId) external returns (bool);\n', '    function rejectPayout(string calldata operationId, string calldata reason) external returns (bool);\n', '    function retrievePayoutData(string calldata operationId) external view returns (\n', '        address walletToDebit,\n', '        uint256 value,\n', '        string memory instructions,\n', '        PayoutStatusCode status\n', '    );\n', '\n', '    function authorizePayoutOperator(address operator) external returns (bool);\n', '    function revokePayoutOperator(address operator) external returns (bool);\n', '    function isPayoutOperatorFor(address operator, address from) external view returns (bool);\n', '\n', '    event PayoutOrdered(address indexed orderer, string operationId, address indexed walletToDebit, uint256 value, string instructions);\n', '    event PayoutInProcess(address indexed orderer, string operationId);\n', '    event PayoutFundsInSuspense(address indexed orderer, string operationId);\n', '    event PayoutExecuted(address indexed orderer, string operationId);\n', '    event PayoutRejected(address indexed orderer, string operationId, string reason);\n', '    event PayoutCancelled(address indexed orderer, string operationId);\n', '    event AuthorizedPayoutOperator(address indexed operator, address indexed account);\n', '    event RevokedPayoutOperator(address indexed operator, address indexed account);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: eip1996/contracts/IHoldable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IHoldable {\n', '    enum HoldStatusCode {\n', '        Nonexistent,\n', '        Ordered,\n', '        Executed,\n', '        ExecutedAndKeptOpen,\n', '        ReleasedByNotary,\n', '        ReleasedByPayee,\n', '        ReleasedOnExpiration\n', '    }\n', '\n', '    function hold(\n', '        string calldata operationId,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 timeToExpiration\n', '    ) external returns (bool);\n', '    function holdFrom(\n', '        string calldata operationId,\n', '        address from,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 timeToExpiration\n', '    ) external returns (bool);\n', '    function releaseHold(string calldata operationId) external returns (bool);\n', '    function executeHold(string calldata operationId, uint256 value) external returns (bool);\n', '    function executeHoldAndKeepOpen(string calldata operationId, uint256 value) external returns (bool);\n', '    function renewHold(string calldata operationId, uint256 timeToExpiration) external returns (bool);\n', '    function retrieveHoldData(string calldata operationId) external view returns (\n', '        address from,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 expiration,\n', '        HoldStatusCode status\n', '    );\n', '\n', '    function balanceOnHold(address account) external view returns (uint256);\n', '    function netBalanceOf(address account) external view returns (uint256);\n', '    function totalSupplyOnHold() external view returns (uint256);\n', '\n', '    function authorizeHoldOperator(address operator) external returns (bool);\n', '    function revokeHoldOperator(address operator) external returns (bool);\n', '    function isHoldOperatorFor(address operator, address from) external view returns (bool);\n', '\n', '    event HoldCreated(\n', '        address indexed holdIssuer,\n', '        string  operationId,\n', '        address from,\n', '        address to,\n', '        address indexed notary,\n', '        uint256 value,\n', '        uint256 expiration\n', '    );\n', '    event HoldExecuted(address indexed holdIssuer, string operationId, address indexed notary, uint256 heldValue, uint256 transferredValue);\n', '    event HoldExecutedAndKeptOpen(address indexed holdIssuer, string operationId, address indexed notary, uint256 heldValue,\n', '    uint256 transferredValue);\n', '    event HoldReleased(address indexed holdIssuer, string operationId, HoldStatusCode status);\n', '    event HoldRenewed(address indexed holdIssuer, string operationId, uint256 oldExpiration, uint256 newExpiration);\n', '    event AuthorizedHoldOperator(address indexed operator, address indexed account);\n', '    event RevokedHoldOperator(address indexed operator, address indexed account);\n', '}\n', '\n', '// File: eip1996/contracts/Holdable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract Holdable is IHoldable, ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using StringUtil for string;\n', '\n', '    struct Hold {\n', '        address issuer;\n', '        address origin;\n', '        address target;\n', '        address notary;\n', '        uint256 expiration;\n', '        uint256 value;\n', '        HoldStatusCode status;\n', '    }\n', '\n', '    mapping(bytes32 => Hold) internal holds;\n', '    mapping(address => uint256) private heldBalance;\n', '    mapping(address => mapping(address => bool)) private operators;\n', '\n', '    uint256 private _totalHeldBalance;\n', '\n', '    function hold(\n', '        string memory operationId,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 timeToExpiration\n', '    ) public returns (bool)\n', '    {\n', '        require(to != address(0), "Payee address must not be zero address");\n', '\n', '        emit HoldCreated(\n', '            msg.sender,\n', '            operationId,\n', '            msg.sender,\n', '            to,\n', '            notary,\n', '            value,\n', '            timeToExpiration\n', '        );\n', '\n', '        return _hold(\n', '            operationId,\n', '            msg.sender,\n', '            msg.sender,\n', '            to,\n', '            notary,\n', '            value,\n', '            timeToExpiration\n', '        );\n', '    }\n', '\n', '    function holdFrom(\n', '        string memory operationId,\n', '        address from,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 timeToExpiration\n', '    ) public returns (bool)\n', '    {\n', '        require(to != address(0), "Payee address must not be zero address");\n', '        require(from != address(0), "Payer address must not be zero address");\n', '        require(operators[from][msg.sender], "This operator is not authorized");\n', '\n', '        emit HoldCreated(\n', '            msg.sender,\n', '            operationId,\n', '            from,\n', '            to,\n', '            notary,\n', '            value,\n', '            timeToExpiration\n', '        );\n', '\n', '        return _hold(\n', '            operationId,\n', '            msg.sender,\n', '            from,\n', '            to,\n', '            notary,\n', '            value,\n', '            timeToExpiration\n', '        );\n', '    }\n', '\n', '    function releaseHold(string memory operationId) public returns (bool) {\n', '        Hold storage releasableHold = holds[operationId.toHash()];\n', '\n', '        require(releasableHold.status == HoldStatusCode.Ordered || releasableHold.status == HoldStatusCode.ExecutedAndKeptOpen,"A hold can only be released in status Ordered or ExecutedAndKeptOpen");\n', '        require(\n', '            _isExpired(releasableHold.expiration) ||\n', '            (msg.sender == releasableHold.notary) ||\n', '            (msg.sender == releasableHold.target),\n', '            "A not expired hold can only be released by the notary or the payee"\n', '        );\n', '\n', '        _releaseHold(operationId);\n', '\n', '        emit HoldReleased(releasableHold.issuer, operationId, releasableHold.status);\n', '\n', '        return true;\n', '    }\n', '\n', '    function executeHold(string memory operationId, uint256 value) public returns (bool) { \n', '        return _executeHold(operationId, value, false);\n', '    }\n', '\n', '    function executeHoldAndKeepOpen(string memory operationId, uint256 value) public returns (bool) {\n', '        return _executeHold(operationId, value, true);\n', '    }\n', '\n', '\n', '    function _executeHold(string memory operationId, uint256 value, bool keepOpenIfHoldHasBalance) internal returns (bool) {\n', '\n', '        Hold storage executableHold = holds[operationId.toHash()];\n', '\n', '        require(executableHold.status == HoldStatusCode.Ordered || executableHold.status == HoldStatusCode.ExecutedAndKeptOpen,"A hold can only be executed in status Ordered or ExecutedAndKeptOpen");\n', '        require(value != 0, "Value must be greater than zero");\n', '        require(executableHold.notary == msg.sender, "The hold can only be executed by the notary");\n', '        require(!_isExpired(executableHold.expiration), "The hold has already expired");\n', '        require(value <= executableHold.value, "The value should be equal or less than the held amount");\n', '\n', '\n', '        if (keepOpenIfHoldHasBalance && ((executableHold.value - value) > 0)) {\n', '            _decreaseHeldBalance(operationId, value);\n', '            _setHoldToExecutedAndKeptOpen(operationId, value); \n', '        }else {\n', '            _decreaseHeldBalance(operationId, executableHold.value);\n', '            _setHoldToExecuted(operationId, value);\n', '        }\n', '        \n', '  \n', '        \n', '\n', '        _transfer(executableHold.origin, executableHold.target, value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function renewHold(string memory operationId, uint256 timeToExpiration) public returns (bool) {\n', '        Hold storage renewableHold = holds[operationId.toHash()];\n', '\n', '        require(renewableHold.status == HoldStatusCode.Ordered, "A hold can only be renewed in status Ordered");\n', '        require(!_isExpired(renewableHold.expiration), "An expired hold can not be renewed");\n', '        require(\n', '            renewableHold.origin == msg.sender || renewableHold.issuer == msg.sender,\n', '            "The hold can only be renewed by the issuer or the payer"\n', '        );\n', '\n', '        uint256 oldExpiration = renewableHold.expiration;\n', '\n', '        if (timeToExpiration == 0) {\n', '            renewableHold.expiration = 0;\n', '        } else {\n', '            /* solium-disable-next-line security/no-block-members */\n', '            renewableHold.expiration = now.add(timeToExpiration);\n', '        }\n', '\n', '        emit HoldRenewed(\n', '            renewableHold.issuer,\n', '            operationId,\n', '            oldExpiration,\n', '            renewableHold.expiration\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function retrieveHoldData(string memory operationId) public view returns (\n', '        address from,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 expiration,\n', '        HoldStatusCode status)\n', '    {\n', '        Hold storage retrievedHold = holds[operationId.toHash()];\n', '        return (\n', '            retrievedHold.origin,\n', '            retrievedHold.target,\n', '            retrievedHold.notary,\n', '            retrievedHold.value,\n', '            retrievedHold.expiration,\n', '            retrievedHold.status\n', '        );\n', '    }\n', '\n', '    function balanceOnHold(address account) public view returns (uint256) {\n', '        return heldBalance[account];\n', '    }\n', '\n', '    function netBalanceOf(address account) public view returns (uint256) {\n', '        return super.balanceOf(account);\n', '    }\n', '\n', '    function totalSupplyOnHold() public view returns (uint256) {\n', '        return _totalHeldBalance;\n', '    }\n', '\n', '    function isHoldOperatorFor(address operator, address from) public view returns (bool) {\n', '        return operators[from][operator];\n', '    }\n', '\n', '    function authorizeHoldOperator(address operator) public returns (bool) {\n', '        require (operators[msg.sender][operator] == false, "The operator is already authorized");\n', '\n', '        operators[msg.sender][operator] = true;\n', '        emit AuthorizedHoldOperator(operator, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function revokeHoldOperator(address operator) public returns (bool) {\n', '        require (operators[msg.sender][operator] == true, "The operator is already not authorized");\n', '\n', '        operators[msg.sender][operator] = false;\n', '        emit RevokedHoldOperator(operator, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Retrieve the erc20.balanceOf(account) - heldBalance(account)\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return super.balanceOf(account).sub(heldBalance[account]);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf(msg.sender) >= _value, "Not enough available balance");\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf(_from) >= _value, "Not enough available balance");\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function _isExpired(uint256 expiration) internal view returns (bool) {\n', '        /* solium-disable-next-line security/no-block-members */\n', '        return expiration != 0 && (now >= expiration);\n', '    }\n', '\n', '    function _hold(\n', '        string memory operationId,\n', '        address issuer,\n', '        address from,\n', '        address to,\n', '        address notary,\n', '        uint256 value,\n', '        uint256 timeToExpiration\n', '    ) internal returns (bool)\n', '    {\n', '        Hold storage newHold = holds[operationId.toHash()];\n', '\n', '        require(!operationId.isEmpty(), "Operation ID must not be empty");\n', '        require(value != 0, "Value must be greater than zero");\n', '        require(newHold.value == 0, "This operationId already exists");\n', '        require(notary != address(0), "Notary address must not be zero address");\n', '        require(value <= balanceOf(from), "Amount of the hold can\'t be greater than the balance of the origin");\n', '\n', '        newHold.issuer = issuer;\n', '        newHold.origin = from;\n', '        newHold.target = to;\n', '        newHold.notary = notary;\n', '        newHold.value = value;\n', '        newHold.status = HoldStatusCode.Ordered;\n', '\n', '        if (timeToExpiration != 0) {\n', '            /* solium-disable-next-line security/no-block-members */\n', '            newHold.expiration = now.add(timeToExpiration);\n', '        }\n', '\n', '        heldBalance[from] = heldBalance[from].add(value);\n', '        _totalHeldBalance = _totalHeldBalance.add(value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _releaseHold(string memory operationId) internal returns (bool) {\n', '        Hold storage releasableHold = holds[operationId.toHash()];\n', '\n', '        if (_isExpired(releasableHold.expiration)) {\n', '            releasableHold.status = HoldStatusCode.ReleasedOnExpiration;\n', '        } else {\n', '            if (releasableHold.notary == msg.sender) {\n', '                releasableHold.status = HoldStatusCode.ReleasedByNotary;\n', '            } else {\n', '                releasableHold.status = HoldStatusCode.ReleasedByPayee;\n', '            }\n', '        }\n', '\n', '        heldBalance[releasableHold.origin] = heldBalance[releasableHold.origin].sub(releasableHold.value);\n', '        _totalHeldBalance = _totalHeldBalance.sub(releasableHold.value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _setHoldToExecuted(string memory operationId, uint256 value) internal {\n', '        Hold storage executableHold = holds[operationId.toHash()];\n', '        executableHold.status = HoldStatusCode.Executed;\n', '\n', '        emit HoldExecuted(\n', '            executableHold.issuer, \n', '            operationId,\n', '            executableHold.notary,\n', '            executableHold.value,\n', '            value\n', '        );\n', '    }\n', '\n', '    function _setHoldToExecutedAndKeptOpen(string memory operationId, uint256 value) internal {\n', '        Hold storage executableHold = holds[operationId.toHash()];\n', '        executableHold.status = HoldStatusCode.ExecutedAndKeptOpen;\n', '        executableHold.value = executableHold.value.sub(value);\n', '\n', '        emit HoldExecutedAndKeptOpen(\n', '            executableHold.issuer,\n', '            operationId,\n', '            executableHold.notary,\n', '            executableHold.value,\n', '            value\n', '            );\n', '    }\n', '\n', '    function _decreaseHeldBalance(string memory operationId, uint256 value) internal {\n', '        Hold storage executableHold = holds[operationId.toHash()];\n', '        heldBalance[executableHold.origin] = heldBalance[executableHold.origin].sub(value);\n', '        _totalHeldBalance = _totalHeldBalance.sub(value);\n', '    }\n', '}\n', '\n', '// File: contracts/Payoutable.sol\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// modification: allow Suspense --> User\n', 'contract Payoutable is IPayoutable, Holdable {\n', '\n', '    struct OrderedPayout {\n', '        string instructions;\n', '        PayoutStatusCode status;\n', '    }\n', '\n', '    mapping(bytes32 => OrderedPayout) private orderedPayouts;\n', '    mapping(address => mapping(address => bool)) private payoutOperators;\n', '    address public payoutAgent;\n', '    address public suspenseAccount;\n', '\n', '    constructor(address _suspenseAccount) public {\n', '        require(_suspenseAccount != address(0), "Suspense account must not be the zero address");\n', '        suspenseAccount = _suspenseAccount;\n', '\n', '        payoutAgent = _suspenseAccount;\n', '    }\n', '\n', '    function orderPayout(string calldata operationId, uint256 value, string calldata instructions) external returns (bool) {\n', '        _orderPayout(\n', '            msg.sender,\n', '            operationId,\n', '            msg.sender,\n', '            value,\n', '            instructions\n', '        );\n', '\n', '        emit PayoutOrdered(\n', '            msg.sender,\n', '            operationId,\n', '            msg.sender,\n', '            value,\n', '            instructions\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function orderPayoutFrom(\n', '        string calldata operationId,\n', '        address walletToBePaidOut,\n', '        uint256 value,\n', '        string calldata instructions\n', '    ) external returns (bool)\n', '    {\n', '        require(walletToBePaidOut != address(0), "walletToBePaidOut address must not be zero address");\n', '        require(payoutOperators[walletToBePaidOut][msg.sender], "This operator is not authorized");\n', '\n', '        emit PayoutOrdered(\n', '            msg.sender,\n', '            operationId,\n', '            walletToBePaidOut,\n', '            value,\n', '            instructions\n', '        );\n', '\n', '        return _orderPayout(\n', '            msg.sender,\n', '            operationId,\n', '            walletToBePaidOut,\n', '            value,\n', '            instructions\n', '        );\n', '    }\n', '\n', '    function cancelPayout(string calldata operationId) external returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage cancelablePayout = orderedPayouts[operationIdHash];\n', '        Hold storage cancelableHold = holds[operationIdHash];\n', '\n', '        require(cancelablePayout.status == PayoutStatusCode.Ordered, "A payout can only be cancelled in status Ordered");\n', '        require(\n', '            msg.sender == cancelableHold.issuer || msg.sender == cancelableHold.origin,\n', '            "A payout can only be cancelled by the orderer or the walletToBePaidOut"\n', '        );\n', '\n', '        _releaseHold(operationId);\n', '\n', '        cancelablePayout.status = PayoutStatusCode.Cancelled;\n', '\n', '        emit PayoutCancelled(\n', '            cancelableHold.issuer,\n', '            operationId\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function processPayout(string calldata operationId) external returns (bool) {\n', '        revert("Function not supported in this implementation");\n', '    }\n', '\n', '    function putFundsInSuspenseInPayout(string calldata operationId) external returns (bool) {\n', '        revert("Function not supported in this implementation");\n', '    }\n', '\n', '    event PayoutFundsReady(string operationId, uint256 amount, string instructions);\n', '    function transferPayoutToSuspenseAccount(string calldata operationId) external returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage inSuspensePayout = orderedPayouts[operationIdHash];\n', '\n', '        require(inSuspensePayout.status == PayoutStatusCode.Ordered, "A payout can only be set to FundsInSuspense from status Ordered");\n', '        require(msg.sender == payoutAgent, "A payout can only be set to in suspense by the payout agent");\n', '\n', '        Hold storage inSuspenseHold = holds[operationIdHash];\n', '\n', '        super._transfer(inSuspenseHold.origin, inSuspenseHold.target, inSuspenseHold.value);\n', '        super._setHoldToExecuted(operationId, inSuspenseHold.value);\n', '\n', '        _releaseHold(operationId);\n', '        inSuspensePayout.status = PayoutStatusCode.FundsInSuspense;\n', '\n', '        emit PayoutFundsInSuspense(\n', '            inSuspenseHold.issuer,\n', '            operationId\n', '        );\n', '\n', '        emit PayoutFundsReady(\n', '            operationId,\n', '            inSuspenseHold.value,\n', '            inSuspensePayout.instructions\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    // New\n', '    event PayoutFundsReturned(string operationId);\n', '    function returnPayoutFromSuspenseAccount(string calldata operationId) external returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage inSuspensePayout = orderedPayouts[operationIdHash];\n', '\n', '        require(inSuspensePayout.status == PayoutStatusCode.FundsInSuspense, "A payout can only be set back to Ordered from status FundsInSuspense");\n', '        require(msg.sender == payoutAgent, "A payout can only be set back to Ordered by the payout agent");\n', '\n', '        Hold storage inSuspenseHold = holds[operationIdHash];\n', '\n', '        super._transfer(inSuspenseHold.target, inSuspenseHold.origin, inSuspenseHold.value);\n', '\n', '        inSuspensePayout.status = PayoutStatusCode.Ordered;\n', '\n', '        emit PayoutFundsReturned(\n', '            operationId\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function executePayout(string calldata operationId) external returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage executedPayout = orderedPayouts[operationIdHash];\n', '\n', '        require(executedPayout.status == PayoutStatusCode.FundsInSuspense, "A payout can only be executed from status FundsInSuspense");\n', '        require(msg.sender == payoutAgent, "A payout can only be executed by the payout agent");\n', '\n', '        Hold storage executedHold = holds[operationIdHash];\n', '\n', '        _burn(executedHold.target, executedHold.value);\n', '\n', '        executedPayout.status = PayoutStatusCode.Executed;\n', '\n', '        emit PayoutExecuted(\n', '            executedHold.issuer,\n', '            operationId\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function rejectPayout(string calldata operationId, string calldata reason) external returns (bool) {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage rejectedPayout = orderedPayouts[operationIdHash];\n', '\n', '        require(rejectedPayout.status == PayoutStatusCode.Ordered, "A payout can only be rejected from status Ordered");\n', '        require(msg.sender == payoutAgent, "A payout can only be rejected by the payout agent");\n', '\n', '        Hold storage rejectedHold = holds[operationIdHash];\n', '\n', '        rejectedPayout.status = PayoutStatusCode.Rejected;\n', '\n', '        emit PayoutRejected(\n', '            rejectedHold.issuer,\n', '            operationId,\n', '            reason\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function retrievePayoutData(string calldata operationId) external view returns (\n', '        address walletToDebit,\n', '        uint256 value,\n', '        string memory instructions,\n', '        PayoutStatusCode status\n', '    )\n', '    {\n', '        bytes32 operationIdHash = operationId.toHash();\n', '\n', '        OrderedPayout storage retrievedPayout = orderedPayouts[operationIdHash];\n', '        Hold storage retrievedHold = holds[operationIdHash];\n', '\n', '        return (\n', '            retrievedHold.origin,\n', '            retrievedHold.value,\n', '            retrievedPayout.instructions,\n', '            retrievedPayout.status\n', '        );\n', '    }\n', '\n', '    function isPayoutOperatorFor(address operator, address from) external view returns (bool) {\n', '        return payoutOperators[from][operator];\n', '    }\n', '\n', '    function authorizePayoutOperator(address operator) external returns (bool) {\n', '        require(payoutOperators[msg.sender][operator] == false, "The operator is already authorized");\n', '\n', '        payoutOperators[msg.sender][operator] = true;\n', '        emit AuthorizedPayoutOperator(operator, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function revokePayoutOperator(address operator) external returns (bool) {\n', '        require(payoutOperators[msg.sender][operator], "The operator is already not authorized");\n', '\n', '        payoutOperators[msg.sender][operator] = false;\n', '        emit RevokedPayoutOperator(operator, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function _orderPayout(\n', '        address orderer,\n', '        string memory operationId,\n', '        address walletToBePaidOut,\n', '        uint256 value,\n', '        string memory instructions\n', '    ) internal returns (bool)\n', '    {\n', '        OrderedPayout storage newPayout = orderedPayouts[operationId.toHash()];\n', '\n', '        require(!instructions.isEmpty(), "Instructions must not be empty");\n', '\n', '        newPayout.instructions = instructions;\n', '        newPayout.status = PayoutStatusCode.Ordered;\n', '\n', '        return _hold(\n', '            operationId,\n', '            orderer,\n', '            walletToBePaidOut,\n', '            suspenseAccount,\n', '            payoutAgent,\n', '            value,\n', '            0\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/Token.sol\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', 'contract wHBAR is Payoutable, AccountCreator {\n', '    string _name;\n', '    string _symbol;\n', '    uint8 _decimals;\n', '\n', '    address _owner;\n', '\n', '    uint256 _accountCreateFee;\n', '    \n', '    constructor(\n', '        string memory __name,\n', '        string memory __symbol,\n', '        uint8 __decimals,\n', '        address __customOwner\n', '\n', '    )\n', '    public\n', '    Payoutable(__customOwner) \n', '    AccountCreator(__customOwner, 50000000000000) \n', '    { // AccountCreator ERC20 Holdable SafeMath, 50k gwei hedera account creation fee\n', '        _name = __name;\n', '        _symbol = __symbol;\n', '        _decimals = __decimals;\n', '        _owner = __customOwner;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public returns (bool) {\n', '        require(_msgSender() == _owner, "unauthorized");\n', '        super._mint(to, amount);\n', '        return true;\n', '    }\n', '}']