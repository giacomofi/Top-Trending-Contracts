['// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./interfaces/IMetaPool.sol";\n', '\n', 'contract TWAPOracle {\n', '    address public immutable pool;\n', '    address public immutable token0;\n', '    address public immutable token1;\n', '    uint256 public price0Average;\n', '    uint256 public price1Average;\n', '    uint256 public pricesBlockTimestampLast;\n', '    uint256[2] public priceCumulativeLast;\n', '\n', '    constructor(\n', '        address _pool,\n', '        address _uADtoken0,\n', '        address _curve3CRVtoken1\n', '    ) {\n', '        pool = _pool;\n', '        // coin at index 0 is uAD and index 1 is 3CRV\n', '        require(\n', '            IMetaPool(_pool).coins(0) == _uADtoken0 &&\n', '                IMetaPool(_pool).coins(1) == _curve3CRVtoken1,\n', '            "TWAPOracle: COIN_ORDER_MISMATCH"\n', '        );\n', '\n', '        token0 = _uADtoken0;\n', '        token1 = _curve3CRVtoken1;\n', '\n', '        uint256 _reserve0 = uint112(IMetaPool(_pool).balances(0));\n', '        uint256 _reserve1 = uint112(IMetaPool(_pool).balances(1));\n', '\n', "        // ensure that there's liquidity in the pair\n", '        require(_reserve0 != 0 && _reserve1 != 0, "TWAPOracle: NO_RESERVES");\n', '        // ensure that pair balance is perfect\n', '        require(_reserve0 == _reserve1, "TWAPOracle: PAIR_UNBALANCED");\n', '        priceCumulativeLast = IMetaPool(_pool).get_price_cumulative_last();\n', '        pricesBlockTimestampLast = IMetaPool(_pool).block_timestamp_last();\n', '\n', '        price0Average = 1 ether;\n', '        price1Average = 1 ether;\n', '    }\n', '\n', '    // calculate average price\n', '    function update() external {\n', '        (uint256[2] memory priceCumulative, uint256 blockTimestamp) =\n', '            _currentCumulativePrices();\n', '\n', '        if (blockTimestamp - pricesBlockTimestampLast > 0) {\n', '            // get the balances between now and the last price cumulative snapshot\n', '            uint256[2] memory twapBalances =\n', '                IMetaPool(pool).get_twap_balances(\n', '                    priceCumulativeLast,\n', '                    priceCumulative,\n', '                    blockTimestamp - pricesBlockTimestampLast\n', '                );\n', '\n', '            // price to exchange amounIn uAD to 3CRV based on TWAP\n', '            price0Average = IMetaPool(pool).get_dy(0, 1, 1 ether, twapBalances);\n', '            // price to exchange amounIn 3CRV to uAD  based on TWAP\n', '            price1Average = IMetaPool(pool).get_dy(1, 0, 1 ether, twapBalances);\n', '            // we update the priceCumulative\n', '            priceCumulativeLast = priceCumulative;\n', '            pricesBlockTimestampLast = blockTimestamp;\n', '        }\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully\n', '    // for the first time.\n', '    function consult(address token) external view returns (uint256 amountOut) {\n', '        if (token == token0) {\n', '            // price to exchange 1 uAD to 3CRV based on TWAP\n', '            amountOut = price0Average;\n', '        } else {\n', '            require(token == token1, "TWAPOracle: INVALID_TOKEN");\n', '            // price to exchange 1 3CRV to uAD  based on TWAP\n', '            amountOut = price1Average;\n', '        }\n', '    }\n', '\n', '    function _currentCumulativePrices()\n', '        internal\n', '        view\n', '        returns (uint256[2] memory priceCumulative, uint256 blockTimestamp)\n', '    {\n', '        priceCumulative = IMetaPool(pool).get_price_cumulative_last();\n', '        blockTimestamp = IMetaPool(pool).block_timestamp_last();\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface IMetaPool {\n', '    event Transfer(\n', '        address indexed sender,\n', '        address indexed receiver,\n', '        uint256 value\n', '    );\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event TokenExchange(\n', '        address indexed buyer,\n', '        int128 sold_id,\n', '        uint256 tokens_sold,\n', '        int128 bought_id,\n', '        uint256 tokens_bought\n', '    );\n', '    event TokenExchangeUnderlying(\n', '        address indexed buyer,\n', '        int128 sold_id,\n', '        uint256 tokens_sold,\n', '        int128 bought_id,\n', '        uint256 tokens_bought\n', '    );\n', '    event AddLiquidity(\n', '        address indexed provider,\n', '        uint256[2] token_amounts,\n', '        uint256[2] fees,\n', '        uint256 invariant,\n', '        uint256 token_supply\n', '    );\n', '    event RemoveLiquidity(\n', '        address indexed provider,\n', '        uint256[2] token_amounts,\n', '        uint256[2] fees,\n', '        uint256 token_supply\n', '    );\n', '    event RemoveLiquidityOne(\n', '        address indexed provider,\n', '        uint256 token_amount,\n', '        uint256 coin_amount,\n', '        uint256 token_supply\n', '    );\n', '    event RemoveLiquidityImbalance(\n', '        address indexed provider,\n', '        uint256[2] token_amounts,\n', '        uint256[2] fees,\n', '        uint256 invariant,\n', '        uint256 token_supply\n', '    );\n', '    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\n', '    event NewAdmin(address indexed admin);\n', '    event CommitNewFee(\n', '        uint256 indexed deadline,\n', '        uint256 fee,\n', '        uint256 admin_fee\n', '    );\n', '    event NewFee(uint256 fee, uint256 admin_fee);\n', '    event RampA(\n', '        uint256 old_A,\n', '        uint256 new_A,\n', '        uint256 initial_time,\n', '        uint256 future_time\n', '    );\n', '    event StopRampA(uint256 A, uint256 t);\n', '\n', '    function initialize(\n', '        string memory _name,\n', '        string memory _symbol,\n', '        address _coin,\n', '        uint256 _decimals,\n', '        uint256 _A,\n', '        uint256 _fee,\n', '        address _admin\n', '    ) external;\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '    function get_previous_balances() external view returns (uint256[2] memory);\n', '\n', '    function get_balances() external view returns (uint256[2] memory);\n', '\n', '    function get_twap_balances(\n', '        uint256[2] memory _first_balances,\n', '        uint256[2] memory _last_balances,\n', '        uint256 _time_elapsed\n', '    ) external view returns (uint256[2] memory);\n', '\n', '    function get_price_cumulative_last()\n', '        external\n', '        view\n', '        returns (uint256[2] memory);\n', '\n', '    function admin_fee() external view returns (uint256);\n', '\n', '    function A() external view returns (uint256);\n', '\n', '    function A_precise() external view returns (uint256);\n', '\n', '    function get_virtual_price() external view returns (uint256);\n', '\n', '    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_token_amount(\n', '        uint256[2] memory _amounts,\n', '        bool _is_deposit,\n', '        bool _previous\n', '    ) external view returns (uint256);\n', '\n', '    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\n', '        external\n', '        returns (uint256);\n', '\n', '    function add_liquidity(\n', '        uint256[2] memory _amounts,\n', '        uint256 _min_mint_amount,\n', '        address _receiver\n', '    ) external returns (uint256);\n', '\n', '    function get_dy(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external view returns (uint256);\n', '\n', '    function get_dy(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256[2] memory _balances\n', '    ) external view returns (uint256);\n', '\n', '    function get_dy_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external view returns (uint256);\n', '\n', '    function get_dy_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256[2] memory _balances\n', '    ) external view returns (uint256);\n', '\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external returns (uint256);\n', '\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy,\n', '        address _receiver\n', '    ) external returns (uint256);\n', '\n', '    function exchange_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external returns (uint256);\n', '\n', '    function exchange_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy,\n', '        address _receiver\n', '    ) external returns (uint256);\n', '\n', '    function remove_liquidity(\n', '        uint256 _burn_amount,\n', '        uint256[2] memory _min_amounts\n', '    ) external returns (uint256[2] memory);\n', '\n', '    function remove_liquidity(\n', '        uint256 _burn_amount,\n', '        uint256[2] memory _min_amounts,\n', '        address _receiver\n', '    ) external returns (uint256[2] memory);\n', '\n', '    function remove_liquidity_imbalance(\n', '        uint256[2] memory _amounts,\n', '        uint256 _max_burn_amount\n', '    ) external returns (uint256);\n', '\n', '    function remove_liquidity_imbalance(\n', '        uint256[2] memory _amounts,\n', '        uint256 _max_burn_amount,\n', '        address _receiver\n', '    ) external returns (uint256);\n', '\n', '    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_withdraw_one_coin(\n', '        uint256 _burn_amount,\n', '        int128 i,\n', '        bool _previous\n', '    ) external view returns (uint256);\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _burn_amount,\n', '        int128 i,\n', '        uint256 _min_received\n', '    ) external returns (uint256);\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _burn_amount,\n', '        int128 i,\n', '        uint256 _min_received,\n', '        address _receiver\n', '    ) external returns (uint256);\n', '\n', '    function ramp_A(uint256 _future_A, uint256 _future_time) external;\n', '\n', '    function stop_ramp_A() external;\n', '\n', '    function admin_balances(uint256 i) external view returns (uint256);\n', '\n', '    function withdraw_admin_fees() external;\n', '\n', '    function admin() external view returns (address);\n', '\n', '    function coins(uint256 arg0) external view returns (address);\n', '\n', '    function balances(uint256 arg0) external view returns (uint256);\n', '\n', '    function fee() external view returns (uint256);\n', '\n', '    function block_timestamp_last() external view returns (uint256);\n', '\n', '    function initial_A() external view returns (uint256);\n', '\n', '    function future_A() external view returns (uint256);\n', '\n', '    function initial_A_time() external view returns (uint256);\n', '\n', '    function future_A_time() external view returns (uint256);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function balanceOf(address arg0) external view returns (uint256);\n', '\n', '    function allowance(address arg0, address arg1)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 800\n', '  },\n', '  "metadata": {\n', '    "bytecodeHash": "none",\n', '    "useLiteralContent": true\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']