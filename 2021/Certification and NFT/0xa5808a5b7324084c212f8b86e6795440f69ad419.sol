['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/cryptography/MerkleProof.sol\n', '\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/merkle-distributor/implementation/MerkleDistributor.sol\n', '\n', '\n', '/**\n', ' * Inspired by:\n', ' * - https://github.com/pie-dao/vested-token-migration-app\n', ' * - https://github.com/Uniswap/merkle-distributor\n', ' * - https://github.com/balancer-labs/erc20-redeemable\n', ' *\n', ' * @title  MerkleDistributor contract.\n', ' * @notice Allows an owner to distribute any reward ERC20 to claimants according to Merkle roots. The owner can specify\n', ' *         multiple Merkle roots distributions with customized reward currencies.\n', ' * @dev    The Merkle trees are not validated in any way, so the system assumes the contract owner behaves honestly.\n', ' */\n', 'contract MerkleDistributor is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // A Window maps a Merkle root to a reward token address.\n', '    struct Window {\n', '        // Merkle root describing the distribution.\n', '        bytes32 merkleRoot;\n', '        // Currency in which reward is processed.\n', '        IERC20 rewardToken;\n', '        // IPFS hash of the merkle tree. Can be used to independently fetch recipient proofs and tree. Note that the canonical\n', '        // data type for storing an IPFS hash is a multihash which is the concatenation of  <varint hash function code>\n', '        // <varint digest size in bytes><hash function output>. We opted to store this in a string type to make it easier\n', '        // for users to query the ipfs data without needing to reconstruct the multihash. to view the IPFS data simply\n', '        // go to https://cloudflare-ipfs.com/ipfs/<IPFS-HASH>.\n', '        string ipfsHash;\n', '    }\n', '\n', "    // Represents an account's claim for `amount` within the Merkle root located at the `windowIndex`.\n", '    struct Claim {\n', '        uint256 windowIndex;\n', '        uint256 amount;\n', '        uint256 accountIndex; // Used only for bitmap. Assumed to be unique for each claim.\n', '        address account;\n', '        bytes32[] merkleProof;\n', '    }\n', '\n', '    // Windows are mapped to arbitrary indices.\n', '    mapping(uint256 => Window) public merkleWindows;\n', '\n', '    // Index of next created Merkle root.\n', '    uint256 public nextCreatedIndex;\n', '\n', '    // Track which accounts have claimed for each window index.\n', "    // Note: uses a packed array of bools for gas optimization on tracking certain claims. Copied from Uniswap's contract.\n", '    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMap;\n', '\n', '    /****************************************\n', '     *                EVENTS\n', '     ****************************************/\n', '    event Claimed(\n', '        address indexed caller,\n', '        uint256 windowIndex,\n', '        address indexed account,\n', '        uint256 accountIndex,\n', '        uint256 amount,\n', '        address indexed rewardToken\n', '    );\n', '    event CreatedWindow(\n', '        uint256 indexed windowIndex,\n', '        uint256 rewardsDeposited,\n', '        address indexed rewardToken,\n', '        address owner\n', '    );\n', '    event WithdrawRewards(address indexed owner, uint256 amount, address indexed currency);\n', '    event DeleteWindow(uint256 indexed windowIndex, address owner);\n', '\n', '    /****************************\n', '     *      ADMIN FUNCTIONS\n', '     ****************************/\n', '\n', '    /**\n', '     * @notice Set merkle root for the next available window index and seed allocations.\n', '     * @notice Callable only by owner of this contract. Caller must have approved this contract to transfer\n', '     *      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the\n', '     *      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all\n', '     *      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur\n', '     *      because we do not segregate reward balances by window, for code simplicity purposes.\n', '     *      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must\n', '     *      subsequently transfer in rewards or the following situation can occur).\n', '     *      Example race situation:\n', '     *          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and\n', '     *            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.\n', '     *          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner\n', '     *            correctly set `rewardsToDeposit` this time.\n', '     *          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:\n', '     *              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.\n', '     *              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.\n', '     *              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.\n', '     *          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would\n', '     *            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.\n', '     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.\n', '     * @param rewardToken ERC20 reward token.\n', '     * @param merkleRoot merkle root describing allocation.\n', '     * @param ipfsHash hash of IPFS object, conveniently stored for clients\n', '     */\n', '    function setWindow(\n', '        uint256 rewardsToDeposit,\n', '        address rewardToken,\n', '        bytes32 merkleRoot,\n', '        string memory ipfsHash\n', '    ) external onlyOwner {\n', '        uint256 indexToSet = nextCreatedIndex;\n', '        nextCreatedIndex = indexToSet.add(1);\n', '\n', '        _setWindow(indexToSet, rewardsToDeposit, rewardToken, merkleRoot, ipfsHash);\n', '    }\n', '\n', '    /**\n', '     * @notice Delete merkle root at window index.\n', '     * @dev Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.\n', '     * @param windowIndex merkle root index to delete.\n', '     */\n', '    function deleteWindow(uint256 windowIndex) external onlyOwner {\n', '        delete merkleWindows[windowIndex];\n', '        emit DeleteWindow(windowIndex, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Emergency method that transfers rewards out of the contract if the contract was configured improperly.\n', '     * @dev Callable only by owner.\n', '     * @param rewardCurrency rewards to withdraw from contract.\n', '     * @param amount amount of rewards to withdraw.\n', '     */\n', '    function withdrawRewards(address rewardCurrency, uint256 amount) external onlyOwner {\n', '        IERC20(rewardCurrency).safeTransfer(msg.sender, amount);\n', '        emit WithdrawRewards(msg.sender, amount, rewardCurrency);\n', '    }\n', '\n', '    /****************************\n', '     *    NON-ADMIN FUNCTIONS\n', '     ****************************/\n', '\n', '    /**\n', '     * @notice Batch claims to reduce gas versus individual submitting all claims. Method will fail\n', '     *         if any individual claims within the batch would fail.\n', '     * @dev    Optimistically tries to batch together consecutive claims for the same account and same\n', '     *         reward token to reduce gas. Therefore, the most gas-cost-optimal way to use this method\n', '     *         is to pass in an array of claims sorted by account and reward currency.\n', '     * @param claims array of claims to claim.\n', '     */\n', '    function claimMulti(Claim[] memory claims) external {\n', '        uint256 batchedAmount = 0;\n', '        uint256 claimCount = claims.length;\n', '        for (uint256 i = 0; i < claimCount; i++) {\n', '            Claim memory _claim = claims[i];\n', '            _verifyAndMarkClaimed(_claim);\n', '            batchedAmount = batchedAmount.add(_claim.amount);\n', '\n', '            // If the next claim is NOT the same account or the same token (or this claim is the last one),\n', "            // then disburse the `batchedAmount` to the current claim's account for the current claim's reward token.\n", '            uint256 nextI = i + 1;\n', '            address currentRewardToken = address(merkleWindows[_claim.windowIndex].rewardToken);\n', '            if (\n', '                nextI == claimCount ||\n', '                // This claim is last claim.\n', '                claims[nextI].account != _claim.account ||\n', '                // Next claim account is different than current one.\n', '                address(merkleWindows[claims[nextI].windowIndex].rewardToken) != currentRewardToken\n', '                // Next claim reward token is different than current one.\n', '            ) {\n', '                IERC20(currentRewardToken).safeTransfer(_claim.account, batchedAmount);\n', '                batchedAmount = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Claim amount of reward tokens for account, as described by Claim input object.\n', "     * @dev    If the `_claim`'s `amount`, `accountIndex`, and `account` do not exactly match the\n", "     *         values stored in the merkle root for the `_claim`'s `windowIndex` this method\n", '     *         will revert.\n', '     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\n', '     */\n', '    function claim(Claim memory _claim) public {\n', '        _verifyAndMarkClaimed(_claim);\n', '        merkleWindows[_claim.windowIndex].rewardToken.safeTransfer(_claim.account, _claim.amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns True if the claim for `accountIndex` has already been completed for the Merkle root at\n', '     *         `windowIndex`.\n', "     * @dev    This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.\n", '     *         The onus is on the Owner of this contract to submit only valid Merkle roots.\n', '     * @param windowIndex merkle root to check.\n', '     * @param accountIndex account index to check within window index.\n', '     * @return True if claim has been executed already, False otherwise.\n', '     */\n', '    function isClaimed(uint256 windowIndex, uint256 accountIndex) public view returns (bool) {\n', '        uint256 claimedWordIndex = accountIndex / 256;\n', '        uint256 claimedBitIndex = accountIndex % 256;\n', '        uint256 claimedWord = claimedBitMap[windowIndex][claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns True if leaf described by {account, amount, accountIndex} is stored in Merkle root at given\n', '     *         window index.\n', '     * @param _claim claim object describing amount, accountIndex, account, window index, and merkle proof.\n', '     * @return valid True if leaf exists.\n', '     */\n', '    function verifyClaim(Claim memory _claim) public view returns (bool valid) {\n', '        bytes32 leaf = keccak256(abi.encodePacked(_claim.account, _claim.amount, _claim.accountIndex));\n', '        return MerkleProof.verify(_claim.merkleProof, merkleWindows[_claim.windowIndex].merkleRoot, leaf);\n', '    }\n', '\n', '    /****************************\n', '     *     PRIVATE FUNCTIONS\n', '     ****************************/\n', '\n', '    // Mark claim as completed for `accountIndex` for Merkle root at `windowIndex`.\n', '    function _setClaimed(uint256 windowIndex, uint256 accountIndex) private {\n', '        uint256 claimedWordIndex = accountIndex / 256;\n', '        uint256 claimedBitIndex = accountIndex % 256;\n', '        claimedBitMap[windowIndex][claimedWordIndex] =\n', '            claimedBitMap[windowIndex][claimedWordIndex] |\n', '            (1 << claimedBitIndex);\n', '    }\n', '\n', '    // Store new Merkle root at `windowindex`. Pull `rewardsDeposited` from caller to seed distribution for this root.\n', '    function _setWindow(\n', '        uint256 windowIndex,\n', '        uint256 rewardsDeposited,\n', '        address rewardToken,\n', '        bytes32 merkleRoot,\n', '        string memory ipfsHash\n', '    ) private {\n', '        Window storage window = merkleWindows[windowIndex];\n', '        window.merkleRoot = merkleRoot;\n', '        window.rewardToken = IERC20(rewardToken);\n', '        window.ipfsHash = ipfsHash;\n', '\n', '        emit CreatedWindow(windowIndex, rewardsDeposited, rewardToken, msg.sender);\n', '\n', '        window.rewardToken.safeTransferFrom(msg.sender, address(this), rewardsDeposited);\n', '    }\n', '\n', '    // Verify claim is valid and mark it as completed in this contract.\n', '    function _verifyAndMarkClaimed(Claim memory _claim) private {\n', '        // Check claimed proof against merkle window at given index.\n', '        require(verifyClaim(_claim), "Incorrect merkle proof");\n', '        // Check the account has not yet claimed for this window.\n', '        require(!isClaimed(_claim.windowIndex, _claim.accountIndex), "Account has already claimed for this window");\n', '\n', '        // Proof is correct and claim has not occurred yet, mark claimed complete.\n', '        _setClaimed(_claim.windowIndex, _claim.accountIndex);\n', '        emit Claimed(\n', '            msg.sender,\n', '            _claim.windowIndex,\n', '            _claim.account,\n', '            _claim.accountIndex,\n', '            _claim.amount,\n', '            address(merkleWindows[_claim.windowIndex].rewardToken)\n', '        );\n', '    }\n', '}']