['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Implements delegation of calls to other contracts, with proper\n', ' * forwarding of return values and bubbling of failures.\n', ' * It defines a fallback function that delegates all calls to the address\n', ' * returned by the abstract _implementation() internal function.\n', ' */\n', 'abstract contract Proxy {\n', '  /**\n', '   * @dev Fallback function.\n', '   * Implemented entirely in `_fallback`.\n', '   */\n', '  fallback () payable external {\n', '    _fallback();\n', '  }\n', '  \n', '  receive () payable external {\n', '    _fallback();\n', '  }\n', '\n', '  /**\n', '   * @return The Address of the implementation.\n', '   */\n', '  function _implementation() virtual internal view returns (address);\n', '\n', '  /**\n', '   * @dev Delegates execution to an implementation contract.\n', "   * This is a low level function that doesn't return to its internal call site.\n", '   * It will return to the external caller whatever the implementation returns.\n', '   * @param implementation Address to delegate.\n', '   */\n', '  function _delegate(address implementation) internal {\n', '    assembly {\n', '      // Copy msg.data. We take full control of memory in this inline assembly\n', '      // block because it will not return to Solidity code. We overwrite the\n', '      // Solidity scratch pad at memory position 0.\n', '      calldatacopy(0, 0, calldatasize())\n', '\n', '      // Call the implementation.\n', "      // out and outsize are 0 because we don't know the size yet.\n", '      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '      // Copy the returned data.\n', '      returndatacopy(0, 0, returndatasize())\n', '\n', '      switch result\n', '      // delegatecall returns 0 on error.\n', '      case 0 { revert(0, returndatasize()) }\n', '      default { return(0, returndatasize()) }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is run as the first thing in the fallback function.\n', '   * Can be redefined in derived contracts to add functionality.\n', '   * Redefinitions must call super._willFallback().\n', '   */\n', '  function _willFallback() virtual internal {\n', '      \n', '  }\n', '\n', '  /**\n', '   * @dev fallback implementation.\n', '   * Extracted to enable manual triggering.\n', '   */\n', '  function _fallback() internal {\n', '    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\n', '        return;\n', '    _willFallback();\n', '    _delegate(_implementation());\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseUpgradeabilityProxy\n', ' * @dev This contract implements a proxy that allows to change the\n', ' * implementation address to which it will delegate.\n', ' * Such a change is called an implementation upgrade.\n', ' */\n', 'abstract contract BaseUpgradeabilityProxy is Proxy {\n', '  /**\n', '   * @dev Emitted when the implementation is upgraded.\n', '   * @param implementation Address of the new implementation.\n', '   */\n', '  event Upgraded(address indexed implementation);\n', '\n', '  /**\n', '   * @dev Storage slot with the address of the current implementation.\n', '   * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return impl Address of the current implementation\n', '   */\n', '  function _implementation() override internal view returns (address impl) {\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '    assembly {\n', '      impl := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the proxy to a new implementation.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _upgradeTo(address newImplementation) internal {\n', '    _setImplementation(newImplementation);\n', '    emit Upgraded(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the implementation address of the proxy.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function _setImplementation(address newImplementation) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '\n', '    bytes32 slot = IMPLEMENTATION_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newImplementation)\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title BaseAdminUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with an authorization\n', ' * mechanism for administrative tasks.\n', ' * All external functions in this contract must be guarded by the\n', ' * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n', ' * feature proposal that would enable this to be done automatically.\n', ' */\n', 'contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Emitted when the administration has been transferred.\n', '   * @param previousAdmin Address of the previous admin.\n', '   * @param newAdmin Address of the new admin.\n', '   */\n', '  event AdminChanged(address previousAdmin, address newAdmin);\n', '\n', '  /**\n', '   * @dev Storage slot with the admin of the contract.\n', '   * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '\n', '  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '  /**\n', '   * @dev Modifier to check whether the `msg.sender` is the admin.\n', '   * If it is, it will run the function. Otherwise, it will delegate the call\n', '   * to the implementation.\n', '   */\n', '  modifier ifAdmin() {\n', '    if (msg.sender == _admin()) {\n', '      _;\n', '    } else {\n', '      _fallback();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @return The address of the proxy admin.\n', '   */\n', '  function admin() external ifAdmin returns (address) {\n', '    return _admin();\n', '  }\n', '\n', '  /**\n', '   * @return The address of the implementation.\n', '   */\n', '  function implementation() external ifAdmin returns (address) {\n', '    return _implementation();\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the admin of the proxy.\n', '   * Only the current admin can call this function.\n', '   * @param newAdmin Address to transfer proxy administration to.\n', '   */\n', '  function changeAdmin(address newAdmin) external ifAdmin {\n', '    require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");\n', '    emit AdminChanged(_admin(), newAdmin);\n', '    _setAdmin(newAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy.\n', '   * Only the admin can call this function.\n', '   * @param newImplementation Address of the new implementation.\n', '   */\n', '  function upgradeTo(address newImplementation) external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrade the backing implementation of the proxy and call a function\n', '   * on the new implementation.\n', '   * This is useful to initialize the proxied contract.\n', '   * @param newImplementation Address of the new implementation.\n', '   * @param data Data to send as msg.data in the low level call.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   */\n', '  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n', '    _upgradeTo(newImplementation);\n', '    (bool success,) = newImplementation.delegatecall(data);\n', '    require(success);\n', '  }\n', '\n', '  /**\n', '   * @return adm The admin slot.\n', '   */\n', '  function _admin() internal view returns (address adm) {\n', '    bytes32 slot = ADMIN_SLOT;\n', '    assembly {\n', '      adm := sload(slot)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the proxy admin.\n', '   * @param newAdmin Address of the new proxy admin.\n', '   */\n', '  function _setAdmin(address newAdmin) internal {\n', '    bytes32 slot = ADMIN_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newAdmin)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Only fall back when the sender is not the admin.\n', '   */\n', '  function _willFallback() virtual override internal {\n', '    require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");\n', '    //super._willFallback();\n', '  }\n', '}\n', '\n', 'interface IAdminUpgradeabilityProxyView {\n', '  function admin() external view returns (address);\n', '  function implementation() external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _logic, bytes memory _data) public payable {\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '  \n', '  //function _willFallback() virtual override internal {\n', '    //super._willFallback();\n', '  //}\n', '}\n', '\n', '\n', '/**\n', ' * @title AdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\n', '  /**\n', '   * Contract constructor.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  constructor(address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableUpgradeabilityProxy\n', ' * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\n', ' * implementation and init data.\n', ' */\n', 'abstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param _logic Address of the initial implementation.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', "    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n", '    _setImplementation(_logic);\n', '    if(_data.length > 0) {\n', '      (bool success,) = _logic.delegatecall(_data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableAdminUpgradeabilityProxy\n', ' * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \n', ' * initializing the implementation, admin, and init data.\n', ' */\n', 'contract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\n', '  /**\n', '   * Contract initializer.\n', '   * @param _logic address of the initial implementation.\n', '   * @param _admin Address of the proxy administrator.\n', '   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address _admin, address _logic, bytes memory _data) public payable {\n', '    require(_implementation() == address(0));\n', '    InitializableUpgradeabilityProxy.initialize(_logic, _data);\n', "    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n", '    _setAdmin(_admin);\n', '  }\n', '  \n', '  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\n', '    super._willFallback();\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface IProxyFactory {\n', '    function productImplementation() external view returns (address);\n', '    function productImplementations(bytes32 name) external view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * @title ProductProxy\n', ' * @dev This contract implements a proxy that \n', ' * it is deploied by ProxyFactory, \n', " * and it's implementation is stored in factory.\n", ' */\n', 'contract ProductProxy is Proxy {\n', '    \n', '  /**\n', '   * @dev Storage slot with the address of the ProxyFactory.\n', '   * This is the keccak-256 hash of "eip1967.proxy.factory" subtracted by 1, and is\n', '   * validated in the constructor.\n', '   */\n', '  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\n', '\n', '  function productName() virtual public pure returns (bytes32) {\n', '    return 0x0;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the factory address of the ProductProxy.\n', '   * @param newFactory Address of the new factory.\n', '   */\n', '  function _setFactory(address newFactory) internal {\n', '    require(OpenZeppelinUpgradesAddress.isContract(newFactory), "Cannot set a factory to a non-contract address");\n', '\n', '    bytes32 slot = FACTORY_SLOT;\n', '\n', '    assembly {\n', '      sstore(slot, newFactory)\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the factory.\n', '   * @return factory Address of the factory.\n', '   */\n', '  function _factory() internal view returns (address factory) {\n', '    bytes32 slot = FACTORY_SLOT;\n', '    assembly {\n', '      factory := sload(slot)\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Returns the current implementation.\n', '   * @return Address of the current implementation\n', '   */\n', '  function _implementation() virtual override internal view returns (address) {\n', '    address factory = _factory();\n', '    if(OpenZeppelinUpgradesAddress.isContract(factory))\n', '        return IProxyFactory(factory).productImplementations(productName());\n', '    else\n', '        return address(0);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title InitializableProductProxy\n', ' * @dev Extends ProductProxy with an initializer for initializing\n', ' * factory and init data.\n', ' */\n', 'contract InitializableProductProxy is ProductProxy {\n', '  /**\n', '   * @dev Contract initializer.\n', '   * @param factory Address of the initial factory.\n', '   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\n', '   * It should include the signature and the parameters of the function to be called, as described in\n', '   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n', '   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n', '   */\n', '  function initialize(address factory, bytes memory data) public payable {\n', '    require(_factory() == address(0));\n', "    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\n", '    _setFactory(factory);\n', '    if(data.length > 0) {\n', '      (bool success,) = _implementation().delegatecall(data);\n', '      require(success);\n', '    }\n', '  }  \n', '}\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' *\n', ' * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\n', ' * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\n', ' * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\n', ' * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\n', ' */\n', 'library OpenZeppelinUpgradesAddress {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract when upgrade EVEN times.\n', '   */\n', '  modifier initializerEven() {\n', '    require(initializing || isConstructor() || initialized, "Contract instance has already been initialized EVEN times");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = false;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract UP is IERC20, ContextUpgradeSafe, Configurable {\n', '    using SafeMath for uint;\n', '\n', "    string public constant name = 'UU.finance Upvaluing LPT';\n", "    string public constant symbol = 'UP';\n", '    //uint8 public constant decimals = 18;\n', '\n', '    address public uu;\n', '\n', '\tfunction initialize(address governor_, address uu_) public virtual initializer {\n', '\t\tContextUpgradeSafe.__Context_init_unchained();\n', '\t\tGovernable.initialize(governor_);\n', '\t\t__UP_init_unchained(uu_);\n', '\t}\n', '\t\n', '\tfunction __UP_init_unchained(address uu_) internal initializer {\n', '\t\tuu = uu_;\n', '\t}\n', '\n', '    //function name() public view virtual returns (string memory) {\n', '    //    return "UU.finance Upvaluing LPT";\n', '    //}\n', '//\n', '    //function symbol() public view virtual returns (string memory) {\n', '    //    return "UP";\n', '    //}\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return UU(uu).decimals();\n', '    }\n', '\n', '    function totalSupply() external view virtual override returns (uint256) {\n', '        return UU(uu).upTotalSupply();\n', '    }\n', '\n', '    function balanceOf(address account) external view virtual override returns (uint256) {\n', '        return UU(uu).upBalanceOf(account);\n', '    }\n', '\n', '    function price() external view virtual returns (uint256) {\n', '        return UU(uu).upPrice();\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return UU(uu).upAllowance(owner, spender);\n', '    }\n', '    \n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    \n', '    function nonces(address signatory) external view virtual returns (uint256) {\n', '        return UU(uu).nonces(signatory);\n', '    }\n', '    \n', '    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual {\n', '        UU(uu).upPermit_(name, address(this), owner, spender, rawAmount, deadline, v, r, s);\n', '        emit Approval(owner, spender, rawAmount);\n', '    }\n', '\n', '    function approve(address spender, uint256 volume) public virtual override returns (bool success) {\n', '        success = UU(uu).upApprove_(_msgSender(), spender, volume);\n', '        emit Approval(_msgSender(), spender, volume);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 increment) external virtual returns (bool) {\n', '        return approve(spender, allowance(_msgSender(), spender).add(increment));\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 decrement) external virtual returns (bool) {\n', '        return approve(spender, allowance(_msgSender(), spender).sub(decrement, "UP: decreased allowance below zero"));\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 volume) external virtual override returns (bool success) {\n', '        success = UU(uu).upTransferFrom_(_msgSender(), sender, recipient, volume);\n', '        emit Transfer(sender, recipient, volume);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 volume) external virtual override returns (bool success) {\n', '        success = UU(uu).upTransfer_(_msgSender(), recipient, volume);\n', '        emit Transfer(_msgSender(), recipient, volume);\n', '    }\n', '    \n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract UUBaseERC20 is IERC20, ContextUpgradeSafe {\n', '    using SafeMath for uint;\n', '\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    mapping (address => uint) public nonces;\n', '    \n', "    string public constant name = 'UU.finance Yielding United USD';\n", "    string public constant symbol = 'UU';\n", '    uint8 public constant decimals = 18;\n', '\n', '    address public up;\n', '    uint256 internal _upTotalSupply3;\n', '    mapping (address => uint256) internal _upBalance3Of;\n', '    mapping (address => mapping (address => uint256)) public upAllowance;\n', '    uint256 public upPrice;\n', '\n', '\tfunction __UUBaseERC20_init(address up_) internal virtual initializer {\n', '\t\tContextUpgradeSafe.__Context_init_unchained();\n', '\t\t__UUBaseERC20_init_unchained(up_);\n', '\t}\n', '\t\n', '\tfunction __UUBaseERC20_init_unchained(address up_) internal initializer {\n', '\t\tup = up_;\n', '\t}\n', '\t\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return up2uu(upTotalSupply());\n', '    }\n', '\n', '    function balanceOf(address account) external view virtual override returns (uint256) {\n', '        return up2uu(upBalanceOf(account));\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return up2uu(upAllowance[owner][spender]);\n', '    }\n', '    \n', '    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual {\n', '        _upPermit(name, address(this), owner, spender, uu2up(amount), deadline, v, r, s);\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool success) {\n', '        success = _upApprove(_msgSender(), spender, uu2up(amount));\n', '        emit Approval(_msgSender(), spender, amount);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 increment) external virtual returns (bool) {\n', '        return approve(spender, allowance(_msgSender(), spender).add(increment));\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 decrement) external virtual returns (bool) {\n', '        return approve(spender, allowance(_msgSender(), spender).sub(decrement, "UU: decreased allowance below zero"));\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external virtual override returns (bool success) {\n', '        success = _upTransferFrom(_msgSender(), sender, recipient, uu2up(amount));\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) external virtual override returns (bool success) {\n', '        success = _upTransfer(_msgSender(), recipient, uu2up(amount));\n', '        emit Transfer(_msgSender(), recipient, amount);\n', '    }\n', '    \n', '    function uu2up(uint256 amount) public view virtual returns (uint256) {\n', '        return amount.mul(uint256(10)**decimals).div(upPrice);\n', '    }\n', '\n', '    function up2uu(uint256 vol) public view virtual returns (uint256) {\n', '        return vol.mul(upPrice).div(uint256(10)**decimals);\n', '    }\n', '\n', '    function upTotalSupply() public view virtual returns (uint256) {\n', '        return uint112(_upTotalSupply3);\n', '    }\n', '    \n', '    function upBalanceOf(address account) public view virtual returns (uint256) {\n', '        return uint112(_upBalance3Of[account]);\n', '    }\n', '\n', '    function _upPermit(string memory name_, address verifyingContract, address owner, address spender, uint volume, uint deadline, uint8 v, bytes32 r, bytes32 s) internal virtual {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name_)), chainId, verifyingContract));\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, volume, nonces[owner]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "UU.permit: invalid signature");\n', '        require(signatory == owner, "UU.permit: unauthorized");\n', '        require(now <= deadline, "UU.permit: signature expired");\n', '        \n', '        _upApprove(owner, spender, volume);\n', '    }\n', '\n', '    function _upApprove(address owner, address spender, uint256 volume) internal virtual returns (bool success) {\n', '        upAllowance[owner][spender] = volume;\n', '        return true;\n', '    }\n', '\n', '    function _upTransferFrom(address spender, address sender, address recipient, uint256 volume) internal virtual returns (bool success) {\n', '        uint256 a = upAllowance[sender][spender];\n', '        if(a != uint256(-1))\n', '            upAllowance[sender][spender] = a.sub(volume);\n', '        return _upTransfer(sender, recipient, volume);\n', '    }\n', '\n', '    function _upTransfer(address sender, address recipient, uint256 volume) internal virtual returns (bool success) {\n', '        _upBalance3Of[sender]    = decreaseTAB(_upBalance3Of[sender],    volume);         \n', '        _upBalance3Of[recipient] = increaseTAB(_upBalance3Of[recipient], volume);         \n', '        return true;\n', '    }\n', '\n', '    function increaseTAB(uint256 tab, uint256 increment) internal view virtual returns (uint256) {\n', '        (uint256 t, uint256 a, uint256 b) = unpackTAB(tab);           \n', '        a += b * (uint32(now) - t);                             // + and * never overflows, and - overflow is desired\n', '        b += increment;                                         // + never overflows\n', '        t = now;\n', '        return packTAB(t, a, b);         \n', '    }\n', '    \n', '    function decreaseTAB(uint256 tab, uint256 decrement) internal view virtual returns (uint256) {\n', '        (uint256 t, uint256 a, uint256 b) = unpackTAB(tab);           \n', '        a += b * (uint32(now) -t);                              // + and * never overflows, and - overflow is desired\n', '        b = b.sub(decrement);\n', '        t = now;\n', '        return packTAB(t, a, b);         \n', '    }\n', '    \n', '    function packTAB(uint256 timestamp, uint256 coinAge, uint256 balance) internal pure virtual returns (uint256) {\n', "        require(coinAge <= uint144(-1) && balance <= uint112(-1), 'TAB OVERFLOW');\n", '        return timestamp << 224 | coinAge >> 32 << 112 | balance;\n', '    }\n', '    \n', '    function unpackTAB(uint256 tab) internal pure virtual returns (uint256 timestamp, uint256 coinAge, uint256 balance) {\n', '        timestamp = tab >> 224;\n', '        coinAge   = uint144(tab >> 112 << 32);\n', '        balance   = uint112(tab);\n', '    }\n', '    \n', '    //struct TAB {\n', '    //    uint32 timestamp;\n', '    //    uint112 coinAge;\n', '    //    uint112 balance;\n', '    //}\n', '    \n', '    modifier onlyUP {\n', "        require(_msgSender() == up, 'Only be called by UP Token contract');\n", '        _;\n', '    }\n', '    \n', '    function upPermit_(string memory name_, address verifyingContract, address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual onlyUP {\n', '        _upPermit(name_, verifyingContract, owner, spender, rawAmount, deadline, v, r, s);\n', '    }\n', '    \n', '    function upApprove_(address owner, address spender, uint256 volume) external virtual onlyUP returns (bool success) {\n', '        success = _upApprove(owner, spender, volume);\n', '    }\n', '\n', '    function upTransferFrom_(address spender, address sender, address recipient, uint256 volume) external virtual onlyUP returns (bool success) {\n', '        success = _upTransferFrom(spender, sender, recipient, volume);\n', '    }\n', '\n', '    function upTransfer_(address sender, address recipient, uint256 volume) external virtual onlyUP returns (bool success) {\n', '        success = _upTransfer(sender, recipient, volume);\n', '    }\n', '    \n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract UUBaseMintable is UUBaseERC20, Configurable {\n', '    using TransferHelper for address;\n', '    \n', "    bytes32 internal constant _netValueUnit_        = 'netValueUnit';\n", "    bytes32 internal constant _netValueIndexOfLPT_  = 'netValueIndexOfLPT';\n", "    bytes32 internal constant _depositOfLPT_        = 'depositOfLPT';\n", "    bytes32 internal constant _swapOfLPT_           = 'swapOfLPT';\n", "    bytes32 internal constant _lptOfSwap_           = 'lptOfSwap';\n", "    bytes32 internal constant _gaugeOfLPT_          = 'gaugeOfLPT';\n", "    bytes32 internal constant _lptTwapPeriod_       = 'lptTwapPeriod';\n", '    \n', '    uint256 public upPriceFactor;\n', '    address[] public lpts;\n', '    function lptN() public view returns (uint) {  return lpts.length;  }\n', '    \n', '    uint internal unlocked;\n', '    modifier lock() {\n', "        require(unlocked == 1, 'UU: LOCKED');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '    \n', '    mapping (address => uint) public    lptTWAP;\n', '    mapping (address => uint) internal _lptTwapTime;\n', '\n', '\tfunction __UUBaseMintable_init(address governor_, address up_) internal virtual initializer {\n', '\t\tContextUpgradeSafe.__Context_init_unchained();\n', '\t\tUUBaseERC20.__UUBaseERC20_init_unchained(up_);\n', '\t\tGovernable.initialize(governor_);\n', '\t\t__UUBaseMintable_init_unchained();\n', '\t}\n', '\t\n', '\tfunction __UUBaseMintable_init_unchained() internal initializer {\n', '\t\t_setConfig(_netValueUnit_,    1.0 ether);\n', '\t\t_setConfig(_lptTwapPeriod_,   60 minutes);\n', '\t\tupPriceFactor = 1 ether;\n', '\t\tunlocked = 1;\n', '\t}\n', '    \n', '\tfunction addLPT(address lpt, address swap, address depo, uint nvi, address gauge) virtual public governance {\n', '        IERC20(lpt).totalSupply();\n', '        StableSwap(swap).A();                                   // just for test\n', '        Deposit(depo).calc_withdraw_one_coin(1 ether, int128(nvi));\n', '        for(uint i=0; i<lpts.length; i++)\n', "            require(lpts[i] != lpt, 'the lpt has already added');\n", '            \n', '        lpts.push(lpt);\n', '        _setConfig(_netValueIndexOfLPT_, lpt, nvi);\n', '        _setConfig(_depositOfLPT_,       lpt, uint(depo));\n', '        _setConfig(_swapOfLPT_,          lpt, uint(swap));\n', '        _setConfig(_lptOfSwap_,          swap, uint(lpt));\n', '        _updateLptTWAP(lpt);\n', '\n', '        emit AddLPT(lpt, swap, depo, nvi, gauge);\n', '\t}\n', '\tevent AddLPT(address lpt, address swap, address depo, uint nvi, address gauge);\n', '\t\n', '\tfunction removeLPT(address lpt) virtual external governance {\n', '        require(lptBalance(lpt) == 0, "Can\'t remove lpt which balanceOf(UU) is not 0");\n', '        for(uint i=0; i<lpts.length; i++) {\n', '            if(lpts[i] == lpt) {\n', '                lpts[i] = lpts[lpts.length-1];\n', '                lpts.pop();\n', '                emit RemoveLPT(lpt);\n', '                return;\n', '            }\n', '        }\n', "        revert('the lpt is not in list');\n", '\t}\n', '\tevent RemoveLPT(address lpt);\n', '\t\n', '\tfunction calcPrice() virtual public view returns (uint) {\n', '        if(upTotalSupply() == 0)\n', '            return upPriceFactor;\n', '        uint amt = 0;\n', '        for(uint i=0; i<lpts.length; i++)\n', '            amt = amt.add(lptBalance(lpts[i]).mul(StableSwap(getConfig(_swapOfLPT_, lpts[i])).get_virtual_price()));\n', '        return amt.div(upTotalSupply()).mul(upPriceFactor).div(1 ether);\n', '\t}\n', '\t\n', '\tfunction _updatePrice() virtual internal {\n', '\t    upPrice = calcPrice();\n', '\t    emit UpdatePrice(upPrice, now);\n', '\t}\n', '\tevent UpdatePrice(uint256 upPrice, uint256 timestamp);\n', '\t\n', '\tfunction _adjustPriceFactor() virtual internal {\n', '\t    upPriceFactor = upPriceFactor.mul(upPrice).div(calcPrice());\n', '\t}\n', '\t\n', '\tfunction updatePrice() virtual public {\n', '\t    _updatePrice();\n', '\t    _upTotalSupply3 = increaseTAB(_upTotalSupply3, 0);\n', '\t}\n', '\t\n', '    function lastUpdateTimeSpan() virtual public view returns(uint256) {\n', '        return uint32(now - (_upTotalSupply3 >> 224));                          // overflow is desired\n', '    }\n', '    \n', '\tfunction netValue(address lpt, uint vol) virtual public view returns (uint amt) {\n', '        address deposit = address(getConfig(_depositOfLPT_, lpt));\n', "        require(deposit != address(0), 'Unsupported LPT');\n", '        uint unit = getConfig(_netValueUnit_);\n', '        if(unit == 0)\n', '            unit = 1 ether;\n', '        int128 i = int128(getConfig(_netValueIndexOfLPT_, lpt));\n', '        amt = Deposit(deposit).calc_withdraw_one_coin(unit, i);\n', '        amt = amt.mul(vol).div(unit);\n', '\t}\n', '\t\n', '\tfunction netValue(address lpt) virtual public view returns (uint amt) {\n', '        return netValue(lpt, lptBalance(lpt));\n', '\t}\n', '\t\n', '\tfunction totalNetValue() virtual public view returns (uint amt) {\n', '        for(uint i=0; i<lpts.length; i++)\n', '            amt = amt.add(netValue(lpts[i]));\n', '\t}\n', '\t\n', '\tfunction lptBalance(address lpt) virtual public view returns (uint) {\n', '        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\n', '        if(gauge != address(0))\n', '            return Gauge(gauge).balanceOf(address(this));\n', '        else\n', '            return IERC20(lpt).balanceOf(address(this));\n', '\t}\n', '\t\n', '\tfunction lptPrice(address lpt) virtual public view returns (uint) {\n', '        if(totalSupply() == 0)\n', '            return StableSwap(getConfig(_swapOfLPT_, lpt)).get_virtual_price();\n', '        else\n', '            return netValue(lpt, uint256(10)**decimals).mul(totalSupply()).div(totalNetValue());\n', '\t}\n', '\t\n', '\tfunction _updateLptTWAP(address lpt) virtual internal {\n', '        uint period = config[_lptTwapPeriod_];\n', '        uint timestamp = _lptTwapTime[lpt];\n', '        if(now > timestamp.add(period))\n', '            lptTWAP[lpt] = lptPrice(lpt);\n', '        else\n', '            lptTWAP[lpt] = timestamp.add(period).sub(now).mul(lptPrice(lpt)).add(now.sub(timestamp).mul(lptTWAP[lpt])).div(period);\n', '\t}\n', '\t\n', '\tfunction lpt2uu(address lpt, uint vol) virtual public view returns (uint) {\n', '        return Math.min(lptPrice(lpt), lptTWAP[lpt]).mul(vol).div(uint256(10)**decimals);\n', '\t}\n', '\t\n', '\tfunction uu2lpt(uint amt, address lpt) virtual public view returns (uint) {\n', '        return Math.min(amt.mul(uint256(10)**decimals).div(Math.max(lptPrice(lpt), lptTWAP[lpt])), lptBalance(lpt));\n', '\t}\n', '\t\n', '\tfunction _mint(address to, uint amt) virtual internal returns (uint) {\n', '        uint vol = uu2up(amt);\n', '        _upTotalSupply3   = increaseTAB(_upTotalSupply3,   vol);\n', '        _upBalance3Of[to] = increaseTAB(_upBalance3Of[to], vol);\n', '        emit Transfer(address(0), to, amt);\n', '        return amt;\n', '\t}\n', '\t\n', '\tfunction mint(address lpt, uint vol, uint minMint) virtual external lock returns (uint amt) {\n', '        _updatePrice();\n', '        amt = lpt2uu(lpt, vol);\n', "        require(amt >= minMint, 'Slippage screwed you');\n", '        lpt.safeTransferFrom(_msgSender(), address(this), vol);\n', '        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\n', '        if(gauge != address(0)) {\n', '            lpt.safeApprove(gauge, vol);\n', '            Gauge(gauge).deposit(vol);\n', '        }\n', '        _mint(_msgSender(), amt);\n', '        _updateLptTWAP(lpt);\n', '        _adjustPriceFactor();\n', '\t}\n', '\n', '\tfunction _burn(address from, uint amt) virtual internal returns (uint) {\n', '        uint vol = uu2up(amt);\n', '        _upBalance3Of[from] = decreaseTAB(_upBalance3Of[from], vol);\n', '        _upTotalSupply3     = decreaseTAB(_upTotalSupply3,     vol);\n', '        emit Transfer(from, address(0), amt);\n', '        return amt;\n', '\t}\n', '\t\n', '\tfunction burn(uint amt, address lpt, uint minVol) virtual external lock returns (uint vol) {\n', '        _updatePrice();\n', '        vol = uu2lpt(amt, lpt);\n', '        if(vol == lptBalance(lpt))\n', '            amt = lpt2uu(lpt, vol);\n', '        _burn(_msgSender(), amt);\n', "        require(vol >= minVol, 'Slippage screwed you');\n", '\n', '        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\n', '        if(gauge != address(0))\n', '            Gauge(gauge).withdraw(vol);\n', '        lpt.safeTransfer(_msgSender(), vol);\n', '        _updateLptTWAP(lpt);\n', '        _adjustPriceFactor();\n', '\t}\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[47] private ______gap;\n', '}\n', '\n', 'contract UUBaseClaimable is UUBaseMintable {\n', "    bytes32 internal constant _claimToTimeSpan_     = 'claimToTimeSpan';\n", "    bytes32 internal constant _claimToTipRatio_     = 'claimToTipRatio';\n", "    bytes32 internal constant _settleTipRatio_      = 'settleTipRatio';\n", "    bytes32 internal constant _updateTipRatio_      = 'updateTipRatio';\n", "    bytes32 internal constant _updateInterval_      = 'updateInterval';\n", '    \n', '    \n', '    address[] public rewards;\n', '    function rewardN() public view returns (uint) {  return rewards.length;  }\n', '    mapping (address => mapping (address => uint256)) internal _claimed3;           // account => reward => _claimed3\n', '\n', '\tfunction __UUBaseClaimable_init(address governor_, address up_) internal virtual initializer {\n', '\t\tContextUpgradeSafe.__Context_init_unchained();\n', '\t\tUUBaseERC20.__UUBaseERC20_init_unchained(up_);\n', '\t\tGovernable.initialize(governor_);\n', '\t\tUUBaseMintable.__UUBaseMintable_init_unchained();\n', '\t\t__UUBaseClaimable_init_unchained();\n', '\t}\n', '\t\n', '\tfunction __UUBaseClaimable_init_unchained() internal initializer {\n', '\t\t_setConfig(_claimToTimeSpan_, 7 days);\n', '\t\t_setConfig(_claimToTipRatio_, 0.1 ether);\n', '\t\t_setConfig(_settleTipRatio_,  0.01 ether);\n', '\t\t_setConfig(_updateTipRatio_,  0.01 ether);\n', '\t\t_setConfig(_updateInterval_,  30 minutes);\n', '\t}\n', '\t\n', '\tfunction addLPT(address lpt, address swap, address depo, uint nvi, address gauge) virtual override public governance {\n', '        super.addLPT(lpt, swap, depo, nvi, gauge);\n', '        if(gauge != address(0)) {\n', '            _setConfig(_gaugeOfLPT_,     lpt, uint(gauge));\n', '            tryAddReward(Gauge(gauge).crv_token());\n', '            //address reward = Gauge(gauge).rewarded_token();\n', '            //if(reward != address(0))\n', '            //    tryAddReward(reward);\n', '        }\n', '\t}\n', '\n', '\tfunction tryAddReward(address reward) virtual public governance returns (bool success) {\n', '        IERC20(reward).totalSupply();               // just for test\n', '        for(uint i=0; i<rewards.length; i++)\n', "            if(rewards[i] == reward)                // 'the reward has already added'\n", '                return false;\n', '        rewards.push(reward);\n', '        emit AddReward(reward);\n', '        return true;\n', '\t}\n', '\tevent AddReward(address reward);\n', '\t\n', '\tfunction removeReward(address reward) virtual external governance returns (uint remain) {\n', '        for(uint i=0; i<lpts.length; i++) {\n', '            address gauge = address(getConfig(_gaugeOfLPT_, lpts[i]));\n', "            require(Gauge(gauge).crv_token() == reward || Gauge(gauge).rewarded_token() == reward, 'the reward is active yet');\n", '        }\n', '        for(uint i=0; i<rewards.length; i++) {\n', '            if(rewards[i] == reward) {\n', '                rewards[i] = rewards[rewards.length-1];\n', '                rewards.pop();\n', '                remain = IERC20(reward).balanceOf(address(this));\n', '                reward.safeTransfer(_msgSender(), remain);\n', '                emit RemoveReward(reward, remain);\n', '                return remain;\n', '            }\n', '        }\n', "        revert('the lpt is not in list');\n", '\t}\n', '\tevent RemoveReward(address reward, uint remain);\n', '\t\n', '\tfunction deltaCoinAge(uint256 balance3, uint256 claimaed3) virtual internal view returns (uint256 delta, uint256 timestamp, uint256 coinAge, uint256 claimed) {\n', '        (uint256 t, uint256 a, uint256 b) = unpackTAB(balance3);           \n', '        a += b * (uint32(now) - t);                             // + and * never overflows, and - overflow is desired\n', '        (timestamp, coinAge, claimed) = unpackTAB(claimaed3);         \n', '\t    delta = a.sub(coinAge);\n', '\t}\n', '\t\n', '\tfunction claimable(address acct, address reward) virtual public view returns (uint) {\n', '        uint vol = IERC20(reward).balanceOf(address(this));\n', '        if(vol == 0)\n', '            return 0;\n', '        (uint256 totalDelta, , ,) = deltaCoinAge(_upTotalSupply3, _claimed3[address(-1)][reward]);\n', '        (uint256 delta, , ,) = deltaCoinAge(_upBalance3Of[acct], _claimed3[acct][reward]);\n', '        return vol.mul(delta).div(totalDelta);\n', '\t}\n', '\t\n', '\tfunction _claimTo(address to, address reward) virtual internal returns (uint vol, uint tip) {\n', '        vol = IERC20(reward).balanceOf(address(this));\n', '        if(vol == 0)\n', '            return (0, 0);\n', '        (uint256 totalDelta, , uint256 totalCoinAge, uint256 totalClaimed) = deltaCoinAge(_upTotalSupply3, _claimed3[address(-1)][reward]);\n', '        (uint256 delta, uint timestamp, uint256 coinAge, uint256 claimed) = deltaCoinAge(_upBalance3Of[to], _claimed3[to][reward]);\n', '        vol = vol.mul(delta).div(totalDelta);\n', '        _claimed3[address(-1)][reward] = packTAB(now, totalCoinAge.add(delta), totalClaimed.add(vol));\n', '        if(to != _msgSender()) {\n', "            require(now > timestamp.add(getConfig(_claimToTimeSpan_)), 'not reach claimToTimeSpan');\n", '            tip = vol.mul(getConfig(_claimToTipRatio_)).div(1 ether);\n', '            vol = vol.sub(tip);\n', '            (uint256 t, uint256 a, uint256 c) = unpackTAB(_claimed3[_msgSender()][reward]);\n', '            _claimed3[_msgSender()][reward] = packTAB(t, a, c.add(tip));\n', '        }\n', '        _claimed3[to][reward] = packTAB(now, coinAge.add(delta), claimed.add(vol));\n', '        reward.safeTransfer(to, vol);\n', '        if(to != _msgSender())\n', '            reward.safeTransfer(_msgSender(), tip);\n', '        emit ClaimTo(to, reward, vol, tip, _msgSender());\n', '\t}\n', '\tevent ClaimTo(address indexed to, address indexed reward, uint vol, uint tip, address indexed agent);\n', '\t\n', '    function claimTo(address to, address reward) virtual external lock returns (uint vol, uint tip) {\n', '        return _claimTo(to, reward);\n', '    }\n', '    \n', '    function claim(address reward) virtual external lock returns (uint vol) {\n', '        (vol, ) = _claimTo(_msgSender(), reward);\n', '    }\n', '    \n', '    function claim() virtual external lock {\n', '        for(uint i=0; i<rewards.length; i++)\n', '            _claimTo(_msgSender(), rewards[i]);\n', '    }\n', '    \n', '    function claimed(address acct, address reward) virtual public view returns (uint) {\n', '        return uint112(_claimed3[acct][reward]);\n', '    }\n', '    \n', '    function totalClaimed(address reward) virtual public view returns (uint) {\n', '        return claimed(address(-1), reward);\n', '    }\n', '    \n', '    // This function should be manually changed to "view" in the ABI\n', '\tfunction settleable(address lpt, uint j) virtual public returns (address reward, uint vol, uint tip) {\n', '        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\n', '        if(gauge == address(0))\n', '            return (address(0), 0, 0);\n', '        if(j == 0) {\n', '            reward = Gauge(gauge).crv_token();\n', '            vol = Gauge(gauge).claimable_tokens(address(this));         // compatible with 3Crv\n', '        } else if(j == 1) {\n', '            reward = Gauge(gauge).rewarded_token();\n', '            vol = Gauge(gauge).claimable_reward(address(this));\n', '        } else if(j == 2) {\n', '            reward = Gauge(Gauge(gauge).reward_contract()).rewarded_token();\n', '            vol = Gauge(gauge).claimable_reward2(address(this));\n', '        }\n', '        uint tipRatio = getConfig(_settleTipRatio_);\n', '        if(lastUpdateTimeSpan() >= getConfig(_updateInterval_))\n', '            tipRatio = tipRatio.add(getConfig(_updateTipRatio_));\n', '        tip = vol.mul(tipRatio).div(1 ether);\n', '        vol = vol.sub(tip);\n', '\t}\n', '\t\n', '\tfunction settle(address lpt, uint j) virtual external lock {\n', '\t    address reward;\n', '\t    address reward2;\n', '\t    uint vol;\n', '\t    uint vol2;\n', '        address gauge = address(getConfig(_gaugeOfLPT_, lpt));\n', '        if(gauge == address(0))\n', '            return;\n', '        if(j == 0) {\n', '            reward = Gauge(gauge).crv_token();\n', '            vol = IERC20(reward).balanceOf(address(this));\n', '            Minter(Gauge(gauge).minter()).mint(gauge);\n', '            vol = IERC20(reward).balanceOf(address(this)).sub(vol);\n', '        } else if(j >= 1) {\n', '            reward = Gauge(gauge).rewarded_token();\n', '            vol = IERC20(reward).balanceOf(address(this));\n', '            if(j >= 2) {\n', '                reward2 = Gauge(Gauge(gauge).reward_contract()).rewarded_token();\n', '                vol2 = IERC20(reward2).balanceOf(address(this));\n', '            }\n', '            Gauge(gauge).claim_rewards();\n', '            vol = IERC20(reward).balanceOf(address(this)).sub(vol);\n', '            if(j >= 2)\n', '                vol2 = IERC20(reward2).balanceOf(address(this)).sub(vol2);\n', '        }\n', '        uint tipRatio = getConfig(_settleTipRatio_);\n', '        uint interval = getConfig(_updateInterval_);\n', '        if(lastUpdateTimeSpan() >= interval || now >= _lptTwapTime[lpt].add(interval)) {\n', '            updatePrice();\n', '            _updateLptTWAP(lpt);\n', '            tipRatio = tipRatio.add(getConfig(_updateTipRatio_));\n', '        }\n', '        uint tip = vol.mul(tipRatio).div(1 ether);\n', '\t    reward.safeTransfer(_msgSender(), tip);\n', '        emit Settle(_msgSender(), gauge, reward, vol.sub(tip), tip);\n', '        if(j >= 2) {\n', '            uint tip2 = vol2.mul(tipRatio).div(1 ether);\n', '            reward2.safeTransfer(_msgSender(), tip2);\n', '            emit Settle(_msgSender(), gauge, reward2, vol2.sub(tip2), tip2);\n', '        }\n', '\t}\n', '\tevent Settle(address indexed agent, address indexed gauge, address indexed reward, uint vol, uint tip);\n', '    \n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'interface IUU {\n', '\tfunction settleable(address lpt, uint j) external view returns (address reward, uint vol, uint tip);\n', '}\n', '\n', 'contract UU is UUBaseClaimable {\n', '\tfunction initialize(address governor_, address up_) public virtual initializer {\n', '\t\t__UUBaseClaimable_init(governor_, up_);\n', '\t    unlocked = 1;\n', '\t}\n', '\t\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract UUSwap {\n', '    \n', '\t//function multi2uu(address swap, uint[] memory amts) virtual public view returns (uint vol) {        // for StableSwap and underlying_coins\n', '    //    address lpt = address(getConfig(_lptOfSwap_, swap));\n', "    //    require(lpt != address(0), 'Unsupported StableSwap contract');\n", '    //\n', '    //    if(amts.length == 2)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1]], true);\n', '    //    else if(amts.length == 3)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2]], true);\n', '    //    else if(amts.length == 4)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3]], true);\n', '    //    else if(amts.length == 5)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4]], true);\n', '    //    else if(amts.length == 6)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], true);\n', '    //    else if(amts.length == 7)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], true);\n', '    //    else if(amts.length == 8)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], true);\n', '    //    else \n', "    //        revert('Unsupported amts.length');\n", '    //        \n', '    //    return lpt2uu(lpt, vol);\n', '    //}\n', '\t//\n', '\t//function usd2uu(address swap, address usd, uint amt) virtual public view returns (uint) {           // for StableSwap and underlying\n', '    //    uint n = getConfig(_NCoinsOfSwap_, swap);\n', "    //    require(n >= 2, 'Unsupported StableSwap contract');\n", '    //    uint[] memory amts = new uint[](n);\n', '    //    for(uint i=0; i<n; i++) {\n', '    //        if(StableSwap(swap).underlying_coins(int128(i)) == usd) {\n', '    //            amts[i] = amt;\n', '    //            return multi2uu(swap, amts);\n', '    //        }\n', '    //    }\n', "    //    revert('The swap do not support the usd');\n", '\t//}\n', '\t\n', '\t//function mint(address swap2, uint[] memory amts, uint minMint) virtual public returns (uint amt) {  // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\n', '    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\n', "    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\n", '    //    uint vol = lptBalance(lpt);\n', '    //    \n', '    //    if(amts.length == 2)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1]], 0);\n', '    //    else if(amts.length == 3)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2]], 0);\n', '    //    else if(amts.length == 4)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3]], 0);\n', '    //    else if(amts.length == 5)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4]], 0);\n', '    //    else if(amts.length == 6)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], 0);\n', '    //    else if(amts.length == 7)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], 0);\n', '    //    else if(amts.length == 8)\n', '    //        StableSwap(swap2).add_liquidity([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], 0);\n', '    //    else \n', "    //        revert('Unsupported amts.length');\n", '    //        \n', '    //    vol = lptBalance(lpt).sub(vol);\n', '    //    amt = lpt2uu(lpt, vol);\n', "    //    require(amt >= minMint, 'Slippage screwed you');\n", '    //    return _mint(_msgSender(), amt);\n', '\t//}\n', '\t//\n', '\t//function mint(address swap2, address usd, uint amt, uint minMint) virtual public returns (uint) {   // for StableSwap and interest-bearing asset, or Deposit and underlying \n', '    //    uint n = getConfig(_NCoinsOfSwap_, swap2);\n', "    //    require(n >= 2, 'Unsupported StableSwap or Deposit contract');\n", '    //    uint[] memory amts = new uint[](n);\n', '    //    for(uint i=0; i<n; i++) {\n', '    //        if(StableSwap(swap2).coins(int128(i)) == usd || StableSwap(swap2).underlying_coins(int128(i)) == usd) {\n', '    //            amts[i] = amt;\n', '    //            return mint(swap2, amts, minMint);\n', '    //        }\n', '    //    }\n', "    //    revert('The swap2 do not support the usd');\n", '\t//}\n', '\n', '\t//function uu2usd(uint amt, address depo, address usd) virtual public view returns (uint) {           // for Deposit and underlying\n', '    //    address lpt = address(getConfig(_lptOfSwap_, depo));\n', "    //    require(lpt != address(0), 'Unsupported Deposit contract');\n", '    //    uint vol = uu2lpt(amt, lpt);\n', '    //    \n', '    //    int128 n = int128(getConfig(_NCoinsOfSwap_, depo));\n', "    //    require(n >= 2, 'Unsupported StableSwap contract');\n", '    //    for(int128 i=0; i<n; i++) \n', '    //        if(Deposit(depo).underlying_coins(i) == usd)\n', '    //            return Deposit(depo).calc_withdraw_one_coin(vol, i);\n', '    //    \n', "    //    revert('The depo do not support the usd');\n", '\t//}\n', '\t//\n', '\t//function uu4multi(address swap, uint[] memory amts) virtual public view returns (uint vol) {        // for StableSwap and underlying_coins\n', '    //    address lpt = address(getConfig(_lptOfSwap_, swap));\n', "    //    require(lpt != address(0), 'Unsupported StableSwap contract');\n", '    //    \n', '    //    if(amts.length == 2)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1]], false);\n', '    //    else if(amts.length == 3)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2]], false);\n', '    //    else if(amts.length == 4)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3]], false);\n', '    //    else if(amts.length == 5)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4]], false);\n', '    //    else if(amts.length == 6)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], false);\n', '    //    else if(amts.length == 7)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], false);\n', '    //    else if(amts.length == 8)\n', '    //        vol = StableSwap(swap).calc_token_amount([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], false);\n', '    //    else \n', "    //        revert('Unsupported amts.length');\n", '    //        \n', '    //    return lpt2uu(lpt, vol);\n', '\t//}\n', '\t\n', '\t//function burn(uint amt, address depo, address usd, uint minU) virtual public returns (uint u) {     // for Deposit and underlying\n', '    //    address lpt = address(getConfig(_lptOfSwap_, depo));\n', "    //    require(lpt != address(0), 'Unsupported Deposit contract');\n", '    //    \n', '    //    uint vol = uu2lpt(amt, lpt);\n', '    //    if(vol == lptBalance(lpt))\n', '    //        amt = lpt2uu(lpt, vol);\n', '    //    _burn(_msgSender(), amt);\n', '    //    \n', '    //    int128 n = int128(getConfig(_NCoinsOfSwap_, depo));\n', "    //    require(n >= 2, 'Unsupported StableSwap contract');\n", '    //    for(int128 i=0; i<n; i++) {\n', '    //        if(Deposit(depo).underlying_coins(i) == usd) {\n', '    //            Deposit(depo).remove_liquidity_one_coin(vol, i, 0);\n', '    //            u = IERC20(usd).balanceOf(address(this));\n', "    //            require(u >= minU, 'Slippage screwed you');\n", '    //            usd.safeTransfer(_msgSender(), u);\n', '    //        }\n', '    //    }\n', "    //    revert('The depo do not support the usd');\n", '\t//}\n', '    //\n', '\t//function burn(uint amt, address swap2, uint[] calldata minAmts) virtual external returns (uint[] memory amts) {     // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\n', '    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\n', "    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\n", '    //    \n', '    //    uint vol = uu2lpt(amt, lpt);\n', '    //    if(vol == lptBalance(lpt))\n', '    //        amt = lpt2uu(lpt, vol);\n', '    //    _burn(_msgSender(), amt);\n', '    //    \n', '    //    if(minAmts.length == 2)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1]]);\n', '    //    else if(minAmts.length == 3)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2]]);\n', '    //    else if(minAmts.length == 4)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3]]);\n', '    //    else if(minAmts.length == 5)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4]]);\n', '    //    else if(minAmts.length == 6)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5]]);\n', '    //    else if(minAmts.length == 7)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5], minAmts[6]]);\n', '    //    else if(minAmts.length == 8)\n', '    //        StableSwap(swap2).remove_liquidity(vol, [minAmts[0], minAmts[1], minAmts[2], minAmts[3], minAmts[4], minAmts[5], minAmts[6], minAmts[7]]);\n', '    //    else \n', "    //        revert('Unsupported minAmts.length');\n", '    //        \n', '    //    amts = new uint[](minAmts.length);\n', '    //    for(uint i=0; i<amts.length; i++) {\n', '    //        address coin = StableSwap(swap2).coins(int128(i));\n', '    //        amt = IERC20(coin).balanceOf(address(this));\n', '    //        if(amt > 0) {\n', '    //            coin.safeTransfer(_msgSender(), amt);\n', '    //            amts[i] = amt;\n', '    //        }\n', '    //        coin = StableSwap(swap2).underlying_coins(int128(i));\n', '    //        amt = IERC20(coin).balanceOf(address(this));\n', '    //        if(amt > 0) {\n', '    //            coin.safeTransfer(_msgSender(), amt);\n', '    //            amts[i] = amts[i].add(amt);\n', '    //        }\n', '    //    }\n', '\t//}\n', '    //\n', '\t//function burn(address swap2, uint[] calldata amts, uint maxBurn) virtual external returns (uint amtBurn) {          // for StableSwap and interest-bearing assets, or Deposit and underlying_coins\n', '    //    address lpt = address(getConfig(_lptOfSwap_, swap2));\n', "    //    require(lpt != address(0), 'Unsupported StableSwap or Deposit contract');\n", '    //    uint vol = lptBalance(lpt);\n', '    //    \n', '    //    uint maxVol = uint(-1); //uu2lpt(maxBurn, lpt);\n', '    //    if(amts.length == 2)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1]], maxVol);\n', '    //    else if(amts.length == 3)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2]], maxVol);\n', '    //    else if(amts.length == 4)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3]], maxVol);\n', '    //    else if(amts.length == 5)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4]], maxVol);\n', '    //    else if(amts.length == 6)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5]], maxVol);\n', '    //    else if(amts.length == 7)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6]], maxVol);\n', '    //    else if(amts.length == 8)\n', '    //        StableSwap(swap2).remove_liquidity_imbalance([amts[0], amts[1], amts[2], amts[3], amts[4], amts[5], amts[6], amts[7]], maxVol);\n', '    //    else \n', "    //        revert('Unsupported amts.length');\n", '    //        \n', '    //    vol = vol.sub(lptBalance(lpt));\n', '    //    amtBurn = lpt2uu(lpt, vol);\n', "    //    require(amtBurn <= maxBurn, 'Slippage screwed you');\n", '    //    _burn(_msgSender(), amtBurn);\n', '\t//    \n', '    //    for(uint i=0; i<amts.length; i++) {\n', '    //        address coin = StableSwap(swap2).coins(int128(i));\n', '    //        uint amt = IERC20(coin).balanceOf(address(this));\n', '    //        if(amt > 0)\n', '    //            coin.safeTransfer(_msgSender(), amt);\n', '    //            \n', '    //        coin = StableSwap(swap2).underlying_coins(int128(i));\n', '    //        amt = IERC20(coin).balanceOf(address(this));\n', '    //        if(amt > 0)\n', '    //            coin.safeTransfer(_msgSender(), amt);\n', '    //    }\n', '\t//}\n', '\t\n', '}\n', '\n', '\n', 'interface StableSwap {\n', '    function A() external view returns (uint);\n', '    function coins(int128) external view returns (address);\n', '    function underlying_coins(int128) external view returns (address);\n', '    \n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    function calc_token_amount(uint[2] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[4] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[5] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[6] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[7] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_token_amount(uint[8] calldata amounts, bool deposit) external view returns (uint);\n', '\n', '    function add_liquidity(uint[2] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[4] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[5] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[6] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[7] calldata amounts, uint min_mint_amount) external;\n', '    function add_liquidity(uint[8] calldata amounts, uint min_mint_amount) external;\n', '    \n', '    function remove_liquidity(uint amount, uint[2] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[3] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[4] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[5] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[6] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[7] calldata min_amounts) external;\n', '    function remove_liquidity(uint amount, uint[8] calldata min_amounts) external;\n', '\n', '    function remove_liquidity_imbalance(uint[2] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[3] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[4] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[5] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[6] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[7] calldata amounts, uint max_burn_amount) external;\n', '    function remove_liquidity_imbalance(uint[8] calldata amounts, uint max_burn_amount) external;\n', '}\n', '\n', '\n', 'interface Deposit {\n', '    function curve() external view returns (address);\n', '    function underlying_coins(int128) external view returns (address);\n', '    function calc_withdraw_one_coin(uint token_amount, int128 i) external view returns (uint);\n', '    function remove_liquidity_one_coin(uint token_amount, int128 i, uint min_uamount) external;\n', '}\n', '\n', '\n', 'interface Gauge {\n', '    function minter()                       external view returns (address);\n', '    function crv_token()                    external view returns (address);\n', '    function rewarded_token()               external view returns (address);\n', '    function reward_contract()              external view returns (address);\n', '    function claimable_tokens(address addr) external /*view*/ returns (uint);       // compatible with 3Crv\n', '    function claimable_reward(address addr) external view returns (uint);\n', '    function claimable_reward2(address addr) external view returns (uint);\n', '    function balanceOf(address)             external view returns (uint);\n', '\n', '    function deposit(uint _value) external;\n', '    function withdraw(uint _value) external;\n', '    function claim_rewards() external;\n', '}\n', '\n', '\n', 'interface Minter {\n', '    function mint(address gauge) external;\n', '}']