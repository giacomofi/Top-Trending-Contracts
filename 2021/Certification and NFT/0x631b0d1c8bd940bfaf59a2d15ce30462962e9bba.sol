['// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { Account } from "./lib/Account.sol";\n', 'import { Types } from "./lib/Types.sol";\n', '\n', '\n', '/**\n', ' * @title Getters\n', ' * @author dYdX\n', ' *\n', ' * Public read-only functions that allow transparency into the state of Solo\n', ' */\n', 'contract Getters {\n', '    using Types for Types.Par;\n', '\n', '    /**\n', "     * Get an account's summary for each market.\n", '     *\n', '     * @param  account  The account to query\n', '     * @return          The following values:\n', '     *                   - The ERC20 token address for each market\n', "     *                   - The account's principal value for each market\n", "     *                   - The account's (supplied or borrowed) number of tokens for each market\n", '     */\n', '    function getAccountBalances(\n', '        Account.Info memory account\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            address[] memory,\n', '            Types.Par[] memory,\n', '            Types.Wei[] memory\n', '        );\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { Account } from "./lib/Account.sol";\n', 'import { Actions } from "./lib/Actions.sol";\n', '\n', '\n', '/**\n', ' * @title Operation\n', ' * @author dYdX\n', ' *\n', ' * Primary public function for allowing users and contracts to manage accounts within Solo\n', ' */\n', 'contract Operation {\n', '    /**\n', '     * The main entry-point to Solo that allows users and contracts to manage accounts.\n', '     * Take one or more actions on one or more accounts. The msg.sender must be the owner or\n', '     * operator of all accounts except for those being liquidated, vaporized, or traded with.\n', '     * One call to operate() is considered a singular "operation". Account collateralization is\n', '     * ensured only after the completion of the entire operation.\n', '     *\n', '     * @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n', '     *                   duplicates. In each action, the relevant account will be referred-to by its\n', '     *                   index in the list.\n', '     * @param  actions   An ordered list of all actions that will be taken in this operation. The\n', '     *                   actions will be processed in order.\n', '     */\n', '    function operate(\n', '        Account.Info[] memory accounts,\n', '        Actions.ActionArgs[] memory actions\n', '    )\n', '        public;\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { Getters } from "./Getters.sol";\n', 'import { Operation } from "./Operation.sol";\n', '\n', '\n', '/**\n', ' * @title SoloMargin\n', ' * @author dYdX\n', ' *\n', ' * Main contract that inherits from other contracts\n', ' */\n', 'contract SoloMargin is\n', '    Getters,\n', '    Operation\n', '{ }\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Account\n', ' * @author dYdX\n', ' *\n', ' * Library of structs and functions that represent an account\n', ' */\n', 'library Account {\n', '    // Represents the unique key that specifies an account\n', '    struct Info {\n', '        address owner;  // The address that owns the account\n', '        uint256 number; // A nonce that allows a single address to control many accounts\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { Types } from "./Types.sol";\n', '\n', '\n', '/**\n', ' * @title Actions\n', ' * @author dYdX\n', ' *\n', ' * Library that defines and parses valid Actions\n', ' */\n', 'library Actions {\n', '    // ============ Enums ============\n', '\n', '    enum ActionType {\n', '        Deposit,   // supply tokens\n', '        Withdraw,  // borrow tokens\n', '        Transfer,  // transfer balance between accounts\n', '        Buy,       // buy an amount of some token (externally)\n', '        Sell,      // sell an amount of some token (externally)\n', '        Trade,     // trade tokens against another account\n', '        Liquidate, // liquidate an undercollateralized or expiring account\n', '        Vaporize,  // use excess tokens to zero-out a completely negative account\n', '        Call       // send arbitrary data to an address\n', '    }\n', '\n', '    // ============ Structs ============\n', '\n', '    /*\n', '     * Arguments that are passed to Solo in an ordered list as part of a single operation.\n', '     * Each ActionArgs has an actionType which specifies which action struct that this data will be\n', '     * parsed into before being processed.\n', '     */\n', '    struct ActionArgs {\n', '        ActionType actionType;\n', '        uint256 accountId;\n', '        Types.AssetAmount amount;\n', '        uint256 primaryMarketId;\n', '        uint256 secondaryMarketId;\n', '        address otherAddress;\n', '        uint256 otherAccountId;\n', '        bytes data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Types\n', ' * @author dYdX\n', ' *\n', ' * Library for interacting with the basic structs used in Solo\n', ' */\n', 'library Types {\n', '    // ============ AssetAmount ============\n', '\n', '    enum AssetDenomination {\n', '        Wei, // the amount is denominated in wei\n', '        Par  // the amount is denominated in par\n', '    }\n', '\n', '    enum AssetReference {\n', '        Delta, // the amount is given as a delta from the current value\n', '        Target // the amount is given as an exact number to end up at\n', '    }\n', '\n', '    struct AssetAmount {\n', '        bool sign; // true if positive\n', '        AssetDenomination denomination;\n', '        AssetReference ref;\n', '        uint256 value;\n', '    }\n', '\n', '    // ============ Par (Principal Amount) ============\n', '\n', '    // Individual principal amount for an account\n', '    struct Par {\n', '        bool sign; // true if positive\n', '        uint128 value;\n', '    }\n', '\n', '    // ============ Wei (Token Amount) ============\n', '\n', '    // Individual token amount for an account\n', '    struct Wei {\n', '        bool sign; // true if positive\n', '        uint256 value;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol";\n', '\n', 'import "../../external/dydx/SoloMargin.sol";\n', 'import "../../external/dydx/lib/Account.sol";\n', 'import "../../external/dydx/lib/Actions.sol";\n', 'import "../../external/dydx/lib/Types.sol";\n', '\n', '/**\n', ' * @title DydxPoolController\n', ' * @author David Lucid <[email\xa0protected]> (https://github.com/davidlucid)\n', ' * @dev This library handles deposits to and withdrawals from dYdX liquidity pools.\n', ' */\n', 'library DydxPoolController {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /**\n', '     * @dev dYdX SoloMargin contract address.\n', '     */\n', '    address constant private SOLO_MARGIN_CONTRACT = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n', '\n', '    /**\n', '     * @dev dYdX SoloMargin contract object.\n', '     */\n', '    SoloMargin constant private _soloMargin = SoloMargin(SOLO_MARGIN_CONTRACT);\n', '\n', '    /**\n', "     * @dev Returns a token's dYdX market ID given its ERC20 contract address.\n", '     * @param erc20Contract The ERC20 contract address of the token.\n', '     */\n', '    function getMarketId(address erc20Contract) private pure returns (uint256) {\n', '        if (erc20Contract == 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) return 2; // USDC\n', '        if (erc20Contract == 0x6B175474E89094C44Da98b954EedeAC495271d0F) return 3; // DAI\n', '        else revert("Supported dYdX market not found for this token address.");\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the fund's balances of all currencies supported by dYdX.\n", '     * @return An array of ERC20 token contract addresses and a corresponding array of balances.\n', '     */\n', '    function getBalances() external view returns (address[] memory, uint256[] memory) {\n', '        Account.Info memory account = Account.Info(address(this), 0);\n', '        (address[] memory tokens, , Types.Wei[] memory weis) = _soloMargin.getAccountBalances(account);\n', '        uint256[] memory balances = new uint256[](weis.length);\n', '        for (uint256 i = 0; i < weis.length; i++) balances[i] = weis[i].sign ? weis[i].value : 0;\n', '        return (tokens, balances);\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the fund's balance of the specified currency in the dYdX pool.\n", '     * @param erc20Contract The ERC20 contract address of the token.\n', '     */\n', '    function getBalance(address erc20Contract) external view returns (uint256) {\n', '        uint256 marketId = getMarketId(erc20Contract);\n', '        Account.Info memory account = Account.Info(address(this), 0);\n', '        (, , Types.Wei[] memory weis) = _soloMargin.getAccountBalances(account);\n', '        return weis[marketId].sign ? weis[marketId].value : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves tokens to dYdX without spending gas on every deposit.\n', '     * @param erc20Contract The ERC20 contract address of the token.\n', '     * @param amount Amount of the specified token to approve to dYdX.\n', '     */\n', '    function approve(address erc20Contract, uint256 amount) external {\n', '        IERC20 token = IERC20(erc20Contract);\n', '        uint256 allowance = token.allowance(address(this), SOLO_MARGIN_CONTRACT);\n', '        if (allowance == amount) return;\n', '        if (amount > 0 && allowance > 0) token.safeApprove(SOLO_MARGIN_CONTRACT, 0);\n', '        token.safeApprove(SOLO_MARGIN_CONTRACT, amount);\n', '        return;\n', '    }\n', '\n', '    /**\n', '     * @dev Deposits funds to the dYdX pool. Assumes that you have already approved >= the amount to dYdX.\n', '     * @param erc20Contract The ERC20 contract address of the token to be deposited.\n', '     * @param amount The amount of tokens to be deposited.\n', '     */\n', '    function deposit(address erc20Contract, uint256 amount) external {\n', '        require(amount > 0, "Amount must be greater than 0.");\n', '        uint256 marketId = getMarketId(erc20Contract);\n', '\n', '        Account.Info memory account = Account.Info(address(this), 0);\n', '        Account.Info[] memory accounts = new Account.Info[](1);\n', '        accounts[0] = account;\n', '\n', '        Types.AssetAmount memory assetAmount = Types.AssetAmount(true, Types.AssetDenomination.Wei, Types.AssetReference.Delta, amount);\n', '        bytes memory emptyData;\n', '\n', '        Actions.ActionArgs memory action = Actions.ActionArgs(\n', '            Actions.ActionType.Deposit,\n', '            0,\n', '            assetAmount,\n', '            marketId,\n', '            0,\n', '            address(this),\n', '            0,\n', '            emptyData\n', '        );\n', '\n', '        Actions.ActionArgs[] memory actions = new Actions.ActionArgs[](1);\n', '        actions[0] = action;\n', '\n', '        _soloMargin.operate(accounts, actions);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws funds from the dYdX pool.\n', '     * @param erc20Contract The ERC20 contract address of the token to be withdrawn.\n', '     * @param amount The amount of tokens to be withdrawn.\n', '     */\n', '    function withdraw(address erc20Contract, uint256 amount) external {\n', '        require(amount > 0, "Amount must be greater than 0.");\n', '        uint256 marketId = getMarketId(erc20Contract);\n', '\n', '        Account.Info memory account = Account.Info(address(this), 0);\n', '        Account.Info[] memory accounts = new Account.Info[](1);\n', '        accounts[0] = account;\n', '\n', '        Types.AssetAmount memory assetAmount = Types.AssetAmount(false, Types.AssetDenomination.Wei, Types.AssetReference.Delta, amount);\n', '        bytes memory emptyData;\n', '\n', '        Actions.ActionArgs memory action = Actions.ActionArgs(\n', '            Actions.ActionType.Withdraw,\n', '            0,\n', '            assetAmount,\n', '            marketId,\n', '            0,\n', '            address(this),\n', '            0,\n', '            emptyData\n', '        );\n', '\n', '        Actions.ActionArgs[] memory actions = new Actions.ActionArgs[](1);\n', '        actions[0] = action;\n', '\n', '        _soloMargin.operate(accounts, actions);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws all funds from the dYdX pool.\n', '     * @param erc20Contract The ERC20 contract address of the token to be withdrawn.\n', '     */\n', '    function withdrawAll(address erc20Contract) external {\n', '        uint256 marketId = getMarketId(erc20Contract);\n', '\n', '        Account.Info memory account = Account.Info(address(this), 0);\n', '        Account.Info[] memory accounts = new Account.Info[](1);\n', '        accounts[0] = account;\n', '\n', '        Types.AssetAmount memory assetAmount = Types.AssetAmount(true, Types.AssetDenomination.Par, Types.AssetReference.Target, 0);\n', '        bytes memory emptyData;\n', '\n', '        Actions.ActionArgs memory action = Actions.ActionArgs(\n', '            Actions.ActionType.Withdraw,\n', '            0,\n', '            assetAmount,\n', '            marketId,\n', '            0,\n', '            address(this),\n', '            0,\n', '            emptyData\n', '        );\n', '\n', '        Actions.ActionArgs[] memory actions = new Actions.ActionArgs[](1);\n', '        actions[0] = action;\n', '\n', '        _soloMargin.operate(accounts, actions);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', 'import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']