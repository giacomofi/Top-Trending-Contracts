['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/// GebDeployPauseProxyActions.sol\n', '\n', '// Copyright (C) 2018 Gonzalo Balabasquer <[email\xa0protected]>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract PauseLike {\n', '    function scheduleTransaction(address, bytes32, bytes memory, uint) virtual public;\n', '    function executeTransaction(address, bytes32, bytes memory, uint) virtual public;\n', '}\n', '\n', 'contract GebDeployPauseProxyActions {\n', '    function modifyParameters(address pause, address actions, address who, bytes32 parameter, uint data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 parameter, address data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,address)", who, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,address)", who, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, uint data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, address data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,address)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,bytes32,address)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, uint data1, uint data2) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256)", who, collateralType, data1, data2),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256)", who, collateralType, data1, data2),\n', '            now\n', '        );\n', '    }\n', '\n', '    function modifyParameters(address pause, address actions, address who, bytes32 collateralType, uint data1, uint data2, address data3) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256,address)", who, collateralType, data1, data2, data3),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("modifyParameters(address,bytes32,uint256,uint256,address)", who, collateralType, data1, data2, data3),\n', '            now\n', '        );\n', '    }\n', '\n', '    function addAuthorization(address pause, address actions, address who, address to) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("addAuthorization(address,address)", who, to),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("addAuthorization(address,address)", who, to),\n', '            now\n', '        );\n', '    }\n', '\n', '    function updateRedemptionRate(address pause, address actions, address who, bytes32 parameter, uint data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRedemptionRate(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRedemptionRate(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function updateRateAndModifyParameters(address pause, address actions, address who, bytes32 parameter, uint data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRateAndModifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("updateRateAndModifyParameters(address,bytes32,uint256)", who, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function taxSingleAndModifyParameters(address pause, address actions, address who, bytes32 collateralType, bytes32 parameter, uint data) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("taxSingleAndModifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("taxSingleAndModifyParameters(address,bytes32,bytes32,uint256)", who, collateralType, parameter, data),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setAuthorityAndDelay(address pause, address actions, address newAuthority, uint newDelay) external {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAuthorityAndDelay(address,address,uint256)", pause, newAuthority, newDelay),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAuthorityAndDelay(address,address,uint256)", pause, newAuthority, newDelay),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setProtester(address pause, address actions, address protester) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setProtester(address,address)", pause, protester),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setProtester(address,address)", pause, protester),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setOwner(address pause, address actions, address owner) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setOwner(address,address)", pause, owner),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setOwner(address,address)", pause, owner),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setDelay(address pause, address actions, uint newDelay) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setDelay(address,uint256)", pause, newDelay),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setDelay(address,uint256)", pause, newDelay),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setDelayMultiplier(address pause, address actions, uint delayMultiplier) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setDelayMultiplier(address,uint256)", pause, delayMultiplier),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setDelayMultiplier(address,uint256)", pause, delayMultiplier),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setTotalAllowance(address pause, address actions, address who, address account, uint rad) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setTotalAllowance(address,address,uint256)", who, account, rad),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setTotalAllowance(address,address,uint256)", who, account, rad),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setPerBlockAllowance(address pause, address actions, address who, address account, uint rad) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setPerBlockAllowance(address,address,uint256)", who, account, rad),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setPerBlockAllowance(address,address,uint256)", who, account, rad),\n', '            now\n', '        );\n', '    }\n', '\n', '    function setAllowance(address pause, address actions, address join, address account, uint allowance) public {\n', '        bytes32 tag;\n', '        assembly { tag := extcodehash(actions) }\n', '        PauseLike(pause).scheduleTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAllowance(address,address,uint256)", join, account, allowance),\n', '            now\n', '        );\n', '        PauseLike(pause).executeTransaction(\n', '            address(actions),\n', '            tag,\n', '            abi.encodeWithSignature("setAllowance(address,address,uint256)", join, account, allowance),\n', '            now\n', '        );\n', '    }\n', '}']