['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', '// File: contracts/ICarbonInventoryControl.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICarbonInventoryControl {\n', '\n', '     /**\n', '     * @dev function to offset carbon foot print on token and inventory.\n', '     * @param _to Wallet from whom will be burned tokens.\n', '     * @param _broker Broker who will burn tokens.\n', '     * @param _carbonTon Amount to burn on carbon tons.\n', '     * @param _receiptId Transaction identifier that represent the offset.\n', '     * @param _onBehalfOf Broker is burning on behalf of someone.\n', '     * @param _token Commmercial carbon credit token which will be burned.\n', '     */\n', '    function offsetTransaction(address _to, address _broker, uint256 _carbonTon, string memory _receiptId, string memory _onBehalfOf, address _token )\n', '        external;\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/CarbonInstantOffset.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract CarbonInstantOffset is Ownable {\n', '\n', '    ICarbonInventoryControl public carbonInventoryControl;\n', '       \n', '    address private MCO2;  \n', '    address private broker;\n', '\n', '    event BrokerChanged(address newBroker);\n', '    event MCO2Changed(address newMCO2); \n', '    \n', '    constructor(address _carbonInventoryControl, address _MCO2, address _broker)\n', '        public\n', '        {\n', '            MCO2 = _MCO2;\n', '            broker = _broker;\n', '            carbonInventoryControl = ICarbonInventoryControl(_carbonInventoryControl);\n', '        }\n', '              \n', '     /**\n', '     * @dev function to offset carbon foot print on token and inventory.\n', '     * @param _carbonTon Amount to burn on carbon tons.\n', '     * @param _receiptId Transaction identifier that represent the offset.\n', '     * @param _onBehalfOf Broker is burning on behalf of someone.\n', '     */\n', '    function offsetTransaction( uint256 _carbonTon, string memory _receiptId, string memory _onBehalfOf)\n', '        public  {\n', '        require (_carbonTon > 0, "CarbonInstantOffset: Carbon ton should be greater than zero");\n', '        carbonInventoryControl.offsetTransaction(msg.sender, broker, _carbonTon, _receiptId, _onBehalfOf, MCO2);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes a the cMCO2 address on eth network\n', '    * @param newMCO2 New cMCO2 address on eth network\n', '    */\n', '    function changeMCO2(address newMCO2) external onlyOwner returns(bool) {\n', '        _changeMCO2(newMCO2);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Changes a the cMCO2 address on eth network (internal)\n', '    * @param newMCO2 New cMCO2 address on eth network\n', '    */\n', '    function _changeMCO2(address newMCO2) internal {\n', '        require(newMCO2 != address(0), "CarbonInstantOffset: Contract is empty");\n', '        MCO2 = newMCO2;\n', '        emit MCO2Changed(MCO2);\n', '    }\n', '\n', '    function getMCO2() external view returns(address) {\n', '        return MCO2;\n', '    }\n', '\n', '\n', '   /**\n', '    * @dev Changes a the broker address on eth network\n', '    * @param newBroker New broker address on eth network\n', '    */\n', '    function changeBroker(address newBroker) external onlyOwner returns(bool) {\n', '        _changeBroker(newBroker);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Changes a the Broker address on eth network (internal)\n', '    * @param newBroker New Broker address on eth network\n', '    */\n', '    function _changeBroker (address newBroker) internal {\n', '        require(newBroker != address(0), "CarbonInstantOffset: Contract is empty");\n', '        broker = newBroker;\n', '        emit BrokerChanged(broker);\n', '    }\n', '\n', '    function getBroker() external view returns(address) {\n', '        return broker;\n', '    }\n', '\n', '}']