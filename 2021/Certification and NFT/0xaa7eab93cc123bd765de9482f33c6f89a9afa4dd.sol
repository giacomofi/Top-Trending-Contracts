['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-10\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC21/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev A token holder contract that will allow a beneficiary to extract the\n', ' * tokens after a given release time - the amount of coin allowed to be recovered\n', ' * is proportional to the time taken. \n', ' *\n', ' * This contract will be used to lock up 40% of minted ChowCoin (40 million coins)\n', ' * over the course of 40 months specified in 30 day increments. Calling the release\n', ' * method will recover the total number of available tokens after the given time period\n', ' * and transfer the tokens back into the minting account.\n', ' */\n', 'contract EATTokenLockup {\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 immutable private _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address immutable private _beneficiary;\n', '\n', '    // time in seconds that the lockup should occur for\n', '    uint256 immutable private _totalLockupDuration;\n', '\n', '    // total number of increments of coin that should be released by\n', '    uint256 immutable private _totalIncrements;\n', '\n', '    // total number of tokens saved at this address\n', '    uint256 immutable private _totalNumTokens;\n', '\n', '    // start time of the lockup in epoch seconds\n', '    uint256 immutable private _startTime;\n', '\n', '    constructor (IERC20 token_, uint256 duration_, uint256 increments_, uint256 numTokens_) {\n', '        _token = token_;\n', '        _beneficiary = msg.sender;\n', '        _totalLockupDuration = duration_;\n', '        _totalIncrements = increments_;\n', '        _totalNumTokens = numTokens_;\n', '        _startTime = block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view virtual returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view virtual returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the total duration of the lockup in seconds\n', '     */\n', '    function duration() public view virtual returns (uint256) {\n', '        return _totalLockupDuration;\n', '    }\n', '\n', '    /**\n', '     * @return the total remaining time for the lockup\n', '     */\n', '    function remainingDuration() public view virtual returns (uint256) {\n', '        require(block.timestamp <= _startTime + _totalLockupDuration, "EATTokenLockup: all tokens are avilable for release");\n', '        return _startTime + _totalLockupDuration - block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @return the total number of tokens available for release.\n', '     */\n', '    function numReleasableTokens() public view virtual returns (uint256) {\n', '        uint256 timeIncrementSize = _totalLockupDuration / _totalIncrements;\n', '        uint256 timeDuration = block.timestamp - _startTime;\n', '        uint256 numTokensInIncrement = _totalNumTokens / _totalIncrements;\n', '        uint256 incrementsAvailable = Math.min256(timeDuration / timeIncrementSize, _totalIncrements);\n', '        uint256 maxNumTokensAvailable = incrementsAvailable * numTokensInIncrement;\n', '        uint256 numTokensReleased = _totalNumTokens - remainingTokens();\n', '        uint256 numTokensAvailable = maxNumTokensAvailable - numTokensReleased;\n', '        return numTokensAvailable;\n', '    }\n', '\n', '    /**\n', '     * @return the total number of increments in which coins are released\n', '     */\n', '    function increments() public view virtual returns (uint256) {\n', '        return _totalIncrements;\n', '    }\n', '\n', '    /**\n', '     * @return the total remaining coins held within the lockup\n', '     */\n', '    function remainingTokens() public view virtual returns (uint256) {\n', '        return _token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @return the total remaining coins held within the lockup\n', '     */\n', '    function tokensReleased() public view virtual returns (uint256) {\n', '        return _totalNumTokens - _token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public virtual {\n', '        uint256 amount = token().balanceOf(address(this));\n', '        require(amount > 0, "EATTokenLockup: no tokens remaining to release");\n', '        // solhint-disable-next-line not-rely-on-time\n', '        uint256 numTokensAvailable = numReleasableTokens();\n', '        require(amount >= numTokensAvailable, "EATTokenLockup: not enough tokens available");\n', '        token().transfer(beneficiary(), numTokensAvailable);\n', '    }\n', '}']