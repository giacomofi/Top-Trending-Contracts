['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '/*\n', '                                                           ,▄▓▓██▌   ,╓▄▄▓▓▓▓▓▓▓▓▄▄▄,,                          \n', '                                                        ,▓██▓███▓▄▓███▓╬╬╬╬╬╬╬╬╬╬╬╬╬▓███▓▄,                     \n', '                                                  ▄█   ▓██╬╣███████╬▓▀╬╬▓▓▓████████████▓█████▄,                 \n', '                                                 ▓██▌ ▓██╬╣██████╬▓▌  ██████████████████████▌╙╙▀ⁿ\n', '                                                ▐████████╬▓████▓▓█╨ ▄ ╟█████████▓▓╬╬╬╬╬▓▓█████▓▄\n', '                                  └▀▓▓▄╓        ╟█▓╣█████▓██████▀ ╓█▌ ███████▓▓▓▓▓╬╬╬╬╬╬╬╬╬╬╬╬▓██▓▄\n', '                                     └▀████▓▄╥  ▐██╬╬██████████╙ Æ▀─ ▓███▀╚╠╬╩▀▀███████▓▓╬╬╬╬╬╬╬╬╬██▄\n', '                                        └▀██▓▀▀█████▓╬▓██████▀     ▄█████▒╠"      └╙▓██████▓╬╬╬╬╬╬╬╬██▄\n', '                                           └▀██▄,└╙▀▀████▌└╙    ^"▀╙╙╙"╙██      @▄    ╙▀███████╬╬╬╬╬╬╬██µ\n', '                                              └▀██▓▄, ██▌       ╒       ╙█▓     ]▓█▓╔    ▀███████▓╬╬╬╬╬▓█▌\n', '                                                  ▀█████       ▓         ╟█▌    ]╠██▓░▒╓   ▀████████╬╬╬╬╣█▌\n', '                                                  ▐████      ╓█▀█▌      ,██▌    ╚Å███▓▒▒╠╓  ╙█████████╬╬╬╣█▌\n', '                                                  └████     ▓█░░▓█      ▀▀▀    φ▒╫████▒▒▒▒╠╓  █████████▓╬╬▓█µ\n', '                                                   ╘███µ ▌▄█▓▄▓▀`     ,▀    ,╔╠░▓██████▌╠▒▒▒φ  ██████████╬╬██\n', '                                                   ▐████µ╙▓▀`     ,▀╙,╔╔φφφ╠░▄▓███████▌░▓╙▒▒▒╠ └██╬███████╬▓█⌐\n', '                                                   ╫██ ▓▌         ▌φ▒▒░▓██████████████▌▒░▓╚▒▒▒╠ ▓██╬▓██████╣█▌\n', '                                                   ██▌           ▌╔▒▒▄████████████████▒▒▒░▌╠▒▒▒≥▐██▓╬╬███████▌\n', '                                                   ██▌      ,╓φ╠▓«▒▒▓████▀  ▀█████████▌▒▒▒╟░▒▒▒▒▐███╬╬╣████▓█▌\n', '                                                  ▐██      ╠▒▄▓▓███▓████└     ▀████████▌▒▒░▌╚▒▒▒▐███▓╬╬████ ╙▌\n', '                                                  ███  )  ╠▒░░░▒░╬████▀        └████████░▒▒░╬∩▒▒▓████╬╬╣███\n', '                                                 ▓██    ╠╠▒▒▐█▀▀▌`░╫██           ███████▒▒▒▒░▒▒½█████╬╬╣███\n', '                                                ███ ,█▄ ╠▒▒▒╫▌,▄▀,▒╫██           ╟██████▒▒▒░╣⌠▒▓█████╬╬╣██▌\n', '                                               ╘██µ ██` ╠▒▒░██╬φ╠▄▓██`            ██████░░▌φ╠░▓█████▓╬╬▓██\n', '                                                ╟██  .φ╠▒░▄█▀░░▄██▀└              █████▌▒╣φ▒░▓██████╬╬╣██\n', '                                                 ▀██▄▄▄╓▄███████▀                ▐█████░▓φ▒▄███████▓╬╣██\n', '                                                   ╙▀▀▀██▀└                      ████▓▄▀φ▄▓████████╬▓█▀\n', '                                                                                ▓███╬╩╔╣██████████▓██└\n', '                                                                              ╓████▀▄▓████████▀████▀\n', '                                                                            ,▓███████████████─]██╙\n', '                                                                         ,▄▓██████████████▀└  ╙\n', '                                                                    ,╓▄▓███████████████▀╙\n', '                                                             `"▀▀▀████████▀▀▀▀`▄███▀▀└\n', '                                                                              └└\n', '                                \n', '                    \n', '\n', '                    11\\   11\\                     11\\             11\\   11\\            11\\                                       11\\       \n', '                  1111 |  \\__|                    11 |            111\\  11 |           11 |                                      11 |      \n', '                  \\_11 |  11\\ 1111111\\   1111111\\ 1111111\\        1111\\ 11 | 111111\\ 111111\\   11\\  11\\  11\\  111111\\   111111\\  11 |  11\\ \n', '                    11 |  11 |11  __11\\ 11  _____|11  __11\\       11 11\\11 |11  __11\\\\_11  _|  11 | 11 | 11 |11  __11\\ 11  __11\\ 11 | 11  |\n', '                    11 |  11 |11 |  11 |11 /      11 |  11 |      11 \\1111 |11111111 | 11 |    11 | 11 | 11 |11 /  11 |11 |  \\__|111111  / \n', '                    11 |  11 |11 |  11 |11 |      11 |  11 |      11 |\\111 |11   ____| 11 |11\\ 11 | 11 | 11 |11 |  11 |11 |      11  _11<  \n', '                  111111\\ 11 |11 |  11 |\\1111111\\ 11 |  11 |      11 | \\11 |\\1111111\\  \\1111  |\\11111\\1111  |\\111111  |11 |      11 | \\11\\ \n', '                  \\______|\\__|\\__|  \\__| \\_______|\\__|  \\__|      \\__|  \\__| \\_______|  \\____/  \\_____\\____/  \\______/ \\__|      \\__|  \\__|\n', '                                                                                                                                           \n', '                                                                                                                                           \n', '                                                                                                                                           \n', '                               111111\\                                                               11\\     11\\                           \n', '                              11  __11\\                                                              11 |    \\__|                          \n', '                              11 /  11 | 111111\\   111111\\   111111\\   111111\\   111111\\   111111\\ 111111\\   11\\  111111\\  1111111\\        \n', '                              11111111 |11  __11\\ 11  __11\\ 11  __11\\ 11  __11\\ 11  __11\\  \\____11\\\\_11  _|  11 |11  __11\\ 11  __11\\       \n', '                              11  __11 |11 /  11 |11 /  11 |11 |  \\__|11111111 |11 /  11 | 1111111 | 11 |    11 |11 /  11 |11 |  11 |      \n', '                              11 |  11 |11 |  11 |11 |  11 |11 |      11   ____|11 |  11 |11  __11 | 11 |11\\ 11 |11 |  11 |11 |  11 |      \n', '                              11 |  11 |\\1111111 |\\1111111 |11 |      \\1111111\\ \\1111111 |\\1111111 | \\1111  |11 |\\111111  |11 |  11 |      \n', '                              \\__|  \\__| \\____11 | \\____11 |\\__|       \\_______| \\____11 | \\_______|  \\____/ \\__| \\______/ \\__|  \\__|      \n', '                                        11\\   11 |11\\   11 |                    11\\   11 |                                                 \n', '                                        \\111111  |\\111111  |                    \\111111  |                                                 \n', '                                         \\______/  \\______/                      \\______/                                                  \n', '                                                1111111\\                        11\\                                                        \n', '                                                11  __11\\                       11 |                                                       \n', '                                                11 |  11 | 111111\\  11\\   11\\ 111111\\    111111\\   111111\\                                 \n', '                                                1111111  |11  __11\\ 11 |  11 |\\_11  _|  11  __11\\ 11  __11\\                                \n', '                                                11  __11< 11 /  11 |11 |  11 |  11 |    11111111 |11 |  \\__|                               \n', '                                                11 |  11 |11 |  11 |11 |  11 |  11 |11\\ 11   ____|11 |                                     \n', '                                                11 |  11 |\\111111  |\\111111  |  \\1111  |\\1111111\\ 11 |                                     \n', '                                                \\__|  \\__| \\______/  \\______/    \\____/  \\_______|\\__|                                     \n', '*/\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/helpers/UniERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library UniERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\n', '\n', '    function isETH(IERC20 token) internal pure returns (bool) {\n', '        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\n', '    }\n', '\n', '    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\n', '        if (isETH(token)) {\n', '            return account.balance;\n', '        } else {\n', '            return token.balanceOf(account);\n', '        }\n', '    }\n', '\n', '    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniApprove(IERC20 token, address to, uint256 amount) internal {\n', '        require(!isETH(token), "Approve called on ETH");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\n', '\n', '        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\n', '        }\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            require(abi.decode(returndata, (bool)), "ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IChi.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IChi is IERC20 {\n', '    function mint(uint256 value) external;\n', '    function free(uint256 value) external returns (uint256 freed);\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IGasDiscountExtension.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IGasDiscountExtension {\n', '    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external view returns (IChi, uint256);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IAggregationExecutor.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IAggregationExecutor is IGasDiscountExtension {\n', '    function callBytes(bytes calldata data) external payable;  // 0xd9c45357\n', '}\n', '\n', '\n', '// File contracts/helpers/RevertReasonParser.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library RevertReasonParser {\n', '    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\n', '        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\n', '        // We assume that revert reason is abi-encoded as Error(string)\n', '\n', '        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\n', '        if (data.length >= 68 && data[0] == "\\x08" && data[1] == "\\xc3" && data[2] == "\\x79" && data[3] == "\\xa0") {\n', '            string memory reason;\n', '            // solhint-disable no-inline-assembly\n', '            assembly {\n', '                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\n', '                reason := add(data, 68)\n', '            }\n', '            /*\n', '                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\n', '                also sometimes there is extra 32 bytes of zeros padded in the end:\n', '                https://github.com/ethereum/solidity/issues/10170\n', "                because of that we can't check for equality and instead check\n", '                that string length + extra 68 bytes is less than overall data length\n', '            */\n', '            require(data.length >= 68 + bytes(reason).length, "Invalid revert reason");\n', '            return string(abi.encodePacked(prefix, "Error(", reason, ")"));\n', '        }\n', '        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\n', '        else if (data.length == 36 && data[0] == "\\x4e" && data[1] == "\\x48" && data[2] == "\\x7b" && data[3] == "\\x71") {\n', '            uint256 code;\n', '            // solhint-disable no-inline-assembly\n', '            assembly {\n', '                // 36 = 32 bytes data length + 4-byte selector\n', '                code := mload(add(data, 36))\n', '            }\n', '            return string(abi.encodePacked(prefix, "Panic(", _toHex(code), ")"));\n', '        }\n', '\n', '        return string(abi.encodePacked(prefix, "Unknown(", _toHex(data), ")"));\n', '    }\n', '\n', '    function _toHex(uint256 value) private pure returns(string memory) {\n', '        return _toHex(abi.encodePacked(value));\n', '    }\n', '\n', '    function _toHex(bytes memory data) private pure returns(string memory) {\n', '        bytes16 alphabet = 0x30313233343536373839616263646566;\n', '        bytes memory str = new bytes(2 + data.length * 2);\n', '        str[0] = "0";\n', '        str[1] = "x";\n', '        for (uint256 i = 0; i < data.length; i++) {\n', '            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\n', '            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\n', '        }\n', '        return string(str);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC20Permit.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IERC20Permit {\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', '// File contracts/helpers/Permitable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'contract Permitable {\n', '    event Error(\n', '        string reason\n', '    );\n', '\n', '    function _permit(IERC20 token, uint256 amount, bytes calldata permit) internal {\n', '        if (permit.length == 32 * 7) {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\n', '            if (!success) {\n', '                string memory reason = RevertReasonParser.parse(result, "Permit call failed: ");\n', '                if (token.allowance(msg.sender, address(this)) < amount) {\n', '                    revert(reason);\n', '                } else {\n', '                    emit Error(reason);\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/UnoswapRouter.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract UnoswapRouter is Permitable {\n', '    uint256 private constant _TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n', '    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\n', '    uint256 private constant _WETH = 0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    uint256 private constant _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\n', '    uint256 private constant _DENOMINATOR = 1000000000;\n', '    uint256 private constant _NUMERATOR_OFFSET = 160;\n', '\n', '    receive() external payable {\n', '        // solhint-disable-next-line avoid-tx-origin\n', '        require(msg.sender != tx.origin, "ETH deposit rejected");\n', '    }\n', '\n', '    function unoswapWithPermit(\n', '        IERC20 srcToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        bytes32[] calldata pools,\n', '        bytes calldata permit\n', '    ) external payable returns(uint256 returnAmount) {\n', '        _permit(srcToken, amount, permit);\n', '        return unoswap(srcToken, amount, minReturn, pools);\n', '    }\n', '\n', '    function unoswap(\n', '        IERC20 srcToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        bytes32[] calldata /* pools */\n', '    ) public payable returns(uint256 returnAmount) {\n', '        assembly {  // solhint-disable-line no-inline-assembly\n', '            function reRevert() {\n', '                returndatacopy(0, 0, returndatasize())\n', '                revert(0, returndatasize())\n', '            }\n', '\n', '            function revertWithReason(m, len) {\n', '                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n', '                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\n', '                mstore(0x40, m)\n', '                revert(0, len)\n', '            }\n', '\n', '            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\n', '                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n', '                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\n', '                    reRevert()\n', '                }\n', '\n', '                let reserve0 := mload(emptyPtr)\n', '                let reserve1 := mload(add(emptyPtr, 0x20))\n', '                if reversed {\n', '                    let tmp := reserve0\n', '                    reserve0 := reserve1\n', '                    reserve1 := tmp\n', '                }\n', '                ret := mul(swapAmount, numerator)\n', '                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, _DENOMINATOR)))\n', '\n', '                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n', '                switch reversed\n', '                case 0 {\n', '                    mstore(add(emptyPtr, 0x04), 0)\n', '                    mstore(add(emptyPtr, 0x24), ret)\n', '                }\n', '                default {\n', '                    mstore(add(emptyPtr, 0x04), ret)\n', '                    mstore(add(emptyPtr, 0x24), 0)\n', '                }\n', '                mstore(add(emptyPtr, 0x44), dst)\n', '                mstore(add(emptyPtr, 0x64), 0x80)\n', '                mstore(add(emptyPtr, 0x84), 0)\n', '                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '            }\n', '\n', '            let emptyPtr := mload(0x40)\n', '            mstore(0x40, add(emptyPtr, 0xc0))\n', '\n', '            let poolsOffset := add(calldataload(0x64), 0x4)\n', '            let poolsEndOffset := calldataload(poolsOffset)\n', '            poolsOffset := add(poolsOffset, 0x20)\n', '            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\n', '            let rawPair := calldataload(poolsOffset)\n', '            switch srcToken\n', '            case 0 {\n', '                if iszero(eq(amount, callvalue())) {\n', '                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // "invalid msg.value"\n', '                }\n', '\n', '                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\n', '                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '\n', '                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\n', '                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\n', '                mstore(add(emptyPtr, 0x24), amount)\n', '                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '            }\n', '            default {\n', '                if callvalue() {\n', '                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // "invalid msg.value"\n', '                }\n', '\n', '                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\n', '                mstore(add(emptyPtr, 0x4), caller())\n', '                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\n', '                mstore(add(emptyPtr, 0x44), amount)\n', '                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '            }\n', '\n', '            returnAmount := amount\n', '\n', '            for {let i := add(poolsOffset, 0x20)} lt(i, poolsEndOffset) {i := add(i, 0x20)} {\n', '                let nextRawPair := calldataload(i)\n', '\n', '                returnAmount := swap(\n', '                    emptyPtr,\n', '                    returnAmount,\n', '                    and(rawPair, _ADDRESS_MASK),\n', '                    and(rawPair, _REVERSE_MASK),\n', '                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n', '                    and(nextRawPair, _ADDRESS_MASK)\n', '                )\n', '\n', '                rawPair := nextRawPair\n', '            }\n', '\n', '            switch and(rawPair, _WETH_MASK)\n', '            case 0 {\n', '                returnAmount := swap(\n', '                    emptyPtr,\n', '                    returnAmount,\n', '                    and(rawPair, _ADDRESS_MASK),\n', '                    and(rawPair, _REVERSE_MASK),\n', '                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n', '                    caller()\n', '                )\n', '            }\n', '            default {\n', '                returnAmount := swap(\n', '                    emptyPtr,\n', '                    returnAmount,\n', '                    and(rawPair, _ADDRESS_MASK),\n', '                    and(rawPair, _REVERSE_MASK),\n', '                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n', '                    address()\n', '                )\n', '\n', '                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\n', '                mstore(add(emptyPtr, 0x04), returnAmount)\n', '                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '\n', '                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\n', '                    reRevert()\n', '                }\n', '            }\n', '\n', '            if lt(returnAmount, minReturn) {\n', '                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a)  // "Min return not reached"\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/AggregationRouterV3.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AggregationRouterV3 is Ownable, UnoswapRouter {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using UniERC20 for IERC20;\n', '\n', '    uint256 private constant _PARTIAL_FILL = 0x01;\n', '    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\n', '    uint256 private constant _SHOULD_CLAIM = 0x04;\n', '    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\n', '    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\n', '\n', '    struct SwapDescription {\n', '        IERC20 srcToken;\n', '        IERC20 dstToken;\n', '        address srcReceiver;\n', '        address dstReceiver;\n', '        uint256 amount;\n', '        uint256 minReturnAmount;\n', '        uint256 flags;\n', '        bytes permit;\n', '    }\n', '\n', '    event Swapped(\n', '        address sender,\n', '        IERC20 srcToken,\n', '        IERC20 dstToken,\n', '        address dstReceiver,\n', '        uint256 spentAmount,\n', '        uint256 returnAmount\n', '    );\n', '\n', '    function discountedSwap(\n', '        IAggregationExecutor caller,\n', '        SwapDescription calldata desc,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        payable\n', '        returns (uint256 returnAmount, uint256 gasLeft, uint256 chiSpent)\n', '    {\n', '        uint256 initialGas = gasleft();\n', '\n', '        address chiSource = address(0);\n', '        if (desc.flags & _BURN_FROM_MSG_SENDER != 0) {\n', '            chiSource = msg.sender;\n', '        } else if (desc.flags & _BURN_FROM_TX_ORIGIN != 0) {\n', '            chiSource = tx.origin; // solhint-disable-line avoid-tx-origin\n', '        } else {\n', '            revert("Incorrect CHI burn flags");\n', '        }\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returnData) = address(this).delegatecall(abi.encodeWithSelector(this.swap.selector, caller, desc, data));\n', '        if (success) {\n', '            (returnAmount,) = abi.decode(returnData, (uint256, uint256));\n', '        } else {\n', '            if (msg.value > 0) {\n', '                msg.sender.transfer(msg.value);\n', '            }\n', '            emit Error(RevertReasonParser.parse(returnData, "Swap failed: "));\n', '        }\n', '\n', '        (IChi chi, uint256 amount) = caller.calculateGas(initialGas.sub(gasleft()), desc.flags, msg.data.length);\n', '        if (amount > 0) {\n', '            chiSpent = chi.freeFromUpTo(chiSource, amount);\n', '        }\n', '        gasLeft = gasleft();\n', '    }\n', '\n', '    function swap(\n', '        IAggregationExecutor caller,\n', '        SwapDescription calldata desc,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        payable\n', '        returns (uint256 returnAmount, uint256 gasLeft)\n', '    {\n', '        require(desc.minReturnAmount > 0, "Min return should not be 0");\n', '        require(data.length > 0, "data should be not zero");\n', '\n', '        uint256 flags = desc.flags;\n', '        IERC20 srcToken = desc.srcToken;\n', '        IERC20 dstToken = desc.dstToken;\n', '\n', '        if (flags & _REQUIRES_EXTRA_ETH != 0) {\n', '            require(msg.value > (srcToken.isETH() ? desc.amount : 0), "Invalid msg.value");\n', '        } else {\n', '            require(msg.value == (srcToken.isETH() ? desc.amount : 0), "Invalid msg.value");\n', '        }\n', '\n', '        if (flags & _SHOULD_CLAIM != 0) {\n', '            require(!srcToken.isETH(), "Claim token is ETH");\n', '            _permit(srcToken, desc.amount, desc.permit);\n', '            srcToken.safeTransferFrom(msg.sender, desc.srcReceiver, desc.amount);\n', '        }\n', '\n', '        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\n', '        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? srcToken.uniBalanceOf(msg.sender) : 0;\n', '        uint256 initialDstBalance = dstToken.uniBalanceOf(dstReceiver);\n', '\n', '        {\n', '            // solhint-disable-next-line avoid-low-level-calls\n', '            (bool success, bytes memory result) = address(caller).call{value: msg.value}(abi.encodePacked(caller.callBytes.selector, data));\n', '            if (!success) {\n', '                revert(RevertReasonParser.parse(result, "callBytes failed: "));\n', '            }\n', '        }\n', '\n', '        uint256 spentAmount = desc.amount;\n', '        returnAmount = dstToken.uniBalanceOf(dstReceiver).sub(initialDstBalance);\n', '\n', '        if (flags & _PARTIAL_FILL != 0) {\n', '            spentAmount = initialSrcBalance.add(desc.amount).sub(srcToken.uniBalanceOf(msg.sender));\n', '            require(returnAmount.mul(desc.amount) >= desc.minReturnAmount.mul(spentAmount), "Return amount is not enough");\n', '        } else {\n', '            require(returnAmount >= desc.minReturnAmount, "Return amount is not enough");\n', '        }\n', '\n', '        emit Swapped(\n', '            msg.sender,\n', '            srcToken,\n', '            dstToken,\n', '            dstReceiver,\n', '            spentAmount,\n', '            returnAmount\n', '        );\n', '\n', '        gasLeft = gasleft();\n', '    }\n', '\n', '    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\n', '        token.uniTransfer(msg.sender, amount);\n', '    }\n', '\n', '    function destroy() external onlyOwner {\n', '        selfdestruct(msg.sender);\n', '    }\n', '}']