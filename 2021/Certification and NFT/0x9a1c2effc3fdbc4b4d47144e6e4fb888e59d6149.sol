['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity  ^0.7.6;\n', '\n', 'interface IERC20 {\n', ' \n', '    modifier onlyPayloadSize(uint numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   *  Public functions\n', '   */\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /** \n', '   *  Events\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Burn(address indexed from, uint256 value);\n', '}\n', '\n', ' abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '  contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '  /*\n', '  * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '  * Functions for owner\n', '  * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '  */\n', '  \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '  }\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev   Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '    if (a == 0){\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b,"Calculation error");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256){\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0,"Calculation error");\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256){\n', '    require(b <= a,"Calculation error");\n', '    uint256 c = a - b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two unsigned integers, reverts on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256){\n', '    uint256 c = a + b;\n', '    require(c >= a,"Calculation error");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '   * reverts when dividing by zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256){\n', '    require(b != 0,"Calculation error");\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' */\n', 'contract StandardToken is IERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string  private _name;                          // Name of the token.\n', '  string  private _symbol;                        // symbol of the token.\n', '  uint8   private _decimal;                      // variable to maintain decimal precision of the token.\n', '  bool    private _stopped = false;               // state variable to check fail-safe for contract.\n', '  uint256 _totalSupply = 100000000000000000000000000;\n', '  bool crowdSaleStarted = false;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => uint256) _balances;\n', '\n', '  /** @dev Returns number of tokens owned by given address\n', '   * @param _owner Address of token owner\n', '   * @return Balance of owner\n', '   */\n', '\n', '    function balanceOf(address _owner) public view override returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '\n', "  /** @dev Transfers sender's tokens to a given address. Returns success\n", '   * @param _to Address of token receiver\n', '   * @param _value Number of tokens to transfer\n', '   * @return success Was transfer successful?\n', '   */\n', '\n', '    function transfer(address _to, uint256 _value) public override onlyPayloadSize(2) returns (bool success) {\n', '        if (_balances[msg.sender] >= _value && _value > 0 && _balances[_to].add(_value) > _balances[_to]) {\n', '            _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '            _balances[_to] = _balances[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /** @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '     * @param _from Address from where tokens are withdrawn\n', '     * @param _to Address to where tokens are sent\n', '     * @param _value Number of tokens to transfer\n', '     * @return Was transfer successful?\n', '     */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override onlyPayloadSize(3) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= _balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        _balances[_from] = _balances[_from].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2) returns (bool) {\n', '        require(_value == 0 || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\n', '        require(allowed[msg.sender][_spender] == _oldValue);\n', '        allowed[msg.sender][_spender] = _newValue;\n', '        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view override returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', ' /** \n', '   * @dev Internal function that burns an amount of the token of a given account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != address(0),"Invalid account");\n', '    require(value > 0, "Invalid Amount");\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /** \n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner {\n', '    _burn(msg.sender, _value);\n', '  }\n', '    /** \n', '   * @dev Internal function that burns an amount of the token of a given account.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnForCrowdsale(uint256 value) internal {\n', '    require(value > 0, "Invalid Amount");\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[owner()] = _balances[owner()].sub(value);\n', '    emit Transfer(owner(), address(0), value);\n', '  }\n', '  \n', '  /** \n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burnForCrowdsale(uint256 _value) public {\n', '    _burnForCrowdsale(_value);\n', '  }\n', '\n', '  /** \n', '   * @dev Set crowsales status.\n', '   * @param status status of crowdsale.\n', '   */ \n', '\n', '   function setCrowdSalesStatus(bool status) public {\n', '     crowdSaleStarted = status;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable { \n', ' \n', '  using SafeMath for uint256;\n', '  uint256 constant CUSTOM_GASLIMIT = 150000;\n', '\n', '  //Crowdsale Token Values\n', '  uint256 public hardCap = 5500000000000000000000;\n', '  uint256 public softCap = 200000000000000000000; \n', '    uint256 public tokensForCrowdSale = 14850000000000000000000000;\n', '  \n', '  uint256 public crowdSaleTokenSold = 0; \n', '  \n', '  //Sale minimum maximum values\n', '  uint256 public minimumTokensInCrowdSale = 0;\n', '  uint256 public MaximumTokensInCrowdSale = 80000000000000000000000;\n', '\n', '   //tokens per ETH in each sale \n', '  uint256 public crowdSaleTokensPerETH = 3200;\n', '  \n', '  uint256 userNum = 0;\n', '\n', '  struct tokenInfo {\n', '    address beneficiary;\n', '    uint256 tokens;\n', '  }\n', '\n', 'mapping (uint256 => tokenInfo) public tokenBook;\n', '\n', '  // Address where funds are collected\n', '  address payable wallet = payable(0xd09eCD04f035a0A07a2F16cf442d9fc37692cdb8);\n', '\n', '  address public tokenContractAddress = address(0xa6630B22974F908a98a8139CB12Ec2EbABfbe9D4);\n', '\n', '  bool public crowdSaleStarted = false;\n', '  uint256 public totalRaisedInETH;\n', '  StandardToken token = StandardToken(tokenContractAddress);\n', '  enum Stages {CrowdSaleNotStarted, Pause, CrowdSaleStart, CrowdSaleEnd}\n', '\n', '  Stages currentStage;\n', '  Stages previousStage;\n', '  bool public Paused;\n', '   \n', '  \n', '   modifier CrowdsaleStarted(){\n', '      require(crowdSaleStarted, "crowdsale not started yet");\n', '      _;\n', '   }\n', ' \n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor(){\n', '        currentStage = Stages.CrowdSaleNotStarted;\n', '    }\n', '    \n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    receive () external payable {\n', '\n', '        buyTokens(msg.sender); \n', '\n', '    }\n', '\n', '    /**\n', '   * @dev Function for setting token price by owner\n', '   * @param _crowdSaleTokensPerETH token price\n', '   */\n', '  function setCrowdSaleTokenPrice(uint256 _crowdSaleTokensPerETH) public onlyOwner returns(bool){\n', '    require(_crowdSaleTokensPerETH > 0, "Invalid Price");\n', '    crowdSaleTokensPerETH = _crowdSaleTokensPerETH;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to set minimum tokens\n', '   * @param value to set the new min value\n', '   */\n', '  function setMinTokensInCrowdSale(uint256 value) public onlyOwner returns(bool){\n', '    require(value > 0,"Invalid Value");\n', '    minimumTokensInCrowdSale = value;\n', '    return true;\n', '  }\n', '\n', '  \n', '  /**\n', '   * @dev Function to set maximum tokens\n', '   * @param value to set the new max value\n', '   */\n', '  function setMaxTokensInCrowdSale(uint256 value) public onlyOwner returns(bool){\n', '    require(value > 0,"Invalid Value");\n', '    MaximumTokensInCrowdSale = value;\n', '    return true;\n', '  }\n', '\n', '    /**\n', '    * @dev calling this function will pause the sale\n', '    */\n', '\n', '    function pause() public onlyOwner {\n', '      require(Paused == false);\n', '      require(crowdSaleStarted == true);\n', '      previousStage=currentStage;\n', '      currentStage=Stages.Pause;\n', '      Paused = true;\n', '    }\n', '  \n', '    function restartSale() public onlyOwner {\n', '      require(currentStage == Stages.Pause);\n', '      currentStage=previousStage;\n', '      Paused = false;\n', '    }\n', '\n', '    function startCrowdSale() public onlyOwner {\n', '    require(!crowdSaleStarted, "Crowdsale already started");\n', '      crowdSaleStarted = true;\n', '      currentStage = Stages.CrowdSaleStart;\n', '      token.setCrowdSalesStatus(true);\n', '    }\n', '\n', '    function endCrowdSale() public onlyOwner{\n', '    require(currentStage == Stages.CrowdSaleStart, "Crowd sale not started");\n', '    currentStage = Stages.CrowdSaleEnd;\n', '    for(uint256 i=0; i < userNum; i++){\n', '    token.transferFrom(owner(), tokenBook[i].beneficiary, tokenBook[i].tokens);\n', '    tokenBook[i].tokens = 0;\n', '    }\n', '    userNum = 0;\n', '    uint256 remainingTokens = tokensForCrowdSale.sub(crowdSaleTokenSold);\n', '    token.burnForCrowdsale(remainingTokens);\n', '    crowdSaleStarted = false;\n', '    token.setCrowdSalesStatus(false);\n', '    }\n', '\n', '\n', '    function getStage() public view returns (string memory) {\n', "    if (currentStage == Stages.CrowdSaleStart) return 'Crowd Sale Start';\n", "    else if (currentStage == Stages.CrowdSaleEnd) return 'Crowd Sale End';\n", "    else if (currentStage == Stages.Pause) return 'paused';\n", "    else if (currentStage == Stages.CrowdSaleNotStarted) return 'CrowdSale Not Started';\n", "    return 'Not Found';    \n", '    }\n', '    \n', '\n', '   /**\n', '   * @param beneficiary Address performing the token purchase\n', '   */\n', '   function buyTokens(address beneficiary) CrowdsaleStarted public payable {\n', '    require(Paused != true);\n', '    uint256 ETHAmount = msg.value;\n', '    require(ETHAmount != 0);    \n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(ETHAmount);\n', '    _preValidatePurchase(tokens);\n', '    uint256 userId = userNum;\n', '    tokenBook[userId] = tokenInfo(beneficiary, tokens);\n', '    userNum++;\n', '    _validateCapLimits(ETHAmount);\n', '    wallet.transfer(msg.value);\n', '    if (currentStage == Stages.CrowdSaleStart){\n', '    crowdSaleTokenSold = crowdSaleTokenSold + tokens;   \n', '    }\n', '    emit TokenPurchase(msg.sender, beneficiary, ETHAmount, tokens);\n', '   }\n', '  \n', '   /**\n', '   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _ETH Value in ETH involved in the purchase\n', '   */\n', '   function _preValidatePurchase(uint256 _ETH) internal view { \n', '\n', '        require(_ETH >= minimumTokensInCrowdSale);\n', '        require(_ETH <= MaximumTokensInCrowdSale);\n', '\n', '      }\n', '    \n', '    /**\n', '    * @dev Validation of the capped restrictions.\n', '    * @param _ETH ETH amount\n', '    */\n', '\n', '    function _validateCapLimits(uint256 _ETH) internal {\n', '     \n', '      totalRaisedInETH = totalRaisedInETH.add(_ETH);\n', '      require(totalRaisedInETH <= hardCap);\n', '   }\n', '  \n', '\n', '  /**\n', '   * @param _ETH Value in ETH to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _ETH\n', '   */\n', '    function _getTokenAmount(uint256 _ETH) CrowdsaleStarted internal view returns (uint256) {\n', '      uint256 tokens;\n', '      if (currentStage == Stages.CrowdSaleStart) {\n', '         tokens = _ETH.mul(crowdSaleTokensPerETH);\n', '      }\n', '      return tokens;\n', '    }\n', '    \n', '\n', '    function isSoftCapReached() public view returns(bool){\n', '        if(totalRaisedInETH >= softCap){\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '}']