['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: src/UniswapV2Library.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: src/FullMath.sol\n', 'pragma solidity >=0.6.0;\n', '\n', '// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n', '// license is CC-BY-4.0\n', 'library FullMath {\n', '    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n', '        uint256 mm = mulmod(x, y, uint256(-1));\n', '        l = x * y;\n', '        h = mm - l;\n', '        if (mm < l) h -= 1;\n', '    }\n', '\n', '    function fullDiv(\n', '        uint256 l,\n', '        uint256 h,\n', '        uint256 d\n', '    ) private pure returns (uint256) {\n', '        uint256 pow2 = d & -d;\n', '        d /= pow2;\n', '        l /= pow2;\n', '        l += h * ((-pow2) / pow2 + 1);\n', '        uint256 r = 1;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        return l * r;\n', '    }\n', '\n', '    function mulDiv(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 d\n', '    ) internal pure returns (uint256) {\n', '        (uint256 l, uint256 h) = fullMul(x, y);\n', '\n', '        uint256 mm = mulmod(x, y, d);\n', '        if (mm > l) h -= 1;\n', '        l -= mm;\n', '\n', '        if (h == 0) return l / d;\n', '\n', "        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n", '        return fullDiv(l, h, d);\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', '// File: [email\xa0protected]/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: [email\xa0protected]/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: [email\xa0protected]/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: [email\xa0protected]/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: src/LiquidityManager.sol\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2 ;\n', '\n', '//import {IERC20} from "../[email\xa0protected]/contracts/token/ERC20/IERC20.sol";\n', '\n', '\n', '//import {Babylonian} from "@uniswap/lib/contracts/libraries/Babylonian.sol";\n', '\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function mint(address to, uint256 amount) external;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LiquidityManager is ReentrancyGuard {\n', '    //----------------------------------------\n', '    // Type definitions\n', '    //----------------------------------------\n', '    using SafeMath for uint256;\n', '    using FixedPoint for *;\n', '    using SafeERC20 for IERC20;\n', '    //----------------------------------------\n', '    // State variables\n', '    //----------------------------------------\n', '    uint112 private constant _MAX_UINT112 = uint112(-1);\n', '    uint256 private constant _UNISWAP_V2_DEADLINE_DELTA = 15 minutes;\n', '    // Limit slippage to 0.5%\n', '    //uint112 private constant _UNISWAP_V2_SLIPPAGE_LIMIT = 200;\n', '    uint112 public constant MAX_LOAN_PER_USER_PER_PAIR = 100 ether;\n', '    uint256 public constant CAPITAL = 40000 ether;\n', '    uint256 public constant REWARDS = 21600 ether;\n', '    mapping (address => address) _referrals;\n', '    mapping (address => address[]) public referrals;\n', '    mapping (address =>uint256) users;\n', '    uint256 public TotalLoans = 0;\n', '    address internal _uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    IUniswapV2Router01 private immutable _uniswapRouter;\n', '    address private immutable _WETH;\n', '    address  devTeam;\n', '    //mapping(address => mapping(address => uint256)) public loans;\n', '    IERC20 private immutable TOLL;\n', '    uint256 MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n', '    //user info\n', '     struct UserInfo {\n', '        uint256 last; \n', '        uint256 loan; \n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '    }\n', '    // Info of each pool.\n', '    struct PoolInfo {    // Address of LP token contract.\n', '        uint256 allocPoint;         // How many allocation points assigned to this pool. ERC20s to distribute per block.\n', '        uint256 lastRewardBlock;    // Last block number that ERC20s distribution occurs.\n', '        uint256 accTOLLPerShare;\n', '        uint256 total;\n', '        bool isPool ; // Accumulated ERC20s per share, times 1e36.\n', '    }\n', "    // The total amount of ERC20 that's paid out as reward.\n", '    uint256 public paidOut = 0;\n', '    // ERC20 tokens rewarded per block.\n', '    uint256 public rewardPerBlock = 40000000000000000; // 0.02TOLL\n', '    // Info of each pool.\n', '    mapping(address => PoolInfo) public poolInfo;\n', '    address[] public poolList;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (address => mapping (address => UserInfo)) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when farming starts.\n', '    uint256 public startBlock;\n', '    // The block number when farming ends.\n', '    uint256 public endBlock;\n', '    bool public started;\n', '    event Deposit(address indexed user, address indexed token, uint256 amount);\n', '    event Repaid(address indexed user, address indexed lpToken, uint256 amount);\n', '    event Withdraw(address indexed user, address indexed token, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, address indexed token, uint256 amount);\n', '    event referralEvent(address indexed ref, address indexed user);\n', '    event referralPayout(address indexed ref, address indexed user, uint256 amt);\n', '     \n', '\n', '    //----------------------------------------\n', '    // Constructor\n', '    //----------------------------------------\n', '    constructor( IERC20 toll) public {\n', '        IUniswapV2Router01 uniswapRouter =  IUniswapV2Router01(_uniswapRouterAddress);\n', '        _WETH = uniswapRouter.WETH();\n', '        _uniswapRouter = uniswapRouter;\n', '        TOLL = toll;\n', '        devTeam = msg.sender;\n', '    }\n', '\n', '     modifier onlyDev() {\n', '        require(devTeam == msg.sender, "Only Devs");\n', '        _;\n', '    }\n', '\n', '    //set the governance address\n', '    function start() public {\n', '        require(!started, "Already Started");\n', '        TOLL.mint(address(this), CAPITAL.add(REWARDS));\n', '        TOLL.approve(address(_uniswapRouter), MAX_INT);\n', '        endBlock = block.number.add(REWARDS.div(rewardPerBlock));\n', '        startBlock = block.number;\n', '        started = true;\n', '    }\n', '\n', '    // Number of LP pools\n', '    function poolLength() external view returns (uint256) {\n', '        return poolList.length;\n', '    }\n', '    \n', '     // Number of LP pools\n', '    function pools() external view returns (address[] memory _pools ) {\n', '        return poolList;\n', '    }\n', '\n', '\n', '    function isPool(address poolAddress) public view returns(bool isAPool) {\n', '      return poolInfo[poolAddress].isPool;\n', '  }\n', '    \n', '    // Add a new lp to the pool using a token address.\n', '    // DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function addByToken(uint256 _allocPoint, address _token, bool _withUpdate) public onlyDev{\n', '        require(msg.sender == devTeam , "Only DevTeams");\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        address lpTokenAddress = getUniswapPair(_token);\n', '        PoolInfo storage lpPool =  poolInfo[lpTokenAddress];\n', '        if(lpPool.isPool){\n', '            totalAllocPoint = totalAllocPoint.sub(lpPool.allocPoint).add(_allocPoint);\n', '            lpPool.allocPoint = _allocPoint;\n', '        }else{\n', '            IERC20(_token).approve(address(_uniswapRouter), MAX_INT);\n', '            IERC20(lpTokenAddress).approve(address(_uniswapRouter), MAX_INT);\n', '            totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '            lpPool.allocPoint = _allocPoint;\n', '            lpPool.lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '            lpPool.isPool = true;\n', '            poolList.push(lpTokenAddress);\n', '        }\n', '    }\n', '    \n', '    // View function to see pending TOLL rewards for a user.\n', '    function pending(address poolAddress, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[poolAddress];\n', '        UserInfo storage user = userInfo[poolAddress][_user];\n', '        if(!pool.isPool) return 0;\n', '        uint256 accTOLLPerShare = pool.accTOLLPerShare;\n', '        uint256 lpSupply = IERC20(poolAddress).balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n', '            uint256 nrOfBlocks = lastBlock.sub(pool.lastRewardBlock);\n', '            uint256 tollReward = nrOfBlocks.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '            accTOLLPerShare = accTOLLPerShare.add(tollReward.mul(1e36).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accTOLLPerShare).div(1e36).sub(user.rewardDebt);\n', '    }\n', '\n', '    // View function for total reward the farm has yet to pay out.\n', '    function totalPending() external view returns (uint256) {\n', '        if (block.number <= startBlock) {\n', '            return 0;\n', '        }\n', '        uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n', '        return rewardPerBlock.mul(lastBlock - startBlock).sub(paidOut);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolList.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(poolList[pid]);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(address poolAddress) public {\n', '        PoolInfo storage pool = poolInfo[poolAddress];\n', '        require(pool.isPool, "No Pool") ;\n', '        uint256 lastBlock = block.number < endBlock ? block.number : endBlock;\n', '        if (lastBlock <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = IERC20(poolAddress).balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = lastBlock;\n', '            return;\n', '        }\n', '\n', '        uint256 nrOfBlocks = lastBlock.sub(pool.lastRewardBlock);\n', '        uint256 tollReward = nrOfBlocks.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '        pool.accTOLLPerShare = pool.accTOLLPerShare.add(tollReward.mul(1e36).div(lpSupply));\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '\n', '    // Deposit ERC20 tokens to borrow LP and Farm.\n', '    function payLoan(address poolAddress, uint256 tollAmount) public {\n', '        UserInfo storage user = userInfo[poolAddress][msg.sender];\n', '        if(tollAmount > user.loan) tollAmount = user.loan;\n', '        user.loan = user.loan.sub(tollAmount);\n', '        TOLL.transferFrom(msg.sender, address(this), tollAmount);\n', '        emit Repaid(msg.sender,poolAddress,tollAmount);\n', '    }\n', '    \n', '        // Deposit ERC20 tokens to borrow LP and Farm.\n', '    function borrowTollForERC20Farm(address token, uint256 tokenAmount , address _ref) public {\n', '        saveReferral(_ref);\n', '        ( uint256 liquidity, address poolAddress) =  depositTokenLiquidity( token, tokenAmount);\n', '        updatePool(poolAddress);\n', '        PoolInfo storage pool = poolInfo[poolAddress];\n', '        UserInfo storage user = userInfo[poolAddress][msg.sender];\n', '        if (user.amount > 0) {\n', '            uint256 pendingAmount = user.amount.mul(pool.accTOLLPerShare).div(1e36).sub(user.rewardDebt);\n', '            tollTransfer(msg.sender, pendingAmount);\n', '        }\n', '        pool.total =  pool.total.add(tokenAmount);\n', '        user.amount = user.amount.add(liquidity);\n', '        user.last = now;\n', '        user.rewardDebt = user.amount.mul(pool.accTOLLPerShare).div(1e36);\n', '        emit Deposit(msg.sender, poolAddress, liquidity);\n', '    }\n', '\n', '    // Deposit ETH to borrow LP and Farm.\n', '    function borrowTollForETHFarm( address _ref) public payable {\n', '        require(msg.value > 0, "Please Send ETH to Farm ETH");\n', '        borrowTollForERC20Farm(_WETH, msg.value, _ref);\n', '    }\n', '    \n', '    \n', '    function  saveReferral(address _ref) internal returns (bool) {\n', '        if( users[msg.sender] == 1 || _ref == address(0) || _ref == address(this)) return false;\n', '        _referrals[msg.sender] = _ref;\n', '        referrals[_ref].push(msg.sender);\n', '        users[msg.sender] = 1;\n', '        emit referralEvent(_ref, msg.sender);\n', '        return true;\n', '    }\n', '    \n', '    function getReferral(address _ref) public view returns( address[] memory refs){\n', '        return  referrals[_ref];\n', '    }\n', '    \n', '    // Withdraw LP rewards from Farm.\n', '    function rewards( address poolAddress) public {\n', '        updatePool(poolAddress);\n', '        PoolInfo memory pool = poolInfo[poolAddress];\n', '        UserInfo storage user = userInfo[poolAddress][msg.sender];\n', '        require(now > user.last.add( 1 days),"Rewards are available Once a day");\n', '        user.last = now;\n', '        uint256 pendingAmount = user.amount.mul(pool.accTOLLPerShare).div(1e36).sub(user.rewardDebt);\n', '        user.rewardDebt = user.amount.mul(pool.accTOLLPerShare).div(1e36);\n', '        emit Withdraw(msg.sender, poolAddress, user.amount);\n', '        if(user.loan >  pendingAmount.div(2)){\n', '             user.loan =  user.loan.sub(pendingAmount.div(2));\n', '             tollTransfer(msg.sender, pendingAmount.div(2));\n', '        }else{ // loan can paid in full by half the reward\n', '             user.loan =  0;\n', '             tollTransfer(msg.sender, pendingAmount.sub(user.loan));\n', '        }\n', '    }\n', '\n', '\n', '   // Withdraw LP tokens from Farm.\n', '    function withdraw( address poolAddress, uint256 _amount) public {\n', '        updatePool(poolAddress);\n', '        PoolInfo storage pool = poolInfo[poolAddress];\n', '        UserInfo storage user = userInfo[poolAddress][msg.sender];\n', '        require(user.amount >= _amount, "Can\'t withdraw more than deposit");\n', '        uint256 pendingAmount = user.amount.mul(pool.accTOLLPerShare).div(1e36).sub(user.rewardDebt);\n', '        if(pendingAmount > 0)  require(now > user.last.add( 1 days),"Withdraw available Once daily");\n', '        uint256 taken = withdrawLqdToken(poolAddress,  _amount ,pendingAmount);\n', '        pool.total =  pool.total.sub(taken);\n', '        user.amount = user.amount.sub(_amount);\n', '        user.last = now;\n', '        user.rewardDebt = user.amount.mul(pool.accTOLLPerShare).div(1e36);\n', '        emit Withdraw(msg.sender, poolAddress, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(address poolAddress) public {\n', '        //PoolInfo storage pool = poolInfo[poolAddress];\n', '        UserInfo storage user = userInfo[poolAddress][msg.sender];\n', '        uint256 taken = withdrawLqdToken(poolAddress,  user.amount,0);\n', '        poolInfo[poolAddress].total =  poolInfo[poolAddress].total.sub(taken);\n', '        emit EmergencyWithdraw(msg.sender, poolAddress, user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    // Transfer ERC20 and update the required ERC20 to payout all rewards\n', '    function tollTransfer(address _to, uint256 _amount) internal {\n', '        TOLL.transfer(_to, _amount);\n', '        if(_referrals[_to] != address(0)){\n', '            uint256 amt = FullMath.mulDiv(50,_amount,1000 ); \n', '            TOLL.transfer(_referrals[_to], amt);\n', '            emit referralPayout( _referrals[_to], _to, amt);\n', '        }\n', '        paidOut += _amount;\n', '        \n', '    }\n', '    //----------------------------------------\n', '    // Receive function\n', '    //----------------------------------------\n', '    receive() external payable {}\n', '    //----------------------------------------\n', '    // Public views\n', '    //----------------------------------------\n', '\n', '    function getUniswapPair(address token) public view returns (address pair) {\n', '        return\n', '            address(\n', '                UniswapV2Library.pairFor(_uniswapRouter.factory(), address(TOLL), token)\n', '            );\n', '    }\n', '\n', '   \n', '\n', '    //----------------------------------------\n', '    // Internal functions\n', '    //----------------------------------------\n', '    /**\n', '     * @notice Add liquidity to a Uniswap pool\n', '     * @dev The larger the discrepancy between WETH <-> token pairs and the token <-> token pair,\n', '     *      the more ETH will be left behind after adding liquidity.\n', '     * @param token  for the Uniswap pair\n', '     * @param tokenAmount  Amount of Tokens  Provided\n', '     */\n', '    function depositTokenLiquidity(address token, uint256 tokenAmount) internal returns(uint256 , address){\n', '      \n', '        (uint112 amountTokenDesired, uint112 amountTollDesired) =\n', '            _getAmountDesiredAmounts(token, tokenAmount);//ok\n', '        address lpToken = getUniswapPair(token); //ok\n', '        require(isPool(lpToken), "No Pool") ;\n', '        canBorrow(lpToken, amountTollDesired);\n', '        // Approve tokens for transfer to Uniswap pair\n', '        if(token == _WETH){\n', '            IWETH(_WETH).deposit{value:msg.value}();\n', '        }else{\n', '            IERC20(token).transferFrom(msg.sender, address(this), tokenAmount);\n', '        }\n', '        (uint256 tollAmt,, uint256 liquidity) =\n', '            _uniswapRouter.addLiquidity(\n', '                address(TOLL),\n', '                token,\n', '                amountTollDesired,\n', '                amountTokenDesired,\n', '                0, // slippage unavoidable\n', '                0, // slippage unavoidable\n', '                address(this),\n', '                now + _UNISWAP_V2_DEADLINE_DELTA // solhint-disable-line not-rely-on-time\n', '            );\n', '        userInfo[lpToken][msg.sender].loan = tollAmt.add(userInfo[lpToken][msg.sender].loan);\n', '        TotalLoans = TotalLoans.add(tollAmt);\n', '        return (liquidity, lpToken);\n', '    }\n', '    \n', '    \n', '    function canBorrow(address lpTokenPair, uint256 tollAmount) internal view {\n', '        uint256 newLoanTotal = tollAmount.add(userInfo[lpTokenPair][msg.sender].loan);\n', '        uint256 _totalLoans = TotalLoans.add(tollAmount);\n', '        require(newLoanTotal <= MAX_LOAN_PER_USER_PER_PAIR, "Loan max Exceeded");\n', '        require(_totalLoans <= CAPITAL, "Reserve Low on Capital");\n', '    }\n', '    \n', '    \n', '    function withdrawLqdToken(address lpToken, uint256 liquidity, uint256 reward)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        require(liquidity <= _MAX_UINT112, "overflow");\n', '        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\n', '        address token0 = pair.token0();\n', '        address token1 = pair.token1();\n', '        (uint256 token0Amount, uint256 token1Amount) = _uniswapRouter.removeLiquidity(\n', '            token0,\n', '            token1,\n', '            liquidity,\n', '            0,  // slippage unavoidable\n', '            0, // slippage unavoidable\n', '            address(this),\n', '            now + _UNISWAP_V2_DEADLINE_DELTA // solhint-disable-line not-rely-on-time\n', '        );\n', '         ( address tokenAddrr , uint256 tokenAmount , uint256 amountToll ) = \n', '            token0 == address(TOLL) \n', '            ? (token1, token1Amount,token0Amount) \n', '            : (token0, token0Amount,token1Amount);\n', '            \n', '        UserInfo storage user = userInfo[lpToken][msg.sender];\n', '        uint256 availablePay = amountToll.add(reward);\n', '        uint256 requiredPayBack = FullMath.mulDiv(liquidity, user.loan, user.amount);\n', '        uint256 withHoldToken = 0;\n', '        if(requiredPayBack > availablePay ){\n', '            uint256 requiredToll = requiredPayBack.sub(availablePay);\n', '            if(requiredToll > 1e9) // lets forgive anything less than one gwei\n', '            withHoldToken =_getAmountOutForUniswapV2(address(TOLL),tokenAddrr,requiredToll);\n', '        }\n', '        require(tokenAmount > withHoldToken, "TOLL Cant Cover Loan");\n', '        if(availablePay > user.loan ){\n', '            uint256 extraToll = availablePay.sub(user.loan);\n', '            TOLL.transfer(msg.sender, extraToll);\n', '        }\n', '        user.loan = user.loan.sub(requiredPayBack);\n', '        sendToUser(tokenAmount.sub(withHoldToken) , tokenAddrr);\n', '        return tokenAmount;\n', '    } \n', '    \n', '    \n', '    function sendToUser(uint256 _amount , address _token)internal{\n', '        if(_token == _WETH){\n', '            IWETH(_WETH).withdraw(_amount);\n', '            msg.sender.transfer(_amount);\n', '        }else{\n', '            IERC20(_token).transfer(msg.sender, _amount);\n', '        }\n', '    }\n', '    \n', '    function _withdrawLqd(address lpToken, uint256 liquidity, uint256 reward)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        require(liquidity <= _MAX_UINT112, "overflow");\n', '        IUniswapV2Pair pair = IUniswapV2Pair(lpToken);\n', '        address token0 = pair.token0();\n', '        address token1 = pair.token1();\n', '        (uint256 token0Amount, uint256 token1Amount) = _uniswapRouter.removeLiquidity(\n', '            token0,\n', '            token1,\n', '            liquidity,\n', '            0,  // slippage unavoidable\n', '            0, // slippage unavoidable\n', '            address(this),\n', '            now + _UNISWAP_V2_DEADLINE_DELTA // solhint-disable-line not-rely-on-time\n', '        );\n', '         ( address tokenAddrr , uint256 tokenAmount , uint256 amountToll ) = \n', '            token0 == address(TOLL) \n', '            ? (token1, token1Amount,token0Amount) \n', '            : (token0, token0Amount,token1Amount);\n', '            \n', '        UserInfo storage user = userInfo[lpToken][msg.sender];\n', '        uint256 availablePay = amountToll.add(reward);\n', '        uint256 requiredPayBack = FullMath.mulDiv(liquidity, user.loan, user.amount);\n', '        uint256 withHoldToken = 0;\n', '        if(requiredPayBack > availablePay ){\n', '            uint256 requiredToll = requiredPayBack.sub(availablePay);\n', '            if(requiredToll > 1e9) // lets forgive anything less than one gwei\n', '            withHoldToken =_getAmountOutForUniswapV2(address(TOLL),tokenAddrr,requiredToll);\n', '        }\n', '        require(tokenAmount > withHoldToken, "TOLL Cant Cover Loan");\n', '        if(availablePay > user.loan ){\n', '            uint256 extraToll = availablePay.sub(user.loan);\n', '            TOLL.transfer(msg.sender, extraToll);\n', '        }\n', '        user.loan = user.loan.sub(requiredPayBack);\n', '        IERC20(tokenAddrr).transfer(msg.sender, tokenAmount.sub(withHoldToken));\n', '        return tokenAmount;\n', '    } \n', '    \n', '\n', '    /**\n', '     * @notice Get the amount of toll user afford to add to a Uniswap v2 WETH pair\n', '     * @dev It was necessary to refactor this code out of `_addUniswapV2Liquidity` to avoid a\n', '     *      "Stack too deep" error.\n', '     * @param token The token paired with WETH\n', '     * @return The desired amount of WETH and tokens\n', '     */\n', '    function _getAmountDesiredAmounts(address token, uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint112, uint112)\n', '    {\n', '        // Get the toll needed for the provided ETH\n', '        uint256 amountToll = _getEquivalentToll(token, amount);\n', '        require(amount <= _MAX_UINT112, "overflow");\n', '        uint112 amountDesired = uint112(amount);\n', '        require(amountToll <= _MAX_UINT112, "overflow");\n', '        uint112 amountTollDesired = uint112(amountToll);\n', '        return (amountDesired, amountTollDesired);\n', '    }\n', '    /**\n', '     * @notice Get the amount of TOLL that is equivalent to the given amount of a token\n', '     * @param token The address of token\n', '     * @param tokenAmount The amount of tokens\n', '     * @return The equivalent amount TOLL, returns 0 if the token pair has no reserves\n', '     */\n', '    function _getEquivalentToll(address token, uint256 tokenAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        (uint256 tollReserve, uint256 tokenReserve) =\n', '            UniswapV2Library.getReserves(_uniswapRouter.factory(), address(TOLL), token);\n', '        if (tollReserve == 0 && tokenReserve == 0) {\n', '            return 0;\n', '        }\n', '        return _uniswapRouter.quote(tokenAmount, tokenReserve, tollReserve);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the amount of token B that can be swapped for the given amount of token A\n', '     * @param tokenA The address of token A\n', '     * @param tokenB The address of token B\n', '     * @param amountInA The amount of token A\n', '     * @return The amount of token B that can be swapped for token A\n', '     */\n', '    function _getAmountOutForUniswapV2(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountInA\n', '    ) public view returns (uint256) {\n', '        (uint256 reserveA, uint256 reserveB) =\n', '            UniswapV2Library.getReserves(_uniswapRouter.factory(), tokenA, tokenB);\n', '        return _uniswapRouter.getAmountOut(amountInA, reserveA, reserveB);\n', '    }\n', '  \n', '    /**\n', '     * @notice This contract should not hold TOKENS! this function will add any Token as Liquidity\n', '     **/\n', '    function liquifyTokenHoldings(address token) public {\n', '        if(token == _WETH && address(this).balance > 1 szabo ){\n', '            IWETH(_WETH).deposit{value:address(this).balance}();\n', '        } \n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        require(balance >  1 szabo, "Low Balance 4 Token" );\n', '         (uint112 amountTokenDesired, uint112 amountTollDesired) =\n', '            _getAmountDesiredAmounts(token, balance);\n', '        TOLL.mint(address(this), amountTollDesired);\n', '        // Approve tokens for transfer to Uniswap pair\n', '         _uniswapRouter.addLiquidity(\n', '                address(TOLL),\n', '                token,\n', '                amountTollDesired,\n', '                amountTokenDesired,\n', '                0,  // slippage unavoidable\n', '                0, // slippage unavoidable\n', '                address(devTeam),\n', '                now + _UNISWAP_V2_DEADLINE_DELTA // solhint-disable-line not-rely-on-time\n', '            );\n', '    }\n', '}']