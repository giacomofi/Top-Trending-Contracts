['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', '// File: contracts/access/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/access/Ownable.sol\n', '\n', '\n', '//pragma solidity ^0.6.0;\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/ExternalStub.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title Stub for BSC connection\n', ' * @dev Can be accessed by an authorized bridge/ValueHolder\n', ' */\n', '\n', 'contract ExternalStub is Ownable {\n', '    bool private initialized;\n', '\n', '    address public ValueHolder;\n', '\n', '    address public enterToken; //= DAI_ADDRESS;\n', '    uint256 private PoolValue;\n', '\n', '    event LogValueHolderUpdated(address Manager);\n', '\n', '    /**\n', '     * @dev main init function\n', '     */\n', '\n', '    function init(address _enterToken) external {\n', '        require(!initialized, "Initialized");\n', '        initialized = true;\n', '        Ownable.initialize(); // Do not forget this call!\n', '        _init(_enterToken);\n', '    }\n', '\n', '    /**\n', '     * @dev internal variable initialization\n', '     */\n', '    function _init(address _enterToken) internal {\n', '        enterToken = _enterToken;\n', '        ValueHolder = msg.sender;\n', '    }\n', '\n', '    /**\n', "     * @dev re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already.\n", '     * This method might help fixing the storage state.\n', '     */\n', '    function reInit(address _enterToken) external onlyOwner {\n', '        _init(_enterToken);\n', '    }\n', '\n', '    /**\n', '     * @dev this modifier is only for methods that should be called by ValueHolder contract\n', '     */\n', '    modifier onlyValueHolder() {\n', '        require(msg.sender == ValueHolder, "Not Value Holder");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new ValueHolder address\n', '     */\n', '    function setValueHolder(address _ValueHolder) external onlyOwner {\n', '        ValueHolder = _ValueHolder;\n', '        emit LogValueHolderUpdated(_ValueHolder);\n', '    }\n', '\n', '    /**\n', '     * @dev Main function to enter Compound supply/borrow position using the available [DAI] token balance\n', '     */\n', '    function addPosition() external pure {\n', '        revert("Stub");\n', '    }\n', '\n', '    /**\n', '     * @dev Main function to exit position - partially or completely\n', '     */\n', '    function exitPosition(uint256) external pure {\n', '        revert("Stub");\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total amount of enterToken value of the pool\n', '     */\n', '    function getTokenStaked() external view returns (uint256) {\n', '        return (PoolValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total value the Pool in [denominateTo] tokens [DAI?]\n', '     */\n', '\n', '    function getPoolValue(address) external view returns (uint256 totalValue) {\n', '        return (PoolValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total value the Pool in [denominateTo] tokens [DAI?]\n', '     */\n', '\n', '    function setPoolValue(uint256 _PoolValue) external onlyValueHolder {\n', '        PoolValue = _PoolValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Claim all available CRV from compound and convert to DAI as needed\n', '     */\n', '    function claimValue() external pure {\n', '        revert("Stub");\n', '    }\n', '}']