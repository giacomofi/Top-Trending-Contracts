['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/IStaking.sol\n', '\n', '/*\n', 'Staking interface\n', '\n', 'EIP-900 staking interface\n', '\n', 'https://github.com/gysr-io/core\n', '\n', 'h/t https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IStaking {\n', '    // events\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '\n', '    /**\n', '     * @notice stakes a certain amount of tokens, transferring this amount from\n', '     the user to the contract\n', '     * @param amount number of tokens to stake\n', '     */\n', '    function stake(uint256 amount, bytes calldata) external;\n', '\n', '    /**\n', '     * @notice stakes a certain amount of tokens for an address, transfering this\n', '     amount from the caller to the contract, on behalf of the specified address\n', '     * @param user beneficiary address\n', '     * @param amount number of tokens to stake\n', '     */\n', '    function stakeFor(\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata\n', '    ) external;\n', '\n', '    /**\n', '     * @notice unstakes a certain amount of tokens, returning these tokens\n', '     to the user\n', '     * @param amount number of tokens to unstake\n', '     */\n', '    function unstake(uint256 amount, bytes calldata) external;\n', '\n', '    /**\n', '     * @param addr the address of interest\n', '     * @return the current total of tokens staked for an address\n', '     */\n', '    function totalStakedFor(address addr) external view returns (uint256);\n', '\n', '    /**\n', '     * @return the current total amount of tokens staked by all users\n', '     */\n', '    function totalStaked() external view returns (uint256);\n', '\n', '    /**\n', '     * @return the staking token for this staking contract\n', '     */\n', '    function token() external view returns (address);\n', '\n', '    /**\n', '     * @return true if the staking contract support history\n', '     */\n', '    function supportsHistory() external pure returns (bool);\n', '}\n', '\n', '// File: contracts/IGeyser.sol\n', '\n', '/*\n', 'Geyser interface\n', '\n', 'This defines the core Geyser contract interface as an extension to the\n', 'standard IStaking interface\n', '\n', 'https://github.com/gysr-io/core\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @title Geyser interface\n', ' */\n', 'abstract contract IGeyser is IStaking, Ownable {\n', '    // events\n', '    event RewardsDistributed(address indexed user, uint256 amount);\n', '    event RewardsFunded(\n', '        uint256 amount,\n', '        uint256 duration,\n', '        uint256 start,\n', '        uint256 total\n', '    );\n', '    event RewardsUnlocked(uint256 amount, uint256 total);\n', '    event RewardsExpired(uint256 amount, uint256 duration, uint256 start);\n', '    event GysrSpent(address indexed user, uint256 amount);\n', '    event GysrWithdrawn(uint256 amount);\n', '\n', '    // IStaking\n', '    /**\n', '     * @notice no support for history\n', '     * @return false\n', '     */\n', '    function supportsHistory() external override pure returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    // IGeyser\n', '    /**\n', '     * @return staking token for this Geyser\n', '     */\n', '    function stakingToken() external virtual view returns (address);\n', '\n', '    /**\n', '     * @return reward token for this Geyser\n', '     */\n', '    function rewardToken() external virtual view returns (address);\n', '\n', '    /**\n', '     * @notice fund Geyser by locking up reward tokens for distribution\n', '     * @param amount number of reward tokens to lock up as funding\n', '     * @param duration period (seconds) over which funding will be unlocked\n', '     */\n', '    function fund(uint256 amount, uint256 duration) external virtual;\n', '\n', '    /**\n', '     * @notice fund Geyser by locking up reward tokens for future distribution\n', '     * @param amount number of reward tokens to lock up as funding\n', '     * @param duration period (seconds) over which funding will be unlocked\n', '     * @param start time (seconds) at which funding begins to unlock\n', '     */\n', '    function fund(\n', '        uint256 amount,\n', '        uint256 duration,\n', '        uint256 start\n', '    ) external virtual;\n', '\n', '    /**\n', '     * @notice withdraw GYSR tokens applied during unstaking\n', '     * @param amount number of GYSR to withdraw\n', '     */\n', '    function withdraw(uint256 amount) external virtual;\n', '\n', '    /**\n', '     * @notice unstake while applying GYSR token for boosted rewards\n', '     * @param amount number of tokens to unstake\n', '     * @param gysr number of GYSR tokens to apply for boost\n', '     */\n', '    function unstake(\n', '        uint256 amount,\n', '        uint256 gysr,\n', '        bytes calldata\n', '    ) external virtual;\n', '\n', '    /**\n', '     * @notice update accounting, unlock tokens, etc.\n', '     */\n', '    function update() external virtual;\n', '\n', '    /**\n', '     * @notice clean geyser, expire old fundings, etc.\n', '     */\n', '    function clean() external virtual;\n', '}\n', '\n', '// File: contracts/GeyserPool.sol\n', '\n', '/*\n', 'Geyser token pool\n', '\n', 'Simple contract to implement token pool of arbitrary ERC20 token.\n', 'This is owned and used by a parent Geyser\n', '\n', 'https://github.com/gysr-io/core\n', '\n', 'h/t https://github.com/ampleforth/token-geyser\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract GeyserPool is Ownable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public token;\n', '\n', '    constructor(address token_) public {\n', '        token = IERC20(token_);\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external onlyOwner {\n', '        token.safeTransfer(to, value);\n', '    }\n', '}\n', '\n', '// File: contracts/MathUtils.sol\n', '\n', '/*\n', 'Math utilities\n', '\n', 'This library implements various logarithmic math utilies which support\n', 'other contracts and specifically the GYSR multiplier calculation\n', '\n', 'https://github.com/gysr-io/core\n', '\n', 'h/t https://github.com/abdk-consulting/abdk-libraries-solidity\n', '\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library MathUtils {\n', '    /**\n', '     * Calculate binary logarithm of x.  Revert if x <= 0.\n', '     *\n', '     * @param x signed 64.64-bit fixed point number\n', '     * @return signed 64.64-bit fixed point number\n', '     */\n', '    function logbase2(int128 x) internal pure returns (int128) {\n', '        require(x > 0);\n', '\n', '        int256 msb = 0;\n', '        int256 xc = x;\n', '        if (xc >= 0x10000000000000000) {\n', '            xc >>= 64;\n', '            msb += 64;\n', '        }\n', '        if (xc >= 0x100000000) {\n', '            xc >>= 32;\n', '            msb += 32;\n', '        }\n', '        if (xc >= 0x10000) {\n', '            xc >>= 16;\n', '            msb += 16;\n', '        }\n', '        if (xc >= 0x100) {\n', '            xc >>= 8;\n', '            msb += 8;\n', '        }\n', '        if (xc >= 0x10) {\n', '            xc >>= 4;\n', '            msb += 4;\n', '        }\n', '        if (xc >= 0x4) {\n', '            xc >>= 2;\n', '            msb += 2;\n', '        }\n', '        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n', '\n', '        int256 result = (msb - 64) << 64;\n', '        uint256 ux = uint256(x) << (127 - msb);\n', '        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '            ux *= ux;\n', '            uint256 b = ux >> 255;\n', '            ux >>= 127 + b;\n', '            result += bit * int256(b);\n', '        }\n', '\n', '        return int128(result);\n', '    }\n', '\n', '    /**\n', '     * @notice calculate natural logarithm of x\n', '     * @dev magic constant comes from ln(2) * 2^128 -> hex\n', '     * @param x signed 64.64-bit fixed point number, require x > 0\n', '     * @return signed 64.64-bit fixed point number\n', '     */\n', '    function ln(int128 x) internal pure returns (int128) {\n', '        require(x > 0);\n', '\n', '        return\n', '            int128(\n', '                (uint256(logbase2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >>\n', '                    128\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @notice calculate logarithm base 10 of x\n', '     * @dev magic constant comes from log10(2) * 2^128 -> hex\n', '     * @param x signed 64.64-bit fixed point number, require x > 0\n', '     * @return signed 64.64-bit fixed point number\n', '     */\n', '    function logbase10(int128 x) internal pure returns (int128) {\n', '        require(x > 0);\n', '\n', '        return\n', '            int128(\n', '                (uint256(logbase2(x)) * 0x4d104d427de7fce20a6e420e02236748) >>\n', '                    128\n', '            );\n', '    }\n', '\n', '    // wrapper functions to allow testing\n', '    function testlogbase2(int128 x) public pure returns (int128) {\n', '        return logbase2(x);\n', '    }\n', '\n', '    function testlogbase10(int128 x) public pure returns (int128) {\n', '        return logbase10(x);\n', '    }\n', '}\n', '\n', '// File: contracts/Geyser.sol\n', '\n', '/*\n', 'Geyser\n', '\n', 'This implements the core Geyser contract, which allows for generalized\n', 'staking, yield farming, and token distribution. This also implements\n', 'the GYSR spending mechanic for boosted reward distribution.\n', '\n', 'https://github.com/gysr-io/core\n', '\n', 'h/t https://github.com/ampleforth/token-geyser\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @title Geyser\n', ' */\n', 'contract Geyser is IGeyser, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using MathUtils for int128;\n', '\n', '    // single stake by user\n', '    struct Stake {\n', '        uint256 shares;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    // summary of total user stake/shares\n', '    struct User {\n', '        uint256 shares;\n', '        uint256 shareSeconds;\n', '        uint256 lastUpdated;\n', '    }\n', '\n', '    // single funding/reward schedule\n', '    struct Funding {\n', '        uint256 amount;\n', '        uint256 shares;\n', '        uint256 unlocked;\n', '        uint256 lastUpdated;\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 duration;\n', '    }\n', '\n', '    // constants\n', '    uint256 public constant BONUS_DECIMALS = 18;\n', '    uint256 public constant INITIAL_SHARES_PER_TOKEN = 10**6;\n', '    uint256 public constant MAX_ACTIVE_FUNDINGS = 16;\n', '\n', '    // token pool fields\n', '    GeyserPool private immutable _stakingPool;\n', '    GeyserPool private immutable _unlockedPool;\n', '    GeyserPool private immutable _lockedPool;\n', '    Funding[] public fundings;\n', '\n', '    // user staking fields\n', '    mapping(address => User) public userTotals;\n', '    mapping(address => Stake[]) public userStakes;\n', '\n', '    // time bonus fields\n', '    uint256 public immutable bonusMin;\n', '    uint256 public immutable bonusMax;\n', '    uint256 public immutable bonusPeriod;\n', '\n', '    // global state fields\n', '    uint256 public totalLockedShares;\n', '    uint256 public totalStakingShares;\n', '    uint256 public totalRewards;\n', '    uint256 public totalGysrRewards;\n', '    uint256 public totalStakingShareSeconds;\n', '    uint256 public lastUpdated;\n', '\n', '    // gysr fields\n', '    IERC20 private immutable _gysr;\n', '\n', '    /**\n', '     * @param stakingToken_ the token that will be staked\n', '     * @param rewardToken_ the token distributed to users as they unstake\n', '     * @param bonusMin_ initial time bonus\n', '     * @param bonusMax_ maximum time bonus\n', '     * @param bonusPeriod_ period (in seconds) over which time bonus grows to max\n', '     * @param gysr_ address for GYSR token\n', '     */\n', '    constructor(\n', '        address stakingToken_,\n', '        address rewardToken_,\n', '        uint256 bonusMin_,\n', '        uint256 bonusMax_,\n', '        uint256 bonusPeriod_,\n', '        address gysr_\n', '    ) public {\n', '        require(\n', '            bonusMin_ <= bonusMax_,\n', '            "Geyser: initial time bonus greater than max"\n', '        );\n', '\n', '        _stakingPool = new GeyserPool(stakingToken_);\n', '        _unlockedPool = new GeyserPool(rewardToken_);\n', '        _lockedPool = new GeyserPool(rewardToken_);\n', '\n', '        bonusMin = bonusMin_;\n', '        bonusMax = bonusMax_;\n', '        bonusPeriod = bonusPeriod_;\n', '\n', '        _gysr = IERC20(gysr_);\n', '\n', '        lastUpdated = block.timestamp;\n', '    }\n', '\n', '    // IStaking\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     */\n', '    function stake(uint256 amount, bytes calldata) external override {\n', '        _stake(msg.sender, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     */\n', '    function stakeFor(\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata\n', '    ) external override {\n', '        _stake(msg.sender, user, amount);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     */\n', '    function unstake(uint256 amount, bytes calldata) external override {\n', '        _unstake(amount, 0);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     */\n', '    function totalStakedFor(address addr)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (totalStakingShares == 0) {\n', '            return 0;\n', '        }\n', '        return\n', '            totalStaked().mul(userTotals[addr].shares).div(totalStakingShares);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     */\n', '    function totalStaked() public override view returns (uint256) {\n', '        return _stakingPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IStaking\n', '     * @dev redundant with stakingToken() in order to implement IStaking (EIP-900)\n', '     */\n', '    function token() external override view returns (address) {\n', '        return address(_stakingPool.token());\n', '    }\n', '\n', '    // IGeyser\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function stakingToken() public override view returns (address) {\n', '        return address(_stakingPool.token());\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function rewardToken() public override view returns (address) {\n', '        return address(_unlockedPool.token());\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function fund(uint256 amount, uint256 duration) public override {\n', '        fund(amount, duration, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function fund(\n', '        uint256 amount,\n', '        uint256 duration,\n', '        uint256 start\n', '    ) public override onlyOwner {\n', '        // validate\n', '        require(amount > 0, "Geyser: funding amount is zero");\n', '        require(start >= block.timestamp, "Geyser: funding start is past");\n', '        require(\n', '            fundings.length < MAX_ACTIVE_FUNDINGS,\n', '            "Geyser: exceeds max active funding schedules"\n', '        );\n', '\n', '        // update bookkeeping\n', '        _update(msg.sender);\n', '\n', '        // mint shares at current rate\n', '        uint256 lockedTokens = totalLocked();\n', '        uint256 mintedLockedShares = (lockedTokens > 0)\n', '            ? totalLockedShares.mul(amount).div(lockedTokens)\n', '            : amount.mul(INITIAL_SHARES_PER_TOKEN);\n', '\n', '        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '        // create new funding\n', '        fundings.push(\n', '            Funding({\n', '                amount: amount,\n', '                shares: mintedLockedShares,\n', '                unlocked: 0,\n', '                lastUpdated: start,\n', '                start: start,\n', '                end: start.add(duration),\n', '                duration: duration\n', '            })\n', '        );\n', '\n', '        // do transfer of funding\n', '        _lockedPool.token().safeTransferFrom(\n', '            msg.sender,\n', '            address(_lockedPool),\n', '            amount\n', '        );\n', '        emit RewardsFunded(amount, duration, start, totalLocked());\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function withdraw(uint256 amount) external override onlyOwner {\n', '        require(amount > 0, "Geyser: withdraw amount is zero");\n', '        require(\n', '            amount <= _gysr.balanceOf(address(this)),\n', '            "Geyser: withdraw amount exceeds balance"\n', '        );\n', '        // do transfer\n', '        _gysr.safeTransfer(msg.sender, amount);\n', '\n', '        emit GysrWithdrawn(amount);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function unstake(\n', '        uint256 amount,\n', '        uint256 gysr,\n', '        bytes calldata\n', '    ) external override {\n', '        _unstake(amount, gysr);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function update() external override nonReentrant {\n', '        _update(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @inheritdoc IGeyser\n', '     */\n', '    function clean() external override onlyOwner {\n', '        // update bookkeeping\n', '        _update(msg.sender);\n', '\n', '        // check for stale funding schedules to expire\n', '        uint256 removed = 0;\n', '        uint256 originalSize = fundings.length;\n', '        for (uint256 i = 0; i < originalSize; i++) {\n', '            Funding storage funding = fundings[i.sub(removed)];\n', '            uint256 idx = i.sub(removed);\n', '\n', '            if (_unlockable(idx) == 0 && block.timestamp >= funding.end) {\n', '                emit RewardsExpired(\n', '                    funding.amount,\n', '                    funding.duration,\n', '                    funding.start\n', '                );\n', '\n', '                // remove at idx by copying last element here, then popping off last\n', "                // (we don't care about order)\n", '                fundings[idx] = fundings[fundings.length.sub(1)];\n', '                fundings.pop();\n', '                removed = removed.add(1);\n', '            }\n', '        }\n', '    }\n', '\n', '    // Geyser\n', '\n', '    /**\n', '     * @dev internal implementation of staking methods\n', '     * @param staker address to do deposit of staking tokens\n', '     * @param beneficiary address to gain credit for this stake operation\n', '     * @param amount number of staking tokens to deposit\n', '     */\n', '    function _stake(\n', '        address staker,\n', '        address beneficiary,\n', '        uint256 amount\n', '    ) private nonReentrant {\n', '        // validate\n', '        require(amount > 0, "Geyser: stake amount is zero");\n', '        require(\n', '            beneficiary != address(0),\n', '            "Geyser: beneficiary is zero address"\n', '        );\n', '\n', '        // mint staking shares at current rate\n', '        uint256 mintedStakingShares = (totalStakingShares > 0)\n', '            ? totalStakingShares.mul(amount).div(totalStaked())\n', '            : amount.mul(INITIAL_SHARES_PER_TOKEN);\n', '        require(mintedStakingShares > 0, "Geyser: stake amount too small");\n', '\n', '        // update bookkeeping\n', '        _update(beneficiary);\n', '\n', '        // update user staking info\n', '        User storage user = userTotals[beneficiary];\n', '        user.shares = user.shares.add(mintedStakingShares);\n', '        user.lastUpdated = block.timestamp;\n', '\n', '        userStakes[beneficiary].push(\n', '            Stake(mintedStakingShares, block.timestamp)\n', '        );\n', '\n', '        // add newly minted shares to global total\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '\n', '        // transactions\n', '        _stakingPool.token().safeTransferFrom(\n', '            staker,\n', '            address(_stakingPool),\n', '            amount\n', '        );\n', '\n', '        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), "");\n', '    }\n', '\n', '    /**\n', '     * @dev internal implementation of unstaking methods\n', '     * @param amount number of tokens to unstake\n', '     * @param gysr number of GYSR tokens applied to unstaking operation\n', '     * @return number of reward tokens distributed\n', '     */\n', '    function _unstake(uint256 amount, uint256 gysr)\n', '        private\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        // validate\n', '        require(amount > 0, "Geyser: unstake amount is zero");\n', '        require(\n', '            totalStakedFor(msg.sender) >= amount,\n', '            "Geyser: unstake amount exceeds balance"\n', '        );\n', '\n', '        // update bookkeeping\n', '        _update(msg.sender);\n', '\n', '        // do unstaking, first-in last-out, respecting time bonus\n', '        uint256 timeWeightedShareSeconds = _unstakeFirstInLastOut(amount);\n', '\n', '        // compute and apply GYSR token bonus\n', '        uint256 gysrWeightedShareSeconds = gysrBonus(gysr)\n', '            .mul(timeWeightedShareSeconds)\n', '            .div(10**BONUS_DECIMALS);\n', '\n', '        uint256 rewardAmount = totalUnlocked()\n', '            .mul(gysrWeightedShareSeconds)\n', '            .div(totalStakingShareSeconds.add(gysrWeightedShareSeconds));\n', '\n', '        // update global stats for distributions\n', '        if (gysr > 0) {\n', '            totalGysrRewards = totalGysrRewards.add(rewardAmount);\n', '        }\n', '        totalRewards = totalRewards.add(rewardAmount);\n', '\n', '        // transactions\n', '        _stakingPool.transfer(msg.sender, amount);\n', '        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), "");\n', '        if (rewardAmount > 0) {\n', '            _unlockedPool.transfer(msg.sender, rewardAmount);\n', '            emit RewardsDistributed(msg.sender, rewardAmount);\n', '        }\n', '        if (gysr > 0) {\n', '            _gysr.safeTransferFrom(msg.sender, address(this), gysr);\n', '            emit GysrSpent(msg.sender, gysr);\n', '        }\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev helper function to actually execute unstaking, first-in last-out, \n', '     while computing and applying time bonus. This function also updates\n', '     user and global totals for shares and share-seconds.\n', '     * @param amount number of staking tokens to withdraw\n', '     * @return time bonus weighted staking share seconds\n', '     */\n', '    function _unstakeFirstInLastOut(uint256 amount) private returns (uint256) {\n', '        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\n', '            totalStaked()\n', '        );\n', '        require(stakingSharesToBurn > 0, "Geyser: unstake amount too small");\n', '\n', '        // redeem from most recent stake and go backwards in time.\n', '        uint256 shareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 bonusWeightedShareSeconds = 0;\n', '        Stake[] storage stakes = userStakes[msg.sender];\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = stakes[stakes.length - 1];\n', '            uint256 stakeTime = block.timestamp.sub(lastStake.timestamp);\n', '\n', '            uint256 bonus = timeBonus(stakeTime);\n', '\n', '            if (lastStake.shares <= sharesLeftToBurn) {\n', '                // fully redeem a past stake\n', '                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\n', '                    lastStake.shares.mul(stakeTime).mul(bonus).div(\n', '                        10**BONUS_DECIMALS\n', '                    )\n', '                );\n', '                shareSecondsToBurn = shareSecondsToBurn.add(\n', '                    lastStake.shares.mul(stakeTime)\n', '                );\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.shares);\n', '                stakes.pop();\n', '            } else {\n', '                // partially redeem a past stake\n', '                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\n', '                    sharesLeftToBurn.mul(stakeTime).mul(bonus).div(\n', '                        10**BONUS_DECIMALS\n', '                    )\n', '                );\n', '                shareSecondsToBurn = shareSecondsToBurn.add(\n', '                    sharesLeftToBurn.mul(stakeTime)\n', '                );\n', '                lastStake.shares = lastStake.shares.sub(sharesLeftToBurn);\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        // update user totals\n', '        User storage user = userTotals[msg.sender];\n', '        user.shareSeconds = user.shareSeconds.sub(shareSecondsToBurn);\n', '        user.shares = user.shares.sub(stakingSharesToBurn);\n', '        user.lastUpdated = block.timestamp;\n', '\n', '        // update global totals\n', '        totalStakingShareSeconds = totalStakingShareSeconds.sub(\n', '            shareSecondsToBurn\n', '        );\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '\n', '        return bonusWeightedShareSeconds;\n', '    }\n', '\n', '    /**\n', '     * @dev internal implementation of update method\n', '     * @param addr address for user accounting update\n', '     */\n', '    function _update(address addr) private {\n', '        _unlockTokens();\n', '\n', '        // global accounting\n', '        uint256 deltaTotalShareSeconds = (block.timestamp.sub(lastUpdated)).mul(\n', '            totalStakingShares\n', '        );\n', '        totalStakingShareSeconds = totalStakingShareSeconds.add(\n', '            deltaTotalShareSeconds\n', '        );\n', '        lastUpdated = block.timestamp;\n', '\n', '        // user accounting\n', '        User storage user = userTotals[addr];\n', '        uint256 deltaUserShareSeconds = (block.timestamp.sub(user.lastUpdated))\n', '            .mul(user.shares);\n', '        user.shareSeconds = user.shareSeconds.add(deltaUserShareSeconds);\n', '        user.lastUpdated = block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev unlocks reward tokens based on funding schedules\n', '     */\n', '    function _unlockTokens() private {\n', '        uint256 tokensToUnlock = 0;\n', '        uint256 lockedTokens = totalLocked();\n', '\n', '        if (totalLockedShares == 0) {\n', '            // handle any leftover\n', '            tokensToUnlock = lockedTokens;\n', '        } else {\n', '            // normal case: unlock some shares from each funding schedule\n', '            uint256 sharesToUnlock = 0;\n', '            for (uint256 i = 0; i < fundings.length; i++) {\n', '                uint256 shares = _unlockable(i);\n', '                Funding storage funding = fundings[i];\n', '                if (shares > 0) {\n', '                    funding.unlocked = funding.unlocked.add(shares);\n', '                    funding.lastUpdated = block.timestamp;\n', '                    sharesToUnlock = sharesToUnlock.add(shares);\n', '                }\n', '            }\n', '            tokensToUnlock = sharesToUnlock.mul(lockedTokens).div(\n', '                totalLockedShares\n', '            );\n', '            totalLockedShares = totalLockedShares.sub(sharesToUnlock);\n', '        }\n', '\n', '        if (tokensToUnlock > 0) {\n', '            _lockedPool.transfer(address(_unlockedPool), tokensToUnlock);\n', '            emit RewardsUnlocked(tokensToUnlock, totalUnlocked());\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev helper function to compute updates to funding schedules\n', '     * @param idx index of the funding\n', '     * @return the number of unlockable shares\n', '     */\n', '    function _unlockable(uint256 idx) private view returns (uint256) {\n', '        Funding storage funding = fundings[idx];\n', '\n', '        // funding schedule is in future\n', '        if (block.timestamp < funding.start) {\n', '            return 0;\n', '        }\n', '        // empty\n', '        if (funding.unlocked >= funding.shares) {\n', '            return 0;\n', '        }\n', '        // handle zero-duration period or leftover dust from integer division\n', '        if (block.timestamp >= funding.end) {\n', '            return funding.shares.sub(funding.unlocked);\n', '        }\n', '\n', '        return\n', '            (block.timestamp.sub(funding.lastUpdated)).mul(funding.shares).div(\n', '                funding.duration\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @notice compute time bonus earned as a function of staking time\n', '     * @param time length of time for which the tokens have been staked\n', '     * @return bonus multiplier for time\n', '     */\n', '    function timeBonus(uint256 time) public view returns (uint256) {\n', '        if (time >= bonusPeriod) {\n', '            return uint256(10**BONUS_DECIMALS).add(bonusMax);\n', '        }\n', '\n', '        // linearly interpolate between bonus min and bonus max\n', '        uint256 bonus = bonusMin.add(\n', '            (bonusMax.sub(bonusMin)).mul(time).div(bonusPeriod)\n', '        );\n', '        return uint256(10**BONUS_DECIMALS).add(bonus);\n', '    }\n', '\n', '    /**\n', '     * @notice compute GYSR bonus as a function of usage ratio and GYSR spent\n', '     * @param gysr number of GYSR token applied to bonus\n', '     * @return multiplier value\n', '     */\n', '    function gysrBonus(uint256 gysr) public view returns (uint256) {\n', '        if (gysr == 0) {\n', '            return 10**BONUS_DECIMALS;\n', '        }\n', '        require(\n', '            gysr >= 10**BONUS_DECIMALS,\n', '            "Geyser: GYSR amount is between 0 and 1"\n', '        );\n', '\n', '        uint256 buffer = uint256(10**(BONUS_DECIMALS - 2)); // 0.01\n', '        uint256 r = ratio().add(buffer);\n', '        uint256 x = gysr.add(buffer);\n', '\n', '        return\n', '            uint256(10**BONUS_DECIMALS).add(\n', '                uint256(int128(x.mul(2**64).div(r)).logbase10())\n', '                    .mul(10**BONUS_DECIMALS)\n', '                    .div(2**64)\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @return portion of rewards which have been boosted by GYSR token\n', '     */\n', '    function ratio() public view returns (uint256) {\n', '        if (totalRewards == 0) {\n', '            return 0;\n', '        }\n', '        return totalGysrRewards.mul(10**BONUS_DECIMALS).div(totalRewards);\n', '    }\n', '\n', '    // Geyser -- informational functions\n', '\n', '    /**\n', '     * @return total number of locked reward tokens\n', '     */\n', '    function totalLocked() public view returns (uint256) {\n', '        return _lockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return total number of unlocked reward tokens\n', '     */\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return number of active funding schedules\n', '     */\n', '    function fundingCount() public view returns (uint256) {\n', '        return fundings.length;\n', '    }\n', '\n', '    /**\n', '     * @param addr address of interest\n', '     * @return number of active stakes for user\n', '     */\n', '    function stakeCount(address addr) public view returns (uint256) {\n', '        return userStakes[addr].length;\n', '    }\n', '\n', '    /**\n', '     * @notice preview estimated reward distribution for full unstake with no GYSR applied\n', '     * @return estimated reward\n', '     * @return estimated overall multiplier\n', '     * @return estimated raw user share seconds that would be burned\n', '     * @return estimated total unlocked rewards\n', '     */\n', '    function preview()\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return preview(msg.sender, totalStakedFor(msg.sender), 0);\n', '    }\n', '\n', '    /**\n', '     * @notice preview estimated reward distribution for unstaking\n', '     * @param addr address of interest for preview\n', '     * @param amount number of tokens that would be unstaked\n', '     * @param gysr number of GYSR tokens that would be applied\n', '     * @return estimated reward\n', '     * @return estimated overall multiplier\n', '     * @return estimated raw user share seconds that would be burned\n', '     * @return estimated total unlocked rewards\n', '     */\n', '    function preview(\n', '        address addr,\n', '        uint256 amount,\n', '        uint256 gysr\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        // compute expected updates to global totals\n', '        uint256 deltaUnlocked = 0;\n', '        if (totalLockedShares != 0) {\n', '            uint256 sharesToUnlock = 0;\n', '            for (uint256 i = 0; i < fundings.length; i++) {\n', '                sharesToUnlock = sharesToUnlock.add(_unlockable(i));\n', '            }\n', '            deltaUnlocked = sharesToUnlock.mul(totalLocked()).div(\n', '                totalLockedShares\n', '            );\n', '        }\n', '\n', '        // no need for unstaking/rewards computation\n', '        if (amount == 0) {\n', '            return (0, 0, 0, totalUnlocked().add(deltaUnlocked));\n', '        }\n', '\n', '        // check unstake amount\n', '        require(\n', '            amount <= totalStakedFor(addr),\n', '            "Geyser: preview amount exceeds balance"\n', '        );\n', '\n', '        // compute unstake amount in shares\n', '        uint256 shares = totalStakingShares.mul(amount).div(totalStaked());\n', '        require(shares > 0, "Geyser: preview amount too small");\n', '\n', '        uint256 rawShareSeconds = 0;\n', '        uint256 timeBonusShareSeconds = 0;\n', '\n', '        // compute first-in-last-out, time bonus weighted, share seconds\n', '        uint256 i = userStakes[addr].length.sub(1);\n', '        while (shares > 0) {\n', '            Stake storage s = userStakes[addr][i];\n', '            uint256 time = block.timestamp.sub(s.timestamp);\n', '\n', '            if (s.shares < shares) {\n', '                rawShareSeconds = rawShareSeconds.add(s.shares.mul(time));\n', '                timeBonusShareSeconds = timeBonusShareSeconds.add(\n', '                    s.shares.mul(time).mul(timeBonus(time)).div(\n', '                        10**BONUS_DECIMALS\n', '                    )\n', '                );\n', '                shares = shares.sub(s.shares);\n', '            } else {\n', '                rawShareSeconds = rawShareSeconds.add(shares.mul(time));\n', '                timeBonusShareSeconds = timeBonusShareSeconds.add(\n', '                    shares.mul(time).mul(timeBonus(time)).div(\n', '                        10**BONUS_DECIMALS\n', '                    )\n', '                );\n', '                break;\n', '            }\n', '            // this will throw on underflow\n', '            i = i.sub(1);\n', '        }\n', '\n', '        // apply gysr bonus\n', '        uint256 gysrBonusShareSeconds = gysrBonus(gysr)\n', '            .mul(timeBonusShareSeconds)\n', '            .div(10**BONUS_DECIMALS);\n', '\n', '        // compute rewards based on expected updates\n', '        uint256 expectedTotalShareSeconds = totalStakingShareSeconds\n', '            .add((block.timestamp.sub(lastUpdated)).mul(totalStakingShares))\n', '            .add(gysrBonusShareSeconds)\n', '            .sub(rawShareSeconds);\n', '\n', '        uint256 reward = (totalUnlocked().add(deltaUnlocked))\n', '            .mul(gysrBonusShareSeconds)\n', '            .div(expectedTotalShareSeconds);\n', '\n', '        // compute effective bonus\n', '        uint256 bonus = uint256(10**BONUS_DECIMALS)\n', '            .mul(gysrBonusShareSeconds)\n', '            .div(rawShareSeconds);\n', '\n', '        return (\n', '            reward,\n', '            bonus,\n', '            rawShareSeconds,\n', '            totalUnlocked().add(deltaUnlocked)\n', '        );\n', '    }\n', '}']