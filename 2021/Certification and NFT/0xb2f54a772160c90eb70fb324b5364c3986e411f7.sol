['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', '// File: contracts\\presto\\PrestoData.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct PrestoOperation {\n', '\n', '    address inputTokenAddress;\n', '    uint256 inputTokenAmount;\n', '\n', '    address ammPlugin;\n', '    address[] liquidityPoolAddresses;\n', '    address[] swapPath;\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '\n', '    address[] receivers;\n', '    uint256[] receiversPercentages;\n', '}\n', '\n', '// File: contracts\\presto\\IPresto.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IPresto {\n', '\n', '    function ONE_HUNDRED() external view returns (uint256);\n', '    function doubleProxy() external view returns (address);\n', '    function feePercentage() external view returns (uint256);\n', '\n', '    function feePercentageInfo() external view returns (uint256, address);\n', '\n', '    function setDoubleProxy(address _doubleProxy) external;\n', '\n', '    function setFeePercentage(uint256 _feePercentage) external;\n', '\n', '    function execute(PrestoOperation[] memory operations) external payable;\n', '}\n', '\n', '// File: contracts\\presto\\util\\IERC20.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts\\presto\\util\\DFOHub.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\AMMData.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct LiquidityPoolData {\n', '    address liquidityPoolAddress;\n', '    uint256 amount;\n', '    address tokenAddress;\n', '    bool amountIsLiquidityPool;\n', '    bool involvingETH;\n', '    address receiver;\n', '}\n', '\n', 'struct SwapData {\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '    address[] liquidityPoolAddresses;\n', '    address[] path;\n', '    address inputToken;\n', '    uint256 amount;\n', '    address receiver;\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\IAMM.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IAMM {\n', '\n', '    event NewLiquidityPoolAddress(address indexed);\n', '\n', '    function info() external view returns(string memory name, uint256 version);\n', '\n', '    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\n', '\n', '    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\n', '\n', '    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\n', '    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\n', '    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\n', '\n', '    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\n', '    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\n', '}\n', '\n', '// File: contracts\\presto\\Presto.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', '\n', '\n', '\n', 'contract Presto is IPresto {\n', '\n', '    uint256 public override constant ONE_HUNDRED = 1e18;\n', '\n', '    mapping(address => uint256) private _tokenIndex;\n', '    address[] private _tokensToTransfer;\n', '    uint256[] private _tokenAmounts;\n', '\n', '    address public override doubleProxy;\n', '    uint256 public override feePercentage;\n', '\n', '    constructor(address _doubleProxy, uint256 _feePercentage) {\n', '        doubleProxy = _doubleProxy;\n', '        feePercentage = _feePercentage;\n', '    }\n', '\n', '    modifier onlyDFO() {\n', '        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized.");\n', '        _;\n', '    }\n', '\n', '    function feePercentageInfo() public override view returns (uint256, address) {\n', '        return (feePercentage, IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDWalletAddress());\n', '    }\n', '\n', '    function setDoubleProxy(address _doubleProxy) public override onlyDFO {\n', '        doubleProxy = _doubleProxy;\n', '    }\n', '\n', '    function setFeePercentage(uint256 _feePercentage) public override onlyDFO {\n', '        feePercentage = _feePercentage;\n', '    }\n', '\n', '    function execute(PrestoOperation[] memory operations) public override payable {\n', '        _transferToMe(operations);\n', '        for(uint256 i = 0 ; i < operations.length; i++) {\n', '            PrestoOperation memory operation = operations[i];\n', '            if(operation.ammPlugin == address(0)) {\n', '                _transferTo(operation.inputTokenAddress, operation.inputTokenAmount, operation.receivers, operation.receiversPercentages);\n', '            } else if(operation.liquidityPoolAddresses.length == 0) {\n', '                _addLiquidity(operation);\n', '            } else {\n', '                _swap(operation);\n', '            }\n', '        }\n', '        _flushAndClear();\n', '    }\n', '\n', '    function _transferToMe(PrestoOperation[] memory operations) private {\n', '        _collectTokens(operations);\n', '        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\n', '            if(_tokensToTransfer[i] == address(0)) {\n', '                require(msg.value == _tokenAmounts[i], "Incorrect ETH value");\n', '            } else {\n', '                _safeTransferFrom(_tokensToTransfer[i], msg.sender, address(this), _tokenAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _collectTokens(PrestoOperation[] memory operations) private {\n', '        for(uint256 i = 0; i < operations.length; i++) {\n', '            PrestoOperation memory operation = operations[i];\n', '            if(operation.ammPlugin != address(0) && operation.liquidityPoolAddresses.length == 0) {\n', '                IAMM amm = IAMM(operation.ammPlugin);\n', '                (address ethereumAddress,,) = (amm.data());\n', '                (uint256[] memory amounts, address[] memory tokensAddresses) = amm.byLiquidityPoolAmount(operation.inputTokenAddress, operation.inputTokenAmount);\n', '                bool hasEth = false;\n', '                for(uint256 z = 0; z < tokensAddresses.length; z++) {\n', '                    if(tokensAddresses[z] == ethereumAddress) {\n', '                        hasEth = true;\n', '                    }\n', '                    _collectTokenData(operation.enterInETH && tokensAddresses[z] == ethereumAddress ? address(0) : tokensAddresses[z], amounts[z]);\n', '                }\n', '                require(!operation.enterInETH || hasEth, "Wrong use of enterInETH in addLiquidity");\n', '            } else {\n', '                _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount) private {\n', '        if(inputTokenAmount == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 position = _tokenIndex[inputTokenAddress];\n', '\n', '        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\n', '            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\n', '            _tokensToTransfer.push(inputTokenAddress);\n', '            _tokenAmounts.push(0);\n', '        }\n', '        _tokenAmounts[position] = _tokenAmounts[position] + inputTokenAmount;\n', '    }\n', '\n', '    function _flushAndClear() private {\n', '        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\n', '            _safeTransfer(_tokensToTransfer[i], msg.sender, _balanceOf(_tokensToTransfer[i]));\n', '            delete _tokenIndex[_tokensToTransfer[i]];\n', '        }\n', '        delete _tokensToTransfer;\n', '        delete _tokenAmounts;\n', '    }\n', '\n', '    function _balanceOf(address tokenAddress) private view returns(uint256) {\n', '        if(tokenAddress == address(0)) {\n', '            return address(this).balance;\n', '        }\n', '        return IERC20(tokenAddress).balanceOf(address(this));\n', '    }\n', '\n', '    function _addLiquidity(PrestoOperation memory operation) private {\n', '        LiquidityPoolData memory liquidityPoolData = LiquidityPoolData(\n', '            operation.inputTokenAddress,\n', '            operation.inputTokenAmount,\n', '            address(0),\n', '            true,\n', '            operation.enterInETH,\n', '            address(this)\n', '        );\n', '        (uint256 amountOut,,) = IAMM(operation.ammPlugin).addLiquidity(liquidityPoolData);\n', '        _transferTo(operation.inputTokenAddress, amountOut, operation.receivers, operation.receiversPercentages);\n', '    }\n', '\n', '    function _swap(PrestoOperation memory operation) private {\n', '\n', '        (address ethereumAddress,,) = IAMM(operation.ammPlugin).data();\n', '\n', '        if(operation.exitInETH) {\n', '            operation.swapPath[operation.swapPath.length - 1] = ethereumAddress;\n', '        }\n', '\n', '        address outputToken = operation.swapPath[operation.swapPath.length - 1];\n', '\n', '        SwapData memory swapData = SwapData(\n', '            operation.enterInETH,\n', '            operation.exitInETH,\n', '            operation.liquidityPoolAddresses,\n', '            operation.swapPath,\n', '            operation.enterInETH ? ethereumAddress : operation.inputTokenAddress,\n', '            operation.inputTokenAmount,\n', '            address(this)\n', '        );\n', '\n', '        if(swapData.inputToken != address(0) && !swapData.enterInETH) {\n', '            _safeApprove(swapData.inputToken, operation.ammPlugin, swapData.amount);\n', '        }\n', '\n', '        uint256 amountOut;\n', '        if(swapData.enterInETH) {\n', '            amountOut = IAMM(operation.ammPlugin).swapLiquidity{value : operation.inputTokenAmount}(swapData);\n', '        } else {\n', '            amountOut = IAMM(operation.ammPlugin).swapLiquidity(swapData);\n', '        }\n', '        _transferTo(operation.exitInETH ? address(0) : outputToken, amountOut, operation.receivers, operation.receiversPercentages);\n', '    }\n', '\n', '    function _calculateRewardPercentage(uint256 totalAmount, uint256 rewardPercentage) private pure returns (uint256) {\n', '        return (totalAmount * ((rewardPercentage * 1e18) / ONE_HUNDRED)) / 1e18;\n', '    }\n', '\n', '    function _transferTo(address erc20TokenAddress, uint256 totalAmount, address[] memory receivers, uint256[] memory receiversPercentages) private {\n', '        uint256 availableAmount = totalAmount;\n', '\n', '        (uint256 dfoFeePercentage, address dfoWallet) = feePercentageInfo();\n', '        uint256 currentPartialAmount = dfoFeePercentage == 0 || dfoWallet == address(0) ? 0 : _calculateRewardPercentage(availableAmount, dfoFeePercentage);\n', '        _safeTransfer(erc20TokenAddress, dfoWallet, currentPartialAmount);\n', '        availableAmount -= currentPartialAmount;\n', '\n', '        uint256 stillAvailableAmount = availableAmount;\n', '\n', '        for(uint256 i = 0; i < receivers.length - 1; i++) {\n', '            _safeTransfer(erc20TokenAddress, receivers[i], currentPartialAmount = _calculateRewardPercentage(stillAvailableAmount, receiversPercentages[i]));\n', '            availableAmount -= currentPartialAmount;\n', '        }\n', '\n', '        _safeTransfer(erc20TokenAddress, receivers[receivers.length - 1], availableAmount);\n', '    }\n', '\n', '    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\n", '    }\n', '\n', '    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\n', '        if(value == 0) {\n', '            return;\n', '        }\n', '        if(erc20TokenAddress == address(0)) {\n', '            (bool result,) = to.call{value:value}("");\n', '            require(result, "ETH transfer failed");\n', '            return;\n', '        }\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\n", '    }\n', '\n', '    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\n", '    }\n', '\n', '    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\n', '        assembly {\n', '            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\n', '            let size := returndatasize()\n', '            returnData := mload(0x40)\n', '            mstore(returnData, size)\n', '            let returnDataPayloadStart := add(returnData, 0x20)\n', '            returndatacopy(returnDataPayloadStart, 0, size)\n', '            mstore(0x40, add(returnDataPayloadStart, size))\n', '            switch result case 0 {revert(returnDataPayloadStart, size)}\n', '        }\n', '    }\n', '}']