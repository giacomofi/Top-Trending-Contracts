['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-08\n', '*/\n', '\n', '// Sources flattened with buidler v1.4.7 https://buidler.dev\n', '\n', '// File contracts/libs/SafeMath.sol\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libs/Strings.sol\n', '\n', '// File: contracts/Strings.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', 'library Strings {\n', '\n', '    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        uint i = 0;\n', '        for (i = 0; i < _ba.length; i++) {\n', '            babcde[k++] = _ba[i];\n', '        }\n', '        for (i = 0; i < _bb.length; i++) {\n', '            babcde[k++] = _bb[i];\n', '        }\n', '        for (i = 0; i < _bc.length; i++) {\n', '            babcde[k++] = _bc[i];\n', '        }\n', '        for (i = 0; i < _bd.length; i++) {\n', '            babcde[k++] = _bd[i];\n', '        }\n', '        for (i = 0; i < _be.length; i++) {\n', '            babcde[k++] = _be[i];\n', '        }\n', '        return string(babcde);\n', '    }\n', '\n', '    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint j = _i;\n', '        uint len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = byte(uint8(48 + _i % 10));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/GenArt721Bonus.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address _owner) external view returns (uint balance);\n', '  function transfer(address _to, uint _value) external returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '  function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '}\n', '\n', 'contract GenArt721Bonus {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 erc20Contract;\n', '\n', '  mapping(address => bool) public isWhitelisted;\n', '  bool public bonusIsActive;\n', '  address public owner;\n', '  uint256 public bonusValueInWei;\n', '  bool public contractOwnsTokens;\n', '\n', '  constructor(address _erc20, address _minter, uint256 _bonusValueInWei) public {\n', '    owner=msg.sender;\n', '    erc20Contract=ERC20(_erc20);\n', '    isWhitelisted[_minter]=true;\n', '    bonusIsActive = true;\n', '    bonusValueInWei=_bonusValueInWei;\n', '  }\n', '\n', '  function triggerBonus(address _to) external returns (bool){\n', '    require(isWhitelisted[msg.sender]==true, "only whitelisted contracts can trigger bonus");\n', '    if (contractOwnsTokens){\n', '      require(erc20Contract.balanceOf(address(this))>=bonusValueInWei, "this contract does not have sufficient balance for reward");\n', '      erc20Contract.transfer(_to, bonusValueInWei);\n', '    } else {\n', '      require(erc20Contract.allowance(owner, address(this))>=bonusValueInWei, "this contract does not have sufficient allowance set for reward");\n', '      erc20Contract.transferFrom(owner, _to, bonusValueInWei);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function checkOwnerAllowance() public view returns (uint256){\n', '    uint256 remaining = erc20Contract.allowance(owner, address(this));\n', '    return remaining;\n', '  }\n', '\n', '  function checkContractTokenBalance() public view returns (uint256){\n', '    return erc20Contract.balanceOf(address(this));\n', '  }\n', '\n', '  function toggleBonusIsActive() public {\n', '    require(msg.sender==owner, "can only be set by owner");\n', '    bonusIsActive=!bonusIsActive;\n', '  }\n', '\n', '  function toggleContractOwnsTokens() public {\n', '    require(msg.sender==owner, "can only be set by owner");\n', '    contractOwnsTokens=!contractOwnsTokens;\n', '  }\n', '\n', '  function addWhitelisted(address _whitelisted) public {\n', '    require(msg.sender==owner, "only owner can add whitelisted contract");\n', '    isWhitelisted[_whitelisted]=true;\n', '  }\n', '\n', '  function removeWhitelisted(address _whitelisted) public {\n', '    require(msg.sender==owner, "only owner can remove whitelisted contract");\n', '    isWhitelisted[_whitelisted]=false;\n', '  }\n', '\n', '  function changeBonusValueInWei(uint _bonusValueInWei) public {\n', '    require(msg.sender==owner, "only owner can modify bonus reward");\n', '    bonusValueInWei=_bonusValueInWei;\n', '  }\n', '\n', '  function returnTokensToOwner() public {\n', '    require(msg.sender==owner, "only owner can modify bonus reward");\n', '    erc20Contract.transfer(owner, erc20Contract.balanceOf(address(this)));\n', '  }\n', '}']