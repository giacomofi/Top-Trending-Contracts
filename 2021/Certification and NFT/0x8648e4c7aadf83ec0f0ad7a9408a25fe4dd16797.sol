['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '/**\n', ' *SPDX-License-Identifier: UNLICENSED\n', '*/\n', 'pragma solidity >=0.6.8 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/TellorProxy.sol\n', '\n', 'interface ITellor {\n', '    function addTip(uint256 _requestId, uint256 _tip) external;\n', '\n', '    function submitMiningSolution(\n', '        string calldata _nonce,\n', '        uint256[5] calldata _requestId,\n', '        uint256[5] calldata _value\n', '    ) external;\n', '\n', '    function depositStake() external;\n', '\n', '    function requestStakingWithdraw() external;\n', '\n', '    function withdrawStake() external;\n', '\n', '    function getUintVar(bytes32 _data) external view returns (uint256);\n', '\n', '    function vote(uint256 _disputeId, bool _supportsDispute) external;\n', '\n', '    function transfer(address _to, uint256 _amount) external returns (bool);\n', '}\n', '\n', 'contract TellorProxy is Ownable {\n', '    address tellorAddress; // Address of Tellor Oracle\n', '\n', '    constructor(address _tellorAddress) public\n', '    {\n', '        tellorAddress = _tellorAddress;\n', '    }\n', '\n', '    function addTip(uint256 _requestId, uint256 _tip) external onlyOwner {\n', '        ITellor(tellorAddress).addTip(_requestId, _tip);\n', '    }\n', '\n', '    function changeTRB(address _tellorAddress) external onlyOwner {\n', '        tellorAddress = _tellorAddress;\n', '    }\n', '\n', '    function submitMiningSolution(\n', '        string calldata _nonce,\n', '        uint256[5] calldata _requestId,\n', '        uint256[5] calldata _value,\n', '        uint256 _pass\n', '    ) external onlyOwner {\n', '        if (_pass == 0) {\n', '            bytes32 slotProgress =\n', '                0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082;\n', '            uint256 _soltNum = ITellor(tellorAddress).getUintVar(slotProgress);\n', '            require(_soltNum != 4, "out-ooff-gas");\n', '        }\n', '        ITellor(tellorAddress).submitMiningSolution(_nonce, _requestId, _value);\n', '    }\n', '\n', '    function depositStake() external onlyOwner {\n', '        ITellor(tellorAddress).depositStake();\n', '    }\n', '\n', '    function requestStakingWithdraw() external onlyOwner {\n', '        ITellor(tellorAddress).requestStakingWithdraw();\n', '    }\n', '\n', '    function payment(address _to, uint256 _amount) external onlyOwner {\n', '        ITellor(tellorAddress).transfer(_to, _amount);\n', '    }\n', '\n', '    function getSlotProgress() external view returns (uint256) {\n', '        bytes32 slotProgress =\n', '            0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082;\n', '        return ITellor(tellorAddress).getUintVar(slotProgress);\n', '    }\n', '\n', '    function withdrawStake() external onlyOwner {\n', '        ITellor(tellorAddress).withdrawStake();\n', '    }\n', '\n', '    function vote(uint256 _disputeId, bool _supportsDispute) external onlyOwner\n', '    {\n', '        ITellor(tellorAddress).vote(_disputeId, _supportsDispute);\n', '    }\n', '}']