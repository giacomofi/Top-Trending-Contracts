['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./EnumerableSet.sol";\n', 'import "./Ownable.sol";\n', '\n', 'interface IUnicryptAdmin {\n', '    function userIsAdmin(address _user) external view returns (bool);\n', '}\n', '\n', 'contract UnicryptAdmin is Ownable {\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '  EnumerableSet.AddressSet private ADMINS;\n', '  \n', '  function ownerEditAdmin (address _user, bool _add) public onlyOwner {\n', '    if (_add) {\n', '      ADMINS.add(_user);\n', '    } else {\n', '      ADMINS.remove(_user);\n', '    }\n', '  }\n', '  \n', '  // Admin getters\n', '  function getAdminsLength () external view returns (uint256) {\n', '    return ADMINS.length();\n', '  }\n', '  \n', '  function getAdminAtIndex (uint256 _index) external view returns (address) {\n', '    return ADMINS.at(_index);\n', '  }\n', '  \n', '  function userIsAdmin (address _user) external view returns (bool) {\n', '    return ADMINS.contains(_user);\n', '  }\n', '}']