['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-24\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '// Copyright (c) 2021 0xdev0 - All rights reserved\n', '// https://twitter.com/0xdev0\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '  function initialize() external;\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '  function mint(address account, uint amount) external;\n', '  function burn(address account, uint amount) external;\n', '  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface ILendingPair {\n', '  function checkAccountHealth(address _account) external view;\n', '  function totalDebt(address _token) external view returns(uint);\n', '  function lpToken(address _token) external view returns(IERC20);\n', '  function debtOf(address _account, address _token) external view returns(uint);\n', '  function deposit(address _token, uint _amount) external;\n', '  function withdraw(address _token, uint _amount) external;\n', '  function borrow(address _token, uint _amount) external;\n', '  function repay(address _token, uint _amount) external;\n', '  function withdrawRepay(address _token, uint _amount) external;\n', '  function withdrawBorrow(address _token, uint _amount) external;\n', '  function controller() external view returns(IController);\n', '\n', '  function swapTokenToToken(\n', '    address  _fromToken,\n', '    address  _toToken,\n', '    address  _recipient,\n', '    uint     _inputAmount,\n', '    uint     _minOutput,\n', '    uint     _deadline\n', '  ) external returns(uint);\n', '}\n', '\n', 'interface ILendingPairCallee {\n', '  function flashSwapCall(address _recipient, uint _amountA, uint _amountB, bytes calldata _data) external;\n', '}\n', '\n', 'interface IController {\n', '  function interestRateModel() external view returns(IInterestRateModel);\n', '  function feeRecipient() external view returns(address);\n', '  function priceDelay() external view returns(uint);\n', '  function slowPricePeriod() external view returns(uint);\n', '  function slowPriceRange() external view returns(uint);\n', '  function liqMinHealth() external view returns(uint);\n', '  function liqFeePool() external view returns(uint);\n', '  function liqFeeSystem() external view returns(uint);\n', '  function liqFeeCaller() external view returns(uint);\n', '  function liqFeesTotal() external view returns(uint);\n', '  function depositLimit(address _lendingPair, address _token) external view returns(uint);\n', '}\n', '\n', 'interface IInterestRateModel {\n', '  function systemRate(ILendingPair _pair) external view returns(uint);\n', '  function supplyRate(ILendingPair _pair, address _token) external view returns(uint);\n', '  function borrowRate(ILendingPair _pair, address _token) external view returns(uint);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '  uint256 private constant _NOT_ENTERED = 1;\n', '  uint256 private constant _ENTERED = 2;\n', '\n', '  uint256 private _status;\n', '\n', '  constructor () {\n', '    _status = _NOT_ENTERED;\n', '  }\n', '\n', '  modifier nonReentrant() {\n', '    require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '    _status = _ENTERED;\n', '    _;\n', '    _status = _NOT_ENTERED;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function isOwner() public view returns (bool) {\n', '    return msg.sender == owner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(owner, address(0));\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library Clones {\n', '    /**\n', '     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n', '     *\n', '     * This function uses the create opcode, which should never revert.\n', '     */\n', '    function clone(address master) internal returns (address instance) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            instance := create(0, ptr, 0x37)\n', '        }\n', '        require(instance != address(0), "ERC1167: create failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n', '     *\n', '     * This function uses the create2 opcode and a `salt` to deterministically deploy\n', '     * the clone. Using the same `master` and `salt` multiple time will revert, since\n', '     * the clones cannot be deployed twice at the same address.\n', '     */\n', '    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            instance := create2(0, ptr, 0x37, salt)\n', '        }\n', '        require(instance != address(0), "ERC1167: create2 failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n', '     */\n', '    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n', '            mstore(add(ptr, 0x38), shl(0x60, deployer))\n', '            mstore(add(ptr, 0x4c), salt)\n', '            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n', '            predicted := keccak256(add(ptr, 0x37), 0x55)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n', '     */\n', '    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\n', '        return predictDeterministicAddress(master, salt, address(this));\n', '    }\n', '}\n', '\n', 'contract ERC20 is Ownable {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '  mapping (address => uint) public balanceOf;\n', '  mapping (address => mapping (address => uint)) public allowance;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint public totalSupply;\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint8 _decimals\n', '  ) {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    require(decimals > 0, "decimals");\n', '  }\n', '\n', '  function transfer(address _recipient, uint _amount) public returns (bool) {\n', '    _transfer(msg.sender, _recipient, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _amount) public returns (bool) {\n', '    _approve(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _sender, address _recipient, uint _amount) public returns (bool) {\n', '    require(allowance[_sender][msg.sender] >= _amount, "ERC20: insufficient approval");\n', '    _transfer(_sender, _recipient, _amount);\n', '    _approve(_sender, msg.sender, allowance[_sender][msg.sender] - _amount);\n', '    return true;\n', '  }\n', '\n', '  function _transfer(address _sender, address _recipient, uint _amount) internal {\n', '    require(_sender != address(0), "ERC20: transfer from the zero address");\n', '    require(_recipient != address(0), "ERC20: transfer to the zero address");\n', '    require(balanceOf[_sender] >= _amount, "ERC20: insufficient funds");\n', '\n', '    balanceOf[_sender] -= _amount;\n', '    balanceOf[_recipient] += _amount;\n', '    emit Transfer(_sender, _recipient, _amount);\n', '  }\n', '\n', '  function mint(address _account, uint _amount) public onlyOwner {\n', '    _mint(_account, _amount);\n', '  }\n', '\n', '  function burn(address _account, uint _amount) public onlyOwner {\n', '    _burn(_account, _amount);\n', '  }\n', '\n', '  function _mint(address _account, uint _amount) internal {\n', '    require(_account != address(0), "ERC20: mint to the zero address");\n', '\n', '    totalSupply += _amount;\n', '    balanceOf[_account] += _amount;\n', '    emit Transfer(address(0), _account, _amount);\n', '  }\n', '\n', '  function _burn(address _account, uint _amount) internal {\n', '    require(_account != address(0), "ERC20: burn from the zero address");\n', '\n', '    balanceOf[_account] -= _amount;\n', '    totalSupply -= _amount;\n', '    emit Transfer(_account, address(0), _amount);\n', '  }\n', '\n', '  function _approve(address _owner, address _spender, uint _amount) internal {\n', '    require(_owner != address(0), "ERC20: approve from the zero address");\n', '    require(_spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    allowance[_owner][_spender] = _amount;\n', '    emit Approval(_owner, _spender, _amount);\n', '  }\n', '}\n', '\n', 'interface IWETH {\n', '  function deposit() external payable;\n', '  function withdraw(uint wad) external;\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint amount) external returns (bool);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '}\n', '\n', 'contract TransferHelper {\n', '\n', '  // Mainnet\n', '  IWETH internal constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '  // Ropsten\n', '  // IWETH internal constant WETH = IWETH(0xc778417E063141139Fce010982780140Aa0cD5Ab);\n', '\n', '  function _safeTransferFrom(address _token, address _sender, uint _amount) internal returns(uint) {\n', '    IERC20(_token).transferFrom(_sender, address(this), _amount);\n', '    require(_amount > 0, "TransferHelper: amount must be > 0");\n', '  }\n', '\n', '  function _wethWithdrawTo(address _to, uint _amount) internal {\n', '    require(_amount > 0, "TransferHelper: amount must be > 0");\n', '    WETH.withdraw(_amount);\n', '    (bool success, ) = _to.call { value: _amount }(new bytes(0));\n', "    require(success, 'TransferHelper: ETH transfer failed');\n", '  }\n', '}\n', '\n', 'contract LendingPair is ReentrancyGuard, TransferHelper {\n', '\n', '  // Prevents division by zero and other nasty stuff\n', '  uint public constant MIN_RESERVE = 1000;\n', '\n', '  using Address for address;\n', '  using Clones for address;\n', '\n', '  mapping (address => mapping (address => uint)) public debtOf;\n', '  mapping (address => mapping (address => uint)) public accountInterestSnapshot;\n', '  mapping (address => uint) public cumulativeInterestRate; // 1e18 = 1%\n', '  mapping (address => uint) public totalDebt;\n', '  mapping (address => uint) public storedSwapReserve;\n', '  mapping (address => uint) public swapTime;\n', '  mapping (address => uint) public storedLendingReserve;\n', '  mapping (address => uint) public lendingTime;\n', '  mapping (address => IERC20) public lpToken;\n', '\n', '  IController public controller;\n', '  address public tokenA;\n', '  address public tokenB;\n', '  uint public lastTimeAccrued;\n', '\n', '  event Swap(\n', '    address indexed fromToken,\n', '    address indexed toToken,\n', '    address indexed recipient,\n', '    uint inputAmount,\n', '    uint outputAmount\n', '  );\n', '\n', '  event FlashSwap(\n', '    address indexed recipient,\n', '    uint amountA,\n', '    uint amountB\n', '  );\n', '\n', '  event Liquidation(\n', '    address indexed account,\n', '    uint supplyBurnA,\n', '    uint supplyBurnB,\n', '    uint borrowBurnA,\n', '    uint borrowBurnB\n', '  );\n', '\n', '  event Deposit(address indexed token, uint amount);\n', '  event Withdraw(address indexed token, uint amount);\n', '  event Borrow(address indexed token, uint amount);\n', '  event Repay(address indexed token, uint amount);\n', '\n', '  receive() external payable {}\n', '\n', '  function initialize(\n', '    address _lpTokenMaster,\n', '    address _controller,\n', '    IERC20 _tokenA,\n', '    IERC20 _tokenB\n', '  ) public {\n', '    require(address(tokenA) == address(0), "LendingPair: already initialized");\n', '    require(address(_tokenA) != address(0) && address(_tokenB) != address(0), "LendingPair: cannot be ZERO address");\n', '\n', '    controller = IController(_controller);\n', '    tokenA = address(_tokenA);\n', '    tokenB = address(_tokenB);\n', '    lastTimeAccrued = block.timestamp;\n', '    cumulativeInterestRate[tokenA] = 1e18;\n', '    cumulativeInterestRate[tokenB] = 1e18;\n', '\n', '    lpToken[tokenA] = _createLpToken(_lpTokenMaster);\n', '    lpToken[tokenB] = _createLpToken(_lpTokenMaster);\n', '  }\n', '\n', '  function depositRepay(address _token, uint _amount) public {\n', '    _depositRepay(_token, _amount);\n', '    IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n', '  }\n', '\n', '  function depositRepayETH() public payable {\n', '    _depositRepay(address(WETH), msg.value);\n', '    WETH.deposit { value: msg.value }();\n', '  }\n', '\n', '  function withdrawBorrow(address _token, uint _amount) public {\n', '    _withdrawBorrow(_token, _amount);\n', '    _safeTransfer(IERC20(_token), msg.sender, _amount);\n', '  }\n', '\n', '  function withdrawBorrowETH(uint _amount) public {\n', '    _withdrawBorrow(address(WETH), _amount);\n', '    _wethWithdrawTo(msg.sender, _amount);\n', '    _checkMinReserve(IERC20(address(WETH)));\n', '  }\n', '\n', '  function deposit(address _token, uint _amount) public {\n', '    accrueAccount(msg.sender);\n', '    _deposit(_token, _amount);\n', '    _safeTransferFrom(_token, msg.sender, _amount);\n', '  }\n', '\n', '  function withdrawAll(address _token) public {\n', '    accrueAccount(msg.sender);\n', '    uint amount = lpToken[address(_token)].balanceOf(msg.sender);\n', '    _withdraw(_token, amount);\n', '    _safeTransfer(IERC20(_token), msg.sender, amount);\n', '  }\n', '\n', '  function withdraw(address _token, uint _amount) public {\n', '    accrueAccount(msg.sender);\n', '    _withdraw(_token, _amount);\n', '    _safeTransfer(IERC20(_token), msg.sender, _amount);\n', '  }\n', '\n', '  function borrow(address _token, uint _amount) public {\n', '    accrueAccount(msg.sender);\n', '    _borrow(_token, _amount);\n', '    _safeTransfer(IERC20(_token), msg.sender, _amount);\n', '  }\n', '\n', '  function repayAll(address _token) public {\n', '    accrueAccount(msg.sender);\n', '    uint amount = debtOf[_token][msg.sender];\n', '    _repay(_token, amount);\n', '    _safeTransferFrom(_token, msg.sender, amount);\n', '  }\n', '\n', '  function repay(address _token, uint _amount) public {\n', '    accrueAccount(msg.sender);\n', '    _repay(_token, _amount);\n', '    _safeTransferFrom(_token, msg.sender, _amount);\n', '  }\n', '\n', '  function flashSwap(\n', '    address _recipient,\n', '    uint _amountA,\n', '    uint _amountB,\n', '    bytes calldata _data\n', '  ) public nonReentrant {\n', '\n', '    _delayLendingPrice(tokenA);\n', '    _delayLendingPrice(tokenB);\n', '\n', "    require(_amountA > 0 || _amountB > 0, 'LendingPair: insufficient input amounts');\n", '\n', '    uint balanceA = IERC20(tokenA).balanceOf(address(this));\n', '    uint balanceB = IERC20(tokenB).balanceOf(address(this));\n', '\n', '    if (_amountA > 0) _safeTransfer(IERC20(tokenA), _recipient, _amountA);\n', '    if (_amountB > 0) _safeTransfer(IERC20(tokenB), _recipient, _amountB);\n', '    ILendingPairCallee(_recipient).flashSwapCall(msg.sender, _amountA, _amountB, _data);\n', '\n', '    uint adjustedBalanceA = balanceA + _amountA * 3 / 1000;\n', '    uint adjustedBalanceB = balanceB + _amountB * 3 / 1000;\n', '    uint expectedK = adjustedBalanceA * adjustedBalanceB;\n', '\n', '    _earnSwapInterest(tokenA, _amountA);\n', '    _earnSwapInterest(tokenB, _amountB);\n', '\n', '    require(_k() >= expectedK, "LendingPair: insufficient return amount");\n', '\n', '    emit FlashSwap(_recipient, _amountA, _amountB);\n', '  }\n', '\n', '  function swapETHToToken(\n', '    address  _toToken,\n', '    address  _recipient,\n', '    uint     _minOutput,\n', '    uint     _deadline\n', '  ) public payable nonReentrant returns(uint) {\n', '\n', '    uint outputAmount = _swap(address(WETH), _toToken, _recipient, msg.value, _minOutput, _deadline);\n', '    WETH.deposit { value: msg.value }();\n', '    _safeTransfer(IERC20(_toToken), _recipient, outputAmount);\n', '\n', '    return outputAmount;\n', '  }\n', '\n', '  function swapTokenToETH(\n', '    address  _fromToken,\n', '    address  _recipient,\n', '    uint     _inputAmount,\n', '    uint     _minOutput,\n', '    uint     _deadline\n', '  ) public nonReentrant returns(uint) {\n', '\n', '    uint outputAmount = _swap(_fromToken, address(WETH), _recipient, _inputAmount, _minOutput, _deadline);\n', '    _safeTransferFrom(_fromToken, msg.sender, _inputAmount);\n', '    _wethWithdrawTo(_recipient, outputAmount);\n', '    _checkMinReserve(IERC20(address(WETH)));\n', '\n', '    return outputAmount;\n', '  }\n', '\n', '  function swapTokenToToken(\n', '    address  _fromToken,\n', '    address  _toToken,\n', '    address  _recipient,\n', '    uint     _inputAmount,\n', '    uint     _minOutput,\n', '    uint     _deadline\n', '  ) public nonReentrant returns(uint) {\n', '\n', '    uint outputAmount = _swap(_fromToken, _toToken, _recipient, _inputAmount, _minOutput, _deadline);\n', '    _safeTransferFrom(_fromToken, msg.sender, _inputAmount);\n', '    _safeTransfer(IERC20(_toToken), _recipient, outputAmount);\n', '\n', '    return outputAmount;\n', '  }\n', '\n', '  function accrue() public {\n', '    _accrueInterest(tokenA);\n', '    _accrueInterest(tokenB);\n', '    lastTimeAccrued = block.timestamp;\n', '  }\n', '\n', '  function accrueAccount(address _account) public {\n', '    accrue();\n', '    _accrueAccount(_account);\n', '  }\n', '\n', '  function accountHealth(address _account) public view returns(uint) {\n', '    uint totalAccountSupply  = supplyBalance(_account, tokenA, tokenA) + supplyBalance(_account, tokenB, tokenA);\n', '    uint totalAccountBorrrow = borrowBalance(_account, tokenA, tokenA) + borrowBalance(_account, tokenB, tokenA);\n', '\n', '    if (totalAccountBorrrow == 0) {\n', '      return controller.liqMinHealth();\n', '    } else {\n', '      return totalAccountSupply * 1e18 / totalAccountBorrrow;\n', '    }\n', '  }\n', '\n', '  // Get borow balance converted to the units of _returnToken\n', '  function borrowBalance(\n', '    address _account,\n', '    address _borrowedToken,\n', '    address _returnToken\n', '  ) public view returns(uint) {\n', '    return convertTokenValues(_borrowedToken, _returnToken, debtOf[_borrowedToken][_account]);\n', '  }\n', '\n', '  // Get supply balance converted to the units of _returnToken\n', '  function supplyBalance(\n', '    address _account,\n', '    address _suppliedToken,\n', '    address _returnToken\n', '  ) public view returns(uint) {\n', '    return convertTokenValues(_suppliedToken, _returnToken, lpToken[_suppliedToken].balanceOf(_account));\n', '  }\n', '\n', '  // Get the value of _fromToken in the units of _toToken without slippage or fees\n', '  function convertTokenValues(\n', '    address _fromToken,\n', '    address _toToken,\n', '    uint    _inputAmount\n', '  ) public view returns(uint) {\n', '\n', '    uint inputReserve  = lendingReserve(_fromToken);\n', '    uint outputReserve = lendingReserve(_toToken);\n', '    require(inputReserve > 0 && outputReserve > 0, "LendingPair: invalid reserve balances");\n', '\n', '    return _inputAmount * 1e18 * outputReserve / inputReserve / 1e18;\n', '  }\n', '\n', '  function getExpectedOutput(\n', '    address  _fromToken,\n', '    address  _toToken,\n', '    uint     _inputAmount\n', '  ) public view returns(uint) {\n', '\n', '    uint inputReserve  = swapReserve(_fromToken);\n', '    uint outputReserve = swapReserve(_toToken);\n', '\n', '    require(inputReserve > 0 && outputReserve > 0, "LendingPair: invalid reserve balances");\n', '\n', '    uint inputAmountWithFee = _inputAmount * 997;\n', '    uint numerator = inputAmountWithFee * outputReserve;\n', '    uint denominator = inputReserve * 1000 + inputAmountWithFee;\n', '    uint output = numerator / denominator;\n', '    uint maxOutput = IERC20(_toToken).balanceOf(address(this)) - MIN_RESERVE;\n', '\n', '    return output > maxOutput ? maxOutput : output;\n', '  }\n', '\n', '  function supplyRate(address _token) public view returns(uint) {\n', '    return controller.interestRateModel().supplyRate(ILendingPair(address(this)), _token);\n', '  }\n', '\n', '  function borrowRate(address _token) public view returns(uint) {\n', '    return controller.interestRateModel().borrowRate(ILendingPair(address(this)), _token);\n', '  }\n', '\n', '  // Sell collateral to reduce debt and increase accountHealth\n', '  function liquidateAccount(address _account) public {\n', '    uint health = accountHealth(_account);\n', '    require(health < controller.liqMinHealth(), "LendingPair: account health > liqMinHealth");\n', '\n', '    (uint supplyBurnA, uint borrowBurnA) = _liquidateToken(_account, tokenA, tokenB);\n', '    (uint supplyBurnB, uint borrowBurnB) = _liquidateToken(_account, tokenB, tokenA);\n', '\n', '    emit Liquidation(_account, supplyBurnA, supplyBurnB, borrowBurnA, borrowBurnB);\n', '  }\n', '\n', '  function pendingSupplyInterest(address _token, address _account) public view returns(uint) {\n', '    return _newInterest(lpToken[_token].balanceOf(_account), _token, _account);\n', '  }\n', '\n', '  function pendingBorrowInterest(address _token, address _account) public view returns(uint) {\n', '    return _newInterest(debtOf[_token][_account], _token, _account);\n', '  }\n', '\n', '  // Used to calculate swap price\n', '  function swapReserve(address _token) public view returns(uint) {\n', '    return _reserve(_token, storedSwapReserve[_token], swapTime[_token]);\n', '  }\n', '\n', '  // Used to calculate liquidation price\n', '  function lendingReserve(address _token) public view returns(uint) {\n', '    return _reserve(_token, storedLendingReserve[_token], lendingTime[_token]);\n', '  }\n', '\n', '  function feeRecipient() public view returns(address) {\n', '    return controller.feeRecipient();\n', '  }\n', '\n', '  function checkAccountHealth(address _account) public view  {\n', '    uint health = accountHealth(_account);\n', '    require(health >= controller.liqMinHealth(), "LendingPair: insufficient accountHealth");\n', '  }\n', '\n', '  function _reserve(address _token, uint _storedReserve, uint _vTime) internal view returns(uint) {\n', '    uint realReserve = IERC20(_token).balanceOf(address(this));\n', '    if (block.timestamp > (_vTime + controller.priceDelay())) { return realReserve; }\n', '\n', '    uint timeElapsed = block.timestamp - _vTime;\n', '    int diffAmount = (int(realReserve) - int(_storedReserve)) * int(_timeShare(timeElapsed)) / int(1e18);\n', '\n', '    return uint(int(_storedReserve) + diffAmount);\n', '  }\n', '\n', '  function _swap(\n', '    address  _fromToken,\n', '    address  _toToken,\n', '    address  _recipient,\n', '    uint     _inputAmount,\n', '    uint     _minOutput,\n', '    uint     _deadline\n', '  ) internal returns(uint) {\n', '\n', '    _validateToken(_fromToken);\n', '    _validateToken(_toToken);\n', '\n', '    _delayLendingPrice(_fromToken);\n', '    _delayLendingPrice(_toToken);\n', '\n', '    uint outputReserve = IERC20(_toToken).balanceOf(address(this));\n', '    uint outputAmount = getExpectedOutput(_fromToken, _toToken, _inputAmount);\n', '\n', '    require(_deadline >= block.timestamp,  "LendingPair: _deadline <= block.timestamp");\n', '    require(outputAmount >= _minOutput,    "LendingPair: outputAmount >= _minOutput");\n', '    require(outputAmount <= outputReserve, "LendingPair: insufficient reserves");\n', '\n', '    _earnSwapInterest(_toToken, outputAmount);\n', '\n', '    emit Swap(_fromToken, _toToken, _recipient, _inputAmount, outputAmount);\n', '\n', '    return outputAmount;\n', '  }\n', '\n', '  function _depositRepay(address _token, uint _amount) internal {\n', '\n', '    accrueAccount(msg.sender);\n', '\n', '    uint debt = debtOf[_token][msg.sender];\n', '    uint repayAmount = debt > _amount ? _amount : debt;\n', '\n', '    if (repayAmount > 0) {\n', '      _repay(_token, repayAmount);\n', '    }\n', '\n', '    uint depositAmount = _amount - repayAmount;\n', '\n', '    if (depositAmount > 0) {\n', '      _deposit(_token, depositAmount);\n', '    }\n', '  }\n', '\n', '  function _withdrawBorrow(address _token, uint _amount) internal {\n', '\n', '    accrueAccount(msg.sender);\n', '    uint supplyAmount = lpToken[_token].balanceOf(msg.sender);\n', '    uint withdrawAmount = supplyAmount > _amount ? _amount : supplyAmount;\n', '\n', '    if (withdrawAmount > 0) {\n', '      _withdraw(_token, withdrawAmount);\n', '    }\n', '\n', '    uint borrowAmount = _amount - withdrawAmount;\n', '\n', '    if (borrowAmount > 0) {\n', '      _borrow(_token, borrowAmount);\n', '    }\n', '  }\n', '\n', '  function _earnSwapInterest(address _token, uint _amount) internal {\n', '    uint earnedAmount = _amount * 3 / 1000;\n', '    uint newInterest = earnedAmount * 1e18 / lpToken[_token].totalSupply();\n', '    cumulativeInterestRate[_token] += newInterest;\n', '  }\n', '\n', '  function _mintDebt(address _token, address _account, uint _amount) internal {\n', '    debtOf[_token][_account] += _amount;\n', '    totalDebt[_token] += _amount;\n', '  }\n', '\n', '  function _burnDebt(address _token, address _account, uint _amount) internal {\n', '    debtOf[_token][_account] -= _amount;\n', '    totalDebt[_token] -= _amount;\n', '  }\n', '\n', '  function _delaySwapPrice(address _token) internal {\n', '    storedSwapReserve[_token] = swapReserve(_token);\n', '    swapTime[_token] = block.timestamp;\n', '  }\n', '\n', '  function _delayLendingPrice(address _token) internal {\n', '    storedLendingReserve[_token] = lendingReserve(_token);\n', '    lendingTime[_token] = block.timestamp;\n', '  }\n', '\n', '  function _liquidateToken(\n', '    address _account,\n', '    address _supplyToken,\n', '    address _borrowToken\n', '  ) internal returns(uint, uint) {\n', '\n', '    uint accountSupply  = lpToken[_supplyToken].balanceOf(_account);\n', '    uint accountDebt    = debtOf[_borrowToken][_account];\n', '    uint supplyDebt     = convertTokenValues(_borrowToken, _supplyToken, accountDebt);\n', '    uint supplyRequired = supplyDebt + supplyDebt * controller.liqFeesTotal() / 100e18;\n', '\n', '    uint supplyBurn = supplyRequired > accountSupply ? accountSupply : supplyRequired;\n', '\n', '    uint supplyBurnMinusFees = (supplyBurn * 100e18 / (100e18 + controller.liqFeesTotal()));\n', '    uint systemFee = supplyBurnMinusFees * controller.liqFeeSystem() / 100e18;\n', '    uint callerFee = supplyBurnMinusFees * controller.liqFeeCaller() / 100e18;\n', '\n', '    lpToken[_supplyToken].burn(_account, supplyBurn);\n', '    lpToken[_supplyToken].mint(feeRecipient(), systemFee);\n', '    lpToken[_supplyToken].mint(msg.sender, callerFee);\n', '\n', '    uint debtBurn = convertTokenValues(_supplyToken, _borrowToken, supplyBurnMinusFees);\n', '\n', '    // Remove dust debt to allow full debt wipe\n', '    if (debtBurn < accountDebt) {\n', '      debtBurn = (accountDebt - debtBurn) < accountDebt / 10000 ? accountDebt : debtBurn;\n', '    }\n', '\n', '    _burnDebt(_borrowToken, _account, debtBurn);\n', '\n', '    return (supplyBurn, debtBurn);\n', '  }\n', '\n', '  function _accrueAccount(address _account) internal {\n', '    _accrueAccountSupply(tokenA, _account);\n', '    _accrueAccountSupply(tokenB, _account);\n', '    _accrueAccountDebt(tokenA, _account);\n', '    _accrueAccountDebt(tokenB, _account);\n', '\n', '    accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA];\n', '    accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB];\n', '\n', '    _accrueSystem(tokenA);\n', '    _accrueSystem(tokenB);\n', '  }\n', '\n', '  // Accrue system interest from the total debt\n', '  // Cannot use total supply since nobody may be supplying to that side (borrowing sold assets from another side)\n', '  function _accrueSystem(address _token) internal {\n', '    _ensureAccountInterestSnapshot(feeRecipient());\n', '    uint systemInterest = _newInterest(totalDebt[_token], _token, feeRecipient());\n', '    uint newSupply = systemInterest * _systemRate() / 100e18;\n', '    lpToken[_token].mint(feeRecipient(), newSupply);\n', '  }\n', '\n', '  function _ensureAccountInterestSnapshot(address _account) internal {\n', '    if (accountInterestSnapshot[tokenA][_account] == 0) {\n', '      accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA];\n', '    }\n', '\n', '    if (accountInterestSnapshot[tokenB][_account] == 0) {\n', '      accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB];\n', '    }\n', '  }\n', '\n', '  function _accrueAccountSupply(address _token, address _account) internal {\n', '    uint supplyInterest = pendingSupplyInterest(_token, _account);\n', '    uint newSupply = supplyInterest * _systemRate() / 100e18;\n', '\n', '    lpToken[_token].mint(_account, newSupply);\n', '  }\n', '\n', '  function _accrueAccountDebt(address _token, address _account) internal {\n', '    uint newDebt = pendingBorrowInterest(_token, _account);\n', '    _mintDebt(_token, _account, newDebt);\n', '  }\n', '\n', '  function _withdraw(address _token, uint _amount) internal {\n', '    _validateToken(_token);\n', '\n', '    _delaySwapPrice(_token);\n', '    _delayLendingPrice(_token);\n', '\n', '    lpToken[address(_token)].burn(msg.sender, _amount);\n', '\n', '    checkAccountHealth(msg.sender);\n', '\n', '    emit Withdraw(_token, _amount);\n', '  }\n', '\n', '  function _borrow(address _token, uint _amount) internal {\n', '    _validateToken(_token);\n', '\n', '    _delaySwapPrice(_token);\n', '    _delayLendingPrice(_token);\n', '\n', '    require(lpToken[address(_token)].balanceOf(msg.sender) == 0, "LendingPair: cannot borrow supplied token");\n', '\n', '    _mintDebt(_token, msg.sender, _amount);\n', '\n', '    checkAccountHealth(msg.sender);\n', '\n', '    emit Borrow(_token, _amount);\n', '  }\n', '\n', '  function _repay(address _token, uint _amount) internal {\n', '    _validateToken(_token);\n', '\n', '    _delaySwapPrice(_token);\n', '    _delayLendingPrice(_token);\n', '    _burnDebt(_token, msg.sender, _amount);\n', '\n', '    emit Repay(_token, _amount);\n', '  }\n', '\n', '  function _deposit(address _token, uint _amount) internal {\n', '    _checkDepositLimit(_token, _amount);\n', '\n', '    // Initialize on first deposit (pair creation).\n', '    _initOrDelaySwapPrice(_token, _amount);\n', '    _initOrDelayLendingPrice(_token, _amount);\n', '\n', '    // Deposit is required to withdraw, borrow & repay so we only need to check this here.\n', '    _ensureAccountInterestSnapshot(msg.sender);\n', '\n', '    _validateToken(_token);\n', '    require(debtOf[_token][msg.sender] == 0, "LendingPair: cannot deposit borrowed token");\n', '\n', '    lpToken[address(_token)].mint(msg.sender, _amount);\n', '\n', '    emit Deposit(_token, _amount);\n', '  }\n', '\n', '  function _accrueInterest(address _token) internal {\n', '    uint timeElapsed = block.timestamp - lastTimeAccrued;\n', '    uint newInterest = borrowRate(_token) / 365 days * timeElapsed;\n', '    cumulativeInterestRate[_token] += newInterest;\n', '  }\n', '\n', '  function _initOrDelaySwapPrice(address _token, uint _amount) internal {\n', '    if (storedSwapReserve[_token] == 0) {\n', '      storedSwapReserve[_token] = _amount;\n', '      swapTime[_token] = block.timestamp - controller.priceDelay();\n', '    } else {\n', '      _delaySwapPrice(_token);\n', '    }\n', '  }\n', '\n', '  function _initOrDelayLendingPrice(address _token, uint _amount) internal {\n', '    if (storedLendingReserve[_token] == 0) {\n', '      storedLendingReserve[_token] = _amount;\n', '      lendingTime[_token] = block.timestamp - controller.priceDelay();\n', '    } else {\n', '      _delayLendingPrice(_token);\n', '    }\n', '  }\n', '\n', '  function _createLpToken(address _lpTokenMaster) internal returns(IERC20) {\n', '    IERC20 newLPToken = IERC20(_lpTokenMaster.clone());\n', '    newLPToken.initialize();\n', '    return newLPToken;\n', '  }\n', '\n', '  function _timeShare(uint _timeElapsed) internal view returns(uint) {\n', '    if (_timeElapsed > controller.slowPricePeriod()) {\n', '      return _timeElapsed * 1e18 / controller.priceDelay();\n', '    } else {\n', '      return _timeElapsed * 1e18 / controller.slowPricePeriod() * controller.slowPriceRange() / 100e18;\n', '    }\n', '  }\n', '\n', '  function _validateToken(address _token) internal view {\n', '    require(_token == tokenA || _token == tokenB, "LendingPair: invalid token");\n', '  }\n', '\n', '  function _safeTransfer(IERC20 _token, address _recipient, uint _amount) internal {\n', '    _token.transfer(_recipient, _amount);\n', '    _checkMinReserve(_token);\n', '  }\n', '\n', '  function _checkMinReserve(IERC20 _token) internal view {\n', '    require(_token.balanceOf(address(this)) >= MIN_RESERVE, "LendingPair: below MIN_RESERVE");\n', '  }\n', '\n', '  function _k() internal view returns(uint) {\n', '    uint balanceA = IERC20(tokenA).balanceOf(address(this));\n', '    uint balanceB = IERC20(tokenB).balanceOf(address(this));\n', '\n', '    return balanceA * balanceB;\n', '  }\n', '\n', '  function _checkDepositLimit(address _token, uint _amount) internal view {\n', '    uint depositLimit = controller.depositLimit(address(this), _token);\n', '\n', '    if (depositLimit > 0) {\n', '      require((lpToken[_token].totalSupply() + _amount) <= depositLimit, "LendingPair: deposit limit reached");\n', '    }\n', '  }\n', '\n', '  function _systemRate() internal view returns(uint) {\n', '    return controller.interestRateModel().systemRate(ILendingPair(address(this)));\n', '  }\n', '\n', '  function _newInterest(uint _balance, address _token, address _account) internal view returns(uint) {\n', '    return _balance * (cumulativeInterestRate[_token] - accountInterestSnapshot[_token][_account]) / 1e18;\n', '  }\n', '}\n', '\n', 'contract InterestRateModel {\n', '\n', '  uint private constant MIN_RATE  = 1e17;   // 0.1%\n', '  uint private constant LOW_RATE  = 20e18;  // 20%\n', '  uint private constant HIGH_RATE = 1000e18; // 1,000%\n', '\n', '  uint private constant TARGET_UTILIZATION = 80e18; // 80%\n', '  uint public constant  SYSTEM_RATE        = 50e18; // 50% - share of borrowRate earned by the system\n', '\n', '  function supplyRate(ILendingPair _pair, address _token) public view returns(uint) {\n', '    return borrowRate(_pair, _token) * SYSTEM_RATE / 100e18;\n', '  }\n', '\n', '  function borrowRate(ILendingPair _pair, address _token) public view returns(uint) {\n', '    uint debt = _pair.totalDebt(_token);\n', '    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\n', '\n', '    if (supply == 0 || debt == 0) { return MIN_RATE; }\n', '\n', '    uint utilization = _max(debt * 100e18 / supply, 100e18);\n', '\n', '    if (utilization < TARGET_UTILIZATION) {\n', '      uint rate = LOW_RATE * utilization / 100e18;\n', '      return (rate < MIN_RATE) ? MIN_RATE : rate;\n', '    } else {\n', '      // (999 - (1000 * 0.8)) / (1000 * 0.2)\n', '      utilization = 100e18 * ( debt - (supply * TARGET_UTILIZATION / 100e18) ) / (supply * (100e18 - TARGET_UTILIZATION) / 100e18);\n', '      utilization = _max(utilization, 100e18);\n', '      return LOW_RATE + (HIGH_RATE - LOW_RATE) * utilization / 100e18;\n', '    }\n', '  }\n', '\n', '  function utilizationRate(ILendingPair _pair, address _token) public view returns(uint) {\n', '    uint debt = _pair.totalDebt(_token);\n', '    uint supply = IERC20(_pair.lpToken(_token)).totalSupply();\n', '\n', '    if (supply == 0 || debt == 0) { return 0; }\n', '\n', '    return _max(debt * 100e18 / supply, 100e18);\n', '  }\n', '\n', '  // InterestRateModel can later be replaced for more granular fees per _lendingPair\n', '  function systemRate(ILendingPair _pair) public pure returns(uint) {\n', '    return SYSTEM_RATE;\n', '  }\n', '\n', '  function _max(uint _valueA, uint _valueB) internal pure returns(uint) {\n', '    return _valueA > _valueB ? _valueB : _valueA;\n', '  }\n', '}']