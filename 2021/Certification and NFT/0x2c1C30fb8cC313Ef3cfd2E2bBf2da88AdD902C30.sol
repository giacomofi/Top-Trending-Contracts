['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/library/PoolLib.sol\n', 'pragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\n', '\n', '////// contracts/interfaces/IBPool.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IBPool {\n', '\n', '    function transfer(address, uint256) external returns (bool);\n', '\n', '    function INIT_POOL_SUPPLY() external view returns (uint256);\n', '\n', '    function MAX_OUT_RATIO() external view returns (uint256);\n', '\n', '    function bind(address, uint256, uint256) external;\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function finalize() external;\n', '\n', '    function gulp(address) external;\n', '\n', '    function isFinalized() external view returns (bool);\n', '\n', '    function isBound(address) external view returns (bool);\n', '\n', '    function getNumTokens() external view returns (uint256);\n', '\n', '    function getBalance(address) external view returns (uint256);\n', '\n', '    function getNormalizedWeight(address) external view returns (uint256);\n', '\n', '    function getDenormalizedWeight(address) external view returns (uint256);\n', '\n', '    function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '    function getSwapFee() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function getFinalTokens() external view returns (address[] memory);\n', '\n', '    function calcSingleOutGivenPoolIn(\n', '        uint256 tokenBalanceOut,\n', '        uint256 tokenWeightOut,\n', '        uint256 poolSupply,\n', '        uint256 totalWeight,\n', '        uint256 poolAmountIn,\n', '        uint256 swapFee\n', '    ) external pure returns (uint256);\n', '\n', '    function calcPoolInGivenSingleOut(\n', '        uint256 tokenBalanceOut,\n', '        uint256 tokenWeightOut,\n', '        uint256 poolSupply,\n', '        uint256 totalWeight,\n', '        uint256 tokenAmountOut,\n', '        uint256 swapFee\n', '    ) external pure returns (uint256);\n', '\n', '    function exitswapExternAmountOut(\n', '        address tokenOut,\n', '        uint256 tokenAmountOut,\n', '        uint256 maxPoolAmountIn\n', '    ) external returns (uint256 poolAmountIn);\n', '\n', '}\n', '\n', '////// contracts/interfaces/IDebtLockerFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IDebtLockerFactory {\n', '\n', '    function owner(address) external view returns (address);\n', '\n', '    function isLocker(address) external view returns (bool);\n', '\n', '    function factoryType() external view returns (uint8);\n', '\n', '    function newLocker(address) external returns (address);\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '////// contracts/interfaces/IERC20Details.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"; */\n', '\n', 'interface IERC20Details is IERC20 {\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/ILiquidityLocker.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ILiquidityLocker {\n', '\n', '    function pool() external view returns (address);\n', '\n', '    function liquidityAsset() external view returns (address);\n', '\n', '    function transfer(address, uint256) external;\n', '\n', '    function fundLoan(address, address, uint256) external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IBaseFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IBaseFDT {\n', '\n', '    /**\n', '        @dev    Returns the total amount of funds a given address is able to withdraw currently.\n', '        @param  owner Address of FDT holder.\n', '        @return A uint256 representing the available funds for a given account.\n', '    */\n', '    function withdrawableFundsOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', '        @dev Withdraws all available funds for a FDT holder.\n', '    */\n', '    function withdrawFunds() external;\n', '\n', '    /**\n', '        @dev   This event emits when new funds are distributed.\n', '        @param by               The address of the sender that distributed funds.\n', '        @param fundsDistributed The amount of funds received for distribution.\n', '    */\n', '    event FundsDistributed(address indexed by, uint256 fundsDistributed);\n', '\n', '    /**\n', '        @dev   This event emits when distributed funds are withdrawn by a token holder.\n', '        @param by             The address of the receiver of funds.\n', '        @param fundsWithdrawn The amount of funds that were withdrawn.\n', '        @param totalWithdrawn The total amount of funds that were withdrawn.\n', '    */\n', '    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IBasicFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"; */\n', '\n', '/* import "./IBaseFDT.sol"; */\n', '\n', 'interface IBasicFDT is IBaseFDT, IERC20 {\n', '\n', '    event PointsPerShareUpdated(uint256);\n', '\n', '    event PointsCorrectionUpdated(address indexed, int256);\n', '\n', '    function withdrawnFundsOf(address) external view returns (uint256);\n', '\n', '    function accumulativeFundsOf(address) external view returns (uint256);\n', '\n', '    function updateFundsReceived() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/ILoanFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IBasicFDT.sol"; */\n', '\n', 'interface ILoanFDT is IBasicFDT {\n', '\n', '    function fundsToken() external view returns (address);\n', '\n', '    function fundsTokenBalance() external view returns (uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/ILoan.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "../token/interfaces/ILoanFDT.sol"; */\n', '\n', 'interface ILoan is ILoanFDT {\n', '    \n', '    // State Variables\n', '    function liquidityAsset() external view returns (address);\n', '    \n', '    function collateralAsset() external view returns (address);\n', '    \n', '    function fundingLocker() external view returns (address);\n', '    \n', '    function flFactory() external view returns (address);\n', '    \n', '    function collateralLocker() external view returns (address);\n', '    \n', '    function clFactory() external view returns (address);\n', '    \n', '    function borrower() external view returns (address);\n', '    \n', '    function repaymentCalc() external view returns (address);\n', '    \n', '    function lateFeeCalc() external view returns (address);\n', '    \n', '    function premiumCalc() external view returns (address);\n', '    \n', '    function loanState() external view returns (uint256);\n', '    \n', '    function collateralRequiredForDrawdown(uint256) external view returns (uint256);\n', '    \n', '\n', '    // Loan Specifications\n', '    function apr() external view returns (uint256);\n', '    \n', '    function paymentsRemaining() external view returns (uint256);\n', '    \n', '    function paymentIntervalSeconds() external view returns (uint256);\n', '    \n', '    function requestAmount() external view returns (uint256);\n', '    \n', '    function collateralRatio() external view returns (uint256);\n', '    \n', '    function fundingPeriod() external view returns (uint256);\n', '\n', '    function defaultGracePeriod() external view returns (uint256);\n', '    \n', '    function createdAt() external view returns (uint256);\n', '    \n', '    function principalOwed() external view returns (uint256);\n', '    \n', '    function principalPaid() external view returns (uint256);\n', '    \n', '    function interestPaid() external view returns (uint256);\n', '    \n', '    function feePaid() external view returns (uint256);\n', '    \n', '    function excessReturned() external view returns (uint256);\n', '    \n', '    function getNextPayment() external view returns (uint256, uint256, uint256, uint256);\n', '    \n', '    function superFactory() external view returns (address);\n', '    \n', '    function termDays() external view returns (uint256);\n', '    \n', '    function nextPaymentDue() external view returns (uint256);\n', '\n', '    function getFullPayment() external view returns (uint256, uint256, uint256);\n', '    \n', '\n', '    // Liquidations\n', '    function amountLiquidated() external view returns (uint256);\n', '\n', '    function defaultSuffered() external view returns (uint256);\n', '    \n', '    function amountRecovered() external view returns (uint256);\n', '    \n', '    function getExpectedAmountRecovered() external view returns (uint256);\n', '\n', '    function liquidationExcess() external view returns (uint256);\n', '    \n', '\n', '    // Functions\n', '    function fundLoan(address, uint256) external;\n', '    \n', '    function makePayment() external;\n', '    \n', '    function drawdown(uint256) external;\n', '    \n', '    function makeFullPayment() external;\n', '    \n', '    function triggerDefault() external;\n', '    \n', '    function unwind() external;\n', '    \n', '\n', '    // Security \n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '    function loanAdmins(address) external view returns (address);\n', '\n', '    function setLoanAdmin(address, bool) external;\n', '\n', '\n', '    // Misc\n', '    function reclaimERC20(address) external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/ILoanFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface ILoanFactory {\n', '\n', '    function CL_FACTORY() external view returns (uint8);\n', '\n', '    function FL_FACTORY() external view returns (uint8);\n', '\n', '    function INTEREST_CALC_TYPE() external view returns (uint8);\n', '\n', '    function LATEFEE_CALC_TYPE() external view returns (uint8);\n', '\n', '    function PREMIUM_CALC_TYPE() external view returns (uint8);\n', '\n', '    function globals() external view returns (address);\n', '\n', '    function loansCreated() external view returns (uint256);\n', '\n', '    function loans(uint256) external view returns (address);\n', '\n', '    function isLoan(address) external view returns (bool);\n', '\n', '    function loanFactoryAdmins(address) external view returns (bool);\n', '\n', '    function setGlobals(address) external;\n', '    \n', '    function createLoan(address, address, address, address, uint256[5] memory, address[3] memory) external returns (address);\n', '\n', '    function setLoanFactoryAdmin(address, bool) external;\n', '\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '}\n', '\n', '////// contracts/interfaces/IMapleGlobals.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IMapleGlobals {\n', '\n', '    function pendingGovernor() external view returns (address);\n', '\n', '    function governor() external view returns (address);\n', '\n', '    function globalAdmin() external view returns (address);\n', '\n', '    function mpl() external view returns (address);\n', '\n', '    function mapleTreasury() external view returns (address);\n', '\n', '    function isValidBalancerPool(address) external view returns (bool);\n', '\n', '    function treasuryFee() external view returns (uint256);\n', '\n', '    function investorFee() external view returns (uint256);\n', '\n', '    function defaultGracePeriod() external view returns (uint256);\n', '\n', '    function fundingPeriod() external view returns (uint256);\n', '\n', '    function swapOutRequired() external view returns (uint256);\n', '\n', '    function isValidLiquidityAsset(address) external view returns (bool);\n', '\n', '    function isValidCollateralAsset(address) external view returns (bool);\n', '\n', '    function isValidPoolDelegate(address) external view returns (bool);\n', '\n', '    function validCalcs(address) external view returns (bool);\n', '\n', '    function isValidCalc(address, uint8) external view returns (bool);\n', '\n', '    function getLpCooldownParams() external view returns (uint256, uint256);\n', '\n', '    function isValidLoanFactory(address) external view returns (bool);\n', '\n', '    function isValidSubFactory(address, address, uint8) external view returns (bool);\n', '\n', '    function isValidPoolFactory(address) external view returns (bool);\n', '    \n', '    function getLatestPrice(address) external view returns (uint256);\n', '    \n', '    function defaultUniswapPath(address, address) external view returns (address);\n', '\n', '    function minLoanEquity() external view returns (uint256);\n', '    \n', '    function maxSwapSlippage() external view returns (uint256);\n', '\n', '    function protocolPaused() external view returns (bool);\n', '\n', '    function stakerCooldownPeriod() external view returns (uint256);\n', '\n', '    function lpCooldownPeriod() external view returns (uint256);\n', '\n', '    function stakerUnstakeWindow() external view returns (uint256);\n', '\n', '    function lpWithdrawWindow() external view returns (uint256);\n', '\n', '    function oracleFor(address) external view returns (address);\n', '\n', '    function validSubFactories(address, address) external view returns (bool);\n', '\n', '    function setStakerCooldownPeriod(uint256) external;\n', '\n', '    function setLpCooldownPeriod(uint256) external;\n', '\n', '    function setStakerUnstakeWindow(uint256) external;\n', '\n', '    function setLpWithdrawWindow(uint256) external;\n', '\n', '    function setMaxSwapSlippage(uint256) external;\n', '\n', '    function setGlobalAdmin(address) external;\n', '\n', '    function setValidBalancerPool(address, bool) external;\n', '\n', '    function setProtocolPause(bool) external;\n', '\n', '    function setValidPoolFactory(address, bool) external;\n', '\n', '    function setValidLoanFactory(address, bool) external;\n', '\n', '    function setValidSubFactory(address, address, bool) external;\n', '\n', '    function setDefaultUniswapPath(address, address, address) external;\n', '\n', '    function setPoolDelegateAllowlist(address, bool) external;\n', '\n', '    function setCollateralAsset(address, bool) external;\n', '\n', '    function setLiquidityAsset(address, bool) external;\n', '\n', '    function setCalc(address, bool) external;\n', '\n', '    function setInvestorFee(uint256) external;\n', '\n', '    function setTreasuryFee(uint256) external;\n', '\n', '    function setMapleTreasury(address) external;\n', '\n', '    function setDefaultGracePeriod(uint256) external;\n', '\n', '    function setMinLoanEquity(uint256) external;\n', '\n', '    function setFundingPeriod(uint256) external;\n', '\n', '    function setSwapOutRequired(uint256) external;\n', '\n', '    function setPriceOracle(address, address) external;\n', '\n', '    function setPendingGovernor(address) external;\n', '\n', '    function acceptGovernor() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IExtendedFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IBasicFDT.sol"; */\n', '\n', 'interface IExtendedFDT is IBasicFDT {\n', '\n', '    event LossesPerShareUpdated(uint256);\n', '\n', '    event LossesCorrectionUpdated(address indexed, int256);\n', '\n', '    event LossesDistributed(address indexed, uint256);\n', '\n', '    event LossesRecognized(address indexed, uint256, uint256);\n', '\n', '    function lossesPerShare() external view returns (uint256);\n', '\n', '    function recognizableLossesOf(address) external view returns (uint256);\n', '\n', '    function recognizedLossesOf(address) external view returns (uint256);\n', '\n', '    function accumulativeLossesOf(address) external view returns (uint256);\n', '\n', '    function updateLossesReceived() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IStakeLockerFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IExtendedFDT.sol"; */\n', '\n', 'interface IStakeLockerFDT is IExtendedFDT {\n', '\n', '    function fundsToken() external view returns (address);\n', '\n', '    function fundsTokenBalance() external view returns (uint256);\n', '\n', '    function bptLosses() external view returns (uint256);\n', '\n', '    function lossesBalance() external view returns (uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/IStakeLocker.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "../token/interfaces/IStakeLockerFDT.sol"; */\n', '\n', 'interface IStakeLocker is IStakeLockerFDT {\n', '\n', '    function stakeDate(address) external returns (uint256);\n', '\n', '    function stake(uint256) external;\n', '\n', '    function unstake(uint256) external;\n', '\n', '    function pull(address, uint256) external;\n', '\n', '    function setAllowlist(address, bool) external;\n', '\n', '    function openStakeLockerToPublic() external;\n', '\n', '    function openToPublic() external view returns (bool);\n', '\n', '    function allowed(address) external view returns (bool);\n', '\n', '    function updateLosses(uint256) external;\n', '\n', '    function intendToUnstake() external;\n', '\n', '    function unstakeCooldown(address) external view returns (uint256);\n', '\n', '    function lockupPeriod() external view returns (uint256);\n', '\n', '    function stakeAsset() external view returns (address);\n', '\n', '    function liquidityAsset() external view returns (address);\n', '\n', '    function pool() external view returns (address);\n', '\n', '    function setLockupPeriod(uint256) external;\n', '\n', '    function cancelUnstake() external;\n', '\n', '    function increaseCustodyAllowance(address, uint256) external;\n', '\n', '    function transferByCustodian(address, address, uint256) external;\n', '\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '    function isUnstakeAllowed(address) external view returns (bool);\n', '\n', '    function isReceiveAllowed(uint256) external view returns (bool);\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/utils/Address.sol\n', '/* pragma solidity >=0.6.2 <0.8.0; */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "./IERC20.sol"; */\n', '/* import "../../math/SafeMath.sol"; */\n', '/* import "../../utils/Address.sol"; */\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '////// contracts/library/PoolLib.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/math/SafeMath.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol"; */\n', '/* import "../interfaces/ILoan.sol"; */\n', '/* import "../interfaces/IBPool.sol"; */\n', '/* import "../interfaces/IMapleGlobals.sol"; */\n', '/* import "../interfaces/ILiquidityLocker.sol"; */\n', '/* import "../interfaces/IERC20Details.sol"; */\n', '/* import "../interfaces/ILoanFactory.sol"; */\n', '/* import "../interfaces/IStakeLocker.sol"; */\n', '/* import "../interfaces/IDebtLockerFactory.sol"; */\n', '\n', '/// @title PoolLib is a library of utility functions used by Pool.\n', 'library PoolLib {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 public constant MAX_UINT256 = uint256(-1);\n', '    uint256 public constant WAD         = 10 ** 18;\n', '    uint8   public constant DL_FACTORY  = 1;         // Factory type of DebtLockerFactory\n', '\n', '    event         LoanFunded(address indexed loan, address debtLocker, uint256 amountFunded);\n', '    event DepositDateUpdated(address indexed liquidityProvider, uint256 depositDate);\n', '\n', '    /***************************************/\n', '    /*** Pool Delegate Utility Functions ***/\n', '    /***************************************/\n', '\n', '    /** \n', '        @dev   Conducts sanity checks for Pools in the constructor.\n', '        @param globals        Instance of a MapleGlobals.\n', '        @param liquidityAsset Asset used by Pool for liquidity to fund loans.\n', '        @param stakeAsset     Asset escrowed in StakeLocker.\n', '        @param stakingFee     Fee that the Stakers earn on interest, in basis points.\n', '        @param delegateFee    Fee that the Pool Delegate earns on interest, in basis points.\n', '    */\n', '    function poolSanityChecks(\n', '        IMapleGlobals globals, \n', '        address liquidityAsset, \n', '        address stakeAsset, \n', '        uint256 stakingFee, \n', '        uint256 delegateFee\n', '    ) external view {\n', '        IBPool bPool = IBPool(stakeAsset);\n', '\n', '        require(globals.isValidLiquidityAsset(liquidityAsset), "P:INVALID_LIQ_ASSET");\n', '        require(stakingFee.add(delegateFee) <= 10_000,         "P:INVALID_FEES");\n', '        require(\n', '            globals.isValidBalancerPool(address(stakeAsset)) &&\n', '            bPool.isBound(globals.mpl())                     && \n', '            bPool.isBound(liquidityAsset)                    &&\n', '            bPool.isFinalized(), \n', '            "P:INVALID_BALANCER_POOL"\n', '        );\n', '    }\n', '\n', '    /**\n', '        @dev   Funds a Loan for an amount, utilizing the supplied DebtLockerFactory for DebtLockers.\n', '        @dev   It emits a `LoanFunded` event.\n', '        @param debtLockers     Mapping contains the DebtLocker contract address corresponding to the DebtLockerFactory and Loan.\n', '        @param superFactory    Address of the PoolFactory.\n', '        @param liquidityLocker Address of the LiquidityLocker contract attached with this Pool.\n', '        @param loan            Address of the Loan to fund.\n', '        @param dlFactory       The DebtLockerFactory to utilize.\n', '        @param amt             Amount to fund the Loan.\n', '    */\n', '    function fundLoan(\n', '        mapping(address => mapping(address => address)) storage debtLockers,\n', '        address superFactory,\n', '        address liquidityLocker,\n', '        address loan,\n', '        address dlFactory,\n', '        uint256 amt\n', '    ) external {\n', '        IMapleGlobals globals = IMapleGlobals(ILoanFactory(superFactory).globals());\n', '        address loanFactory   = ILoan(loan).superFactory();\n', '\n', '        // Auth checks.\n', '        require(globals.isValidLoanFactory(loanFactory),                        "P:INVALID_LF");\n', '        require(ILoanFactory(loanFactory).isLoan(loan),                         "P:INVALID_L");\n', '        require(globals.isValidSubFactory(superFactory, dlFactory, DL_FACTORY), "P:INVALID_DLF");\n', '\n', '        address debtLocker = debtLockers[loan][dlFactory];\n', '\n', "        // Instantiate DebtLocker if it doesn't exist withing this factory\n", '        if (debtLocker == address(0)) {\n', '            debtLocker = IDebtLockerFactory(dlFactory).newLocker(loan);\n', '            debtLockers[loan][dlFactory] = debtLocker;\n', '        }\n', '    \n', '        // Fund the Loan.\n', '        ILiquidityLocker(liquidityLocker).fundLoan(loan, debtLocker, amt);\n', '        \n', '        emit LoanFunded(loan, debtLocker, amt);\n', '    }\n', '\n', '    /**\n', '        @dev    Helper function used by Pool `claim` function, for when if a default has occurred.\n', '        @param  liquidityAsset                  IERC20 of Liquidity Asset.\n', '        @param  stakeLocker                     Address of StakeLocker.\n', '        @param  stakeAsset                      Address of BPTs.\n', '        @param  defaultSuffered                 Amount of shortfall in defaulted Loan after liquidation.\n', '        @return bptsBurned                      Amount of BPTs burned to cover shortfall.\n', '        @return postBurnBptBal                  Amount of BPTs returned to StakeLocker after burn.\n', '        @return liquidityAssetRecoveredFromBurn Amount of Liquidity Asset recovered from burn.\n', '    */\n', '    function handleDefault(\n', '        IERC20  liquidityAsset,\n', '        address stakeLocker,\n', '        address stakeAsset,\n', '        uint256 defaultSuffered\n', '    ) \n', '        external\n', '        returns (\n', '            uint256 bptsBurned,\n', '            uint256 postBurnBptBal,\n', '            uint256 liquidityAssetRecoveredFromBurn\n', '        ) \n', '    {\n', '\n', '        IBPool bPool = IBPool(stakeAsset);  // stakeAsset = Balancer Pool Tokens\n', '\n', '        // Check amount of Liquidity Asset coverage that exists in the StakeLocker.\n', '        uint256 availableSwapOut = getSwapOutValueLocker(stakeAsset, address(liquidityAsset), stakeLocker);\n', '\n', '        // Pull BPTs from StakeLocker.\n', '        IStakeLocker(stakeLocker).pull(address(this), bPool.balanceOf(stakeLocker));\n', '\n', '        // To maintain accounting, account for direct transfers into Pool.\n', '        uint256 preBurnLiquidityAssetBal = liquidityAsset.balanceOf(address(this));\n', '        uint256 preBurnBptBal            = bPool.balanceOf(address(this));\n', '\n', '        // Burn enough BPTs for Liquidity Asset to cover default suffered.\n', '        bPool.exitswapExternAmountOut(\n', '            address(liquidityAsset), \n', '            availableSwapOut >= defaultSuffered ? defaultSuffered : availableSwapOut,  // Burn BPTs up to defaultSuffered amount\n', '            preBurnBptBal\n', '        );\n', '\n', '        // Return remaining BPTs to StakeLocker.\n', '        postBurnBptBal = bPool.balanceOf(address(this));\n', '        bptsBurned     = preBurnBptBal.sub(postBurnBptBal);\n', '        bPool.transfer(stakeLocker, postBurnBptBal);\n', '        liquidityAssetRecoveredFromBurn = liquidityAsset.balanceOf(address(this)).sub(preBurnLiquidityAssetBal);\n', '        IStakeLocker(stakeLocker).updateLosses(bptsBurned);  // Update StakeLockerFDT loss accounting for BPTs\n', '    }\n', '\n', '    /**\n', '        @dev    Calculates portions of claim from DebtLocker to be used by Pool `claim` function.\n', '        @param  claimInfo           [0] = Total Claimed\n', '                                    [1] = Interest Claimed\n', '                                    [2] = Principal Claimed\n', '                                    [3] = Fee Claimed\n', '                                    [4] = Excess Returned Claimed\n', '                                    [5] = Amount Recovered (from Liquidation)\n', '                                    [6] = Default Suffered\n', '        @param  delegateFee         Portion of interest (basis points) that goes to the Pool Delegate.\n', '        @param  stakingFee          Portion of interest (basis points) that goes to the StakeLocker.\n', '        @return poolDelegatePortion Total funds to send to the Pool Delegate.\n', '        @return stakeLockerPortion  Total funds to send to the StakeLocker.\n', '        @return principalClaim      Total principal claim.\n', '        @return interestClaim       Total interest claim.\n', '    */\n', '    function calculateClaimAndPortions(\n', '        uint256[7] calldata claimInfo,\n', '        uint256 delegateFee,\n', '        uint256 stakingFee\n', '    ) \n', '        external\n', '        pure\n', '        returns (\n', '            uint256 poolDelegatePortion,\n', '            uint256 stakeLockerPortion,\n', '            uint256 principalClaim,\n', '            uint256 interestClaim\n', '        ) \n', '    { \n', '        poolDelegatePortion = claimInfo[1].mul(delegateFee).div(10_000).add(claimInfo[3]);  // Pool Delegate portion of interest plus fee.\n', '        stakeLockerPortion  = claimInfo[1].mul(stakingFee).div(10_000);                     // StakeLocker portion of interest.\n', '\n', '        principalClaim = claimInfo[2].add(claimInfo[4]).add(claimInfo[5]);                                     // principal + excess + amountRecovered\n', '        interestClaim  = claimInfo[1].sub(claimInfo[1].mul(delegateFee).div(10_000)).sub(stakeLockerPortion);  // leftover interest\n', '    }\n', '\n', '    /**\n', '        @dev   Checks that the deactivation is allowed.\n', '        @param globals        Instance of a MapleGlobals.\n', '        @param principalOut   Amount of funds that are already funded to Loans.\n', '        @param liquidityAsset Liquidity Asset of the Pool.\n', '    */\n', '    function validateDeactivation(IMapleGlobals globals, uint256 principalOut, address liquidityAsset) external view {\n', '        require(principalOut <= _convertFromUsd(globals, liquidityAsset, 100), "P:PRINCIPAL_OUTSTANDING");\n', '    }\n', '\n', '    /********************************************/\n', '    /*** Liquidity Provider Utility Functions ***/\n', '    /********************************************/\n', '\n', '    /**\n', '        @dev   Updates the effective deposit date based on how much new capital has been added.\n', '               If more capital is added, the deposit date moves closer to the current timestamp.\n', '        @dev   It emits a `DepositDateUpdated` event.\n', '        @param amt     Total deposit amount.\n', '        @param account Address of account depositing.\n', '    */\n', '    function updateDepositDate(mapping(address => uint256) storage depositDate, uint256 balance, uint256 amt, address account) internal {\n', '        uint256 prevDate = depositDate[account];\n', '\n', '        // prevDate + (now - prevDate) * (amt / (balance + amt))\n', '        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now\n', '        uint256 newDate = (balance + amt) > 0\n', '            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\n', '            : prevDate;\n', '\n', '        depositDate[account] = newDate;\n', '        emit DepositDateUpdated(account, newDate);\n', '    }\n', '\n', '    /**\n', '        @dev Performs all necessary checks for a `transferByCustodian` call.\n', '        @dev From and to must always be equal.\n', '    */\n', '    function transferByCustodianChecks(address from, address to, uint256 amount) external pure {\n', '        require(to == from,                 "P:INVALID_RECEIVER");\n', '        require(amount != uint256(0),       "P:INVALID_AMT");\n', '    }\n', '\n', '    /**\n', '        @dev Performs all necessary checks for an `increaseCustodyAllowance` call.\n', '    */\n', '    function increaseCustodyAllowanceChecks(address custodian, uint256 amount, uint256 newTotalAllowance, uint256 fdtBal) external pure {\n', '        require(custodian != address(0),     "P:INVALID_CUSTODIAN");\n', '        require(amount    != uint256(0),     "P:INVALID_AMT");\n', '        require(newTotalAllowance <= fdtBal, "P:INSUF_BALANCE");\n', '    }\n', '\n', '    /**********************************/\n', '    /*** Governor Utility Functions ***/\n', '    /**********************************/\n', '\n', '    /**\n', '        @dev   Transfers any locked funds to the Governor. Only the Governor can call this function.\n', '        @param token          Address of the token to be reclaimed.\n', '        @param liquidityAsset Address of Liquidity Asset that is supported by the Pool.\n', '        @param globals        Instance of a MapleGlobals.\n', '    */\n', '    function reclaimERC20(address token, address liquidityAsset, IMapleGlobals globals) external {\n', '        require(msg.sender == globals.governor(), "P:NOT_GOV");\n', '        require(token != liquidityAsset && token != address(0), "P:INVALID_TOKEN");\n', '        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n', '    }\n', '\n', '    /************************/\n', '    /*** Getter Functions ***/\n', '    /************************/\n', '\n', '    /**\n', '        @dev Official Balancer pool bdiv() function. Does synthetic float with 10^-18 precision.\n', '    */\n', '    function _bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "P:DIV_ZERO");\n', '        uint256 c0 = a * WAD;\n', '        require(a == 0 || c0 / a == WAD, "P:DIV_INTERNAL");  // bmul overflow\n', '        uint256 c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "P:DIV_INTERNAL");  //  badd require\n', '        return c1 / b;\n', '    }\n', '\n', '    /**\n', '        @dev    Calculates the value of BPT in units of Liquidity Asset.\n', '        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\n', '                of Liquidity Asset into the Pool and swapping back after this function is called.\n', '        @param  _bPool         Address of Balancer pool.\n', '        @param  liquidityAsset Asset used by Pool for liquidity to fund Loans.\n', '        @param  staker         Address that deposited BPTs to StakeLocker.\n', '        @param  stakeLocker    Escrows BPTs deposited by Staker.\n', '        @return USDC value of Staker BPTs.\n', '    */\n', '    function BPTVal(\n', '        address _bPool,\n', '        address liquidityAsset,\n', '        address staker,\n', '        address stakeLocker\n', '    ) external view returns (uint256) {\n', '        IBPool bPool = IBPool(_bPool);\n', '\n', '        // StakeLockerFDTs are minted 1:1 (in wei) in the StakeLocker when staking BPTs, thus representing stake amount.\n', '        // These are burned when withdrawing staked BPTs, thus representing the current stake amount.\n', '        uint256 amountStakedBPT       = IERC20(stakeLocker).balanceOf(staker);\n', '        uint256 totalSupplyBPT        = IERC20(_bPool).totalSupply();\n', '        uint256 liquidityAssetBalance = bPool.getBalance(liquidityAsset);\n', '        uint256 liquidityAssetWeight  = bPool.getNormalizedWeight(liquidityAsset);\n', '\n', '        // liquidityAsset value = (amountStaked/totalSupply) * (liquidityAssetBalance/liquidityAssetWeight)\n', '        return _bdiv(amountStakedBPT, totalSupplyBPT).mul(_bdiv(liquidityAssetBalance, liquidityAssetWeight)).div(WAD);\n', '    }\n', '\n', '    /** \n', '        @dev    Calculates Liquidity Asset swap out value of staker BPT balance escrowed in StakeLocker.\n', '        @param  _bPool         Balancer pool that issues the BPTs.\n', '        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\n', '        @param  staker         Address that deposited BPTs to StakeLocker.\n', '        @param  stakeLocker    Escrows BPTs deposited by Staker.\n', '        @return liquidityAsset Swap out value of staker BPTs.\n', '    */\n', '    function getSwapOutValue(\n', '        address _bPool,\n', '        address liquidityAsset,\n', '        address staker,\n', '        address stakeLocker\n', '    ) public view returns (uint256) {\n', '        return _getSwapOutValue(_bPool, liquidityAsset, IERC20(stakeLocker).balanceOf(staker));\n', '    }\n', '\n', '    /** \n', '        @dev    Calculates Liquidity Asset swap out value of entire BPT balance escrowed in StakeLocker.\n', '        @param  _bPool         Balancer pool that issues the BPTs.\n', '        @param  liquidityAsset Swap out asset (e.g. USDC) to receive when burning BPTs.\n', '        @param  stakeLocker    Escrows BPTs deposited by Staker.\n', '        @return liquidityAsset Swap out value of StakeLocker BPTs.\n', '    */\n', '    function getSwapOutValueLocker(\n', '        address _bPool,\n', '        address liquidityAsset,\n', '        address stakeLocker\n', '    ) public view returns (uint256) {\n', '        return _getSwapOutValue(_bPool, liquidityAsset, IBPool(_bPool).balanceOf(stakeLocker));\n', '    }\n', '\n', '    function _getSwapOutValue(\n', '        address _bPool,\n', '        address liquidityAsset,\n', '        uint256 poolAmountIn\n', '    ) internal view returns (uint256) {\n', '        // Fetch Balancer pool token information\n', '        IBPool bPool            = IBPool(_bPool);\n', '        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\n', '        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\n', '        uint256 poolSupply      = bPool.totalSupply();\n', '        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\n', '        uint256 swapFee         = bPool.getSwapFee();\n', '\n', '        // Returns the amount of liquidityAsset that can be recovered from BPT burning\n', '        uint256 tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\n', '            tokenBalanceOut,\n', '            tokenWeightOut,\n', '            poolSupply,\n', '            totalWeight,\n', '            poolAmountIn,\n', '            swapFee\n', '        );\n', '\n', '        // Max amount that can be swapped based on amount of liquidityAsset in the Balancer Pool\n', '        uint256 maxSwapOut = tokenBalanceOut.mul(bPool.MAX_OUT_RATIO()).div(WAD);  \n', '\n', '        return tokenAmountOut <= maxSwapOut ? tokenAmountOut : maxSwapOut;\n', '    }\n', '\n', '    /**\n', '        @dev    Calculates BPTs required if burning BPTs for liquidityAsset, given supplied tokenAmountOutRequired.\n', '        @dev    Vulnerable to flash-loan attacks where the attacker can artificially inflate the BPT price by swapping a large amount\n', '                of liquidityAsset into the pool and swapping back after this function is called.\n', '        @param  _bPool                       Balancer pool that issues the BPTs.\n', '        @param  liquidityAsset               Swap out asset (e.g. USDC) to receive when burning BPTs.\n', '        @param  staker                       Address that deposited BPTs to stakeLocker.\n', '        @param  stakeLocker                  Escrows BPTs deposited by staker.\n', '        @param  liquidityAssetAmountRequired Amount of liquidityAsset required to recover.\n', '        @return poolAmountInRequired         poolAmountIn required.\n', '        @return stakerBalance                poolAmountIn currently staked.\n', '    */\n', '    function getPoolSharesRequired(\n', '        address _bPool,\n', '        address liquidityAsset,\n', '        address staker,\n', '        address stakeLocker,\n', '        uint256 liquidityAssetAmountRequired\n', '    ) public view returns (uint256 poolAmountInRequired, uint256 stakerBalance) {\n', '        // Fetch Balancer pool token information.\n', '        IBPool bPool = IBPool(_bPool);\n', '\n', '        uint256 tokenBalanceOut = bPool.getBalance(liquidityAsset);\n', '        uint256 tokenWeightOut  = bPool.getDenormalizedWeight(liquidityAsset);\n', '        uint256 poolSupply      = bPool.totalSupply();\n', '        uint256 totalWeight     = bPool.getTotalDenormalizedWeight();\n', '        uint256 swapFee         = bPool.getSwapFee();\n', '\n', '        // Fetch amount of BPTs required to burn to receive Liquidity Asset amount required.\n', '        poolAmountInRequired = bPool.calcPoolInGivenSingleOut(\n', '            tokenBalanceOut,\n', '            tokenWeightOut,\n', '            poolSupply,\n', '            totalWeight,\n', '            liquidityAssetAmountRequired,\n', '            swapFee\n', '        );\n', '\n', '        // Fetch amount staked in StakeLocker by Staker.\n', '        stakerBalance = IERC20(stakeLocker).balanceOf(staker);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns information on the stake requirements.\n', '        @param  globals                    Instance of a MapleGlobals.\n', '        @param  balancerPool               Address of Balancer pool.\n', '        @param  liquidityAsset             Address of Liquidity Asset, to be returned from swap out.\n', '        @param  poolDelegate               Address of Pool Delegate.\n', '        @param  stakeLocker                Address of StakeLocker.\n', '        @return swapOutAmountRequired      Min amount of Liquidity Asset coverage from staking required (in Liquidity Asset units).\n', '        @return currentPoolDelegateCover   Present amount of Liquidity Asset coverage from Pool Delegate stake (in Liquidity Asset units).\n', '        @return enoughStakeForFinalization If enough stake is present from Pool Delegate for Pool finalization.\n', '        @return poolAmountInRequired       BPTs required for minimum Liquidity Asset coverage.\n', '        @return poolAmountPresent          Current staked BPTs.\n', '    */\n', '    function getInitialStakeRequirements(IMapleGlobals globals, address balancerPool, address liquidityAsset, address poolDelegate, address stakeLocker) external view returns (\n', '        uint256 swapOutAmountRequired,\n', '        uint256 currentPoolDelegateCover,\n', '        bool    enoughStakeForFinalization,\n', '        uint256 poolAmountInRequired,\n', '        uint256 poolAmountPresent\n', '    ) {\n', '        swapOutAmountRequired = _convertFromUsd(globals, liquidityAsset, globals.swapOutRequired());\n', '        (\n', '            poolAmountInRequired,\n', '            poolAmountPresent\n', '        ) = getPoolSharesRequired(balancerPool, liquidityAsset, poolDelegate, stakeLocker, swapOutAmountRequired);\n', '\n', '        currentPoolDelegateCover   = getSwapOutValue(balancerPool, liquidityAsset, poolDelegate, stakeLocker);\n', '        enoughStakeForFinalization = poolAmountPresent >= poolAmountInRequired;\n', '    }\n', '\n', '    /************************/\n', '    /*** Helper Functions ***/\n', '    /************************/\n', '\n', '    /**\n', '        @dev   Converts from WAD precision to Liquidity Asset precision.\n', '        @param amt                    Amount to convert.\n', '        @param liquidityAssetDecimals Liquidity Asset decimal.\n', '    */\n', '    function fromWad(uint256 amt, uint256 liquidityAssetDecimals) external pure returns (uint256) {\n', '        return amt.mul(10 ** liquidityAssetDecimals).div(WAD);\n', '    }\n', '\n', '    /** \n', '        @dev    Returns Liquidity Asset in Liquidity Asset units when given integer USD (E.g., $100 = 100).\n', '        @param  globals        Instance of a MapleGlobals.\n', '        @param  liquidityAsset Liquidity Asset of the pool.\n', '        @param  usdAmount      USD amount to convert, in integer units (e.g., $100 = 100).\n', '        @return usdAmount worth of Liquidity Asset, in Liquidity Asset units.\n', '    */\n', '    function _convertFromUsd(IMapleGlobals globals, address liquidityAsset, uint256 usdAmount) internal view returns (uint256) {\n', '        return usdAmount\n', '            .mul(10 ** 8)                                         // Cancel out 10 ** 8 decimals from oracle.\n', '            .mul(10 ** IERC20Details(liquidityAsset).decimals())  // Convert to Liquidity Asset precision.\n', '            .div(globals.getLatestPrice(liquidityAsset));         // Convert to Liquidity Asset value.\n', '    }\n', '}']