['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./interfaces/IDeFiatGov.sol";\n', 'import "./utils/DeFiatUtils.sol";\n', '\n', 'contract DeFiatGov is IDeFiatGov, DeFiatUtils {\n', '    event RightsUpdated(address indexed caller, address indexed subject, uint256 level);\n', '    event RightsRevoked(address indexed caller, address indexed subject);\n', '    event MastermindUpdated(address indexed caller, address indexed subject);\n', '    event FeeDestinationUpdated(address indexed caller, address feeDestination);\n', '    event TxThresholdUpdated(address indexed caller, uint256 txThreshold);\n', '    event BurnRateUpdated(address indexed caller, uint256 burnRate);\n', '    event FeeRateUpdated(address indexed caller, uint256 feeRate);\n', '\n', '    address public override mastermind;\n', '    mapping (address => uint256) private actorLevel; // governance = multi-tier level\n', '    \n', '    address private feeDestination; // target address for fees\n', '    uint256 private txThreshold; // min dft transferred to mint dftp\n', '    uint256 private burnRate; // % burn on each tx, 10 = 1%\n', '    uint256 private feeRate; // % fee on each tx, 10 = 1% \n', '\n', '    modifier onlyMastermind {\n', '        require(msg.sender == mastermind, "Gov: Only Mastermind");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernor {\n', '        require(actorLevel[msg.sender] >= 2,"Gov: Only Governors");\n', '        _;\n', '    }\n', '\n', '    modifier onlyPartner {\n', '        require(actorLevel[msg.sender] >= 1,"Gov: Only Partners");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        mastermind = msg.sender;\n', '        actorLevel[mastermind] = 3;\n', '        feeDestination = mastermind;\n', '    }\n', '    \n', '    // VIEW\n', '\n', '    // Gov - Actor Level\n', '    function viewActorLevelOf(address _address) public override view returns (uint256) {\n', '        return actorLevel[_address];\n', '    }\n', '\n', '    // Gov - Fee Destination / Treasury\n', '    function viewFeeDestination() public override view returns (address) {\n', '        return feeDestination;\n', '    }\n', '\n', '    // Points - Transaction Threshold\n', '    function viewTxThreshold() public override view returns (uint256) {\n', '        return txThreshold;\n', '    }\n', '\n', '    // Token - Burn Rate\n', '    function viewBurnRate() public override view returns (uint256) {\n', '        return burnRate;\n', '    }\n', '\n', '    // Token - Fee Rate\n', '    function viewFeeRate() public override view returns (uint256) {\n', '        return feeRate;\n', '    }\n', '\n', '    // Governed Functions\n', '\n', "    // Update Actor Level, can only be performed with level strictly lower than msg.sender's level\n", '    // Add/Remove user governance rights\n', '    function setActorLevel(address user, uint256 level) public {\n', '        require(level < actorLevel[msg.sender], "ActorLevel: Can only grant rights below you");\n', '        require(actorLevel[user] < actorLevel[msg.sender], "ActorLevel: Can only update users below you");\n', '\n', '        actorLevel[user] = level; // updates level -> adds or removes rights\n', '        emit RightsUpdated(msg.sender, user, level);\n', '    }\n', '    \n', '    // MasterMind - Revoke all rights\n', '    function removeAllRights(address user) public onlyMastermind {\n', '        require(user != mastermind, "Mastermind: Cannot revoke own rights");\n', '\n', '        actorLevel[user] = 0; \n', '        emit RightsRevoked(msg.sender, user);\n', '    }\n', '\n', '    // Mastermind - Transfer ownership of Governance\n', '    function setMastermind(address _mastermind) public onlyMastermind {\n', '        require(_mastermind != mastermind, "Mastermind: Cannot call self");\n', '\n', '        mastermind = _mastermind; // Only one mastermind\n', '        actorLevel[_mastermind] = 3;\n', '        actorLevel[mastermind] = 2; // new level for previous mastermind\n', '        emit MastermindUpdated(msg.sender, mastermind);\n', '    }\n', '\n', '    // Gov - Update the Fee Destination\n', '    function setFeeDestination(address _feeDestination) public onlyGovernor {\n', '        require(_feeDestination != feeDestination, "FeeDestination: No destination change");\n', '\n', '        feeDestination = _feeDestination;\n', '        emit FeeDestinationUpdated(msg.sender, feeDestination);\n', '    }\n', '\n', '    // Points - Update the Tx Threshold\n', '    function changeTxThreshold(uint _txThreshold) public onlyGovernor {\n', '        require(_txThreshold != txThreshold, "TxThreshold: No threshold change");\n', '\n', '        txThreshold = _txThreshold;\n', '        emit TxThresholdUpdated(msg.sender, txThreshold);\n', '    }\n', '    \n', '    // Token - Update the Burn Rate\n', '    function changeBurnRate(uint _burnRate) public onlyGovernor {\n', '        require(_burnRate <= 200, "BurnRate: 20% limit");\n', '\n', '        burnRate = _burnRate; \n', '        emit BurnRateUpdated(msg.sender, burnRate);\n', '    }\n', '\n', '    // Token - Update the Fee Rate\n', '    function changeFeeRate(uint _feeRate) public onlyGovernor {\n', '        require(_feeRate <= 200, "FeeRate: 20% limit");\n', '\n', '        feeRate = _feeRate;\n', '        emit FeeRateUpdated(msg.sender, feeRate);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IDeFiatGov {\n', '    function mastermind() external view returns (address);\n', '    function viewActorLevelOf(address _address) external view returns (uint256);\n', '    function viewFeeDestination() external view returns (address);\n', '    function viewTxThreshold() external view returns (uint256);\n', '    function viewBurnRate() external view returns (uint256);\n', '    function viewFeeRate() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../lib/@openzeppelin/token/ERC20/IERC20.sol";\n', 'import "../lib/@openzeppelin/access/Ownable.sol";\n', '\n', 'abstract contract DeFiatUtils is Ownable {\n', '    event TokenSweep(address indexed user, address indexed token, uint256 amount);\n', '\n', '    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\n', '    function sweep(address token) external onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        require(amount > 0, "Sweep: No token balance");\n', '\n', '        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\n', '\n', '        if (address(this).balance > 0) {\n', '            payable(msg.sender).transfer(address(this).balance);\n', '        }\n', '\n', '        emit TokenSweep(msg.sender, token, amount);\n', '    }\n', '\n', '    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\n', '    function kill() external onlyOwner {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}']