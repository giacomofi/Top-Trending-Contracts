['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol --\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', ' abstract contract Ownable is Pausable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor(address ownerAddress) {\n', '        _owner = ownerAddress;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnershipNew(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/UnifarmFixed.sol\n', '\n', 'pragma solidity 0.7.4;\n', '\n', 'abstract contract OwnableV1 {\n', '    function transferOwnership(address newOwner) external virtual;\n', '    function owner() external virtual returns (address);\n', '}\n', '\n', 'abstract contract admin1 is OwnableV1 {\n', '   \n', '    \n', '    mapping(address => address[]) public tokensSequenceList;\n', '    mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\n', '    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '    uint256[] public intervalDays; // = [1, 8, 15, 22, 29, 36];\n', '    uint256 public stakeDuration;\n', '    address[] public tokens;\n', '    \n', '    function safeWithdraw(address tokenAddress, uint256 amount) external virtual;\n', '}\n', '\n', 'abstract contract UnifarmV11 is admin1 {\n', '    // Stores Stake Details\n', '    struct stakeInfo {\n', '        address user;\n', '        bool[] isActive;\n', '        address[] referrer;\n', '        address[] tokenAddress;\n', '        uint256[] stakeId;\n', '        uint256[] stakedAmount;\n', '        uint256[] startTime;\n', '    }\n', '\n', '    // Mapping\n', '    mapping(address => stakeInfo) public stakingDetails;\n', '    mapping(address => mapping(address => uint256)) public userTotalStaking;\n', '    mapping(address => uint256) public totalStaking;\n', '    uint256 public DAYS;\n', '\n', '    function viewStakingDetails(address _user) external virtual  view returns ( address[] memory, bool[] memory,\n', '            uint256[] memory, uint256[] memory, uint256[] memory);\n', '}\n', '\n', 'contract unifarmV1Fixed is Ownable {\n', '    \n', '    UnifarmV11 public UniV1;\n', '    \n', '    using SafeMath for uint256;\n', '    uint256 intervalLength = 6;\n', '    \n', '    mapping(address => uint256) public totalUnstaking;\n', '    mapping(address => mapping(uint256 => bool)) public unstakeStatus;\n', '    \n', '    constructor(address V1Address) Ownable(msg.sender)  {\n', '        UniV1 = UnifarmV11(V1Address);\n', '    }\n', '    \n', '    event Claim(address indexed userAddress, address indexed stakedTokenAddress, address indexed tokenAddress,uint256 claimRewards,uint256 Time);\n', '    event UnStake(address indexed userAddress, address indexed unStakedtokenAddress, uint256 unStakedAmount, uint256 Time);\n', '    \n', '    \n', '    function init(address[] memory tokenAddress) external onlyOwner returns(bool) {\n', '        for(uint i =0; i< tokenAddress.length; i++) {\n', '            transferFromContractA(tokenAddress[i]);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFromContractA(address tokenAddress) internal {\n', '        uint bal = IERC20(tokenAddress).balanceOf(address(UniV1));\n', '        \n', '        if(bal > 0)\n', '            UniV1.safeWithdraw(tokenAddress, bal);\n', '    }\n', '    \n', '    /**\n', '     * @notice Get rewards for one day\n', '     * @param stakedAmount Stake amount of the user\n', '     * @param stakedToken Staked token address of the user\n', '     * @param rewardToken Reward token address\n', '     * @param totalStake Reward token address\n', '     * @return reward One dayh reward for the user\n', '     */\n', '    function getOneDayReward(uint256 stakedAmount,address stakedToken,address rewardToken,uint256 totalStake) public view returns (uint256 reward) {\n', '       \n', '            reward = (stakedAmount.mul(UniV1.tokenDailyDistribution(stakedToken,rewardToken))).div(totalStake);\n', '        \n', '    }\n', ' \n', '    /**\n', '     * @notice Get rewards for one day\n', '     * @param stakedToken Stake amount of the user\n', '     * @param tokenAddress Reward token address\n', '     * @param amount Amount to be transferred as reward\n', '     */\n', '    function sendToken(address stakedToken,address tokenAddress,uint256 amount) internal {\n', '        // Checks\n', '        if (tokenAddress != address(0)) {\n', '            require(\n', '                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '                "SEND : Insufficient Balance"\n', '            );\n', '            // Transfer of rewards\n', '            require(IERC20(tokenAddress).transfer(msg.sender, amount), \n', '                    "Transfer failed");\n', '\n', '             // Emit state changes\n', '            emit Claim(\n', '                msg.sender,\n', '                stakedToken,\n', '                tokenAddress,\n', '                amount,\n', '                block.timestamp\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Unstake and claim rewards\n', '     * @param stakeId Stake ID of the user\n', '     */\n', '    function unStake(uint256 stakeId) external  {\n', '        \n', '        (address[] memory tokenAddress,bool[] memory activeStatus, ,\n', '            uint256[] memory stakedAmount,uint256[] memory startTime) = (UniV1.viewStakingDetails(msg.sender));\n', '            \n', '       \n', '       \n', '        // Checks\n', '        require(\n', '            unstakeStatus[msg.sender][stakeId] == false && activeStatus[stakeId] == true,\n', '            "CLAIM : Insufficient Staked Amount"\n', '        );\n', '        \n', '        transferFromContractA(tokenAddress[stakeId]);\n', '\n', '        // State updation\n', '        uint totalStaking1 = UniV1.totalStaking(tokenAddress[stakeId]).sub(totalUnstaking[tokenAddress[stakeId]]);\n', '        totalUnstaking[tokenAddress[stakeId]] = totalUnstaking[tokenAddress[stakeId]].add(stakedAmount[stakeId]);\n', '        unstakeStatus[msg.sender][stakeId] = true;\n', '        \n', '        \n', '\n', '        // Balance check\n', '        require(\n', '            IERC20(tokenAddress[stakeId]).balanceOf(\n', '                address(this)\n', '            ) >= stakedAmount[stakeId],\n', '            "UNSTAKE : Insufficient Balance"\n', '        );\n', '\n', '        // Transfer staked token back to user\n', '            IERC20(tokenAddress[stakeId]).transfer(msg.sender, stakedAmount[stakeId]);\n', '\n', '        // Claim pending rewards\n', '            claimRewards(startTime[stakeId], stakedAmount[stakeId], tokenAddress[stakeId], totalStaking1);\n', '\n', '        // Emit state changes\n', '        emit UnStake(\n', '            msg.sender,\n', '            tokenAddress[stakeId],\n', '            stakedAmount[stakeId],\n', '            block.timestamp\n', '        );\n', '        \n', '    }\n', '    \n', '     /**\n', '     * @notice Claim accumulated rewards\n', '     * @param stakedAmount Staked amount of the user\n', '     */\n', '    function claimRewards(uint256 stakeTime, uint256 stakedAmount, address stakedToken, uint256 totalStake) internal {\n', '        // Local variables\n', '        uint256 interval;\n', '\n', '        interval = stakeTime.add(UniV1.stakeDuration());\n', '        \n', '        // Interval calculation\n', '        if (interval > block.timestamp) {\n', '            uint256 endOfProfit = block.timestamp;\n', '            interval = endOfProfit.sub(stakeTime);\n', '        } else {\n', '            uint256 endOfProfit = stakeTime.add(UniV1.stakeDuration());\n', '            interval = endOfProfit.sub(stakeTime);\n', '        }\n', '\n', '        // Reward calculation\n', '        if (interval >= UniV1.DAYS())\n', '            _rewardCalculation(stakedAmount, interval, stakedToken, totalStake);\n', '    }\n', '    \n', '    function _rewardCalculation(uint256 stakedAmount,uint256 interval, address stakedToken,uint256 totalStake) internal {\n', '        uint256 rewardsEarned;\n', '        uint256 noOfDays;\n', '        \n', '        noOfDays = interval.div(UniV1.DAYS());\n', '        rewardsEarned = noOfDays.mul(\n', '            getOneDayReward(\n', '                stakedAmount,\n', '                stakedToken,\n', '                stakedToken,\n', '                totalStake\n', '            )\n', '        );\n', '\n', '\n', '        //  Rewards Send\n', '        sendToken(\n', '            stakedToken,\n', '            stakedToken,\n', '            rewardsEarned\n', '        );\n', '\n', '        uint8 i = 1;\n', '        while (i < intervalLength) { \n', '            \n', '            if (noOfDays >= UniV1.intervalDays(i)) {\n', '                uint256 balDays = noOfDays.sub((UniV1.intervalDays(i).sub(1)));\n', '\n', '                address rewardToken = UniV1.tokensSequenceList(stakedToken,i);\n', '                \n', '                transferFromContractA(rewardToken);\n', '\n', '\n', '                if ( rewardToken != stakedToken \n', '                        && UniV1.tokenBlockedStatus(stakedToken,rewardToken) ==  false) {\n', '                    rewardsEarned = balDays.mul(\n', '                        getOneDayReward(\n', '                            stakedAmount,\n', '                            stakedToken,\n', '                            rewardToken,\n', '                            totalStake\n', '                        )\n', '                    );\n', '                    \n', '\n', '                    //  Rewards Send\n', '                    sendToken(\n', '                        stakedToken,\n', '                        rewardToken,\n', '                        rewardsEarned\n', '                    );\n', '                }\n', '                i = i + 1;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function updateIntervalLength(uint256 ilength) external onlyOwner returns(bool) {\n', '        intervalLength = ilength;\n', '        return true;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public override onlyOwner {\n', '        UniV1.transferOwnership(newOwner);\n', '    }\n', '    \n', '    function safeWithdraw(address tokenAddress, uint256 amount) public onlyOwner {\n', '         \n', '        require(\n', '            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '            "Insufficient Balance"\n', '        );\n', '        require(\n', '            IERC20(tokenAddress).transfer(owner(), amount) == true,\n', '            "Transfer failed");\n', '    }\n', '    \n', '}']