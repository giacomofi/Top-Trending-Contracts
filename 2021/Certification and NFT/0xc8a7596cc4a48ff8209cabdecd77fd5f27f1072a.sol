['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-05\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.8.4;\n', '\n', '/**\n', ' * Contract that will forward any incoming Ether from clients on Pago Linea\n', ' *\n', ' * website www.pagolinea.com\n', ' */\n', 'contract Forwarder {\n', '    // Address to which any funds sent to this contract will be forwarded\n', '    address payable private destinationAddress=payable(0x8F61E209e82d90c8781F2fDACF90b2ccA49F223f);\n', '    address private owner;\n', '\n', '    event Sended(address, uint, uint256);\n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '\n', '    // modifier to check if caller is owner\n', '    modifier isOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev Set contract deployer as owner\n', '      */\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Default function; Gets called when Ether is deposited, and forwards it to the destination address\n', '     */\n', '    receive() external payable {\n', '        destinationAddress.transfer(msg.value);\n', '        emit Sended(msg.sender, msg.value, 0);\n', '    }\n', '\n', '    function send( uint256 _hash) external payable {\n', '        require( msg.value > 0, "Invalid amount");\n', '        require( _hash > 0, "Invalid hash");\n', '        (bool sent, ) = destinationAddress.call{value: msg.value}("");\n', '        require(sent, "Failed to send Ether");\n', '        emit Sended(msg.sender, msg.value, _hash);\n', '    }\n', '\n', '    /**\n', '     * It is possible that funds were sent to this address before the contract was deployed.\n', '     * We can flush those funds to the destination address.\n', '     */\n', '    function flush() public isOwner{\n', '        destinationAddress.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '       * @dev Change destinationAddress\n', '       * @param newDestinationAddress address of destination\n', '       */\n', '    function changeDestination(address payable newDestinationAddress) public isOwner {\n', '        destinationAddress = newDestinationAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev Change owner\n', '    * @param newOwner address of new owner\n', '    */\n', '    function changeOwner(address newOwner) public isOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}']