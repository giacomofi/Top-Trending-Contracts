['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-18\n', '*/\n', '\n', '// File: interfaces/DelegatorInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract DelegationStorage {\n', '    /**\n', '     * @notice Implementation address for this contract\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'abstract contract DelegatorInterface is DelegationStorage {\n', '    /**\n', '     * @notice Emitted when implementation is changed\n', '     */\n', '    event NewImplementation(\n', '        address oldImplementation,\n', '        address newImplementation\n', '    );\n', '\n', '    /**\n', '     * @notice Called by the admin to update the implementation of the delegator\n', '     * @param implementation_ The address of the new implementation for delegation\n', '     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n', '     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n', '     */\n', '    function _setImplementation(\n', '        address implementation_,\n', '        bool allowResign,\n', '        bytes memory becomeImplementationData\n', '    ) public virtual;\n', '}\n', '\n', 'abstract contract DelegateInterface is DelegationStorage {\n', '    /**\n', '     * @notice Called by the delegator on a delegate to initialize it for duty\n', '     * @dev Should revert if any issues arise which make it unfit for delegation\n', '     * @param data The encoded bytes data for any initialization\n', '     */\n', '    function _becomeImplementation(bytes memory data) public virtual;\n', '\n', '    /**\n', '     * @notice Called by the delegator on a delegate to forfeit its responsibility\n', '     */\n', '    function _resignImplementation() public virtual;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/FullMath.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n', '// license is CC-BY-4.0\n', 'library FullMath {\n', '    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n', '        uint256 mm = mulmod(x, y, uint256(-1));\n', '        l = x * y;\n', '        h = mm - l;\n', '        if (mm < l) h -= 1;\n', '    }\n', '\n', '    function fullDiv(\n', '        uint256 l,\n', '        uint256 h,\n', '        uint256 d\n', '    ) private pure returns (uint256) {\n', '        uint256 pow2 = d & -d;\n', '        d /= pow2;\n', '        l /= pow2;\n', '        l += h * ((-pow2) / pow2 + 1);\n', '        uint256 r = 1;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        return l * r;\n', '    }\n', '\n', '    function mulDiv(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 d\n', '    ) internal pure returns (uint256) {\n', '        (uint256 l, uint256 h) = fullMul(x, y);\n', '\n', '        uint256 mm = mulmod(x, y, d);\n', '        if (mm > l) h -= 1;\n', '        l -= mm;\n', '\n', '        if (h == 0) return l / d;\n', '\n', "        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n", '        return fullDiv(l, h, d);\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/Babylonian.sol\n', '\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    // credit for this implementation goes to\n', '    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '    function sqrt(uint256 x) internal pure returns (uint256) {\n', '        if (x == 0) return 0;\n', '        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n', '        // however that code costs significantly more gas\n', '        uint256 xx = x;\n', '        uint256 r = 1;\n', '        if (xx >= 0x100000000000000000000000000000000) {\n', '            xx >>= 128;\n', '            r <<= 64;\n', '        }\n', '        if (xx >= 0x10000000000000000) {\n', '            xx >>= 64;\n', '            r <<= 32;\n', '        }\n', '        if (xx >= 0x100000000) {\n', '            xx >>= 32;\n', '            r <<= 16;\n', '        }\n', '        if (xx >= 0x10000) {\n', '            xx >>= 16;\n', '            r <<= 8;\n', '        }\n', '        if (xx >= 0x100) {\n', '            xx >>= 8;\n', '            r <<= 4;\n', '        }\n', '        if (xx >= 0x10) {\n', '            xx >>= 4;\n', '            r <<= 2;\n', '        }\n', '        if (xx >= 0x8) {\n', '            r <<= 1;\n', '        }\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1; // Seven iterations should be enough\n', '        uint256 r1 = x / r;\n', '        return (r < r1 ? r : r1);\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/BitMath.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'library BitMath {\n', '    // returns the 0 indexed position of the most significant bit of the input x\n', '    // s.t. x >= 2**msb and x < 2**(msb+1)\n', '    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::mostSignificantBit: zero');\n", '\n', '        if (x >= 0x100000000000000000000000000000000) {\n', '            x >>= 128;\n', '            r += 128;\n', '        }\n', '        if (x >= 0x10000000000000000) {\n', '            x >>= 64;\n', '            r += 64;\n', '        }\n', '        if (x >= 0x100000000) {\n', '            x >>= 32;\n', '            r += 32;\n', '        }\n', '        if (x >= 0x10000) {\n', '            x >>= 16;\n', '            r += 16;\n', '        }\n', '        if (x >= 0x100) {\n', '            x >>= 8;\n', '            r += 8;\n', '        }\n', '        if (x >= 0x10) {\n', '            x >>= 4;\n', '            r += 4;\n', '        }\n', '        if (x >= 0x4) {\n', '            x >>= 2;\n', '            r += 2;\n', '        }\n', '        if (x >= 0x2) r += 1;\n', '    }\n', '\n', '    // returns the 0 indexed position of the least significant bit of the input x\n', '    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\n', '    // i.e. the bit at the index is set and the mask of all lower bits is 0\n', '    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::leastSignificantBit: zero');\n", '\n', '        r = 255;\n', '        if (x & uint128(-1) > 0) {\n', '            r -= 128;\n', '        } else {\n', '            x >>= 128;\n', '        }\n', '        if (x & uint64(-1) > 0) {\n', '            r -= 64;\n', '        } else {\n', '            x >>= 64;\n', '        }\n', '        if (x & uint32(-1) > 0) {\n', '            r -= 32;\n', '        } else {\n', '            x >>= 32;\n', '        }\n', '        if (x & uint16(-1) > 0) {\n', '            r -= 16;\n', '        } else {\n', '            x >>= 16;\n', '        }\n', '        if (x & uint8(-1) > 0) {\n', '            r -= 8;\n', '        } else {\n', '            x >>= 8;\n', '        }\n', '        if (x & 0xf > 0) {\n', '            r -= 4;\n', '        } else {\n', '            x >>= 4;\n', '        }\n', '        if (x & 0x3 > 0) {\n', '            r -= 2;\n', '        } else {\n', '            x >>= 2;\n', '        }\n', '        if (x & 0x1 > 0) r -= 1;\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\n', '\n', 'pragma solidity >=0.4.0;\n', '\n', '\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 public constant RESOLUTION = 112;\n', '    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\n', '    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\n', '    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n', '        uint256 z = 0;\n', "        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\n", '        return uq144x112(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by an int and decode, returning an int\n', '    // reverts on overflow\n', '    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\n', '        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\n', "        require(z < 2**255, 'FixedPoint::muli: overflow');\n", '        return y < 0 ? -int256(z) : int256(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    // lossy\n', '    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', '        if (self._x == 0 || other._x == 0) {\n', '            return uq112x112(0);\n', '        }\n', '        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\n', '        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\n', '\n', '        // partial products\n', '        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\n', '        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\n', '        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\n', '        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\n', '\n', '        // so the bit shift does not overflow\n', "        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\n", '\n', '        // this cannot exceed 256 bits, all values are 224 bits\n', '        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\n', '\n', '        // so the cast does not overflow\n', "        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\n", '\n', '        return uq112x112(uint224(sum));\n', '    }\n', '\n', '    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', "        require(other._x > 0, 'FixedPoint::divuq: division by zero');\n", '        if (self._x == other._x) {\n', '            return uq112x112(uint224(Q112));\n', '        }\n', '        if (self._x <= uint144(-1)) {\n', '            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\n', "            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '            return uq112x112(uint224(value));\n', '        }\n', '\n', '        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\n', "        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '        return uq112x112(uint224(result));\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // can be lossy\n', '    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n', "        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n", '        if (numerator == 0) return FixedPoint.uq112x112(0);\n', '\n', '        if (numerator <= uint144(-1)) {\n', '            uint256 result = (numerator << RESOLUTION) / denominator;\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        } else {\n', '            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        }\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    // reverts on overflow\n', '    // lossy\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\n", "        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    // lossy between 0/1 and 40 bits\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        if (self._x <= uint144(-1)) {\n', '            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n', '        }\n', '\n', '        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n', '        safeShiftBits -= safeShiftBits % 2;\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: interfaces/IInvitation.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IInvitation{\n', '\n', '    function acceptInvitation(address _invitor) external;\n', '\n', '    function getInvitation(address _sender) external view returns(address _invitor, address[] memory _invitees, bool _isWithdrawn);\n', '    \n', '}\n', '\n', '// File: contracts/ActivityBase.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract ActivityBase is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    address public admin;\n', '    \n', '    address public marketingFund;\n', '    // token as the unit of measurement\n', '    address public WETHToken;\n', "    // invitee's supply 5% deposit weight to its invitor\n", '    uint256 public constant INVITEE_WEIGHT = 20; \n', "    // invitee's supply 10% deposit weight to its invitor\n", '    uint256 public constant INVITOR_WEIGHT = 10;\n', '\n', '    // The block number when SHARD mining starts.\n', '    uint256 public startBlock;\n', '\n', '    // dev fund\n', '    uint256 public userDividendWeight;\n', '    uint256 public devDividendWeight;\n', '    address public developerDAOFund;\n', '\n', '    // deposit limit\n', '    uint256 public amountFeeRateNumerator;\n', '    uint256 public amountfeeRateDenominator;\n', '\n', '    // contract sender fee rate\n', '    uint256 public contractFeeRateNumerator;\n', '    uint256 public contractFeeRateDenominator;\n', '\n', '    // Info of each user is Contract sender\n', '    mapping (uint256 => mapping (address => bool)) public isUserContractSender;\n', '    mapping (uint256 => uint256) public poolTokenAmountLimit;\n', '\n', '    function setDividendWeight(uint256 _userDividendWeight, uint256 _devDividendWeight) public virtual{\n', '        checkAdmin();\n', '        require(\n', '            _userDividendWeight != 0 && _devDividendWeight != 0,\n', '            "invalid input"\n', '        );\n', '        userDividendWeight = _userDividendWeight;\n', '        devDividendWeight = _devDividendWeight;\n', '    }\n', '\n', '    function setDeveloperDAOFund(address _developerDAOFund) public virtual onlyOwner {\n', '        developerDAOFund = _developerDAOFund;\n', '    }\n', '\n', '    function setTokenAmountLimit(uint256 _pid, uint256 _tokenAmountLimit) public virtual {\n', '        checkAdmin();\n', '        poolTokenAmountLimit[_pid] = _tokenAmountLimit;\n', '    }\n', '\n', '    function setTokenAmountLimitFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _feeRateDenominator >= _feeRateNumerator, "invalid input"\n', '        );\n', '        amountFeeRateNumerator = _feeRateNumerator;\n', '        amountfeeRateDenominator = _feeRateDenominator;\n', '    }\n', '\n', '    function setContracSenderFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _feeRateDenominator >= _feeRateNumerator, "invalid input"\n', '        );\n', '        contractFeeRateNumerator = _feeRateNumerator;\n', '        contractFeeRateDenominator = _feeRateDenominator;\n', '    }\n', '\n', '    function setStartBlock(uint256 _startBlock) public virtual onlyOwner { \n', '        require(startBlock > block.number, "invalid start block");\n', '        startBlock = _startBlock;\n', '        updateAfterModifyStartBlock(_startBlock);\n', '    }\n', '\n', '    function transferAdmin(address _admin) public virtual {\n', '        checkAdmin();\n', '        admin = _admin;\n', '    }\n', '\n', '    function setMarketingFund(address _marketingFund) public virtual onlyOwner {\n', '        marketingFund = _marketingFund;\n', '    }\n', '\n', '    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal virtual{\n', '    }\n', '\n', '    function calculateDividend(uint256 _pending, uint256 _pid, uint256 _userAmount, bool _isContractSender) internal view returns (uint256 _marketingFundDividend, uint256 _devDividend, uint256 _userDividend){\n', '        uint256 fee = 0;\n', '        if(_isContractSender && contractFeeRateDenominator > 0){\n', '            fee = _pending.mul(contractFeeRateNumerator).div(contractFeeRateDenominator);\n', '            _marketingFundDividend = _marketingFundDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        if(poolTokenAmountLimit[_pid] > 0 && amountfeeRateDenominator > 0 && _userAmount >= poolTokenAmountLimit[_pid]){\n', '            fee = _pending.mul(amountFeeRateNumerator).div(amountfeeRateDenominator);\n', '            _marketingFundDividend =_marketingFundDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        if(devDividendWeight > 0){\n', '            fee = _pending.mul(devDividendWeight).div(devDividendWeight.add(userDividendWeight));\n', '            _devDividend = _devDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        _userDividend = _pending;\n', '    }\n', '\n', '    function judgeContractSender(uint256 _pid) internal {\n', '        if(msg.sender != tx.origin){\n', '            isUserContractSender[_pid][msg.sender] = true;\n', '        }\n', '    }\n', '\n', '    function checkAdmin() internal view {\n', '        require(admin == msg.sender, "invalid authorized");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/SHDToken.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '// SHDToken with Governance.\n', 'contract SHDToken is ERC20("ShardingDAO", "SHD"), Ownable {\n', '    // cross chain\n', '    mapping(address => bool) public minters;\n', '\n', '    struct Checkpoint {\n', '        uint256 fromBlock;\n', '        uint256 votes;\n', '    }\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping(address => uint256) public numCheckpoints;\n', '    event VotesBalanceChanged(\n', '        address indexed user,\n', '        uint256 previousBalance,\n', '        uint256 newBalance\n', '    );\n', '\n', '    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n', '    function mint(address _to, uint256 _amount) public {\n', '        require(minters[msg.sender] == true, "SHD : You are not the miner");\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) public {\n', '        _burn(msg.sender, _amount);\n', '    }\n', '\n', '    function addMiner(address _miner) external onlyOwner {\n', '        minters[_miner] = true;\n', '    }\n', '\n', '    function removeMiner(address _miner) external onlyOwner {\n', '        minters[_miner] = false;\n', '    }\n', '\n', '    function getPriorVotes(address account, uint256 blockNumber)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            blockNumber < block.number,\n', '            "getPriorVotes: not yet determined"\n', '        );\n', '\n', '        uint256 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 lower = 0;\n', '        uint256 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _voteTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        if (from != to && amount > 0) {\n', '            if (from != address(0)) {\n', '                uint256 fromNum = numCheckpoints[from];\n', '                uint256 fromOld =\n', '                    fromNum > 0 ? checkpoints[from][fromNum - 1].votes : 0;\n', '                uint256 fromNew = fromOld.sub(amount);\n', '                _writeCheckpoint(from, fromNum, fromOld, fromNew);\n', '            }\n', '\n', '            if (to != address(0)) {\n', '                uint256 toNum = numCheckpoints[to];\n', '                uint256 toOld =\n', '                    toNum > 0 ? checkpoints[to][toNum - 1].votes : 0;\n', '                uint256 toNew = toOld.add(amount);\n', '                _writeCheckpoint(to, toNum, toOld, toNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(\n', '        address user,\n', '        uint256 nCheckpoints,\n', '        uint256 oldVotes,\n', '        uint256 newVotes\n', '    ) internal {\n', '        uint256 blockNumber = block.number;\n', '        if (\n', '            nCheckpoints > 0 &&\n', '            checkpoints[user][nCheckpoints - 1].fromBlock == blockNumber\n', '        ) {\n', '            checkpoints[user][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[user][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '            numCheckpoints[user] = nCheckpoints + 1;\n', '        }\n', '\n', '        emit VotesBalanceChanged(user, oldVotes, newVotes);\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal override {\n', '        _voteTransfer(from, to, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/ShardingDAOMining.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ShardingDAOMining is IInvitation, ActivityBase {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20; \n', '    using FixedPoint for *;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How much LP token the user has provided.\n', '        uint256 originWeight; //initial weight\n', "        uint256 inviteeWeight; // invitees' weight\n", '        uint256 endBlock;\n', '        bool isCalculateInvitation;\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        uint256 nftPoolId;\n', '        address lpTokenSwap; // uniswapPair contract address\n', '        uint256 accumulativeDividend;\n', "        uint256 usersTotalWeight; // user's sum weight\n", '        uint256 lpTokenAmount; // lock amount\n', '        uint256 oracleWeight; // eth value\n', '        uint256 lastDividendHeight; // last dividend block height\n', '        TokenPairInfo tokenToEthPairInfo;\n', '        bool isFirstTokenShard;\n', '    }\n', '\n', '    struct TokenPairInfo{\n', '        IUniswapV2Pair tokenToEthSwap; \n', '        FixedPoint.uq112x112 price; \n', '        bool isFirstTokenEth;\n', '        uint256 priceCumulativeLast;\n', '        uint32  blockTimestampLast;\n', '        uint256 lastPriceUpdateHeight;\n', '    }\n', '\n', '    struct InvitationInfo {\n', '        address invitor;\n', '        address[] invitees;\n', '        bool isUsed;\n', '        bool isWithdrawn;\n', '        mapping(address => uint256) inviteeIndexMap;\n', '    }\n', '\n', '    // black list\n', '    struct EvilPoolInfo {\n', '        uint256 pid;\n', '        string description;\n', '    }\n', '\n', '    // The SHD TOKEN!\n', '    SHDToken public SHD;\n', '    // Info of each pool.\n', '    uint256[] public rankPoolIndex;\n', '    // indicates whether the pool is in the rank\n', '    mapping(uint256 => uint256) public rankPoolIndexMap;\n', '    // relationship info about invitation\n', '    mapping(address => InvitationInfo) public usersRelationshipInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Info of each pool.\n', '    PoolInfo[] private poolInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public maxRankNumber = 10;\n', '    // Last block number that SHARDs distribution occurs.\n', '    uint256 public lastRewardBlock;\n', '    // produced blocks per day\n', '    uint256 public constant produceBlocksPerDay = 6496;\n', '    // produced blocks per month\n', '    uint256 public constant produceBlocksPerMonth = produceBlocksPerDay * 30;\n', '    // SHD tokens created per block.\n', '    uint256 public SHDPerBlock = 104994 * (1e13);\n', '    // after each term, mine half SHD token\n', '    uint256 public constant MINT_DECREASE_TERM = 9500000;\n', '    // used to caculate user deposit weight\n', '    uint256[] private depositTimeWeight;\n', '    // max lock time in stage two\n', '    uint256 private constant MAX_MONTH = 36;\n', '    // add pool automatically in nft shard\n', '    address public nftShard;\n', '    // oracle token price update term\n', '    uint256 public updateTokenPriceTerm = 120;\n', '    // to mint token cross chain\n', '    uint256 public shardMintWeight = 1;\n', '    uint256 public reserveMintWeight = 0;\n', '    uint256 public reserveToMint;\n', '    // black list\n', '    EvilPoolInfo[] public blackList;\n', '    mapping(uint256 => uint256) public blackListMap;\n', '    // undividend shard\n', '    uint256 public unDividendShard;\n', '    // 20% shard => SHD - ETH pool\n', '    uint256 public shardPoolDividendWeight = 2;\n', '    // 80% shard => SHD - ETH pool\n', '    uint256 public otherPoolDividendWeight = 8;\n', '\n', '    event Deposit(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount,\n', '        uint256 weight\n', '    );\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Replace(\n', '        address indexed user,\n', '        uint256 indexed rankIndex,\n', '        uint256 newPid\n', '    );\n', '\n', '    event AddToBlacklist(\n', '        uint256 indexed pid\n', '    );\n', '\n', '    event RemoveFromBlacklist(\n', '        uint256 indexed pid\n', '    );\n', '    event AddPool(uint256 indexed pid, uint256 nftId, address tokenAddress);\n', '\n', '    function initialize(\n', '        SHDToken _SHD,\n', '        address _wethToken,\n', '        address _developerDAOFund,\n', '        address _marketingFund,\n', '        uint256 _maxRankNumber,\n', '        uint256 _startBlock\n', '    ) public virtual onlyOwner{\n', '        require(WETHToken == address(0), "already initialized");\n', '        SHD = _SHD;\n', '        maxRankNumber = _maxRankNumber;\n', '        if (_startBlock < block.number) {\n', '            startBlock = block.number;\n', '        } else {\n', '            startBlock = _startBlock;\n', '        }\n', '        lastRewardBlock = startBlock.sub(1);\n', '        WETHToken = _wethToken;\n', '        initializeTimeWeight();\n', '        developerDAOFund = _developerDAOFund;\n', '        marketingFund = _marketingFund;\n', '        InvitationInfo storage initialInvitor =\n', '            usersRelationshipInfo[address(this)];\n', '\n', '        userDividendWeight = 8;\n', '        devDividendWeight = 2;\n', '\n', '        amountFeeRateNumerator = 0;\n', '        amountfeeRateDenominator = 0;\n', '\n', '        contractFeeRateNumerator = 1;\n', '        contractFeeRateDenominator = 5;\n', '        initialInvitor.isUsed = true;\n', '    }\n', '\n', '    function initializeTimeWeight() private {\n', '        depositTimeWeight = [\n', '            1238,\n', '            1383,\n', '            1495,\n', '            1587,\n', '            1665,\n', '            1732,\n', '            1790,\n', '            1842,\n', '            1888,\n', '            1929,\n', '            1966,\n', '            2000,\n', '            2031,\n', '            2059,\n', '            2085,\n', '            2108,\n', '            2131,\n', '            2152,\n', '            2171,\n', '            2189,\n', '            2206,\n', '            2221,\n', '            2236,\n', '            2250,\n', '            2263,\n', '            2276,\n', '            2287,\n', '            2298,\n', '            2309,\n', '            2319,\n', '            2328,\n', '            2337,\n', '            2346,\n', '            2355,\n', '            2363,\n', '            2370\n', '        ];\n', '    }\n', '\n', '    function setNftShard(address _nftShard) public virtual {\n', '        checkAdmin();\n', '        nftShard = _nftShard;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the nft shard contract.\n', '    // if _lpTokenSwap contains tokenA instead of eth, then _tokenToEthSwap should consist of token A and eth\n', '    function add(\n', '        uint256 _nftPoolId,\n', '        IUniswapV2Pair _lpTokenSwap,\n', '        IUniswapV2Pair _tokenToEthSwap\n', '    ) public virtual {\n', '        require(msg.sender == nftShard || msg.sender == admin, "invalid sender");\n', '        TokenPairInfo memory tokenToEthInfo;\n', '        uint256 lastDividendHeight = 0;\n', '        if(poolInfo.length == 0){\n', '            _nftPoolId = 0;\n', '            lastDividendHeight = lastRewardBlock;\n', '        }\n', '        bool isFirstTokenShard;\n', '        if (address(_tokenToEthSwap) != address(0)) {\n', '            (address token0, address token1, uint256 targetTokenPosition) =\n', '                getTargetTokenInSwap(_tokenToEthSwap, WETHToken);\n', '            address wantToken;\n', '            bool isFirstTokenEthToken;\n', '            if (targetTokenPosition == 0) {\n', '                isFirstTokenEthToken = true;\n', '                wantToken = token1;\n', '            } else {\n', '                isFirstTokenEthToken = false;\n', '                wantToken = token0;\n', '            }\n', '            (, , targetTokenPosition) = getTargetTokenInSwap(\n', '                _lpTokenSwap,\n', '                wantToken\n', '            );\n', '            if (targetTokenPosition == 0) {\n', '                isFirstTokenShard = false;\n', '            } else {\n', '                isFirstTokenShard = true;\n', '            }\n', '            tokenToEthInfo = generateOrcaleInfo(\n', '                _tokenToEthSwap,\n', '                isFirstTokenEthToken\n', '            );\n', '        } else {\n', '            (, , uint256 targetTokenPosition) =\n', '                getTargetTokenInSwap(_lpTokenSwap, WETHToken);\n', '            if (targetTokenPosition == 0) {\n', '                isFirstTokenShard = false;\n', '            } else {\n', '                isFirstTokenShard = true;\n', '            }\n', '            tokenToEthInfo = generateOrcaleInfo(\n', '                _lpTokenSwap,\n', '                !isFirstTokenShard\n', '            );\n', '        }\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                nftPoolId: _nftPoolId,\n', '                lpTokenSwap: address(_lpTokenSwap),\n', '                lpTokenAmount: 0,\n', '                usersTotalWeight: 0,\n', '                accumulativeDividend: 0,\n', '                oracleWeight: 0,\n', '                lastDividendHeight: lastDividendHeight,\n', '                tokenToEthPairInfo: tokenToEthInfo,\n', '                isFirstTokenShard: isFirstTokenShard\n', '            })\n', '        );\n', '        emit AddPool(poolInfo.length.sub(1), _nftPoolId, address(_lpTokenSwap));\n', '    }\n', '\n', '    function setPriceUpdateTerm(uint256 _term) public virtual onlyOwner{\n', '        updateTokenPriceTerm = _term;\n', '    }\n', '\n', '    function kickEvilPoolByPid(uint256 _pid, string calldata description)\n', '        public\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        bool isDescriptionLeagal = verifyDescription(description);\n', '        require(isDescriptionLeagal, "invalid description, just ASCII code is allowed");\n', '        require(_pid > 0, "invalid pid");\n', '        uint256 poolRankIndex = rankPoolIndexMap[_pid];\n', '        if (poolRankIndex > 0) {\n', '            massUpdatePools();\n', '            uint256 _rankIndex = poolRankIndex.sub(1);\n', '            uint256 currentRankLastIndex = rankPoolIndex.length.sub(1);\n', '            uint256 lastPidInRank = rankPoolIndex[currentRankLastIndex];\n', '            rankPoolIndex[_rankIndex] = lastPidInRank;\n', '            rankPoolIndexMap[lastPidInRank] = poolRankIndex;\n', '            delete rankPoolIndexMap[_pid];\n', '            rankPoolIndex.pop();\n', '        }\n', '        addInBlackList(_pid, description);\n', '        dealEvilPoolDiviend(_pid);\n', '        emit AddToBlacklist(_pid);\n', '    }\n', '\n', '    function addInBlackList(uint256 _pid, string calldata description) private {\n', '        if (blackListMap[_pid] > 0) {\n', '            return;\n', '        }\n', '        blackList.push(EvilPoolInfo({pid: _pid, description: description}));\n', '        blackListMap[_pid] = blackList.length;\n', '    }\n', '\n', '    function resetEvilPool(uint256 _pid) public virtual onlyOwner {\n', '        uint256 poolPosition = blackListMap[_pid];\n', '        if (poolPosition == 0) {\n', '            return;\n', '        }\n', '        uint256 poolIndex = poolPosition.sub(1);\n', '        uint256 lastIndex = blackList.length.sub(1);\n', '        EvilPoolInfo storage lastEvilInBlackList = blackList[lastIndex];\n', '        uint256 lastPidInBlackList = lastEvilInBlackList.pid;\n', '        blackListMap[lastPidInBlackList] = poolPosition;\n', '        blackList[poolIndex] = blackList[lastIndex];\n', '        delete blackListMap[_pid];\n', '        blackList.pop();\n', '        emit RemoveFromBlacklist(_pid);\n', '    }\n', '\n', '    function dealEvilPoolDiviend(uint256 _pid) private {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 undistributeDividend = pool.accumulativeDividend;\n', '        if (undistributeDividend == 0) {\n', '            return;\n', '        }\n', '        uint256 currentRankCount = rankPoolIndex.length;\n', '        if (currentRankCount > 0) {\n', '            uint256 averageDividend =\n', '                undistributeDividend.div(currentRankCount);\n', '            for (uint256 i = 0; i < currentRankCount; i++) {\n', '                PoolInfo storage poolInRank = poolInfo[rankPoolIndex[i]];\n', '                if (i < currentRankCount - 1) {\n', '                    poolInRank.accumulativeDividend = poolInRank\n', '                        .accumulativeDividend\n', '                        .add(averageDividend);\n', '                    undistributeDividend = undistributeDividend.sub(\n', '                        averageDividend\n', '                    );\n', '                } else {\n', '                    poolInRank.accumulativeDividend = poolInRank\n', '                        .accumulativeDividend\n', '                        .add(undistributeDividend);\n', '                }\n', '            }\n', '        } else {\n', '            unDividendShard = unDividendShard.add(undistributeDividend);\n', '        }\n', '        pool.accumulativeDividend = 0;\n', '    }\n', '\n', '    function setMintCoefficient(\n', '        uint256 _shardMintWeight,\n', '        uint256 _reserveMintWeight\n', '    ) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _shardMintWeight != 0 && _reserveMintWeight != 0,\n', '            "invalid input"\n', '        );\n', '        massUpdatePools();\n', '        shardMintWeight = _shardMintWeight;\n', '        reserveMintWeight = _reserveMintWeight;\n', '    }\n', '\n', '    function setShardPoolDividendWeight(\n', '        uint256 _shardPoolWeight,\n', '        uint256 _otherPoolWeight\n', '    ) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _shardPoolWeight != 0 && _otherPoolWeight != 0,\n', '            "invalid input"\n', '        );\n', '        massUpdatePools();\n', '        shardPoolDividendWeight = _shardPoolWeight;\n', '        otherPoolDividendWeight = _otherPoolWeight;\n', '    }\n', '\n', '    function setSHDPerBlock(uint256 _SHDPerBlock, bool _withUpdate) public virtual {\n', '        checkAdmin();\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        SHDPerBlock = _SHDPerBlock;\n', '    }\n', '\n', '    function massUpdatePools() public virtual {\n', '        uint256 poolCountInRank = rankPoolIndex.length;\n', '        uint256 farmMintShard = mintSHARD(address(this), block.number);\n', '        updateSHARDPoolAccumulativeDividend(block.number);\n', '        if(poolCountInRank == 0){\n', '            farmMintShard = farmMintShard.mul(otherPoolDividendWeight)\n', '                                     .div(shardPoolDividendWeight.add(otherPoolDividendWeight));\n', '            if(farmMintShard > 0){\n', '                unDividendShard = unDividendShard.add(farmMintShard);\n', '            }\n', '        }\n', '        for (uint256 i = 0; i < poolCountInRank; i++) {\n', '            updatePoolAccumulativeDividend(\n', '                rankPoolIndex[i],\n', '                poolCountInRank,\n', '                block.number\n', '            );\n', '        }\n', '    }\n', '\n', '    // update reward vairables for a pool\n', '    function updatePoolDividend(uint256 _pid) public virtual {\n', '        if(_pid == 0){\n', '            updateSHARDPoolAccumulativeDividend(block.number);\n', '            return;\n', '        }\n', '        if (rankPoolIndexMap[_pid] == 0) {\n', '            return;\n', '        }\n', '        updatePoolAccumulativeDividend(\n', '            _pid,\n', '            rankPoolIndex.length,\n', '            block.number\n', '        );\n', '    }\n', '\n', '    function mintSHARD(address _address, uint256 _toBlock) private returns (uint256){\n', '        uint256 recentlyRewardBlock = lastRewardBlock;\n', '        if (recentlyRewardBlock >= _toBlock) {\n', '            return 0;\n', '        }\n', '        uint256 totalReward =\n', '            getRewardToken(recentlyRewardBlock.add(1), _toBlock);\n', '        uint256 farmMint =\n', '            totalReward.mul(shardMintWeight).div(\n', '                reserveMintWeight.add(shardMintWeight)\n', '            );\n', '        uint256 reserve = totalReward.sub(farmMint);\n', '        if (totalReward > 0) {\n', '            SHD.mint(_address, farmMint);\n', '            if (reserve > 0) {\n', '                reserveToMint = reserveToMint.add(reserve);\n', '            }\n', '            lastRewardBlock = _toBlock;\n', '        }\n', '        return farmMint;\n', '    }\n', '\n', '    function updatePoolAccumulativeDividend(\n', '        uint256 _pid,\n', '        uint256 _validRankPoolCount,\n', '        uint256 _toBlock\n', '    ) private {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (pool.lastDividendHeight >= _toBlock) return;\n', '        uint256 poolReward =\n', '            getModifiedRewardToken(pool.lastDividendHeight.add(1), _toBlock)\n', '                                    .mul(otherPoolDividendWeight)\n', '                                    .div(shardPoolDividendWeight.add(otherPoolDividendWeight));\n', '\n', '        uint256 otherPoolReward = poolReward.div(_validRankPoolCount);                            \n', '        pool.lastDividendHeight = _toBlock;\n', '        uint256 existedDividend = pool.accumulativeDividend;\n', '        pool.accumulativeDividend = existedDividend.add(otherPoolReward);\n', '    }\n', '\n', '    function updateSHARDPoolAccumulativeDividend (uint256 _toBlock) private{\n', '        PoolInfo storage pool = poolInfo[0];\n', '        if (pool.lastDividendHeight >= _toBlock) return;\n', '        uint256 poolReward =\n', '            getModifiedRewardToken(pool.lastDividendHeight.add(1), _toBlock);\n', '\n', '        uint256 shardPoolDividend = poolReward.mul(shardPoolDividendWeight)\n', '                                               .div(shardPoolDividendWeight.add(otherPoolDividendWeight));                              \n', '        pool.lastDividendHeight = _toBlock;\n', '        uint256 existedDividend = pool.accumulativeDividend;\n', '        pool.accumulativeDividend = existedDividend.add(shardPoolDividend);\n', '    }\n', '\n', '    // deposit LP tokens to MasterChef for SHD allocation.\n', '    // ignore lockTime in stage one\n', '    function deposit(\n', '        uint256 _pid,\n', '        uint256 _amount,\n', '        uint256 _lockTime\n', '    ) public virtual {\n', '        require(_amount > 0, "invalid deposit amount");\n', '        InvitationInfo storage senderInfo = usersRelationshipInfo[msg.sender];\n', '        require(senderInfo.isUsed, "must accept an invitation firstly");\n', '        require(_lockTime > 0 && _lockTime <= 36, "invalid lock time"); // less than 36 months\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 lpTokenAmount = pool.lpTokenAmount.add(_amount);\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 newOriginWeight = user.originWeight;\n', '        uint256 existedAmount = user.amount;\n', '        uint256 endBlock = user.endBlock;\n', '        uint256 newEndBlock =\n', '            block.number.add(produceBlocksPerMonth.mul(_lockTime));\n', '        if (existedAmount > 0) {\n', '            if (block.number >= endBlock) {\n', '                newOriginWeight = getDepositWeight(\n', '                    _amount.add(existedAmount),\n', '                    _lockTime\n', '                );\n', '            } else {\n', '                newOriginWeight = newOriginWeight.add(getDepositWeight(_amount, _lockTime));\n', '                newOriginWeight = newOriginWeight.add(\n', '                    getDepositWeight(\n', '                        existedAmount,\n', '                        newEndBlock.sub(endBlock).div(produceBlocksPerMonth)\n', '                    )\n', '                );\n', '            }\n', '        } else {\n', '            judgeContractSender(_pid);\n', '            newOriginWeight = getDepositWeight(_amount, _lockTime);\n', '        }\n', '        modifyWeightByInvitation(\n', '            _pid,\n', '            msg.sender,\n', '            user.originWeight,\n', '            newOriginWeight,\n', '            user.inviteeWeight,\n', '            existedAmount\n', '        );   \n', '        updateUserInfo(\n', '            user,\n', '            existedAmount.add(_amount),\n', '            newOriginWeight,\n', '            newEndBlock\n', '        );\n', '        IERC20(pool.lpTokenSwap).safeTransferFrom(\n', '            address(msg.sender),\n', '            address(this),\n', '            _amount\n', '        );\n', '        pool.oracleWeight =  getOracleWeight(pool, lpTokenAmount);\n', '        pool.lpTokenAmount = lpTokenAmount;\n', '        if (\n', '            rankPoolIndexMap[_pid] == 0 &&\n', '            rankPoolIndex.length < maxRankNumber &&\n', '            blackListMap[_pid] == 0\n', '        ) {\n', '            addToRank(pool, _pid);\n', '        }\n', '        emit Deposit(msg.sender, _pid, _amount, newOriginWeight);\n', '    }\n', '\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid) public virtual {\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 amount = user.amount;\n', '        require(amount > 0, "user is not existed");\n', '        require(user.endBlock < block.number, "token is still locked");\n', '        mintSHARD(address(this), block.number);\n', '        updatePoolDividend(_pid);\n', '        uint256 originWeight = user.originWeight;\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 usersTotalWeight = pool.usersTotalWeight;\n', '        uint256 userWeight = user.inviteeWeight.add(originWeight);\n', '        if(user.isCalculateInvitation){\n', '            userWeight = userWeight.add(originWeight.div(INVITOR_WEIGHT));\n', '        }\n', '        if (pool.accumulativeDividend > 0) {\n', '            uint256 pending = pool.accumulativeDividend.mul(userWeight).div(usersTotalWeight);\n', '            pool.accumulativeDividend = pool.accumulativeDividend.sub(pending);\n', '            uint256 treasruyDividend;\n', '            uint256 devDividend;\n', '            (treasruyDividend, devDividend, pending) = calculateDividend(pending, _pid, amount, isUserContractSender[_pid][msg.sender]);\n', '            if(treasruyDividend > 0){\n', '                safeSHARDTransfer(marketingFund, treasruyDividend);\n', '            }\n', '            if(devDividend > 0){\n', '                safeSHARDTransfer(developerDAOFund, devDividend);\n', '            }\n', '            if(pending > 0){\n', '                safeSHARDTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        pool.usersTotalWeight = usersTotalWeight.sub(userWeight);\n', '        user.amount = 0;\n', '        user.originWeight = 0;\n', '        user.endBlock = 0;\n', '        IERC20(pool.lpTokenSwap).safeTransfer(address(msg.sender), amount);\n', '        pool.lpTokenAmount = pool.lpTokenAmount.sub(amount);\n', '        if (pool.lpTokenAmount == 0) pool.oracleWeight = 0;\n', '        else {\n', '            pool.oracleWeight = getOracleWeight(pool, pool.lpTokenAmount);\n', '        }\n', '        resetInvitationRelationship(_pid, msg.sender, originWeight);\n', '        emit Withdraw(msg.sender, _pid, amount);\n', '    }\n', '\n', '    function addToRank(\n', '        PoolInfo storage _pool,\n', '        uint256 _pid\n', '    ) private {\n', '        if(_pid == 0){\n', '            return;\n', '        }\n', '        massUpdatePools();\n', '        _pool.lastDividendHeight = block.number;\n', '        rankPoolIndex.push(_pid);\n', '        rankPoolIndexMap[_pid] = rankPoolIndex.length;\n', '        if(unDividendShard > 0){\n', '            _pool.accumulativeDividend = _pool.accumulativeDividend.add(unDividendShard);\n', '            unDividendShard = 0;\n', '        }\n', '        emit Replace(msg.sender, rankPoolIndex.length.sub(1), _pid);\n', '        return;\n', '    }\n', '\n', '    //_poolIndexInRank is the index in rank\n', '    //_pid is the index in poolInfo\n', '    function tryToReplacePoolInRank(uint256 _poolIndexInRank, uint256 _pid)\n', '        public\n', '        virtual\n', '    {\n', '        if(_pid == 0){\n', '            return;\n', '        }\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.lpTokenAmount > 0, "there is not any lp token depsoited");\n', '        require(blackListMap[_pid] == 0, "pool is in the black list");\n', '        if (rankPoolIndexMap[_pid] > 0) {\n', '            return;\n', '        }\n', '        uint256 currentPoolCountInRank = rankPoolIndex.length;\n', '        require(currentPoolCountInRank == maxRankNumber, "invalid operation");\n', '        uint256 targetPid = rankPoolIndex[_poolIndexInRank];\n', '        PoolInfo storage targetPool = poolInfo[targetPid];\n', '        uint256 targetPoolOracleWeight = getOracleWeight(targetPool, targetPool.lpTokenAmount);\n', '        uint256 challengerOracleWeight = getOracleWeight(pool, pool.lpTokenAmount);\n', '        if (challengerOracleWeight <= targetPoolOracleWeight) {\n', '            return;\n', '        }\n', '        updatePoolDividend(targetPid);\n', '        rankPoolIndex[_poolIndexInRank] = _pid;\n', '        delete rankPoolIndexMap[targetPid];\n', '        rankPoolIndexMap[_pid] = _poolIndexInRank.add(1);\n', '        pool.lastDividendHeight = block.number;\n', '        emit Replace(msg.sender, _poolIndexInRank, _pid);\n', '    }\n', '\n', '    function acceptInvitation(address _invitor) public virtual override {\n', '        require(_invitor != msg.sender, "invitee should not be invitor");\n', '        buildInvitation(_invitor, msg.sender);\n', '    }\n', '\n', '    function buildInvitation(address _invitor, address _invitee) private {\n', '        InvitationInfo storage invitee = usersRelationshipInfo[_invitee];\n', '        require(!invitee.isUsed, "has accepted invitation");\n', '        invitee.isUsed = true;\n', '        InvitationInfo storage invitor = usersRelationshipInfo[_invitor];\n', '        require(invitor.isUsed, "invitor has not acceptted invitation");\n', '        invitee.invitor = _invitor;\n', '        invitor.invitees.push(_invitee);\n', '        invitor.inviteeIndexMap[_invitee] = invitor.invitees.length.sub(1);\n', '    }\n', '\n', '    function setMaxRankNumber(uint256 _count) public virtual {\n', '        checkAdmin();\n', '        require(_count > 0, "invalid count");\n', '        if (maxRankNumber == _count) return;\n', '        massUpdatePools();\n', '        maxRankNumber = _count;\n', '        uint256 currentPoolCountInRank = rankPoolIndex.length;\n', '        if (_count >= currentPoolCountInRank) {\n', '            return;\n', '        }\n', '        uint256 sparePoolCount = currentPoolCountInRank.sub(_count);\n', '        uint256 lastPoolIndex = currentPoolCountInRank.sub(1);\n', '        while (sparePoolCount > 0) {\n', '            delete rankPoolIndexMap[rankPoolIndex[lastPoolIndex]];\n', '            rankPoolIndex.pop();\n', '            lastPoolIndex--;\n', '            sparePoolCount--;\n', '        }\n', '    }\n', '\n', '    function getModifiedRewardToken(uint256 _fromBlock, uint256 _toBlock)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            getRewardToken(_fromBlock, _toBlock).mul(shardMintWeight).div(\n', '                reserveMintWeight.add(shardMintWeight)\n', '            );\n', '    }\n', '\n', '    // View function to see pending SHARDs on frontend.\n', '    function pendingSHARD(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 _pending, uint256 _potential, uint256 _blockNumber)\n', '    {\n', '        _blockNumber = block.number;\n', '        (_pending, _potential) = calculatePendingSHARD(_pid, _user);\n', '        \n', '    }\n', '\n', '    function pendingSHARDByPids(uint256[] memory _pids, address _user)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber)\n', '    {\n', '         uint256 poolCount = _pids.length;\n', '        _pending = new uint256[](poolCount);\n', '        _potential = new uint256[](poolCount);\n', '        _blockNumber = block.number;\n', '        for(uint i = 0; i < poolCount; i ++){\n', '            (_pending[i], _potential[i]) = calculatePendingSHARD(_pids[i], _user);\n', '        }\n', '    }\n', '\n', '    function calculatePendingSHARD(uint256 _pid, address _user) private view returns (uint256 _pending, uint256 _potential){\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        if (user.amount == 0) {\n', '            return (0, 0);\n', '        }\n', '        uint256 userModifiedWeight = getUserModifiedWeight(_pid, _user);\n', '        _pending = pool.accumulativeDividend.mul(userModifiedWeight);\n', '        _pending = _pending.div(pool.usersTotalWeight);\n', '        bool isContractSender = isUserContractSender[_pid][_user];\n', '        (,,_pending) = calculateDividend(_pending, _pid, user.amount, isContractSender);\n', '        if (pool.lastDividendHeight >= block.number) {\n', '            return (_pending, 0);\n', '        }\n', '        if (_pid != 0 && (rankPoolIndex.length == 0 || rankPoolIndexMap[_pid] == 0)) {\n', '            return (_pending, 0);\n', '        }\n', '        uint256 poolReward = getModifiedRewardToken(pool.lastDividendHeight.add(1), block.number);\n', '        uint256 numerator;\n', '        uint256 denominator = otherPoolDividendWeight.add(shardPoolDividendWeight);\n', '        if(_pid == 0){\n', '            numerator = shardPoolDividendWeight;\n', '        }\n', '        else{\n', '            numerator = otherPoolDividendWeight;\n', '        }\n', '        poolReward = poolReward       \n', '            .mul(numerator)\n', '            .div(denominator);\n', '        if(_pid != 0){\n', '            poolReward = poolReward.div(rankPoolIndex.length);\n', '        }                          \n', '        _potential = poolReward\n', '            .mul(userModifiedWeight)\n', '            .div(pool.usersTotalWeight);\n', '        (,,_potential) = calculateDividend(_potential, _pid, user.amount, isContractSender);\n', '    }\n', '\n', '    //calculate the weight and end block when users deposit\n', '    function getDepositWeight(uint256 _lockAmount, uint256 _lockTime)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (_lockTime == 0) return 0;\n', '        if (_lockTime.div(MAX_MONTH) > 1) _lockTime = MAX_MONTH;\n', '        return depositTimeWeight[_lockTime.sub(1)].sub(500).mul(_lockAmount);\n', '    }\n', '\n', '    function getPoolLength() public view virtual returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256[] memory _nftPoolId,\n', '            uint256[] memory _accumulativeDividend,\n', '            uint256[] memory _usersTotalWeight,\n', '            uint256[] memory _lpTokenAmount,\n', '            uint256[] memory _oracleWeight,\n', '            address[] memory _swapAddress\n', '        )\n', '    {\n', '        uint256 poolCount = _toIndex.sub(_fromIndex).add(1);\n', '        _nftPoolId = new uint256[](poolCount);\n', '        _accumulativeDividend = new uint256[](poolCount);\n', '        _usersTotalWeight = new uint256[](poolCount);\n', '        _lpTokenAmount = new uint256[](poolCount);\n', '        _oracleWeight = new uint256[](poolCount);\n', '        _swapAddress = new address[](poolCount);\n', '        uint256 startIndex = 0;\n', '        for (uint256 i = _fromIndex; i <= _toIndex; i++) {\n', '            PoolInfo storage pool = poolInfo[i];\n', '            _nftPoolId[startIndex] = pool.nftPoolId;\n', '            _accumulativeDividend[startIndex] = pool.accumulativeDividend;\n', '            _usersTotalWeight[startIndex] = pool.usersTotalWeight;\n', '            _lpTokenAmount[startIndex] = pool.lpTokenAmount;\n', '            _oracleWeight[startIndex] = pool.oracleWeight;\n', '            _swapAddress[startIndex] = pool.lpTokenSwap;\n', '            startIndex++;\n', '        }\n', '    }\n', '\n', '    function getInstantPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\n', '    public\n', '    virtual\n', '    returns (\n', '        uint256[] memory _nftPoolId,\n', '        uint256[] memory _accumulativeDividend,\n', '        uint256[] memory _usersTotalWeight,\n', '        uint256[] memory _lpTokenAmount,\n', '        uint256[] memory _oracleWeight,\n', '        address[] memory _swapAddress\n', '    )\n', '    {\n', '        uint256 poolCount = _toIndex.sub(_fromIndex).add(1);\n', '        _nftPoolId = new uint256[](poolCount);\n', '        _accumulativeDividend = new uint256[](poolCount);\n', '        _usersTotalWeight = new uint256[](poolCount);\n', '        _lpTokenAmount = new uint256[](poolCount);\n', '        _oracleWeight = new uint256[](poolCount);\n', '        _swapAddress = new address[](poolCount);\n', '        uint256 startIndex = 0;\n', '        for (uint256 i = _fromIndex; i <= _toIndex; i++) {\n', '            PoolInfo storage pool = poolInfo[i];\n', '            _nftPoolId[startIndex] = pool.nftPoolId;\n', '            _accumulativeDividend[startIndex] = pool.accumulativeDividend;\n', '            _usersTotalWeight[startIndex] = pool.usersTotalWeight;\n', '            _lpTokenAmount[startIndex] = pool.lpTokenAmount;\n', '            _oracleWeight[startIndex] = getOracleWeight(pool, _lpTokenAmount[startIndex]);\n', '            _swapAddress[startIndex] = pool.lpTokenSwap;\n', '            startIndex++;\n', '        }\n', '    }\n', '\n', '    function getRankList() public view virtual returns (uint256[] memory) {\n', '        uint256[] memory rankIdList = rankPoolIndex;\n', '        return rankIdList;\n', '    }\n', '\n', '    function getBlackList()\n', '        public\n', '        view\n', '        virtual\n', '        returns (EvilPoolInfo[] memory _blackList)\n', '    {\n', '        _blackList = blackList;\n', '    }\n', '\n', '    function getInvitation(address _sender)\n', '        public\n', '        view\n', '        virtual\n', '        override\n', '        returns (\n', '            address _invitor,\n', '            address[] memory _invitees,\n', '            bool _isWithdrawn\n', '        )\n', '    {\n', '        InvitationInfo storage invitation = usersRelationshipInfo[_sender];\n', '        _invitees = invitation.invitees;\n', '        _invitor = invitation.invitor;\n', '        _isWithdrawn = invitation.isWithdrawn;\n', '    }\n', '\n', '    function getUserInfo(uint256 _pid, address _user)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 _amount,\n', '            uint256 _originWeight,\n', '            uint256 _modifiedWeight,\n', '            uint256 _endBlock\n', '        )\n', '    {\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        _amount = user.amount;\n', '        _originWeight = user.originWeight;\n', '        _modifiedWeight = getUserModifiedWeight(_pid, _user);\n', '        _endBlock = user.endBlock;\n', '    }\n', '\n', '    function getUserInfoByPids(uint256[] memory _pids, address _user)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256[] memory _amount,\n', '            uint256[] memory _originWeight,\n', '            uint256[] memory _modifiedWeight,\n', '            uint256[] memory _endBlock\n', '        )\n', '    {\n', '        uint256 poolCount = _pids.length;\n', '        _amount = new uint256[](poolCount);\n', '        _originWeight = new uint256[](poolCount);\n', '        _modifiedWeight = new uint256[](poolCount);\n', '        _endBlock = new uint256[](poolCount);\n', '        for(uint i = 0; i < poolCount; i ++){\n', '            (_amount[i], _originWeight[i], _modifiedWeight[i], _endBlock[i]) = getUserInfo(_pids[i], _user);\n', '        }\n', '    }\n', '\n', '    function getOracleInfo(uint256 _pid)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            address _swapToEthAddress,\n', '            uint256 _priceCumulativeLast,\n', '            uint256 _blockTimestampLast,\n', '            uint256 _price,\n', '            uint256 _lastPriceUpdateHeight\n', '        )\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        _swapToEthAddress = address(pool.tokenToEthPairInfo.tokenToEthSwap);\n', '        _priceCumulativeLast = pool.tokenToEthPairInfo.priceCumulativeLast;\n', '        _blockTimestampLast = pool.tokenToEthPairInfo.blockTimestampLast;\n', '        _price = pool.tokenToEthPairInfo.price._x;\n', '        _lastPriceUpdateHeight = pool.tokenToEthPairInfo.lastPriceUpdateHeight;\n', '    }\n', '\n', '    // Safe SHD transfer function, just in case if rounding error causes pool to not have enough SHARDs.\n', '    function safeSHARDTransfer(address _to, uint256 _amount) internal {\n', '        uint256 SHARDBal = SHD.balanceOf(address(this));\n', '        if (_amount > SHARDBal) {\n', '            SHD.transfer(_to, SHARDBal);\n', '        } else {\n', '            SHD.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function updateUserInfo(\n', '        UserInfo storage _user,\n', '        uint256 _amount,\n', '        uint256 _originWeight,\n', '        uint256 _endBlock\n', '    ) private {\n', '        _user.amount = _amount;\n', '        _user.originWeight = _originWeight;\n', '        _user.endBlock = _endBlock;\n', '    }\n', '\n', '    function getOracleWeight(\n', '        PoolInfo storage _pool,\n', '        uint256 _amount\n', '    ) private returns (uint256 _oracleWeight) {\n', '        _oracleWeight = calculateOracleWeight(_pool, _amount);\n', '        _pool.oracleWeight = _oracleWeight;\n', '    }\n', '\n', '    function calculateOracleWeight(PoolInfo storage _pool, uint256 _amount)\n', '        private\n', '        returns (uint256 _oracleWeight)\n', '    {\n', '        uint256 lpTokenTotalSupply =\n', '            IUniswapV2Pair(_pool.lpTokenSwap).totalSupply();\n', '        (uint112 shardReserve, uint112 wantTokenReserve, ) =\n', '            IUniswapV2Pair(_pool.lpTokenSwap).getReserves();\n', '        if (_amount == 0) {\n', '            _amount = _pool.lpTokenAmount;\n', '            if (_amount == 0) {\n', '                return 0;\n', '            }\n', '        }\n', '        if (!_pool.isFirstTokenShard) {\n', '            uint112 wantToken = wantTokenReserve;\n', '            wantTokenReserve = shardReserve;\n', '            shardReserve = wantToken;\n', '        }\n', '        FixedPoint.uq112x112 memory price =\n', '            updateTokenOracle(_pool.tokenToEthPairInfo);\n', '        if (\n', '            address(_pool.tokenToEthPairInfo.tokenToEthSwap) ==\n', '            _pool.lpTokenSwap\n', '        ) {\n', '            _oracleWeight = uint256(price.mul(shardReserve).decode144())\n', '                .mul(2)\n', '                .mul(_amount)\n', '                .div(lpTokenTotalSupply);\n', '        } else {\n', '            _oracleWeight = uint256(price.mul(wantTokenReserve).decode144())\n', '                .mul(2)\n', '                .mul(_amount)\n', '                .div(lpTokenTotalSupply);\n', '        }\n', '    }\n', '\n', '    function resetInvitationRelationship(\n', '        uint256 _pid,\n', '        address _user,\n', '        uint256 _originWeight\n', '    ) private {\n', '        InvitationInfo storage senderRelationshipInfo =\n', '            usersRelationshipInfo[_user];\n', '        if (!senderRelationshipInfo.isWithdrawn){\n', '            senderRelationshipInfo.isWithdrawn = true;\n', '            InvitationInfo storage invitorRelationshipInfo =\n', '            usersRelationshipInfo[senderRelationshipInfo.invitor];\n', '            uint256 targetIndex = invitorRelationshipInfo.inviteeIndexMap[_user];\n', '            uint256 inviteesCount = invitorRelationshipInfo.invitees.length;\n', '            address lastInvitee =\n', '            invitorRelationshipInfo.invitees[inviteesCount.sub(1)];\n', '            invitorRelationshipInfo.inviteeIndexMap[lastInvitee] = targetIndex;\n', '            invitorRelationshipInfo.invitees[targetIndex] = lastInvitee;\n', '            delete invitorRelationshipInfo.inviteeIndexMap[_user];\n', '            invitorRelationshipInfo.invitees.pop();\n', '        }\n', '        \n', '        UserInfo storage invitorInfo =\n', '            userInfo[_pid][senderRelationshipInfo.invitor];\n', '        UserInfo storage user =\n', '            userInfo[_pid][_user];\n', '        if(!user.isCalculateInvitation){\n', '            return;\n', '        }\n', '        user.isCalculateInvitation = false;\n', '        uint256 inviteeToSubWeight = _originWeight.div(INVITEE_WEIGHT);\n', '        invitorInfo.inviteeWeight = invitorInfo.inviteeWeight.sub(inviteeToSubWeight);\n', '        if (invitorInfo.amount == 0){\n', '            return;\n', '        }\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.usersTotalWeight = pool.usersTotalWeight.sub(inviteeToSubWeight);\n', '    }\n', '\n', '    function modifyWeightByInvitation(\n', '        uint256 _pid,\n', '        address _user,\n', '        uint256 _oldOriginWeight,\n', '        uint256 _newOriginWeight,\n', '        uint256 _inviteeWeight,\n', '        uint256 _existedAmount\n', '    ) private{\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        InvitationInfo storage senderInfo = usersRelationshipInfo[_user];\n', '        uint256 poolTotalWeight = pool.usersTotalWeight;\n', '        poolTotalWeight = poolTotalWeight.sub(_oldOriginWeight).add(_newOriginWeight);\n', '        if(_existedAmount == 0){\n', '            poolTotalWeight = poolTotalWeight.add(_inviteeWeight);\n', '        }     \n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        if (!senderInfo.isWithdrawn || (_existedAmount > 0 && user.isCalculateInvitation)) {\n', '            UserInfo storage invitorInfo = userInfo[_pid][senderInfo.invitor];\n', '            user.isCalculateInvitation = true;\n', '            uint256 addInviteeWeight =\n', '                    _newOriginWeight.div(INVITEE_WEIGHT).sub(\n', '                        _oldOriginWeight.div(INVITEE_WEIGHT)\n', '                    );\n', '            invitorInfo.inviteeWeight = invitorInfo.inviteeWeight.add(\n', '                addInviteeWeight\n', '            );\n', '            uint256 addInvitorWeight = \n', '                    _newOriginWeight.div(INVITOR_WEIGHT).sub(\n', '                        _oldOriginWeight.div(INVITOR_WEIGHT)\n', '                    );\n', '            \n', '            poolTotalWeight = poolTotalWeight.add(addInvitorWeight);\n', '            if (invitorInfo.amount > 0) {\n', '                poolTotalWeight = poolTotalWeight.add(addInviteeWeight);\n', '            } \n', '        }\n', '        pool.usersTotalWeight = poolTotalWeight;\n', '    }\n', '\n', '    function verifyDescription(string memory description)\n', '        internal\n', '        pure\n', '        returns (bool success)\n', '    {\n', '        bytes memory nameBytes = bytes(description);\n', '        uint256 nameLength = nameBytes.length;\n', '        require(nameLength > 0, "INVALID INPUT");\n', '        success = true;\n', '        bool n7;\n', '        for (uint256 i = 0; i <= nameLength - 1; i++) {\n', '            n7 = (nameBytes[i] & 0x80) == 0x80 ? true : false;\n', '            if (n7) {\n', '                success = false;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getUserModifiedWeight(uint256 _pid, address _user) private view returns (uint256){\n', '        UserInfo storage user =  userInfo[_pid][_user];\n', '        uint256 originWeight = user.originWeight;\n', '        uint256 modifiedWeight = originWeight.add(user.inviteeWeight);\n', '        if(user.isCalculateInvitation){\n', '            modifiedWeight = modifiedWeight.add(originWeight.div(INVITOR_WEIGHT));\n', '        }\n', '        return modifiedWeight;\n', '    }\n', '\n', '        // get how much token will be mined from _toBlock to _toBlock.\n', '    function getRewardToken(uint256 _fromBlock, uint256 _toBlock) public view virtual returns (uint256){\n', '        return calculateRewardToken(MINT_DECREASE_TERM, SHDPerBlock, startBlock, _fromBlock, _toBlock);\n', '    }\n', '\n', '    function calculateRewardToken(uint _term, uint256 _initialBlock, uint256 _startBlock, uint256 _fromBlock, uint256 _toBlock) private pure returns (uint256){\n', '        if(_fromBlock > _toBlock || _startBlock > _toBlock)\n', '            return 0;\n', '        if(_startBlock > _fromBlock)\n', '            _fromBlock = _startBlock;\n', '        uint256 totalReward = 0;\n', '        uint256 blockPeriod = _fromBlock.sub(_startBlock).add(1);\n', '        uint256 yearPeriod = blockPeriod.div(_term);  // produce 5760 blocks per day, 2102400 blocks per year.\n', '        for (uint256 i = 0; i < yearPeriod; i++){\n', '            _initialBlock = _initialBlock.div(2);\n', '        }\n', '        uint256 termStartIndex = yearPeriod.add(1).mul(_term).add(_startBlock);\n', '        uint256 beforeCalculateIndex = _fromBlock.sub(1);\n', '        while(_toBlock >= termStartIndex && _initialBlock > 0){\n', '            totalReward = totalReward.add(termStartIndex.sub(beforeCalculateIndex).mul(_initialBlock));\n', '            beforeCalculateIndex = termStartIndex.add(1);\n', '            _initialBlock = _initialBlock.div(2);\n', '            termStartIndex = termStartIndex.add(_term);\n', '        }\n', '        if(_toBlock > beforeCalculateIndex){\n', '            totalReward = totalReward.add(_toBlock.sub(beforeCalculateIndex).mul(_initialBlock));\n', '        }\n', '        return totalReward;\n', '    }\n', '\n', '    function getTargetTokenInSwap(IUniswapV2Pair _lpTokenSwap, address _targetToken) internal view returns (address, address, uint256){\n', '        address token0 = _lpTokenSwap.token0();\n', '        address token1 = _lpTokenSwap.token1();\n', '        if(token0 == _targetToken){\n', '            return(token0, token1, 0);\n', '        }\n', '        if(token1 == _targetToken){\n', '            return(token0, token1, 1);\n', '        }\n', '        require(false, "invalid uniswap");\n', '    }\n', '\n', '    function generateOrcaleInfo(IUniswapV2Pair _pairSwap, bool _isFirstTokenEth) internal view returns(TokenPairInfo memory){\n', '        uint256 priceTokenCumulativeLast = _isFirstTokenEth? _pairSwap.price1CumulativeLast(): _pairSwap.price0CumulativeLast();\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        uint32 tokenBlockTimestampLast;\n', '        (reserve0, reserve1, tokenBlockTimestampLast) = _pairSwap.getReserves();\n', "        require(reserve0 != 0 && reserve1 != 0, 'ExampleOracleSimple: NO_RESERVES'); // ensure that there's liquidity in the pair\n", '        TokenPairInfo memory tokenBInfo = TokenPairInfo({\n', '            tokenToEthSwap: _pairSwap,\n', '            isFirstTokenEth: _isFirstTokenEth,\n', '            priceCumulativeLast: priceTokenCumulativeLast,\n', '            blockTimestampLast: tokenBlockTimestampLast,\n', '            price: FixedPoint.uq112x112(0),\n', '            lastPriceUpdateHeight: block.number\n', '        });\n', '        return tokenBInfo;\n', '    }\n', '\n', '    function updateTokenOracle(TokenPairInfo storage _pairInfo) internal returns (FixedPoint.uq112x112 memory _price) {\n', '        FixedPoint.uq112x112 memory cachedPrice = _pairInfo.price;\n', '        if(cachedPrice._x > 0 && block.number.sub(_pairInfo.lastPriceUpdateHeight) <= updateTokenPriceTerm){\n', '            return cachedPrice;\n', '        }\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            UniswapV2OracleLibrary.currentCumulativePrices(address(_pairInfo.tokenToEthSwap));\n', '        uint32 timeElapsed = blockTimestamp - _pairInfo.blockTimestampLast; // overflow is desired\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        if(_pairInfo.isFirstTokenEth){\n', '            _price = FixedPoint.uq112x112(uint224(price1Cumulative.sub(_pairInfo.priceCumulativeLast).div(timeElapsed)));\n', '            _pairInfo.priceCumulativeLast = price1Cumulative;\n', '        }     \n', '        else{\n', '            _price = FixedPoint.uq112x112(uint224(price0Cumulative.sub(_pairInfo.priceCumulativeLast).div(timeElapsed)));\n', '            _pairInfo.priceCumulativeLast = price0Cumulative;\n', '        }\n', '        _pairInfo.price = _price;\n', '        _pairInfo.lastPriceUpdateHeight = block.number;\n', '        _pairInfo.blockTimestampLast = blockTimestamp;\n', '    }\n', '\n', '    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal override{\n', '        lastRewardBlock = _newStartBlock.sub(1);\n', '        if(poolInfo.length > 0){\n', '            PoolInfo storage shdPool = poolInfo[0];\n', '            shdPool.lastDividendHeight = lastRewardBlock;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/ShardingDAOMiningDelegator.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract ShardingDAOMiningDelegator is DelegatorInterface, ShardingDAOMining {\n', '    constructor(\n', '        SHDToken _SHD,\n', '        address _wethToken,\n', '        address _developerDAOFund,\n', '        address _marketingFund,\n', '        uint256 _maxRankNumber,\n', '        uint256 _startBlock,\n', '        address implementation_,\n', '        bytes memory becomeImplementationData\n', '    ) public {\n', '        delegateTo(\n', '            implementation_,\n', '            abi.encodeWithSignature(\n', '                "initialize(address,address,address,address,uint256,uint256)",\n', '                _SHD,\n', '                _wethToken,\n', '                _developerDAOFund,\n', '                _marketingFund,\n', '                _maxRankNumber,\n', '                _startBlock\n', '            )\n', '        );\n', '        admin = msg.sender;\n', '        _setImplementation(implementation_, false, becomeImplementationData);\n', '    }\n', '\n', '    function _setImplementation(\n', '        address implementation_,\n', '        bool allowResign,\n', '        bytes memory becomeImplementationData\n', '    ) public override {\n', '        checkAdmin();\n', '        if (allowResign) {\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature("_resignImplementation()")\n', '            );\n', '        }\n', '\n', '        address oldImplementation = implementation;\n', '        implementation = implementation_;\n', '\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "_becomeImplementation(bytes)",\n', '                becomeImplementationData\n', '            )\n', '        );\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '    }\n', '\n', '    function delegateTo(address callee, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to the implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToImplementation(bytes memory data)\n', '        public\n', '        returns (bytes memory)\n', '    {\n', '        return delegateTo(implementation, data);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToViewImplementation(bytes memory data)\n', '        public\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) =\n', '            address(this).staticcall(\n', '                abi.encodeWithSignature("delegateToImplementation(bytes)", data)\n', '            );\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return abi.decode(returnData, (bytes));\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '    //  */\n', '    fallback() external payable {\n', '        if (msg.value > 0) return;\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '            switch success\n', '                case 0 {\n', '                    revert(free_mem_ptr, returndatasize())\n', '                }\n', '                default {\n', '                    return(free_mem_ptr, returndatasize())\n', '                }\n', '        }\n', '    }\n', '\n', '    function setNftShard(address _nftShard) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setNftShard(address)", _nftShard)\n', '        );\n', '    }\n', '\n', '    function add(\n', '        uint256 _nftPoolId,\n', '        IUniswapV2Pair _lpTokenSwap,\n', '        IUniswapV2Pair _tokenToEthSwap\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "add(uint256,address,address)",\n', '                _nftPoolId,\n', '                _lpTokenSwap,\n', '                _tokenToEthSwap\n', '            )\n', '        );\n', '    }\n', '\n', '    function setPriceUpdateTerm(uint256 _term) \n', '        public \n', '        override\n', '    {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setPriceUpdateTerm(uint256)",\n', '                _term\n', '            )\n', '        );\n', '    }\n', '\n', '    function kickEvilPoolByPid(uint256 _pid, string calldata description)\n', '        public\n', '        override\n', '    {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "kickEvilPoolByPid(uint256,string)",\n', '                _pid,\n', '                description\n', '            )\n', '        );\n', '    }\n', '\n', '    function resetEvilPool(uint256 _pid)\n', '        public\n', '        override\n', '    {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "resetEvilPool(uint256)",\n', '                _pid\n', '            )\n', '        );\n', '    }\n', '\n', '    function setMintCoefficient(\n', '        uint256 _nftMintWeight,\n', '        uint256 _reserveMintWeight\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setMintCoefficient(uint256,uint256)",\n', '                _nftMintWeight,\n', '                _reserveMintWeight\n', '            )\n', '        );\n', '    }\n', '\n', '    function setShardPoolDividendWeight(\n', '        uint256 _shardPoolWeight,\n', '        uint256 _otherPoolWeight\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setShardPoolDividendWeight(uint256,uint256)",\n', '                _shardPoolWeight,\n', '                _otherPoolWeight\n', '            )\n', '        );\n', '    }\n', '\n', '    function setStartBlock(\n', '        uint256 _startBlock\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setStartBlock(uint256)",\n', '                _startBlock\n', '            )\n', '        );\n', '    }\n', '\n', '    function setSHDPerBlock(uint256 _shardPerBlock, bool _withUpdate) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setSHDPerBlock(uint256,bool)",\n', '                _shardPerBlock,\n', '                _withUpdate\n', '            )\n', '        );\n', '    }\n', '\n', '    function massUpdatePools() public override {\n', '        delegateToImplementation(abi.encodeWithSignature("massUpdatePools()"));\n', '    }\n', '\n', '    function updatePoolDividend(uint256 _pid) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("updatePoolDividend(uint256)", _pid)\n', '        );\n', '    }\n', '\n', '    function deposit(\n', '        uint256 _pid,\n', '        uint256 _amount,\n', '        uint256 _lockTime\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "deposit(uint256,uint256,uint256)",\n', '                _pid,\n', '                _amount,\n', '                _lockTime\n', '            )\n', '        );\n', '    }\n', '\n', '    function withdraw(uint256 _pid) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("withdraw(uint256)", _pid)\n', '        );\n', '    }\n', '\n', '    function tryToReplacePoolInRank(uint256 _poolIndexInRank, uint256 _pid)\n', '        public\n', '        override\n', '    {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "tryToReplacePoolInRank(uint256,uint256)",\n', '                _poolIndexInRank,\n', '                _pid\n', '            )\n', '        );\n', '    }\n', '\n', '    function acceptInvitation(address _invitor) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("acceptInvitation(address)", _invitor)\n', '        );\n', '    }\n', '\n', '    function setMaxRankNumber(uint256 _count) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setMaxRankNumber(uint256)", _count)\n', '        );\n', '    }\n', '\n', '    function setDeveloperDAOFund(\n', '    address _developer\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setDeveloperDAOFund(address)",\n', '                _developer\n', '            )\n', '        );\n', '    }\n', '\n', '    function setDividendWeight(\n', '        uint256 _userDividendWeight,\n', '        uint256 _devDividendWeight\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setDividendWeight(uint256,uint256)",\n', '                _userDividendWeight,\n', '                _devDividendWeight\n', '            )\n', '        );\n', '    }\n', '\n', '    function setTokenAmountLimit(\n', '        uint256 _pid, \n', '        uint256 _tokenAmountLimit\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setTokenAmountLimit(uint256,uint256)",\n', '                _pid,\n', '                _tokenAmountLimit\n', '            )\n', '        );\n', '    }\n', '\n', '    function setTokenAmountLimitFeeRate(\n', '        uint256 _feeRateNumerator,\n', '        uint256 _feeRateDenominator\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setTokenAmountLimitFeeRate(uint256,uint256)",\n', '                _feeRateNumerator,\n', '                _feeRateDenominator\n', '            )\n', '        );\n', '    }\n', '\n', '    function setContracSenderFeeRate(\n', '        uint256 _feeRateNumerator,\n', '        uint256 _feeRateDenominator\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setContracSenderFeeRate(uint256,uint256)",\n', '                _feeRateNumerator,\n', '                _feeRateDenominator\n', '            )\n', '        );\n', '    }\n', '\n', '    function transferAdmin(\n', '        address _admin\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "transferAdmin(address)",\n', '                _admin\n', '            )\n', '        );\n', '    }\n', '\n', '    function setMarketingFund(\n', '        address _marketingFund\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setMarketingFund(address)",\n', '                _marketingFund\n', '            )\n', '        );\n', '    }\n', '\n', '    function pendingSHARD(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256, uint256, uint256)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "pendingSHARD(uint256,address)",\n', '                    _pid,\n', '                    _user\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256, uint256));\n', '    }\n', '\n', '    function pendingSHARDByPids(uint256[] memory _pids, address _user)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "pendingSHARDByPids(uint256[],address)",\n', '                    _pids,\n', '                    _user\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256[], uint256[], uint256));\n', '    }\n', '\n', '    function getPoolLength() public view override returns (uint256) {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getPoolLength()")\n', '            );\n', '        return abi.decode(data, (uint256));\n', '    }\n', '\n', '    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256[] memory _nftPoolId,\n', '            uint256[] memory _accumulativeDividend,\n', '            uint256[] memory _usersTotalWeight,\n', '            uint256[] memory _lpTokenAmount,\n', '            uint256[] memory _oracleWeight,\n', '            address[] memory _swapAddress\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getPagePoolInfo(uint256,uint256)",\n', '                    _fromIndex,\n', '                    _toIndex\n', '                )\n', '            );\n', '        return\n', '            abi.decode(\n', '                data,\n', '                (\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    address[]\n', '                )\n', '            );\n', '    }\n', '\n', '    function getInstantPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\n', '    public\n', '    override\n', '    returns (\n', '        uint256[] memory _nftPoolId,\n', '        uint256[] memory _accumulativeDividend,\n', '        uint256[] memory _usersTotalWeight,\n', '        uint256[] memory _lpTokenAmount,\n', '        uint256[] memory _oracleWeight,\n', '        address[] memory _swapAddress\n', '    )\n', '    {\n', '        bytes memory data =\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getInstantPagePoolInfo(uint256,uint256)",\n', '                    _fromIndex,\n', '                    _toIndex\n', '                )\n', '            );\n', '        return\n', '            abi.decode(\n', '                data,\n', '                (\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    address[]\n', '                )\n', '            );\n', '    }\n', '\n', '    function getRankList() public view override returns (uint256[] memory) {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getRankList()")\n', '            );\n', '        return abi.decode(data, (uint256[]));\n', '    }\n', '\n', '    function getBlackList()\n', '        public\n', '        view\n', '        override\n', '        returns (EvilPoolInfo[] memory _blackList)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getBlackList()")\n', '            );\n', '        return abi.decode(data, (EvilPoolInfo[]));\n', '    }\n', '\n', '    function getInvitation(address _sender)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            address _invitor,\n', '            address[] memory _invitees,\n', '            bool _isWithdrawn\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getInvitation(address)", _sender)\n', '            );\n', '        return abi.decode(data, (address, address[], bool));\n', '    }\n', '\n', '    function getUserInfo(uint256 _pid, address _sender)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256 _amount,\n', '            uint256 _originWeight,\n', '            uint256 _modifiedWeight,\n', '            uint256 _endBlock\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getUserInfo(uint256,address)",\n', '                    _pid,\n', '                    _sender\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256, uint256, uint256));\n', '    }\n', '\n', '    function getUserInfoByPids(uint256[] memory _pids, address _sender)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256[] memory _amount,\n', '            uint256[] memory _originWeight,\n', '            uint256[] memory _modifiedWeight,\n', '            uint256[] memory _endBlock\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getUserInfoByPids(uint256[],address)",\n', '                    _pids,\n', '                    _sender\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256[], uint256[], uint256[], uint256[]));\n', '    }\n', '\n', '    function getOracleInfo(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            address _swapToEthAddress,\n', '            uint256 _priceCumulativeLast,\n', '            uint256 _blockTimestampLast,\n', '            uint256 _price,\n', '            uint256 _lastPriceUpdateHeight\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getOracleInfo(uint256)", _pid)\n', '            );\n', '        return abi.decode(data, (address, uint256, uint256, uint256, uint256));\n', '    }\n', '\n', '    function getRewardToken(uint256 _fromBlock, uint256 _toBlock)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getRewardToken(uint256,uint256)", _fromBlock, _toBlock)\n', '            );\n', '        return abi.decode(data, (uint256));\n', '    }\n', '}']