['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./Context.sol";\n', 'import "./ERC721.sol";\n', 'import "./Strings.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./EnumerableSet.sol";\n', '\n', 'contract Uncurated is Ownable, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n', '    \n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '    using Strings for uint256;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from holder address to their (enumerable) set of owned tokens\n', '    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n', '\n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _tokenOwners;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_)  {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '        \n', '        nameOfCreator = "Eivind Kleiven";\n', '        description = "Uncurated is a token that can display all art, maximum 1 artwork per day.";\n', '        \n', '        address payable to = _msgSender();\n', '        _holderTokens[to].add(1);\n', '        _tokenOwners.set(1, to);\n', '        emit Transfer(address(0), to, 1);\n', '    }\n', '    \n', '    \n', '    \n', '        \n', '// Index of tokenURL to tokenURL\n', 'mapping(uint32 => string) public tokenURIs;\n', '\n', '// index of tokenURL to block.timestamp\n', 'mapping(uint32 => uint256) public tokenURIsBlockTimestamp;\n', '\n', 'mapping(uint32 => address) public tokenURISetByAddresses;\n', '\n', '// Number of times the tokenURI has been set\n', 'uint32 public tokenURIsCount=0;\n', '\n', '// name of creator\n', 'string public nameOfCreator;\n', '   \n', '\n', '// token description\n', 'string public description;\n', '\n', '\n', '\n', 'function setTokenURI(string memory _tokenURI) public\n', '{\n', "\trequire(block.timestamp > tokenURIsBlockTimestamp[tokenURIsCount], 'The spot is still taken.');\n", "\trequire(bytes(_tokenURI).length != 0, 'tokenURI cannot be empty.');\n", '\n', '\tuint32 nextIndex = tokenURIsCount + 1;\n', '\t\n', '\ttokenURIs[nextIndex] = _tokenURI;\n', '\ttokenURIsCount = nextIndex;\n', '\ttokenURIsBlockTimestamp[nextIndex] = block.timestamp + 86400;\n', '\ttokenURISetByAddresses[nextIndex] = _msgSender();\n', '}\n', '\n', 'function withdraw() external onlyOwner () {\n', '    if(address(this).balance > 0)\n', '    {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '/**\n', '* @dev See {IERC721Metadata-tokenURI}.\n', '*/\n', 'function tokenURI(uint256 tokenId) public view override returns (string memory){\n', '    require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\treturn tokenURIs[tokenURIsCount];\n', '}\n', '\n', '    /**\n', '    * @dev Contract can recieve, and contract owner withdraw, ETH that are not deposits to a collection balance.\n', '    */\n', '    receive() external payable {}\n', '    \n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _holderTokens[owner].length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view override returns (address) {\n', '        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', ' \n', '\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _holderTokens[owner].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n', '        return _tokenOwners.length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view override returns (uint256) {\n', '        (uint256 tokenId, ) = _tokenOwners.at(index);\n', '        return tokenId;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _tokenOwners.contains(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function burn(uint256 tokenId) external virtual {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");\n', '        address owner = ownerOf(tokenId);\n', '\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[owner].remove(tokenId);\n', '\n', '        _tokenOwners.remove(tokenId);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '    \n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[from].remove(tokenId);\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ), "ERC721: transfer to non ERC721Receiver implementer");\n', '        bytes4 retval = abi.decode(returndata, (bytes4));\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _approve(address to, uint256 tokenId) private {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ownerOf(tokenId), to, tokenId);\n', '    }\n', '    \n', '    \n', '\n', '\n', '}']