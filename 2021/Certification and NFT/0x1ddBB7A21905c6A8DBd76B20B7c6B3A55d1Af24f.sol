['"""\n', '@title Greenwood Registry\n', '@notice A storage contract for Greenwood Protocol contract addresses\n', '@author Greenwood Labs\n', '"""\n', '\n', '# define the events used by the contract\n', 'event SetAddress:\n', '    previousAddress: address\n', '    newAddress: address\n', '    contractName: String[20]\n', '    version: String[11]\n', '    governance: address\n', '    blockNumber: uint256\n', '\n', 'event SetGovernance:\n', '    previousGovernance: address\n', '    newGovernance: address\n', '    blockNumber: uint256\n', '\n', '# define the storage variables used by the contract\n', 'governance: public(address)\n', 'versions: public(HashMap[String[11], HashMap[String[20], address]])\n', '\n', '@external\n', 'def __init__(_governance: address):\n', '    """\n', '    @notice Contract constructor\n', '    @param _governance The address of the Greenwood governance\n', '    """\n', '\n', '    # set the address of the Governance\n', '    self.governance = _governance\n', '\n', '@internal\n', 'def isGovernance(_caller: address, _role: String[20]) -> bool:\n', '    """\n', '    @notice Method for role-based security\n', '    @param _caller The address that called the permissioned method\n', '    @param _role The requested authorization level\n', '    @return True if the caller is the Governance, False otherwise\n', '    """\n', '\n', '    # check if the requested role is "governance"\n', '    if keccak256(_role) == keccak256("governance"):\n', '\n', '        # return the equality comparison\n', '        return self.governance == _caller\n', '\n', '    # catch extraneous role arguments\n', '    else:\n', '\n', '        # revert\n', '        raise "Unhandled role argument"\n', '        \n', '@external\n', 'def getAddress(_contract: String[20], _version: String[11]) -> address:\n', '    """\n', '    @notice Gets the address of a specified Greenwood contract\n', '    @param _contract The name of the contract\n', '    @param _version The version of the Greenwood Protocol that the contract belongs to\n', '    @return An address\n', '    """\n', '\n', '    # get the address for the specified contract from storage and return it\n', '    return self.versions[_version][_contract]\n', '\n', '@external\n', 'def setAddress(_contract: String[20], _address: address, _version: String[11],):\n', '    """\n', '    @notice Stores the address of a specified Greenwood contract\n', '    @param _contract The name of the contract that is being stored\n', '    @param _address The address of the contract that is being stored\n', '    @param _version The version of the Greenwood Protocol that the contract belongs to\n', '    @dev Only the Governance can call this method\n', '    """\n', '\n', '    # require that the method caller is the governance\n', '    assert self.isGovernance(msg.sender, "governance") == True, "Only Governance can call this method"\n', '\n', '    # get the previous address for the contract\n', '    previousAddress: address = self.versions[_version][_contract]\n', '\n', '    # set the contract name and adddress for the specified version\n', '    self.versions[_version][_contract] = _address\n', '\n', '    # emit a SetAddress event\n', '    log SetAddress(previousAddress, _address, _contract, _version, msg.sender, block.number) \n', '\n', '@external\n', 'def setGovernance(_new_governance: address):\n', '    """\n', '    @notice Updates the address of the Governance\n', '    @param _new_governance The address of the new GReenwood governance\n', '    @dev Only the Governance can call this method\n', '    """\n', '\n', '    # require that msg.sender is the current Governance\n', '    assert self.isGovernance(msg.sender, "governance") == True, "Only Governance can call this method"\n', '\n', '    # get the previous Governance \n', '    previousGovernance: address = self.governance\n', '\n', '    # set the Registry Governance to be the value of _new_governance\n', '    self.governance = _new_governance\n', '\n', '    # emit a SetGovernance event\n', '    log SetGovernance(previousGovernance, _new_governance, block.number)']