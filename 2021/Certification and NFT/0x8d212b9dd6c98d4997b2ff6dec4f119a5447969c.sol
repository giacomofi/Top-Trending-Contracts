['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '/**\n', ' * Copyright 2017-2021, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\n', ' * Licensed under the Apache License, Version 2.0.\n', ' */\n', '\n', 'pragma solidity 0.5.17;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface IWeth {\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', 'contract IERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract IWethERC20 is IWeth, IERC20 {}\n', '\n', 'contract Constants {\n', '\n', '    uint256 internal constant WEI_PRECISION = 10**18;\n', '    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\n', '\n', '    uint256 internal constant DAYS_IN_A_YEAR = 365;\n', '    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\n', '\n', '    string internal constant UserRewardsID = "UserRewards";\n', '    string internal constant LoanDepositValueID = "LoanDepositValue";\n', '\n', '    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\n', '    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\n', '}\n', '\n', '/**\n', ' * @dev Library for managing loan sets\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n', ' *\n', ' */\n', 'library EnumerableBytes32Set {\n', '\n', '    struct Bytes32Set {\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) index;\n', '        bytes32[] values;\n', '    }\n', '\n', '    /**\n', '     * @dev Add an address value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return addBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     * Returns false if the value was already in the set.\n', '     */\n', '    function addBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!contains(set, value)){\n', '            set.index[value] = set.values.push(value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes an address value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return removeBytes32(set, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     * Returns false if the value was not present in the set.\n', '     */\n', '    function removeBytes32(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (contains(set, value)){\n', '            uint256 toDeleteIndex = set.index[value] - 1;\n', '            uint256 lastIndex = set.values.length - 1;\n', '\n', "            // If the element we're deleting is the last one, we can just remove it without doing a swap\n", '            if (lastIndex != toDeleteIndex) {\n', '                bytes32 lastValue = set.values[lastIndex];\n', '\n', '                // Move the last value to the index where the deleted value is\n', '                set.values[toDeleteIndex] = lastValue;\n', '                // Update the index for the moved value\n', '                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n', '            }\n', '\n', '            // Delete the index entry for the deleted value\n', '            delete set.index[value];\n', '\n', '            // Delete the old entry for the moved value\n', '            set.values.pop();\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function containsAddress(Bytes32Set storage set, address addrvalue)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 value;\n', '        assembly {\n', '            value := addrvalue\n', '        }\n', '        return set.index[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an array with all values in the set. O(N).\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '\n', '     * WARNING: This function may run out of gas on large sets: use {length} and\n', '     * {get} instead in these cases.\n', '     */\n', '    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\n', '        internal\n', '        view\n', '        returns (bytes32[] memory output)\n', '    {\n', '        uint256 end = start + count;\n', '        require(end >= start, "addition overflow");\n', '        end = set.values.length < end ? set.values.length : end;\n', '        if (end == 0 || start >= end) {\n', '            return output;\n', '        }\n', '\n', '        output = new bytes32[](end-start);\n', '        for (uint256 i = start; i < end; i++) {\n', '            output[i-start] = set.values[i];\n', '        }\n', '        return output;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements on the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return set.values.length;\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function get(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return set.values[index];\n', '    }\n', '\n', '   /** @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function getAddress(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        bytes32 value = set.values[index];\n', '        address addrvalue;\n', '        assembly {\n', '            addrvalue := value\n', '        }\n', '        return addrvalue;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <[email\xa0protected]Ï€.com>, Eenae <[email\xa0protected]>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n', '    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n', '    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n', '\n', '    /// @dev Constant for locked guard state\n', '    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one `nonReentrant` function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and an `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(reentrancyLock == REENTRANCY_GUARD_FREE, "nonReentrant");\n', '        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n', '        _;\n', '        reentrancyLock = REENTRANCY_GUARD_FREE;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "unauthorized");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return divCeil(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, rounding up and truncating the quotient\n', '    */\n', '    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b != 0, errorMessage);\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = ((a - 1) / b) + 1;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract LoanStruct {\n', '    struct Loan {\n', '        bytes32 id;                 // id of the loan\n', '        bytes32 loanParamsId;       // the linked loan params id\n', '        bytes32 pendingTradesId;    // the linked pending trades id\n', '        uint256 principal;          // total borrowed amount outstanding\n', '        uint256 collateral;         // total collateral escrowed for the loan\n', '        uint256 startTimestamp;     // loan start time\n', '        uint256 endTimestamp;       // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n', '        uint256 startMargin;        // initial margin when the loan opened\n', '        uint256 startRate;          // reference rate when the loan opened for converting collateralToken to loanToken\n', '        address borrower;           // borrower of this loan\n', '        address lender;             // lender of this loan\n', '        bool active;                // if false, the loan has been fully closed\n', '    }\n', '}\n', '\n', 'contract LoanParamsStruct {\n', '    struct LoanParams {\n', '        bytes32 id;                 // id of loan params object\n', "        bool active;                // if false, this object has been disabled by the owner and can't be used for future loans\n", '        address owner;              // owner of this object\n', '        address loanToken;          // the token being loaned\n', '        address collateralToken;    // the required collateral token\n', '        uint256 minInitialMargin;   // the minimum allowed initial margin\n', '        uint256 maintenanceMargin;  // an unhealthy loan when current margin is at or below this value\n', "        uint256 maxLoanTerm;        // the maximum term for new loans (0 means there's no max term)\n", '    }\n', '}\n', '\n', 'contract OrderStruct {\n', '    struct Order {\n', '        uint256 lockedAmount;           // escrowed amount waiting for a counterparty\n', '        uint256 interestRate;           // interest rate defined by the creator of this order\n', '        uint256 minLoanTerm;            // minimum loan term allowed\n', '        uint256 maxLoanTerm;            // maximum loan term allowed\n', '        uint256 createdTimestamp;       // timestamp when this order was created\n', '        uint256 expirationTimestamp;    // timestamp when this order expires\n', '    }\n', '}\n', '\n', 'contract LenderInterestStruct {\n', '    struct LenderInterest {\n', '        uint256 principalTotal;     // total borrowed amount outstanding of asset\n', '        uint256 owedPerDay;         // interest owed per day for all loans of asset\n', '        uint256 owedTotal;          // total interest owed for all loans of asset (assuming they go to full term)\n', '        uint256 paidTotal;          // total interest paid so far for asset\n', '        uint256 updatedTimestamp;   // last update\n', '    }\n', '}\n', '\n', 'contract LoanInterestStruct {\n', '    struct LoanInterest {\n', '        uint256 owedPerDay;         // interest owed per day for loan\n', '        uint256 depositTotal;       // total escrowed interest for loan\n', '        uint256 updatedTimestamp;   // last update\n', '    }\n', '}\n', '\n', 'contract Objects is\n', '    LoanStruct,\n', '    LoanParamsStruct,\n', '    OrderStruct,\n', '    LenderInterestStruct,\n', '    LoanInterestStruct\n', '{}\n', '\n', 'contract State is Constants, Objects, ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n', '\n', '    address public priceFeeds;                                                              // handles asset reference price lookups\n', '    address public swapsImpl;                                                               // handles asset swaps using dex liquidity\n', '\n', '    mapping (bytes4 => address) public logicTargets;                                        // implementations of protocol functions\n', '\n', '    mapping (bytes32 => Loan) public loans;                                                 // loanId => Loan\n', '    mapping (bytes32 => LoanParams) public loanParams;                                      // loanParamsId => LoanParams\n', '\n', '    mapping (address => mapping (bytes32 => Order)) public lenderOrders;                    // lender => orderParamsId => Order\n', '    mapping (address => mapping (bytes32 => Order)) public borrowerOrders;                  // borrower => orderParamsId => Order\n', '\n', '    mapping (bytes32 => mapping (address => bool)) public delegatedManagers;                // loanId => delegated => approved\n', '\n', '    // Interest\n', '    mapping (address => mapping (address => LenderInterest)) public lenderInterest;         // lender => loanToken => LenderInterest object\n', '    mapping (bytes32 => LoanInterest) public loanInterest;                                  // loanId => LoanInterest object\n', '\n', '    // Internals\n', '    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;                               // implementations set\n', '    EnumerableBytes32Set.Bytes32Set internal activeLoansSet;                                // active loans set\n', '\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets;           // lender loans set\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal borrowerLoanSets;         // borrow loans set\n', '    mapping (address => EnumerableBytes32Set.Bytes32Set) internal userLoanParamSets;        // user loan params set\n', '\n', '    address public feesController;                                                          // address controlling fee withdrawals\n', '\n', '    uint256 public lendingFeePercent = 10 ether; // 10% fee                                 // fee taken from lender interest payments\n', '    mapping (address => uint256) public lendingFeeTokensHeld;                               // total interest fees received and not withdrawn per asset\n', '    mapping (address => uint256) public lendingFeeTokensPaid;                               // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n', '\n', '    uint256 public tradingFeePercent = 0.15 ether; // 0.15% fee                             // fee paid for each trade\n', '    mapping (address => uint256) public tradingFeeTokensHeld;                               // total trading fees received and not withdrawn per asset\n', '    mapping (address => uint256) public tradingFeeTokensPaid;                               // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n', '\n', '    uint256 public borrowingFeePercent = 0.09 ether; // 0.09% fee                           // origination fee paid for each loan\n', '    mapping (address => uint256) public borrowingFeeTokensHeld;                             // total borrowing fees received and not withdrawn per asset\n', '    mapping (address => uint256) public borrowingFeeTokensPaid;                             // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n', '\n', '    uint256 public protocolTokenHeld;                                                       // current protocol token deposit balance\n', '    uint256 public protocolTokenPaid;                                                       // lifetime total payout of protocol token\n', '\n', '    uint256 public affiliateFeePercent = 30 ether; // 30% fee share                         // fee share for affiliate program\n', '\n', '    mapping (address => mapping (address => uint256)) public liquidationIncentivePercent;   // percent discount on collateral for liquidators per loanToken and collateralToken\n', '\n', '    mapping (address => address) public loanPoolToUnderlying;                               // loanPool => underlying\n', '    mapping (address => address) public underlyingToLoanPool;                               // underlying => loanPool\n', '    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet;                                  // loan pools set\n', '\n', '    mapping (address => bool) public supportedTokens;                                       // supported tokens for swaps\n', '\n', '    uint256 public maxDisagreement = 5 ether;                                               // % disagreement between swap rate and reference rate\n', '\n', '    uint256 public sourceBufferPercent = 5 ether;                                           // used to estimate kyber swap source amount\n', '\n', '    uint256 public maxSwapSize = 1500 ether;                                                // maximum supported swap size in ETH\n', '\n', '\n', '    function _setTarget(\n', '        bytes4 sig,\n', '        address target)\n', '        internal\n', '    {\n', '        logicTargets[sig] = target;\n', '\n', '        if (target != address(0)) {\n', '            logicTargetsSet.addBytes32(bytes32(sig));\n', '        } else {\n', '            logicTargetsSet.removeBytes32(bytes32(sig));\n', '        }\n', '    }\n', '}\n', '\n', 'interface IPriceFeeds {\n', '    function queryRate(\n', '        address sourceToken,\n', '        address destToken)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 precision);\n', '\n', '    function queryPrecision(\n', '        address sourceToken,\n', '        address destToken)\n', '        external\n', '        view\n', '        returns (uint256 precision);\n', '\n', '    function queryReturn(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount)\n', '        external\n', '        view\n', '        returns (uint256 destAmount);\n', '\n', '    function checkPriceDisagreement(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceAmount,\n', '        uint256 destAmount,\n', '        uint256 maxSlippage)\n', '        external\n', '        view\n', '        returns (uint256 sourceToDestSwapRate);\n', '\n', '    function amountInEth(\n', '        address Token,\n', '        uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256 ethAmount);\n', '\n', '    function getMaxDrawdown(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 maintenanceMargin)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getCurrentMarginAndCollateralSize(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        external\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralInEthAmount);\n', '\n', '    function getCurrentMargin(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount)\n', '        external\n', '        view\n', '        returns (uint256 currentMargin, uint256 collateralToLoanRate);\n', '\n', '    function shouldLiquidate(\n', '        address loanToken,\n', '        address collateralToken,\n', '        uint256 loanAmount,\n', '        uint256 collateralAmount,\n', '        uint256 maintenanceMargin)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function getFastGasPrice(\n', '        address payToken)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract FeesEvents {\n', '\n', '    enum FeeType {\n', '        Lending,\n', '        Trading,\n', '        Borrowing,\n', '        SettleInterest\n', '    }\n', '\n', '    event PayLendingFee(\n', '        address indexed payer,\n', '        address indexed token,\n', '        uint256 amount\n', '    );\n', '\n', '    event SettleFeeRewardForInterestExpense(\n', '        address indexed payer,\n', '        address indexed token,\n', '        bytes32 indexed loanId,\n', '        uint256 amount\n', '    );\n', '\n', '    event PayTradingFee(\n', '        address indexed payer,\n', '        address indexed token,\n', '        bytes32 indexed loanId,\n', '        uint256 amount\n', '    );\n', '\n', '    event PayBorrowingFee(\n', '        address indexed payer,\n', '        address indexed token,\n', '        bytes32 indexed loanId,\n', '        uint256 amount\n', '    );\n', '\n', '    event EarnReward(\n', '        address indexed receiver,\n', '        bytes32 indexed loanId,\n', '        FeeType indexed feeType,\n', '        address token,\n', '        uint256 amount\n', '    );\n', '}\n', '\n', 'contract FeesHelper is State, FeesEvents {\n', '    using SafeERC20 for IERC20;\n', '\n', '    // calculate trading fee\n', '    function _getTradingFee(\n', '        uint256 feeTokenAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return feeTokenAmount\n', '            .mul(tradingFeePercent)\n', '            .divCeil(WEI_PERCENT_PRECISION);\n', '    }\n', '\n', '    // calculate loan origination fee\n', '    function _getBorrowingFee(\n', '        uint256 feeTokenAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return feeTokenAmount\n', '            .mul(borrowingFeePercent)\n', '            .divCeil(WEI_PERCENT_PRECISION);\n', '    }\n', '\n', '    // settle trading fee\n', '    function _payTradingFee(\n', '        address user,\n', '        bytes32 loanId,\n', '        address feeToken,\n', '        uint256 tradingFee)\n', '        internal\n', '    {\n', '        if (tradingFee != 0) {\n', '            tradingFeeTokensHeld[feeToken] = tradingFeeTokensHeld[feeToken]\n', '                .add(tradingFee);\n', '\n', '            emit PayTradingFee(\n', '                user,\n', '                feeToken,\n', '                loanId,\n', '                tradingFee\n', '            );\n', '\n', '            _payFeeReward(\n', '                user,\n', '                loanId,\n', '                feeToken,\n', '                tradingFee,\n', '                FeeType.Trading\n', '            );\n', '        }\n', '    }\n', '\n', '    // settle loan origination fee\n', '    function _payBorrowingFee(\n', '        address user,\n', '        bytes32 loanId,\n', '        address feeToken,\n', '        uint256 borrowingFee)\n', '        internal\n', '    {\n', '        if (borrowingFee != 0) {\n', '            borrowingFeeTokensHeld[feeToken] = borrowingFeeTokensHeld[feeToken]\n', '                .add(borrowingFee);\n', '\n', '            emit PayBorrowingFee(\n', '                user,\n', '                feeToken,\n', '                loanId,\n', '                borrowingFee\n', '            );\n', '\n', '            _payFeeReward(\n', '                user,\n', '                loanId,\n', '                feeToken,\n', '                borrowingFee,\n', '                FeeType.Borrowing\n', '            );\n', '        }\n', '    }\n', '\n', '    // settle lender (interest) fee\n', '    function _payLendingFee(\n', '        address user,\n', '        address feeToken,\n', '        uint256 lendingFee)\n', '        internal\n', '    {\n', '        if (lendingFee != 0) {\n', '            lendingFeeTokensHeld[feeToken] = lendingFeeTokensHeld[feeToken]\n', '                .add(lendingFee);\n', '\n', '            emit PayLendingFee(\n', '                user,\n', '                feeToken,\n', '                lendingFee\n', '            );\n', '\n', '             //// NOTE: Lenders do not receive a fee reward ////\n', '        }\n', '    }\n', '\n', '    // settles and pays borrowers based on the fees generated by their interest payments\n', '    function _settleFeeRewardForInterestExpense(\n', '        LoanInterest storage loanInterestLocal,\n', '        bytes32 loanId,\n', '        address feeToken,\n', '        address user,\n', '        uint256 interestTime)\n', '        internal\n', '    {\n', '        uint256 updatedTimestamp = loanInterestLocal.updatedTimestamp;\n', '\n', '        uint256 interestExpenseFee;\n', '        if (updatedTimestamp != 0) {\n', "            // this represents the fee generated by a borrower's interest payment\n", '            interestExpenseFee = interestTime\n', '                .sub(updatedTimestamp)\n', '                .mul(loanInterestLocal.owedPerDay)\n', '                .mul(lendingFeePercent)\n', '                .div(1 days * WEI_PERCENT_PRECISION);\n', '        }\n', '\n', '        loanInterestLocal.updatedTimestamp = interestTime;\n', '\n', '        if (interestExpenseFee != 0) {\n', '            emit SettleFeeRewardForInterestExpense(\n', '                user,\n', '                feeToken,\n', '                loanId,\n', '                interestExpenseFee\n', '            );\n', '\n', '            _payFeeReward(\n', '                user,\n', '                loanId,\n', '                feeToken,\n', '                interestExpenseFee,\n', '                FeeType.SettleInterest\n', '            );\n', '        }\n', '    }\n', '\n', '    // pay protocolToken reward to user\n', '    function _payFeeReward(\n', '        address user,\n', '        bytes32 loanId,\n', '        address feeToken,\n', '        uint256 feeAmount,\n', '        FeeType feeType)\n', '        internal\n', '    {\n', '        // The protocol is designed to allow positions and loans to be closed, if for whatever reason\n', '        // the price lookup is failing, returning 0, or is otherwise paused. Therefore, we allow this\n', '        // call to fail silently, rather than revert, to allow the transaction to continue without a\n', '        // BZRX token reward.\n', '        uint256 rewardAmount;\n', '        address _priceFeeds = priceFeeds;\n', '        (bool success, bytes memory data) = _priceFeeds.staticcall(\n', '            abi.encodeWithSelector(\n', '                IPriceFeeds(_priceFeeds).queryReturn.selector,\n', '                feeToken,\n', '                bzrxTokenAddress, // price rewards using BZRX price rather than vesting token price\n', '                feeAmount / 2  // 50% of fee value\n', '            )\n', '        );\n', '        assembly {\n', '            if eq(success, 1) {\n', '                rewardAmount := mload(add(data, 32))\n', '            }\n', '        }\n', '\n', '        if (rewardAmount != 0) {\n', '            uint256 tokenBalance = protocolTokenHeld;\n', '            if (rewardAmount > tokenBalance) {\n', '                rewardAmount = tokenBalance;\n', '            }\n', '            if (rewardAmount != 0) {\n', '                protocolTokenHeld = tokenBalance\n', '                    .sub(rewardAmount);\n', '\n', '                bytes32 slot = keccak256(abi.encodePacked(user, UserRewardsID));\n', '                assembly {\n', '                    sstore(slot, add(sload(slot), rewardAmount))\n', '                }\n', '\n', '                emit EarnReward(\n', '                    user,\n', '                    loanId,\n', '                    feeType,\n', '                    vbzrxTokenAddress, // rewardToken\n', '                    rewardAmount\n', '                );\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract LiquidationHelper is State {\n', '\n', '    function _getLiquidationAmounts(\n', '        uint256 principal,\n', '        uint256 collateral,\n', '        uint256 currentMargin,\n', '        uint256 maintenanceMargin,\n', '        uint256 collateralToLoanRate,\n', '        uint256 incentivePercent)\n', '        internal\n', '        view\n', '        returns (uint256 maxLiquidatable, uint256 maxSeizable)\n', '    {\n', '        if (currentMargin > maintenanceMargin || collateralToLoanRate == 0) {\n', '            return (maxLiquidatable, maxSeizable);\n', '        } else if (currentMargin <= incentivePercent) {\n', '            return (principal, collateral);\n', '        }\n', '\n', '        uint256 desiredMargin = maintenanceMargin\n', '            .add(5 ether); // 5 percentage points above maintenance\n', '\n', '        // maxLiquidatable = ((1 + desiredMargin)*principal - collateralToLoanRate*collateral) / (desiredMargin - incentivePercent)\n', '        maxLiquidatable = desiredMargin\n', '            .add(WEI_PERCENT_PRECISION)\n', '            .mul(principal)\n', '            .div(WEI_PERCENT_PRECISION);\n', '        maxLiquidatable = maxLiquidatable\n', '            .sub(\n', '                collateral\n', '                    .mul(collateralToLoanRate)\n', '                    .div(WEI_PRECISION)\n', '            );\n', '        maxLiquidatable = maxLiquidatable\n', '            .mul(WEI_PERCENT_PRECISION)\n', '            .div(\n', '                desiredMargin\n', '                    .sub(incentivePercent)\n', '            );\n', '        if (maxLiquidatable > principal) {\n', '            maxLiquidatable = principal;\n', '        }\n', '\n', '        // maxSeizable = maxLiquidatable * (1 + incentivePercent) / collateralToLoanRate\n', '        maxSeizable = maxLiquidatable\n', '            .mul(\n', '                incentivePercent\n', '                    .add(WEI_PERCENT_PRECISION)\n', '            );\n', '        maxSeizable = maxSeizable\n', '            .div(collateralToLoanRate)\n', '            .div(100);\n', '        if (maxSeizable > collateral) {\n', '            maxSeizable = collateral;\n', '        }\n', '\n', '        return (maxLiquidatable, maxSeizable);\n', '    }\n', '}\n', '\n', 'contract VaultController is Constants {\n', '    using SafeERC20 for IERC20;\n', '\n', '    event VaultDeposit(\n', '        address indexed asset,\n', '        address indexed from,\n', '        uint256 amount\n', '    );\n', '    event VaultWithdraw(\n', '        address indexed asset,\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '\n', '    function vaultEtherDeposit(\n', '        address from,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        IWethERC20 _wethToken = wethToken;\n', '        _wethToken.deposit.value(value)();\n', '\n', '        emit VaultDeposit(\n', '            address(_wethToken),\n', '            from,\n', '            value\n', '        );\n', '    }\n', '\n', '    function vaultEtherWithdraw(\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        if (value != 0) {\n', '            IWethERC20 _wethToken = wethToken;\n', '            uint256 balance = address(this).balance;\n', '            if (value > balance) {\n', '                _wethToken.withdraw(value - balance);\n', '            }\n', '            Address.sendValue(to, value);\n', '\n', '            emit VaultWithdraw(\n', '                address(_wethToken),\n', '                to,\n', '                value\n', '            );\n', '        }\n', '    }\n', '\n', '    function vaultDeposit(\n', '        address token,\n', '        address from,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        if (value != 0) {\n', '            IERC20(token).safeTransferFrom(\n', '                from,\n', '                address(this),\n', '                value\n', '            );\n', '\n', '            emit VaultDeposit(\n', '                token,\n', '                from,\n', '                value\n', '            );\n', '        }\n', '    }\n', '\n', '    function vaultWithdraw(\n', '        address token,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        if (value != 0) {\n', '            IERC20(token).safeTransfer(\n', '                to,\n', '                value\n', '            );\n', '\n', '            emit VaultWithdraw(\n', '                token,\n', '                to,\n', '                value\n', '            );\n', '        }\n', '    }\n', '\n', '    function vaultTransfer(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        if (value != 0) {\n', '            if (from == address(this)) {\n', '                IERC20(token).safeTransfer(\n', '                    to,\n', '                    value\n', '                );\n', '            } else {\n', '                IERC20(token).safeTransferFrom(\n', '                    from,\n', '                    to,\n', '                    value\n', '                );\n', '            }\n', '        }\n', '    }\n', '\n', '    function vaultApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '    {\n', '        if (value != 0 && IERC20(token).allowance(address(this), to) != 0) {\n', '            IERC20(token).safeApprove(to, 0);\n', '        }\n', '        IERC20(token).safeApprove(to, value);\n', '    }\n', '}\n', '\n', 'contract InterestUser is State, VaultController, FeesHelper {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function _payInterest(\n', '        address lender,\n', '        address interestToken)\n', '        internal\n', '    {\n', '        LenderInterest storage lenderInterestLocal = lenderInterest[lender][interestToken];\n', '\n', '        uint256 interestOwedNow = 0;\n', '        if (lenderInterestLocal.owedPerDay != 0 && lenderInterestLocal.updatedTimestamp != 0) {\n', '            interestOwedNow = block.timestamp\n', '                .sub(lenderInterestLocal.updatedTimestamp)\n', '                .mul(lenderInterestLocal.owedPerDay)\n', '                .div(1 days);\n', '\n', '            lenderInterestLocal.updatedTimestamp = block.timestamp;\n', '\n', '            if (interestOwedNow > lenderInterestLocal.owedTotal)\n', '\t            interestOwedNow = lenderInterestLocal.owedTotal;\n', '\n', '            if (interestOwedNow != 0) {\n', '                lenderInterestLocal.paidTotal = lenderInterestLocal.paidTotal\n', '                    .add(interestOwedNow);\n', '                lenderInterestLocal.owedTotal = lenderInterestLocal.owedTotal\n', '                    .sub(interestOwedNow);\n', '\n', '                _payInterestTransfer(\n', '                    lender,\n', '                    interestToken,\n', '                    interestOwedNow\n', '                );\n', '            }\n', '        } else {\n', '            lenderInterestLocal.updatedTimestamp = block.timestamp;\n', '        }\n', '    }\n', '\n', '    function _payInterestTransfer(\n', '        address lender,\n', '        address interestToken,\n', '        uint256 interestOwedNow)\n', '        internal\n', '    {\n', '        uint256 lendingFee = interestOwedNow\n', '            .mul(lendingFeePercent)\n', '            .divCeil(WEI_PERCENT_PRECISION);\n', '\n', '        _payLendingFee(\n', '            lender,\n', '            interestToken,\n', '            lendingFee\n', '        );\n', '\n', '        // transfers the interest to the lender, less the interest fee\n', '        vaultWithdraw(\n', '            interestToken,\n', '            lender,\n', '            interestOwedNow\n', '                .sub(lendingFee)\n', '        );\n', '    }\n', '}\n', '\n', 'contract SwapsEvents {\n', '\n', '    event LoanSwap(\n', '        bytes32 indexed loanId,\n', '        address indexed sourceToken,\n', '        address indexed destToken,\n', '        address borrower,\n', '        uint256 sourceAmount,\n', '        uint256 destAmount\n', '    );\n', '\n', '    event ExternalSwap(\n', '        address indexed user,\n', '        address indexed sourceToken,\n', '        address indexed destToken,\n', '        uint256 sourceAmount,\n', '        uint256 destAmount\n', '    );\n', '}\n', '\n', 'interface ISwapsImpl {\n', '    function dexSwap(\n', '        address sourceTokenAddress,\n', '        address destTokenAddress,\n', '        address receiverAddress,\n', '        address returnToSenderAddress,\n', '        uint256 minSourceTokenAmount,\n', '        uint256 maxSourceTokenAmount,\n', '        uint256 requiredDestTokenAmount)\n', '        external\n', '        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\n', '\n', '    function dexExpectedRate(\n', '        address sourceTokenAddress,\n', '        address destTokenAddress,\n', '        uint256 sourceTokenAmount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract SwapsUser is State, SwapsEvents, FeesHelper {\n', '\n', '    function _loanSwap(\n', '        bytes32 loanId,\n', '        address sourceToken,\n', '        address destToken,\n', '        address user,\n', '        uint256 minSourceTokenAmount,\n', '        uint256 maxSourceTokenAmount,\n', '        uint256 requiredDestTokenAmount,\n', '        bool bypassFee,\n', '        bytes memory loanDataBytes)\n', '        internal\n', '        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed, uint256 sourceToDestSwapRate)\n', '    {\n', '        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall(\n', '            [\n', '                sourceToken,\n', '                destToken,\n', '                address(this), // receiver\n', '                address(this), // returnToSender\n', '                user\n', '            ],\n', '            [\n', '                minSourceTokenAmount,\n', '                maxSourceTokenAmount,\n', '                requiredDestTokenAmount\n', '            ],\n', '            loanId,\n', '            bypassFee,\n', '            loanDataBytes\n', '        );\n', '\n', '        // will revert if swap size too large\n', '        _checkSwapSize(sourceToken, sourceTokenAmountUsed);\n', '\n', '        // will revert if disagreement found\n', '        sourceToDestSwapRate = IPriceFeeds(priceFeeds).checkPriceDisagreement(\n', '            sourceToken,\n', '            destToken,\n', '            sourceTokenAmountUsed,\n', '            destTokenAmountReceived,\n', '            maxDisagreement\n', '        );\n', '\n', '        emit LoanSwap(\n', '            loanId,\n', '            sourceToken,\n', '            destToken,\n', '            user,\n', '            sourceTokenAmountUsed,\n', '            destTokenAmountReceived\n', '        );\n', '    }\n', '\n', '    function _swapsCall(\n', '        address[5] memory addrs,\n', '        uint256[3] memory vals,\n', '        bytes32 loanId,\n', '        bool miscBool, // bypassFee\n', '        bytes memory loanDataBytes)\n', '        internal\n', '        returns (uint256, uint256)\n', '    {\n', '        //addrs[0]: sourceToken\n', '        //addrs[1]: destToken\n', '        //addrs[2]: receiver\n', '        //addrs[3]: returnToSender\n', '        //addrs[4]: user\n', '        //vals[0]:  minSourceTokenAmount\n', '        //vals[1]:  maxSourceTokenAmount\n', '        //vals[2]:  requiredDestTokenAmount\n', '\n', '        require(vals[0] != 0, "sourceAmount == 0");\n', '\n', '        uint256 destTokenAmountReceived;\n', '        uint256 sourceTokenAmountUsed;\n', '\n', '        uint256 tradingFee;\n', '        if (!miscBool) { // bypassFee\n', '            if (vals[2] == 0) {\n', '                // condition: vals[0] will always be used as sourceAmount\n', '\n', '                tradingFee = _getTradingFee(vals[0]);\n', '                if (tradingFee != 0) {\n', '                    _payTradingFee(\n', '                        addrs[4], // user\n', '                        loanId,\n', '                        addrs[0], // sourceToken\n', '                        tradingFee\n', '                    );\n', '\n', '                    vals[0] = vals[0]\n', '                        .sub(tradingFee);\n', '                }\n', '            } else {\n', '                // condition: unknown sourceAmount will be used\n', '\n', '                tradingFee = _getTradingFee(vals[2]);\n', '\n', '                if (tradingFee != 0) {\n', '                    vals[2] = vals[2]\n', '                        .add(tradingFee);\n', '                }\n', '            }\n', '        }\n', '\n', '        if (vals[1] == 0) {\n', '            vals[1] = vals[0];\n', '        } else {\n', '            require(vals[0] <= vals[1], "min greater than max");\n', '        }\n', '\n', '        require(loanDataBytes.length == 0, "invalid state");\n', '        (destTokenAmountReceived, sourceTokenAmountUsed) = _swapsCall_internal(\n', '            addrs,\n', '            vals\n', '        );\n', '\n', '        if (vals[2] == 0) {\n', "            // there's no minimum destTokenAmount, but all of vals[0] (minSourceTokenAmount) must be spent, and amount spent can't exceed vals[0]\n", '            require(sourceTokenAmountUsed == vals[0], "swap too large to fill");\n', '\n', '            if (tradingFee != 0) {\n', '                sourceTokenAmountUsed = sourceTokenAmountUsed + tradingFee; // will never overflow\n', '            }\n', '        } else {\n', "            // there's a minimum destTokenAmount required, but sourceTokenAmountUsed won't be greater than vals[1] (maxSourceTokenAmount)\n", '            require(sourceTokenAmountUsed <= vals[1], "swap fill too large");\n', '            require(destTokenAmountReceived >= vals[2], "insufficient swap liquidity");\n', '\n', '            if (tradingFee != 0) {\n', '                _payTradingFee(\n', '                    addrs[4], // user\n', '                    loanId, // loanId,\n', '                    addrs[1], // destToken\n', '                    tradingFee\n', '                );\n', '\n', '                destTokenAmountReceived = destTokenAmountReceived - tradingFee; // will never overflow\n', '            }\n', '        }\n', '\n', '        return (destTokenAmountReceived, sourceTokenAmountUsed);\n', '    }\n', '\n', '    function _swapsCall_internal(\n', '        address[5] memory addrs,\n', '        uint256[3] memory vals)\n', '        internal\n', '        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed)\n', '    {\n', '        bytes memory data = abi.encodeWithSelector(\n', '            ISwapsImpl(swapsImpl).dexSwap.selector,\n', '            addrs[0], // sourceToken\n', '            addrs[1], // destToken\n', '            addrs[2], // receiverAddress\n', '            addrs[3], // returnToSenderAddress\n', '            vals[0],  // minSourceTokenAmount\n', '            vals[1],  // maxSourceTokenAmount\n', '            vals[2]   // requiredDestTokenAmount\n', '        );\n', '\n', '        bool success;\n', '        (success, data) = swapsImpl.delegatecall(data);\n', '        require(success, "swap failed");\n', '\n', '        (destTokenAmountReceived, sourceTokenAmountUsed) = abi.decode(data, (uint256, uint256));\n', '    }\n', '\n', '    function _swapsExpectedReturn(\n', '        address sourceToken,\n', '        address destToken,\n', '        uint256 sourceTokenAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 tradingFee = _getTradingFee(sourceTokenAmount);\n', '        if (tradingFee != 0) {\n', '            sourceTokenAmount = sourceTokenAmount\n', '                .sub(tradingFee);\n', '        }\n', '\n', '        uint256 sourceToDestRate = ISwapsImpl(swapsImpl).dexExpectedRate(\n', '            sourceToken,\n', '            destToken,\n', '            sourceTokenAmount\n', '        );\n', '        uint256 sourceToDestPrecision = IPriceFeeds(priceFeeds).queryPrecision(\n', '            sourceToken,\n', '            destToken\n', '        );\n', '\n', '        return sourceTokenAmount\n', '            .mul(sourceToDestRate)\n', '            .div(sourceToDestPrecision);\n', '    }\n', '\n', '    function _checkSwapSize(\n', '        address tokenAddress,\n', '        uint256 amount)\n', '        internal\n', '        view\n', '    {\n', '        uint256 _maxSwapSize = maxSwapSize;\n', '        if (_maxSwapSize != 0) {\n', '            uint256 amountInEth;\n', '            if (tokenAddress == address(wethToken)) {\n', '                amountInEth = amount;\n', '            } else {\n', '                amountInEth = IPriceFeeds(priceFeeds).amountInEth(tokenAddress, amount);\n', '            }\n', '            require(amountInEth <= _maxSwapSize, "swap too large");\n', '        }\n', '    }\n', '}\n', '\n', 'contract LoanMaintenanceEvents {\n', '\n', '    event DepositCollateral(\n', '        address indexed user,\n', '        address indexed depositToken,\n', '        bytes32 indexed loanId,\n', '        uint256 depositAmount\n', '    );\n', '\n', '    event WithdrawCollateral(\n', '        address indexed user,\n', '        address indexed withdrawToken,\n', '        bytes32 indexed loanId,\n', '        uint256 withdrawAmount\n', '    );\n', '\n', '    event ExtendLoanDuration(\n', '        address indexed user,\n', '        address indexed depositToken,\n', '        bytes32 indexed loanId,\n', '        uint256 depositAmount,\n', '        uint256 collateralUsedAmount,\n', '        uint256 newEndTimestamp\n', '    );\n', '\n', '    event ReduceLoanDuration(\n', '        address indexed user,\n', '        address indexed withdrawToken,\n', '        bytes32 indexed loanId,\n', '        uint256 withdrawAmount,\n', '        uint256 newEndTimestamp\n', '    );\n', '\n', '    event LoanDeposit(\n', '        bytes32 indexed loanId,\n', '        uint256 depositValueAsLoanToken,\n', '        uint256 depositValueAsCollateralToken\n', '    );\n', '\n', '    event ClaimReward(\n', '        address indexed user,\n', '        address indexed receiver,\n', '        address indexed token,\n', '        uint256 amount\n', '    );\n', '\n', '    enum LoanType {\n', '        All,\n', '        Margin,\n', '        NonMargin\n', '    }\n', '\n', '    struct LoanReturnData {\n', '        bytes32 loanId; // id of the loan\n', '        uint96 endTimestamp; // loan end timestamp\n', '        address loanToken; // loan token address\n', '        address collateralToken; // collateral token address\n', '        uint256 principal; // principal amount of the loan\n', '        uint256 collateral; // collateral amount of the loan\n', '        uint256 interestOwedPerDay; // interest owned per day\n', '        uint256 interestDepositRemaining; // remaining unspent interest\n', '        uint256 startRate; // collateralToLoanRate\n', '        uint256 startMargin; // margin with which loan was open\n', '        uint256 maintenanceMargin; // maintenance margin\n', '        uint256 currentMargin; /// current margin\n', '        uint256 maxLoanTerm; // maximum term of the loan\n', '        uint256 maxLiquidatable; // current max liquidatable\n', '        uint256 maxSeizable; // current max seizable\n', '        uint256 depositValueAsLoanToken; // net value of deposit denominated as loanToken\n', '        uint256 depositValueAsCollateralToken; // net value of deposit denominated as collateralToken\n', '    }\n', '}\n', '\n', 'contract LoanMaintenance_partial is State, LoanMaintenanceEvents, LiquidationHelper {\n', '\n', '    function initialize(\n', '        address target)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _setTarget(this.getActiveLoans.selector, target);\n', '        _setTarget(this.getActiveLoansAdvanced.selector, target);\n', '    }\n', '\n', '    function getActiveLoans(\n', '        uint256 start,\n', '        uint256 count,\n', '        bool unsafeOnly)\n', '        external\n', '        view\n', '        returns (LoanReturnData[] memory loansData)\n', '    {\n', '        return _getActiveLoans(start, count, unsafeOnly, false);\n', '    }\n', '\n', '    function getActiveLoansAdvanced(\n', '        uint256 start,\n', '        uint256 count,\n', '        bool unsafeOnly,\n', '        bool isLiquidatable)\n', '        external\n', '        view\n', '        returns (LoanReturnData[] memory loansData) \n', '    {\n', '        return _getActiveLoans(start, count, unsafeOnly, isLiquidatable);\n', '    }\n', '\n', '    function _getActiveLoans(\n', '        uint256 start,\n', '        uint256 count,\n', '        bool unsafeOnly,\n', '        bool isLiquidatable)\n', '        internal\n', '        view \n', '        returns (LoanReturnData[] memory loansData)\n', '    {\n', '        uint256 end = start.add(count).min256(activeLoansSet.length());\n', '        if (start >= end) {\n', '            return loansData;\n', '        }\n', '        count = end-start;\n', '\n', '        uint256 idx = count;\n', '        LoanReturnData memory loanData;\n', '        loansData = new LoanReturnData[](idx);\n', '        for (uint256 i = --end; i >= start; i--) {\n', '            loanData = _getLoan(\n', '                activeLoansSet.get(i), // loanId\n', '                LoanType.All,\n', '                unsafeOnly\n', '            );\n', '\n', '            if (loanData.loanId == 0) {\n', '                if (i == 0) {\n', '                    break;\n', '                } else {\n', '                    continue;\n', '                }\n', '            }\n', '\n', '            if (isLiquidatable && loanData.currentMargin == 0) {\n', '                // we skip, not adding it to result set\n', '                if (i == 0) {\n', '                    break;\n', '                } else {\n', '                    continue;\n', '                }\n', '            }\n', '\n', '            loansData[count-(idx--)] = loanData;\n', '\n', '            if (i == 0) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (idx != 0) {\n', '            count -= idx;\n', '            assembly {\n', '                mstore(loansData, count)\n', '            }\n', '        }\n', '    }\n', '\n', '    function _getLoan(\n', '        bytes32 loanId,\n', '        LoanType loanType,\n', '        bool unsafeOnly)\n', '        internal\n', '        view\n', '        returns (LoanReturnData memory loanData)\n', '    {\n', '        Loan memory loanLocal = loans[loanId];\n', '        LoanParams memory loanParamsLocal = loanParams[loanLocal.loanParamsId];\n', '\n', '        if ((loanType == LoanType.Margin && loanParamsLocal.maxLoanTerm == 0) ||\n', '            (loanType == LoanType.NonMargin && loanParamsLocal.maxLoanTerm != 0)) {\n', '            return loanData;\n', '        }\n', '\n', '        LoanInterest memory loanInterestLocal = loanInterest[loanId];\n', '\n', '        (uint256 currentMargin, uint256 value) = IPriceFeeds(priceFeeds).getCurrentMargin( // currentMargin, collateralToLoanRate\n', '            loanParamsLocal.loanToken,\n', '            loanParamsLocal.collateralToken,\n', '            loanLocal.principal,\n', '            loanLocal.collateral\n', '        );\n', '\n', '        uint256 maxLiquidatable;\n', '        uint256 maxSeizable;\n', '        if (currentMargin <= loanParamsLocal.maintenanceMargin) {\n', '            (maxLiquidatable, maxSeizable) = _getLiquidationAmounts(\n', '                loanLocal.principal,\n', '                loanLocal.collateral,\n', '                currentMargin,\n', '                loanParamsLocal.maintenanceMargin,\n', '                value, // collateralToLoanRate\n', '                liquidationIncentivePercent[loanParamsLocal.loanToken][loanParamsLocal.collateralToken]\n', '            );\n', '        } else if (unsafeOnly) {\n', '            return loanData;\n', '        }\n', '\n', '        uint256 depositValueAsLoanToken;\n', '        uint256 depositValueAsCollateralToken;\n', '        bytes32 slot = keccak256(abi.encode(loanId, LoanDepositValueID));\n', '        assembly {\n', '            depositValueAsLoanToken := sload(slot)\n', '            depositValueAsCollateralToken := sload(add(slot, 1))\n', '        }\n', '\n', '        if (loanLocal.endTimestamp > block.timestamp) {\n', '            value = loanLocal.endTimestamp\n', '                .sub(block.timestamp)\n', '                .mul(loanInterestLocal.owedPerDay)\n', '                .div(1 days);\n', '        } else {\n', '            value = 0;\n', '        }\n', '\n', '        return LoanReturnData({\n', '            loanId: loanId,\n', '            endTimestamp: uint96(loanLocal.endTimestamp),\n', '            loanToken: loanParamsLocal.loanToken,\n', '            collateralToken: loanParamsLocal.collateralToken,\n', '            principal: loanLocal.principal,\n', '            collateral: loanLocal.collateral,\n', '            interestOwedPerDay: loanInterestLocal.owedPerDay,\n', '            interestDepositRemaining: value,\n', '            startRate: loanLocal.startRate,\n', '            startMargin: loanLocal.startMargin,\n', '            maintenanceMargin: loanParamsLocal.maintenanceMargin,\n', '            currentMargin: currentMargin,\n', '            maxLoanTerm: loanParamsLocal.maxLoanTerm,\n', '            maxLiquidatable: maxLiquidatable,\n', '            maxSeizable: maxSeizable,\n', '            depositValueAsLoanToken: depositValueAsLoanToken,\n', '            depositValueAsCollateralToken: depositValueAsCollateralToken\n', '        });\n', '    }\n', '}']