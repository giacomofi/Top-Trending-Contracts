['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', 'pragma solidity >=0.8.0;\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'abstract contract ERC20Interface {\n', '  function totalSupply() virtual public view returns (uint);\n', '  function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) virtual public returns (bool success);\n', '  function approve(address spender, uint tokens) virtual public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'abstract contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract PastryChef is ERC20Interface, Owned{\n', '  using SafeMath for uint;\n', '\n', '  constructor() {\n', '    symbol = "PANNA";\n', '    name = "Pannacotta";\n', '    decimals = 18;\n', '    _totalSupply =  25 * 10**5 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    activity[owner] = true;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '\n', '\n', '    ethToToken = 10**5;\n', '    saleCutOff = 2 * 10**7 * 10**uint(decimals);\n', '    softCapVal = 10**8 * 10**uint(decimals);\n', '\n', '    airdropTail = 10**uint(decimals) / 10**3;\n', '    airdropBase = 10**2 * 10**uint(decimals);\n', '    airdropCool = 50;\n', '\n', '    rewardTail = 1 * 10**uint(decimals);\n', '    rewardBase = 10**3 * 10**uint(decimals);\n', '    rewardPool = 256;\n', '    rewardMemo = 1 * 10**uint(decimals);\n', '  }\n', '\n', '\n', '  mapping(address => uint) public lastDrop;\n', '  mapping(address => bool) public activity;\n', '  mapping(uint => address) public prizeLog;\n', '\n', '  uint public ethToToken;\n', '  uint public saleCutOff;\n', '  uint public softCapVal;\n', '\n', '  uint public airdropTail;\n', '  uint public airdropBase;\n', '  uint public airdropCool;\n', '\n', '  uint public rewardTail;\n', '  uint public rewardBase;\n', '  uint public rewardPool;\n', '  uint public rewardMemo;\n', '\n', '  uint public pointer;\n', '  bool public wrapped;\n', '\n', '\n', '\n', '\n', '  function mint(address _addr, uint _amt) internal {\n', '    balances[_addr] = balances[_addr].add(_amt);\n', '    _totalSupply = _totalSupply.add(_amt);\n', '    emit Transfer(address(0), _addr, _amt);\n', '  }\n', '\n', '  function rewardRand(address _addr) internal view returns(address) {\n', '    uint _rand = uint256(keccak256(abi.encodePacked(block.timestamp, _addr, _totalSupply)));\n', '    uint _rewardnumber;\n', '    if(wrapped == false) {\n', '      _rewardnumber = _rand % pointer;\n', '    }\n', '    else {\n', '      _rewardnumber = _rand % rewardPool;\n', '    }\n', '    return(prizeLog[_rewardnumber]);\n', '  }\n', '\n', '  function rewardlistHandler(address _addr) internal {\n', '    if(pointer >= rewardPool) {\n', '      pointer = 0;\n', '      if(wrapped == false) {\n', '        wrapped = true;\n', '      }\n', '    }\n', '    prizeLog[pointer] = _addr;\n', '    pointer = pointer + 1;\n', '  }\n', '\n', '  function calcAirdrop() public view returns(uint){\n', '    if (_totalSupply >= softCapVal) {\n', '      return(airdropTail);\n', '    }\n', '    else {\n', '      uint _lesstkns = airdropBase * _totalSupply / softCapVal;\n', '      uint _tkns = airdropTail + airdropBase - _lesstkns;\n', '      return(_tkns);\n', '    }\n', '  }\n', '\n', '  function calcReward() public view returns(uint){\n', '    if (_totalSupply >= softCapVal) {\n', '      return(rewardTail);\n', '    }\n', '    else {\n', '      uint _lesstkns = rewardBase * _totalSupply / softCapVal;\n', '      uint _tkns = rewardTail +  rewardBase - _lesstkns;\n', '      return(_tkns);\n', '    }\n', '  }\n', '\n', '  function getAirdrop(address _addr) public {\n', '    require(_addr != msg.sender && activity[_addr] == false && _addr.balance != 0);\n', '    require(lastDrop[msg.sender] + airdropCool <= block.number);\n', '\n', '    uint _tkns = calcAirdrop();\n', '    lastDrop[msg.sender] = block.number;\n', '\n', '    if(activity[msg.sender] == false) {\n', '      activity[msg.sender] = true;\n', '    }\n', '\n', '    activity[_addr] = true;\n', '\n', '    mint(_addr, _tkns);\n', '    mint(msg.sender, _tkns);\n', '  }\n', '\n', '  function tokenSale() public payable {\n', '    require(_totalSupply < saleCutOff);\n', '    uint _eth = msg.value;\n', '    uint _tkns = _eth * ethToToken;\n', '    if(_totalSupply + _tkns > saleCutOff) {\n', '      revert();\n', '    }\n', '    if(activity[msg.sender] == false) {\n', '      activity[msg.sender] = true;\n', '    }\n', '    mint(msg.sender, _tkns);\n', '  }\n', '\n', '  function adminWithdrawal(ERC20Interface token, uint256 amount) public onlyOwner() {\n', '    token.transfer(msg.sender, amount);\n', '  }\n', '\n', '  function clearETH() public onlyOwner() {\n', '    address payable _owner = payable(msg.sender);\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8  public decimals;\n', '  uint   _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '  function totalSupply() override public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) override public view returns (uint balance) {\n', '      return balances[tokenOwner];\n', '  }\n', '\n', '  function transfer(address to, uint tokens) override public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '\n', '    if(activity[to] == false  && to.balance > 0) {\n', '      activity[to] = true;\n', '      if(tokens >= rewardMemo) {\n', '        rewardlistHandler(msg.sender);\n', '      }\n', '    }\n', '\n', '    uint _tkns = calcReward();\n', '    address _dropaddr = rewardRand(msg.sender);\n', '    mint(_dropaddr, _tkns);\n', '\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) override public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) override public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '\n', '\n', '  fallback () external payable {\n', '    revert();\n', '  }\n', '\n', '  receive() external payable {\n', '  }\n', '}']