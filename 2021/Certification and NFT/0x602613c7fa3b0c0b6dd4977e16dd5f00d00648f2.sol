['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '  interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  abstract contract GasTokenInterface is ERC20 {\n', '    function free(uint256 value) public virtual returns (bool success);\n', '\n', '    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n', '\n', '    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n', '\n', '    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n', '}  contract GasBurner {\n', '    // solhint-disable-next-line const-name-snakecase\n', '    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n', '\n', '    modifier burnGas(uint _amount) {\n', '        if (gasToken.balanceOf(address(this)) >= _amount) {\n', '            gasToken.free(_amount);\n', '        }\n', '\n', '        _;\n', '    }\n', '}  abstract contract ILendingPool {\n', '    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\n', '    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\n', '\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\n', '\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\n', '\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\n', '\tfunction swapBorrowRateMode(address _reserve) external virtual;\n', '    function getReserves() external virtual view returns(address[] memory);\n', '\n', '    /// @param _reserve underlying token address\n', '    function getReserveData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidity,               // reserve total liquidity\n', '            uint256 availableLiquidity,           // reserve available liquidity for borrowing\n', '            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\n', '            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\n', '            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\n', '            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\n', '            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\n', '            uint256 averageStableBorrowRate,      // current average stable borrow rate\n', '            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\n', '            uint256 liquidityIndex,               // cumulative liquidity index\n', '            uint256 variableBorrowIndex,          // cumulative variable borrow index\n', '            address aTokenAddress,                // aTokens contract address for the specific _reserve\n', '            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\n', '        );\n', '\n', '    /// @param _user users address\n', '    function getUserAccountData(address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\n', '            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\n', '            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\n', '            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\n', '            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\n', '            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\n', '            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\n', '            uint256 healthFactor                  // user current Health Factor\n', '    );\n', '\n', '    /// @param _reserve underlying token address\n', '    /// @param _user users address\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,         // user current reserve aToken balance\n', '            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\n', '            uint256 principalBorrowBalance,       // user balance of borrowed asset\n', '            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\n', '            uint256 borrowRate,                   // user current borrow rate APY\n', '            uint256 liquidityRate,                // user current earn rate on _reserve\n', '            uint256 originationFee,               // user outstanding loan origination fee\n', '            uint256 variableBorrowIndex,          // user variable cumulative index\n', '            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\n', "            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\n", '    );\n', '\n', '    function getReserveConfigurationData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            address rateStrategyAddress,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive\n', '    );\n', '\n', '    // ------------------ LendingPoolCoreData ------------------------\n', '    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\n', '    function getReserveConfiguration(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (uint256, uint256, uint256, bool);\n', '    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    function getReserveCurrentLiquidityRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentVariableBorrowRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentStableBorrowRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveAvailableLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalBorrowsVariable(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalBorrowsStable(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    // ---------------- LendingPoolDataProvider ---------------------\n', '    function calculateUserGlobalData(address _user)\n', '        public virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityBalanceETH,\n', '            uint256 totalCollateralBalanceETH,\n', '            uint256 totalBorrowBalanceETH,\n', '            uint256 totalFeesETH,\n', '            uint256 currentLtv,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 healthFactor,\n', '            bool healthFactorBelowThreshold\n', '        );\n', '}  contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}  abstract contract TokenInterface {\n', '\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(address, address, uint256) public virtual returns (bool);\n', '\n', '    function deposit() public virtual payable;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  interface ExchangeInterfaceV3 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '}  library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '}  contract ZrxAllowlist is AdminAuth {\n', '\n', '    mapping (address => bool) public zrxAllowlist;\n', '    mapping(address => bool) private nonPayableAddrs;\n', '\n', '    constructor() public {\n', '        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\n', '        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\n', '        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n', '        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '\n', '        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '    }\n', '\n', '    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n', '        zrxAllowlist[_zrxAddr] = _state;\n', '    }\n', '\n', '    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n', '        return zrxAllowlist[_zrxAddr];\n', '    }\n', '\n', '    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = true;\n', '\t}\n', '\n', '\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = false;\n', '\t}\n', '\n', '\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\n', '\t\treturn nonPayableAddrs[_addr];\n', '\t}\n', '}     \n', '\n', 'contract DFSExchangeData {\n', '\n', '    // first is empty to keep the legacy order in place\n', '    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n', '\n', '    enum ActionType { SELL, BUY }\n', '\n', '    struct OffchainData {\n', '        address wrapper;\n', '        address exchangeAddr;\n', '        address allowanceTarget;\n', '        uint256 price;\n', '        uint256 protocolFee;\n', '        bytes callData;\n', '    }\n', '\n', '    struct ExchangeData {\n', '        address srcAddr;\n', '        address destAddr;\n', '        uint256 srcAmount;\n', '        uint256 destAmount;\n', '        uint256 minPrice;\n', '        uint256 dfsFeeDivider; // service fee divider\n', '        address user; // user to check special fee\n', '        address wrapper;\n', '        bytes wrapperData;\n', '        OffchainData offchainData;\n', '    }\n', '\n', '    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n', '        return abi.encode(_exData);\n', '    }\n', '\n', '    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n', '        _exData = abi.decode(_data, (ExchangeData));\n', '    }\n', '}  contract Discount {\n', '    address public owner;\n', '    mapping(address => CustomServiceFee) public serviceFees;\n', '\n', '    uint256 constant MAX_SERVICE_FEE = 400;\n', '\n', '    struct CustomServiceFee {\n', '        bool active;\n', '        uint256 amount;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isCustomFeeSet(address _user) public view returns (bool) {\n', '        return serviceFees[_user].active;\n', '    }\n', '\n', '    function getCustomServiceFee(address _user) public view returns (uint256) {\n', '        return serviceFees[_user].amount;\n', '    }\n', '\n', '    function setServiceFee(address _user, uint256 _fee) public {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n', '    }\n', '\n', '    function disableServiceFee(address _user) public {\n', '        require(msg.sender == owner, "Only owner");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n', '    }\n', '}  // SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'abstract contract IFeeRecipient {\n', '    function getFeeAddr() public view virtual returns (address);\n', '    function changeWalletAddr(address _newWallet) public virtual;\n', '}  contract DFSExchangeHelper {\n', '\n', '    string public constant ERR_OFFCHAIN_DATA_INVALID = "Offchain data invalid";\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\n', '\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n', '\n', '    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n', '\n', '\n', '    function getDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == KYBER_ETH_ADDRESS) return 18;\n', '\n', '        return ERC20(_token).decimals();\n', '    }\n', '\n', '    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n', '        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n', '            balance = address(this).balance;\n', '        } else {\n', '            balance = ERC20(_tokenAddr).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n', '        // send back any leftover ether or tokens\n', '        if (address(this).balance > 0) {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '\n', '        if (getBalance(_srcAddr) > 0) {\n', '            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n', '        }\n', '\n', '        if (getBalance(_destAddr) > 0) {\n', '            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n', '        }\n', '    }\n', '\n', '    /// @notice Takes a feePercentage and sends it to wallet\n', '    /// @param _amount Dai amount of the whole trade\n', '    /// @param _user Address of the user\n', '    /// @param _token Address of the token\n', '    /// @param _dfsFeeDivider Dfs fee divider\n', '    /// @return feeAmount Amount in Dai owner earned on the fee\n', '    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\n', '        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n', '            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n', '        }\n', '\n', '        if (_dfsFeeDivider == 0) {\n', '            feeAmount = 0;\n', '        } else {\n', '            feeAmount = _amount / _dfsFeeDivider;\n', '\n', "            // fee can't go over 10% of the whole amount\n", '            if (feeAmount > (_amount / 10)) {\n', '                feeAmount = _amount / 10;\n', '            }\n', '\n', '            address walletAddr = _feeRecipient.getFeeAddr();\n', '\n', '            if (_token == KYBER_ETH_ADDRESS) {\n', '                payable(walletAddr).transfer(feeAmount);\n', '            } else {\n', '                ERC20(_token).safeTransfer(walletAddr, feeAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '\n', '        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n', '        if (_b.length < _index + 32) {\n', '            revert(ERR_OFFCHAIN_DATA_INVALID);\n', '        }\n', '\n', '        bytes32 input = bytes32(_input);\n', '\n', '        _index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(_b, _index), input)\n', '        }\n', '    }\n', '\n', '    /// @notice Converts Kybers Eth address -> Weth\n', '    /// @param _src Input address\n', '    function ethToWethAddr(address _src) internal pure returns (address) {\n', '        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\n', '    }\n', '}  contract SaverExchangeRegistry is AdminAuth {\n', '\n', '\tmapping(address => bool) private wrappers;\n', '\n', '\tconstructor() public {\n', '\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\n', '\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\n', '\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\n', '\t}\n', '\n', '\tfunction addWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = true;\n', '\t}\n', '\n', '\tfunction removeWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = false;\n', '\t}\n', '\n', '\tfunction isWrapper(address _wrapper) public view returns(bool) {\n', '\t\treturn wrappers[_wrapper];\n', '\t}\n', '}     \n', '\n', '\n', '\n', 'abstract contract OffchainWrapperInterface is DFSExchangeData {\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) virtual public payable returns (bool success, uint256);\n', '}     \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\n', '\n', '    string public constant ERR_SLIPPAGE_HIT = "Slippage hit";\n', '    string public constant ERR_DEST_AMOUNT_MISSING = "Dest amount missing";\n', '    string public constant ERR_WRAPPER_INVALID = "Wrapper invalid";\n', '    string public constant ERR_NOT_ZEROX_EXCHANGE = "Zerox exchange invalid";\n', '\n', '    /// @notice Internal method that preforms a sell on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and destAmount\n', '    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n', '        }\n', '\n', '        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.offchainData.price > 0) {\n', '            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\n', '\n', '            if (success) {\n', '                wrapper = exData.offchainData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.SELL);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n', '                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n', '            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        } else {\n', '            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        }\n', '\n', '        return (wrapper, swapedTokens);\n', '    }\n', '\n', '    \n', '\n', '    /// @notice Takes order from 0x and returns bool indicating if it is successful\n', '    /// @param _exData Exchange data\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) private returns (bool success, uint256) {\n', '        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        // send src amount\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n', '\n', '        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\n', '    }\n', '\n', '    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n', '    /// @param _exData Exchange data struct\n', '    /// @param _type Type of action SELL|BUY\n', '    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n', '    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\n', '        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\n', '\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n', '\n', '        if (_type == ActionType.SELL) {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\n', '        } else {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\n', '        }\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external virtual payable {}\n', '}  contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  abstract contract CEtherInterface {\n', '    function mint() external virtual payable;\n', '    function repayBorrow() external virtual payable;\n', '}  abstract contract CompoundOracleInterface {\n', '    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\n', '}  abstract contract CTokenInterface is ERC20 {\n', '    function mint(uint256 mintAmount) external virtual returns (uint256);\n', '\n', '    // function mint() external virtual payable;\n', '\n', '    function accrueInterest() public virtual returns (uint);\n', '\n', '    function redeem(uint256 redeemTokens) external virtual returns (uint256);\n', '\n', '    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\n', '\n', '    function borrow(uint256 borrowAmount) external virtual returns (uint256);\n', '    function borrowIndex() public view virtual returns (uint);\n', '    function borrowBalanceStored(address) public view virtual returns(uint);\n', '\n', '    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrow() external virtual payable;\n', '\n', '    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\n', '\n', '    function repayBorrowBehalf(address borrower) external virtual payable;\n', '\n', '    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n', '        external virtual\n', '        returns (uint256);\n', '\n', '    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\n', '\n', '    function exchangeRateCurrent() external virtual returns (uint256);\n', '\n', '    function supplyRatePerBlock() external virtual returns (uint256);\n', '\n', '    function borrowRatePerBlock() external virtual returns (uint256);\n', '\n', '    function totalReserves() external virtual returns (uint256);\n', '\n', '    function reserveFactorMantissa() external virtual returns (uint256);\n', '\n', '    function borrowBalanceCurrent(address account) external virtual returns (uint256);\n', '\n', '    function totalBorrowsCurrent() external virtual returns (uint256);\n', '\n', '    function getCash() external virtual returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external virtual returns (uint256);\n', '\n', '    function underlying() external virtual returns (address);\n', '\n', '    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\n', '}     \n', '\n', 'abstract contract ComptrollerInterface {\n', '    struct CompMarketState {\n', '        uint224 index;\n', '        uint32 block;\n', '    }\n', '\n', '    function claimComp(address holder) public virtual;\n', '    function claimComp(address holder, address[] memory cTokens) public virtual;\n', '    function claimComp(address[] memory holders, address[] memory cTokens, bool borrowers, bool suppliers) public virtual;\n', '\n', '    function compSupplyState(address) public view virtual returns (CompMarketState memory);\n', '    function compSupplierIndex(address,address) public view virtual returns (uint);\n', '    function compAccrued(address) public view virtual returns (uint);\n', '\n', '    function compBorrowState(address) public view virtual returns (CompMarketState memory);\n', '    function compBorrowerIndex(address,address) public view virtual returns (uint);\n', '\n', '    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\n', '\n', '    function exitMarket(address cToken) external virtual returns (uint256);\n', '\n', '    function getAssetsIn(address account) external virtual view returns (address[] memory);\n', '\n', '    function markets(address account) public virtual view returns (bool, uint256);\n', '\n', '    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\n', '\n', '    function oracle() public virtual view returns (address);\n', '\n', '    function borrowCaps(address) external virtual returns (uint256);\n', '}  abstract contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n', '}  contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}  contract DSNote {\n', '    event LogNote(\n', '        bytes4 indexed sig,\n', '        address indexed guy,\n', '        bytes32 indexed foo,\n', '        bytes32 indexed bar,\n', '        uint256 wad,\n', '        bytes fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}  abstract contract DSProxy is DSAuth, DSNote {\n', '    DSProxyCache public cache; // global cache for contracts\n', '\n', '    constructor(address _cacheAddr) public {\n', '        require(setCache(_cacheAddr));\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external payable {}\n', '\n', '    // use the proxy to execute calldata _data on contract _code\n', '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public\n', '    //     payable\n', '    //     virtual\n', '    //     returns (address target, bytes32 response);\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        payable\n', '        virtual\n', '        returns (bytes32 response);\n', '\n', '    //set new cache\n', '    function setCache(address _cacheAddr) public virtual payable returns (bool);\n', '}\n', '\n', '\n', 'contract DSProxyCache {\n', '    mapping(bytes32 => address) cache;\n', '\n', '    function read(bytes memory _code) public view returns (address) {\n', '        bytes32 hash = keccak256(_code);\n', '        return cache[hash];\n', '    }\n', '\n', '    function write(bytes memory _code) public returns (address target) {\n', '        assembly {\n', '            target := create(0, add(_code, 0x20), mload(_code))\n', '            switch iszero(extcodesize(target))\n', '                case 1 {\n', '                    // throw if contract failed to deploy\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '        bytes32 hash = keccak256(_code);\n', '        cache[hash] = target;\n', '    }\n', '}  contract CarefulMath {\n', '\n', '    /**\n', '     * @dev Possible error codes that we can return\n', '     */\n', '    enum MathError {\n', '        NO_ERROR,\n', '        DIVISION_BY_ZERO,\n', '        INTEGER_OVERFLOW,\n', '        INTEGER_UNDERFLOW\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, returns an error on overflow.\n', '    */\n', '    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (a == 0) {\n', '            return (MathError.NO_ERROR, 0);\n', '        }\n', '\n', '        uint c = a * b;\n', '\n', '        if (c / a != b) {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        } else {\n', '            return (MathError.NO_ERROR, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b == 0) {\n', '            return (MathError.DIVISION_BY_ZERO, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, a / b);\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b <= a) {\n', '            return (MathError.NO_ERROR, a - b);\n', '        } else {\n', '            return (MathError.INTEGER_UNDERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, returns an error on overflow.\n', '    */\n', '    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        uint c = a + b;\n', '\n', '        if (c >= a) {\n', '            return (MathError.NO_ERROR, c);\n', '        } else {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev add a and b and then subtract c\n', '    */\n', '    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n', '        (MathError err0, uint sum) = addUInt(a, b);\n', '\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, 0);\n', '        }\n', '\n', '        return subUInt(sum, c);\n', '    }\n', '}  contract Exponential is CarefulMath {\n', '    uint constant expScale = 1e18;\n', '    uint constant doubleScale = 1e36;\n', '    uint constant halfExpScale = expScale/2;\n', '    uint constant mantissaOne = expScale;\n', '\n', '    struct Exp {\n', '        uint mantissa;\n', '    }\n', '\n', '    struct Double {\n', '        uint mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates an exponential from numerator and denominator values.\n', '     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n', '     *            or if `denom` is zero.\n', '     */\n', '    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two exponentials, returning a new exponential.\n', '     */\n', '    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two exponentials, returning a new exponential.\n', '     */\n', '    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, returning a new Exp.\n', '     */\n', '    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n', '     */\n', '    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(product));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n', '     */\n', '    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return addUInt(truncate(product), addend);\n', '    }\n', '\n', '    /**\n', '     * @dev Divide an Exp by a scalar, returning a new Exp.\n', '     */\n', '    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n', '    }\n', '\n', '    /**\n', '     * @dev Divide a scalar by an Exp, returning a new Exp.\n', '     */\n', '    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n', '        /*\n', '          We are doing this as:\n', '          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n', '\n', '          How it works:\n', '          Exp = a / b;\n', '          Scalar = s;\n', '          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n', '        */\n', '        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '        return getExp(numerator, divisor.mantissa);\n', '    }\n', '\n', '    /**\n', '     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n', '     */\n', '    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(fraction));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two exponentials, returning a new exponential.\n', '     */\n', '    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '\n', '        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        // We add half the scale before dividing so that we get rounding instead of truncation.\n', '        //  See "Listing 6" and text above it at https://accu.org/index.php/journals/1717\n', '        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n', '        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n', '        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n', '        assert(err2 == MathError.NO_ERROR);\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: product}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n', '     */\n', '    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n', '        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies three exponentials, returning a new exponential.\n', '     */\n', '    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n', '        (MathError err, Exp memory ab) = mulExp(a, b);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, ab);\n', '        }\n', '        return mulExp(ab, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two exponentials, returning a new exponential.\n', '     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n', '     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n', '     */\n', '    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        return getExp(a.mantissa, b.mantissa);\n', '    }\n', '\n', '    /**\n', '     * @dev Truncates the given exp to a whole number value.\n', '     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n', '     */\n', '    function truncate(Exp memory exp) pure internal returns (uint) {\n', "        // Note: We are not using careful math here as we're performing a division that cannot fail\n", '        return exp.mantissa / expScale;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if first Exp is less than second Exp.\n', '     */\n', '    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa < right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if left Exp <= right Exp.\n', '     */\n', '    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa <= right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if left Exp > right Exp.\n', '     */\n', '    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa > right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev returns true if Exp is exactly zero\n', '     */\n', '    function isZeroExp(Exp memory value) pure internal returns (bool) {\n', '        return value.mantissa == 0;\n', '    }\n', '\n', '    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function sub_(uint a, uint b) pure internal returns (uint) {\n', '        return sub_(a, b, "subtraction underflow");\n', '    }\n', '\n', '    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n', '    }\n', '\n', '    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: mul_(a.mantissa, b)});\n', '    }\n', '\n', '    function mul_(uint a, Exp memory b) pure internal returns (uint) {\n', '        return mul_(a, b.mantissa) / expScale;\n', '    }\n', '\n', '    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n', '    }\n', '\n', '    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\n', '        return Double({mantissa: mul_(a.mantissa, b)});\n', '    }\n', '\n', '    function mul_(uint a, Double memory b) pure internal returns (uint) {\n', '        return mul_(a, b.mantissa) / doubleScale;\n', '    }\n', '\n', '    function mul_(uint a, uint b) pure internal returns (uint) {\n', '        return mul_(a, b, "multiplication overflow");\n', '    }\n', '\n', '    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n', '    }\n', '\n', '    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: div_(a.mantissa, b)});\n', '    }\n', '\n', '    function div_(uint a, Exp memory b) pure internal returns (uint) {\n', '        return div_(mul_(a, expScale), b.mantissa);\n', '    }\n', '\n', '    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n', '    }\n', '\n', '    function div_(Double memory a, uint b) pure internal returns (Double memory) {\n', '        return Double({mantissa: div_(a.mantissa, b)});\n', '    }\n', '\n', '    function div_(uint a, Double memory b) pure internal returns (uint) {\n', '        return div_(mul_(a, doubleScale), b.mantissa);\n', '    }\n', '\n', '    function div_(uint a, uint b) pure internal returns (uint) {\n', '        return div_(a, b, "divide by zero");\n', '    }\n', '\n', '    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function add_(uint a, uint b) pure internal returns (uint) {\n', '        return add_(a, b, "addition overflow");\n', '    }\n', '\n', '    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '        return c;\n', '    }\n', '}  contract BotRegistry is AdminAuth {\n', '\n', '    mapping (address => bool) public botList;\n', '\n', '    constructor() public {\n', '        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\n', '\n', '        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\n', '        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\n', '        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\n', '        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\n', '    }\n', '\n', '    function setBot(address _botAddr, bool _state) public onlyOwner {\n', '        botList[_botAddr] = _state;\n', '    }\n', '\n', '}  /// @title Utlity functions for Compound contracts\n', 'contract CompoundSaverHelper is DSMath, Exponential {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    IFeeRecipient public constant feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\n', '\n', '    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '\n', '    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\n', '    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\n', '\n', '    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n', '    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '\n', '    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\n', '\n', '    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n', '\n', '    /// @notice Helper method to payback the Compound debt\n', '    /// @dev If amount is bigger it will repay the whole debt and send the extra to the _user\n', '    /// @param _amount Amount of tokens we want to repay\n', '    /// @param _cBorrowToken Ctoken address we are repaying\n', '    /// @param _borrowToken Token address we are repaying\n', '    /// @param _user Owner of the compound position we are paying back\n', '    function paybackDebt(uint _amount, address _cBorrowToken, address _borrowToken, address payable _user) internal {\n', '        uint wholeDebt = CTokenInterface(_cBorrowToken).borrowBalanceCurrent(address(this));\n', '\n', '        if (_amount > wholeDebt) {\n', '            if (_borrowToken == ETH_ADDRESS) {\n', '                _user.transfer((_amount - wholeDebt));\n', '            } else {\n', '                ERC20(_borrowToken).safeTransfer(_user, (_amount - wholeDebt));\n', '            }\n', '\n', '            _amount = wholeDebt;\n', '        }\n', '\n', '        approveCToken(_borrowToken, _cBorrowToken);\n', '\n', '        if (_borrowToken == ETH_ADDRESS) {\n', '            CEtherInterface(_cBorrowToken).repayBorrow{value: _amount}();\n', '        } else {\n', '            require(CTokenInterface(_cBorrowToken).repayBorrow(_amount) == 0);\n', '        }\n', '    }\n', '\n', '    /// @notice Calculates the fee amount\n', '    /// @param _amount Amount that is converted\n', '    /// @param _user Actuall user addr not DSProxy\n', '    /// @param _gasCost Ether amount of gas we are spending for tx\n', '    /// @param _cTokenAddr CToken addr. of token we are getting for the fee\n', '    /// @return feeAmount The amount we took for the fee\n', '    function getFee(uint _amount, address _user, uint _gasCost, address _cTokenAddr) internal returns (uint feeAmount) {\n', '        uint fee = MANUAL_SERVICE_FEE;\n', '\n', '        if (BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin)) {\n', '            fee = AUTOMATIC_SERVICE_FEE;\n', '        }\n', '\n', '        address tokenAddr = getUnderlyingAddr(_cTokenAddr);\n', '\n', '        if (Discount(DISCOUNT_ADDR).isCustomFeeSet(_user)) {\n', '            fee = Discount(DISCOUNT_ADDR).getCustomServiceFee(_user);\n', '        }\n', '\n', '        feeAmount = (fee == 0) ? 0 : (_amount / fee);\n', '\n', '        if (_gasCost != 0) {\n', '            address oracle = ComptrollerInterface(COMPTROLLER).oracle();\n', '\n', '            uint usdTokenPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cTokenAddr);\n', '            uint ethPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(CETH_ADDRESS);\n', '\n', '            uint tokenPriceInEth = wdiv(usdTokenPrice, ethPrice);\n', '\n', '            _gasCost = wdiv(_gasCost, tokenPriceInEth);\n', '\n', '            feeAmount = add(feeAmount, _gasCost);\n', '        }\n', '\n', "        // fee can't go over 20% of the whole amount\n", '        if (feeAmount > (_amount / 5)) {\n', '            feeAmount = _amount / 5;\n', '        }\n', '\n', '        address walletAddr = feeRecipient.getFeeAddr();\n', '\n', '        if (tokenAddr == ETH_ADDRESS) {\n', '            payable(walletAddr).transfer(feeAmount);\n', '        } else {\n', '            ERC20(tokenAddr).safeTransfer(walletAddr, feeAmount);\n', '        }\n', '    }\n', '\n', '    /// @notice Calculates the gas cost of transaction and send it to wallet\n', '    /// @param _amount Amount that is converted\n', '    /// @param _gasCost Ether amount of gas we are spending for tx\n', '    /// @param _cTokenAddr CToken addr. of token we are getting for the fee\n', '    /// @return feeAmount The amount we took for the fee\n', '    function getGasCost(uint _amount, uint _gasCost, address _cTokenAddr) internal returns (uint feeAmount) {\n', '        address tokenAddr = getUnderlyingAddr(_cTokenAddr);\n', '\n', '        if (_gasCost != 0) {\n', '            address oracle = ComptrollerInterface(COMPTROLLER).oracle();\n', '\n', '            uint usdTokenPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cTokenAddr);\n', '            uint ethPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(CETH_ADDRESS);\n', '\n', '            uint tokenPriceInEth = wdiv(usdTokenPrice, ethPrice);\n', '\n', '            feeAmount = wdiv(_gasCost, tokenPriceInEth);\n', '        }\n', '\n', "        // fee can't go over 20% of the whole amount\n", '        if (feeAmount > (_amount / 5)) {\n', '            feeAmount = _amount / 5;\n', '        }\n', '\n', '        address walletAddr = feeRecipient.getFeeAddr();\n', '\n', '        if (tokenAddr == ETH_ADDRESS) {\n', '            payable(walletAddr).transfer(feeAmount);\n', '        } else {\n', '            ERC20(tokenAddr).safeTransfer(walletAddr, feeAmount);\n', '        }\n', '    }\n', '\n', '    /// @notice Enters the market for the collatera and borrow tokens\n', '    /// @param _cTokenAddrColl Collateral address we are entering the market in\n', '    /// @param _cTokenAddrBorrow Borrow address we are entering the market in\n', '    function enterMarket(address _cTokenAddrColl, address _cTokenAddrBorrow) internal {\n', '        address[] memory markets = new address[](2);\n', '        markets[0] = _cTokenAddrColl;\n', '        markets[1] = _cTokenAddrBorrow;\n', '\n', '        ComptrollerInterface(COMPTROLLER).enterMarkets(markets);\n', '    }\n', '\n', '    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\n', '    /// @param _tokenAddr Token we are trying to approve\n', '    /// @param _cTokenAddr Address which will gain the approval\n', '    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\n', '        if (_tokenAddr != ETH_ADDRESS) {\n', '            ERC20(_tokenAddr).safeApprove(_cTokenAddr, uint(-1));\n', '        }\n', '    }\n', '\n', '    /// @notice Returns the underlying address of the cToken asset\n', '    /// @param _cTokenAddress cToken address\n', '    /// @return Token address of the cToken specified\n', '    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\n', '        if (_cTokenAddress == CETH_ADDRESS) {\n', '            return ETH_ADDRESS;\n', '        } else {\n', '            return CTokenInterface(_cTokenAddress).underlying();\n', '        }\n', '    }\n', '\n', '    /// @notice Returns the owner of the DSProxy that called the contract\n', '    function getUserAddress() internal view returns (address) {\n', '        DSProxy proxy = DSProxy(uint160(address(this)));\n', '\n', '        return proxy.owner();\n', '    }\n', '\n', '    /// @notice Returns the maximum amount of collateral available to withdraw\n', '    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\n', '    /// @param _cCollAddress Collateral we are getting the max value of\n', '    /// @param _account Users account\n', '    /// @return Returns the max. collateral amount in that token\n', '    function getMaxCollateral(address _cCollAddress, address _account) public returns (uint) {\n', '        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\n', '        uint usersBalance = CTokenInterface(_cCollAddress).balanceOfUnderlying(_account);\n', '        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\n', '\n', '        if (liquidityInUsd == 0) return usersBalance;\n', '\n', '        CTokenInterface(_cCollAddress).accrueInterest();\n', '\n', '        (, uint collFactorMantissa) = ComptrollerInterface(COMPTROLLER).markets(_cCollAddress);\n', '        Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\n', '\n', '        (, uint tokensToUsd) = divScalarByExpTruncate(liquidityInUsd, collateralFactor);\n', '\n', '        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cCollAddress);\n', '        uint liqInToken = wdiv(tokensToUsd, usdPrice);\n', '\n', '        if (liqInToken > usersBalance) return usersBalance;\n', '\n', '        return sub(liqInToken, (liqInToken / 100)); // cut off 1% due to rounding issues\n', '    }\n', '\n', '    /// @notice Returns the maximum amount of borrow amount available\n', '    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\n', '    /// @param _cBorrowAddress Borrow token we are getting the max value of\n', '    /// @param _account Users account\n', '    /// @return Returns the max. borrow amount in that token\n', '    function getMaxBorrow(address _cBorrowAddress, address _account) public returns (uint) {\n', '        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\n', '        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\n', '\n', '        CTokenInterface(_cBorrowAddress).accrueInterest();\n', '\n', '        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cBorrowAddress);\n', '        uint liquidityInToken = wdiv(liquidityInUsd, usdPrice);\n', '\n', '        return sub(liquidityInToken, (liquidityInToken / 100)); // cut off 1% due to rounding issues\n', '    }\n', '\n', '    function isAutomation() internal view returns(bool) {\n', '        return BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin);\n', '    }\n', '}     \n', '\n', '\n', '\n', '\n', '\n', '/// @title Contract that implements repay/boost functionality\n', 'contract CompoundSaverProxy is CompoundSaverHelper, DFSExchangeCore {\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    /// @notice Withdraws collateral, converts to borrowed token and repays debt\n', '    /// @dev Called through the DSProxy\n', '    /// @param _exData Exchange data\n', '    /// @param _cAddresses Coll/Debt addresses [cCollAddress, cBorrowAddress]\n', '    /// @param _gasCost Gas cost for specific transaction\n', '    function repay(\n', '        ExchangeData memory _exData,\n', '        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\n', '        uint256 _gasCost\n', '    ) public payable {\n', '        enterMarket(_cAddresses[0], _cAddresses[1]);\n', '\n', '        address payable user = payable(getUserAddress());\n', '\n', '        uint maxColl = getMaxCollateral(_cAddresses[0], address(this));\n', '\n', '        uint collAmount = (_exData.srcAmount > maxColl) ? maxColl : _exData.srcAmount;\n', '\n', '        require(CTokenInterface(_cAddresses[0]).redeemUnderlying(collAmount) == 0);\n', '\n', '        address collToken = getUnderlyingAddr(_cAddresses[0]);\n', '        address borrowToken = getUnderlyingAddr(_cAddresses[1]);\n', '\n', '        uint swapAmount = 0;\n', '\n', '        if (collToken != borrowToken) {\n', '            _exData.srcAmount = collAmount;\n', '            _exData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n', '            _exData.user = user;\n', '\n', '            (, swapAmount) = _sell(_exData);\n', '            swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\n', '        } else {\n', '            swapAmount = collAmount;\n', '            swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\n', '        }\n', '\n', '        paybackDebt(swapAmount, _cAddresses[1], borrowToken, user);\n', '\n', '        // handle 0x fee\n', '        tx.origin.transfer(address(this).balance);\n', '\n', '        // log amount, collToken, borrowToken\n', '        logger.Log(address(this), msg.sender, "CompoundRepay", abi.encode(_exData.srcAmount, swapAmount, collToken, borrowToken));\n', '    }\n', '\n', '    /// @notice Borrows token, converts to collateral, and adds to position\n', '    /// @dev Called through the DSProxy\n', '    /// @param _exData Exchange data\n', '    /// @param _cAddresses Coll/Debt addresses [cCollAddress, cBorrowAddress]\n', '    /// @param _gasCost Gas cost for specific transaction\n', '    function boost(\n', '        ExchangeData memory _exData,\n', '        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\n', '        uint256 _gasCost\n', '    ) public payable {\n', '        enterMarket(_cAddresses[0], _cAddresses[1]);\n', '\n', '        address payable user = payable(getUserAddress());\n', '\n', '        uint maxBorrow = getMaxBorrow(_cAddresses[1], address(this));\n', '        uint borrowAmount = (_exData.srcAmount > maxBorrow) ? maxBorrow : _exData.srcAmount;\n', '\n', '        require(CTokenInterface(_cAddresses[1]).borrow(borrowAmount) == 0);\n', '\n', '        address collToken = getUnderlyingAddr(_cAddresses[0]);\n', '        address borrowToken = getUnderlyingAddr(_cAddresses[1]);\n', '\n', '        uint swapAmount = 0;\n', '\n', '        if (collToken != borrowToken) {\n', '            _exData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n', '            _exData.user = user;\n', '\n', '            _exData.srcAmount = borrowAmount;\n', '            (, swapAmount) = _sell(_exData);\n', '\n', '             swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\n', '        } else {\n', '            swapAmount = borrowAmount;\n', '            swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\n', '        }\n', '\n', '        approveCToken(collToken, _cAddresses[0]);\n', '\n', '        if (collToken != ETH_ADDRESS) {\n', '            require(CTokenInterface(_cAddresses[0]).mint(swapAmount) == 0);\n', '        } else {\n', '            CEtherInterface(_cAddresses[0]).mint{value: swapAmount}(); // reverts on fail\n', '        }\n', '\n', '        // handle 0x fee\n', '        tx.origin.transfer(address(this).balance);\n', '\n', '        // log amount, collToken, borrowToken\n', '        logger.Log(address(this), msg.sender, "CompoundBoost", abi.encode(_exData.srcAmount, swapAmount, collToken, borrowToken));\n', '    }\n', '\n', '}  abstract contract DSGuard {\n', '    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\n', '\n', '    function permit(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public virtual;\n', '\n', '    function permit(address src, address dst, bytes32 sig) public virtual;\n', '\n', '    function forbid(address src, address dst, bytes32 sig) public virtual;\n', '}\n', '\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '}  contract ProxyPermission {\n', '    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n', '\n', '    /// @notice Called in the context of DSProxy to authorize an address\n', '    /// @param _contractAddr Address which will be authorized\n', '    function givePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        DSGuard guard = DSGuard(currAuthority);\n', '\n', '        if (currAuthority == address(0)) {\n', '            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n', '            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n', '        }\n', '\n', '        guard.permit(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    /// @notice Called in the context of DSProxy to remove authority of an address\n', '    /// @param _contractAddr Auth address which will be removed from authority list\n', '    function removePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        \n', "        // if there is no authority, that means that contract doesn't have permission\n", '        if (currAuthority == address(0)) {\n', '            return;\n', '        }\n', '\n', '        DSGuard guard = DSGuard(currAuthority);\n', '        guard.forbid(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    function proxyOwner() internal returns(address) {\n', '        return DSAuth(address(this)).owner();\n', '    } \n', '}     \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Entry point for the FL Repay Boosts, called by DSProxy\n', 'contract CompoundFlashLoanTaker is CompoundSaverProxy, ProxyPermission, GasBurner {\n', '    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n', '\n', '    address payable public constant COMPOUND_SAVER_FLASH_LOAN = 0xeb76a0479F9C7d2ED3A8D376B91E7ea109fb1BBc;\n', '    address public constant AAVE_POOL_CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\n', '\n', "    /// @notice Repays the position with it's own fund or with FL if needed\n", '    /// @param _exData Exchange data\n', '    /// @param _cAddresses cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\n', '    /// @param _gasCost Gas cost for specific transaction\n', '    function repayWithLoan(\n', '        ExchangeData memory _exData,\n', '        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\n', '        uint256 _gasCost\n', '    ) public payable burnGas(25) {\n', '        uint maxColl = getMaxCollateral(_cAddresses[0], address(this));\n', '        uint availableLiquidity = getAvailableLiquidity(_exData.srcAddr);\n', '\n', '        if (_exData.srcAmount <= maxColl || availableLiquidity == 0) {\n', '            repay(_exData, _cAddresses, _gasCost);\n', '        } else {\n', '            // 0x fee\n', '            COMPOUND_SAVER_FLASH_LOAN.transfer(msg.value);\n', '\n', '            uint loanAmount = (_exData.srcAmount - maxColl);\n', '            if (loanAmount > availableLiquidity) loanAmount = availableLiquidity;\n', '            bytes memory encoded = packExchangeData(_exData);\n', '            bytes memory paramsData = abi.encode(encoded, _cAddresses, _gasCost, true, address(this));\n', '\n', '            givePermission(COMPOUND_SAVER_FLASH_LOAN);\n', '\n', '            lendingPool.flashLoan(COMPOUND_SAVER_FLASH_LOAN, getUnderlyingAddr(_cAddresses[0]), loanAmount, paramsData);\n', '\n', '            removePermission(COMPOUND_SAVER_FLASH_LOAN);\n', '\n', '            logger.Log(address(this), msg.sender, "CompoundFlashRepay", abi.encode(loanAmount, _exData.srcAmount, _cAddresses[0]));\n', '        }\n', '    }\n', '\n', "    /// @notice Boosts the position with it's own fund or with FL if needed\n", '    /// @param _exData Exchange data\n', '    /// @param _cAddresses cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\n', '    /// @param _gasCost Gas cost for specific transaction\n', '    function boostWithLoan(\n', '        ExchangeData memory _exData,\n', '        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\n', '        uint256 _gasCost\n', '    ) public payable burnGas(20) {\n', '        uint maxBorrow = getMaxBorrow(_cAddresses[1], address(this));\n', '        uint availableLiquidity = getAvailableLiquidity(_exData.srcAddr);\n', '\n', '        if (_exData.srcAmount <= maxBorrow || availableLiquidity == 0) {\n', '            boost(_exData, _cAddresses, _gasCost);\n', '        } else {\n', '            // 0x fee\n', '            COMPOUND_SAVER_FLASH_LOAN.transfer(msg.value);\n', '\n', '            uint loanAmount = (_exData.srcAmount - maxBorrow);\n', '            if (loanAmount > availableLiquidity) loanAmount = availableLiquidity;\n', '            bytes memory paramsData = abi.encode(packExchangeData(_exData), _cAddresses, _gasCost, false, address(this));\n', '\n', '            givePermission(COMPOUND_SAVER_FLASH_LOAN);\n', '\n', '            lendingPool.flashLoan(COMPOUND_SAVER_FLASH_LOAN, getUnderlyingAddr(_cAddresses[1]), loanAmount, paramsData);\n', '\n', '            removePermission(COMPOUND_SAVER_FLASH_LOAN);\n', '\n', '            logger.Log(address(this), msg.sender, "CompoundFlashBoost", abi.encode(loanAmount, _exData.srcAmount, _cAddresses[1]));\n', '        }\n', '\n', '    }\n', '\n', '    function getAvailableLiquidity(address _tokenAddr) internal view returns (uint liquidity) {\n', '        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n', '            liquidity = AAVE_POOL_CORE.balance;\n', '        } else {\n', '            liquidity = ERC20(_tokenAddr).balanceOf(AAVE_POOL_CORE);\n', '        }\n', '    }\n', '}']