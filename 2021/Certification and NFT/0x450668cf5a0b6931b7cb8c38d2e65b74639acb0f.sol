['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', '//SPDX-License-Identifier: Apache-2.0;\n', 'pragma solidity ^0.7.6;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface ERC20Interface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract Barbecue {\n', '    \n', '    using SafeMath for uint256;\n', '    uint256 constant EXCHANGE_RATE = 10;\n', '    \n', '    event Exchanged(address indexed from, uint256 ethValue, uint256 wurstValue);\n', '    \n', '    ERC20Interface public tokenContract = ERC20Interface(address(0x67e74603DF95cAbBEbC6795478c2402A01eA1517));\n', '    address payable public fundingWallet = payable(0x67E0023d1E7176Cdaf65a9afA374D774484839e0);\n', '\n', '    receive() external payable {\n', '        address from = msg.sender;\n', '        uint256 ethValue = msg.value;\n', '        require(ethValue > 0, "sent eth has to be greater than 0");\n', '        uint256 wurstValue = ethValue.div(EXCHANGE_RATE);\n', '        require(wurstValue > 0, "exchanged wurstValue has to be greater than 0");\n', '        \n', '        require(tokenContract.transfer(from, wurstValue), "wurst transfer failed");\n', '        emit Exchanged(from, ethValue, wurstValue);\n', '    }\n', '    \n', '    function withdraw() external payable {\n', '        require(msg.sender == fundingWallet, "only the funding wallet can issue a withdraw");\n', '        fundingWallet.transfer(address(this).balance);\n', '    }\n', '}']