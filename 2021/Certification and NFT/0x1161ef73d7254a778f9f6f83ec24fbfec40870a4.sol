['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity ^0.7.0;\n', '// File: contracts/Ownable.sol\n', '\n', '\n', '\n', '/// @title Ownable\n', '/// @author Brecht Devos - <[email\xa0protected]>\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable\n', '{\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    constructor()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      new owner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0), "ZERO_ADDRESS");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership()\n', '        public\n', '        onlyOwner\n', '    {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/Claimable.sol\n', '\n', '\n', '\n', '\n', '/// @title Claimable\n', '/// @author Brecht Devos - <[email\xa0protected]>\n', '/// @dev Extension for the Ownable contract, where the ownership needs\n', '///      to be claimed. This allows the new owner to accept the transfer.\n', 'contract Claimable is Ownable\n', '{\n', '    address public pendingOwner;\n', '\n', '    /// @dev Modifier throws if called by any account other than the pendingOwner.\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner, "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    /// @dev Allows the current owner to set the pendingOwner address.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(\n', '        address newOwner\n', '        )\n', '        public\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(newOwner != address(0) && newOwner != owner, "INVALID_ADDRESS");\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /// @dev Allows the pendingOwner address to finalize the transfer.\n', '    function claimOwnership()\n', '        public\n', '        onlyPendingOwner\n', '    {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '\n', '\n', '/// @title ERC20 Token Interface\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <[email\xa0protected]>\n', 'abstract contract ERC20\n', '{\n', '    function totalSupply()\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint);\n', '\n', '    function balanceOf(\n', '        address who\n', '        )\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint);\n', '\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '        )\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint);\n', '\n', '    function transfer(\n', '        address to,\n', '        uint value\n', '        )\n', '        public\n', '        virtual\n', '        returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint    value\n', '        )\n', '        public\n', '        virtual\n', '        returns (bool);\n', '\n', '    function approve(\n', '        address spender,\n', '        uint    value\n', '        )\n', '        public\n', '        virtual\n', '        returns (bool);\n', '}\n', '\n', '// File: contracts/MathUint.sol\n', '\n', '\n', '\n', '/// @title Utility Functions for uint\n', '/// @author Daniel Wang - <[email\xa0protected]>\n', 'library MathUint\n', '{\n', '    function mul(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint c)\n', '    {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "MUL_OVERFLOW");\n', '    }\n', '\n', '    function sub(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(b <= a, "SUB_UNDERFLOW");\n', '        return a - b;\n', '    }\n', '\n', '    function add(\n', '        uint a,\n', '        uint b\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint c)\n', '    {\n', '        c = a + b;\n', '        require(c >= a, "ADD_OVERFLOW");\n', '    }\n', '}\n', '\n', '// File: contracts/BaseTokenOwnershipPlan.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title EmployeeTokenOwnershipPlan\n', '/// @author Freeman Zhong - <[email\xa0protected]>\n', '/// added at 2021-02-19\n', 'abstract contract BaseTokenOwnershipPlan is Claimable\n', '{\n', '    using MathUint for uint;\n', '\n', '    struct Record {\n', '        uint lastWithdrawTime;\n', '        uint rewarded;\n', '        uint withdrawn;\n', '    }\n', '\n', '    uint    public constant vestPeriod = 2 * 365 days;\n', '    address public constant lrcAddress = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\n', '\n', '    uint public totalReward;\n', '    uint public vestStart;\n', '    mapping (address => Record) public records;\n', '\n', '    event Withdrawal(\n', '        address indexed transactor,\n', '        address indexed member,\n', '        uint            amount\n', '    );\n', '    event MemberAddressChanged(\n', '        address oldAddress,\n', '        address newAddress\n', '    );\n', '\n', '    function withdrawFor(address recipient)\n', '        external\n', '    {\n', '        _withdraw(recipient);\n', '    }\n', '\n', '    function updateRecipient(address oldRecipient, address newRecipient)\n', '        external\n', '    {\n', '        require(canChangeAddressFor(oldRecipient), "UNAUTHORIZED");\n', '        require(newRecipient != address(0), "INVALID_ADDRESS");\n', '        require(records[newRecipient].rewarded == 0, "INVALID_NEW_RECIPIENT");\n', '\n', '        Record storage r = records[oldRecipient];\n', '        require(r.rewarded > 0, "INVALID_OLD_RECIPIENT");\n', '\n', '        records[newRecipient] = r;\n', '        delete records[oldRecipient];\n', '        emit MemberAddressChanged(oldRecipient, newRecipient);\n', '    }\n', '\n', '    function vested(address recipient)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        if (block.timestamp.sub(vestStart) < vestPeriod) {\n', '            return records[recipient].rewarded.mul(block.timestamp.sub(vestStart)) / vestPeriod;\n', '        } else {\n', '            return records[recipient].rewarded;\n', '        }\n', '    }\n', '\n', '    function withdrawable(address recipient)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return vested(recipient).sub(records[recipient].withdrawn);\n', '    }\n', '\n', '    function _withdraw(address recipient)\n', '        internal\n', '    {\n', '        uint amount = withdrawable(recipient);\n', '        require(amount > 0, "INVALID_AMOUNT");\n', '\n', '        Record storage r = records[recipient];\n', '        r.lastWithdrawTime = block.timestamp;\n', '        r.withdrawn = r.withdrawn.add(amount);\n', '\n', '        require(ERC20(lrcAddress).transfer(recipient, amount), "transfer failed");\n', '\n', '        emit Withdrawal(msg.sender, recipient, amount);\n', '    }\n', '\n', '    receive() external payable {\n', '        require(msg.value == 0, "INVALID_VALUE");\n', '        _withdraw(msg.sender);\n', '    }\n', '\n', '    function collect()\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(block.timestamp > vestStart + vestPeriod + 60 days, "TOO_EARLY");\n', '        uint amount = ERC20(lrcAddress).balanceOf(address(this));\n', '        require(ERC20(lrcAddress).transfer(msg.sender, amount), "transfer failed");\n', '    }\n', '\n', '    function canChangeAddressFor(address who)\n', '        internal\n', '        view\n', '        virtual\n', '        returns (bool);\n', '}\n', '\n', '// File: contracts/EmployeeTokenOwnershipPlan2020.sol\n', '\n', '\n', '\n', '\n', '/// @title EmployeeTokenOwnershipPlan\n', '/// @author Freeman Zhong - <[email\xa0protected]>\n', '/// added at 2021-02-17\n', 'contract EmployeeTokenOwnershipPlan2020 is BaseTokenOwnershipPlan\n', '{\n', '    using MathUint for uint;\n', '\n', '    constructor()\n', '    {\n', '        owner = 0x96f16FdB8Cd37C02DEeb7025C1C7618E1bB34d97;\n', '\n', '        address payable[45] memory _members = [\n', '            0xFF6f7B2afdd33671503705098dd3c4c26a0F0705,\n', '            0xF5E2359644f61cDeEcFbD068294EB0d2ff7Dc706,\n', '            0xf493af7DFd0e47869Aac4770B2221a259CA77Ac8,\n', '            0xf21e66578372Ea62BCb0D1cDfC070f231CF56898,\n', '            0xEBE85822e75D2B4716e228818B54154E4AfFD202,\n', '            0xeB4c50dF06cEb2Ea700ea127eA589A99a3aAe1Ec,\n', '            0xe0807d8E14F2BCbF3Cc58637259CCF3fDd1D3ce5,\n', '            0xDB5C4078eC50Ad4Cdc47F4597a377528B1d7bcdB,\n', '            0xD984D096B4bF9DCF5fd75D9cBaf052D00EBe74c4,\n', '            0xd3725C997B580E36707f73880aC006B6757b5009,\n', '            0xBe4C1cb10C2Be76798c4186ADbbC34356b358b52,\n', '            0xbd860737F32b7a43e197370606f7eb32c5caD347,\n', '            0xBc5F996840118B580C4452440351b601862c5672,\n', '            0xad05c57e06a80b8EC92383b3e10Fea0E2b4e571D,\n', '            0xaBad5427278F99c9b9393Cc46FDb0Cb4CB6C33f5,\n', '            0xa817c7a0690F17029b756b2EedAA089E0C94c900,\n', '            0xa26cFCeCb07e401547be07eEe26E6FD608f77d1a,\n', '            0x933650184994CFce9D64A9F3Ed14F1Fd017fF89A,\n', '            0x87adb1BEa935649E607f615F41ae8f4cA96566fa,\n', '            0x813C12326A0E8C2aC91d584f025E50072CDb4467,\n', '            0x7F81D533B2ea31BE2591d89394ADD9A12499ff17,\n', '            0x7F6Dd0c1BeB26CFf8ABA5B020E78D7C0Ed54B8Cc,\n', '            0x7b3B1F252169Ff83E3E91106230c36bE672aFdE3,\n', '            0x7809D08edBBBC401c430e5D3862a1Fdfcb8094A2,\n', '            0x7414eA41bd1844f61e8990b209a1Dc301489baa9,\n', '            0x7154a02BA6eEaB9300D056e25f3EEA3481680f87,\n', '            0x6D0228303D0608CACc8a262deA95932DCAc12c8D,\n', '            0x6b1029C9AE8Aa5EEA9e045E8ba3C93d380D5BDDa,\n', '            0x650EACf9AD1576680f1af6eC6cC598A484d796Ad,\n', '            0x5a03a928b332EC269f68684A8e9c1881b4Da5f3d,\n', '            0x55634e271BCa62dDFb9B5f7eae19f3Ae94Fb96b7,\n', '            0x4c381276F4847255C675Eab90c3409FA2fce68bC,\n', '            0x4bA63ac57b45087d03Abfd8E98987705Fa56B1ab,\n', '            0x49c268e3F2119fCf71f70dF987432689dd4145Ad,\n', '            0x41cDd7034AD6b2a5d24397189802048E97b6532D,\n', '            0x33CDbeB3e060bf6973e28492BE3D469C05D32786,\n', '            0x2a791a837D70E6D6e35073Dd61a9Af878Ac231A5,\n', '            0x24C08921717bf5C0029e2b8013B70f1D203cCDac,\n', '            0x2234C96681E9533FDfD122baCBBc634EfbafA0F0,\n', '            0x21870650F40Fe8249DECc96525249a43829E9A32,\n', '            0x1F28F10176F89F4E9985873B84d14e75751BB3D1,\n', '            0x11a8632b5089c6a061760F0b03285e2cC1388E36,\n', '            0x10Bd72a6AfbF8860ec90f7aeCdB8e937a758f351,\n', '            0x07A7191de1BA70dBe875F12e744B020416a5712b,\n', '            0x067eceAd820BC54805A2412B06946b184d11CB4b\n', '        ];\n', '\n', '        uint80[45] memory _amounts = [\n', '            187520 ether,\n', '            500053 ether,\n', '            384004 ether,\n', '            538180 ether,\n', '            340060 ether,\n', '            433972 ether,\n', '            530065 ether,\n', '            482910 ether,\n', '            308310 ether,\n', '            398740 ether,\n', '            120010 ether,\n', '            750079 ether,\n', '            31254 ether,\n', '            667795 ether,\n', '            824272 ether,\n', '            750079 ether,\n', '            435961 ether,\n', '            459366 ether,\n', '            750083 ether,\n', '            453078 ether,\n', '            775175 ether,\n', '            500972 ether,\n', '            375040 ether,\n', '            425292 ether,\n', '            692576 ether,\n', '            180661 ether,\n', '            797479 ether,\n', '            517196 ether,\n', '            475260 ether,\n', '            730172 ether,\n', '            549381 ether,\n', '            150834 ether,\n', '            501058 ether,\n', '            1076356 ether,\n', '            145641 ether,\n', '            519363 ether,\n', '            573806 ether,\n', '            162000 ether,\n', '            539577 ether,\n', '            330598 ether,\n', '            470891 ether,\n', '            398740 ether,\n', '            561055 ether,\n', '            221724 ether,\n', '            485991 ether\n', '        ];\n', '\n', '        uint _totalReward = 21502629 ether;\n', '        vestStart = block.timestamp;\n', '\n', '        for (uint i = 0; i < _members.length; i++) {\n', '            require(records[_members[i]].rewarded == 0, "DUPLICATED_MEMBER");\n', '\n', '            Record memory record = Record(block.timestamp, _amounts[i], 0);\n', '            records[_members[i]] = record;\n', '            totalReward = totalReward.add(_amounts[i]);\n', '        }\n', '        require(_totalReward == totalReward, "VALUE_MISMATCH");\n', '    }\n', '\n', '    function canChangeAddressFor(address who)\n', '        internal\n', '        view\n', '        override\n', '        returns (bool) {\n', '        return msg.sender == who;\n', '    }\n', '\n', '}']