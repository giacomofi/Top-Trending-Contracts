['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-10\n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title The interface for the Kyber Network smart contract\n', ' * @author Zefram Lou (Zebang Liu)\n', ' */\n', 'interface IKyberNetwork {\n', '    function getExpectedRate(\n', '        ERC20Detailed src,\n', '        ERC20Detailed dest,\n', '        uint256 srcQty\n', '    ) external view returns (uint256 expectedRate, uint256 slippageRate);\n', '\n', '    function tradeWithHint(\n', '        ERC20Detailed src,\n', '        uint256 srcAmount,\n', '        ERC20Detailed dest,\n', '        address payable destAddress,\n', '        uint256 maxDestAmount,\n', '        uint256 minConversionRate,\n', '        address walletId,\n', '        bytes calldata hint\n', '    ) external payable returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title The smart contract for useful utility functions and constants.\n', ' * @author Zefram Lou (Zebang Liu)\n', ' */\n', 'contract Utils {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Detailed;\n', '\n', '    /**\n', '     * @notice Checks if `_token` is a valid token.\n', "     * @param _token the token's address\n", '     */\n', '    modifier isValidToken(address _token) {\n', '        require(_token != address(0));\n', '        if (_token != address(ETH_TOKEN_ADDRESS)) {\n', '            require(isContract(_token));\n', '        }\n', '        _;\n', '    }\n', '\n', '    address public USDC_ADDR;\n', '    address payable public KYBER_ADDR;\n', '    address payable public ONEINCH_ADDR;\n', '\n', '    bytes public constant PERM_HINT = "PERM";\n', '\n', '    // The address Kyber Network uses to represent Ether\n', '    ERC20Detailed internal constant ETH_TOKEN_ADDRESS =\n', '        ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    ERC20Detailed internal usdc;\n', '    IKyberNetwork internal kyber;\n', '\n', '    uint256 internal constant PRECISION = (10**18);\n', '    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\n', '    uint256 internal constant ETH_DECIMALS = 18;\n', '    uint256 internal constant MAX_DECIMALS = 18;\n', '\n', '    constructor(\n', '        address _usdcAddr,\n', '        address payable _kyberAddr,\n', '        address payable _oneInchAddr\n', '    ) public {\n', '        USDC_ADDR = _usdcAddr;\n', '        KYBER_ADDR = _kyberAddr;\n', '        ONEINCH_ADDR = _oneInchAddr;\n', '\n', '        usdc = ERC20Detailed(_usdcAddr);\n', '        kyber = IKyberNetwork(_kyberAddr);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of decimals of a token\n', '     * @param _token the token to be queried\n', '     * @return number of decimals\n', '     */\n', '    function getDecimals(ERC20Detailed _token) internal view returns (uint256) {\n', '        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n', '            return uint256(ETH_DECIMALS);\n', '        }\n', '        return uint256(_token.decimals());\n', '    }\n', '\n', '    /**\n', '     * @notice Get the token balance of an account\n', '     * @param _token the token to be queried\n', '     * @param _addr the account whose balance will be returned\n', '     * @return token balance of the account\n', '     */\n', '    function getBalance(ERC20Detailed _token, address _addr)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n', '            return uint256(_addr.balance);\n', '        }\n', '        return uint256(_token.balanceOf(_addr));\n', '    }\n', '\n', '    /**\n', '     * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\n', '     *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\n', '     *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\n', '     * @param srcAmount amount of source token\n', '     * @param destAmount amount of dest token\n', '     * @param srcDecimals decimals used by source token\n', '     * @param dstDecimals decimals used by dest token\n', '     */\n', '    function calcRateFromQty(\n', '        uint256 srcAmount,\n', '        uint256 destAmount,\n', '        uint256 srcDecimals,\n', '        uint256 dstDecimals\n', '    ) internal pure returns (uint256) {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(destAmount <= MAX_QTY);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return ((destAmount * PRECISION) /\n', '                ((10**(dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return ((destAmount *\n', '                PRECISION *\n', '                (10**(srcDecimals - dstDecimals))) / srcAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Wrapper function for doing token conversion on Kyber Network\n', '     * @param _srcToken the token to convert from\n', '     * @param _srcAmount the amount of tokens to be converted\n', '     * @param _destToken the destination token\n', '     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n', '     *         _srcPriceInDest the price of the source token, in terms of dest tokens\n', '     *         _actualDestAmount actual amount of dest token traded\n', '     *         _actualSrcAmount actual amount of src token traded\n', '     */\n', '    function __kyberTrade(\n', '        ERC20Detailed _srcToken,\n', '        uint256 _srcAmount,\n', '        ERC20Detailed _destToken\n', '    )\n', '        internal\n', '        returns (\n', '            uint256 _destPriceInSrc,\n', '            uint256 _srcPriceInDest,\n', '            uint256 _actualDestAmount,\n', '            uint256 _actualSrcAmount\n', '        )\n', '    {\n', '        require(_srcToken != _destToken);\n', '\n', '        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n', '        uint256 msgValue;\n', '        if (_srcToken != ETH_TOKEN_ADDRESS) {\n', '            msgValue = 0;\n', '            _srcToken.safeApprove(KYBER_ADDR, 0);\n', '            _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\n', '        } else {\n', '            msgValue = _srcAmount;\n', '        }\n', '        _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\n', '            _srcToken,\n', '            _srcAmount,\n', '            _destToken,\n', '            toPayableAddr(address(this)),\n', '            MAX_QTY,\n', '            1,\n', '            address(0),\n', '            PERM_HINT\n', '        );\n', '        _actualSrcAmount = beforeSrcBalance.sub(\n', '            getBalance(_srcToken, address(this))\n', '        );\n', '        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\n', '        _destPriceInSrc = calcRateFromQty(\n', '            _actualDestAmount,\n', '            _actualSrcAmount,\n', '            getDecimals(_destToken),\n', '            getDecimals(_srcToken)\n', '        );\n', '        _srcPriceInDest = calcRateFromQty(\n', '            _actualSrcAmount,\n', '            _actualDestAmount,\n', '            getDecimals(_srcToken),\n', '            getDecimals(_destToken)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Wrapper function for doing token conversion on 1inch\n', '     * @param _srcToken the token to convert from\n', '     * @param _srcAmount the amount of tokens to be converted\n', '     * @param _destToken the destination token\n', '     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n', '     *         _srcPriceInDest the price of the source token, in terms of dest tokens\n', '     *         _actualDestAmount actual amount of dest token traded\n', '     *         _actualSrcAmount actual amount of src token traded\n', '     */\n', '    function __oneInchTrade(\n', '        ERC20Detailed _srcToken,\n', '        uint256 _srcAmount,\n', '        ERC20Detailed _destToken,\n', '        bytes memory _calldata\n', '    )\n', '        public  \n', '        returns (\n', '            uint256 _destPriceInSrc,\n', '            uint256 _srcPriceInDest,\n', '            uint256 _actualDestAmount,\n', '            uint256 _actualSrcAmount\n', '        )\n', '    {\n', '        require(_srcToken != _destToken);\n', '\n', '        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n', '        uint256 beforeDestBalance = getBalance(_destToken, address(this));\n', "        // Note: _actualSrcAmount is being used as msgValue here, because otherwise we'd run into the stack too deep error\n", '        if (_srcToken != ETH_TOKEN_ADDRESS) {\n', '            _actualSrcAmount = 0;\n', '            _srcToken.safeApprove(ONEINCH_ADDR, 0);\n', '            _srcToken.safeApprove(ONEINCH_ADDR, _srcAmount);\n', '        } else {\n', '            _actualSrcAmount = _srcAmount;\n', '        }\n', '\n', '        // trade through 1inch proxy\n', '        (bool success, ) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata);\n', '        require(success);\n', '\n', '        // calculate trade amounts and price\n', '        _actualDestAmount = getBalance(_destToken, address(this)).sub(\n', '            beforeDestBalance\n', '        );\n', '        _actualSrcAmount = beforeSrcBalance.sub(\n', '            getBalance(_srcToken, address(this))\n', '        );\n', '        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\n', '        _destPriceInSrc = calcRateFromQty(\n', '            _actualDestAmount,\n', '            _actualSrcAmount,\n', '            getDecimals(_destToken),\n', '            getDecimals(_srcToken)\n', '        );\n', '        _srcPriceInDest = calcRateFromQty(\n', '            _actualSrcAmount,\n', '            _actualDestAmount,\n', '            getDecimals(_srcToken),\n', '            getDecimals(_destToken)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if an Ethereum account is a smart contract\n', '     * @param _addr the account to be checked\n', '     * @return True if the account is a smart contract, false otherwise\n', '     */\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint256 size;\n', '        if (_addr == address(0)) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    function toPayableAddr(address _addr)\n', '        internal\n', '        pure\n', '        returns (address payable)\n', '    {\n', '        return address(uint160(_addr));\n', '    }\n', '}']