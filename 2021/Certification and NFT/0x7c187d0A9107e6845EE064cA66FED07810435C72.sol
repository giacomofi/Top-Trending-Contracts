['// SPDX-License-Identifier: BUSL-1.1\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./ILimiter.sol";\n', '\n', 'contract LimiterDaily is ILimiter, Ownable {\n', '    // IBridge address => timestamp (day) => usage\n', '    mapping (address => mapping (uint256 => uint256)) private _usages;\n', '    mapping (address => uint256) private _limiter;\n', '\n', '    uint256 constant private TIME_BLOCK = 86400;\n', '\n', '    // limit = 0 is unlimited\n', '    function setLimit(address bridge, uint256 limit) external onlyOwner {\n', '        _limiter[bridge] = limit;\n', '    }\n', '\n', '    function getLimit(address bridge) override public view returns (uint256) {\n', '        return _limiter[bridge];\n', '    }\n', '\n', '    function getUsage(address bridge) override public view returns (uint256) {\n', '        uint256 ts = block.timestamp / TIME_BLOCK;\n', '        uint256 usage = _usages[bridge][ts];\n', '        return usage;\n', '    }\n', '\n', '    function isLimited(address bridge, uint256 amount) override public view returns (bool) {\n', '        if (_limiter[bridge] == 0) {\n', '            return false;\n', '        }\n', '\n', '        return getUsage(bridge) + amount > getLimit(bridge);\n', '    }\n', '\n', '    function increaseUsage(uint256 amount) override external {\n', '        address bridge = _msgSender();\n', '\n', '        // this prevent unknown contract to change usage value\n', '        if (_limiter[bridge] == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 ts = block.timestamp / TIME_BLOCK;\n', '        _usages[bridge][ts] += amount;\n', '        require(_usages[bridge][ts] <= _limiter[bridge], "LimiterDaily: limit exceeded");\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: BUSL-1.1\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface ILimiter {\n', '    function getLimit(address bridge) external view returns (uint256);\n', '\n', '    function getUsage(address bridge) external view returns (uint256);\n', '\n', '    function isLimited(address bridge, uint256 amount) external view returns (bool);\n', '\n', '    function increaseUsage(uint256 amount) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']