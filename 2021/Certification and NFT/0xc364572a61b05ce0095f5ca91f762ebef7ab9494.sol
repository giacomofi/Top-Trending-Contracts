['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/libraries/Context.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/abstract/Pausable.sol\n', '\n', '// SPDX-License-Identifier: MIT;\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', '\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor() {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File contracts/abstract/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', 'abstract contract Ownable is Pausable {\n', '    address public _owner;\n', '    address public _admin;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor(address ownerAddress) {\n', '        _owner = msg.sender;\n', '        _admin = ownerAddress;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(_admin == _msgSender(), "Ownable: caller is not the Admin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyAdmin {\n', '        emit OwnershipTransferred(_owner, _admin);\n', '        _owner = _admin;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '// File contracts/abstract/Admin.sol\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', 'abstract contract Admin is Ownable {\n', '  struct tokenInfo {\n', '    bool isExist;\n', '    uint8 decimal;\n', '    uint256 userMinStake;\n', '    uint256 userMaxStake;\n', '    uint256 totalMaxStake;\n', '    uint256 lockableDays;\n', '    bool optionableStatus;\n', '  }\n', '\n', '  using SafeMath for uint256;\n', '  address[] public tokens;\n', '  mapping(address => address[]) public tokensSequenceList;\n', '  mapping(address => tokenInfo) public tokenDetails;\n', '  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\n', '  mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '  uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\n', '  uint256 public constant DAYS = 1 days;\n', '  uint256 public constant HOURS = 1 hours;\n', '  uint256 public stakeDuration;\n', '  uint256 public refPercentage;\n', '  uint256 public optionableBenefit;\n', '\n', '  event TokenDetails(\n', '    address indexed tokenAddress,\n', '    uint256 userMinStake,\n', '    uint256 userMaxStake,\n', '    uint256 totalMaxStake,\n', '    uint256 updatedTime\n', '  );\n', '\n', '  event LockableTokenDetails(\n', '    address indexed tokenAddress,\n', '    uint256 lockableDys,\n', '    bool optionalbleStatus,\n', '    uint256 updatedTime\n', '  );\n', '\n', '  event DailyDistributionDetails(\n', '    address indexed stakedTokenAddress,\n', '    address indexed rewardTokenAddress,\n', '    uint256 rewards,\n', '    uint256 time\n', '  );\n', '\n', '  event SequenceDetails(\n', '    address indexed stakedTokenAddress,\n', '    address[] rewardTokenSequence,\n', '    uint256 time\n', '  );\n', '\n', '  event StakeDurationDetails(uint256 updatedDuration, uint256 time);\n', '\n', '  event OptionableBenefitDetails(uint256 updatedBenefit, uint256 time);\n', '\n', '  event ReferrerPercentageDetails(uint256 updatedRefPercentage, uint256 time);\n', '\n', '  event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\n', '\n', '  event BlockedDetails(\n', '    address indexed stakedTokenAddress,\n', '    address indexed rewardTokenAddress,\n', '    bool blockedStatus,\n', '    uint256 time\n', '  );\n', '\n', '  event WithdrawDetails(\n', '    address indexed tokenAddress,\n', '    uint256 withdrawalAmount,\n', '    uint256 time\n', '  );\n', '\n', '  constructor(address _owner) Ownable(_owner) {\n', '    stakeDuration = 90 days;\n', '    refPercentage = 2500000000000000000;\n', '    optionableBenefit = 2;\n', '  }\n', '\n', '  function addToken(\n', '    address tokenAddress,\n', '    uint256 userMinStake,\n', '    uint256 userMaxStake,\n', '    uint256 totalStake,\n', '    uint8 decimal\n', '  ) public onlyOwner returns (bool) {\n', '    if (!(tokenDetails[tokenAddress].isExist)) tokens.push(tokenAddress);\n', '\n', '    tokenDetails[tokenAddress].isExist = true;\n', '    tokenDetails[tokenAddress].decimal = decimal;\n', '    tokenDetails[tokenAddress].userMinStake = userMinStake;\n', '    tokenDetails[tokenAddress].userMaxStake = userMaxStake;\n', '    tokenDetails[tokenAddress].totalMaxStake = totalStake;\n', '\n', '    emit TokenDetails(\n', '      tokenAddress,\n', '      userMinStake,\n', '      userMaxStake,\n', '      totalStake,\n', '      block.timestamp\n', '    );\n', '    return true;\n', '  }\n', '\n', '  function setDailyDistribution(\n', '    address[] memory stakedToken,\n', '    address[] memory rewardToken,\n', '    uint256[] memory dailyDistribution\n', '  ) public onlyOwner {\n', '    require(\n', '      stakedToken.length == rewardToken.length &&\n', '        rewardToken.length == dailyDistribution.length,\n', '      "Invalid Input"\n', '    );\n', '\n', '    for (uint8 i = 0; i < stakedToken.length; i++) {\n', '      require(\n', '        tokenDetails[stakedToken[i]].isExist &&\n', '          tokenDetails[rewardToken[i]].isExist,\n', '        "Token not exist"\n', '      );\n', '      tokenDailyDistribution[stakedToken[i]][\n', '        rewardToken[i]\n', '      ] = dailyDistribution[i];\n', '\n', '      emit DailyDistributionDetails(\n', '        stakedToken[i],\n', '        rewardToken[i],\n', '        dailyDistribution[i],\n', '        block.timestamp\n', '      );\n', '    }\n', '  }\n', '\n', '  function updateSequence(\n', '    address stakedToken,\n', '    address[] memory rewardTokenSequence\n', '  ) public onlyOwner {\n', '    tokensSequenceList[stakedToken] = new address[](0);\n', '    require(tokenDetails[stakedToken].isExist, "Staked Token Not Exist");\n', '    for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\n', '      require(rewardTokenSequence.length <= tokens.length, "Invalid Input");\n', '      require(\n', '        tokenDetails[rewardTokenSequence[i]].isExist,\n', '        "Reward Token Not Exist"\n', '      );\n', '      tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\n', '    }\n', '\n', '    emit SequenceDetails(\n', '      stakedToken,\n', '      tokensSequenceList[stakedToken],\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  function updateToken(\n', '    address tokenAddress,\n', '    uint256 userMinStake,\n', '    uint256 userMaxStake,\n', '    uint256 totalStake\n', '  ) public onlyOwner {\n', '    require(tokenDetails[tokenAddress].isExist, "Token Not Exist");\n', '    tokenDetails[tokenAddress].userMinStake = userMinStake;\n', '    tokenDetails[tokenAddress].userMaxStake = userMaxStake;\n', '    tokenDetails[tokenAddress].totalMaxStake = totalStake;\n', '\n', '    emit TokenDetails(\n', '      tokenAddress,\n', '      userMinStake,\n', '      userMaxStake,\n', '      totalStake,\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  function lockableToken(\n', '    address tokenAddress,\n', '    uint8 lockableStatus,\n', '    uint256 lockedDays,\n', '    bool optionableStatus\n', '  ) public onlyOwner {\n', '    require(\n', '      lockableStatus == 1 || lockableStatus == 2 || lockableStatus == 3,\n', '      "Invalid Lockable Status"\n', '    );\n', '    require(tokenDetails[tokenAddress].isExist == true, "Token Not Exist");\n', '\n', '    if (lockableStatus == 1) {\n', '      tokenDetails[tokenAddress].lockableDays = block.timestamp.add(lockedDays);\n', '    } else if (lockableStatus == 2) tokenDetails[tokenAddress].lockableDays = 0;\n', '    else if (lockableStatus == 3)\n', '      tokenDetails[tokenAddress].optionableStatus = optionableStatus;\n', '\n', '    emit LockableTokenDetails(\n', '      tokenAddress,\n', '      tokenDetails[tokenAddress].lockableDays,\n', '      tokenDetails[tokenAddress].optionableStatus,\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  function updateStakeDuration(uint256 durationTime) public onlyOwner {\n', '    stakeDuration = durationTime;\n', '\n', '    emit StakeDurationDetails(stakeDuration, block.timestamp);\n', '  }\n', '\n', '  function updateOptionableBenefit(uint256 benefit) public onlyOwner {\n', '    optionableBenefit = benefit;\n', '\n', '    emit OptionableBenefitDetails(optionableBenefit, block.timestamp);\n', '  }\n', '\n', '  function updateRefPercentage(uint256 refPer) public onlyOwner {\n', '    refPercentage = refPer;\n', '\n', '    emit ReferrerPercentageDetails(refPercentage, block.timestamp);\n', '  }\n', '\n', '  function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\n', '    intervalDays = new uint256[](0);\n', '\n', '    for (uint8 i = 0; i < _interval.length; i++) {\n', '      uint256 noD = stakeDuration.div(DAYS);\n', '      require(noD > _interval[i], "Invalid Interval Day");\n', '      intervalDays.push(_interval[i]);\n', '    }\n', '\n', '    emit IntervalDaysDetails(intervalDays, block.timestamp);\n', '  }\n', '\n', '  function changeTokenBlockedStatus(\n', '    address stakedToken,\n', '    address rewardToken,\n', '    bool status\n', '  ) public onlyOwner {\n', '    require(\n', '      tokenDetails[stakedToken].isExist && tokenDetails[rewardToken].isExist,\n', '      "Token not exist"\n', '    );\n', '    tokenBlockedStatus[stakedToken][rewardToken] = status;\n', '\n', '    emit BlockedDetails(\n', '      stakedToken,\n', '      rewardToken,\n', '      tokenBlockedStatus[stakedToken][rewardToken],\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  function safeWithdraw(address tokenAddress, uint256 amount) public onlyOwner {\n', '    require(\n', '      IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '      "Insufficient Balance"\n', '    );\n', '    require(IERC20(tokenAddress).transfer(_owner, amount), "Transfer failed");\n', '\n', '    emit WithdrawDetails(tokenAddress, amount, block.timestamp);\n', '  }\n', '\n', '  function viewTokensCount() external view returns (uint256) {\n', '    return tokens.length;\n', '  }\n', '}\n', '\n', '\n', '// File contracts/UnifarmV11.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @title Unifarm Contract\n', ' * @author OroPocket\n', ' */\n', '\n', 'contract UnifarmV11 is Admin {\n', "  // Wrappers over Solidity's arithmetic operations\n", '  using SafeMath for uint256;\n', '\n', '  // Stores Stake Details\n', '  struct stakeInfo {\n', '    address user;\n', '    bool[] isActive;\n', '    address[] referrer;\n', '    address[] tokenAddress;\n', '    uint256[] stakeId;\n', '    uint256[] stakedAmount;\n', '    uint256[] startTime;\n', '  }\n', '\n', '  // Mapping\n', '  mapping(address => stakeInfo) public stakingDetails;\n', '  mapping(address => mapping(address => uint256)) public userTotalStaking;\n', '  mapping(address => uint256) public totalStaking;\n', '  uint256 public poolStartTime;\n', '\n', '  // Events\n', '  event Stake(\n', '    address indexed userAddress,\n', '    uint256 stakeId,\n', '    address indexed referrerAddress,\n', '    address indexed tokenAddress,\n', '    uint256 stakedAmount,\n', '    uint256 time\n', '  );\n', '\n', '  event Claim(\n', '    address indexed userAddress,\n', '    address indexed stakedTokenAddress,\n', '    address indexed tokenAddress,\n', '    uint256 claimRewards,\n', '    uint256 time\n', '  );\n', '\n', '  event UnStake(\n', '    address indexed userAddress,\n', '    address indexed unStakedtokenAddress,\n', '    uint256 unStakedAmount,\n', '    uint256 time,\n', '    uint256 stakeId\n', '  );\n', '\n', '  event ReferralEarn(\n', '    address indexed userAddress,\n', '    address indexed callerAddress,\n', '    address indexed rewardTokenAddress,\n', '    uint256 rewardAmount,\n', '    uint256 time\n', '  );\n', '\n', '  constructor() Admin(msg.sender) {\n', '    poolStartTime = block.timestamp;\n', '  }\n', '\n', '  /**\n', '   * @notice Stake tokens to earn rewards\n', '   * @param tokenAddress Staking token address\n', '   * @param amount Amount of tokens to be staked\n', '   */\n', '\n', '  function stake(\n', '    address referrerAddress,\n', '    address tokenAddress,\n', '    uint256 amount\n', '  ) external whenNotPaused {\n', '    // checks\n', '    require(msg.sender != referrerAddress, "STAKE: invalid referrer address");\n', '    require(tokenDetails[tokenAddress].isExist, "STAKE : Token is not Exist");\n', '    require(\n', '      userTotalStaking[msg.sender][tokenAddress].add(amount) >=\n', '        tokenDetails[tokenAddress].userMinStake,\n', '      "STAKE : Min Amount should be within permit"\n', '    );\n', '    require(\n', '      userTotalStaking[msg.sender][tokenAddress].add(amount) <=\n', '        tokenDetails[tokenAddress].userMaxStake,\n', '      "STAKE : Max Amount should be within permit"\n', '    );\n', '    require(\n', '      totalStaking[tokenAddress].add(amount) <=\n', '        tokenDetails[tokenAddress].totalMaxStake,\n', '      "STAKE : Maxlimit exceeds"\n', '    );\n', '\n', '    require(\n', '      poolStartTime.add(stakeDuration) > block.timestamp,\n', '      "STAKE: Staking Time Completed"\n', '    );\n', '\n', '    // Storing stake details\n', '    stakingDetails[msg.sender].stakeId.push(\n', '      stakingDetails[msg.sender].stakeId.length\n', '    );\n', '    stakingDetails[msg.sender].isActive.push(true);\n', '    stakingDetails[msg.sender].user = msg.sender;\n', '    stakingDetails[msg.sender].referrer.push(referrerAddress);\n', '    stakingDetails[msg.sender].tokenAddress.push(tokenAddress);\n', '    stakingDetails[msg.sender].startTime.push(block.timestamp);\n', '\n', '    // Update total staking amount\n', '    stakingDetails[msg.sender].stakedAmount.push(amount);\n', '    totalStaking[tokenAddress] = totalStaking[tokenAddress].add(amount);\n', '    userTotalStaking[msg.sender][tokenAddress] = userTotalStaking[msg.sender][\n', '      tokenAddress\n', '    ]\n', '      .add(amount);\n', '\n', '    // Transfer tokens from userf to contract\n', '    require(\n', '      IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount),\n', '      "Transfer Failed"\n', '    );\n', '\n', '    // Emit state changes\n', '    emit Stake(\n', '      msg.sender,\n', '      (stakingDetails[msg.sender].stakeId.length.sub(1)),\n', '      referrerAddress,\n', '      tokenAddress,\n', '      amount,\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @notice Claim accumulated rewards\n', '   * @param stakeId Stake ID of the user\n', '   * @param stakedAmount Staked amount of the user\n', '   */\n', '\n', '  function claimRewards(\n', '    address userAddress,\n', '    uint256 stakeId,\n', '    uint256 stakedAmount,\n', '    uint256 totalStake\n', '  ) internal {\n', '    // Local variables\n', '    uint256 interval;\n', '    uint256 endOfProfit;\n', '\n', '    interval = poolStartTime.add(stakeDuration);\n', '\n', '    // Interval calculation\n', '    if (interval > block.timestamp) endOfProfit = block.timestamp;\n', '    else endOfProfit = poolStartTime.add(stakeDuration);\n', '\n', '    interval = endOfProfit.sub(stakingDetails[userAddress].startTime[stakeId]);\n', '    uint256[2] memory stakeData;\n', '    stakeData[0] = (stakedAmount);\n', '    stakeData[1] = (totalStake);\n', '\n', '    // Reward calculation\n', '    if (interval >= HOURS)\n', '      _rewardCalculation(userAddress, stakeId, stakeData, interval);\n', '  }\n', '\n', '  function _rewardCalculation(\n', '    address userAddress,\n', '    uint256 stakeId,\n', '    uint256[2] memory stakingData,\n', '    uint256 interval\n', '  ) internal {\n', '    uint256 rewardsEarned;\n', '    uint256 refEarned;\n', '    uint256[2] memory noOfDays;\n', '\n', '    noOfDays[1] = interval.div(HOURS);\n', '    noOfDays[0] = interval.div(DAYS);\n', '\n', '    rewardsEarned = noOfDays[1].mul(\n', '      getOneDayReward(\n', '        stakingData[0],\n', '        stakingDetails[userAddress].tokenAddress[stakeId],\n', '        stakingDetails[userAddress].tokenAddress[stakeId],\n', '        stakingData[1]\n', '      )\n', '    );\n', '\n', '    // Referrer Earning\n', '    if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\n', '      refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '      rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '      require(\n', '        IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\n', '          stakingDetails[userAddress].referrer[stakeId],\n', '          refEarned\n', '        ) == true,\n', '        "Transfer Failed"\n', '      );\n', '\n', '      emit ReferralEarn(\n', '        stakingDetails[userAddress].referrer[stakeId],\n', '        msg.sender,\n', '        stakingDetails[userAddress].tokenAddress[stakeId],\n', '        refEarned,\n', '        block.timestamp\n', '      );\n', '    }\n', '\n', '    //  Rewards Send\n', '    sendToken(\n', '      userAddress,\n', '      stakingDetails[userAddress].tokenAddress[stakeId],\n', '      stakingDetails[userAddress].tokenAddress[stakeId],\n', '      rewardsEarned\n', '    );\n', '\n', '    uint8 i = 1;\n', '\n', '    while (i < intervalDays.length) {\n', '      if (noOfDays[0] >= intervalDays[i]) {\n', '        uint256 reductionHours = (intervalDays[i].sub(1)).mul(24);\n', '        uint256 balHours = noOfDays[1].sub(reductionHours);\n', '\n', '        address rewardToken =\n', '          tokensSequenceList[stakingDetails[userAddress].tokenAddress[stakeId]][\n', '            i\n', '          ];\n', '\n', '        if (\n', '          rewardToken != stakingDetails[userAddress].tokenAddress[stakeId] &&\n', '          tokenBlockedStatus[stakingDetails[userAddress].tokenAddress[stakeId]][\n', '            rewardToken\n', '          ] ==\n', '          false\n', '        ) {\n', '          rewardsEarned = balHours.mul(\n', '            getOneDayReward(\n', '              stakingData[0],\n', '              stakingDetails[userAddress].tokenAddress[stakeId],\n', '              rewardToken,\n', '              stakingData[1]\n', '            )\n', '          );\n', '\n', '          // Referrer Earning\n', '\n', '          if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\n', '            refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '            rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '            require(\n', '              IERC20(rewardToken).transfer(\n', '                stakingDetails[userAddress].referrer[stakeId],\n', '                refEarned\n', '              ) == true,\n', '              "Transfer Failed"\n', '            );\n', '\n', '            emit ReferralEarn(\n', '              stakingDetails[userAddress].referrer[stakeId],\n', '              msg.sender,\n', '              stakingDetails[userAddress].tokenAddress[stakeId],\n', '              refEarned,\n', '              block.timestamp\n', '            );\n', '          }\n', '\n', '          //  Rewards Send\n', '          sendToken(\n', '            userAddress,\n', '            stakingDetails[userAddress].tokenAddress[stakeId],\n', '            rewardToken,\n', '            rewardsEarned\n', '          );\n', '        }\n', '        i = i + 1;\n', '      } else {\n', '        break;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Get rewards for one day\n', '   * @param stakedAmount Stake amount of the user\n', '   * @param stakedToken Staked token address of the user\n', '   * @param rewardToken Reward token address\n', '   * @return reward One dayh reward for the user\n', '   */\n', '\n', '  function getOneDayReward(\n', '    uint256 stakedAmount,\n', '    address stakedToken,\n', '    address rewardToken,\n', '    uint256 totalStake\n', '  ) public view returns (uint256 reward) {\n', '    uint256 lockBenefit;\n', '\n', '    if (tokenDetails[stakedToken].optionableStatus) {\n', '      stakedAmount = stakedAmount.mul(optionableBenefit);\n', '      lockBenefit = stakedAmount.mul(optionableBenefit.sub(1));\n', '      reward = (\n', '        stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\n', '      )\n', '        .div(totalStake.add(lockBenefit));\n', '    } else\n', '      reward = (\n', '        stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\n', '      )\n', '        .div(totalStake);\n', '  }\n', '\n', '  /**\n', '   * @notice Get rewards for one day\n', '   * @param stakedToken Stake amount of the user\n', '   * @param tokenAddress Reward token address\n', '   * @param amount Amount to be transferred as reward\n', '   */\n', '  function sendToken(\n', '    address userAddress,\n', '    address stakedToken,\n', '    address tokenAddress,\n', '    uint256 amount\n', '  ) internal {\n', '    // Checks\n', '    if (tokenAddress != address(0)) {\n', '      require(\n', '        IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '        "SEND : Insufficient Balance"\n', '      );\n', '      // Transfer of rewards\n', '      require(\n', '        IERC20(tokenAddress).transfer(userAddress, amount),\n', '        "Transfer failed"\n', '      );\n', '\n', '      // Emit state changes\n', '      emit Claim(\n', '        userAddress,\n', '        stakedToken,\n', '        tokenAddress,\n', '        amount,\n', '        block.timestamp\n', '      );\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Unstake and claim rewards\n', '   * @param stakeId Stake ID of the user\n', '   */\n', '  function unStake(address userAddress, uint256 stakeId)\n', '    external\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(\n', '      msg.sender == userAddress || msg.sender == _owner,\n', '      "UNSTAKE: Invalid User Entry"\n', '    );\n', '\n', '    address stakedToken = stakingDetails[userAddress].tokenAddress[stakeId];\n', '\n', '    // lockableDays check\n', '    require(\n', '      tokenDetails[stakedToken].lockableDays <= block.timestamp,\n', '      "UNSTAKE: Token Locked"\n', '    );\n', '\n', '    // optional lock check\n', '    if (tokenDetails[stakedToken].optionableStatus)\n', '      require(\n', '        stakingDetails[userAddress].startTime[stakeId].add(stakeDuration) <=\n', '          block.timestamp,\n', '        "UNSTAKE: Locked in optional lock"\n', '      );\n', '\n', '    // Checks\n', '    require(\n', '      stakingDetails[userAddress].stakedAmount[stakeId] > 0 ||\n', '        stakingDetails[userAddress].isActive[stakeId] == true,\n', '      "UNSTAKE : Already Claimed (or) Insufficient Staked"\n', '    );\n', '\n', '    // State updation\n', '    uint256 stakedAmount = stakingDetails[userAddress].stakedAmount[stakeId];\n', '    uint256 totalStaking1 = totalStaking[stakedToken];\n', '    totalStaking[stakedToken] = totalStaking[stakedToken].sub(stakedAmount);\n', '    userTotalStaking[userAddress][stakedToken] = userTotalStaking[userAddress][\n', '      stakedToken\n', '    ]\n', '      .sub(stakedAmount);\n', '    stakingDetails[userAddress].stakedAmount[stakeId] = 0;\n', '    stakingDetails[userAddress].isActive[stakeId] = false;\n', '\n', '    // Balance check\n', '    require(\n', '      IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).balanceOf(\n', '        address(this)\n', '      ) >= stakedAmount,\n', '      "UNSTAKE : Insufficient Balance"\n', '    );\n', '\n', '    // Transfer staked token back to user\n', '    IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\n', '      userAddress,\n', '      stakedAmount\n', '    );\n', '\n', '    claimRewards(userAddress, stakeId, stakedAmount, totalStaking1);\n', '\n', '    // Emit state changes\n', '    emit UnStake(\n', '      userAddress,\n', '      stakingDetails[userAddress].tokenAddress[stakeId],\n', '      stakedAmount,\n', '      block.timestamp,\n', '      stakeId\n', '    );\n', '\n', '    return true;\n', '  }\n', '\n', '  function emergencyUnstake(\n', '    uint256 stakeId,\n', '    address userAddress,\n', '    address[] memory rewardtokens,\n', '    uint256[] memory amount\n', '  ) external onlyOwner {\n', '    // Checks\n', '    require(\n', '      stakingDetails[userAddress].stakedAmount[stakeId] > 0 &&\n', '        stakingDetails[userAddress].isActive[stakeId] == true,\n', '      "EMERGENCY : Already Claimed (or) Insufficient Staked"\n', '    );\n', '\n', '    // Balance check\n', '    require(\n', '      IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).balanceOf(\n', '        address(this)\n', '      ) >= stakingDetails[userAddress].stakedAmount[stakeId],\n', '      "EMERGENCY : Insufficient Balance"\n', '    );\n', '\n', '    uint256 stakeAmount = stakingDetails[userAddress].stakedAmount[stakeId];\n', '    stakingDetails[userAddress].isActive[stakeId] = false;\n', '    stakingDetails[userAddress].stakedAmount[stakeId] = 0;\n', '    totalStaking[\n', '      stakingDetails[userAddress].tokenAddress[stakeId]\n', '    ] = totalStaking[stakingDetails[userAddress].tokenAddress[stakeId]].sub(\n', '      stakeAmount\n', '    );\n', '\n', '    IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\n', '      userAddress,\n', '      stakeAmount\n', '    );\n', '\n', '    for (uint256 i; i < rewardtokens.length; i++) {\n', '      require(\n', '        IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i],\n', '        "EMERGENCY : Insufficient Reward Balance"\n', '      );\n', '      uint256 rewardsEarned = amount[i];\n', '\n', '      if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\n', '        uint256 refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '        rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '        require(\n', '          IERC20(rewardtokens[i]).transfer(\n', '            stakingDetails[userAddress].referrer[stakeId],\n', '            refEarned\n', '          ),\n', '          "EMERGENCY : Transfer Failed"\n', '        );\n', '\n', '        emit ReferralEarn(\n', '          stakingDetails[userAddress].referrer[stakeId],\n', '          userAddress,\n', '          rewardtokens[i],\n', '          refEarned,\n', '          block.timestamp\n', '        );\n', '      }\n', '\n', '      IERC20(rewardtokens[i]).transfer(userAddress, rewardsEarned);\n', '    }\n', '\n', '    // Emit state changes\n', '    emit UnStake(\n', '      userAddress,\n', '      stakingDetails[userAddress].tokenAddress[stakeId],\n', '      stakeAmount,\n', '      block.timestamp,\n', '      stakeId\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @notice View staking details\n', '   * @param _user User address\n', '   */\n', '  function viewStakingDetails(address _user)\n', '    public\n', '    view\n', '    returns (\n', '      address[] memory,\n', '      address[] memory,\n', '      bool[] memory,\n', '      uint256[] memory,\n', '      uint256[] memory,\n', '      uint256[] memory\n', '    )\n', '  {\n', '    return (\n', '      stakingDetails[_user].referrer,\n', '      stakingDetails[_user].tokenAddress,\n', '      stakingDetails[_user].isActive,\n', '      stakingDetails[_user].stakeId,\n', '      stakingDetails[_user].stakedAmount,\n', '      stakingDetails[_user].startTime\n', '    );\n', '  }\n', '}']