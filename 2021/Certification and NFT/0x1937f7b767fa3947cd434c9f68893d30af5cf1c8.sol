['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '//\n', '// ,-..-. .-. _______   ,--,   ,---.    .---.  .-.  .-.\n', "// |(||  \\| ||__   __|.' .'    | .-.\\  / .-. ) | |/\\| |\n", "// (_)|   | |  )| |   |  |  __ | `-'/  | | |(_)| /  \\ |\n", '// | || |\\  | (_) |   \\  \\ ( _)|   (   | | | | |  /\\  |\n', "// | || | |)|   | |    \\  `-) )| |\\ \\  \\ `-' / |(/  \\ |\n", "// `-'/(  (_)   `-'    )\\____/ |_| \\)\\  )---'  (_)   \\|\n", '//   (__)             (__)         (__)(_)\n', '//\n', '// ETH2 Batch deposit contract\n', '// Please do not call this contract directly, visit our website https://intgrow.com\n', '//\n', '// SPDX-License-Identifier: Apache-2.0\n', 'pragma solidity 0.6.11;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '    * @dev Emitted when the pause is triggered by `account`.\n', '    */\n', '    event Paused(address account);\n', '\n', '    /**\n', '    * @dev Emitted when the pause is lifted by `account`.\n', '    */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '    * @dev Initializes the contract in unpaused state.\n', '    */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Initializes the contract setting the deployer as the initial owner.\n', '    */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Leaves the contract without owner. It will not be possible to call\n', '    * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '    *\n', '    * NOTE: Renouncing ownership will leave the contract without an owner,\n', '    * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '    * Can only be called by the current owner.\n', '        */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '    * overflow (when the result is negative).\n', '        *\n', "        * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '        *\n', "        * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '        *\n', '        * - Multiplication cannot overflow.\n', '        */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '        *\n', "        * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '    * division by zero. The result is rounded towards zero.\n', '        *\n', "        * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '        *\n', '            * Requirements:\n', '            *\n', '            * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '        *\n', "        * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '        *\n', '            * Requirements:\n', '            *\n', '            * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts with custom message when dividing by zero.\n', '        *\n', "        * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '        * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '        * invalid opcode to revert (consuming all remaining gas).\n', '        *\n', '        * Requirements:\n', '        *\n', '        * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '// Deposit contract interface\n', 'interface IDepositContract {\n', '    /// @notice A processed deposit event.\n', '    event DepositEvent(\n', '        bytes pubkey,\n', '        bytes withdrawal_credentials,\n', '        bytes amount,\n', '        bytes signature,\n', '        bytes index\n', '    );\n', '\n', '    /// @notice Submit a Phase 0 DepositData object.\n', '    /// @param pubkey A BLS12-381 public key.\n', '    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n', '    /// @param signature A BLS12-381 signature.\n', '    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n', '    /// Used as a protection against malformed input.\n', '    function deposit(\n', '        bytes calldata pubkey,\n', '        bytes calldata withdrawal_credentials,\n', '        bytes calldata signature,\n', '        bytes32 deposit_data_root\n', '    ) external payable;\n', '\n', '    /// @notice Query the current deposit root hash.\n', '    /// @return The deposit root hash.\n', '    function get_deposit_root() external view returns (bytes32);\n', '\n', '    /// @notice Query the current deposit count.\n', '    /// @return The deposit count encoded as a little endian 64-bit number.\n', '    function get_deposit_count() external view returns (bytes memory);\n', '}\n', '\n', '\n', 'contract BatchDeposit is Pausable, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address depositContract;\n', '    uint256 private _fee;\n', '\n', '    uint256 constant PUBKEY_LENGTH = 48;\n', '    uint256 constant SIGNATURE_LENGTH = 96;\n', '    uint256 constant CREDENTIALS_LENGTH = 32;\n', '    uint256 constant MAX_VALIDATORS = 100;\n', '    uint256 constant DEPOSIT_AMOUNT = 32 ether;\n', '\n', '    event FeeChanged(uint256 previousFee, uint256 newFee);\n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '    event FeeCollected(address indexed payee, uint256 weiAmount);\n', '\n', '    constructor(address depositContractAddr, uint256 initialFee) public {\n', '        require(initialFee % 1 gwei == 0, "Fee must be a multiple of GWEI");\n', '\n', '        depositContract = depositContractAddr;\n', '        _fee = initialFee;\n', '    }\n', '\n', '    /**\n', '    * @dev Performs a batch deposit, asking for an additional fee payment.\n', '    */\n', '    function batchDeposit(\n', '        bytes calldata pubkeys,\n', '        bytes calldata withdrawal_credentials,\n', '        bytes calldata signatures,\n', '        bytes32[] calldata deposit_data_roots\n', '    )\n', '    external payable whenNotPaused\n', '    {\n', '        // sanity checks\n', '        require(msg.value % 1 gwei == 0, "BatchDeposit: Deposit value not multiple of GWEI");\n', '        require(msg.value >= DEPOSIT_AMOUNT, "BatchDeposit: Amount is too low");\n', '\n', '        uint256 count = deposit_data_roots.length;\n', '        require(count > 0, "BatchDeposit: You should deposit at least one validator");\n', '        require(count <= MAX_VALIDATORS, "BatchDeposit: You can deposit max 100 validators at a time");\n', '\n', '        require(pubkeys.length == count * PUBKEY_LENGTH, "BatchDeposit: Pubkey count don\'t match");\n', '        require(signatures.length == count * SIGNATURE_LENGTH, "BatchDeposit: Signatures count don\'t match");\n', '        require(withdrawal_credentials.length == 1 * CREDENTIALS_LENGTH, "BatchDeposit: Withdrawal Credentials count don\'t match");\n', '\n', '        uint256 expectedAmount = _fee.add(DEPOSIT_AMOUNT).mul(count);\n', '        require(msg.value == expectedAmount, "BatchDeposit: Amount is not aligned with pubkeys number");\n', '\n', '        emit FeeCollected(msg.sender, _fee.mul(count));\n', '\n', '        for (uint256 i = 0; i < count; ++i) {\n', '            bytes memory pubkey = bytes(pubkeys[i*PUBKEY_LENGTH:(i+1)*PUBKEY_LENGTH]);\n', '            bytes memory signature = bytes(signatures[i*SIGNATURE_LENGTH:(i+1)*SIGNATURE_LENGTH]);\n', '\n', '            IDepositContract(depositContract).deposit{value: DEPOSIT_AMOUNT}(\n', '                pubkey,\n', '                withdrawal_credentials,\n', '                signature,\n', '                deposit_data_roots[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated fee in the contract\n', '     *\n', '     * @param receiver The address where all accumulated funds will be transferred to.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function withdraw(address payable receiver) public onlyOwner {\n', '        require(receiver != address(0), "You can\'t burn these eth directly");\n', '\n', '        uint256 amount = address(this).balance;\n', '        emit Withdrawn(receiver, amount);\n', '        receiver.transfer(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the validator fee (`newOwner`).\n', '    * Can only be called by the current owner.\n', '        */\n', '    function changeFee(uint256 newFee) public onlyOwner {\n', '        require(newFee != _fee, "Fee must be different from current one");\n', '        require(newFee % 1 gwei == 0, "Fee must be a multiple of GWEI");\n', '\n', '        emit FeeChanged(_fee, newFee);\n', '        _fee = newFee;\n', '    }\n', '\n', '    /**\n', '    * @dev Triggers stopped state.\n', '    *\n', '        * Requirements:\n', '        *\n', '        * - The contract must not be paused.\n', '     */\n', '    function pause() public onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns to normal state.\n', '    *\n', '        * Requirements:\n', '        *\n', '        * - The contract must be paused.\n', '     */\n', '    function unpause() public onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current fee\n', '     */\n', '    function fee() public view returns (uint256) {\n', '        return _fee;\n', '    }\n', '\n', '    /**\n', '    * Disable renunce ownership\n', '    */\n', '    function renounceOwnership() public override onlyOwner {\n', '        revert("Ownable: renounceOwnership is disabled");\n', '    }\n', '}']