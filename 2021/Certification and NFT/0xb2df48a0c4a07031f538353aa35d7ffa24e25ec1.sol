['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', 'contract GebMath {\n', '    uint256 public constant RAY = 10 ** 27;\n', '    uint256 public constant WAD = 10 ** 18;\n', '\n', '    function ray(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 9);\n', '    }\n', '    function rad(uint x) public pure returns (uint z) {\n', '        z = multiply(x, 10 ** 27);\n', '    }\n', '    function minimum(uint x, uint y) public pure returns (uint z) {\n', '        z = (x <= y) ? x : y;\n', '    }\n', '    function addition(uint x, uint y) public pure returns (uint z) {\n', '        z = x + y;\n', '        require(z >= x, "uint-uint-add-overflow");\n', '    }\n', '    function subtract(uint x, uint y) public pure returns (uint z) {\n', '        z = x - y;\n', '        require(z <= x, "uint-uint-sub-underflow");\n', '    }\n', '    function multiply(uint x, uint y) public pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "uint-uint-mul-overflow");\n', '    }\n', '    function rmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function wdivide(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, WAD) / y;\n', '    }\n', '    function wmultiply(uint x, uint y) public pure returns (uint z) {\n', '        z = multiply(x, y) / WAD;\n', '    }\n', '    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract StabilityFeeTreasuryLike {\n', '    function getAllowance(address) virtual external view returns (uint, uint);\n', '    function systemCoin() virtual external view returns (address);\n', '    function pullFunds(address, address, uint) virtual external;\n', '}\n', '\n', 'contract IncreasingTreasuryReimbursement is GebMath {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    function addAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    function removeAuthorization(address account) virtual external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "IncreasingTreasuryReimbursement/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // Starting reward for the fee receiver/keeper\n', '    uint256 public baseUpdateCallerReward;          // [wad]\n', '    // Max possible reward for the fee receiver/keeper\n', '    uint256 public maxUpdateCallerReward;           // [wad]\n', '    // Max delay taken into consideration when calculating the adjusted reward\n', '    uint256 public maxRewardIncreaseDelay;          // [seconds]\n', '    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\n', '    uint256 public perSecondCallerRewardIncrease;   // [ray]\n', '\n', '    // SF treasury\n', '    StabilityFeeTreasuryLike  public treasury;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      address addr\n', '    );\n', '    event ModifyParameters(\n', '      bytes32 parameter,\n', '      uint256 val\n', '    );\n', '    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\n', '\n', '    constructor(\n', '      address treasury_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_\n', '    ) public {\n', '        if (address(treasury_) != address(0)) {\n', '          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), "IncreasingTreasuryReimbursement/treasury-coin-not-set");\n', '        }\n', '        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, "IncreasingTreasuryReimbursement/invalid-max-caller-reward");\n', '        require(perSecondCallerRewardIncrease_ >= RAY, "IncreasingTreasuryReimbursement/invalid-per-second-reward-increase");\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        treasury                        = StabilityFeeTreasuryLike(treasury_);\n', '        baseUpdateCallerReward          = baseUpdateCallerReward_;\n', '        maxUpdateCallerReward           = maxUpdateCallerReward_;\n', '        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\n', '        maxRewardIncreaseDelay          = uint(-1);\n', '\n', '        emit AddAuthorization(msg.sender);\n', '        emit ModifyParameters("treasury", treasury_);\n', '        emit ModifyParameters("baseUpdateCallerReward", baseUpdateCallerReward);\n', '        emit ModifyParameters("maxUpdateCallerReward", maxUpdateCallerReward);\n', '        emit ModifyParameters("perSecondCallerRewardIncrease", perSecondCallerRewardIncrease);\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function either(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := or(x, y)}\n', '    }\n', '\n', '    // --- Treasury ---\n', '    /**\n', '    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\n', '    **/\n', '    function treasuryAllowance() public view returns (uint256) {\n', '        (uint total, uint perBlock) = treasury.getAllowance(address(this));\n', '        return minimum(total, perBlock);\n', '    }\n', '    /*\n', '    * @notice Get the SF reward that can be sent to a function caller right now\n', '    */\n', '    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\n', '        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\n', '        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\n', '        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\n', '        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\n', '            return 0;\n', '        }\n', '        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\n', '        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\n', '        if (adjustedTime > maxRewardIncreaseDelay) {\n', '            return maxPossibleReward;\n', '        }\n', '        uint256 calculatedReward = baseUpdateCallerReward;\n', '        if (adjustedTime > 0) {\n', '            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\n', '        }\n', '        if (calculatedReward > maxPossibleReward) {\n', '            calculatedReward = maxPossibleReward;\n', '        }\n', '        return calculatedReward;\n', '    }\n', '    /**\n', '    * @notice Send a stability fee reward to an address\n', '    * @param proposedFeeReceiver The SF receiver\n', '    * @param reward The system coin amount to send\n', '    **/\n', '    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\n', '        if (address(treasury) == proposedFeeReceiver) return;\n', '        if (either(address(treasury) == address(0), reward == 0)) return;\n', '        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\n', '        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\n', '        catch(bytes memory revertReason) {\n', '            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function collateralTypes(bytes32) virtual public view returns (\n', '        uint256 debtAmount,        // [wad]\n', '        uint256 accumulatedRate,   // [ray]\n', '        uint256 safetyPrice,       // [ray]\n', '        uint256 debtCeiling        // [rad]\n', '    );\n', '    function globalDebtCeiling() virtual public view returns (uint256);\n', '    function modifyParameters(\n', '        bytes32 parameter,\n', '        uint256 data\n', '    ) virtual external;\n', '    function modifyParameters(\n', '        bytes32 collateralType,\n', '        bytes32 parameter,\n', '        uint256 data\n', '    ) virtual external;\n', '}\n', 'abstract contract OracleRelayerLike {\n', '    function redemptionRate() virtual public view returns (uint256);\n', '}\n', '\n', 'contract SingleSpotDebtCeilingSetter is IncreasingTreasuryReimbursement {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public manualSetters;\n', '    function addManualSetter(address account) external isAuthorized {\n', '        manualSetters[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    function removeManualSetter(address account) external isAuthorized {\n', '        manualSetters[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    modifier isManualSetter {\n', '        require(manualSetters[msg.sender] == 1, "SingleSpotDebtCeilingSetter/not-manual-setter");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // The max amount of system coins that can be generated using this collateral type\n', '    uint256 public maxCollateralCeiling;            // [rad]\n', '    // The min amount of system coins that must be generated using this collateral type\n', '    uint256 public minCollateralCeiling;            // [rad]\n', "    // Percentage change applied to the collateral's debt ceiling\n", '    uint256 public ceilingPercentageChange;         // [hundred]\n', '    // When the price feed was last updated\n', '    uint256 public lastUpdateTime;                  // [timestamp]\n', '    // Enforced gap between calls\n', '    uint256 public updateDelay;                     // [seconds]\n', '    // Last timestamp of a manual update\n', '    uint256 public lastManualUpdateTime;            // [seconds]\n', '    // Flag that blocks an increase in the debt ceiling when the redemption rate is positive\n', '    uint256 public blockIncreaseWhenRevalue;\n', '    // Flag that blocks a decrease in the debt ceiling when the redemption rate is negative\n', '    uint256 public blockDecreaseWhenDevalue;\n', "    // The collateral's name\n", '    bytes32 public collateralName;\n', '\n', '    // The SAFEEngine contract\n', '    SAFEEngineLike    public safeEngine;\n', '    // The OracleRelayer contract\n', '    OracleRelayerLike public oracleRelayer;\n', '\n', '    // --- Events ---\n', '    event AddManualSetter(address account);\n', '    event RemoveManualSetter(address account);\n', '    event UpdateCeiling(uint256 nextCeiling);\n', '\n', '    constructor(\n', '      address safeEngine_,\n', '      address oracleRelayer_,\n', '      address treasury_,\n', '      bytes32 collateralName_,\n', '      uint256 baseUpdateCallerReward_,\n', '      uint256 maxUpdateCallerReward_,\n', '      uint256 perSecondCallerRewardIncrease_,\n', '      uint256 updateDelay_,\n', '      uint256 ceilingPercentageChange_,\n', '      uint256 maxCollateralCeiling_,\n', '      uint256 minCollateralCeiling_\n', '    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\n', '        require(safeEngine_ != address(0), "SingleSpotDebtCeilingSetter/invalid-safe-engine");\n', '        require(oracleRelayer_ != address(0), "SingleSpotDebtCeilingSetter/invalid-oracle-relayer");\n', '        require(updateDelay_ > 0, "SingleSpotDebtCeilingSetter/invalid-update-delay");\n', '        require(both(ceilingPercentageChange_ > HUNDRED, ceilingPercentageChange_ <= THOUSAND), "SingleSpotDebtCeilingSetter/invalid-percentage-change");\n', '        require(minCollateralCeiling_ > 0, "SingleSpotDebtCeilingSetter/invalid-min-ceiling");\n', '        require(both(maxCollateralCeiling_ > 0, maxCollateralCeiling_ > minCollateralCeiling_), "SingleSpotDebtCeilingSetter/invalid-max-ceiling");\n', '\n', '        manualSetters[msg.sender] = 1;\n', '\n', '        safeEngine                = SAFEEngineLike(safeEngine_);\n', '        oracleRelayer             = OracleRelayerLike(oracleRelayer_);\n', '        collateralName            = collateralName_;\n', '        updateDelay               = updateDelay_;\n', '        ceilingPercentageChange   = ceilingPercentageChange_;\n', '        maxCollateralCeiling      = maxCollateralCeiling_;\n', '        minCollateralCeiling      = minCollateralCeiling_;\n', '        lastManualUpdateTime      = now;\n', '\n', '        // Check that the oracleRelayer has the redemption rate in it\n', '        oracleRelayer.redemptionRate();\n', '\n', '        emit ModifyParameters("updateDelay", updateDelay);\n', '        emit ModifyParameters("ceilingPercentageChange", ceilingPercentageChange);\n', '        emit ModifyParameters("maxCollateralCeiling", maxCollateralCeiling);\n', '        emit ModifyParameters("minCollateralCeiling", minCollateralCeiling);\n', '    }\n', '\n', '    // --- Math ---\n', '    uint256 constant HUNDRED  = 100;\n', '    uint256 constant THOUSAND = 1000;\n', '\n', '    // --- Boolean Logic ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Management ---\n', '    /*\n', '    * @notify Modify the treasury or the oracle relayer address\n', '    * @param parameter The contract address to modify\n', '    * @param addr The new address for the contract\n', '    */\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        if (parameter == "treasury") {\n', '          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), "SingleSpotDebtCeilingSetter/treasury-coin-not-set");\n', '          treasury = StabilityFeeTreasuryLike(addr);\n', '        }\n', '        else if (parameter == "oracleRelayer") {\n', '          require(addr != address(0), "SingleSpotDebtCeilingSetter/null-addr");\n', '          oracleRelayer = OracleRelayerLike(addr);\n', '          // Check that it has the redemption rate\n', '          oracleRelayer.redemptionRate();\n', '        }\n', '        else revert("SingleSpotDebtCeilingSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '          parameter,\n', '          addr\n', '        );\n', '    }\n', '    /*\n', '    * @notify Modify an uint256 param\n', '    * @param parameter The name of the parameter to modify\n', '    * @param val The new parameter value\n', '    */\n', '    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n', '        if (parameter == "baseUpdateCallerReward") {\n', '          require(val <= maxUpdateCallerReward, "SingleSpotDebtCeilingSetter/invalid-base-caller-reward");\n', '          baseUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "maxUpdateCallerReward") {\n', '          require(val >= baseUpdateCallerReward, "SingleSpotDebtCeilingSetter/invalid-max-caller-reward");\n', '          maxUpdateCallerReward = val;\n', '        }\n', '        else if (parameter == "perSecondCallerRewardIncrease") {\n', '          require(val >= RAY, "SingleSpotDebtCeilingSetter/invalid-caller-reward-increase");\n', '          perSecondCallerRewardIncrease = val;\n', '        }\n', '        else if (parameter == "maxRewardIncreaseDelay") {\n', '          require(val > 0, "SingleSpotDebtCeilingSetter/invalid-max-increase-delay");\n', '          maxRewardIncreaseDelay = val;\n', '        }\n', '        else if (parameter == "updateDelay") {\n', '          require(val >= 0, "SingleSpotDebtCeilingSetter/invalid-call-gap-length");\n', '          updateDelay = val;\n', '        }\n', '        else if (parameter == "maxCollateralCeiling") {\n', '          require(both(maxCollateralCeiling > 0, maxCollateralCeiling > minCollateralCeiling), "SingleSpotDebtCeilingSetter/invalid-max-ceiling");\n', '          maxCollateralCeiling = val;\n', '        }\n', '        else if (parameter == "minCollateralCeiling") {\n', '          require(minCollateralCeiling > 0, "SingleSpotDebtCeilingSetter/invalid-min-ceiling");\n', '          minCollateralCeiling = val;\n', '        }\n', '        else if (parameter == "ceilingPercentageChange") {\n', '          require(both(val > HUNDRED, val <= THOUSAND), "SingleSpotDebtCeilingSetter/invalid-percentage-change");\n', '          ceilingPercentageChange = val;\n', '        }\n', '        else if (parameter == "lastUpdateTime") {\n', '          require(val > now, "SingleSpotDebtCeilingSetter/invalid-update-time");\n', '          lastUpdateTime = val;\n', '        }\n', '        else if (parameter == "blockIncreaseWhenRevalue") {\n', '          require(either(val == 1, val == 0), "SingleSpotDebtCeilingSetter/invalid-block-increase-value");\n', '          blockIncreaseWhenRevalue = val;\n', '        }\n', '        else if (parameter == "blockDecreaseWhenDevalue") {\n', '          require(either(val == 1, val == 0), "SingleSpotDebtCeilingSetter/invalid-block-decrease-value");\n', '          blockDecreaseWhenDevalue = val;\n', '        }\n', '        else revert("SingleSpotDebtCeilingSetter/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '          parameter,\n', '          val\n', '        );\n', '    }\n', '\n', '    // --- Utils ---\n', '    /*\n', "    * @notify Internal function meant to modify the collateral's debt ceiling as well as the global debt ceiling (if needed)\n", '    * @param nextDebtCeiling The new ceiling to set\n', '    */\n', '    function setCeiling(uint256 nextDebtCeiling) internal {\n', '        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling) = safeEngine.collateralTypes(collateralName);\n', '\n', '        if (safeEngine.globalDebtCeiling() < nextDebtCeiling) {\n', '            safeEngine.modifyParameters("globalDebtCeiling", nextDebtCeiling);\n', '        }\n', '\n', '        if (currentDebtCeiling != nextDebtCeiling) {\n', '            safeEngine.modifyParameters(collateralName, "debtCeiling", nextDebtCeiling);\n', '            emit UpdateCeiling(nextDebtCeiling);\n', '        }\n', '    }\n', '\n', '    // --- Auto Updates ---\n', '    /*\n', '    * @notify Periodically updates the debt ceiling. Can be called by anyone\n', '    * @param feeReceiver The address that will receive the reward for updating the ceiling\n', '    */\n', '    function autoUpdateCeiling(address feeReceiver) external {\n', '        // Check that the update time is not in the future\n', '        require(lastUpdateTime < now, "SingleSpotDebtCeilingSetter/update-time-in-the-future");\n', '        // Check delay between calls\n', '        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), "SingleSpotDebtCeilingSetter/wait-more");\n', '\n', "        // Get the caller's reward\n", '        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\n', '        // Update lastUpdateTime\n', '        lastUpdateTime = now;\n', '\n', '        // Get the next ceiling and set it\n', '        uint256 nextCollateralCeiling = getNextCollateralCeiling();\n', '        setCeiling(nextCollateralCeiling);\n', '\n', '        // Pay the caller for updating the rate\n', '        rewardCaller(feeReceiver, callerReward);\n', '    }\n', '\n', '    // --- Manual Updates ---\n', '    /*\n', '    * @notify Authed function that allows manualSetters to update the debt ceiling whenever they want\n', '    */\n', '    function manualUpdateCeiling() external isManualSetter {\n', '        require(now > lastManualUpdateTime, "SingleSpotDebtCeilingSetter/cannot-update-twice-same-block");\n', '        uint256 nextCollateralCeiling = getNextCollateralCeiling();\n', '        lastManualUpdateTime = now;\n', '        setCeiling(nextCollateralCeiling);\n', '    }\n', '\n', '    // --- Getters ---\n', '    /*\n', '    * @notify View function meant to return the new and upcoming debt ceiling. It also applies checks regarding re or devaluation blocks\n', '    */\n', '    function getNextCollateralCeiling() public view returns (uint256) {\n', '        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling) = safeEngine.collateralTypes(collateralName);\n', '        uint256 adjustedCurrentDebt = multiply(debtAmount, accumulatedRate);\n', '\n', '        if (debtAmount == 0) return minCollateralCeiling;\n', '\n', '        uint256 updatedCeiling = multiply(adjustedCurrentDebt, ceilingPercentageChange) / HUNDRED;\n', '        if (updatedCeiling <= minCollateralCeiling) return minCollateralCeiling;\n', '        else if (updatedCeiling >= maxCollateralCeiling) return maxCollateralCeiling;\n', '\n', '        uint256 redemptionRate = oracleRelayer.redemptionRate();\n', '\n', '        if (either(\n', '          allowsIncrease(redemptionRate, currentDebtCeiling, updatedCeiling),\n', '          allowsDecrease(redemptionRate, currentDebtCeiling, updatedCeiling))\n', '        ) return updatedCeiling;\n', '\n', '        return currentDebtCeiling;\n', '    }\n', '    /*\n', '    * @notify View function meant to return the new and upcoming debt ceiling\n', '    */\n', '    function getUpdatedCeiling() external view returns (uint256) {\n', '        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling) = safeEngine.collateralTypes(collateralName);\n', '        uint256 adjustedCurrentDebt = multiply(debtAmount, accumulatedRate);\n', '        return multiply(adjustedCurrentDebt, ceilingPercentageChange) / HUNDRED;\n', '    }\n', '    /*\n', '    * @notify View function meant to return whether an increase in the debt ceiling is currently allowed\n', '    */\n', '    function allowsIncrease(uint256 redemptionRate, uint256 currentDebtCeiling, uint256 updatedCeiling) public view returns (bool allowIncrease) {\n', '        allowIncrease = either(redemptionRate <= RAY, both(redemptionRate > RAY, blockIncreaseWhenRevalue == 0));\n', '        allowIncrease = both(currentDebtCeiling <= updatedCeiling, allowIncrease);\n', '    }\n', '    /*\n', '    * @notify View function meant to return whether a decrease in the debt ceiling is currently allowed\n', '    */\n', '    function allowsDecrease(uint256 redemptionRate, uint256 currentDebtCeiling, uint256 updatedCeiling) public view returns (bool allowDecrease) {\n', '        allowDecrease = either(redemptionRate >= RAY, both(redemptionRate < RAY, blockDecreaseWhenDevalue == 0));\n', '        allowDecrease = both(currentDebtCeiling >= updatedCeiling, allowDecrease);\n', '    }\n', '}']