['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.6.11;\n', '\n', 'interface IController {\n', '    function ADMIN_ROLE() external view returns (bytes32);\n', '\n', '    function HARVESTER_ROLE() external view returns (bytes32);\n', '\n', '    function admin() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '    function setAdmin(address _admin) external;\n', '\n', '    function setTreasury(address _treasury) external;\n', '\n', '    function grantRole(bytes32 _role, address _addr) external;\n', '\n', '    function revokeRole(bytes32 _role, address _addr) external;\n', '\n', '    /*\n', '    @notice Set strategy for vault\n', '    @param _vault Address of vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum undelying token current strategy must return. Prevents slippage\n', '    */\n', '    function setStrategy(\n', '        address _vault,\n', '        address _strategy,\n', '        uint _min\n', '    ) external;\n', '\n', '    // calls to strategy\n', '    /*\n', '    @notice Invest token in vault into strategy\n', '    @param _vault Address of vault\n', '    */\n', '    function invest(address _vault) external;\n', '\n', '    function harvest(address _strategy) external;\n', '\n', '    function skim(address _strategy) external;\n', '\n', '    /*\n', '    @notice Withdraw from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _amount Amount of underlying token to withdraw\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdraw(\n', '        address _strategy,\n', '        uint _amount,\n', '        uint _min\n', '    ) external;\n', '\n', '    /*\n', '    @notice Withdraw all from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdrawAll(address _strategy, uint _min) external;\n', '\n', '    /*\n', '    @notice Exit from strategy\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function exit(address _strategy, uint _min) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\n', '        uint c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) return 0;\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', '                "SafeERC20: decreased allowance below zero"\n', '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/protocol/IStrategyERC20_V3.sol\n', '\n', '/*\n', 'version 1.3.0\n', '\n', 'Changes listed here do not affect interaction with other contracts (Vault and Controller)\n', '- remove functions that are not called by other contracts (vaults and controller)\n', '*/\n', '\n', 'interface IStrategyERC20_V3 {\n', '    function admin() external view returns (address);\n', '\n', '    function controller() external view returns (address);\n', '\n', '    function vault() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns address of underlying token (ETH or ERC20)\n', '    @dev Return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\n', '    */\n', '    function underlying() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns total amount of underlying token transferred from vault\n', '    */\n', '    function totalDebt() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns amount of underlying token locked in this contract\n', '    @dev Output may vary depending on price of liquidity provider token\n', '         where the underlying token is invested\n', '    */\n', '    function totalAssets() external view returns (uint);\n', '\n', '    /*\n', '    @notice Deposit `amount` underlying token\n', '    @param amount Amount of underlying token to deposit\n', '    */\n', '    function deposit(uint _amount) external;\n', '\n', '    /*\n', '    @notice Withdraw `_amount` underlying token\n', '    @param amount Amount of underlying token to withdraw\n', '    */\n', '    function withdraw(uint _amount) external;\n', '\n', '    /*\n', '    @notice Withdraw all underlying token from strategy\n', '    */\n', '    function withdrawAll() external;\n', '\n', '    /*\n', '    @notice Sell any staking rewards for underlying\n', '    */\n', '    function harvest() external;\n', '\n', '    /*\n', '    @notice Increase total debt if totalAssets > totalDebt\n', '    */\n', '    function skim() external;\n', '\n', '    /*\n', '    @notice Exit from strategy, transfer all underlying tokens back to vault\n', '    */\n', '    function exit() external;\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here to admin\n', '    @param _token Address of token to transfer\n', '    @dev _token must not be equal to underlying token\n', '    */\n', '    function sweep(address _token) external;\n', '}\n', '\n', '// File: contracts/StrategyERC20_V3.sol\n', '\n', '/*\n', 'Changes\n', '- remove functions related to slippage and delta\n', '- add keeper\n', '- remove _increaseDebt\n', '- remove _decreaseDebt\n', '*/\n', '\n', '// used inside harvest\n', '\n', 'abstract contract StrategyERC20_V3 is IStrategyERC20_V3 {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    address public override admin;\n', '    address public override controller;\n', '    address public immutable override vault;\n', '    address public immutable override underlying;\n', '    // some functions specific to strategy cannot be called by controller\n', '    // so we introduce a new role\n', '    address public keeper;\n', '\n', '    // total amount of underlying transferred from vault\n', '    uint public override totalDebt;\n', '\n', '    // performance fee sent to treasury when harvest() generates profit\n', '    uint public performanceFee = 500;\n', '    uint private constant PERFORMANCE_FEE_CAP = 2000; // upper limit to performance fee\n', '    uint internal constant PERFORMANCE_FEE_MAX = 10000;\n', '\n', '    // Force exit, in case normal exit fails\n', '    bool public forceExit;\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _underlying,\n', '        address _keeper\n', '    ) public {\n', '        require(_controller != address(0), "controller = zero address");\n', '        require(_vault != address(0), "vault = zero address");\n', '        require(_underlying != address(0), "underlying = zero address");\n', '        require(_keeper != address(0), "keeper = zero address");\n', '\n', '        admin = msg.sender;\n', '        controller = _controller;\n', '        vault = _vault;\n', '        underlying = _underlying;\n', '        keeper = _keeper;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "!admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            msg.sender == admin ||\n', '                msg.sender == controller ||\n', '                msg.sender == vault ||\n', '                msg.sender == keeper,\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _admin) external onlyAdmin {\n', '        require(_admin != address(0), "admin = zero address");\n', '        admin = _admin;\n', '    }\n', '\n', '    function setController(address _controller) external onlyAdmin {\n', '        require(_controller != address(0), "controller = zero address");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setKeeper(address _keeper) external onlyAdmin {\n', '        require(_keeper != address(0), "keeper = zero address");\n', '        keeper = _keeper;\n', '    }\n', '\n', '    function setPerformanceFee(uint _fee) external onlyAdmin {\n', '        require(_fee <= PERFORMANCE_FEE_CAP, "performance fee > cap");\n', '        performanceFee = _fee;\n', '    }\n', '\n', '    function setForceExit(bool _forceExit) external onlyAdmin {\n', '        forceExit = _forceExit;\n', '    }\n', '\n', '    function totalAssets() external view virtual override returns (uint);\n', '\n', '    function deposit(uint) external virtual override;\n', '\n', '    function withdraw(uint) external virtual override;\n', '\n', '    function withdrawAll() external virtual override;\n', '\n', '    function harvest() external virtual override;\n', '\n', '    function skim() external virtual override;\n', '\n', '    function exit() external virtual override;\n', '\n', '    function sweep(address) external virtual override;\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/Uniswap.sol\n', '\n', 'interface Uniswap {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/compound/CErc20.sol\n', '\n', 'interface CErc20 {\n', '    function mint(uint mintAmount) external returns (uint);\n', '\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '\n', '    function borrow(uint borrowAmount) external returns (uint);\n', '\n', '    function repayBorrow(uint repayAmount) external returns (uint);\n', '\n', '    function redeem(uint) external returns (uint);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint);\n', '\n', '    function balanceOfUnderlying(address account) external returns (uint);\n', '\n', '    function getAccountSnapshot(address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint,\n', '            uint,\n', '            uint,\n', '            uint\n', '        );\n', '}\n', '\n', '// File: contracts/interfaces/compound/Comptroller.sol\n', '\n', 'interface Comptroller {\n', '    function markets(address cToken)\n', '        external\n', '        view\n', '        returns (\n', '            bool,\n', '            uint,\n', '            bool\n', '        );\n', '\n', '    // Claim all the COMP accrued by holder in all markets\n', '    function claimComp(address holder) external;\n', '\n', '    // TODO: use this to save gas?\n', '    // Claim all the COMP accrued by holder in specific markets\n', '    function claimComp(address holder, address[] calldata cTokens) external;\n', '}\n', '\n', '// File: contracts/strategies/StrategyCompLev.sol\n', '\n', '/*\n', 'APY estimate\n', '\n', 'c = collateral ratio\n', 'i_s = supply interest rate (APY)\n', 'i_b = borrow interest rate (APY)\n', 'c_s = supply COMP reward (APY)\n', 'c_b = borrow COMP reward (APY)\n', '\n', 'leverage APY = 1 / (1 - c) * (i_s + c_s - c * (i_b - c_b))\n', '\n', 'plugging some numbers\n', '31.08 = 4 * (7.01 + 4 - 0.75 * (9.08 - 4.76))\n', '*/\n', '\n', '/*\n', 'State transitions and valid transactions\n', '\n', '### State ###\n', 'buff = buffer\n', 's = supplied\n', 'b = borrowed\n', '\n', '### Transactions ###\n', 'dl = deleverage\n', 'l = leverage\n', 'w = withdraw\n', 'd = deposit\n', 's(x) = set butter to x\n', '\n', '### State Transitions ###\n', '\n', '                             s(max)\n', '(buf = max, s > 0, b > 0) <--------- (buf = min, s > 0, b > 0)\n', '          |                               |        ^\n', '          | dl, w                         | dl, w  | l, d\n', '          |                               |        |\n', '          V                               V        | \n', '(buf = max, s > 0, b = 0) ---------> (buf = min, s > 0, b = 0)\n', '                             s(min)\n', '*/\n', '\n', 'contract StrategyCompLev is StrategyERC20_V3 {\n', '    event Deposit(uint amount);\n', '    event Withdraw(uint amount);\n', '    event Harvest(uint profit);\n', '    event Skim(uint profit);\n', '\n', '    // Uniswap //\n', '    address private constant UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // Compound //\n', '    address private constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n', '    address private constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n', '    address private immutable cToken;\n', '\n', '    // buffer to stay below market collateral ratio, scaled up by 1e18\n', '    uint public buffer = 0.04 * 1e18;\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _underlying,\n', '        address _cToken,\n', '        address _keeper\n', '    ) public StrategyERC20_V3(_controller, _vault, _underlying, _keeper) {\n', '        require(_cToken != address(0), "cToken = zero address");\n', '        cToken = _cToken;\n', '\n', '        IERC20(_underlying).safeApprove(_cToken, type(uint).max);\n', '\n', '        // These tokens are never held by this contract\n', '        // so the risk of them getting stolen is minimal\n', '        IERC20(COMP).safeApprove(UNISWAP, type(uint).max);\n', '    }\n', '\n', '    function _increaseDebt(uint _amount) private returns (uint) {\n', '        uint balBefore = IERC20(underlying).balanceOf(address(this));\n', '        IERC20(underlying).safeTransferFrom(vault, address(this), _amount);\n', '        uint balAfter = IERC20(underlying).balanceOf(address(this));\n', '\n', '        uint diff = balAfter.sub(balBefore);\n', '        totalDebt = totalDebt.add(diff);\n', '\n', '        return diff;\n', '    }\n', '\n', '    function _decreaseDebt(uint _amount) private returns (uint) {\n', '        uint balBefore = IERC20(underlying).balanceOf(address(this));\n', '        IERC20(underlying).safeTransfer(vault, _amount);\n', '        uint balAfter = IERC20(underlying).balanceOf(address(this));\n', '\n', '        uint diff = balBefore.sub(balAfter);\n', '        if (diff >= totalDebt) {\n', '            totalDebt = 0;\n', '        } else {\n', '            totalDebt -= diff;\n', '        }\n', '\n', '        return diff;\n', '    }\n', '\n', '    function _totalAssets() private view returns (uint) {\n', '        // WARNING: This returns balance last time someone transacted with cToken\n', '        (uint error, uint cTokenBal, uint borrowed, uint exchangeRate) =\n', '            CErc20(cToken).getAccountSnapshot(address(this));\n', '\n', '        if (error > 0) {\n', '            // something is wrong, return 0\n', '            return 0;\n', '        }\n', '\n', '        uint supplied = cTokenBal.mul(exchangeRate) / 1e18;\n', '        if (supplied < borrowed) {\n', '            // something is wrong, return 0\n', '            return 0;\n', '        }\n', '\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        // supplied >= borrowed\n', '        return bal.add(supplied - borrowed);\n', '    }\n', '\n', '    /*\n', '    @notice Returns amount of underlying tokens locked in this contract\n', '    */\n', '    function totalAssets() external view override returns (uint) {\n', '        return _totalAssets();\n', '    }\n', '\n', '    /*\n', '    @dev buffer = 0 means safe collateral ratio = market collateral ratio\n', '         buffer = 1e18 means safe collateral ratio = 0\n', '    */\n', '    function setBuffer(uint _buffer) external onlyAuthorized {\n', '        require(_buffer > 0 && _buffer <= 1e18, "buffer");\n', '        buffer = _buffer;\n', '    }\n', '\n', '    function _getMarketCollateralRatio() private view returns (uint) {\n', '        /*\n', '        This can be changed by Compound Governance, with a minimum waiting\n', '        period of five days\n', '        */\n', '        (, uint col, ) = Comptroller(COMPTROLLER).markets(cToken);\n', '        return col;\n', '    }\n', '\n', '    function _getSafeCollateralRatio(uint _marketCol) private view returns (uint) {\n', '        if (_marketCol > buffer) {\n', '            return _marketCol - buffer;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    // Not view function\n', '    function _getSupplied() private returns (uint) {\n', '        return CErc20(cToken).balanceOfUnderlying(address(this));\n', '    }\n', '\n', '    // Not view function\n', '    function _getBorrowed() private returns (uint) {\n', '        return CErc20(cToken).borrowBalanceCurrent(address(this));\n', '    }\n', '\n', '    // Not view function. Call using static call from web3\n', '    function getLivePosition()\n', '        external\n', '        returns (\n', '            uint supplied,\n', '            uint borrowed,\n', '            uint marketCol,\n', '            uint safeCol\n', '        )\n', '    {\n', '        supplied = _getSupplied();\n', '        borrowed = _getBorrowed();\n', '        marketCol = _getMarketCollateralRatio();\n', '        safeCol = _getSafeCollateralRatio(marketCol);\n', '    }\n', '\n', '    // @dev This returns balance last time someone transacted with cToken\n', '    function getCachedPosition()\n', '        external\n', '        view\n', '        returns (\n', '            uint supplied,\n', '            uint borrowed,\n', '            uint marketCol,\n', '            uint safeCol\n', '        )\n', '    {\n', '        // ignore first output, which is error code\n', '        (, uint cTokenBal, uint _borrowed, uint exchangeRate) =\n', '            CErc20(cToken).getAccountSnapshot(address(this));\n', '\n', '        supplied = cTokenBal.mul(exchangeRate) / 1e18;\n', '        borrowed = _borrowed;\n', '        marketCol = _getMarketCollateralRatio();\n', '        safeCol = _getSafeCollateralRatio(marketCol);\n', '    }\n', '\n', '    // @dev This modifier checks collateral ratio after leverage or deleverage\n', '    modifier checkCollateralRatio() {\n', '        _;\n', '        uint supplied = _getSupplied();\n', '        uint borrowed = _getBorrowed();\n', '        uint marketCol = _getMarketCollateralRatio();\n', '        uint safeCol = _getSafeCollateralRatio(marketCol);\n', '\n', '        // borrowed / supplied <= safe col\n', '        // supplied can = 0 so we check borrowed <= supplied * safe col\n', '        // max borrow\n', '        uint max = supplied.mul(safeCol) / 1e18;\n', '        require(borrowed <= max, "borrowed > max");\n', '    }\n', '\n', '    function _supply(uint _amount) private {\n', '        require(CErc20(cToken).mint(_amount) == 0, "mint");\n', '    }\n', '\n', '    // @dev Execute manual recovery by admin\n', '    // @dev `_amount` must be >= balance of underlying\n', '    function supply(uint _amount) external onlyAdmin {\n', '        _supply(_amount);\n', '    }\n', '\n', '    function _borrow(uint _amount) private {\n', '        require(CErc20(cToken).borrow(_amount) == 0, "borrow");\n', '    }\n', '\n', '    // @dev Execute manual recovery by admin\n', '    function borrow(uint _amount) external onlyAdmin {\n', '        _borrow(_amount);\n', '    }\n', '\n', '    function _repay(uint _amount) private {\n', '        require(CErc20(cToken).repayBorrow(_amount) == 0, "repay");\n', '    }\n', '\n', '    // @dev Execute manual recovery by admin\n', '    // @dev `_amount` must be >= balance of underlying\n', '    function repay(uint _amount) external onlyAdmin {\n', '        _repay(_amount);\n', '    }\n', '\n', '    function _redeem(uint _amount) private {\n', '        require(CErc20(cToken).redeemUnderlying(_amount) == 0, "redeem");\n', '    }\n', '\n', '    // @dev Execute manual recovery by admin\n', '    function redeem(uint _amount) external onlyAdmin {\n', '        _redeem(_amount);\n', '    }\n', '\n', '    function _getMaxLeverageRatio(uint _col) private pure returns (uint) {\n', '        /*\n', '        c = collateral ratio\n', '\n', '        geometric series converges to\n', '            1 / (1 - c)\n', '        */\n', '        // multiplied by 1e18\n', '        return uint(1e36).div(uint(1e18).sub(_col));\n', '    }\n', '\n', '    function _getBorrowAmount(\n', '        uint _supplied,\n', '        uint _borrowed,\n', '        uint _col\n', '    ) private pure returns (uint) {\n', '        /*\n', '        c = collateral ratio\n', '        s = supplied\n', '        b = borrowed\n', '        x = amount to borrow\n', '\n', '        (b + x) / s <= c\n', '        becomes\n', '        x <= sc - b\n', '        */\n', '        // max borrow\n', '        uint max = _supplied.mul(_col) / 1e18;\n', '        if (_borrowed >= max) {\n', '            return 0;\n', '        }\n', '        return max - _borrowed;\n', '    }\n', '\n', '    /*\n', '    Find total supply S_n after n iterations starting with\n', '    S_0 supplied and B_0 borrowed\n', '\n', '    c = collateral ratio\n', '    S_i = supplied after i iterations\n', '    B_i = borrowed after i iterations\n', '\n', '    S_0 = current supplied\n', '    B_0 = current borrowed\n', '\n', '    borrowed and supplied after n iterations\n', '        B_n = cS_(n-1)\n', '        S_n = S_(n-1) + (cS_(n-1) - B_(n-1))\n', '\n', '    you can prove using algebra and induction that\n', '        B_n / S_n <= c\n', '\n', '        S_n - S_(n-1) = c^(n-1) * (cS_0 - B_0)\n', '\n', '        S_n = S_0 + sum (c^i * (cS_0 - B_0)), 0 <= i <= n - 1\n', '            = S_0 + (1 - c^n) / (1 - c)\n', '\n', '        S_n <= S_0 + (cS_0 - B_0) / (1 - c)\n', '    */\n', '    function _leverage(uint _targetSupply) private checkCollateralRatio {\n', '        // buffer = 1e18 means safe collateral ratio = 0\n', '        if (buffer >= 1e18) {\n', '            return;\n', '        }\n', '\n', '        uint supplied = _getSupplied();\n', '        uint borrowed = _getBorrowed();\n', '        uint unleveraged = supplied.sub(borrowed); // supply with 0 leverage\n', '        require(_targetSupply >= unleveraged, "leverage");\n', '\n', '        uint marketCol = _getMarketCollateralRatio();\n', '        uint safeCol = _getSafeCollateralRatio(marketCol);\n', '        uint lev = _getMaxLeverageRatio(safeCol);\n', '        // 99% to be safe, and save gas\n', '        uint max = (unleveraged.mul(lev) / 1e18).mul(9900) / 10000;\n', '        if (_targetSupply >= max) {\n', '            _targetSupply = max;\n', '        }\n', '\n', '        uint i;\n', '        while (supplied < _targetSupply) {\n', '            // target is usually reached in 9 iterations\n', '            require(i < 25, "max iteration");\n', '\n', '            // use market collateral to calculate borrow amount\n', '            // this is done so that supplied can reach _targetSupply\n', '            // 99.99% is borrowed to be safe\n', '            uint borrowAmount =\n', '                _getBorrowAmount(supplied, borrowed, marketCol).mul(9999) / 10000;\n', '            require(borrowAmount > 0, "borrow = 0");\n', '\n', '            if (supplied.add(borrowAmount) > _targetSupply) {\n', '                // borrow > 0 since supplied < _targetSupply\n', '                borrowAmount = _targetSupply.sub(supplied);\n', '            }\n', '            _borrow(borrowAmount);\n', '            // end loop with _supply, this ensures no borrowed amount is unutilized\n', '            _supply(borrowAmount);\n', '\n', '            // supplied > _getSupplied(), by about 3 * 1e12 %, but we use local variable to save gas\n', '            supplied = supplied.add(borrowAmount);\n', '            // _getBorrowed == borrowed\n', '            borrowed = borrowed.add(borrowAmount);\n', '            i++;\n', '        }\n', '    }\n', '\n', '    function leverage(uint _targetSupply) external onlyAuthorized {\n', '        _leverage(_targetSupply);\n', '    }\n', '\n', '    function _deposit() private {\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            _supply(bal);\n', '            // leverage to max\n', '            _leverage(type(uint).max);\n', '        }\n', '    }\n', '\n', '    /*\n', '    @notice Deposit underlying token into this strategy\n', '    @param _amount Amount of underlying token to deposit\n', '    */\n', '    function deposit(uint _amount) external override onlyAuthorized {\n', '        require(_amount > 0, "deposit = 0");\n', '\n', '        uint diff = _increaseDebt(_amount);\n', '        _deposit();\n', '\n', '        emit Deposit(diff);\n', '    }\n', '\n', '    function _getRedeemAmount(\n', '        uint _supplied,\n', '        uint _borrowed,\n', '        uint _col\n', '    ) private pure returns (uint) {\n', '        /*\n', '        c = collateral ratio\n', '        s = supplied\n', '        b = borrowed\n', '        r = redeem\n', '\n', '        b / (s - r) <= c\n', '        becomes\n', '        r <= s - b / c\n', '        */\n', '        // min supply\n', '        // b / c = min supply needed to borrow b\n', '        uint min = _borrowed.mul(1e18).div(_col);\n', '\n', '        if (_supplied <= min) {\n', '            return 0;\n', '        }\n', '        return _supplied - min;\n', '    }\n', '\n', '    /*\n', '    Find S_0, amount of supply with 0 leverage, after n iterations starting with\n', '    S_n supplied and B_n borrowed\n', '\n', '    c = collateral ratio\n', '    S_n = current supplied\n', '    B_n = current borrowed\n', '\n', '    S_(n-i) = supplied after i iterations\n', '    B_(n-i) = borrowed after i iterations\n', '    R_(n-i) = Redeemable after i iterations\n', '        = S_(n-i) - B_(n-i) / c\n', '        where B_(n-i) / c = min supply needed to borrow B_(n-i)\n', '\n', '    For 0 <= k <= n - 1\n', '        S_k = S_(k+1) - R_(k+1)\n', '        B_k = B_(k+1) - R_(k+1)\n', '    and\n', '        S_k - B_k = S_(k+1) - B_(k+1)\n', '    so\n', '        S_0 - B_0 = S_1 - S_2 = ... = S_n - B_n\n', '\n', '    S_0 has 0 leverage so B_0 = 0 and we get\n', '        S_0 = S_0 - B_0 = S_n - B_n\n', '    ------------------------------------------\n', '\n', '    Find S_(n-k), amount of supply, after k iterations starting with\n', '    S_n supplied and B_n borrowed\n', '\n', '    with algebra and induction you can derive that\n', '\n', '    R_(n-k) = R_n / c^k\n', '    S_(n-k) = S_n - sum R_(n-i), 0 <= i <= k - 1\n', '            = S_n - R_n * ((1 - 1/c^k) / (1 - 1/c))\n', '\n', '    Equation above is valid for S_(n - k) k < n\n', '    */\n', '    function _deleverage(uint _targetSupply) private checkCollateralRatio {\n', '        uint supplied = _getSupplied();\n', '        uint borrowed = _getBorrowed();\n', '        uint unleveraged = supplied.sub(borrowed);\n', '        require(_targetSupply <= supplied, "deleverage");\n', '\n', '        uint marketCol = _getMarketCollateralRatio();\n', '\n', '        // min supply\n', '        if (_targetSupply <= unleveraged) {\n', '            _targetSupply = unleveraged;\n', '        }\n', '\n', '        uint i;\n', '        while (supplied > _targetSupply) {\n', '            // target is usually reached in 8 iterations\n', '            require(i < 25, "max iteration");\n', '\n', '            // 99.99% to be safe\n', '            uint redeemAmount =\n', '                (_getRedeemAmount(supplied, borrowed, marketCol)).mul(9999) / 10000;\n', '            require(redeemAmount > 0, "redeem = 0");\n', '\n', '            if (supplied.sub(redeemAmount) < _targetSupply) {\n', '                // redeem > 0 since supplied > _targetSupply\n', '                redeemAmount = supplied.sub(_targetSupply);\n', '            }\n', '            _redeem(redeemAmount);\n', '            _repay(redeemAmount);\n', '\n', '            // supplied < _geSupplied(), by about 7 * 1e12 %\n', '            supplied = supplied.sub(redeemAmount);\n', '            // borrowed == _getBorrowed()\n', '            borrowed = borrowed.sub(redeemAmount);\n', '            i++;\n', '        }\n', '    }\n', '\n', '    function deleverage(uint _targetSupply) external onlyAuthorized {\n', '        _deleverage(_targetSupply);\n', '    }\n', '\n', '    // @dev Returns amount available for transfer\n', '    function _withdraw(uint _amount) private returns (uint) {\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        if (bal >= _amount) {\n', '            return _amount;\n', '        }\n', '\n', '        uint redeemAmount = _amount - bal;\n', '        /*\n', '        c = collateral ratio\n', '        s = supplied\n', '        b = borrowed\n', '        r = amount to redeem\n', '        x = amount to repay\n', '\n', '        where\n', "            r <= s - b (can't redeem more than unleveraged supply)\n", '        and\n', "            x <= b (can't repay more than borrowed)\n", '        and\n', '            (b - x) / (s - x - r) <= c (stay below c after redeem and repay)\n', '\n', '        so pick x such that\n', '            (b - cs + cr) / (1 - c) <= x <= b\n', '\n', '        when b <= cs left side of equation above <= cr / (1 - c) so pick x such that\n', '            cr / (1 - c) <= x <= b\n', '        */\n', '        uint supplied = _getSupplied();\n', '        uint borrowed = _getBorrowed();\n', '        uint marketCol = _getMarketCollateralRatio();\n', '        uint safeCol = _getSafeCollateralRatio(marketCol);\n', '        uint unleveraged = supplied.sub(borrowed);\n', '\n', '        // r <= s - b\n', '        if (redeemAmount > unleveraged) {\n', '            redeemAmount = unleveraged;\n', '        }\n', '        // cr / (1 - c) <= x <= b\n', '        uint repayAmount = redeemAmount.mul(safeCol).div(uint(1e18).sub(safeCol));\n', '        if (repayAmount > borrowed) {\n', '            repayAmount = borrowed;\n', '        }\n', '\n', '        _deleverage(supplied.sub(repayAmount));\n', '        _redeem(redeemAmount);\n', '\n', '        uint balAfter = IERC20(underlying).balanceOf(address(this));\n', '        if (balAfter < _amount) {\n', '            return balAfter;\n', '        }\n', '        return _amount;\n', '    }\n', '\n', '    /*\n', '    @notice Withdraw undelying token to vault\n', '    @param _amount Amount of underlying token to withdraw\n', '    @dev Caller should implement guard against slippage\n', '    */\n', '    function withdraw(uint _amount) external override onlyAuthorized {\n', '        require(_amount > 0, "withdraw = 0");\n', '        // available <= _amount\n', '        uint available = _withdraw(_amount);\n', '        uint diff;\n', '        if (available > 0) {\n', '            diff = _decreaseDebt(available);\n', '        }\n', '\n', '        emit Withdraw(diff);\n', '    }\n', '\n', '    // @dev withdraw all creates dust in supplied\n', '    function _withdrawAll() private {\n', '        _withdraw(type(uint).max);\n', '\n', '        // In case there is dust, re-calculate balance\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            IERC20(underlying).safeTransfer(vault, bal);\n', '            totalDebt = 0;\n', '        }\n', '\n', '        emit Withdraw(bal);\n', '    }\n', '\n', '    /*\n', '    @notice Withdraw all underlying to vault\n', '    @dev Caller should implement guard agains slippage\n', '    */\n', '    function withdrawAll() external override onlyAuthorized {\n', '        _withdrawAll();\n', '    }\n', '\n', '    /*\n', '    @dev Uniswap fails with zero address so no check is necessary here\n', '    */\n', '    function _swap(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) private {\n', '        // create dynamic array with 3 elements\n', '        address[] memory path = new address[](3);\n', '        path[0] = _from;\n', '        path[1] = WETH;\n', '        path[2] = _to;\n', '\n', '        Uniswap(UNISWAP).swapExactTokensForTokens(\n', '            _amount,\n', '            1,\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function _claimRewards() private {\n', '        // claim COMP\n', '        address[] memory cTokens = new address[](1);\n', '        cTokens[0] = cToken;\n', '        Comptroller(COMPTROLLER).claimComp(address(this), cTokens);\n', '\n', '        uint compBal = IERC20(COMP).balanceOf(address(this));\n', '        if (compBal > 0) {\n', '            _swap(COMP, underlying, compBal);\n', '            // Now this contract has underlying token\n', '        }\n', '    }\n', '\n', '    /*\n', '    @notice Claim and sell any rewards\n', '    */\n', '    function harvest() external override onlyAuthorized {\n', '        _claimRewards();\n', '\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            // transfer fee to treasury\n', '            uint fee = bal.mul(performanceFee) / PERFORMANCE_FEE_MAX;\n', '            if (fee > 0) {\n', '                address treasury = IController(controller).treasury();\n', '                require(treasury != address(0), "treasury = zero address");\n', '\n', '                IERC20(underlying).safeTransfer(treasury, fee);\n', '            }\n', '            // _supply() to decrease collateral ratio and earn interest\n', '            // use _supply() instead of _deposit() to save gas\n', '            uint profit = bal.sub(fee);\n', '            _supply(profit);\n', '\n', '            emit Harvest(profit);\n', '        }\n', '    }\n', '\n', '    /*\n', '    @notice Increase total debt if profit > 0\n', '    */\n', '    function skim() external override onlyAuthorized {\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        uint supplied = _getSupplied();\n', '        uint borrowed = _getBorrowed();\n', '        uint unleveraged = supplied.sub(borrowed);\n', '        uint total = bal.add(unleveraged);\n', '        require(total > totalDebt, "total <= debt");\n', '\n', '        uint profit = total - totalDebt;\n', '\n', '        // Incrementing totalDebt has the same effect as transferring profit\n', '        // back to vault and then depositing into this strategy\n', '        // Here we simply increment totalDebt to save gas\n', '        totalDebt = total;\n', '\n', '        emit Skim(profit);\n', '    }\n', '\n', '    /*\n', '    @notice Exit from strategy, transfer all underlying tokens back to vault\n', '            unless forceExit = true\n', '    */\n', '    function exit() external override onlyAuthorized {\n', '        if (forceExit) {\n', '            return;\n', '        }\n', '        _claimRewards();\n', '        _withdrawAll();\n', '    }\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here to admin\n', '    @param _token Address of token to transfer\n', '    */\n', '    function sweep(address _token) external override onlyAdmin {\n', '        require(_token != underlying, "protected token");\n', '        require(_token != cToken, "protected token");\n', '        require(_token != COMP, "protected token");\n', '        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/StrategyCompLevUsdc.sol\n', '\n', 'contract StrategyCompLevUsdc is StrategyCompLev {\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _cToken,\n', '        address _keeper\n', '    )\n', '        public\n', '        StrategyCompLev(\n', '            _controller,\n', '            _vault,\n', '            // USDC\n', '            0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\n', '            // CUSDC\n', '            _cToken,\n', '            _keeper\n', '        )\n', '    {}\n', '}']