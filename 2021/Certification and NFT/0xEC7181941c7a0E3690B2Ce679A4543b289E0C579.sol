['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./AllDepsMerged.sol";\n', '\n', 'contract CryptoTyans is WhitelistedERC721, Ownable {\n', '    using Math for uint256;\n', '\n', '    string public constant provenance =\n', '        "5ddee3a9170ab6edcd5c2947c42c5dc01599d1cb11a831e642736482813ca772";\n', '    bytes32 public immutable baseUriHash;\n', '    uint256 public constant maxSupply = 19800;\n', '    uint256 private constant presaleDuration = 14 * 86400;\n', '\n', '    address payable private _payoutAddress;\n', '    string private _baseUri;\n', '    uint256 private _tokenNum = 0;\n', '    uint256 private _presaleFinishedAt = 0;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        string memory presaleUri,\n', '        bytes32 futureUriHash,\n', '        address payoutAddress,\n', '        address proxyAddress\n', '    ) WhitelistedERC721(name, symbol, proxyAddress) {\n', '        bytes32 presaleUriHash = keccak256(bytes(presaleUri));\n', '        require(\n', '            presaleUriHash != futureUriHash,\n', '            "presaleUriHash must not match baseUriHash"\n', '        );\n', '\n', '        _baseUri = presaleUri;\n', '        baseUriHash = futureUriHash;\n', '        _payoutAddress = payable(payoutAddress);\n', '    }\n', '\n', '    modifier finishedPresale() {\n', '        require(\n', '            totalSupply() >= maxSupply ||\n', '                (_presaleFinishedAt != 0 &&\n', '                    block.timestamp > _presaleFinishedAt),\n', '            "Presale is not finished yet"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function getSalesStartedAt() external view returns (uint256) {\n', '        require(_presaleFinishedAt != 0, "Sales not yet defined");\n', '        return _presaleFinishedAt - presaleDuration;\n', '    }\n', '\n', '    function isSalesStartedAt(uint256 timestamp) public view returns (bool) {\n', '        return\n', '            _presaleFinishedAt != 0 &&\n', '            timestamp > _presaleFinishedAt - presaleDuration;\n', '    }\n', '\n', '    function startSales(uint256 presaleStartAt) public onlyOwner {\n', '        require(_presaleFinishedAt == 0, "Sales are started already");\n', '        _presaleFinishedAt = presaleStartAt + presaleDuration;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _tokenNum;\n', '    }\n', '\n', '    function _baseURI() internal view virtual override returns (string memory) {\n', '        return _baseUri;\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, tokenId);\n', '        if (from == address(0)) _tokenNum += 1;\n', '        else if (to == address(0)) _tokenNum -= 1;\n', '    }\n', '\n', '    function getPrice() public pure returns (uint256) {\n', '        return 50000000000000000; // 0.05ETH;\n', '    }\n', '\n', '    function mint(uint256 num) external payable {\n', '        if (msg.value == 0 && owner() == msg.sender) {\n', '            _mintWrapper(num);\n', '        } else {\n', '            require(\n', '                isSalesStartedAt(block.timestamp),\n', '                "Sales are not started yet"\n', '            );\n', '            require(getPrice() * num == msg.value, "Value sent is incorrect");\n', '            _mintWrapper(num);\n', '        }\n', '    }\n', '\n', '    function _mintWrapper(uint256 num) internal {\n', '        require(num > 0 && num <= 20, "Num is not in 1-20 range");\n', '        require(totalSupply() + num <= maxSupply, "Can\'t mint above maxSupply");\n', '        for (uint256 i = 0; i < num; i++) {\n', '            _safeMint(msg.sender, totalSupply() + 1);\n', '        }\n', '    }\n', '\n', '    function metadataRevealed() external view returns (bool) {\n', '        bytes32 _curUriHash = keccak256(bytes(_baseUri));\n', '        return _curUriHash == baseUriHash;\n', '    }\n', '\n', '    function revealMetadata(string memory baseUri)\n', '        external\n', '        onlyOwner\n', '        finishedPresale\n', '    {\n', '        bytes32 uriHash = keccak256(bytes(baseUri));\n', '        require(uriHash == baseUriHash, "Can\'t accept wrong URI");\n', '        _baseUri = baseUri;\n', '    }\n', '\n', '    function changePayoutAddress(address newPayoutAddress) external onlyOwner {\n', '        _payoutAddress = payable(newPayoutAddress);\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        uint256 contractBalance = address(this).balance;\n', '        require(contractBalance > 0);\n', '        _payoutAddress.transfer(contractBalance);\n', '    }\n', '}']