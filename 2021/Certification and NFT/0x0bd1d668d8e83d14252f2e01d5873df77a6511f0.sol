['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-26\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-12-03\n', '*/\n', '\n', 'pragma solidity >=0.6.8;\n', '\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n', ' * (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// \n', 'interface IMMStrategyHarvestKp3r {\n', '    event Keep3rSet(address keep3r);\n', '    event Keep3rHelperSet(address keep3rHelper);\n', '    event SlidingOracleSet(address slidingOracle);\n', '\n', '    // Actions by Keeper\n', '    event HarvestedByKeeper(address _strategy);\n', '\t\n', '    // Harvestable check\n', '    event HarvestableCheck(address _strategy, uint256 profitTokenAmount, uint256 profitFactor, uint256 profitInEther, uint256 ethCallCost);\n', '\n', '    // Setters\n', '    function setKeep3r(address _keep3r) external;\n', '\n', '    function setKeep3rHelper(address _keep3rHelper) external;\n', '\n', '    function setSlidingOracle(address _slidingOracle) external;\n', '\n', '    function setSushiSlidingOracle(address _sushiSlidingOracle) external;\n', '\t\n', '    function setMinHarvestInterval(uint256 _interval) external;\n', '\t\n', '    function setProfitFactor(uint256 _profitFactor) external;\n', '\n', '    // Getters\n', '    function getStrategies() external view returns (address[] memory);\n', '    function getCollateralizedStrategies() external view returns (address[] memory);\n', '    function getVaults() external view returns (address[] memory);\n', '\n', '    // psuedo view method, please use something similar to below tool to query\n', '    // https://docs.ethers.io/v5/api/contract/contract/#contract-callStatic \n', '    function harvestable(address _strategy) external returns (bool);\n', '\n', '    // harvest actions for Keep3r\n', '    function harvest(address _strategy) external;\n', '    \n', '    // earn() actions for Keep3r\n', '    function earnable(address _strategy) external view returns (bool);\n', '    function earn(address _strategy) external;\n', '    \n', '    // keepMinRatio() actions for Keep3r\n', '    function keepMinRatioMayday(address _strategy) external view returns (bool);\n', '    function keepMinRatio(address _strategy) external;\n', '\n', '    // Name of the Keep3r\n', '    function name() external pure returns (string memory);\n', '\n', '    event HarvestStrategyAdded(address _vault, address _strategy, uint256 _requiredHarvest, bool _requiredKeepMinRatio, bool _requiredLeverageToMax, address yieldToken, uint256 yieldTokenOracle);\n', '\n', '    event EarnVaultAdded(address _vault, uint256 _requiredEarnBalance);\n', '\n', '    event HarvestStrategyModified(address _strategy, uint256 _requiredHarvest);\n', '\n', '    event EarnVaultModified(address _vault, uint256 _requiredEarnBalance);\n', '\n', '    event HarvestStrategyRemoved(address _strategy);\n', '\n', '    event EarnVaultRemoved(address _vault);\n', '\n', '    // Modifiers\n', '    function addStrategy(address _vault, address _strategy, uint256 _requiredHarvest, bool _requiredKeepMinRatio, bool _requiredLeverageToMax, address yieldToken, uint256 yieldTokenOracle) external;\n', '    \n', '    function addVault(address _vault, uint256 _requiredEarnBalance) external;\n', '\n', '    function updateRequiredHarvestAmount(address _strategy, uint256 _requiredHarvest) external;\n', '    \n', '    function updateYieldTokenOracle(address _strategy, uint256 _yieldTokenOracle) external;\n', '    \n', '    function updateRequiredEarn(address _vault, uint256 _requiredEarnBalance) external;\n', '\n', '    function removeHarvestStrategy(address _strategy) external;\n', '\n', '    function removeEarnVault(address _vault) external;\n', '\n', '}\n', '\n', '// \n', 'interface IKeep3rV1 {\n', '    function KPRH() external returns (address);\n', '\n', '    function name() external returns (string memory);\n', '\n', '    function isKeeper(address) external returns (bool);\n', '\n', '    function worked(address keeper) external;\n', '\n', '    function addKPRCredit(address job, uint256 amount) external;\n', '\n', '    function addJob(address job) external;\n', '}\n', '\n', '// \n', 'abstract contract Keep3r {\n', '    IKeep3rV1 public keep3r;\n', '\n', '    constructor(address _keep3r) public {\n', '        _setKeep3r(_keep3r);\n', '    }\n', '\n', '    function _setKeep3r(address _keep3r) internal {\n', '        keep3r = IKeep3rV1(_keep3r);\n', '    }\n', '\n', '    function _isKeeper() internal {\n', '        require(tx.origin == msg.sender, "keep3r::isKeeper:keeper-is-a-smart-contract");\n', '        require(keep3r.isKeeper(msg.sender), "keep3r::isKeeper:keeper-is-not-registered");\n', '    }\n', '\n', '    // Only checks if caller is a valid keeper, payment should be handled manually\n', '    modifier onlyKeeper() {\n', '        _isKeeper();\n', '        _;\n', '    }\n', '\n', '    // Checks if caller is a valid keeper, handles default payment after execution\n', '    modifier paysKeeper() {\n', '        _isKeeper();\n', '        _;\n', '        keep3r.worked(msg.sender);\n', '    }\n', '}\n', '\n', '// \n', 'interface IKeep3rV1Helper {\n', '    function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\n', '}\n', '\n', '// \n', 'interface IUniswapV2SlidingOracle {\n', '    function current(\n', '        address tokenIn,\n', '        uint256 amountIn,\n', '        address tokenOut\n', '    ) external view returns (uint256);\n', '    \n', '    function pairs() external view returns (address[] memory);\n', '}\n', '\n', '// \n', 'interface IStrategy {\n', '    function rewards() external view returns (address);\n', '\n', '    function gauge() external view returns (address);\n', '\n', '    function want() external view returns (address);\n', '\n', '    function timelock() external view returns (address);\n', '\n', '    function deposit() external;\n', '\n', '    function withdraw(address) external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function skim() external;\n', '\n', '    function withdrawAll() external returns (uint256);\n', '\n', '    function balanceOf() external view returns (uint256);\n', '\n', '    function harvest() external;\n', '\n', '    function setTimelock(address) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function execute(address _target, bytes calldata _data)\n', '        external\n', '        payable\n', '        returns (bytes memory response);\n', '\n', '    function execute(bytes calldata _data)\n', '        external\n', '        payable\n', '        returns (bytes memory response);\n', '}\n', '\n', '// \n', 'interface ICrvStrategy is IStrategy {\n', '    function getHarvestable() external returns (uint256);\n', '}\n', '\n', '// \n', 'interface ICompStrategy is IStrategy {\n', '    function getCompAccrued() external returns (uint256);\n', '}\n', '\n', 'interface ICollateralizedStrategy is IStrategy {\n', '    function keepMinRatio() external;\n', '    function currentRatio() external view returns (uint256);\n', '    function minRatio() external view returns (uint256);\n', '    function setMinRatio(uint256 _minRatio) external;\n', '}\n', '\n', 'interface ILeveragedStrategy is IStrategy {\n', '    function leverageToMax() external;\n', '}\n', '\n', 'interface IVault {\n', '    function earn() external;\n', '    function token() external view returns (address);\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface MMController {\n', '    function vaults(address _wantToken) external view returns (address);\n', '    function strategies(address _wantToken) external view returns (address);\n', '}\n', '\n', '// \n', '// inspired by & thanks to https://macarse.medium.com/the-keep3r-network-experiment-bb1c5182bda3\n', '// \n', 'contract GenericKeep3rV2 is Keep3r, IMMStrategyHarvestKp3r {\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    EnumerableSet.AddressSet internal availableStrategies;\n', '    EnumerableSet.AddressSet internal leveragedStrategies;\n', '    EnumerableSet.AddressSet internal collateralizedStrategies;\n', '    EnumerableSet.AddressSet internal availableVaults;\n', '    \n', '    // one-to-one mapping from vault to strategy\n', '    mapping(address => address) public vaultStrategies;\n', '    // required gas cost on strategy harvest()\n', '    mapping(address => uint256) public requiredHarvest;\n', '    // last harvest timestamp for strategy\n', '    mapping(address => uint256) public strategyLastHarvest;\n', '    // profit token yield by strategy harvest()\n', '    mapping(address => address) public stratagyYieldTokens;\n', '    // oracles used in harvest() for strategy: \n', '    //    0 : slidingOracle \n', '    //    1 : sushiSlidingOracle \n', '    //    anything > 1 : simply use token number instead price oracle\n', '    mapping(address => uint256) public stratagyYieldTokenOracles;\n', '    // required minimum token available for vault earn(), may subject to change to make this job reasonable\n', '    mapping(address => uint256) public requiredEarnBalance;\n', '    \n', '    address public keep3rHelper;\n', '    address public slidingOracle;\n', '    address public sushiSlidingOracle;\n', '    address public mmController;\n', '\n', '    address public constant KP3R = address(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\n', '    address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public constant CRV = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    address public constant COMP = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\n', '    address public constant MIR = address(0x09a3EcAFa817268f77BE1283176B946C4ff2E608);\n', '    address public constant THREECRV = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n', '    address public constant CRVRENWBTC = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\n', '    address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F );\n', '    address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 );\n', '    address public constant MIRUSTLP = address(0x87dA823B6fC8EB8575a235A824690fda94674c88 );\n', '    address public constant WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n', '    address public constant LINK = address(0x514910771AF9Ca656af840dff83E8264EcF986CA);\n', '    address public constant ZRX = address(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\n', '    uint256 public constant UNISWAP_ORACLE = 0;\n', '    uint256 public constant SUSHISWAP_ORACLE = 1;\n', '\n', '    // The minimum number of seconds between harvest calls, once half a day\n', '    uint256 public minHarvestInterval = 43200;\n', '\n', '    // The minimum multiple that `callCost` must be above the profit to be "justifiable"\n', '    uint256 public profitFactor = 1;\n', '\n', '    address public governor;\n', '\n', '    constructor(\n', '        address _keep3r,\n', '        address _keep3rHelper,\n', '        address _slidingOracle,\n', '        address _sushiSlidingOracle,\n', '        address _mmController\n', '    ) public Keep3r(_keep3r) {\n', '        \n', '        keep3rHelper = _keep3rHelper;\n', '        slidingOracle = _slidingOracle;\n', '        sushiSlidingOracle = _sushiSlidingOracle;\n', '        governor = msg.sender;\n', '\t\tmmController = _mmController;\n', '    \n', '        // add exisitng vaults         \n', '        addVault(MMController(_mmController).vaults(THREECRV), 10000 * 1e18);    // Matsutake Field   3CRV\n', '        addVault(MMController(_mmController).vaults(CRVRENWBTC), 1 * 1e18);      // Boletus Field     crvRENWBTC\n', '        addVault(MMController(_mmController).vaults(DAI), 10000 * 1e18);         // Kikurage Field    DAI\n', '        addVault(MMController(_mmController).vaults(USDC), 10000 * 1e6);         // Lentinula Field   USDC\n', '        addVault(MMController(_mmController).vaults(MIRUSTLP), 1000 * 1e18);     // Agaricus Field    MIR-UST LP\n', '        addVault(MMController(_mmController).vaults(WETH), 10 * 1e18);           // Russula Field     WETH\n', '        addVault(MMController(_mmController).vaults(WBTC), 1 * 1e18);            // Pleurotus Field   WBTC\n', '        addVault(MMController(_mmController).vaults(LINK), 400 * 1e18);          // Calvatia Field    LINK\n', '        addVault(MMController(_mmController).vaults(ZRX), 10000 * 1e18);         // Helvella Field    ZRX\n', '        \n', '        // add exisitng strategies\n', '        addStrategy(MMController(_mmController).vaults(THREECRV), MMController(_mmController).strategies(THREECRV), 1000000, false, false, CRV, SUSHISWAP_ORACLE);      // 3CRV              Yield $CRV\n', '        addStrategy(MMController(_mmController).vaults(CRVRENWBTC), MMController(_mmController).strategies(CRVRENWBTC), 1000000, false, false, CRV, SUSHISWAP_ORACLE);  // crvRENWBTC        Yield $CRV\n', '        addStrategy(MMController(_mmController).vaults(DAI), MMController(_mmController).strategies(DAI), 700000, false, true, COMP, SUSHISWAP_ORACLE);                 // DAI               Leveraged Yield $COMP\n', '        addStrategy(MMController(_mmController).vaults(USDC), MMController(_mmController).strategies(USDC), 700000, false, true, COMP, SUSHISWAP_ORACLE);               // USDC              Leveraged Yield $COMP\n', '        addStrategy(MMController(_mmController).vaults(MIRUSTLP), MMController(_mmController).strategies(MIRUSTLP), 850000, false, false, MIR, 1000 * 1e18);            // MIR-UST LP        Yield $MIR\n', '        addStrategy(MMController(_mmController).vaults(WETH), MMController(_mmController).strategies(WETH), 1100000, true, true, COMP, SUSHISWAP_ORACLE);               // WETH              Collateralized & Leveraged Yield $COMP\n', '        addStrategy(MMController(_mmController).vaults(WBTC), MMController(_mmController).strategies(WBTC), 700000, false, true, COMP, SUSHISWAP_ORACLE);               // WBTC              Leveraged Yield $COMP\n', '        addStrategy(MMController(_mmController).vaults(LINK), MMController(_mmController).strategies(LINK), 1100000, true, true, COMP, SUSHISWAP_ORACLE);               // LINK              Collateralized & Leveraged Yield $COMP\n', '        addStrategy(MMController(_mmController).vaults(ZRX), MMController(_mmController).strategies(ZRX), 1100000, true, true, COMP, SUSHISWAP_ORACLE);                 // ZRX               Collateralized & Leveraged Yield $COMP\n', '    }\n', '\n', '    modifier onlyGovernor {\n', '        require(msg.sender == governor, "governable::only-governor");\n', '        _;\n', '    }\n', '\n', '    function _setGovernor(address _governor) external onlyGovernor {\n', '        require(_governor != address(0), "governable::governor-should-not-be-zero-addres");\n', '        governor = _governor;\n', '    }\n', '\n', '    // Unique method to add a strategy with specified parameters to the system\n', '    function addStrategy(address _vault, address _strategy, uint256 _requiredHarvest, bool _requiredKeepMinRatio, bool _requiredLeverageToMax, address yieldToken, uint256 yieldTokenOracle) public override onlyGovernor {\n', '        _addHarvestStrategy(_vault, _strategy, _requiredHarvest);\n', '        availableStrategies.add(_strategy);\n', '        stratagyYieldTokens[_strategy] = yieldToken;\n', '        stratagyYieldTokenOracles[_strategy] = yieldTokenOracle;\n', '        if (_requiredKeepMinRatio){\n', '            collateralizedStrategies.add(_strategy);\n', '        }\n', '        if (_requiredLeverageToMax){\n', '            leveragedStrategies.add(_strategy);\n', '        }\n', '        emit HarvestStrategyAdded(_vault, _strategy, _requiredHarvest, _requiredKeepMinRatio, _requiredLeverageToMax, yieldToken, yieldTokenOracle);\n', '    }\n', '\n', '    function _addHarvestStrategy(address _vault, address _strategy, uint256 _requiredHarvest) internal {\n', '        require(availableVaults.contains(_vault), "generic-keep3r-v2:!availableVaults");\n', '        require(requiredHarvest[_strategy] == 0 && !availableStrategies.contains(_strategy), "generic-keep3r-v2:!requiredHarvest:strategy-already-added");\n', '        _setRequiredHarvest(_strategy, _requiredHarvest);\n', '        vaultStrategies[_vault] = _strategy;\n', '    }\n', '    \n', '    // Unique method to add a vault with specified parameters to the system\n', '    function addVault(address _vault, uint256 _requiredEarnBalance) public override onlyGovernor {\n', '        require(!availableVaults.contains(_vault), "generic-keep3r-v2:!requiredEarn:vault-already-added");\n', '        availableVaults.add(_vault);\n', '        _setRequiredEarn(_vault, _requiredEarnBalance);\n', '        emit EarnVaultAdded(_vault, _requiredEarnBalance);\n', '    }\n', '\n', '    // Unique method to update a strategy with specified gas cost\n', '    function updateRequiredHarvestAmount(address _strategy, uint256 _requiredHarvest) external override onlyGovernor {\n', '        require(requiredHarvest[_strategy] > 0 && availableStrategies.contains(_strategy), "generic-keep3r-v2::update-required-harvest:strategy-not-added");\n', '        _setRequiredHarvest(_strategy, _requiredHarvest);\n', '        emit HarvestStrategyModified(_strategy, _requiredHarvest);\n', '    }\n', '\n', '    // Unique method to update a strategy with specified yield token oracle type\n', '    function updateYieldTokenOracle(address _strategy, uint256 _yieldTokenOracle) external override onlyGovernor {\n', '        require(requiredHarvest[_strategy] > 0 && availableStrategies.contains(_strategy), "generic-keep3r-v2::update-yield-token-oracle:strategy-not-added");\n', '        stratagyYieldTokenOracles[_strategy] = _yieldTokenOracle;\n', '    }\n', '\n', '    // Unique method to update a vault with specified required want token number for earn()\n', '    function updateRequiredEarn(address _vault, uint256 _requiredEarnBalance) external override onlyGovernor {\n', '        require(availableVaults.contains(_vault), "generic-keep3r-v2::update-required-earn:vault-not-added");\n', '        _setRequiredEarn(_vault, _requiredEarnBalance);\n', '        emit EarnVaultModified(_vault, _requiredEarnBalance);\n', '    }\n', '\n', '    function removeHarvestStrategy(address _strategy) public override onlyGovernor {\n', '        require(requiredHarvest[_strategy] > 0 && availableStrategies.contains(_strategy), "generic-keep3r-v2::remove-harvest-strategy:strategy-not-added");\n', '        \n', '        delete requiredHarvest[_strategy];\n', '        availableStrategies.remove(_strategy);\n', '        \n', '        if (collateralizedStrategies.contains(_strategy)){\n', '            collateralizedStrategies.remove(_strategy);\n', '        }\n', '        \n', '        if (leveragedStrategies.contains(_strategy)){\n', '            leveragedStrategies.remove(_strategy);\n', '        }\n', '        \n', '        emit HarvestStrategyRemoved(_strategy);\n', '    }\n', '\n', '    function removeEarnVault(address _vault) external override onlyGovernor {\n', '        require(availableVaults.contains(_vault), "generic-keep3r-v2::remove-earn-vault:vault-not-added");\n', '        \n', '        address _strategy = vaultStrategies[_vault];\n', '        if (_strategy != address(0) && requiredHarvest[_strategy] > 0 && availableStrategies.contains(_strategy)){\n', '            removeHarvestStrategy(_strategy);\n', '            delete vaultStrategies[_vault];\n', '        }\n', '        \n', '        delete requiredEarnBalance[_vault];\n', '        availableVaults.remove(_vault);\n', '        \n', '        emit EarnVaultRemoved(_vault);\n', '    }\n', '\n', '    function setMinHarvestInterval(uint256 _interval) external override onlyGovernor {\n', '        require(_interval > 0, "!_interval");\n', '        minHarvestInterval = _interval;\n', '    }\n', '\n', '    function setProfitFactor(uint256 _profitFactor) external override onlyGovernor {\n', '        require(_profitFactor > 0, "!_profitFactor");\n', '        profitFactor = _profitFactor;\n', '    }\n', '\n', '    function setKeep3r(address _keep3r) external override onlyGovernor {\n', '        _setKeep3r(_keep3r);\n', '        emit Keep3rSet(_keep3r);\n', '    }\n', '\n', '    function setKeep3rHelper(address _keep3rHelper) external override onlyGovernor {\n', '        keep3rHelper = _keep3rHelper;\n', '        emit Keep3rHelperSet(_keep3rHelper);\n', '    }\n', '\n', '    function setSlidingOracle(address _slidingOracle) external override onlyGovernor {\n', '        slidingOracle = _slidingOracle;\n', '        emit SlidingOracleSet(_slidingOracle);\n', '    }\n', '\n', '    function setSushiSlidingOracle(address _sushiSlidingOracle) external override onlyGovernor {\n', '        sushiSlidingOracle = _sushiSlidingOracle;\n', '    }\n', '\n', '    function _setRequiredEarn(address _vault, uint256 _requiredEarnBalance) internal {\n', '        if (_requiredEarnBalance > 0){\n', '            requiredEarnBalance[_vault] = _requiredEarnBalance;\n', '        }\n', '    }\n', '\n', '    function _setRequiredHarvest(address _strategy, uint256 _requiredHarvest) internal {\n', '        if (_requiredHarvest > 0){\n', '            requiredHarvest[_strategy] = _requiredHarvest;\n', '        }\n', '    }\n', '\n', '    // Getters\n', '    function name() external pure override returns (string memory) {\n', '        return "Generic Keep3r for Mushrooms Finance";\n', '    }\n', '\n', '    function getStrategies() public view override returns (address[] memory _strategies) {\n', '        _strategies = new address[](availableStrategies.length());\n', '        for (uint256 i; i < availableStrategies.length(); i++) {\n', '            _strategies[i] = availableStrategies.at(i);\n', '        }\n', '    }\n', '\n', '    function getCollateralizedStrategies() public view override returns (address[] memory _strategies) {\n', '        _strategies = new address[](collateralizedStrategies.length());\n', '        for (uint256 i; i < collateralizedStrategies.length(); i++) {\n', '            _strategies[i] = collateralizedStrategies.at(i);\n', '        }\n', '    }\n', '\n', '    function getVaults() public view override returns (address[] memory _vaults) {\n', '        _vaults = new address[](availableVaults.length());\n', '        for (uint256 i; i < availableVaults.length(); i++) {\n', '            _vaults[i] = availableVaults.at(i);\n', '        }\n', '    }\n', '\n', '    // this method is not specified as view since some strategy maybe not able to return accurate underlying profit in snapshot,\n', '\t// please use something similar to below tool to query\n', '\t// https://docs.ethers.io/v5/api/contract/contract/#contract-callStatic\n', '    function harvestable(address _strategy) public override returns (bool) {\n', '        require(requiredHarvest[_strategy] > 0, "generic-keep3r-v2::harvestable:strategy-not-added");\n', '\n', '        // Should not trigger if had been called recently\n', '        if (strategyLastHarvest[_strategy] > 0 && block.timestamp.sub(strategyLastHarvest[_strategy]) <= minHarvestInterval){\n', '            return false;\n', '        }\n', '\n', '        // quote from keep3r network for specified workload\n', '        uint256 kp3rCallCost = IKeep3rV1Helper(keep3rHelper).getQuoteLimit(requiredHarvest[_strategy]);\n', '        // get ETH gas cost by querying uniswap sliding oracle\n', '        uint256 ethCallCost = IUniswapV2SlidingOracle(sushiSlidingOracle).current(KP3R, kp3rCallCost, WETH);\n', '        \n', '        // estimate yield profit to harvest\n', '        uint256 profitTokenAmount = 0;\n', '        address yieldToken = stratagyYieldTokens[_strategy];\n', '        uint256 yieldTokenOracle = stratagyYieldTokenOracles[_strategy];\n', '        if (yieldToken == COMP){\n', '            profitTokenAmount = ICompStrategy(_strategy).getCompAccrued();\n', '        } else{\n', '            profitTokenAmount = ICrvStrategy(_strategy).getHarvestable();\n', '        }\n', '            \n', '        if (yieldTokenOracle > SUSHISWAP_ORACLE){ // no oracle to use, just use token number\n', '            emit HarvestableCheck(_strategy, profitTokenAmount, profitFactor, 0, ethCallCost);\n', '            return (profitTokenAmount >= yieldTokenOracle);\n', '        } else{\n', '            address oracle = yieldTokenOracle == UNISWAP_ORACLE? slidingOracle : sushiSlidingOracle;\n', '            uint256 profitInEther = IUniswapV2SlidingOracle(oracle).current(yieldToken, profitTokenAmount, WETH);\n', '            emit HarvestableCheck(_strategy, profitTokenAmount, profitFactor, profitInEther, ethCallCost);\n', '            return (profitInEther >= profitFactor.mul(ethCallCost));\n', '        }\n', '    }\n', '    \n', '    function earnable(address _vault) public view override returns (bool) {\n', '        require(availableVaults.contains(_vault), "generic-keep3r-v2::earnable:vault-not-added");\n', '        return (IERC20(IVault(_vault).token()).balanceOf(_vault) >= requiredEarnBalance[_vault]);\n', '    }\n', '    \n', '    function keepMinRatioMayday(address _strategy) public view override returns (bool) {\n', '        require(collateralizedStrategies.contains(_strategy), "generic-keep3r-v2::keepMinRatioMayday:strategy-not-added");\n', '        return ICollateralizedStrategy(_strategy).currentRatio() <= (ICollateralizedStrategy(_strategy).minRatio() * 9000 / 10000);\n', '    }\n', '\n', '    // harvest() actions for Keep3r\n', '    function harvest(address _strategy) external override paysKeeper {\n', '        require(harvestable(_strategy), "generic-keep3r-v2::harvest:not-workable");\n', '        IStrategy(_strategy).harvest();\n', '        strategyLastHarvest[_strategy] = block.timestamp;\n', '        emit HarvestedByKeeper(_strategy);\n', '    }\n', '\n', '    // earn() actions for Keep3r\n', '    function earn(address _vault) external override paysKeeper {\n', '        require(earnable(_vault), "generic-keep3r-v2::earn:not-workable");\n', '        IVault(_vault).earn();\n', '        address _strategy = vaultStrategies[_vault];\n', '        if (_strategy != address(0) && requiredHarvest[_strategy] > 0 && leveragedStrategies.contains(_strategy)){\n', '            ILeveragedStrategy(_strategy).leverageToMax();\n', '        }\n', '    }\n', '\n', '    // keepMinRatio() actions for Keep3r\n', '    function keepMinRatio(address _strategy) external override paysKeeper {\n', '        require(keepMinRatioMayday(_strategy), "generic-keep3r-v2::keepMinRatio:not-workable");\n', '        ICollateralizedStrategy(_strategy).keepMinRatio();\n', '    }\n', '}']