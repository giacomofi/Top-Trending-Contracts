['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-08\n', '*/\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: chainlink/v0.5/contracts/dev/AggregatorInterface.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface AggregatorInterface {\n', '  function latestAnswer() external view returns (int256);\n', '  function latestTimestamp() external view returns (uint256);\n', '  function latestRound() external view returns (uint256);\n', '  function getAnswer(uint256 roundId) external view returns (int256);\n', '  function getTimestamp(uint256 roundId) external view returns (uint256);\n', '\n', '  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n', '  event NewRound(uint256 indexed roundId, address indexed startedBy);\n', '}\n', '\n', '// File: contracts/meta-oracles/proxies/ChainlinkOracleAdapterV2.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity 0.5.7;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ChainlinkOracleAdapterV2\n', ' * @author Set Protocol\n', ' *\n', ' * Coerces outputs from Chainlink oracles to uint256 and adapts value to 18 decimals.\n', ' */\n', 'contract ChainlinkOracleAdapterV2 {\n', '    using SafeMath for uint256;\n', '\n', '    /* ============ State Variables ============ */\n', '    AggregatorInterface public oracle;\n', '    uint256 public priceMultiplier;\n', '\n', '    /* ============ Constructor ============ */\n', '    /*\n', '     * Set address of aggregator being adapted for use. Different oracles return prices with different decimals.\n', '     * In this iteration of ChainLinkOracleAdapter, we allow the deployer to specify the multiple decimal\n', '     * to pass into the contract\n', '     *\n', '     * DPI (18): https://etherscan.io/address/0xD2A593BF7594aCE1faD597adb697b5645d5edDB2\n', '     * DAI (8): https://etherscan.io/address/0xaed0c38402a5d19df6e4c03f4e2dced6e29c1ee9\n', '     *\n', '     * @param  _oracle                  The address of medianizer being adapted from bytes to uint256\n', '     * @param  _priceMultiplierDecimals Decimal places to convert\n', '     */\n', '    constructor(\n', '        AggregatorInterface _oracle,\n', '        uint256 _priceMultiplierDecimals\n', '    )\n', '        public\n', '    {\n', '        oracle = _oracle;\n', '        priceMultiplier = 10 ** _priceMultiplierDecimals;\n', '    }\n', '\n', '    /* ============ External ============ */\n', '\n', '    /*\n', '     * Reads value of oracle and coerces return to uint256 then applies price multiplier\n', '     *\n', '     * @returns         Chainlink oracle price in uint256\n', '     */\n', '    function read()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Read value of medianizer and coerce to uint256\n', '        uint256 oracleOutput = uint256(oracle.latestAnswer());\n', '\n', '        // Apply multiplier to create 18 decimal price (since Chainlink returns 8 decimals)\n', '        return oracleOutput.mul(priceMultiplier);\n', '    }\n', '}']