['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// contract/CeramicToken.sol\n', '\n', '// SPDX-License-Identifier: MIT or Apache-2\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev This contract is an adaption of the openzeppelin proxy and the Gnosis proxy.\n', ' * It provides a fallback function that delegates all calls to another contract using the EVM\n', ' * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy,\n', ' * and it has to be specified by overriding the virtual {_implementation} function.\n', ' *\n', ' * The success and return data of the delegated call will be returned back to the caller of the proxy.\n', ' */\n', 'contract CeramicToken {\n', '\n', '    /**\n', '     * @dev Storage slot with the address of the current implementation.\n', '     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\n', '    /**\n', '     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n', '     *\n', "     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n", '     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n', '     */\n', '    constructor(address _logic) payable {\n', '        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));\n', '        assembly {\n', '            sstore(_IMPLEMENTATION_SLOT, _logic)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates the current call to `implementation`.\n', '     *\n', '     * This function does not return to its internall call site, it will return directly to the external caller.\n', '     */\n', '    function _fallback() internal virtual {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Load the implementation\n', '            let implementation := sload(_IMPLEMENTATION_SLOT)\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n', '     * function in the contract matches the call data.\n', '     */\n', '    fallback () external payable virtual {\n', '        _fallback();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n', '     * is empty.\n', '     */\n', '    receive () external payable virtual {\n', '        _fallback();\n', '    }\n', '}']