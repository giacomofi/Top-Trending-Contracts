['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// File: contracts/interface/MarketInterfaces.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract ShardsMarketAdminStorage {\n', '    /**\n', '     * @notice Administrator for this contract\n', '     */\n', '    address public admin;\n', '    /**\n', '     * @notice Governance for this contract which has the right to adjust the parameters of market\n', '     */\n', '    address public governance;\n', '\n', '    /**\n', '     * @notice Active brains of ShardsMarket\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'contract IShardsMarketStorge is ShardsMarketAdminStorage {\n', '    address public shardsFactory;\n', '\n', '    address public factory;\n', '\n', '    address public router;\n', '\n', '    address public dev;\n', '\n', '    address public platformFund;\n', '\n', '    address public shardsFarm;\n', '\n', '    address public buyoutProposals;\n', '\n', '    address public regulator;\n', '\n', '    address public shardAdditionProposal;\n', '\n', '    address public WETH;\n', '    //The totalSupply of shard in the market\n', '    uint256 public totalSupply = 10000000000000000000000;\n', '    //Stake Time limit: 60*60*24*5\n', '    uint256 public deadlineForStake = 432000;\n', '    //Redeem Time limit:60*60*24*7\n', '    uint256 public deadlineForRedeem = 604800;\n', "    //The Proportion of the shardsCreator's shards\n", '    uint256 public shardsCreatorProportion = 5;\n', "    //The Proportion of the platform's shards\n", '    uint256 public platformProportion = 5;\n', '    //The Proportion for dev of the market profit,the rest of profit is given to platformFund\n', '    uint256 public profitProportionForDev = 20;\n', '    //max\n', '    uint256 internal constant max = 100;\n', '    //shardPool count\n', '    uint256 public shardPoolIdCount;\n', '    // all of the shardpoolId\n', '    uint256[] internal allPools;\n', '    // Info of each pool.\n', '    mapping(uint256 => shardPool) public poolInfo;\n', '    //shardPool struct\n', '    struct shardPool {\n', '        address creator; //shard  creator\n', '        ShardsState state; //shard state\n', '        uint256 createTime;\n', '        uint256 deadlineForStake;\n', '        uint256 deadlineForRedeem;\n', '        uint256 balanceOfWantToken; // all the stake amount of the wantToken in this pool\n', '        uint256 minWantTokenAmount; //Minimum subscription required by the creator\n', '        bool isCreatorWithDraw; //Does the creator withdraw wantToken\n', '        address wantToken; // token address Requested by the creator for others to stake\n', '        uint256 openingPrice;\n', '    }\n', '    //shard of each pool\n', '    mapping(uint256 => shard) public shardInfo;\n', '    //shard struct\n', '    struct shard {\n', '        string shardName;\n', '        string shardSymbol;\n', '        address shardToken;\n', '        uint256 totalShardSupply;\n', '        uint256 shardForCreator;\n', '        uint256 shardForPlatform;\n', '        uint256 shardForStakers;\n', '        uint256 burnAmount;\n', '    }\n', '    //user info of each pool\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    struct UserInfo {\n', '        uint256 amount;\n', '        bool isWithdrawShard;\n', '    }\n', '\n', '    enum ShardsState {\n', '        Live,\n', '        Listed,\n', '        ApplyForBuyout,\n', '        Buyout,\n', '        SubscriptionFailed,\n', '        Pending,\n', '        AuditFailed,\n', '        ApplyForAddition\n', '    }\n', '\n', '    struct Token721 {\n', '        address contractAddress;\n', '        uint256 tokenId;\n', '    }\n', '    struct Token1155 {\n', '        address contractAddress;\n', '        uint256 tokenId;\n', '        uint256 amount;\n', '    }\n', '    //nfts of shard creator stakes in each pool\n', '    mapping(uint256 => Token721[]) internal Token721s;\n', '    mapping(uint256 => Token1155[]) internal Token1155s;\n', '}\n', '\n', 'abstract contract IShardsMarket is IShardsMarketStorge {\n', '    event ShardCreated(\n', '        uint256 shardPoolId,\n', '        address indexed creator,\n', '        string shardName,\n', '        string shardSymbol,\n', '        uint256 minWantTokenAmount,\n', '        uint256 createTime,\n', '        uint256 totalSupply,\n', '        address wantToken\n', '    );\n', '    event Stake(address indexed sender, uint256 shardPoolId, uint256 amount);\n', '    event Redeem(address indexed sender, uint256 shardPoolId, uint256 amount);\n', '    event SettleSuccess(\n', '        uint256 indexed shardPoolId,\n', '        uint256 platformAmount,\n', '        uint256 shardForStakers,\n', '        uint256 balanceOfWantToken,\n', '        uint256 fee,\n', '        address shardToken\n', '    );\n', '    event SettleFail(uint256 indexed shardPoolId);\n', '    event ApplyForBuyout(\n', '        address indexed sender,\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        uint256 shardAmount,\n', '        uint256 wantTokenAmount,\n', '        uint256 voteDeadline,\n', '        uint256 buyoutTimes,\n', '        uint256 price,\n', '        uint256 blockHeight\n', '    );\n', '    event Vote(\n', '        address indexed sender,\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        bool isAgree,\n', '        uint256 voteAmount\n', '    );\n', '    event VoteResultConfirm(\n', '        uint256 indexed proposalId,\n', '        uint256 indexed _shardPoolId,\n', '        bool isPassed\n', '    );\n', '\n', '    // user operation\n', '    function createShard(\n', '        Token721[] calldata Token721s,\n', '        Token1155[] calldata Token1155s,\n', '        string memory shardName,\n', '        string memory shardSymbol,\n', '        uint256 minWantTokenAmount,\n', '        address wantToken\n', '    ) external virtual returns (uint256 shardPoolId);\n', '\n', '    function stakeETH(uint256 _shardPoolId) external payable virtual;\n', '\n', '    function stake(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function redeem(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function redeemETH(uint256 _shardPoolId, uint256 amount) external virtual;\n', '\n', '    function settle(uint256 _shardPoolId) external virtual;\n', '\n', '    function redeemInSubscriptionFailed(uint256 _shardPoolId) external virtual;\n', '\n', '    function usersWithdrawShardToken(uint256 _shardPoolId) external virtual;\n', '\n', '    function creatorWithdrawWantToken(uint256 _shardPoolId) external virtual;\n', '\n', '    function applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\n', '        external\n', '        virtual\n', '        returns (uint256 proposalId);\n', '\n', '    function applyForBuyoutETH(uint256 _shardPoolId)\n', '        external\n', '        payable\n', '        virtual\n', '        returns (uint256 proposalId);\n', '\n', '    function vote(uint256 _shardPoolId, bool isAgree) external virtual;\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        virtual\n', '        returns (bool result);\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        virtual\n', '        returns (uint256 wantTokenAmount);\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId)\n', '        external\n', '        virtual\n', '        returns (uint256 shardTokenAmount, uint256 wantTokenAmount);\n', '\n', '    //governance operation\n', '    function setShardsCreatorProportion(uint256 _shardsCreatorProportion)\n', '        external\n', '        virtual;\n', '\n', '    function setPlatformProportion(uint256 _platformProportion)\n', '        external\n', '        virtual;\n', '\n', '    function setTotalSupply(uint256 _totalSupply) external virtual;\n', '\n', '    function setDeadlineForRedeem(uint256 _deadlineForRedeem) external virtual;\n', '\n', '    function setDeadlineForStake(uint256 _deadlineForStake) external virtual;\n', '\n', '    function setProfitProportionForDev(uint256 _profitProportionForDev)\n', '        external\n', '        virtual;\n', '\n', '    function setShardsFarm(address _shardsFarm) external virtual;\n', '\n', '    function setRegulator(address _regulator) external virtual;\n', '\n', '    function setFactory(address _factory) external virtual;\n', '\n', '    function setShardsFactory(address _shardsFactory) external virtual;\n', '\n', '    function setRouter(address _router) external virtual;\n', '\n', '    //admin operation\n', '    function setPlatformFund(address _platformFund) external virtual;\n', '\n', '    function setDev(address _dev) external virtual;\n', '\n', '    //function shardAudit(uint256 _shardPoolId, bool isPassed) external virtual;\n', '\n', '    //view function\n', '    function getPrice(uint256 _shardPoolId)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256 currentPrice);\n', '\n', '    function getAllPools()\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256[] memory _pools);\n', '\n', '    function getTokens(uint256 shardPoolId)\n', '        external\n', '        view\n', '        virtual\n', '        returns (Token721[] memory _token721s, Token1155[] memory _token1155s);\n', '}\n', '\n', '// File: contracts/interface/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function approve(address guy, uint256 wad) external returns (bool);\n', '}\n', '\n', '// File: contracts/interface/IShardToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IShardToken {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function burn(uint256 value) external;\n', '\n', '    function mint(address to, uint256 value) external;\n', '\n', '    function initialize(\n', '        string memory _name,\n', '        string memory _symbol,\n', '        address market\n', '    ) external;\n', '\n', '    function getPriorVotes(address account, uint256 blockNumber)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', '// File: contracts/interface/IShardsFactory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IShardsFactory {\n', '    event ShardTokenCreated(address shardToken);\n', '\n', '    function createShardToken(\n', '        uint256 poolId,\n', '        string memory name,\n', '        string memory symbol\n', '    ) external returns (address shardToken);\n', '}\n', '\n', '// File: contracts/interface/IShardsFarm.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IShardsFarm {\n', '    function add(\n', '        uint256 poolId,\n', '        address lpToken,\n', '        address ethLpToken\n', '    ) external;\n', '}\n', '\n', '// File: contracts/interface/IMarketRegulator.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IMarketRegulator {\n', '    function IsInWhiteList(address wantToken)\n', '        external\n', '        view\n', '        returns (bool inTheList);\n', '\n', '    function IsInBlackList(uint256 _shardPoolId)\n', '        external\n', '        view\n', '        returns (bool inTheList);\n', '}\n', '\n', '// File: contracts/interface/IBuyoutProposals.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract DelegationStorage {\n', '    address public governance;\n', '    /**\n', '     * @notice Implementation address for this contract\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'contract IBuyoutProposalsStorge is DelegationStorage {\n', '    address public regulator;\n', '    address public market;\n', '\n', '    uint256 public proposolIdCount;\n', '\n', '    uint256 public voteLenth = 259200;\n', '\n', '    mapping(uint256 => uint256) public proposalIds;\n', '\n', '    mapping(uint256 => uint256[]) internal proposalsHistory;\n', '\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    mapping(uint256 => mapping(address => bool)) public voted;\n', '\n', '    uint256 public passNeeded = 75;\n', '\n', '    // n times higher than the market price to buyout\n', '    uint256 public buyoutTimes = 100;\n', '\n', '    uint256 internal constant max = 100;\n', '\n', '    uint256 public buyoutProportion = 15;\n', '\n', '    mapping(uint256 => uint256) allVotes;\n', '\n', '    struct Proposal {\n', '        uint256 votesReceived;\n', '        uint256 voteTotal;\n', '        bool passed;\n', '        address submitter;\n', '        uint256 voteDeadline;\n', '        uint256 shardAmount;\n', '        uint256 wantTokenAmount;\n', '        uint256 buyoutTimes;\n', '        uint256 price;\n', '        bool isSubmitterWithDraw;\n', '        uint256 shardPoolId;\n', '        bool isFailedConfirmed;\n', '        uint256 blockHeight;\n', '        uint256 createTime;\n', '    }\n', '}\n', '\n', 'abstract contract IBuyoutProposals is IBuyoutProposalsStorge {\n', '    function createProposal(\n', '        uint256 _shardPoolId,\n', '        uint256 shardBalance,\n', '        uint256 wantTokenAmount,\n', '        uint256 currentPrice,\n', '        uint256 totalShardSupply,\n', '        address submitter\n', '    ) external virtual returns (uint256 proposalId, uint256 buyoutTimes);\n', '\n', '    function vote(\n', '        uint256 _shardPoolId,\n', '        bool isAgree,\n', '        address shard,\n', '        address voter\n', '    ) external virtual returns (uint256 proposalId, uint256 balance);\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        virtual\n', '        returns (\n', '            uint256 proposalId,\n', '            bool result,\n', '            address submitter,\n', '            uint256 shardAmount,\n', '            uint256 wantTokenAmount\n', '        );\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 wantTokenAmount);\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\n', '        external\n', '        virtual\n', '        returns (\n', '            uint256 _shardPoolId,\n', '            uint256 shardTokenAmount,\n', '            uint256 wantTokenAmount\n', '        );\n', '\n', '    function setBuyoutTimes(uint256 _buyoutTimes) external virtual;\n', '\n', '    function setVoteLenth(uint256 _voteLenth) external virtual;\n', '\n', '    function setPassNeeded(uint256 _passNeeded) external virtual;\n', '\n', '    function setBuyoutProportion(uint256 _buyoutProportion) external virtual;\n', '\n', '    function setMarket(address _market) external virtual;\n', '\n', '    function setRegulator(address _regulator) external virtual;\n', '\n', '    function getProposalsForExactPool(uint256 _shardPoolId)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256[] memory _proposalsHistory);\n', '}\n', '\n', '// File: contracts/libraries/TransferHelper.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x095ea7b3, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: APPROVE_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0xa9059cbb, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(\n', '            abi.encodeWithSelector(0x23b872dd, from, to, value)\n', '        );\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "TransferHelper: TRANSFER_FROM_FAILED"\n', '        );\n', '    }\n', '\n', '    function safeTransferETH(address to, uint256 value) internal {\n', '        (bool success, ) = to.call{value: value}(new bytes(0));\n', '        require(success, "TransferHelper: ETH_TRANSFER_FAILED");\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Factory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/NFTLibrary.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'library NFTLibrary {\n', '    using SafeMath for uint256;\n', '\n', '    function getPrice(\n', '        address tokenA,\n', '        address tokenB,\n', '        address factory\n', '    ) internal view returns (uint256 currentPrice) {\n', '        address lPTokenAddress =\n', '            IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n', '\n', '        if (lPTokenAddress == address(0)) {\n', '            return currentPrice;\n', '        }\n', '\n', '        (uint112 _reserve0, uint112 _reserve1, ) =\n', '            IUniswapV2Pair(lPTokenAddress).getReserves();\n', '\n', '        address token0 = IUniswapV2Pair(lPTokenAddress).token0();\n', '\n', '        (uint112 reserve0, uint112 reserve1) =\n', '            token0 == tokenA ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n', '        currentPrice = quote(1e18, reserve0, reserve1);\n', '    }\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "INSUFFICIENT_AMOUNT");\n', '        require(reserveA > 0 && reserveB > 0, "INSUFFICIENT_LIQUIDITY");\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    function balanceOf(address user, address lPTokenAddress)\n', '        internal\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        balance = IUniswapV2Pair(lPTokenAddress).balanceOf(user);\n', '    }\n', '\n', '    function getPair(\n', '        address tokenA,\n', '        address tokenB,\n', '        address factory\n', '    ) internal view returns (address pair) {\n', '        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n', '    }\n', '\n', '    function tokenVerify(string memory tokenName, uint256 lenthLimit)\n', '        internal\n', '        pure\n', '        returns (bool success)\n', '    {\n', '        bytes memory nameBytes = bytes(tokenName);\n', '        uint256 nameLength = nameBytes.length;\n', '        require(0 < nameLength && nameLength <= lenthLimit, "INVALID INPUT");\n', '        success = true;\n', '        bool n7;\n', '        for (uint256 i = 0; i <= nameLength - 1; i++) {\n', '            n7 = (nameBytes[i] & 0x80) == 0x80 ? true : false;\n', '            if (n7) {\n', '                success = false;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '  /**\n', '   * @dev Implementation of the {IERC721Receiver} interface.\n', '   *\n', '   * Accepts all token transfers. \n', '   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n', '   */\n', 'contract ERC721Holder is IERC721Receiver {\n', '\n', '    /**\n', '     * @dev See {IERC721Receiver-onERC721Received}.\n', '     *\n', '     * Always returns `IERC721Receiver.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC1155/IERC1155.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC1155/IERC1155Receiver.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC1155/ERC1155Receiver.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n', '    constructor() internal {\n', '        _registerInterface(\n', '            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n', '            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n', '        );\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC1155/ERC1155Holder.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'contract ERC1155Holder is ERC1155Receiver {\n', '    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Router01.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '}\n', '\n', '// File: contracts/interface/IUniswapV2Router02.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {}\n', '\n', '// File: contracts/ShardsMarketDelegateV0.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ShardsMarketDelegateV0 is IShardsMarket, ERC721Holder, ERC1155Holder {\n', '    using SafeMath for uint256;\n', '\n', '    constructor() public {}\n', '\n', '    function initialize(\n', '        address _WETH,\n', '        address _factory,\n', '        address _governance,\n', '        address _router,\n', '        address _dev,\n', '        address _platformFund,\n', '        address _shardsFactory,\n', '        address _regulator,\n', '        address _buyoutProposals\n', '    ) public {\n', '        require(admin == msg.sender, "UNAUTHORIZED");\n', '        require(WETH == address(0), "ALREADY INITIALIZED");\n', '        WETH = _WETH;\n', '        factory = _factory;\n', '        governance = _governance;\n', '        router = _router;\n', '        dev = _dev;\n', '        platformFund = _platformFund;\n', '        shardsFactory = _shardsFactory;\n', '        regulator = _regulator;\n', '        buyoutProposals = _buyoutProposals;\n', '    }\n', '\n', '    function createShard(\n', '        Token721[] calldata token721s,\n', '        Token1155[] calldata token1155s,\n', '        string memory shardName,\n', '        string memory shardSymbol,\n', '        uint256 minWantTokenAmount,\n', '        address wantToken\n', '    ) external override returns (uint256 shardPoolId) {\n', '        require(\n', '            NFTLibrary.tokenVerify(shardName, 30) &&\n', '                NFTLibrary.tokenVerify(shardSymbol, 30),\n', '            "INVALID NAME/SYMBOL"\n', '        );\n', '\n', '        require(minWantTokenAmount > 0, "INVALID MINAMOUNT INPUT");\n', '        require(\n', '            IMarketRegulator(regulator).IsInWhiteList(wantToken),\n', '            "WANTTOKEN IS NOT ON THE LIST"\n', '        );\n', '        shardPoolId = shardPoolIdCount.add(1);\n', '        poolInfo[shardPoolId] = shardPool({\n', '            creator: msg.sender,\n', '            state: ShardsState.Live,\n', '            createTime: block.timestamp,\n', '            deadlineForStake: block.timestamp.add(deadlineForStake),\n', '            deadlineForRedeem: block.timestamp.add(deadlineForRedeem),\n', '            balanceOfWantToken: 0,\n', '            minWantTokenAmount: minWantTokenAmount,\n', '            isCreatorWithDraw: false,\n', '            wantToken: wantToken,\n', '            openingPrice: 0\n', '        });\n', '\n', '        _transferIn(shardPoolId, token721s, token1155s, msg.sender);\n', '\n', '        uint256 creatorAmount =\n', '            totalSupply.mul(shardsCreatorProportion).div(max);\n', '        uint256 platformAmount = totalSupply.mul(platformProportion).div(max);\n', '        uint256 stakersAmount =\n', '            totalSupply.sub(creatorAmount).sub(platformAmount);\n', '        shardInfo[shardPoolId] = shard({\n', '            shardName: shardName,\n', '            shardSymbol: shardSymbol,\n', '            shardToken: address(0),\n', '            totalShardSupply: totalSupply,\n', '            shardForCreator: creatorAmount,\n', '            shardForPlatform: platformAmount,\n', '            shardForStakers: stakersAmount,\n', '            burnAmount: 0\n', '        });\n', '        allPools.push(shardPoolId);\n', '        shardPoolIdCount = shardPoolId;\n', '        emit ShardCreated(\n', '            shardPoolId,\n', '            msg.sender,\n', '            shardName,\n', '            shardSymbol,\n', '            minWantTokenAmount,\n', '            block.timestamp,\n', '            totalSupply,\n', '            wantToken\n', '        );\n', '    }\n', '\n', '    function stake(uint256 _shardPoolId, uint256 amount) external override {\n', '        require(\n', '            block.timestamp <= poolInfo[_shardPoolId].deadlineForStake,\n', '            "EXPIRED"\n', '        );\n', '        address wantToken = poolInfo[_shardPoolId].wantToken;\n', '        TransferHelper.safeTransferFrom(\n', '            wantToken,\n', '            msg.sender,\n', '            address(this),\n', '            amount\n', '        );\n', '        _stake(_shardPoolId, amount);\n', '    }\n', '\n', '    function stakeETH(uint256 _shardPoolId) external payable override {\n', '        require(\n', '            block.timestamp <= poolInfo[_shardPoolId].deadlineForStake,\n', '            "EXPIRED"\n', '        );\n', '        require(poolInfo[_shardPoolId].wantToken == WETH, "UNWANTED");\n', '        IWETH(WETH).deposit{value: msg.value}();\n', '        _stake(_shardPoolId, msg.value);\n', '    }\n', '\n', '    function _stake(uint256 _shardPoolId, uint256 amount) private {\n', '        require(amount > 0, "INSUFFIENT INPUT");\n', '        userInfo[_shardPoolId][msg.sender].amount = userInfo[_shardPoolId][\n', '            msg.sender\n', '        ]\n', '            .amount\n', '            .add(amount);\n', '        poolInfo[_shardPoolId].balanceOfWantToken = poolInfo[_shardPoolId]\n', '            .balanceOfWantToken\n', '            .add(amount);\n', '        emit Stake(msg.sender, _shardPoolId, amount);\n', '    }\n', '\n', '    function redeem(uint256 _shardPoolId, uint256 amount) external override {\n', '        _redeem(_shardPoolId, amount);\n', '        TransferHelper.safeTransfer(\n', '            poolInfo[_shardPoolId].wantToken,\n', '            msg.sender,\n', '            amount\n', '        );\n', '        emit Redeem(msg.sender, _shardPoolId, amount);\n', '    }\n', '\n', '    function redeemETH(uint256 _shardPoolId, uint256 amount) external override {\n', '        require(poolInfo[_shardPoolId].wantToken == WETH, "UNWANTED");\n', '        _redeem(_shardPoolId, amount);\n', '        IWETH(WETH).withdraw(amount);\n', '        TransferHelper.safeTransferETH(msg.sender, amount);\n', '        emit Redeem(msg.sender, _shardPoolId, amount);\n', '    }\n', '\n', '    function _redeem(uint256 _shardPoolId, uint256 amount) private {\n', '        require(\n', '            block.timestamp <= poolInfo[_shardPoolId].deadlineForRedeem,\n', '            "EXPIRED"\n', '        );\n', '        require(amount > 0, "INSUFFIENT INPUT");\n', '        userInfo[_shardPoolId][msg.sender].amount = userInfo[_shardPoolId][\n', '            msg.sender\n', '        ]\n', '            .amount\n', '            .sub(amount);\n', '        poolInfo[_shardPoolId].balanceOfWantToken = poolInfo[_shardPoolId]\n', '            .balanceOfWantToken\n', '            .sub(amount);\n', '    }\n', '\n', '    function settle(uint256 _shardPoolId) external override {\n', '        require(\n', '            block.timestamp > poolInfo[_shardPoolId].deadlineForRedeem,\n', '            "NOT READY"\n', '        );\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.Live,\n', '            "LIVE STATE IS REQUIRED"\n', '        );\n', '        if (\n', '            poolInfo[_shardPoolId].balanceOfWantToken <\n', '            poolInfo[_shardPoolId].minWantTokenAmount ||\n', '            IMarketRegulator(regulator).IsInBlackList(_shardPoolId)\n', '        ) {\n', '            poolInfo[_shardPoolId].state = ShardsState.SubscriptionFailed;\n', '\n', '            address shardCreator = poolInfo[_shardPoolId].creator;\n', '            _transferOut(_shardPoolId, shardCreator);\n', '            emit SettleFail(_shardPoolId);\n', '        } else {\n', '            _successToSetPrice(_shardPoolId);\n', '        }\n', '    }\n', '\n', '    function redeemInSubscriptionFailed(uint256 _shardPoolId)\n', '        external\n', '        override\n', '    {\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.SubscriptionFailed,\n', '            "WRONG STATE"\n', '        );\n', '        uint256 balance = userInfo[_shardPoolId][msg.sender].amount;\n', '        require(balance > 0, "INSUFFIENT BALANCE");\n', '        userInfo[_shardPoolId][msg.sender].amount = 0;\n', '        poolInfo[_shardPoolId].balanceOfWantToken = poolInfo[_shardPoolId]\n', '            .balanceOfWantToken\n', '            .sub(balance);\n', '        if (poolInfo[_shardPoolId].wantToken == WETH) {\n', '            IWETH(WETH).withdraw(balance);\n', '            TransferHelper.safeTransferETH(msg.sender, balance);\n', '        } else {\n', '            TransferHelper.safeTransfer(\n', '                poolInfo[_shardPoolId].wantToken,\n', '                msg.sender,\n', '                balance\n', '            );\n', '        }\n', '\n', '        emit Redeem(msg.sender, _shardPoolId, balance);\n', '    }\n', '\n', '    function usersWithdrawShardToken(uint256 _shardPoolId) external override {\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.Listed ||\n', '                poolInfo[_shardPoolId].state == ShardsState.Buyout ||\n', '                poolInfo[_shardPoolId].state == ShardsState.ApplyForBuyout,\n', '            "WRONG_STATE"\n', '        );\n', '        uint256 userBanlance = userInfo[_shardPoolId][msg.sender].amount;\n', '        bool isWithdrawShard =\n', '            userInfo[_shardPoolId][msg.sender].isWithdrawShard;\n', '        require(userBanlance > 0 && !isWithdrawShard, "INSUFFIENT BALANCE");\n', '        uint256 shardsForUsers = shardInfo[_shardPoolId].shardForStakers;\n', '        uint256 totalBalance = poolInfo[_shardPoolId].balanceOfWantToken;\n', '        // formula:\n', '        // shardAmount/shardsForUsers= userBanlance/totalBalance\n', '        //\n', '        uint256 shardAmount =\n', '            userBanlance.mul(shardsForUsers).div(totalBalance);\n', '        userInfo[_shardPoolId][msg.sender].isWithdrawShard = true;\n', '        IShardToken(shardInfo[_shardPoolId].shardToken).mint(\n', '            msg.sender,\n', '            shardAmount\n', '        );\n', '    }\n', '\n', '    function creatorWithdrawWantToken(uint256 _shardPoolId) external override {\n', '        require(msg.sender == poolInfo[_shardPoolId].creator, "UNAUTHORIZED");\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.Listed ||\n', '                poolInfo[_shardPoolId].state == ShardsState.Buyout ||\n', '                poolInfo[_shardPoolId].state == ShardsState.ApplyForBuyout,\n', '            "WRONG_STATE"\n', '        );\n', '\n', '        require(!poolInfo[_shardPoolId].isCreatorWithDraw, "ALREADY WITHDRAW");\n', '        uint256 totalBalance = poolInfo[_shardPoolId].balanceOfWantToken;\n', '        uint256 platformAmount = shardInfo[_shardPoolId].shardForPlatform;\n', '        uint256 fee =\n', '            poolInfo[_shardPoolId].balanceOfWantToken.mul(platformAmount).div(\n', '                shardInfo[_shardPoolId].shardForStakers\n', '            );\n', '        uint256 amount = totalBalance.sub(fee);\n', '        poolInfo[_shardPoolId].isCreatorWithDraw = true;\n', '        if (poolInfo[_shardPoolId].wantToken == WETH) {\n', '            IWETH(WETH).withdraw(amount);\n', '            TransferHelper.safeTransferETH(msg.sender, amount);\n', '        } else {\n', '            TransferHelper.safeTransfer(\n', '                poolInfo[_shardPoolId].wantToken,\n', '                msg.sender,\n', '                amount\n', '            );\n', '        }\n', '        uint256 creatorAmount = shardInfo[_shardPoolId].shardForCreator;\n', '        address shardToken = shardInfo[_shardPoolId].shardToken;\n', '        IShardToken(shardToken).mint(\n', '            poolInfo[_shardPoolId].creator,\n', '            creatorAmount\n', '        );\n', '    }\n', '\n', '    function applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\n', '        external\n', '        override\n', '        returns (uint256 proposalId)\n', '    {\n', '        proposalId = _applyForBuyout(_shardPoolId, wantTokenAmount);\n', '    }\n', '\n', '    function applyForBuyoutETH(uint256 _shardPoolId)\n', '        external\n', '        payable\n', '        override\n', '        returns (uint256 proposalId)\n', '    {\n', '        require(poolInfo[_shardPoolId].wantToken == WETH, "UNWANTED");\n', '        proposalId = _applyForBuyout(_shardPoolId, msg.value);\n', '    }\n', '\n', '    function _applyForBuyout(uint256 _shardPoolId, uint256 wantTokenAmount)\n', '        private\n', '        returns (uint256 proposalId)\n', '    {\n', '        require(msg.sender == tx.origin, "INVALID SENDER");\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.Listed,\n', '            "LISTED STATE IS REQUIRED"\n', '        );\n', '        uint256 shardBalance =\n', '            IShardToken(shardInfo[_shardPoolId].shardToken).balanceOf(\n', '                msg.sender\n', '            );\n', '        uint256 totalShardSupply = shardInfo[_shardPoolId].totalShardSupply;\n', '\n', '        uint256 currentPrice = getPrice(_shardPoolId);\n', '        uint256 buyoutTimes;\n', '        (proposalId, buyoutTimes) = IBuyoutProposals(buyoutProposals)\n', '            .createProposal(\n', '            _shardPoolId,\n', '            shardBalance,\n', '            wantTokenAmount,\n', '            currentPrice,\n', '            totalShardSupply,\n', '            msg.sender\n', '        );\n', '        if (\n', '            poolInfo[_shardPoolId].wantToken == WETH &&\n', '            msg.value == wantTokenAmount\n', '        ) {\n', '            IWETH(WETH).deposit{value: wantTokenAmount}();\n', '        } else {\n', '            TransferHelper.safeTransferFrom(\n', '                poolInfo[_shardPoolId].wantToken,\n', '                msg.sender,\n', '                address(this),\n', '                wantTokenAmount\n', '            );\n', '        }\n', '        TransferHelper.safeTransferFrom(\n', '            shardInfo[_shardPoolId].shardToken,\n', '            msg.sender,\n', '            address(this),\n', '            shardBalance\n', '        );\n', '\n', '        poolInfo[_shardPoolId].state = ShardsState.ApplyForBuyout;\n', '\n', '        emit ApplyForBuyout(\n', '            msg.sender,\n', '            proposalId,\n', '            _shardPoolId,\n', '            shardBalance,\n', '            wantTokenAmount,\n', '            block.timestamp,\n', '            buyoutTimes,\n', '            currentPrice,\n', '            block.number\n', '        );\n', '    }\n', '\n', '    function vote(uint256 _shardPoolId, bool isAgree) external override {\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.ApplyForBuyout,\n', '            "WRONG STATE"\n', '        );\n', '        address shard = shardInfo[_shardPoolId].shardToken;\n', '\n', '        (uint256 proposalId, uint256 balance) =\n', '            IBuyoutProposals(buyoutProposals).vote(\n', '                _shardPoolId,\n', '                isAgree,\n', '                shard,\n', '                msg.sender\n', '            );\n', '        emit Vote(msg.sender, proposalId, _shardPoolId, isAgree, balance);\n', '    }\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        override\n', '        returns (bool)\n', '    {\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.ApplyForBuyout,\n', '            "WRONG STATE"\n', '        );\n', '        (\n', '            uint256 proposalId,\n', '            bool result,\n', '            address submitter,\n', '            uint256 shardAmount,\n', '            uint256 wantTokenAmount\n', '        ) = IBuyoutProposals(buyoutProposals).voteResultConfirm(_shardPoolId);\n', '\n', '        if (result) {\n', '            poolInfo[_shardPoolId].state = ShardsState.Buyout;\n', '            IShardToken(shardInfo[_shardPoolId].shardToken).burn(shardAmount);\n', '            shardInfo[_shardPoolId].burnAmount = shardInfo[_shardPoolId]\n', '                .burnAmount\n', '                .add(shardAmount);\n', '\n', '            _transferOut(_shardPoolId, submitter);\n', '\n', '            _getProfit(_shardPoolId, wantTokenAmount, shardAmount);\n', '        } else {\n', '            poolInfo[_shardPoolId].state = ShardsState.Listed;\n', '        }\n', '\n', '        emit VoteResultConfirm(proposalId, _shardPoolId, result);\n', '\n', '        return result;\n', '    }\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        override\n', '        returns (uint256 wantTokenAmount)\n', '    {\n', '        require(\n', '            poolInfo[_shardPoolId].state == ShardsState.Buyout,\n', '            "WRONG STATE"\n', '        );\n', '        TransferHelper.safeTransferFrom(\n', '            shardInfo[_shardPoolId].shardToken,\n', '            msg.sender,\n', '            address(this),\n', '            shardAmount\n', '        );\n', '        IShardToken(shardInfo[_shardPoolId].shardToken).burn(shardAmount);\n', '        shardInfo[_shardPoolId].burnAmount = shardInfo[_shardPoolId]\n', '            .burnAmount\n', '            .add(shardAmount);\n', '\n', '        wantTokenAmount = IBuyoutProposals(buyoutProposals)\n', '            .exchangeForWantToken(_shardPoolId, shardAmount);\n', '        require(wantTokenAmount > 0, "LESS THAN 1 WEI");\n', '        if (poolInfo[_shardPoolId].wantToken == WETH) {\n', '            IWETH(WETH).withdraw(wantTokenAmount);\n', '            TransferHelper.safeTransferETH(msg.sender, wantTokenAmount);\n', '        } else {\n', '            TransferHelper.safeTransfer(\n', '                poolInfo[_shardPoolId].wantToken,\n', '                msg.sender,\n', '                wantTokenAmount\n', '            );\n', '        }\n', '    }\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId)\n', '        external\n', '        override\n', '        returns (uint256 shardTokenAmount, uint256 wantTokenAmount)\n', '    {\n', '        uint256 shardPoolId;\n', '        (shardPoolId, shardTokenAmount, wantTokenAmount) = IBuyoutProposals(\n', '            buyoutProposals\n', '        )\n', '            .redeemForBuyoutFailed(_proposalId, msg.sender);\n', '        TransferHelper.safeTransfer(\n', '            shardInfo[shardPoolId].shardToken,\n', '            msg.sender,\n', '            shardTokenAmount\n', '        );\n', '        if (poolInfo[shardPoolId].wantToken == WETH) {\n', '            IWETH(WETH).withdraw(wantTokenAmount);\n', '            TransferHelper.safeTransferETH(msg.sender, wantTokenAmount);\n', '        } else {\n', '            TransferHelper.safeTransfer(\n', '                poolInfo[shardPoolId].wantToken,\n', '                msg.sender,\n', '                wantTokenAmount\n', '            );\n', '        }\n', '    }\n', '\n', '    function _successToSetPrice(uint256 _shardPoolId) private {\n', '        address shardToken = _deployShardsToken(_shardPoolId);\n', '        poolInfo[_shardPoolId].state = ShardsState.Listed;\n', '        shardInfo[_shardPoolId].shardToken = shardToken;\n', '        address wantToken = poolInfo[_shardPoolId].wantToken;\n', '        uint256 platformAmount = shardInfo[_shardPoolId].shardForPlatform;\n', '        IShardToken(shardToken).mint(address(this), platformAmount);\n', '        uint256 shardPrice =\n', '            poolInfo[_shardPoolId].balanceOfWantToken.mul(1e18).div(\n', '                shardInfo[_shardPoolId].shardForStakers\n', '            );\n', '        //fee= shardPrice * platformAmount =balanceOfWantToken * platformAmount / shardForStakers\n', '        uint256 fee =\n', '            poolInfo[_shardPoolId].balanceOfWantToken.mul(platformAmount).div(\n', '                shardInfo[_shardPoolId].shardForStakers\n', '            );\n', '        poolInfo[_shardPoolId].openingPrice = shardPrice;\n', '        //addLiquidity\n', '        TransferHelper.safeApprove(shardToken, router, platformAmount);\n', '        TransferHelper.safeApprove(wantToken, router, fee);\n', '        IUniswapV2Router02(router).addLiquidity(\n', '            shardToken,\n', '            wantToken,\n', '            platformAmount,\n', '            fee,\n', '            0,\n', '            0,\n', '            address(this),\n', '            now.add(60)\n', '        );\n', '\n', '        _addFarmPool(_shardPoolId);\n', '\n', '        emit SettleSuccess(\n', '            _shardPoolId,\n', '            platformAmount,\n', '            shardInfo[_shardPoolId].shardForStakers,\n', '            poolInfo[_shardPoolId].balanceOfWantToken,\n', '            fee,\n', '            shardToken\n', '        );\n', '    }\n', '\n', '    function _getProfit(\n', '        uint256 _shardPoolId,\n', '        uint256 wantTokenAmount,\n', '        uint256 shardAmount\n', '    ) private {\n', '        address shardToken = shardInfo[_shardPoolId].shardToken;\n', '        address wantToken = poolInfo[_shardPoolId].wantToken;\n', '\n', '        address lPTokenAddress =\n', '            NFTLibrary.getPair(shardToken, wantToken, factory);\n', '        uint256 LPTokenBalance =\n', '            NFTLibrary.balanceOf(address(this), lPTokenAddress);\n', '        TransferHelper.safeApprove(lPTokenAddress, router, LPTokenBalance);\n', '        (uint256 amountShardToken, uint256 amountWantToken) =\n', '            IUniswapV2Router02(router).removeLiquidity(\n', '                shardToken,\n', '                wantToken,\n', '                LPTokenBalance,\n', '                0,\n', '                0,\n', '                address(this),\n', '                now.add(60)\n', '            );\n', '        IShardToken(shardInfo[_shardPoolId].shardToken).burn(amountShardToken);\n', '        shardInfo[_shardPoolId].burnAmount = shardInfo[_shardPoolId]\n', '            .burnAmount\n', '            .add(amountShardToken);\n', '        uint256 supply = shardInfo[_shardPoolId].totalShardSupply;\n', '        uint256 wantTokenAmountForExchange =\n', '            amountShardToken.mul(wantTokenAmount).div(supply.sub(shardAmount));\n', '        uint256 totalProfit = amountWantToken.add(wantTokenAmountForExchange);\n', '        uint256 profitForDev = totalProfit.mul(profitProportionForDev).div(max);\n', '        uint256 profitForPlatformFund = totalProfit.sub(profitForDev);\n', '        TransferHelper.safeTransfer(wantToken, dev, profitForDev);\n', '        TransferHelper.safeTransfer(\n', '            wantToken,\n', '            platformFund,\n', '            profitForPlatformFund\n', '        );\n', '    }\n', '\n', '    function _transferIn(\n', '        uint256 shardPoolId,\n', '        Token721[] calldata token721s,\n', '        Token1155[] calldata token1155s,\n', '        address from\n', '    ) private {\n', '        require(\n', '            token721s.length.add(token1155s.length) > 0,\n', '            "INSUFFIENT TOKEN"\n', '        );\n', '        for (uint256 i = 0; i < token721s.length; i++) {\n', '            Token721 memory token = token721s[i];\n', '            Token721s[shardPoolId].push(token);\n', '\n', '            IERC721(token.contractAddress).safeTransferFrom(\n', '                from,\n', '                address(this),\n', '                token.tokenId\n', '            );\n', '        }\n', '        for (uint256 i = 0; i < token1155s.length; i++) {\n', '            Token1155 memory token = token1155s[i];\n', '            require(token.amount > 0, "INSUFFIENT TOKEN");\n', '            Token1155s[shardPoolId].push(token);\n', '            IERC1155(token.contractAddress).safeTransferFrom(\n', '                from,\n', '                address(this),\n', '                token.tokenId,\n', '                token.amount,\n', '                ""\n', '            );\n', '        }\n', '    }\n', '\n', '    function _transferOut(uint256 shardPoolId, address to) private {\n', '        Token721[] memory token721s = Token721s[shardPoolId];\n', '        Token1155[] memory token1155s = Token1155s[shardPoolId];\n', '        for (uint256 i = 0; i < token721s.length; i++) {\n', '            Token721 memory token = token721s[i];\n', '            IERC721(token.contractAddress).safeTransferFrom(\n', '                address(this),\n', '                to,\n', '                token.tokenId\n', '            );\n', '        }\n', '        for (uint256 i = 0; i < token1155s.length; i++) {\n', '            Token1155 memory token = token1155s[i];\n', '            IERC1155(token.contractAddress).safeTransferFrom(\n', '                address(this),\n', '                to,\n', '                token.tokenId,\n', '                token.amount,\n', '                ""\n', '            );\n', '        }\n', '    }\n', '\n', '    function _deployShardsToken(uint256 _shardPoolId)\n', '        private\n', '        returns (address token)\n', '    {\n', '        string memory name = shardInfo[_shardPoolId].shardName;\n', '        string memory symbol = shardInfo[_shardPoolId].shardSymbol;\n', '        token = IShardsFactory(shardsFactory).createShardToken(\n', '            _shardPoolId,\n', '            name,\n', '            symbol\n', '        );\n', '    }\n', '\n', '    function _addFarmPool(uint256 _shardPoolId) private {\n', '        address shardToken = shardInfo[_shardPoolId].shardToken;\n', '        address wantToken = poolInfo[_shardPoolId].wantToken;\n', '        address lPTokenSwap =\n', '            NFTLibrary.getPair(shardToken, wantToken, factory);\n', '\n', '        address TokenToEthSwap =\n', '            wantToken == WETH\n', '                ? address(0)\n', '                : NFTLibrary.getPair(wantToken, WETH, factory);\n', '\n', '        IShardsFarm(shardsFarm).add(_shardPoolId, lPTokenSwap, TokenToEthSwap);\n', '    }\n', '\n', '    //governance operation\n', '    function setDeadlineForStake(uint256 _deadlineForStake) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        deadlineForStake = _deadlineForStake;\n', '    }\n', '\n', '    function setDeadlineForRedeem(uint256 _deadlineForRedeem)\n', '        external\n', '        override\n', '    {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        deadlineForRedeem = _deadlineForRedeem;\n', '    }\n', '\n', '    function setShardsCreatorProportion(uint256 _shardsCreatorProportion)\n', '        external\n', '        override\n', '    {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        require(_shardsCreatorProportion < max, "INVALID");\n', '        shardsCreatorProportion = _shardsCreatorProportion;\n', '    }\n', '\n', '    function setPlatformProportion(uint256 _platformProportion)\n', '        external\n', '        override\n', '    {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        require(_platformProportion < max, "INVALID");\n', '        platformProportion = _platformProportion;\n', '    }\n', '\n', '    function setTotalSupply(uint256 _totalSupply) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    function setProfitProportionForDev(uint256 _profitProportionForDev)\n', '        external\n', '        override\n', '    {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        profitProportionForDev = _profitProportionForDev;\n', '    }\n', '\n', '    function setShardsFarm(address _shardsFarm) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        shardsFarm = _shardsFarm;\n', '    }\n', '\n', '    function setRegulator(address _regulator) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        regulator = _regulator;\n', '    }\n', '\n', '    function setFactory(address _factory) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        factory = _factory;\n', '    }\n', '\n', '    function setShardsFactory(address _shardsFactory) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        shardsFactory = _shardsFactory;\n', '    }\n', '\n', '    function setRouter(address _router) external override {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '        router = _router;\n', '    }\n', '\n', '    //admin operation\n', '    function setPlatformFund(address _platformFund) external override {\n', '        require(msg.sender == admin, "UNAUTHORIZED");\n', '        platformFund = _platformFund;\n', '    }\n', '\n', '    function setDev(address _dev) external override {\n', '        require(msg.sender == admin, "UNAUTHORIZED");\n', '        dev = _dev;\n', '    }\n', '\n', '    //pending function  not use right now\n', '\n', '    // function shardAudit(uint256 _shardPoolId, bool isPassed) external override {\n', '    //     require(msg.sender == admin, "UNAUTHORIZED");\n', '    //     require(\n', '    //         poolInfo[_shardPoolId].state == ShardsState.Pending,\n', '    //         "WRONG STATE"\n', '    //     );\n', '    //     if (isPassed) {\n', '    //         poolInfo[_shardPoolId].state = ShardsState.Live;\n', '    //     } else {\n', '    //         poolInfo[_shardPoolId].state = ShardsState.AuditFailed;\n', '    //         address shardCreator = poolInfo[_shardPoolId].creator;\n', '    //         _transferOut(_shardPoolId, shardCreator);\n', '    //     }\n', '    // }\n', '\n', '    //view function\n', '    function getPrice(uint256 _shardPoolId)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256 currentPrice)\n', '    {\n', '        address tokenA = shardInfo[_shardPoolId].shardToken;\n', '        address tokenB = poolInfo[_shardPoolId].wantToken;\n', '        currentPrice = NFTLibrary.getPrice(tokenA, tokenB, factory);\n', '    }\n', '\n', '    function getAllPools()\n', '        external\n', '        view\n', '        override\n', '        returns (uint256[] memory _pools)\n', '    {\n', '        _pools = allPools;\n', '    }\n', '\n', '    function getTokens(uint256 shardPoolId)\n', '        external\n', '        view\n', '        override\n', '        returns (Token721[] memory _token721s, Token1155[] memory _token1155s)\n', '    {\n', '        _token721s = Token721s[shardPoolId];\n', '        _token1155s = Token1155s[shardPoolId];\n', '    }\n', '}']