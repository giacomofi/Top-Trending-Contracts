['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * a contract must implement this interface in order to support relayed transaction.\n', ' * It is better to inherit the BaseRelayRecipient as its implementation.\n', ' */\n', 'abstract contract IRelayRecipient {\n', '\n', '    /**\n', '     * return if the forwarder is trusted to forward relayed transactions to us.\n', "     * the forwarder is required to verify the sender's signature, and verify\n", '     * the call is not a replay.\n', '     */\n', '    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n', '     * of the msg.data.\n', '     * otherwise, return `msg.sender`\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal virtual view returns (address payable);\n', '\n', '    function versionRecipient() external virtual view returns (string memory);\n', '}\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * A base contract to be inherited by any contract that want to receive relayed transactions\n', ' * A subclass must use "_msgSender()" instead of "msg.sender"\n', ' */\n', 'abstract contract BaseRelayRecipient is IRelayRecipient {\n', '\n', '    /*\n', '     * Forwarder singleton we accept calls from\n', '     */\n', '    address public trustedForwarder;\n', '\n', '    /*\n', '     * require a function to be called through GSN only\n', '     */\n', '    modifier trustedForwarderOnly() {\n', '        require(msg.sender == address(trustedForwarder), "Function can only be called through the trusted Forwarder");\n', '        _;\n', '    }\n', '\n', '    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n', '        return forwarder == trustedForwarder;\n', '    }\n', '\n', '    /**\n', '     * return the sender of this call.\n', '     * if the call came through our trusted forwarder, return the original sender.\n', '     * otherwise, return `msg.sender`.\n', '     * should be used in the contract anywhere instead of msg.sender\n', '     */\n', '    function _msgSender() internal override virtual view returns (address payable ret) {\n', '        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n', '            // At this point we know that the sender is a trusted forwarder,\n', '            // so we trust that the last bytes of msg.data are the verified sender address.\n', '            // extract sender address from the end of msg.data\n', '            assembly {\n', '                ret := shr(96,calldataload(sub(calldatasize(),20)))\n', '            }\n', '        } else {\n', '            return msg.sender;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "../GSN/Context.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    event PauserChanged(\n', '        address indexed previousPauser,\n', '        address indexed newPauser\n', '    );\n', '\n', '    bool private _paused;\n', '    address private _pauser;\n', '\n', '    /**\n', '     * @dev The pausable constructor sets the original `pauser` of the contract to the sender\n', '     * account & Initializes the contract in unpaused state..\n', '     */\n', '    constructor(address pauser) public {\n', '        _pauser = pauser;\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the pauser.\n', '     */\n', '    modifier onlyPauser() {\n', '        require(\n', '            isPauser(),\n', '            "Only pauser is allowed to perform this operation"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function pauser() public view returns (address) {\n', '        return _pauser;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isPauser() public view returns (bool) {\n', '        return msg.sender == _pauser;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function isPaused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current pauser to transfer control of the contract to a newPauser.\n', '     * @param newPauser The address to transfer pauserShip to.\n', '     */\n', '    function changePauser(address newPauser) public onlyPauser {\n', '        _changePauser(newPauser);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newPauser.\n', '     * @param newPauser The address to transfer ownership to.\n', '     */\n', '    function _changePauser(address newPauser) internal {\n', '        require(newPauser != address(0));\n', '        emit PauserChanged(_pauser, newPauser);\n', '        _pauser = newPauser;\n', '    }\n', '\n', '    function renouncePauser() public onlyPauser {\n', '        emit PauserChanged(_pauser, address(0));\n', '        _pauser = address(0);\n', '    }\n', '    \n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_pauser);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_pauser);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor(address owner) public {\n', '        _owner = owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(\n', '            isOwner(),\n', '            "Only contract owner is allowed to perform this operation"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'contract ExecutorManager is Ownable {\n', '    address[] internal executors;\n', '    mapping(address => bool) internal executorStatus;\n', '\n', '    event ExecutorAdded(address executor, address owner);\n', '    event ExecutorRemoved(address executor, address owner);\n', '\n', '    // MODIFIERS\n', '    modifier onlyExecutor() {\n', '        require(\n', '            executorStatus[msg.sender],\n', '            "You are not allowed to perform this operation"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address owner) public Ownable(owner) {\n', '        require( owner != address(0), "owner cannot be zero");\n', '    }\n', '\n', '    function getExecutorStatus(address executor)\n', '        public\n', '        view\n', '        returns (bool status)\n', '    {\n', '        status = executorStatus[executor];\n', '    }\n', '\n', '    function getAllExecutors() public view returns (address[] memory) {\n', '        return executors;\n', '    }\n', '\n', '    //Register new Executors\n', '    function addExecutors(address[] calldata executorArray) external onlyOwner {\n', '        for (uint256 i = 0; i < executorArray.length; i++) {\n', '            addExecutor(executorArray[i]);\n', '        }\n', '    }\n', '\n', '    // Register single executor\n', '    function addExecutor(address executorAddress) public onlyOwner {\n', '        require(executorAddress != address(0), "executor address can not be 0");\n', '        executors.push(executorAddress);\n', '        executorStatus[executorAddress] = true;\n', '        emit ExecutorAdded(executorAddress, msg.sender);\n', '    }\n', '\n', '    //Remove registered Executors\n', '    function removeExecutors(address[] calldata executorArray) external onlyOwner {\n', '        for (uint256 i = 0; i < executorArray.length; i++) {\n', '            removeExecutor(executorArray[i]);\n', '        }\n', '    }\n', '\n', '    // Remove Register single executor\n', '    function removeExecutor(address executorAddress) public onlyOwner {\n', '        require(executorAddress != address(0), "executor address can not be 0");\n', '        executorStatus[executorAddress] = false;\n', '        emit ExecutorRemoved(executorAddress, msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquidityPoolManager is ReentrancyGuard, Ownable, BaseRelayRecipient, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    address private constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    uint256 public baseGas;\n', '    \n', '    ExecutorManager private executorManager;\n', '    uint256 public adminFee;\n', '\n', '    struct TokenInfo {\n', '        uint256 transferOverhead;\n', '        bool supportedToken;\n', '        uint256 minCap;\n', '        uint256 maxCap;\n', '        uint256 liquidity;\n', '        mapping(address => uint256) liquidityProvider;\n', '    }\n', '\n', '    mapping(address => TokenInfo) public tokensInfo;\n', '    mapping ( bytes32 => bool ) public processedHash;\n', '\n', '    event AssetSent(address indexed asset, uint256 indexed amount, address indexed target);\n', '    event Received(address indexed from, uint256 indexed amount);\n', '    event Deposit(address indexed from, address indexed tokenAddress, address indexed receiver, uint256 toChainId, uint256 amount);\n', '    event LiquidityAdded(address indexed from, address indexed tokenAddress, address indexed receiver, uint256 amount);\n', '    event LiquidityRemoved(address indexed tokenAddress, uint256 indexed amount, address indexed sender);\n', '    event fundsWithdraw(address indexed tokenAddress, address indexed owner,  uint256 indexed amount);\n', '    \n', '    // MODIFIERS\n', '    modifier onlyExecutor() {\n', '        require(executorManager.getExecutorStatus(_msgSender()),\n', '            "You are not allowed to perform this operation"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier tokenChecks(address tokenAddress){\n', '        require(tokenAddress != address(0), "Token address cannot be 0");\n', '        require(tokensInfo[tokenAddress].supportedToken, "Token not supported");\n', '\n', '        _;\n', '    }\n', '\n', '    constructor(address _executorManagerAddress, address owner, address pauser, address _trustedForwarder, uint256 _adminFee) public Ownable(owner) Pausable(pauser) {\n', '        require(_executorManagerAddress != address(0), "ExecutorManager Contract Address cannot be 0");\n', '        require(owner != address(0), "Owner Address cannot be 0");\n', '        require(_trustedForwarder != address(0), "TrustedForwarder Contract Address cannot be 0");\n', '        require(_adminFee != 0, "AdminFee cannot be 0");\n', '        executorManager = ExecutorManager(_executorManagerAddress);\n', '        trustedForwarder = _trustedForwarder;\n', '        adminFee = _adminFee;\n', '        baseGas = 21000;\n', '    }\n', '\n', '    function getAdminFee() public view returns (uint256 ) {\n', '        return adminFee;\n', '    }\n', '\n', '    function changeAdminFee(uint256 newAdminFee) public onlyOwner whenNotPaused {\n', '        require(newAdminFee != 0, "Admin Fee cannot be 0");\n', '        adminFee = newAdminFee;\n', '    }\n', '\n', '    function versionRecipient() external override virtual view returns (string memory){\n', '        return "1";\n', '    }\n', '\n', '    function setBaseGas(uint128 gas) external onlyOwner{\n', '        baseGas = gas;\n', '    }\n', '\n', '    function getExecutorManager() public view returns (address){\n', '        return address(executorManager);\n', '    }\n', '\n', '    function setExecutorManager(address _executorManagerAddress) public onlyOwner {\n', '        require(_executorManagerAddress != address(0), "Executor Manager Address cannot be 0");\n', '        executorManager = ExecutorManager(_executorManagerAddress);\n', '    }\n', '\n', '    function setTrustedForwarder( address forwarderAddress ) public onlyOwner {\n', '        require(forwarderAddress != address(0), "Forwarder Address cannot be 0");\n', '        trustedForwarder = forwarderAddress;\n', '    }\n', '\n', '    function setTokenTransferOverhead( address tokenAddress, uint256 gasOverhead ) public tokenChecks(tokenAddress) onlyOwner {\n', '        tokensInfo[tokenAddress].transferOverhead = gasOverhead;\n', '    }\n', '\n', '    function addSupportedToken( address tokenAddress, uint256 minCapLimit, uint256 maxCapLimit ) public onlyOwner {\n', '        require(tokenAddress != address(0), "Token address cannot be 0");  \n', '        require(maxCapLimit > minCapLimit, "maxCapLimit cannot be smaller than minCapLimit");        \n', '        tokensInfo[tokenAddress].supportedToken = true;\n', '        tokensInfo[tokenAddress].minCap = minCapLimit;\n', '        tokensInfo[tokenAddress].maxCap = maxCapLimit;\n', '    }\n', '\n', '    function removeSupportedToken( address tokenAddress ) public tokenChecks(tokenAddress) onlyOwner {\n', '        tokensInfo[tokenAddress].supportedToken = false;\n', '    }\n', '\n', '    function updateTokenCap( address tokenAddress, uint256 minCapLimit, uint256 maxCapLimit ) public tokenChecks(tokenAddress) onlyOwner {\n', '        require(maxCapLimit > minCapLimit, "maxCapLimit cannot be smaller than minCapLimit");                \n', '        tokensInfo[tokenAddress].minCap = minCapLimit;        \n', '        tokensInfo[tokenAddress].maxCap = maxCapLimit;\n', '    }\n', '\n', '    function addNativeLiquidity() public payable whenNotPaused {\n', '        require(msg.value > 0, "amount should be greater then 0");\n', '        address payable sender = _msgSender();\n', '        tokensInfo[NATIVE].liquidityProvider[sender] = tokensInfo[NATIVE].liquidityProvider[sender].add(msg.value);\n', '        tokensInfo[NATIVE].liquidity = tokensInfo[NATIVE].liquidity.add(msg.value);\n', '\n', '        emit LiquidityAdded(sender, NATIVE, address(this), msg.value);\n', '    }\n', '\n', '    function removeNativeLiquidity(uint256 amount) public whenNotPaused nonReentrant {\n', '        require(amount != 0 , "Amount cannot be 0");\n', '        address payable sender = _msgSender();\n', '        require(tokensInfo[NATIVE].liquidityProvider[sender] >= amount, "Not enough balance");\n', '        tokensInfo[NATIVE].liquidityProvider[sender] = tokensInfo[NATIVE].liquidityProvider[sender].sub(amount);\n', '        tokensInfo[NATIVE].liquidity = tokensInfo[NATIVE].liquidity.sub(amount);\n', '        \n', '        (bool success, ) = sender.call{ value: amount }("");\n', '        require(success, "Native Transfer Failed");\n', '\n', '        emit LiquidityRemoved( NATIVE, amount, sender);\n', '    }\n', '\n', '    function addTokenLiquidity( address tokenAddress, uint256 amount ) public tokenChecks(tokenAddress) whenNotPaused {\n', '        require(amount > 0, "amount should be greater then 0");\n', '        address payable sender = _msgSender();\n', '        tokensInfo[tokenAddress].liquidityProvider[sender] = tokensInfo[tokenAddress].liquidityProvider[sender].add(amount);\n', '        tokensInfo[tokenAddress].liquidity = tokensInfo[tokenAddress].liquidity.add(amount);\n', '        \n', '        SafeERC20.safeTransferFrom(IERC20(tokenAddress), sender, address(this), amount);\n', '        emit LiquidityAdded(sender, tokenAddress, address(this), amount);\n', '    }\n', '\n', '    function removeTokenLiquidity( address tokenAddress, uint256 amount ) public tokenChecks(tokenAddress) whenNotPaused {\n', '        require(amount > 0, "amount should be greater then 0");\n', '        address payable sender = _msgSender();\n', '        require(tokensInfo[tokenAddress].liquidityProvider[sender] >= amount, "Not enough balance");\n', '\n', '        tokensInfo[tokenAddress].liquidityProvider[sender] = tokensInfo[tokenAddress].liquidityProvider[sender].sub(amount);\n', '        tokensInfo[tokenAddress].liquidity = tokensInfo[tokenAddress].liquidity.sub(amount);\n', '\n', '        SafeERC20.safeTransfer(IERC20(tokenAddress), sender, amount);\n', '        emit LiquidityRemoved( tokenAddress, amount, sender);\n', '\n', '    }\n', '\n', '    function getLiquidity(address liquidityProviderAddress, address tokenAddress) public view returns (uint256 ) {\n', '        return tokensInfo[tokenAddress].liquidityProvider[liquidityProviderAddress];\n', '    }\n', '\n', '    function depositErc20( address tokenAddress, address receiver, uint256 amount, uint256 toChainId ) public tokenChecks(tokenAddress) whenNotPaused {\n', '        require(tokensInfo[tokenAddress].minCap <= amount && tokensInfo[tokenAddress].maxCap >= amount, "Deposit amount should be within allowed Cap limits");\n', '        require(receiver != address(0), "Receiver address cannot be 0");\n', '        require(amount > 0, "amount should be greater then 0");\n', '\n', '        address payable sender = _msgSender();\n', '\n', '        SafeERC20.safeTransferFrom(IERC20(tokenAddress), sender, address(this),amount);\n', '        emit Deposit(sender, tokenAddress, receiver, toChainId, amount);\n', '    }\n', '\n', '    function depositNative( address receiver, uint256 toChainId ) public whenNotPaused payable {\n', '        require(tokensInfo[NATIVE].minCap <= msg.value && tokensInfo[NATIVE].maxCap >= msg.value, "Deposit amount should be within allowed Cap limit");\n', '        require(receiver != address(0), "Receiver address cannot be 0");\n', '        require(msg.value > 0, "amount should be greater then 0");\n', '\n', '        emit Deposit(_msgSender(), NATIVE, receiver, toChainId, msg.value);\n', '    }\n', '\n', '    function sendFundsToUser( address tokenAddress, uint256 amount, address payable receiver, bytes memory depositHash, uint256 tokenGasPrice ) public nonReentrant onlyExecutor tokenChecks(tokenAddress) whenNotPaused {\n', '        uint256 initialGas = gasleft();\n', '        require(tokensInfo[tokenAddress].minCap <= amount && tokensInfo[tokenAddress].maxCap >= amount, "Withdraw amount should be within allowed Cap limits");\n', '        require(receiver != address(0), "Bad receiver address");\n', '        \n', '        (bytes32 hashSendTransaction, bool status) = checkHashStatus(tokenAddress, amount, receiver, depositHash);\n', '\n', '        require(!status, "Already Processed");\n', '        processedHash[hashSendTransaction] = true;\n', '\n', '        uint256 calculateAdminFee = amount.mul(adminFee).div(10000);\n', '        uint256 totalGasUsed = (initialGas.sub(gasleft())).add(tokensInfo[tokenAddress].transferOverhead).add(baseGas);\n', '\n', '        uint256 gasFeeInToken = totalGasUsed.mul(tokenGasPrice);\n', '        uint256 amountToTransfer = amount.sub(calculateAdminFee.add(gasFeeInToken));\n', '\n', '        if (tokenAddress == NATIVE) {\n', '            require(address(this).balance >= amountToTransfer, "Not Enough Balance");\n', '            (bool success, ) = receiver.call{ value: amount }("");\n', '            require(success, "Native Transfer Failed");\n', '        } else {\n', '            require(IERC20(tokenAddress).balanceOf(address(this)) >= amountToTransfer, "Not Enough Balance");\n', '            SafeERC20.safeTransfer(IERC20(tokenAddress), receiver, amountToTransfer);\n', '        }\n', '\n', '        emit AssetSent(tokenAddress, amountToTransfer, receiver);\n', '    }\n', '\n', '    function checkHashStatus(address tokenAddress, uint256 amount, address payable receiver, bytes memory depositHash) public view returns(bytes32 hashSendTransaction, bool status){\n', '        hashSendTransaction = keccak256(\n', '            abi.encode(\n', '                tokenAddress,\n', '                amount,\n', '                receiver,\n', '                keccak256(depositHash)\n', '            )\n', '        );\n', '\n', '        status = processedHash[hashSendTransaction];\n', '    }\n', '\n', '    function withdrawErc20(address tokenAddress) public onlyOwner whenNotPaused {\n', '        uint256 profitEarned = (IERC20(tokenAddress).balanceOf(address(this))).sub(tokensInfo[tokenAddress].liquidity);\n', '        require(profitEarned > 0, "Profit earned is 0");\n', '        address payable sender = _msgSender();\n', '\n', '        SafeERC20.safeTransfer(IERC20(tokenAddress), sender, profitEarned);\n', '\n', '        emit fundsWithdraw(tokenAddress, sender,  profitEarned);\n', '    }\n', '\n', '    function withdrawNative() public onlyOwner whenNotPaused {\n', '        uint256 profitEarned = (address(this).balance).sub(tokensInfo[NATIVE].liquidity);\n', '        require(profitEarned > 0, "Profit earned is 0");\n', '        address payable sender = _msgSender();\n', '        (bool success, ) = sender.call{ value: profitEarned }("");\n', '        require(success, "Native Transfer Failed");\n', '        \n', '        emit fundsWithdraw(address(this), sender, profitEarned);\n', '    }\n', '}']