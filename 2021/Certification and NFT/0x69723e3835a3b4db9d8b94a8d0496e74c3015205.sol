['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'library CloneLibrary {\n', '\n', '    function createClone(address target) internal returns (address result) {\n', '        // Reserve 55 bytes for the deploy code + 17 bytes as a buffer to prevent overwriting\n', '        // other memory in the final mstore\n', '        bytes memory cloneBuffer = new bytes(72);\n', '        assembly {\n', '            let clone := add(cloneBuffer, 32)\n', '            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone, 0x14), shl(96, target))\n', '            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            result := create(0, clone, 0x37)\n', '        }\n', '    }\n', '\n', '\n', '    function isClone(address target, address query) internal view returns (bool result) {\n', '        assembly {\n', '            let clone := mload(0x40)\n', '            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n', '            mstore(add(clone, 0xa), shl(96, target))\n', '            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '\n', '            let other := add(clone, 0x40)\n', '            extcodecopy(query, other, 0, 0x2d)\n', '            result := and(\n', '                eq(mload(clone), mload(other)),\n', '                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n', '            )\n', '        }\n', '    }\n', '}\n', '\n', '/// @author Conjure Finance Team\n', '/// @title StakingRewardsFactory\n', '/// @notice Factory contract to create new instances of StakingRewards\n', 'contract StakingRewardsFactory {\n', '    using CloneLibrary for address;\n', '\n', '    event NewStakingRewards(address stakingRewards);\n', '    event FactoryOwnerChanged(address newowner);\n', '\n', '    address payable public factoryOwner;\n', '    address public stakingRewardsImplementation;\n', '\n', '    constructor(\n', '        address _stakingRewardsImplementation\n', '    )\n', '    {\n', '        require(_stakingRewardsImplementation != address(0), "No zero address for stakingRewardsImplementation");\n', '\n', '        factoryOwner = msg.sender;\n', '        stakingRewardsImplementation = _stakingRewardsImplementation;\n', '    }\n', '\n', '    /**\n', '     * @dev lets anyone mint a new StakingRewards contract\n', '    */\n', '    function stakingRewardsMint(\n', '        address _owner,\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken,\n', '        uint256 _rewardsDuration\n', '    )\n', '    external\n', '    returns (address stakingRewardsAddress)\n', '    {\n', '        stakingRewardsAddress = stakingRewardsImplementation.createClone();\n', '\n', '        emit NewStakingRewards(stakingRewardsAddress);\n', '\n', '        IStakingRewards(stakingRewardsAddress).initialize(\n', '            _owner,\n', '            _rewardsDistribution,\n', '            _rewardsToken,\n', '            _stakingToken,\n', '            _rewardsDuration,\n', '            address(this)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev lets the owner change the current conjure implementation\n', '     *\n', '     * @param stakingRewardsImplementation_ the address of the new implementation\n', '    */\n', '    function newStakingRewardsImplementation(address stakingRewardsImplementation_) external {\n', '        require(msg.sender == factoryOwner, "Only factory owner");\n', '        require(stakingRewardsImplementation_ != address(0), "No zero address for stakingRewardsImplementation_");\n', '\n', '        stakingRewardsImplementation = stakingRewardsImplementation_;\n', '    }\n', '\n', '    /**\n', '     * @dev lets the owner change the ownership to another address\n', '     *\n', '     * @param newOwner the address of the new owner\n', '    */\n', '    function newFactoryOwner(address payable newOwner) external {\n', '        require(msg.sender == factoryOwner, "Only factory owner");\n', '        require(newOwner != address(0), "No zero address for newOwner");\n', '\n', '        factoryOwner = newOwner;\n', '        emit FactoryOwnerChanged(factoryOwner);\n', '    }\n', '}\n', '\n', 'interface IStakingRewards {\n', '    function initialize(\n', '        address _owner,\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken,\n', '        uint256 _rewardsDuration,\n', '        address _factoryContract\n', '    ) external;\n', '}']