['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', 'pragma solidity 0.8.2;\n', '\n', '\n', 'interface IUniswapV3SwapRouter {\n', '    struct ExactInputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactInputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactOutputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n', '\n', '    struct ExactOutputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n', '}\n', '\n', 'interface IUniswapV3Quoter {\n', '    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n', '    /// @param path The path of the swap, i.e. each token pair and the pool fee\n', '    /// @param amountIn The amount of the first token to swap\n', '    /// @return amountOut The amount of the last token that would be received\n', '    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n', '\n', '    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n', '    /// @param tokenIn The token being swapped in\n', '    /// @param tokenOut The token being swapped out\n', '    /// @param fee The fee of the token pool to consider for the pair\n', '    /// @param amountIn The desired input amount\n', '    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n', '    /// @return amountOut The amount of `tokenOut` that would be received\n', '    function quoteExactInputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountIn,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external returns (uint256 amountOut);\n', '\n', '    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n', '    /// @param path The path of the swap, i.e. each token pair and the pool fee\n', '    /// @param amountOut The amount of the last token to receive\n', '    /// @return amountIn The amount of first token required to be paid\n', '    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n', '\n', '    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n', '    /// @param tokenIn The token being swapped in\n', '    /// @param tokenOut The token being swapped out\n', '    /// @param fee The fee of the token pool to consider for the pair\n', '    /// @param amountOut The desired output amount\n', '    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n', '    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n', '    function quoteExactOutputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountOut,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external returns (uint256 amountIn);\n', '}\n', '\n', 'interface ISavingsManager {\n', '    /** @dev Admin privs */\n', '    function distributeUnallocatedInterest(address _mAsset) external;\n', '\n', '    /** @dev Liquidator */\n', '    function depositLiquidation(address _mAsset, uint256 _liquidation) external;\n', '\n', '    /** @dev Liquidator */\n', '    function collectAndStreamInterest(address _mAsset) external;\n', '\n', '    /** @dev Public privs */\n', '    function collectAndDistributeInterest(address _mAsset) external;\n', '\n', '    /** @dev getter for public lastBatchCollected mapping */\n', '    function lastBatchCollected(address _mAsset) external view returns (uint256);\n', '}\n', '\n', 'struct BassetPersonal {\n', '    // Address of the bAsset\n', '    address addr;\n', '    // Address of the bAsset\n', '    address integrator;\n', '    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n', '    bool hasTxFee; // takes a byte in storage\n', '    // Status of the bAsset\n', '    BassetStatus status;\n', '}\n', '\n', '// Status of the Basset - has it broken its peg?\n', 'enum BassetStatus {\n', '    Default,\n', '    Normal,\n', '    BrokenBelowPeg,\n', '    BrokenAbovePeg,\n', '    Blacklisted,\n', '    Liquidating,\n', '    Liquidated,\n', '    Failed\n', '}\n', '\n', 'struct BassetData {\n', '    // 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '    // If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '    uint128 ratio;\n', '    // Amount of the Basset that is held in Collateral\n', '    uint128 vaultBalance;\n', '}\n', '\n', 'abstract contract IMasset {\n', '    // Mint\n', '    function mint(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function mintMulti(\n', '        address[] calldata _inputs,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function getMintOutput(address _input, uint256 _inputQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    // Swaps\n', '    function swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 swapOutput);\n', '\n', '    function getSwapOutput(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity\n', '    ) external view virtual returns (uint256 swapOutput);\n', '\n', '    // Redemption\n', '    function redeem(\n', '        address _output,\n', '        uint256 _mAssetQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 outputQuantity);\n', '\n', '    function redeemMasset(\n', '        uint256 _mAssetQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) external virtual returns (uint256[] memory outputQuantities);\n', '\n', '    function redeemExactBassets(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mAssetRedeemed);\n', '\n', '    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 bAssetOutput);\n', '\n', '    function getRedeemExactBassetsOutput(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities\n', '    ) external view virtual returns (uint256 mAssetAmount);\n', '\n', '    // Views\n', '    function getBasket() external view virtual returns (bool, bool);\n', '\n', '    function getBasset(address _token)\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal memory personal, BassetData memory data);\n', '\n', '    function getBassets()\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal[] memory personal, BassetData[] memory data);\n', '\n', '    function bAssetIndexes(address) external view virtual returns (uint8);\n', '\n', '    function getPrice() external view virtual returns (uint256 price, uint256 k);\n', '\n', '    // SavingsManager\n', '    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\n', '\n', '    function collectPlatformInterest()\n', '        external\n', '        virtual\n', '        returns (uint256 mintAmount, uint256 newSupply);\n', '\n', '    // Admin\n', '    function setCacheSize(uint256 _cacheSize) external virtual;\n', '\n', '    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\n', '\n', '    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\n', '\n', '    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\n', '}\n', '\n', 'interface IPlatformIntegration {\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool isTokenFeeCharged\n', '    ) external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from the cache\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'interface IStakedAave {\n', '    function COOLDOWN_SECONDS() external returns (uint256);\n', '\n', '    function UNSTAKE_WINDOW() external returns (uint256);\n', '\n', '    function stake(address to, uint256 amount) external;\n', '\n', '    function redeem(address to, uint256 amount) external;\n', '\n', '    function cooldown() external;\n', '\n', '    function claimRewards(address to, uint256 amount) external;\n', '\n', '    function stakersCooldowns(address staker) external returns (uint256);\n', '}\n', '\n', 'interface ILendingPoolAddressesProviderV2 {\n', '    /**\n', '     * @notice Get the current address for Aave LendingPool\n', '     * @dev Lending pool is the core contract on which to call deposit\n', '     */\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', 'interface IAaveATokenV2 {\n', '    /**\n', '     * @notice returns the current total aToken balance of _user all interest collected included.\n', '     * To obtain the user asset principal balance with interests excluded , ERC20 non-standard\n', '     * method principalBalanceOf() can be used.\n', '     */\n', '    function balanceOf(address _user) external view returns (uint256);\n', '}\n', '\n', 'interface IAaveLendingPoolV2 {\n', '    /**\n', '     * @dev deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens)\n', '     * is minted.\n', '     * @param reserve the address of the reserve\n', '     * @param amount the amount to be deposited\n', '     * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\n', '     **/\n', '    function deposit(\n', '        address reserve,\n', '        uint256 amount,\n', '        address onBehalfOf,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '     * @dev withdraws the assets of user.\n', '     * @param reserve the address of the reserve\n', '     * @param amount the underlying amount to be redeemed\n', '     * @param to address that will receive the underlying\n', '     **/\n', '    function withdraw(\n', '        address reserve,\n', '        uint256 amount,\n', '        address to\n', '    ) external;\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferReturnBalance(\n', '        address _sender,\n', '        address _recipient,\n', '        address _bAsset,\n', '        uint256 _qty\n', '    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\n', '        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\n', '        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\n', '        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\n', '        receivedQty = recipientBalance - balBefore;\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender) internal {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\n', '    }\n', '}\n', '\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ModuleKeys {\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE =\n', '        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING =\n', '        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN =\n', '        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB =\n', '        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER =\n', '        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER =\n', '        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN =\n', '        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER =\n', '        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR =\n', '        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '    // keccak256("InterestValidator");\n', '    bytes32 internal constant KEY_INTEREST_VALIDATOR =\n', '        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '\n', '    function cancelProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '\n', '    function cancelLockModule(bytes32 _key) external;\n', '\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'abstract contract ImmutableModule is ModuleKeys {\n', '    INexus public immutable nexus;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        _onlyGovernor();\n', '        _;\n', '    }\n', '\n', '    function _onlyGovernor() internal view {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _liquidator() internal view returns (address) {\n', '        return nexus.getModule(KEY_LIQUIDATOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '}\n', '\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'abstract contract AbstractIntegration is\n', '    IPlatformIntegration,\n', '    Initializable,\n', '    ImmutableModule,\n', '    ReentrancyGuard\n', '{\n', '    event PTokenAdded(address indexed _bAsset, address _pToken);\n', '\n', '    event Deposit(address indexed _bAsset, address _pToken, uint256 _amount);\n', '    event Withdrawal(address indexed _bAsset, address _pToken, uint256 _amount);\n', '    event PlatformWithdrawal(\n', '        address indexed bAsset,\n', '        address pToken,\n', '        uint256 totalAmount,\n', '        uint256 userAmount\n', '    );\n', '\n', '    // LP has write access\n', '    address public immutable lpAddress;\n', '\n', '    // bAsset => pToken (Platform Specific Token Address)\n', '    mapping(address => address) public override bAssetToPToken;\n', '    // Full list of all bAssets supported here\n', '    address[] internal bAssetsMapped;\n', '\n', '    /**\n', '     * @param _nexus     Address of the Nexus\n', '     * @param _lp        Address of LP\n', '     */\n', '    constructor(address _nexus, address _lp) ReentrancyGuard() ImmutableModule(_nexus) {\n', '        require(_lp != address(0), "Invalid LP address");\n', '        lpAddress = _lp;\n', '    }\n', '\n', '    /**\n', '     * @dev Simple initializer to set first bAsset/pTokens\n', '     */\n', '    function initialize(address[] calldata _bAssets, address[] calldata _pTokens)\n', '        public\n', '        initializer\n', '    {\n', '        uint256 len = _bAssets.length;\n', '        require(len == _pTokens.length, "Invalid inputs");\n', '        for (uint256 i = 0; i < len; i++) {\n', '            _setPTokenAddress(_bAssets[i], _pTokens[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyLP() {\n', '        require(msg.sender == lpAddress, "Only the LP can execute");\n', '        _;\n', '    }\n', '\n', '    /***************************************\n', '                    CONFIG\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * This method can only be called by the system Governor\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function setPTokenAddress(address _bAsset, address _pToken) external onlyGovernor {\n', '        _setPTokenAddress(_bAsset, _pToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Provide support for bAsset by passing its pToken address.\n', '     * Add to internal mappings and execute the platform specific,\n', '     * abstract method `_abstractSetPToken`\n', '     * @param _bAsset   Address for the bAsset\n', '     * @param _pToken   Address for the corresponding platform token\n', '     */\n', '    function _setPTokenAddress(address _bAsset, address _pToken) internal {\n', '        require(bAssetToPToken[_bAsset] == address(0), "pToken already set");\n', '        require(_bAsset != address(0) && _pToken != address(0), "Invalid addresses");\n', '\n', '        bAssetToPToken[_bAsset] = _pToken;\n', '        bAssetsMapped.push(_bAsset);\n', '\n', '        emit PTokenAdded(_bAsset, _pToken);\n', '\n', '        _abstractSetPToken(_bAsset, _pToken);\n', '    }\n', '\n', '    function _abstractSetPToken(address _bAsset, address _pToken) internal virtual;\n', '\n', '    /**\n', '     * @dev Simple helper func to get the min of two values\n', '     */\n', '    function _min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? y : x;\n', '    }\n', '}\n', '\n', 'contract AaveV2Integration is AbstractIntegration {\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Core address for the given platform */\n', '    address public immutable platformAddress;\n', '    address public immutable rewardToken;\n', '\n', '    event RewardTokenApproved(address rewardToken, address account);\n', '\n', '    /**\n', '     * @param _nexus            Address of the Nexus\n', '     * @param _lp               Address of LP\n', '     * @param _platformAddress  Generic platform address\n', '     * @param _rewardToken      Reward token, if any\n', '     */\n', '    constructor(\n', '        address _nexus,\n', '        address _lp,\n', '        address _platformAddress,\n', '        address _rewardToken\n', '    ) AbstractIntegration(_nexus, _lp) {\n', '        require(_platformAddress != address(0), "Invalid platform address");\n', '\n', '        platformAddress = _platformAddress;\n', '\n', '        rewardToken = _rewardToken;\n', '    }\n', '\n', '    /***************************************\n', '                    ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Approves Liquidator to spend reward tokens\n', '     */\n', '    function approveRewardToken() external onlyGovernor {\n', '        address liquidator = nexus.getModule(keccak256("Liquidator"));\n', '        require(liquidator != address(0), "Liquidator address cannot be zero");\n', '\n', '        MassetHelpers.safeInfiniteApprove(rewardToken, liquidator);\n', '\n', '        emit RewardTokenApproved(rewardToken, liquidator);\n', '    }\n', '\n', '    /***************************************\n', '                    CORE\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Deposit a quantity of bAsset into the platform. Credited aTokens\n', '     *      remain here in the vault. Can only be called by whitelisted addresses\n', '     *      (mAsset and corresponding BasketManager)\n', '     * @param _bAsset              Address for the bAsset\n', '     * @param _amount              Units of bAsset to deposit\n', '     * @param _hasTxFee            Is the bAsset known to have a tx fee?\n', '     * @return quantityDeposited   Quantity of bAsset that entered the platform\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external override onlyLP nonReentrant returns (uint256 quantityDeposited) {\n', '        require(_amount > 0, "Must deposit something");\n', '\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '\n', '        quantityDeposited = _amount;\n', '\n', '        if (_hasTxFee) {\n', '            // If we charge a fee, account for it\n', '            uint256 prevBal = _checkBalance(aToken);\n', '            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\n', '            uint256 newBal = _checkBalance(aToken);\n', '            quantityDeposited = _min(quantityDeposited, newBal - prevBal);\n', '        } else {\n', '            _getLendingPool().deposit(_bAsset, _amount, address(this), 36);\n', '        }\n', '\n', '        emit Deposit(_bAsset, address(aToken), quantityDeposited);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the platform\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to withdraw\n', '     * @param _hasTxFee     Is the bAsset known to have a tx fee?\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external override onlyLP nonReentrant {\n', '        _withdraw(_receiver, _bAsset, _amount, _amount, _hasTxFee);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the platform\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to send to recipient\n', '     * @param _totalAmount  Total units to pull from lending platform\n', '     * @param _hasTxFee     Is the bAsset known to have a tx fee?\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external override onlyLP nonReentrant {\n', '        _withdraw(_receiver, _bAsset, _amount, _totalAmount, _hasTxFee);\n', '    }\n', '\n', '    /** @dev Withdraws _totalAmount from the lending pool, sending _amount to user */\n', '    function _withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) internal {\n', '        require(_totalAmount > 0, "Must withdraw something");\n', '\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '\n', '        if (_hasTxFee) {\n', '            require(_amount == _totalAmount, "Cache inactive for assets with fee");\n', '            _getLendingPool().withdraw(_bAsset, _amount, _receiver);\n', '        } else {\n', '            _getLendingPool().withdraw(_bAsset, _totalAmount, address(this));\n', '            // Send redeemed bAsset to the receiver\n', '            IERC20(_bAsset).safeTransfer(_receiver, _amount);\n', '        }\n', '\n', '        emit PlatformWithdrawal(_bAsset, address(aToken), _totalAmount, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a quantity of bAsset from the cache.\n', '     * @param _receiver     Address to which the bAsset should be sent\n', '     * @param _bAsset       Address of the bAsset\n', '     * @param _amount       Units of bAsset to withdraw\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external override onlyLP nonReentrant {\n', '        require(_amount > 0, "Must withdraw something");\n', '        require(_receiver != address(0), "Must specify recipient");\n', '\n', '        IERC20(_bAsset).safeTransfer(_receiver, _amount);\n', '\n', '        emit Withdrawal(_bAsset, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     *      This includes any interest that was generated since depositing\n', '     *      Aave gradually increases the balances of all aToken holders, as the interest grows\n', '     * @param _bAsset     Address of the bAsset\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function checkBalance(address _bAsset) external override returns (uint256 balance) {\n', '        // balance is always with token aToken decimals\n', '        IAaveATokenV2 aToken = _getATokenFor(_bAsset);\n', '        return _checkBalance(aToken);\n', '    }\n', '\n', '    /***************************************\n', '                    APPROVALS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Internal method to respond to the addition of new bAsset / pTokens\n', '     *      We need to approve the Aave lending pool core conrtact and give it permission\n', '     *      to spend the bAsset\n', '     * @param _bAsset Address of the bAsset to approve\n', '     */\n', '    function _abstractSetPToken(\n', '        address _bAsset,\n', '        address /*_pToken*/\n', '    ) internal override {\n', '        address lendingPool = address(_getLendingPool());\n', '        // approve the pool to spend the bAsset\n', '        MassetHelpers.safeInfiniteApprove(_bAsset, lendingPool);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Get the current address of the Aave lending pool, which is the gateway to\n', '     *      depositing.\n', '     * @return Current lending pool implementation\n', '     */\n', '    function _getLendingPool() internal view returns (IAaveLendingPoolV2) {\n', '        address lendingPool = ILendingPoolAddressesProviderV2(platformAddress).getLendingPool();\n', '        require(lendingPool != address(0), "Lending pool does not exist");\n', '        return IAaveLendingPoolV2(lendingPool);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the pToken wrapped in the IAaveAToken interface for this bAsset, to use\n', "     *      for withdrawing or balance checking. Fails if the pToken doesn't exist in our mappings.\n", '     * @param _bAsset  Address of the bAsset\n', '     * @return aToken  Corresponding to this bAsset\n', '     */\n', '    function _getATokenFor(address _bAsset) internal view returns (IAaveATokenV2) {\n', '        address aToken = bAssetToPToken[_bAsset];\n', '        require(aToken != address(0), "aToken does not exist");\n', '        return IAaveATokenV2(aToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total bAsset value held in the platform\n', '     * @param _aToken     aToken for which to check balance\n', '     * @return balance    Total value of the bAsset in the platform\n', '     */\n', '    function _checkBalance(IAaveATokenV2 _aToken) internal view returns (uint256 balance) {\n', '        return _aToken.balanceOf(address(this));\n', '    }\n', '}\n', '\n', 'interface IAaveIncentivesController {\n', '    /**\n', '     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n', '     * @param amount Amount of rewards to claim\n', '     * @param to Address that will be receiving the rewards\n', '     * @return Rewards claimed\n', '     **/\n', '    function claimRewards(\n', '        address[] calldata assets,\n', '        uint256 amount,\n', '        address to\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n', '     * @param user The address of the user\n', '     * @return The rewards\n', '     **/\n', '    function getRewardsBalance(address[] calldata assets, address user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev returns the unclaimed rewards of the user\n', '     * @param user the address of the user\n', '     * @return the unclaimed user rewards\n', '     */\n', '    function getUserUnclaimedRewards(address user) external view returns (uint256);\n', '}\n', '\n', 'contract PAaveIntegration is AaveV2Integration {\n', '    event RewardsClaimed(address[] assets, uint256 amount);\n', '\n', '    IAaveIncentivesController public immutable rewardController;\n', '\n', '    /**\n', '     * @param _nexus            Address of the Nexus\n', '     * @param _lp               Address of LP\n', '     * @param _platformAddress  Generic platform address\n', '     * @param _rewardToken      Reward token, if any\n', '     * @param _rewardController AaveIncentivesController\n', '     */\n', '    constructor(\n', '        address _nexus,\n', '        address _lp,\n', '        address _platformAddress,\n', '        address _rewardToken,\n', '        address _rewardController\n', '    ) AaveV2Integration(_nexus, _lp, _platformAddress, _rewardToken) {\n', '        require(_rewardController != address(0), "Invalid controller address");\n', '\n', '        rewardController = IAaveIncentivesController(_rewardController);\n', '    }\n', '\n', '    /**\n', '     * @dev Claims outstanding rewards from market\n', '     */\n', '    function claimRewards() external {\n', '        uint256 len = bAssetsMapped.length;\n', '        address[] memory pTokens = new address[](len);\n', '        for (uint256 i = 0; i < len; i++) {\n', '            pTokens[i] = bAssetToPToken[bAssetsMapped[i]];\n', '        }\n', '        uint256 rewards = rewardController.claimRewards(pTokens, type(uint256).max, address(this));\n', '\n', '        emit RewardsClaimed(pTokens, rewards);\n', '    }\n', '}\n', '\n', 'contract InitializableOld {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract ModuleKeysStorage {\n', '    // Deprecated stotage variables, but kept around to mirror storage layout\n', '    bytes32 private DEPRECATED_KEY_GOVERNANCE;\n', '    bytes32 private DEPRECATED_KEY_STAKING;\n', '    bytes32 private DEPRECATED_KEY_PROXY_ADMIN;\n', '    bytes32 private DEPRECATED_KEY_ORACLE_HUB;\n', '    bytes32 private DEPRECATED_KEY_MANAGER;\n', '    bytes32 private DEPRECATED_KEY_RECOLLATERALISER;\n', '    bytes32 private DEPRECATED_KEY_META_TOKEN;\n', '    bytes32 private DEPRECATED_KEY_SAVINGS_MANAGER;\n', '}\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '// Need to use the old OZ Initializable as it reserved the first 50 slots of storage\n', '/**\n', ' * @title   Liquidator\n', ' * @author  mStable\n', ' * @notice  The Liquidator allows rewards to be swapped for another token\n', ' *          and returned to a calling contract\n', ' * @dev     VERSION: 1.3\n', ' *          DATE:    2021-05-28\n', ' */\n', 'contract Liquidator is InitializableOld, ModuleKeysStorage, ImmutableModule {\n', '    using SafeERC20 for IERC20;\n', '\n', '    event LiquidationModified(address indexed integration);\n', '    event LiquidationEnded(address indexed integration);\n', '    event Liquidated(address indexed sellToken, address mUSD, uint256 mUSDAmount, address buyToken);\n', '    event ClaimedStakedAave(uint256 rewardsAmount);\n', '    event RedeemedAave(uint256 redeemedAmount);\n', '\n', '    // Deprecated stotage variables, but kept around to mirror storage layout\n', '    address private deprecated_nexus;\n', '    address public deprecated_mUSD;\n', '    address public deprecated_curve;\n', '    address public deprecated_uniswap;\n', '    uint256 private deprecated_interval = 7 days;\n', '    mapping(address => DeprecatedLiquidation) public deprecated_liquidations;\n', '    mapping(address => uint256) public deprecated_minReturn;\n', '\n', '    /// @notice mapping of integration addresses to liquidation data\n', '    mapping(address => Liquidation) public liquidations;\n', '    /// @notice Array of integration contracts used to loop through the Aave balances\n', '    address[] public aaveIntegrations;\n', '    /// @notice The total amount of stkAave that was claimed from all the Aave integration contracts.\n', '    /// This can then be redeemed for Aave after the 10 day cooldown period.\n', '    uint256 public totalAaveBalance;\n', '\n', '    // Immutable variables set in the constructor\n', '    /// @notice Staked AAVE token (stkAAVE) address\n', '    address public immutable stkAave;\n', '    /// @notice Aave Token (AAVE) address\n', '    address public immutable aaveToken;\n', '    /// @notice Uniswap V3 Router address\n', '    IUniswapV3SwapRouter public immutable uniswapRouter;\n', '    /// @notice Uniswap V3 Quoter address\n', '    IUniswapV3Quoter public immutable uniswapQuoter;\n', '    /// @notice Compound Token (COMP) address\n', '    address public immutable compToken;\n', '\n', '    // No longer used\n', '    struct DeprecatedLiquidation {\n', '        address sellToken;\n', '        address bAsset;\n', '        int128 curvePosition;\n', '        address[] uniswapPath;\n', '        uint256 lastTriggered;\n', '        uint256 trancheAmount;\n', '    }\n', '\n', '    struct Liquidation {\n', '        address sellToken;\n', '        address bAsset;\n', '        bytes uniswapPath;\n', '        bytes uniswapPathReversed;\n', '        uint256 lastTriggered;\n', '        uint256 trancheAmount; // The max amount of bAsset units to buy each week, with token decimals\n', '        uint256 minReturn;\n', '        address mAsset;\n', '        uint256 aaveBalance;\n', '    }\n', '\n', '    constructor(\n', '        address _nexus,\n', '        address _stkAave,\n', '        address _aaveToken,\n', '        address _uniswapRouter,\n', '        address _uniswapQuoter,\n', '        address _compToken\n', '    ) ImmutableModule(_nexus) {\n', '        require(_stkAave != address(0), "Invalid stkAAVE address");\n', '        stkAave = _stkAave;\n', '\n', '        require(_aaveToken != address(0), "Invalid AAVE address");\n', '        aaveToken = _aaveToken;\n', '\n', '        require(_uniswapRouter != address(0), "Invalid Uniswap Router address");\n', '        uniswapRouter = IUniswapV3SwapRouter(_uniswapRouter);\n', '\n', '        require(_uniswapQuoter != address(0), "Invalid Uniswap Quoter address");\n', '        uniswapQuoter = IUniswapV3Quoter(_uniswapQuoter);\n', '\n', '        require(_compToken != address(0), "Invalid COMP address");\n', '        compToken = _compToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Liquidator approves Uniswap to transfer Aave and COMP tokens\n', '     * @dev to be called via the proxy proposeUpgrade function, not the constructor.\n', '     */\n', '    function upgrade() external {\n', '        IERC20(aaveToken).safeApprove(address(uniswapRouter), type(uint256).max);\n', '        IERC20(compToken).safeApprove(address(uniswapRouter), type(uint256).max);\n', '    }\n', '\n', '    /***************************************\n', '                    GOVERNANCE\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Create a liquidation\n', '     * @param _integration The integration contract address from which to receive sellToken\n', '     * @param _sellToken Token harvested from the integration contract. eg COMP or stkAave.\n', '     * @param _bAsset The asset to buy on Uniswap. eg USDC or WBTC\n', '     * @param _uniswapPath The Uniswap V3 bytes encoded path.\n', '     * @param _trancheAmount The max amount of bAsset units to buy in each weekly tranche.\n', '     * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\n', '     * @param _mAsset optional address of the mAsset. eg mUSD or mBTC. Use zero address if from a Feeder Pool.\n', '     * @param _useAave flag if integration is with Aave\n', '     */\n', '    function createLiquidation(\n', '        address _integration,\n', '        address _sellToken,\n', '        address _bAsset,\n', '        bytes calldata _uniswapPath,\n', '        bytes calldata _uniswapPathReversed,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn,\n', '        address _mAsset,\n', '        bool _useAave\n', '    ) external onlyGovernance {\n', '        require(liquidations[_integration].sellToken == address(0), "Liquidation already exists");\n', '\n', '        require(\n', '            _integration != address(0) &&\n', '                _sellToken != address(0) &&\n', '                _bAsset != address(0) &&\n', '                _minReturn > 0,\n', '            "Invalid inputs"\n', '        );\n', '        require(_validUniswapPath(_sellToken, _bAsset, _uniswapPath), "Invalid uniswap path");\n', '        require(\n', '            _validUniswapPath(_bAsset, _sellToken, _uniswapPathReversed),\n', '            "Invalid uniswap path reversed"\n', '        );\n', '\n', '        liquidations[_integration] = Liquidation({\n', '            sellToken: _sellToken,\n', '            bAsset: _bAsset,\n', '            uniswapPath: _uniswapPath,\n', '            uniswapPathReversed: _uniswapPathReversed,\n', '            lastTriggered: 0,\n', '            trancheAmount: _trancheAmount,\n', '            minReturn: _minReturn,\n', '            mAsset: _mAsset,\n', '            aaveBalance: 0\n', '        });\n', '        if (_useAave) {\n', '            aaveIntegrations.push(_integration);\n', '        }\n', '\n', '        if (_mAsset != address(0)) {\n', '            // This Liquidator contract approves the mAsset to transfer bAssets for mint.\n', '            // eg USDC in mUSD or WBTC in mBTC\n', '            IERC20(_bAsset).safeApprove(_mAsset, 0);\n', '            IERC20(_bAsset).safeApprove(_mAsset, type(uint256).max);\n', '\n', '            // This Liquidator contract approves the Savings Manager to transfer mAssets\n', '            // for depositLiquidation. eg mUSD\n', '            // If the Savings Manager address was to change then\n', '            // this liquidation would have to be deleted and a new one created.\n', '            // Alternatively, a new liquidation contract could be deployed and proxy upgraded.\n', '            address savings = _savingsManager();\n', '            IERC20(_mAsset).safeApprove(savings, 0);\n', '            IERC20(_mAsset).safeApprove(savings, type(uint256).max);\n', '        } else {\n', '            // This Liquidator contract approves the integration contract to transfer bAssets for deposits.\n', '            // eg GUSD as part of the GUSD Feeder Pool.\n', '            IERC20(_bAsset).safeApprove(_integration, 0);\n', '            IERC20(_bAsset).safeApprove(_integration, type(uint256).max);\n', '        }\n', '\n', '        emit LiquidationModified(_integration);\n', '    }\n', '\n', '    /**\n', '     * @notice Update a liquidation\n', '     * @param _integration The integration contract in question\n', '     * @param _bAsset New asset to buy on Uniswap\n', '     * @param _uniswapPath The Uniswap V3 bytes encoded path.\n', '     * @param _trancheAmount The max amount of bAsset units to buy in each weekly tranche.\n', '     * @param _minReturn Minimum exact amount of bAsset to get for each (whole) sellToken unit\n', '     */\n', '    function updateBasset(\n', '        address _integration,\n', '        address _bAsset,\n', '        bytes calldata _uniswapPath,\n', '        bytes calldata _uniswapPathReversed,\n', '        uint256 _trancheAmount,\n', '        uint256 _minReturn\n', '    ) external onlyGovernance {\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '\n', '        address oldBasset = liquidation.bAsset;\n', '        require(oldBasset != address(0), "Liquidation does not exist");\n', '\n', '        require(_minReturn > 0, "Must set some minimum value");\n', '        require(_bAsset != address(0), "Invalid bAsset");\n', '        require(\n', '            _validUniswapPath(liquidation.sellToken, _bAsset, _uniswapPath),\n', '            "Invalid uniswap path"\n', '        );\n', '        require(\n', '            _validUniswapPath(_bAsset, liquidation.sellToken, _uniswapPathReversed),\n', '            "Invalid uniswap path reversed"\n', '        );\n', '\n', '        liquidations[_integration].bAsset = _bAsset;\n', '        liquidations[_integration].uniswapPath = _uniswapPath;\n', '        liquidations[_integration].trancheAmount = _trancheAmount;\n', '        liquidations[_integration].minReturn = _minReturn;\n', '\n', '        emit LiquidationModified(_integration);\n', '    }\n', '\n', '    /**\n', '     * @notice Validates a given uniswap path - valid if sellToken at position 0 and bAsset at end\n', '     * @param _sellToken Token harvested from the integration contract\n', '     * @param _bAsset New asset to buy on Uniswap\n', '     * @param _uniswapPath The Uniswap V3 bytes encoded path.\n', '     */\n', '    function _validUniswapPath(\n', '        address _sellToken,\n', '        address _bAsset,\n', '        bytes calldata _uniswapPath\n', '    ) internal pure returns (bool) {\n', '        uint256 len = _uniswapPath.length;\n', '        require(_uniswapPath.length >= 43, "Uniswap path too short");\n', '        // check sellToken is first 20 bytes and bAsset is the last 20 bytes of the uniswap path\n', '        return\n', '            keccak256(abi.encodePacked(_sellToken)) ==\n', '            keccak256(abi.encodePacked(_uniswapPath[0:20])) &&\n', '            keccak256(abi.encodePacked(_bAsset)) ==\n', '            keccak256(abi.encodePacked(_uniswapPath[len - 20:len]));\n', '    }\n', '\n', '    /**\n', '     * @notice Delete a liquidation\n', '     */\n', '    function deleteLiquidation(address _integration) external onlyGovernance {\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '        require(liquidation.bAsset != address(0), "Liquidation does not exist");\n', '\n', '        delete liquidations[_integration];\n', '\n', '        emit LiquidationEnded(_integration);\n', '    }\n', '\n', '    /***************************************\n', '                    LIQUIDATION\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Triggers a liquidation, flow (once per week):\n', '     *    - Sells $COMP for $USDC (or other) on Uniswap (up to trancheAmount)\n', '     *    - Mint mUSD using USDC\n', '     *    - Send to SavingsManager\n', '     * @param _integration Integration for which to trigger liquidation\n', '     */\n', '    function triggerLiquidation(address _integration) external {\n', '        // solium-disable-next-line security/no-tx-origin\n', '        require(tx.origin == msg.sender, "Must be EOA");\n', '\n', '        Liquidation memory liquidation = liquidations[_integration];\n', '\n', '        address bAsset = liquidation.bAsset;\n', '        require(bAsset != address(0), "Liquidation does not exist");\n', '\n', '        require(block.timestamp > liquidation.lastTriggered + 7 days, "Must wait for interval");\n', '        liquidations[_integration].lastTriggered = block.timestamp;\n', '\n', '        address sellToken = liquidation.sellToken;\n', '\n', '        // 1. Transfer sellTokens from integration contract if there are some\n', '        //    Assumes infinite approval\n', '        uint256 integrationBal = IERC20(sellToken).balanceOf(_integration);\n', '        if (integrationBal > 0) {\n', '            IERC20(sellToken).safeTransferFrom(_integration, address(this), integrationBal);\n', '        }\n', '\n', '        // 2. Get the amount to sell based on the tranche amount we want to buy\n', '        //    Check contract balance\n', '        uint256 sellTokenBal = IERC20(sellToken).balanceOf(address(this));\n', '        require(sellTokenBal > 0, "No sell tokens to liquidate");\n', '        require(liquidation.trancheAmount > 0, "Liquidation has been paused");\n', '        //    Calc amounts for max tranche\n', '        uint256 sellAmount =\n', '            uniswapQuoter.quoteExactOutput(\n', '                liquidation.uniswapPathReversed,\n', '                liquidation.trancheAmount\n', '            );\n', '\n', '        if (sellTokenBal < sellAmount) {\n', '            sellAmount = sellTokenBal;\n', '        }\n', '\n', '        // 3. Make the swap\n', '        // Uniswap V2 > https://docs.uniswap.org/reference/periphery/interfaces/ISwapRouter#exactinput\n', '        // min amount out = sellAmount * priceFloor / 1e18\n', '        // e.g. 1e18 * 100e6 / 1e18 = 100e6\n', '        // e.g. 30e8 * 100e6 / 1e8 = 3000e6\n', '        // e.g. 30e18 * 100e18 / 1e18 = 3000e18\n', '        uint256 sellTokenDec = IBasicToken(sellToken).decimals();\n', '        uint256 minOut = (sellAmount * liquidation.minReturn) / (10**sellTokenDec);\n', '        require(minOut > 0, "Must have some price floor");\n', '        IUniswapV3SwapRouter.ExactInputParams memory param =\n', '            IUniswapV3SwapRouter.ExactInputParams(\n', '                liquidation.uniswapPath,\n', '                address(this),\n', '                block.timestamp,\n', '                sellAmount,\n', '                minOut\n', '            );\n', '        uniswapRouter.exactInput(param);\n', '\n', '        // 4. Mint mAsset using purchased bAsset\n', '        address mAsset = liquidation.mAsset;\n', '        uint256 minted = _mint(bAsset, mAsset);\n', '\n', '        // 5. Send to SavingsManager\n', '        address savings = _savingsManager();\n', '        ISavingsManager(savings).depositLiquidation(mAsset, minted);\n', '\n', '        emit Liquidated(sellToken, mAsset, minted, bAsset);\n', '    }\n', '\n', '    /**\n', '     * @notice Claims stake Aave token rewards from each Aave integration contract\n', '     * and then transfers all reward tokens to the liquidator contract.\n', "     * Can only claim more stkAave if the last claim's unstake window has ended.\n", '     */\n', '    function claimStakedAave() external {\n', '        // solium-disable-next-line security/no-tx-origin\n', '        require(tx.origin == msg.sender, "Must be EOA");\n', '\n', '        // If the last claim has not yet been liquidated\n', '        uint256 totalAaveBalanceMemory = totalAaveBalance;\n', '        if (totalAaveBalanceMemory > 0) {\n', '            // Check unstake period has expired for this liquidator contract\n', '            IStakedAave stkAaveContract = IStakedAave(stkAave);\n', '            uint256 cooldownStartTime = stkAaveContract.stakersCooldowns(address(this));\n', '            uint256 cooldownPeriod = stkAaveContract.COOLDOWN_SECONDS();\n', '            uint256 unstakeWindow = stkAaveContract.UNSTAKE_WINDOW();\n', '\n', '            // Can not claim more stkAave rewards if the last unstake window has not ended\n', '            // Wait until the cooldown ends and liquidate\n', '            require(\n', '                block.timestamp > cooldownStartTime + cooldownPeriod,\n', '                "Last claim cooldown not ended"\n', '            );\n', '            // or liquidate now as currently in the\n', '            require(\n', '                block.timestamp > cooldownStartTime + cooldownPeriod + unstakeWindow,\n', '                "Must liquidate last claim"\n', '            );\n', '            // else the current time is past the unstake window so claim more stkAave and reactivate the cool down\n', '        }\n', '\n', '        // 1. For each Aave integration contract\n', '        uint256 len = aaveIntegrations.length;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            address integrationAdddress = aaveIntegrations[i];\n', '\n', '            // 2. Claim the platform rewards on the integration contract. eg stkAave\n', '            PAaveIntegration(integrationAdddress).claimRewards();\n', '\n', '            // 3. Transfer sell token from integration contract if there are some\n', '            //    Assumes the integration contract has already given infinite approval to this liquidator contract.\n', '            uint256 integrationBal = IERC20(stkAave).balanceOf(integrationAdddress);\n', '            if (integrationBal > 0) {\n', '                IERC20(stkAave).safeTransferFrom(\n', '                    integrationAdddress,\n', '                    address(this),\n', '                    integrationBal\n', '                );\n', '            }\n', "            // Increate the integration contract's staked Aave balance.\n", '            liquidations[integrationAdddress].aaveBalance += integrationBal;\n', '            totalAaveBalanceMemory += integrationBal;\n', '        }\n', '\n', '        // Store the final total Aave balance in memory to storage variable.\n', '        totalAaveBalance = totalAaveBalanceMemory;\n', '\n', '        // 4. Restart the cool down as the start timestamp would have been reset to zero after the last redeem\n', '        IStakedAave(stkAave).cooldown();\n', '\n', '        emit ClaimedStakedAave(totalAaveBalanceMemory);\n', '    }\n', '\n', '    /**\n', '     * @notice liquidates stkAave rewards earned by the Aave integration contracts:\n', '     *      - Redeems Aave for stkAave rewards\n', '     *      - swaps Aave for bAsset using Uniswap V2. eg Aave for USDC\n', '     *      - for each Aave integration contract\n', '     *        - if from a mAsset\n', '     *          - mints mAssets using bAssets. eg mUSD for USDC\n', '     *          - deposits mAssets to Savings Manager. eg mUSD\n', '     *        - else from a Feeder Pool\n', '     *          - transfer bAssets to integration contract. eg GUSD\n', '     */\n', '    function triggerLiquidationAave() external {\n', '        // solium-disable-next-line security/no-tx-origin\n', '        require(tx.origin == msg.sender, "Must be EOA");\n', '        // Can not liquidate stkAave rewards if not already claimed by the integration contracts.\n', '        require(totalAaveBalance > 0, "Must claim before liquidation");\n', '\n', '        // 1. Redeem as many stkAave as we can for Aave\n', '        // This will fail if the 10 day cooldown period has not passed\n', '        // which is triggered in claimStakedAave().\n', '        IStakedAave(stkAave).redeem(address(this), type(uint256).max);\n', '\n', '        // 2. Get the amount of Aave tokens to sell\n', '        uint256 totalAaveToLiquidate = IERC20(aaveToken).balanceOf(address(this));\n', '        require(totalAaveToLiquidate > 0, "No Aave redeemed from stkAave");\n', '\n', '        // for each Aave integration\n', '        uint256 len = aaveIntegrations.length;\n', '        for (uint256 i = 0; i < len; i++) {\n', '            address _integration = aaveIntegrations[i];\n', '            Liquidation memory liquidation = liquidations[_integration];\n', '\n', '            // 3. Get the proportional amount of Aave tokens for this integration contract to liquidate\n', "            // Amount of Aave to sell for this integration = total Aave to liquidate * integration's Aave balance / total of all integration Aave balances\n", '            uint256 aaveSellAmount =\n', '                (liquidation.aaveBalance * totalAaveToLiquidate) / totalAaveBalance;\n', '            address bAsset = liquidation.bAsset;\n', "            // If there's no Aave tokens to liquidate for this integration contract\n", '            // or the liquidation has been deleted for the integration\n', '            // then just move to the next integration contract.\n', '            if (aaveSellAmount == 0 || bAsset == address(0)) {\n', '                continue;\n', '            }\n', '\n', "            // Reset integration's Aave balance in storage\n", '            liquidations[_integration].aaveBalance = 0;\n', '\n', '            // 4. Make the swap of Aave for the bAsset\n', '            // Make the sale > https://docs.uniswap.org/reference/periphery/interfaces/ISwapRouter#exactinput\n', '            // min bAsset amount out = Aave sell amount * priceFloor / 1e18\n', '            // e.g. 1e18 * 100e6 / 1e18 = 100e6\n', '            // e.g. 30e8 * 100e6 / 1e8 = 3000e6\n', '            // e.g. 30e18 * 100e18 / 1e18 = 3000e18\n', '            uint256 minBassetsOut = (aaveSellAmount * liquidation.minReturn) / 1e18;\n', '            require(minBassetsOut > 0, "Must have some price floor");\n', '            IUniswapV3SwapRouter.ExactInputParams memory param =\n', '                IUniswapV3SwapRouter.ExactInputParams(\n', '                    liquidation.uniswapPath,\n', '                    address(this),\n', '                    block.timestamp + 1,\n', '                    aaveSellAmount,\n', '                    minBassetsOut\n', '                );\n', '            uniswapRouter.exactInput(param);\n', '\n', '            address mAsset = liquidation.mAsset;\n', '            // If the integration contract is connected to a mAsset like mUSD or mBTC\n', '            if (mAsset != address(0)) {\n', '                // 5a. Mint mAsset using bAsset from the Uniswap swap\n', '                uint256 minted = _mint(bAsset, mAsset);\n', '\n', '                // 6a. Send to SavingsManager to streamed to the savings vault. eg imUSD or imBTC\n', '                address savings = _savingsManager();\n', '                ISavingsManager(savings).depositLiquidation(mAsset, minted);\n', '\n', '                emit Liquidated(aaveToken, mAsset, minted, bAsset);\n', '            } else {\n', '                // If a feeder pool like GUSD\n', '                // 5b. transfer bAsset directly to the integration contract.\n', '                // this will then increase the boosted savings vault price.\n', '                IERC20 bAssetToken = IERC20(bAsset);\n', '                uint256 bAssetBal = bAssetToken.balanceOf(address(this));\n', '                bAssetToken.transfer(_integration, bAssetBal);\n', '\n', '                emit Liquidated(aaveToken, mAsset, bAssetBal, bAsset);\n', '            }\n', '        }\n', '\n', '        totalAaveBalance = 0;\n', '    }\n', '\n', '    function _mint(address _bAsset, address _mAsset) internal returns (uint256 minted) {\n', '        uint256 bAssetBal = IERC20(_bAsset).balanceOf(address(this));\n', '\n', '        uint256 bAssetDec = IBasicToken(_bAsset).decimals();\n', '        // e.g. 100e6 * 95e16 / 1e6 = 100e18\n', '        uint256 minOut = (bAssetBal * 90e16) / (10**bAssetDec);\n', '        minted = IMasset(_mAsset).mint(_bAsset, bAssetBal, minOut, address(this));\n', '    }\n', '}']