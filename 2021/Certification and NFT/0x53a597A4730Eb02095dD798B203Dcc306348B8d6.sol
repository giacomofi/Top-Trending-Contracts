['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', '// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/StakeLockerFactory.sol\n', 'pragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\n', '\n', '////// contracts/interfaces/IMapleGlobals.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IMapleGlobals {\n', '\n', '    function pendingGovernor() external view returns (address);\n', '\n', '    function governor() external view returns (address);\n', '\n', '    function globalAdmin() external view returns (address);\n', '\n', '    function mpl() external view returns (address);\n', '\n', '    function mapleTreasury() external view returns (address);\n', '\n', '    function isValidBalancerPool(address) external view returns (bool);\n', '\n', '    function treasuryFee() external view returns (uint256);\n', '\n', '    function investorFee() external view returns (uint256);\n', '\n', '    function defaultGracePeriod() external view returns (uint256);\n', '\n', '    function fundingPeriod() external view returns (uint256);\n', '\n', '    function swapOutRequired() external view returns (uint256);\n', '\n', '    function isValidLiquidityAsset(address) external view returns (bool);\n', '\n', '    function isValidCollateralAsset(address) external view returns (bool);\n', '\n', '    function isValidPoolDelegate(address) external view returns (bool);\n', '\n', '    function validCalcs(address) external view returns (bool);\n', '\n', '    function isValidCalc(address, uint8) external view returns (bool);\n', '\n', '    function getLpCooldownParams() external view returns (uint256, uint256);\n', '\n', '    function isValidLoanFactory(address) external view returns (bool);\n', '\n', '    function isValidSubFactory(address, address, uint8) external view returns (bool);\n', '\n', '    function isValidPoolFactory(address) external view returns (bool);\n', '    \n', '    function getLatestPrice(address) external view returns (uint256);\n', '    \n', '    function defaultUniswapPath(address, address) external view returns (address);\n', '\n', '    function minLoanEquity() external view returns (uint256);\n', '    \n', '    function maxSwapSlippage() external view returns (uint256);\n', '\n', '    function protocolPaused() external view returns (bool);\n', '\n', '    function stakerCooldownPeriod() external view returns (uint256);\n', '\n', '    function lpCooldownPeriod() external view returns (uint256);\n', '\n', '    function stakerUnstakeWindow() external view returns (uint256);\n', '\n', '    function lpWithdrawWindow() external view returns (uint256);\n', '\n', '    function oracleFor(address) external view returns (address);\n', '\n', '    function validSubFactories(address, address) external view returns (bool);\n', '\n', '    function setStakerCooldownPeriod(uint256) external;\n', '\n', '    function setLpCooldownPeriod(uint256) external;\n', '\n', '    function setStakerUnstakeWindow(uint256) external;\n', '\n', '    function setLpWithdrawWindow(uint256) external;\n', '\n', '    function setMaxSwapSlippage(uint256) external;\n', '\n', '    function setGlobalAdmin(address) external;\n', '\n', '    function setValidBalancerPool(address, bool) external;\n', '\n', '    function setProtocolPause(bool) external;\n', '\n', '    function setValidPoolFactory(address, bool) external;\n', '\n', '    function setValidLoanFactory(address, bool) external;\n', '\n', '    function setValidSubFactory(address, address, bool) external;\n', '\n', '    function setDefaultUniswapPath(address, address, address) external;\n', '\n', '    function setPoolDelegateAllowlist(address, bool) external;\n', '\n', '    function setCollateralAsset(address, bool) external;\n', '\n', '    function setLiquidityAsset(address, bool) external;\n', '\n', '    function setCalc(address, bool) external;\n', '\n', '    function setInvestorFee(uint256) external;\n', '\n', '    function setTreasuryFee(uint256) external;\n', '\n', '    function setMapleTreasury(address) external;\n', '\n', '    function setDefaultGracePeriod(uint256) external;\n', '\n', '    function setMinLoanEquity(uint256) external;\n', '\n', '    function setFundingPeriod(uint256) external;\n', '\n', '    function setSwapOutRequired(uint256) external;\n', '\n', '    function setPriceOracle(address, address) external;\n', '\n', '    function setPendingGovernor(address) external;\n', '\n', '    function acceptGovernor() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IBaseFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IBaseFDT {\n', '\n', '    /**\n', '        @dev    Returns the total amount of funds a given address is able to withdraw currently.\n', '        @param  owner Address of FDT holder.\n', '        @return A uint256 representing the available funds for a given account.\n', '    */\n', '    function withdrawableFundsOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', '        @dev Withdraws all available funds for a FDT holder.\n', '    */\n', '    function withdrawFunds() external;\n', '\n', '    /**\n', '        @dev   This event emits when new funds are distributed.\n', '        @param by               The address of the sender that distributed funds.\n', '        @param fundsDistributed The amount of funds received for distribution.\n', '    */\n', '    event FundsDistributed(address indexed by, uint256 fundsDistributed);\n', '\n', '    /**\n', '        @dev   This event emits when distributed funds are withdrawn by a token holder.\n', '        @param by             The address of the receiver of funds.\n', '        @param fundsWithdrawn The amount of funds that were withdrawn.\n', '        @param totalWithdrawn The total amount of funds that were withdrawn.\n', '    */\n', '    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\n', '\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '////// contracts/token/interfaces/IBasicFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"; */\n', '\n', '/* import "./IBaseFDT.sol"; */\n', '\n', 'interface IBasicFDT is IBaseFDT, IERC20 {\n', '\n', '    event PointsPerShareUpdated(uint256);\n', '\n', '    event PointsCorrectionUpdated(address indexed, int256);\n', '\n', '    function withdrawnFundsOf(address) external view returns (uint256);\n', '\n', '    function accumulativeFundsOf(address) external view returns (uint256);\n', '\n', '    function updateFundsReceived() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IExtendedFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IBasicFDT.sol"; */\n', '\n', 'interface IExtendedFDT is IBasicFDT {\n', '\n', '    event LossesPerShareUpdated(uint256);\n', '\n', '    event LossesCorrectionUpdated(address indexed, int256);\n', '\n', '    event LossesDistributed(address indexed, uint256);\n', '\n', '    event LossesRecognized(address indexed, uint256, uint256);\n', '\n', '    function lossesPerShare() external view returns (uint256);\n', '\n', '    function recognizableLossesOf(address) external view returns (uint256);\n', '\n', '    function recognizedLossesOf(address) external view returns (uint256);\n', '\n', '    function accumulativeLossesOf(address) external view returns (uint256);\n', '\n', '    function updateLossesReceived() external;\n', '\n', '}\n', '\n', '////// contracts/token/interfaces/IPoolFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./IExtendedFDT.sol"; */\n', '\n', 'interface IPoolFDT is IExtendedFDT {\n', '\n', '    function interestSum() external view returns (uint256);\n', '\n', '    function poolLosses() external view returns (uint256);\n', '\n', '    function interestBalance() external view returns (uint256);\n', '\n', '    function lossesBalance() external view returns (uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/IPool.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "../token/interfaces/IPoolFDT.sol"; */\n', '\n', 'interface IPool is IPoolFDT {\n', '\n', '    function poolDelegate() external view returns (address);\n', '\n', '    function poolAdmins(address) external view returns (bool);\n', '\n', '    function deposit(uint256) external;\n', '\n', '    function increaseCustodyAllowance(address, uint256) external;\n', '\n', '    function transferByCustodian(address, address, uint256) external;\n', '\n', '    function poolState() external view returns (uint256);\n', '\n', '    function deactivate() external;\n', '\n', '    function finalize() external;\n', '\n', '    function claim(address, address) external returns (uint256[7] memory);\n', '\n', '    function setLockupPeriod(uint256) external;\n', '    \n', '    function setStakingFee(uint256) external;\n', '\n', '    function setPoolAdmin(address, bool) external;\n', '\n', '    function fundLoan(address, address, uint256) external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function superFactory() external view returns (address);\n', '\n', '    function triggerDefault(address, address) external;\n', '\n', '    function isPoolFinalized() external view returns (bool);\n', '\n', '    function setOpenToPublic(bool) external;\n', '\n', '    function setAllowList(address, bool) external;\n', '\n', '    function allowedLiquidityProviders(address) external view returns (bool);\n', '\n', '    function openToPublic() external view returns (bool);\n', '\n', '    function intendToWithdraw() external;\n', '\n', '    function DL_FACTORY() external view returns (uint8);\n', '\n', '    function liquidityAsset() external view returns (address);\n', '\n', '    function liquidityLocker() external view returns (address);\n', '\n', '    function stakeAsset() external view returns (address);\n', '\n', '    function stakeLocker() external view returns (address);\n', '\n', '    function stakingFee() external view returns (uint256);\n', '\n', '    function delegateFee() external view returns (uint256);\n', '\n', '    function principalOut() external view returns (uint256);\n', '\n', '    function liquidityCap() external view returns (uint256);\n', '\n', '    function lockupPeriod() external view returns (uint256);\n', '\n', '    function depositDate(address) external view returns (uint256);\n', '\n', '    function debtLockers(address, address) external view returns (address);\n', '\n', '    function withdrawCooldown(address) external view returns (uint256);\n', '\n', '    function setLiquidityCap(uint256) external;\n', '\n', '    function cancelWithdraw() external;\n', '\n', '    function reclaimERC20(address) external;\n', '\n', '    function BPTVal(address, address, address, address) external view returns (uint256);\n', '\n', '    function isDepositAllowed(uint256) external view returns (bool);\n', '\n', '    function getInitialStakeRequirements() external view returns (uint256, uint256, bool, uint256, uint256);\n', '\n', '}\n', '\n', '////// contracts/interfaces/IPoolFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'interface IPoolFactory {\n', '\n', '    function LL_FACTORY() external view returns (uint8);\n', '\n', '    function SL_FACTORY() external view returns (uint8);\n', '\n', '    function poolsCreated() external view returns (uint256);\n', '\n', '    function globals() external view returns (address);\n', '\n', '    function pools(uint256) external view returns (address);\n', '\n', '    function isPool(address) external view returns (bool);\n', '\n', '    function poolFactoryAdmins(address) external view returns (bool);\n', '\n', '    function setGlobals(address) external;\n', '\n', '    function createPool(address, address, address, address, uint256, uint256, uint256) external returns (address);\n', '\n', '    function setPoolFactoryAdmin(address, bool) external;\n', '\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '}\n', '\n', '////// contracts/math/SafeMathInt.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'library SafeMathInt {\n', '    function toUint256Safe(int256 a) internal pure returns (uint256) {\n', '        require(a >= 0, "SMI:NEG");\n', '        return uint256(a);\n', '    }\n', '}\n', '\n', '////// contracts/math/SafeMathUint.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', 'library SafeMathUint {\n', '    function toInt256Safe(uint256 a) internal pure returns (int256 b) {\n', '        b = int256(a);\n', '        require(b >= 0, "SMU:OOB");\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/GSN/Context.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "../../GSN/Context.sol"; */\n', '/* import "./IERC20.sol"; */\n', '/* import "../../math/SafeMath.sol"; */\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '////// contracts/token/BasicFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/math/SafeMath.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol"; */\n', '/* import "./interfaces/IBaseFDT.sol"; */\n', '/* import "../math/SafeMathUint.sol"; */\n', '/* import "../math/SafeMathInt.sol"; */\n', '\n', '/// @title BasicFDT implements base level FDT functionality for accounting for revenues.\n', 'abstract contract BasicFDT is IBaseFDT, ERC20 {\n', '    using SafeMath       for uint256;\n', '    using SafeMathUint   for uint256;\n', '    using SignedSafeMath for  int256;\n', '    using SafeMathInt    for  int256;\n', '\n', '    uint256 internal constant pointsMultiplier = 2 ** 128;\n', '    uint256 internal pointsPerShare;\n', '\n', '    mapping(address => int256)  internal pointsCorrection;\n', '    mapping(address => uint256) internal withdrawnFunds;\n', '\n', '    event   PointsPerShareUpdated(uint256 pointsPerShare);\n', '    event PointsCorrectionUpdated(address indexed account, int256 pointsCorrection);\n', '\n', '    constructor(string memory name, string memory symbol) ERC20(name, symbol) public { }\n', '\n', '    /**\n', '        @dev Distributes funds to token holders.\n', '        @dev It reverts if the total supply of tokens is 0.\n', '        @dev It emits a `FundsDistributed` event if the amount of received funds is greater than 0.\n', '        @dev It emits a `PointsPerShareUpdated` event if the amount of received funds is greater than 0.\n', '             About undistributed funds:\n', '                In each distribution, there is a small amount of funds which do not get distributed,\n', '                   which is `(value  pointsMultiplier) % totalSupply()`.\n', '                With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\n', '                   in a distribution can be less than 1 (base unit).\n', '                We can actually keep track of the undistributed funds in a distribution\n', '                   and try to distribute it in the next distribution.\n', '    */\n', '    function _distributeFunds(uint256 value) internal {\n', '        require(totalSupply() > 0, "FDT:ZERO_SUPPLY");\n', '\n', '        if (value == 0) return;\n', '\n', '        pointsPerShare = pointsPerShare.add(value.mul(pointsMultiplier) / totalSupply());\n', '        emit FundsDistributed(msg.sender, value);\n', '        emit PointsPerShareUpdated(pointsPerShare);\n', '    }\n', '\n', '    /**\n', '        @dev    Prepares the withdrawal of funds.\n', '        @dev    It emits a `FundsWithdrawn` event if the amount of withdrawn funds is greater than 0.\n', '        @return withdrawableDividend The amount of dividend funds that can be withdrawn.\n', '    */\n', '    function _prepareWithdraw() internal returns (uint256 withdrawableDividend) {\n', '        withdrawableDividend       = withdrawableFundsOf(msg.sender);\n', '        uint256 _withdrawnFunds    = withdrawnFunds[msg.sender].add(withdrawableDividend);\n', '        withdrawnFunds[msg.sender] = _withdrawnFunds;\n', '\n', '        emit FundsWithdrawn(msg.sender, withdrawableDividend, _withdrawnFunds);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of funds that an account can withdraw.\n', '        @param  _owner The address of a token holder.\n', '        @return The amount funds that `_owner` can withdraw.\n', '    */\n', '    function withdrawableFundsOf(address _owner) public view override returns (uint256) {\n', '        return accumulativeFundsOf(_owner).sub(withdrawnFunds[_owner]);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of funds that an account has withdrawn.\n', '        @param  _owner The address of a token holder.\n', '        @return The amount of funds that `_owner` has withdrawn.\n', '    */\n', '    function withdrawnFundsOf(address _owner) external view returns (uint256) {\n', '        return withdrawnFunds[_owner];\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of funds that an account has earned in total.\n', '        @dev    accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\n', '                                         = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\n', '        @param  _owner The address of a token holder.\n', '        @return The amount of funds that `_owner` has earned in total.\n', '    */\n', '    function accumulativeFundsOf(address _owner) public view returns (uint256) {\n', '        return\n', '            pointsPerShare\n', '                .mul(balanceOf(_owner))\n', '                .toInt256Safe()\n', '                .add(pointsCorrection[_owner])\n', '                .toUint256Safe() / pointsMultiplier;\n', '    }\n', '\n', '    /**\n', '        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\n', '        @dev   It emits two `PointsCorrectionUpdated` events, one for the sender and one for the receiver.\n', '        @param from  The address to transfer from.\n', '        @param to    The address to transfer to.\n', '        @param value The amount to be transferred.\n', '    */\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal virtual override {\n', '        super._transfer(from, to, value);\n', '\n', '        int256 _magCorrection       = pointsPerShare.mul(value).toInt256Safe();\n', '        int256 pointsCorrectionFrom = pointsCorrection[from].add(_magCorrection);\n', '        pointsCorrection[from]      = pointsCorrectionFrom;\n', '        int256 pointsCorrectionTo   = pointsCorrection[to].sub(_magCorrection);\n', '        pointsCorrection[to]        = pointsCorrectionTo;\n', '\n', '        emit PointsCorrectionUpdated(from, pointsCorrectionFrom);\n', '        emit PointsCorrectionUpdated(to,   pointsCorrectionTo);\n', '    }\n', '\n', '    /**\n', '        @dev   Mints tokens to an account. Updates pointsCorrection to keep funds unchanged.\n', '        @param account The account that will receive the created tokens.\n', '        @param value   The amount that will be created.\n', '    */\n', '    function _mint(address account, uint256 value) internal virtual override {\n', '        super._mint(account, value);\n', '\n', '        int256 _pointsCorrection = pointsCorrection[account].sub(\n', '            (pointsPerShare.mul(value)).toInt256Safe()\n', '        );\n', '\n', '        pointsCorrection[account] = _pointsCorrection;\n', '\n', '        emit PointsCorrectionUpdated(account, _pointsCorrection);\n', '    }\n', '\n', '    /**\n', '        @dev   Burns an amount of the token of a given account. Updates pointsCorrection to keep funds unchanged.\n', '        @dev   It emits a `PointsCorrectionUpdated` event.\n', '        @param account The account whose tokens will be burnt.\n', '        @param value   The amount that will be burnt.\n', '    */\n', '    function _burn(address account, uint256 value) internal virtual override {\n', '        super._burn(account, value);\n', '\n', '        int256 _pointsCorrection = pointsCorrection[account].add(\n', '            (pointsPerShare.mul(value)).toInt256Safe()\n', '        );\n', '\n', '        pointsCorrection[account] = _pointsCorrection;\n', '\n', '        emit PointsCorrectionUpdated(account, _pointsCorrection);\n', '    }\n', '\n', '    /**\n', '        @dev Withdraws all available funds for a token holder.\n', '    */\n', '    function withdrawFunds() public virtual override {}\n', '\n', '    /**\n', '        @dev    Updates the current `fundsToken` balance and returns the difference of the new and previous `fundsToken` balance.\n', '        @return A int256 representing the difference of the new and previous `fundsToken` balance.\n', '    */\n', '    function _updateFundsTokenBalance() internal virtual returns (int256) {}\n', '\n', '    /**\n', '        @dev Registers a payment of funds in tokens. May be called directly after a deposit is made.\n', '        @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the new and previous\n', '             `fundsToken` balance and increments the total received funds (cumulative), by delta, by calling _distributeFunds().\n', '    */\n', '    function updateFundsReceived() public virtual {\n', '        int256 newFunds = _updateFundsTokenBalance();\n', '\n', '        if (newFunds <= 0) return;\n', '\n', '        _distributeFunds(newFunds.toUint256Safe());\n', '    }\n', '}\n', '\n', '////// contracts/token/ExtendedFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./BasicFDT.sol"; */\n', '\n', '/// @title ExtendedFDT implements FDT functionality for accounting for losses.\n', 'abstract contract ExtendedFDT is BasicFDT {\n', '    using SafeMath       for uint256;\n', '    using SafeMathUint   for uint256;\n', '    using SignedSafeMath for  int256;\n', '    using SafeMathInt    for  int256;\n', '\n', '    uint256 internal lossesPerShare;\n', '\n', '    mapping(address => int256)  internal lossesCorrection;\n', '    mapping(address => uint256) internal recognizedLosses;\n', '\n', '    event   LossesPerShareUpdated(uint256 lossesPerShare);\n', '    event LossesCorrectionUpdated(address indexed account, int256 lossesCorrection);\n', '\n', '    /**\n', '        @dev   This event emits when new losses are distributed.\n', '        @param by                The address of the account that has distributed losses.\n', '        @param lossesDistributed The amount of losses received for distribution.\n', '    */\n', '    event LossesDistributed(address indexed by, uint256 lossesDistributed);\n', '\n', '    /**\n', '        @dev   This event emits when distributed losses are recognized by a token holder.\n', '        @param by                    The address of the receiver of losses.\n', '        @param lossesRecognized      The amount of losses that were recognized.\n', '        @param totalLossesRecognized The total amount of losses that are recognized.\n', '    */\n', '    event LossesRecognized(address indexed by, uint256 lossesRecognized, uint256 totalLossesRecognized);\n', '\n', '    constructor(string memory name, string memory symbol) BasicFDT(name, symbol) public { }\n', '\n', '    /**\n', '        @dev Distributes losses to token holders.\n', '        @dev It reverts if the total supply of tokens is 0.\n', '        @dev It emits a `LossesDistributed` event if the amount of received losses is greater than 0.\n', '        @dev It emits a `LossesPerShareUpdated` event if the amount of received losses is greater than 0.\n', '             About undistributed losses:\n', '                In each distribution, there is a small amount of losses which do not get distributed,\n', '                which is `(value * pointsMultiplier) % totalSupply()`.\n', '             With a well-chosen `pointsMultiplier`, the amount losses that are not getting distributed\n', '                in a distribution can be less than 1 (base unit).\n', '             We can actually keep track of the undistributed losses in a distribution\n', '                and try to distribute it in the next distribution.\n', '    */\n', '    function _distributeLosses(uint256 value) internal {\n', '        require(totalSupply() > 0, "FDT:ZERO_SUPPLY");\n', '\n', '        if (value == 0) return;\n', '\n', '        uint256 _lossesPerShare = lossesPerShare.add(value.mul(pointsMultiplier) / totalSupply());\n', '        lossesPerShare          = _lossesPerShare;\n', '\n', '        emit LossesDistributed(msg.sender, value);\n', '        emit LossesPerShareUpdated(_lossesPerShare);\n', '    }\n', '\n', '    /**\n', '        @dev    Prepares losses for a withdrawal.\n', '        @dev    It emits a `LossesWithdrawn` event if the amount of withdrawn losses is greater than 0.\n', '        @return recognizableDividend The amount of dividend losses that can be recognized.\n', '    */\n', '    function _prepareLossesWithdraw() internal returns (uint256 recognizableDividend) {\n', '        recognizableDividend = recognizableLossesOf(msg.sender);\n', '\n', '        uint256 _recognizedLosses    = recognizedLosses[msg.sender].add(recognizableDividend);\n', '        recognizedLosses[msg.sender] = _recognizedLosses;\n', '\n', '        emit LossesRecognized(msg.sender, recognizableDividend, _recognizedLosses);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of losses that an address can withdraw.\n', '        @param  _owner The address of a token holder.\n', '        @return The amount of losses that `_owner` can withdraw.\n', '    */\n', '    function recognizableLossesOf(address _owner) public view returns (uint256) {\n', '        return accumulativeLossesOf(_owner).sub(recognizedLosses[_owner]);\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of losses that an address has recognized.\n', '        @param  _owner The address of a token holder\n', '        @return The amount of losses that `_owner` has recognized\n', '    */\n', '    function recognizedLossesOf(address _owner) external view returns (uint256) {\n', '        return recognizedLosses[_owner];\n', '    }\n', '\n', '    /**\n', '        @dev    Returns the amount of losses that an address has earned in total.\n', '        @dev    accumulativeLossesOf(_owner) = recognizableLossesOf(_owner) + recognizedLossesOf(_owner)\n', '                = (lossesPerShare * balanceOf(_owner) + lossesCorrection[_owner]) / pointsMultiplier\n', '        @param  _owner The address of a token holder\n', '        @return The amount of losses that `_owner` has earned in total\n', '    */\n', '    function accumulativeLossesOf(address _owner) public view returns (uint256) {\n', '        return\n', '            lossesPerShare\n', '                .mul(balanceOf(_owner))\n', '                .toInt256Safe()\n', '                .add(lossesCorrection[_owner])\n', '                .toUint256Safe() / pointsMultiplier;\n', '    }\n', '\n', '    /**\n', '        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\n', '        @dev         It emits two `LossesCorrectionUpdated` events, one for the sender and one for the receiver.\n', '        @param from  The address to transfer from.\n', '        @param to    The address to transfer to.\n', '        @param value The amount to be transferred.\n', '    */\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal virtual override {\n', '        super._transfer(from, to, value);\n', '\n', '        int256 _lossesCorrection    = lossesPerShare.mul(value).toInt256Safe();\n', '        int256 lossesCorrectionFrom = lossesCorrection[from].add(_lossesCorrection);\n', '        lossesCorrection[from]      = lossesCorrectionFrom;\n', '        int256 lossesCorrectionTo   = lossesCorrection[to].sub(_lossesCorrection);\n', '        lossesCorrection[to]        = lossesCorrectionTo;\n', '\n', '        emit LossesCorrectionUpdated(from, lossesCorrectionFrom);\n', '        emit LossesCorrectionUpdated(to,   lossesCorrectionTo);\n', '    }\n', '\n', '    /**\n', '        @dev   Mints tokens to an account. Updates lossesCorrection to keep losses unchanged.\n', '        @dev   It emits a `LossesCorrectionUpdated` event.\n', '        @param account The account that will receive the created tokens.\n', '        @param value   The amount that will be created.\n', '    */\n', '    function _mint(address account, uint256 value) internal virtual override {\n', '        super._mint(account, value);\n', '\n', '        int256 _lossesCorrection = lossesCorrection[account].sub(\n', '            (lossesPerShare.mul(value)).toInt256Safe()\n', '        );\n', '\n', '        lossesCorrection[account] = _lossesCorrection;\n', '\n', '        emit LossesCorrectionUpdated(account, _lossesCorrection);\n', '    }\n', '\n', '    /**\n', '        @dev   Burns an amount of the token of a given account. Updates lossesCorrection to keep losses unchanged.\n', '        @dev   It emits a `LossesCorrectionUpdated` event.\n', '        @param account The account from which tokens will be burnt.\n', '        @param value   The amount that will be burnt.\n', '    */\n', '    function _burn(address account, uint256 value) internal virtual override {\n', '        super._burn(account, value);\n', '\n', '        int256 _lossesCorrection = lossesCorrection[account].add(\n', '            (lossesPerShare.mul(value)).toInt256Safe()\n', '        );\n', '\n', '        lossesCorrection[account] = _lossesCorrection;\n', '\n', '        emit LossesCorrectionUpdated(account, _lossesCorrection);\n', '    }\n', '\n', '    /**\n', '        @dev Registers a loss. May be called directly after a shortfall after BPT burning occurs.\n', '        @dev Calls _updateLossesTokenBalance(), whereby the contract computes the delta of the new and previous\n', '             losses balance and increments the total losses (cumulative), by delta, by calling _distributeLosses().\n', '    */\n', '    function updateLossesReceived() public virtual {\n', '        int256 newLosses = _updateLossesBalance();\n', '\n', '        if (newLosses <= 0) return;\n', '\n', '        _distributeLosses(newLosses.toUint256Safe());\n', '    }\n', '\n', '    /**\n', '        @dev Recognizes all recognizable losses for an account using loss accounting.\n', '    */\n', '    function _recognizeLosses() internal virtual returns (uint256 losses) { }\n', '\n', '    /**\n', '        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\n', '        @return A int256 representing the difference of the new and previous losses balance.\n', '    */\n', '    function _updateLossesBalance() internal virtual returns (int256) { }\n', '}\n', '\n', '////// contracts/token/StakeLockerFDT.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./ExtendedFDT.sol"; */\n', '\n', '/// @title StakeLockerFDT inherits ExtendedFDT and accounts for gains/losses for Stakers.\n', 'abstract contract StakeLockerFDT is ExtendedFDT {\n', '    using SafeMath       for uint256;\n', '    using SafeMathUint   for uint256;\n', '    using SignedSafeMath for  int256;\n', '    using SafeMathInt    for  int256;\n', '\n', '    IERC20 public immutable fundsToken;\n', '\n', '    uint256 public bptLosses;          // Sum of all unrecognized losses.\n', '    uint256 public lossesBalance;      // The amount of losses present and accounted for in this contract.\n', '    uint256 public fundsTokenBalance;  // The amount of `fundsToken` (Liquidity Asset) currently present and accounted for in this contract.\n', '\n', '    constructor(string memory name, string memory symbol, address _fundsToken) ExtendedFDT(name, symbol) public {\n', '        fundsToken = IERC20(_fundsToken);\n', '    }\n', '\n', '    /**\n', '        @dev    Updates loss accounting for `msg.sender`, recognizing losses.\n', '        @return losses Amount to be subtracted from a withdraw amount.\n', '    */\n', '    function _recognizeLosses() internal override returns (uint256 losses) {\n', '        losses = _prepareLossesWithdraw();\n', '\n', '        bptLosses = bptLosses.sub(losses);\n', '\n', '        _updateLossesBalance();\n', '    }\n', '\n', '    /**\n', '        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\n', '        @return A int256 representing the difference of the new and previous losses balance.\n', '    */\n', '    function _updateLossesBalance() internal override returns (int256) {\n', '        uint256 _prevLossesTokenBalance = lossesBalance;\n', '\n', '        lossesBalance = bptLosses;\n', '\n', '        return int256(lossesBalance).sub(int256(_prevLossesTokenBalance));\n', '    }\n', '\n', '    /**\n', '        @dev    Updates the current interest balance and returns the difference of the new and previous interest balance.\n', '        @return A int256 representing the difference of the new and previous interest balance.\n', '    */\n', '    function _updateFundsTokenBalance() internal virtual override returns (int256) {\n', '        uint256 _prevFundsTokenBalance = fundsTokenBalance;\n', '\n', '        fundsTokenBalance = fundsToken.balanceOf(address(this));\n', '\n', '        return int256(fundsTokenBalance).sub(int256(_prevFundsTokenBalance));\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/utils/Address.sol\n', '/* pragma solidity >=0.6.2 <0.8.0; */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "./IERC20.sol"; */\n', '/* import "../../math/SafeMath.sol"; */\n', '/* import "../../utils/Address.sol"; */\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '////// lib/openzeppelin-contracts/contracts/utils/Pausable.sol\n', '/* pragma solidity >=0.6.0 <0.8.0; */\n', '\n', '/* import "../GSN/Context.sol"; */\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '////// contracts/StakeLocker.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol"; */\n', '/* import "lib/openzeppelin-contracts/contracts/utils/Pausable.sol"; */\n', '\n', '/* import "./interfaces/IMapleGlobals.sol"; */\n', '/* import "./interfaces/IPool.sol"; */\n', '/* import "./interfaces/IPoolFactory.sol"; */\n', '\n', '/* import "./token/StakeLockerFDT.sol"; */\n', '\n', '/// @title StakeLocker holds custody of stakeAsset tokens for a given Pool and earns revenue from interest.\n', 'contract StakeLocker is StakeLockerFDT, Pausable {\n', '\n', '    using SafeMathInt    for int256;\n', '    using SignedSafeMath for int256;\n', '    using SafeERC20      for IERC20;\n', '\n', '    uint256 constant WAD = 10 ** 18;  // Scaling factor for synthetic float division.\n', '\n', '    IERC20  public immutable stakeAsset;  // The asset deposited by Stakers into this contract, for liquidation during defaults.\n', '\n', '    address public immutable liquidityAsset;  // The Liquidity Asset for the Pool as well as the dividend token for StakeLockerFDT interest.\n', '    address public immutable pool;            // The parent Pool.\n', '\n', '    uint256 public lockupPeriod;  // Number of seconds for which unstaking is not allowed.\n', '\n', '    mapping(address => uint256)                     public stakeDate;              // Map of account addresses to effective stake date.\n', '    mapping(address => uint256)                     public unstakeCooldown;        // The timestamp of when a Staker called `cooldown()`.\n', '    mapping(address => bool)                        public allowed;                // Map of addresses to allowed status.\n', '    mapping(address => mapping(address => uint256)) public custodyAllowance;       // Amount of StakeLockerFDTs that are "locked" at a certain address.\n', '    mapping(address => uint256)                     public totalCustodyAllowance;  // Total amount of StakeLockerFDTs that are "locked" for a given account, cannot be greater than balance.\n', '\n', '    bool public openToPublic;  // Boolean opening StakeLocker to public for staking BPTs\n', '\n', '    event            StakeLockerOpened();\n', '    event               BalanceUpdated(address indexed staker, address indexed token, uint256 balance);\n', '    event             AllowListUpdated(address indexed staker, bool status);\n', '    event             StakeDateUpdated(address indexed staker, uint256 stakeDate);\n', '    event          LockupPeriodUpdated(uint256 lockupPeriod);\n', '    event                     Cooldown(address indexed staker, uint256 cooldown);\n', '    event                        Stake(address indexed staker, uint256 amount);\n', '    event                      Unstake(address indexed staker, uint256 amount);\n', '    event              CustodyTransfer(address indexed custodian, address indexed from, address indexed to, uint256 amount);\n', '    event      CustodyAllowanceChanged(address indexed staker, address indexed custodian, uint256 oldAllowance, uint256 newAllowance);\n', '    event TotalCustodyAllowanceUpdated(address indexed staker, uint256 newTotalAllowance);\n', '\n', '    constructor(\n', '        address _stakeAsset,\n', '        address _liquidityAsset,\n', '        address _pool\n', '    ) StakeLockerFDT("Maple StakeLocker", "MPLSTAKE", _liquidityAsset) public {\n', '        liquidityAsset = _liquidityAsset;\n', '        stakeAsset     = IERC20(_stakeAsset);\n', '        pool           = _pool;\n', '        lockupPeriod   = 180 days;\n', '    }\n', '\n', '    /*****************/\n', '    /*** Modifiers ***/\n', '    /*****************/\n', '\n', '    /**\n', '        @dev Checks that an account can unstake given the following conditions:\n', '                 1. The Account is not the Pool Delegate and the Pool is in Finalized state.\n', '                 2. The Pool is in Initialized or Deactivated state.\n', '    */\n', '    modifier canUnstake(address from) {\n', '        IPool _pool = IPool(pool);\n', '\n', '        // The Pool cannot be finalized, but if it is, account cannot be the Pool Delegate.\n', '        require(!_pool.isPoolFinalized() || from != _pool.poolDelegate(), "SL:STAKE_LOCKED");\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev Checks that `msg.sender` is the Governor.\n', '    */\n', '    modifier isGovernor() {\n', '        require(msg.sender == _globals().governor(), "SL:NOT_GOV");\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev Checks that `msg.sender` is the Pool.\n', '    */\n', '    modifier isPool() {\n', '        require(msg.sender == pool, "SL:NOT_P");\n', '        _;\n', '    }\n', '\n', '    /**********************/\n', '    /*** Pool Functions ***/\n', '    /**********************/\n', '\n', '    /**\n', '        @dev   Updates Staker status on the allowlist. Only the Pool Delegate can call this function.\n', '        @dev   It emits an `AllowListUpdated` event.\n', '        @param staker The address of the Staker to set status for.\n', '        @param status The status of the Staker on allowlist.\n', '    */\n', '    function setAllowlist(address staker, bool status) public {\n', '        _whenProtocolNotPaused();\n', '        _isValidPoolDelegate();\n', '        allowed[staker] = status;\n', '        emit AllowListUpdated(staker, status);\n', '    }\n', '\n', '    /**\n', '        @dev Sets the StakeLocker as open to the public. Only the Pool Delegate can call this function.\n', '        @dev It emits a `StakeLockerOpened` event.\n', '    */\n', '    function openStakeLockerToPublic() external {\n', '        _whenProtocolNotPaused();\n', '        _isValidPoolDelegate();\n', '        openToPublic = true;\n', '        emit StakeLockerOpened();\n', '    }\n', '\n', '    /**\n', '        @dev   Sets the lockup period. Only the Pool Delegate can call this function.\n', '        @dev   It emits a `LockupPeriodUpdated` event.\n', '        @param newLockupPeriod New lockup period used to restrict unstaking.\n', '    */\n', '    function setLockupPeriod(uint256 newLockupPeriod) external {\n', '        _whenProtocolNotPaused();\n', '        _isValidPoolDelegate();\n', '        require(newLockupPeriod <= lockupPeriod, "SL:INVALID_VALUE");\n', '        lockupPeriod = newLockupPeriod;\n', '        emit LockupPeriodUpdated(newLockupPeriod);\n', '    }\n', '\n', '    /**\n', '        @dev   Transfers an amount of Stake Asset to a destination account. Only the Pool can call this function.\n', '        @param dst Destination to transfer Stake Asset to.\n', '        @param amt Amount of Stake Asset to transfer.\n', '    */\n', '    function pull(address dst, uint256 amt) isPool external {\n', '        stakeAsset.safeTransfer(dst, amt);\n', '    }\n', '\n', '    /**\n', '        @dev   Updates loss accounting for StakeLockerFDTs after BPTs have been burned. Only the Pool can call this function.\n', '        @param bptsBurned Amount of BPTs that have been burned.\n', '    */\n', '    function updateLosses(uint256 bptsBurned) isPool external {\n', '        bptLosses = bptLosses.add(bptsBurned);\n', '        updateLossesReceived();\n', '    }\n', '\n', '    /************************/\n', '    /*** Staker Functions ***/\n', '    /************************/\n', '\n', '    /**\n', "        @dev   Handles a Staker's depositing of an amount of Stake Asset, minting them StakeLockerFDTs.\n", '        @dev   It emits a `StakeDateUpdated` event.\n', '        @dev   It emits a `Stake` event.\n', '        @dev   It emits a `Cooldown` event.\n', '        @dev   It emits a `BalanceUpdated` event.\n', '        @param amt Amount of Stake Asset (BPTs) to deposit.\n', '    */\n', '    function stake(uint256 amt) whenNotPaused external {\n', '        _whenProtocolNotPaused();\n', '        _isAllowed(msg.sender);\n', '\n', "        unstakeCooldown[msg.sender] = uint256(0);  // Reset account's unstake cooldown if Staker had previously intended to unstake.\n", '\n', '        _updateStakeDate(msg.sender, amt);\n', '\n', '        stakeAsset.safeTransferFrom(msg.sender, address(this), amt);\n', '        _mint(msg.sender, amt);\n', '\n', '        emit Stake(msg.sender, amt);\n', '        emit Cooldown(msg.sender, uint256(0));\n', '        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '        @dev   Updates information used to calculate unstake delay.\n', '        @dev   It emits a `StakeDateUpdated` event.\n', '        @param account The Staker that deposited BPTs.\n', '        @param amt     Amount of BPTs the Staker has deposited.\n', '    */\n', '    function _updateStakeDate(address account, uint256 amt) internal {\n', '        uint256 prevDate = stakeDate[account];\n', '        uint256 balance = balanceOf(account);\n', '\n', '        // stakeDate + (now - stakeDate) * (amt / (balance + amt))\n', '        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now.\n', '        uint256 newDate = (balance + amt) > 0\n', '            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\n', '            : prevDate;\n', '\n', '        stakeDate[account] = newDate;\n', '        emit StakeDateUpdated(account, newDate);\n', '    }\n', '\n', '    /**\n', "        @dev Activates the cooldown period to unstake. It can't be called if the account is not staking.\n", '        @dev It emits a `Cooldown` event.\n', '    **/\n', '    function intendToUnstake() external {\n', '        require(balanceOf(msg.sender) != uint256(0), "SL:ZERO_BALANCE");\n', '        unstakeCooldown[msg.sender] = block.timestamp;\n', '        emit Cooldown(msg.sender, block.timestamp);\n', '    }\n', '\n', '    /**\n', "        @dev Cancels an initiated unstake by resetting the calling account's unstake cooldown.\n", '        @dev It emits a `Cooldown` event.\n', '    */\n', '    function cancelUnstake() external {\n', '        require(unstakeCooldown[msg.sender] != uint256(0), "SL:NOT_UNSTAKING");\n', '        unstakeCooldown[msg.sender] = 0;\n', '        emit Cooldown(msg.sender, uint256(0));\n', '    }\n', '\n', '    /**\n', "        @dev   Handles a Staker's withdrawing of an amount of Stake Asset, minus any losses. It also claims interest and burns StakeLockerFDTs for the calling account.\n", '        @dev   It emits an `Unstake` event.\n', '        @dev   It emits a `BalanceUpdated` event.\n', '        @param amt Amount of Stake Asset (BPTs) to withdraw.\n', '    */\n', '    function unstake(uint256 amt) external canUnstake(msg.sender) {\n', '        _whenProtocolNotPaused();\n', '\n', '        require(balanceOf(msg.sender).sub(amt) >= totalCustodyAllowance[msg.sender], "SL:INSUF_UNSTAKEABLE_BAL");  // Account can only unstake tokens that aren\'t custodied\n', '        require(isUnstakeAllowed(msg.sender),                                        "SL:OUTSIDE_COOLDOWN");\n', '        require(stakeDate[msg.sender].add(lockupPeriod) <= block.timestamp,          "SL:FUNDS_LOCKED");\n', '\n', '        updateFundsReceived();   // Account for any funds transferred into contract since last call.\n', '        _burn(msg.sender, amt);  // Burn the corresponding StakeLockerFDTs balance.\n', '        withdrawFunds();         // Transfer the full entitled Liquidity Asset interest.\n', '\n', '        stakeAsset.safeTransfer(msg.sender, amt.sub(_recognizeLosses()));  // Unstake amount minus losses.\n', '\n', '        emit Unstake(msg.sender, amt);\n', '        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '        @dev Withdraws all claimable interest earned from the StakeLocker for an account.\n', '        @dev It emits a `BalanceUpdated` event if there are withdrawable funds.\n', '    */\n', '    function withdrawFunds() public override {\n', '        _whenProtocolNotPaused();\n', '\n', '        uint256 withdrawableFunds = _prepareWithdraw();\n', '\n', '        if (withdrawableFunds == uint256(0)) return;\n', '\n', '        fundsToken.safeTransfer(msg.sender, withdrawableFunds);\n', '        emit BalanceUpdated(address(this), address(fundsToken), fundsToken.balanceOf(address(this)));\n', '\n', '        _updateFundsTokenBalance();\n', '    }\n', '\n', '    /**\n', '        @dev   Increases the custody allowance for a given Custodian corresponding to the account (`msg.sender`).\n', '        @dev   It emits a `CustodyAllowanceChanged` event.\n', '        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\n', '        @param custodian Address which will act as Custodian of a given amount for an account.\n', '        @param amount    Number of additional FDTs to be custodied by the Custodian.\n', '    */\n', '    function increaseCustodyAllowance(address custodian, uint256 amount) external {\n', '        uint256 oldAllowance      = custodyAllowance[msg.sender][custodian];\n', '        uint256 newAllowance      = oldAllowance.add(amount);\n', '        uint256 newTotalAllowance = totalCustodyAllowance[msg.sender].add(amount);\n', '\n', '        require(custodian != address(0),                    "SL:INVALID_CUSTODIAN");\n', '        require(amount    != uint256(0),                    "SL:INVALID_AMT");\n', '        require(newTotalAllowance <= balanceOf(msg.sender), "SL:INSUF_BALANCE");\n', '\n', '        custodyAllowance[msg.sender][custodian] = newAllowance;\n', '        totalCustodyAllowance[msg.sender]       = newTotalAllowance;\n', '        emit CustodyAllowanceChanged(msg.sender, custodian, oldAllowance, newAllowance);\n', '        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\n', '    }\n', '\n', '    /**\n', '        @dev   Transfers custodied StakeLockerFDTs back to the account.\n', '        @dev   `from` and `to` should always be equal in this implementation.\n', '        @dev   This means that the Custodian can only decrease their own allowance and unlock funds for the original owner.\n', '        @dev   It emits a `CustodyTransfer` event.\n', '        @dev   It emits a `CustodyAllowanceChanged` event.\n', '        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\n', '        @param from   Address which holds the StakeLockerFDTs.\n', '        @param to     Address which will be the new owner of the amount of StakeLockerFDTs.\n', '        @param amount Amount of StakeLockerFDTs transferred.\n', '    */\n', '    function transferByCustodian(address from, address to, uint256 amount) external {\n', '        uint256 oldAllowance = custodyAllowance[from][msg.sender];\n', '        uint256 newAllowance = oldAllowance.sub(amount);\n', '\n', '        require(to == from,             "SL:INVALID_RECEIVER");\n', '        require(amount != uint256(0),   "SL:INVALID_AMT");\n', '\n', '        custodyAllowance[from][msg.sender] = newAllowance;\n', '        uint256 newTotalAllowance          = totalCustodyAllowance[from].sub(amount);\n', '        totalCustodyAllowance[from]        = newTotalAllowance;\n', '        emit CustodyTransfer(msg.sender, from, to, amount);\n', '        emit CustodyAllowanceChanged(from, msg.sender, oldAllowance, newAllowance);\n', '        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\n', '    }\n', '\n', '    /**\n', '        @dev   Transfers StakeLockerFDTs.\n', '        @param from Address sending   StakeLockerFDTs.\n', '        @param to   Address receiving StakeLockerFDTs.\n', '        @param wad  Amount of StakeLockerFDTs to transfer.\n', '    */\n', '    function _transfer(address from, address to, uint256 wad) internal override canUnstake(from) {\n', '        _whenProtocolNotPaused();\n', '        require(stakeDate[from].add(lockupPeriod) <= block.timestamp,    "SL:FUNDS_LOCKED");            // Restrict withdrawal during lockup period\n', '        require(balanceOf(from).sub(wad) >= totalCustodyAllowance[from], "SL:INSUF_TRANSFERABLE_BAL");  // Account can only transfer tokens that aren\'t custodied\n', '        require(isReceiveAllowed(unstakeCooldown[to]),                   "SL:RECIPIENT_NOT_ALLOWED");   // Recipient must not be currently unstaking\n', '        require(recognizableLossesOf(from) == uint256(0),                "SL:RECOG_LOSSES");            // If a staker has unrecognized losses, they must recognize losses through unstake\n', '        _updateStakeDate(to, wad);                                                                      // Update stake date of recipient\n', '        super._transfer(from, to, wad);\n', '    }\n', '\n', '    /***********************/\n', '    /*** Admin Functions ***/\n', '    /***********************/\n', '\n', '    /**\n', '        @dev Triggers paused state. Halts functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\n', '    */\n', '    function pause() external {\n', '        _isValidPoolDelegateOrPoolAdmin();\n', '        super._pause();\n', '    }\n', '\n', '    /**\n', '        @dev Triggers unpaused state. Restores functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\n', '    */\n', '    function unpause() external {\n', '        _isValidPoolDelegateOrPoolAdmin();\n', '        super._unpause();\n', '    }\n', '\n', '    /************************/\n', '    /*** Helper Functions ***/\n', '    /************************/\n', '\n', '    /**\n', '        @dev Returns if the unstake cooldown period has passed for `msg.sender` and if they are in the unstake window.\n', '    */\n', '    function isUnstakeAllowed(address from) public view returns (bool) {\n', '        IMapleGlobals globals = _globals();\n', '        return (block.timestamp - (unstakeCooldown[from] + globals.stakerCooldownPeriod())) <= globals.stakerUnstakeWindow();\n', '    }\n', '\n', '    /**\n', '        @dev Returns if an account is allowed to receive a transfer.\n', '             This is only possible if they have zero cooldown or they are past their unstake window.\n', '    */\n', '    function isReceiveAllowed(uint256 _unstakeCooldown) public view returns (bool) {\n', '        IMapleGlobals globals = _globals();\n', '        return block.timestamp > (_unstakeCooldown + globals.stakerCooldownPeriod() + globals.stakerUnstakeWindow());\n', '    }\n', '\n', '    /**\n', '        @dev Checks that `msg.sender` is the Pool Delegate or a Pool Admin.\n', '    */\n', '    function _isValidPoolDelegateOrPoolAdmin() internal view {\n', '        require(msg.sender == IPool(pool).poolDelegate() || IPool(pool).poolAdmins(msg.sender), "SL:NOT_DELEGATE_OR_ADMIN");\n', '    }\n', '\n', '    /**\n', '        @dev Checks that `msg.sender` is the Pool Delegate.\n', '    */\n', '    function _isValidPoolDelegate() internal view {\n', '        require(msg.sender == IPool(pool).poolDelegate(), "SL:NOT_DELEGATE");\n', '    }\n', '\n', '    /**\n', '        @dev Checks that `msg.sender` is allowed to stake.\n', '    */\n', '    function _isAllowed(address account) internal view {\n', '        require(\n', '            openToPublic || allowed[account] || account == IPool(pool).poolDelegate(),\n', '            "SL:NOT_ALLOWED"\n', '        );\n', '    }\n', '\n', '    /**\n', '        @dev Returns the MapleGlobals instance.\n', '    */\n', '    function _globals() internal view returns (IMapleGlobals) {\n', '        return IMapleGlobals(IPoolFactory(IPool(pool).superFactory()).globals());\n', '    }\n', '\n', '    /**\n', '        @dev Checks that the protocol is not in a paused state.\n', '    */\n', '    function _whenProtocolNotPaused() internal view {\n', '        require(!_globals().protocolPaused(), "SL:PROTO_PAUSED");\n', '    }\n', '\n', '}\n', '\n', '////// contracts/StakeLockerFactory.sol\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "./StakeLocker.sol"; */\n', '\n', '/// @title StakeLockerFactory instantiates StakeLockers.\n', 'contract StakeLockerFactory {\n', '\n', '    mapping(address => address) public owner;     // Mapping of StakeLocker addresses to their owner (i.e owner[locker] = Owner of the StakeLocker).\n', '    mapping(address => bool)    public isLocker;  // True only if a StakeLocker was created by this factory.\n', '\n', '    uint8 public constant factoryType = 4;  // i.e FactoryType::STAKE_LOCKER_FACTORY.\n', '\n', '    event StakeLockerCreated(\n', '        address indexed owner,\n', '        address stakeLocker,\n', '        address stakeAsset,\n', '        address liquidityAsset,\n', '        string name,\n', '        string symbol\n', '    );\n', '\n', '    /**\n', '        @dev    Instantiate a StakeLocker.\n', '        @dev    It emits a `StakeLockerCreated` event.\n', '        @param  stakeAsset     Address of the Stake Asset (generally Balancer Pool BPTs).\n', '        @param  liquidityAsset Address of the Liquidity Asset (as defined in the Pool).\n', '        @return stakeLocker    Address of the instantiated StakeLocker.\n', '    */\n', '    function newLocker(\n', '        address stakeAsset,\n', '        address liquidityAsset\n', '    ) external returns (address stakeLocker) {\n', '        stakeLocker           = address(new StakeLocker(stakeAsset, liquidityAsset, msg.sender));\n', '        owner[stakeLocker]    = msg.sender;\n', '        isLocker[stakeLocker] = true;\n', '\n', '        emit StakeLockerCreated(\n', '            msg.sender,\n', '            stakeLocker,\n', '            stakeAsset,\n', '            liquidityAsset,\n', '            StakeLocker(stakeLocker).name(),\n', '            StakeLocker(stakeLocker).symbol()\n', '        );\n', '    }\n', '\n', '}']