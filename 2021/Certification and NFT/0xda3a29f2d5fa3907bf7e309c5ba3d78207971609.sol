['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'abstract contract ReentrancyGuard {\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() public {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(_status != _ENTERED, "REENTRANCY_ERROR");\n', '\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '// Interface declarations\n', '/* solhint-disable func-order */\n', 'interface IUniswapRouter {\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IHarvestVault {\n', '    function deposit(uint256 amount) external;\n', '\n', '    function withdraw(uint256 numberOfShares) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IMintNoRewardPool {\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function rewards(address account) external view returns (uint256);\n', '\n', '    function userRewardPerTokenPaid(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function lastUpdateTime() external view returns (uint256);\n', '\n', '    function rewardRate() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function rewardPerTokenStored() external view returns (uint256);\n', '\n', '    function periodFinish() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function getReward() external;\n', '}\n', '\n', 'interface IHarvest {\n', '    function setHarvestRewardVault(address _harvestRewardVault) external;\n', '\n', '    function setHarvestRewardPool(address _harvestRewardPool) external;\n', '\n', '    function setHarvestPoolToken(address _harvestfToken) external;\n', '\n', '    function setFarmToken(address _farmToken) external;\n', '\n', '    function updateReward() external;\n', '}\n', '\n', 'interface IStrategy {\n', '    function setTreasury(address payable _feeAddress) external;\n', '\n', '    function blacklistAddress(address account) external;\n', '\n', '    function removeFromBlacklist(address account) external;\n', '\n', '    function setCap(uint256 _cap) external;\n', '\n', '    function setLockTime(uint256 _lockTime) external;\n', '\n', '    function setFeeAddress(address payable _feeAddress) external;\n', '\n', '    function setFee(uint256 _fee) external;\n', '\n', '    function rescueDust() external;\n', '\n', '    function rescueAirdroppedTokens(address _token, address to) external;\n', '\n', '    function setSushiswapRouter(address _sushiswapRouter) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// This contract is used for printing receipt tokens\n', '// Whenever someone joins a pool, a receipt token will be printed for that person\n', 'contract ReceiptToken is ERC20, Ownable {\n', '    ERC20 public underlyingToken;\n', '    address public underlyingStrategy;\n', '\n', '    constructor(address underlyingAddress, address strategy)\n', '        public\n', '        ERC20(\n', '            string(abi.encodePacked("pAT-", ERC20(underlyingAddress).name())),\n', '            string(abi.encodePacked("pAT-", ERC20(underlyingAddress).symbol()))\n', '        )\n', '    {\n', '        underlyingToken = ERC20(underlyingAddress);\n', '        underlyingStrategy = strategy;\n', '    }\n', '\n', '    /**\n', '     * @notice Mint new receipt tokens to some user\n', '     * @param to Address of the user that gets the receipt tokens\n', '     * @param amount Amount of receipt tokens that will get minted\n', '     */\n', '    function mint(address to, uint256 amount) public onlyOwner {\n', '        _mint(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burn receipt tokens from some user\n', '     * @param from Address of the user that gets the receipt tokens burne\n', '     * @param amount Amount of receipt tokens that will get burned\n', '     */\n', '    function burn(address from, uint256 amount) public onlyOwner {\n', '        _burn(from, amount);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract StrategyBase {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IUniswapRouter public sushiswapRouter;\n', '\n', '    ReceiptToken public receiptToken;\n', '\n', '    uint256 internal _minSlippage = 10; //0.1%\n', '    uint256 public fee = uint256(100);\n', '    uint256 constant feeFactor = uint256(10000);\n', '    uint256 public cap;\n', '\n', '    /// @notice Event emitted when user makes a deposit and receipt token is minted\n', '    event ReceiptMinted(address indexed user, uint256 amount);\n', '    /// @notice Event emitted when user withdraws and receipt token is burned\n', '    event ReceiptBurned(address indexed user, uint256 amount);\n', '\n', '    function _validateCommon(\n', '        uint256 deadline,\n', '        uint256 amount,\n', '        uint256 _slippage\n', '    ) internal view {\n', '        require(deadline >= block.timestamp, "DEADLINE_ERROR");\n', '        require(amount > 0, "AMOUNT_0");\n', '        require(_slippage >= _minSlippage, "SLIPPAGE_ERROR");\n', '        require(_slippage <= feeFactor, "MAX_SLIPPAGE_ERROR");\n', '    }\n', '\n', '    function _validateDeposit(\n', '        uint256 deadline,\n', '        uint256 amount,\n', '        uint256 total,\n', '        uint256 slippage\n', '    ) internal view {\n', '        _validateCommon(deadline, amount, slippage);\n', '\n', '        require(total.add(amount) <= cap, "CAP_REACHED");\n', '    }\n', '\n', '    function _mintParachainAuctionTokens(uint256 _amount) internal {\n', '        receiptToken.mint(msg.sender, _amount);\n', '        emit ReceiptMinted(msg.sender, _amount);\n', '    }\n', '\n', '    function _burnParachainAuctionTokens(uint256 _amount) internal {\n', '        receiptToken.burn(msg.sender, _amount);\n', '        emit ReceiptBurned(msg.sender, _amount);\n', '    }\n', '\n', '    function _calculateFee(uint256 _amount) internal view returns (uint256) {\n', '        return _calculatePortion(_amount, fee);\n', '    }\n', '\n', '    function _getBalance(address _token) internal view returns (uint256) {\n', '        return IERC20(_token).balanceOf(address(this));\n', '    }\n', '\n', '    function _increaseAllowance(\n', '        address _token,\n', '        address _contract,\n', '        uint256 _amount\n', '    ) internal {\n', '        IERC20(_token).safeIncreaseAllowance(address(_contract), _amount);\n', '    }\n', '\n', '    function _getRatio(\n', '        uint256 numerator,\n', '        uint256 denominator,\n', '        uint256 precision\n', '    ) internal pure returns (uint256) {\n', '        if (numerator == 0 || denominator == 0) {\n', '            return 0;\n', '        }\n', '        uint256 _numerator = numerator * 10**(precision + 1);\n', '        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '\n', '    function _swapTokenToEth(\n', '        address[] memory swapPath,\n', '        uint256 exchangeAmount,\n', '        uint256 deadline,\n', '        uint256 slippage,\n', '        uint256 ethPerToken\n', '    ) internal returns (uint256) {\n', '        uint256[] memory amounts =\n', '            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\n', '        uint256 sushiAmount = amounts[amounts.length - 1]; //amount of ETH\n', '        uint256 portion = _calculatePortion(sushiAmount, slippage);\n', '        uint256 calculatedPrice = (exchangeAmount.mul(ethPerToken)).div(10**18);\n', '        uint256 decimals = ERC20(swapPath[0]).decimals();\n', '        if (decimals < 18) {\n', '            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\n', '        }\n', '        if (sushiAmount > calculatedPrice) {\n', '            require(\n', '                sushiAmount.sub(calculatedPrice) <= portion,\n', '                "PRICE_ERROR_1"\n', '            );\n', '        } else {\n', '            require(\n', '                calculatedPrice.sub(sushiAmount) <= portion,\n', '                "PRICE_ERROR_2"\n', '            );\n', '        }\n', '\n', '        _increaseAllowance(\n', '            swapPath[0],\n', '            address(sushiswapRouter),\n', '            exchangeAmount\n', '        );\n', '        uint256[] memory tokenSwapAmounts =\n', '            sushiswapRouter.swapExactTokensForETH(\n', '                exchangeAmount,\n', '                _getMinAmount(sushiAmount, slippage),\n', '                swapPath,\n', '                address(this),\n', '                deadline\n', '            );\n', '        return tokenSwapAmounts[tokenSwapAmounts.length - 1];\n', '    }\n', '\n', '    function _swapEthToToken(\n', '        address[] memory swapPath,\n', '        uint256 exchangeAmount,\n', '        uint256 deadline,\n', '        uint256 slippage,\n', '        uint256 tokensPerEth\n', '    ) internal returns (uint256) {\n', '        uint256[] memory amounts =\n', '            sushiswapRouter.getAmountsOut(exchangeAmount, swapPath);\n', '        uint256 sushiAmount = amounts[amounts.length - 1];\n', '        uint256 portion = _calculatePortion(sushiAmount, slippage);\n', '        uint256 calculatedPrice =\n', '            (exchangeAmount.mul(tokensPerEth)).div(10**18);\n', '        uint256 decimals = ERC20(swapPath[0]).decimals();\n', '        if (decimals < 18) {\n', '            calculatedPrice = calculatedPrice.mul(10**(18 - decimals));\n', '        }\n', '        if (sushiAmount > calculatedPrice) {\n', '            require(\n', '                sushiAmount.sub(calculatedPrice) <= portion,\n', '                "PRICE_ERROR_1"\n', '            );\n', '        } else {\n', '            require(\n', '                calculatedPrice.sub(sushiAmount) <= portion,\n', '                "PRICE_ERROR_2"\n', '            );\n', '        }\n', '\n', '        uint256[] memory swapResult =\n', '            sushiswapRouter.swapExactETHForTokens{value: exchangeAmount}(\n', '                _getMinAmount(sushiAmount, slippage),\n', '                swapPath,\n', '                address(this),\n', '                deadline\n', '            );\n', '\n', '        return swapResult[swapResult.length - 1];\n', '    }\n', '\n', '    function _getMinAmount(uint256 amount, uint256 slippage)\n', '        private\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 portion = _calculatePortion(amount, slippage);\n', '        return amount.sub(portion);\n', '    }\n', '\n', '    function _calculatePortion(uint256 _amount, uint256 _fee)\n', '        private\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (_amount.mul(_fee)).div(feeFactor);\n', '    }\n', '\n', '    function safeTransferETH(address to, uint256 value) internal {\n', '        (bool success, ) = to.call{value: value}(new bytes(0));\n', '        require(success, "TransferHelper: ETH_TRANSFER_FAILED");\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract HarvestBase is Ownable, StrategyBase, IHarvest, IStrategy {\n', '    address public token;\n', '    address public weth;\n', '    address public farmToken;\n', '    address public harvestfToken;\n', '    address payable public treasuryAddress;\n', '    address payable public feeAddress;\n', '    uint256 public ethDust;\n', '    uint256 public treasueryEthDust;\n', '    uint256 public totalDeposits;\n', '    uint256 public lockTime = 1;\n', '\n', '    mapping(address => bool) public blacklisted; //blacklisted users do not receive a receipt token\n', '\n', '    IMintNoRewardPool public harvestRewardPool;\n', '    IHarvestVault public harvestRewardVault;\n', '\n', '    /// @notice Info of each user.\n', '    struct UserInfo {\n', '        uint256 amountEth; //how much ETH the user entered with; should be 0 for HarvestSC\n', "        uint256 amountToken; //how much Token was obtained by swapping user's ETH\n", '        uint256 amountfToken; //how much fToken was obtained after deposit to vault\n', '        uint256 amountReceiptToken; //receipt tokens printed for user; should be equal to amountfToken\n', '        uint256 underlyingRatio; //ratio between obtained fToken and token\n', '        uint256 userTreasuryEth; //how much eth the user sent to treasury\n', '        uint256 userCollectedFees; //how much eth the user sent to fee address\n', '        bool wasUserBlacklisted; //if user was blacklist at deposit time, he is not receiving receipt tokens\n', '        uint256 timestamp; //first deposit timestamp; used for withdrawal lock time check\n', '        uint256 earnedTokens;\n', '        uint256 earnedRewards; //before fees\n', '        //----\n', '        uint256 rewards;\n', '        uint256 userRewardPerTokenPaid;\n', '    }\n', '    mapping(address => UserInfo) public userInfo;\n', '\n', '    struct UserDeposits {\n', '        uint256 timestamp;\n', '        uint256 amountfToken;\n', '    }\n', '    /// @notice Used internally for avoiding "stack-too-deep" error when depositing\n', '    struct DepositData {\n', '        address[] swapPath;\n', '        uint256[] swapAmounts;\n', '        uint256 obtainedToken;\n', '        uint256 obtainedfToken;\n', '        uint256 prevfTokenBalance;\n', '    }\n', '\n', '    /// @notice Used internally for avoiding "stack-too-deep" error when withdrawing\n', '    struct WithdrawData {\n', '        uint256 prevDustEthBalance;\n', '        uint256 prevfTokenBalance;\n', '        uint256 prevTokenBalance;\n', '        uint256 obtainedfToken;\n', '        uint256 obtainedToken;\n', '        uint256 feeableToken;\n', '        uint256 feeableEth;\n', '        uint256 totalEth;\n', '        uint256 totalToken;\n', '        uint256 auctionedEth;\n', '        uint256 auctionedToken;\n', '        uint256 rewards;\n', '        uint256 farmBalance;\n', '        uint256 burnAmount;\n', '        uint256 earnedTokens;\n', '        uint256 rewardsInEth;\n', '        uint256 auctionedRewardsInEth;\n', '        uint256 userRewardsInEth;\n', '        uint256 initialAmountfToken;\n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Events -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    event ExtraTokensExchanged(\n', '        address indexed user,\n', '        uint256 tokensAmount,\n', '        uint256 obtainedEth\n', '    );\n', '    event ObtainedInfo(\n', '        address indexed user,\n', '        uint256 underlying,\n', '        uint256 underlyingReceipt\n', '    );\n', '\n', '    event RewardsEarned(address indexed user, uint256 amount);\n', '    event ExtraTokens(address indexed user, uint256 amount);\n', '\n', '    /// @notice Event emitted when blacklist status for an address changes\n', '    event BlacklistChanged(\n', '        string actionType,\n', '        address indexed user,\n', '        bool oldVal,\n', '        bool newVal\n', '    );\n', '\n', '    /// @notice Event emitted when owner makes a rescue dust request\n', '    event RescuedDust(string indexed dustType, uint256 amount);\n', '\n', '    /// @notice Event emitted when owner changes any contract address\n', '    event ChangedAddress(\n', '        string indexed addressType,\n', '        address indexed oldAddress,\n', '        address indexed newAddress\n', '    );\n', '\n', '    /// @notice Event emitted when owner changes any contract address\n', '    event ChangedValue(\n', '        string indexed valueType,\n', '        uint256 indexed oldValue,\n', '        uint256 indexed newValue\n', '    );\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Setters -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    /**\n', '     * @notice Update the address of VaultDAI\n', '     * @dev Can only be called by the owner\n', '     * @param _harvestRewardVault Address of VaultDAI\n', '     */\n', '    function setHarvestRewardVault(address _harvestRewardVault)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_harvestRewardVault != address(0), "VAULT_0x0");\n', '        emit ChangedAddress(\n', '            "VAULT",\n', '            address(harvestRewardVault),\n', '            _harvestRewardVault\n', '        );\n', '        harvestRewardVault = IHarvestVault(_harvestRewardVault);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of NoMintRewardPool\n', '     * @dev Can only be called by the owner\n', '     * @param _harvestRewardPool Address of NoMintRewardPool\n', '     */\n', '    function setHarvestRewardPool(address _harvestRewardPool)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_harvestRewardPool != address(0), "POOL_0x0");\n', '        emit ChangedAddress(\n', '            "POOL",\n', '            address(harvestRewardPool),\n', '            _harvestRewardPool\n', '        );\n', '        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of Sushiswap Router\n', '     * @dev Can only be called by the owner\n', '     * @param _sushiswapRouter Address of Sushiswap Router\n', '     */\n', '    function setSushiswapRouter(address _sushiswapRouter)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_sushiswapRouter != address(0), "0x0");\n', '        emit ChangedAddress(\n', '            "SUSHISWAP_ROUTER",\n', '            address(sushiswapRouter),\n', '            _sushiswapRouter\n', '        );\n', '        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\n', '    }\n', '\n', '    /**\n', "     * @notice Update the address of Pool's underlying token\n", '     * @dev Can only be called by the owner\n', "     * @param _harvestfToken Address of Pool's underlying token\n", '     */\n', '    function setHarvestPoolToken(address _harvestfToken)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_harvestfToken != address(0), "TOKEN_0x0");\n', '        emit ChangedAddress("TOKEN", harvestfToken, _harvestfToken);\n', '        harvestfToken = _harvestfToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address of FARM\n', '     * @dev Can only be called by the owner\n', '     * @param _farmToken Address of FARM\n', '     */\n', '    function setFarmToken(address _farmToken) external override onlyOwner {\n', '        require(_farmToken != address(0), "FARM_0x0");\n', '        emit ChangedAddress("FARM", farmToken, _farmToken);\n', '        farmToken = _farmToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the address for fees\n', '     * @dev Can only be called by the owner\n', "     * @param _feeAddress Fee's address\n", '     */\n', '    function setTreasury(address payable _feeAddress)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_feeAddress != address(0), "0x0");\n', '        emit ChangedAddress(\n', '            "TREASURY",\n', '            address(treasuryAddress),\n', '            address(_feeAddress)\n', '        );\n', '        treasuryAddress = _feeAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice Blacklist address; blacklisted addresses do not receive receipt tokens\n', '     * @dev Can only be called by the owner\n', '     * @param account User/contract address\n', '     */\n', '    function blacklistAddress(address account) external override onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        emit BlacklistChanged("BLACKLIST", account, blacklisted[account], true);\n', '        blacklisted[account] = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Remove address from blacklisted addresses; blacklisted addresses do not receive receipt tokens\n', '     * @dev Can only be called by the owner\n', '     * @param account User/contract address\n', '     */\n', '    function removeFromBlacklist(address account) external override onlyOwner {\n', '        require(account != address(0), "0x0");\n', '        emit BlacklistChanged("REMOVE", account, blacklisted[account], false);\n', '        blacklisted[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Set max ETH cap for this strategy\n', '     * @dev Can only be called by the owner\n', '     * @param _cap ETH amount\n', '     */\n', '    function setCap(uint256 _cap) external override onlyOwner {\n', '        emit ChangedValue("CAP", cap, _cap);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @notice Set lock time\n', '     * @dev Can only be called by the owner\n', '     * @param _lockTime lock time in seconds\n', '     */\n', '    function setLockTime(uint256 _lockTime) external override onlyOwner {\n', '        require(_lockTime > 0, "TIME_0");\n', '        emit ChangedValue("LOCKTIME", lockTime, _lockTime);\n', '        lockTime = _lockTime;\n', '    }\n', '\n', '    function setFeeAddress(address payable _feeAddress)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        emit ChangedAddress("FEE", address(feeAddress), address(_feeAddress));\n', '        feeAddress = _feeAddress;\n', '    }\n', '\n', '    function setFee(uint256 _fee) external override onlyOwner {\n', '        require(_fee <= uint256(9000), "FEE_TOO_HIGH");\n', '        emit ChangedValue("FEE", fee, _fee);\n', '    }\n', '\n', '    /**\n', '     * @notice Rescue dust resulted from swaps/liquidity\n', '     * @dev Can only be called by the owner\n', '     */\n', '    function rescueDust() external override onlyOwner {\n', '        if (ethDust > 0) {\n', '            safeTransferETH(treasuryAddress, ethDust);\n', '            treasueryEthDust = treasueryEthDust.add(ethDust);\n', '            emit RescuedDust("ETH", ethDust);\n', '            ethDust = 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Rescue any non-reward token that was airdropped to this contract\n', '     * @dev Can only be called by the owner\n', '     */\n', '    function rescueAirdroppedTokens(address _token, address to)\n', '        external\n', '        override\n', '        onlyOwner\n', '    {\n', '        require(_token != address(0), "token_0x0");\n', '        require(to != address(0), "to_0x0");\n', '        require(_token != farmToken, "rescue_reward_error");\n', '\n', '        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\n', '        require(balanceOfToken > 0, "balance_0");\n', '\n', '        require(IERC20(_token).transfer(to, balanceOfToken), "rescue_failed");\n', '    }\n', '\n', '    /// @notice Transfer rewards to this strategy\n', '    function updateReward() external override onlyOwner {\n', '        harvestRewardPool.getReward();\n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ View methods -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    /**\n', '     * @notice Check if user can withdraw based on current lock time\n', '     * @param user Address of the user\n', '     * @return true or false\n', '     */\n', '    function isWithdrawalAvailable(address user) public view returns (bool) {\n', '        if (lockTime > 0) {\n', '            return userInfo[user].timestamp.add(lockTime) <= block.timestamp;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice View function to see pending rewards for account.\n', '     * @param account user account to check\n', '     * @return pending rewards\n', '     */\n', '    function getPendingRewards(address account) public view returns (uint256) {\n', '        if (account != address(0)) {\n', '            if (userInfo[account].amountfToken == 0) {\n', '                return 0;\n', '            }\n', '            return\n', '                _earned(\n', '                    userInfo[account].amountfToken,\n', '                    userInfo[account].userRewardPerTokenPaid,\n', '                    userInfo[account].rewards\n', '                );\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Internal methods -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    function _calculateRewards(\n', '        address account,\n', '        uint256 amount,\n', '        uint256 amountfToken\n', '    ) internal view returns (uint256) {\n', '        uint256 rewards = userInfo[account].rewards;\n', '        uint256 farmBalance = IERC20(farmToken).balanceOf(address(this));\n', '\n', '        if (amount == 0) {\n', '            if (rewards < farmBalance) {\n', '                return rewards;\n', '            }\n', '            return farmBalance;\n', '        }\n', '\n', '        return (amount.mul(rewards)).div(amountfToken);\n', '    }\n', '\n', '    function _updateRewards(address account) internal {\n', '        if (account != address(0)) {\n', '            UserInfo storage user = userInfo[account];\n', '\n', '            uint256 _stored = harvestRewardPool.rewardPerToken();\n', '\n', '            user.rewards = _earned(\n', '                user.amountfToken,\n', '                user.userRewardPerTokenPaid,\n', '                user.rewards\n', '            );\n', '            user.userRewardPerTokenPaid = _stored;\n', '        }\n', '    }\n', '\n', '    function _earned(\n', '        uint256 _amountfToken,\n', '        uint256 _userRewardPerTokenPaid,\n', '        uint256 _rewards\n', '    ) internal view returns (uint256) {\n', '        return\n', '            _amountfToken\n', '                .mul(\n', '                harvestRewardPool.rewardPerToken().sub(_userRewardPerTokenPaid)\n', '            )\n', '                .div(1e18)\n', '                .add(_rewards);\n', '    }\n', '\n', '    function _validateWithdraw(\n', '        uint256 deadline,\n', '        uint256 amount,\n', '        uint256 amountfToken,\n', '        uint256 receiptBalance,\n', '        uint256 amountReceiptToken,\n', '        bool wasUserBlacklisted,\n', '        uint256 timestamp,\n', '        uint256 slippage\n', '    ) internal view {\n', '        _validateCommon(deadline, amount, slippage);\n', '\n', '        require(amountfToken >= amount, "AMOUNT_GREATER_THAN_BALANCE");\n', '\n', '        if (!wasUserBlacklisted) {\n', '            require(receiptBalance >= amountReceiptToken, "RECEIPT_AMOUNT");\n', '        }\n', '        if (lockTime > 0) {\n', '            require(timestamp.add(lockTime) <= block.timestamp, "LOCK_TIME");\n', '        }\n', '    }\n', '\n', '    function _depositTokenToHarvestVault(uint256 amount)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        _increaseAllowance(token, address(harvestRewardVault), amount);\n', '\n', '        uint256 prevfTokenBalance = _getBalance(harvestfToken);\n', '        harvestRewardVault.deposit(amount);\n', '        uint256 currentfTokenBalance = _getBalance(harvestfToken);\n', '\n', '        require(\n', '            currentfTokenBalance > prevfTokenBalance,\n', '            "DEPOSIT_VAULT_ERROR"\n', '        );\n', '\n', '        return currentfTokenBalance.sub(prevfTokenBalance);\n', '    }\n', '\n', '    function _withdrawTokenFromHarvestVault(uint256 amount)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        _increaseAllowance(harvestfToken, address(harvestRewardVault), amount);\n', '\n', '        uint256 prevTokenBalance = _getBalance(token);\n', '        harvestRewardVault.withdraw(amount);\n', '        uint256 currentTokenBalance = _getBalance(token);\n', '\n', '        require(currentTokenBalance > prevTokenBalance, "WITHDRAW_VAULT_ERROR");\n', '\n', '        return currentTokenBalance.sub(prevTokenBalance);\n', '    }\n', '\n', '    function _stakefTokenToHarvestPool(uint256 amount) internal {\n', '        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\n', '        harvestRewardPool.stake(amount);\n', '    }\n', '\n', '    function _unstakefTokenFromHarvestPool(uint256 amount)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        _increaseAllowance(harvestfToken, address(harvestRewardPool), amount);\n', '\n', '        uint256 prevfTokenBalance = _getBalance(harvestfToken);\n', '        harvestRewardPool.withdraw(amount);\n', '        uint256 currentfTokenBalance = _getBalance(harvestfToken);\n', '\n', '        require(\n', '            currentfTokenBalance > prevfTokenBalance,\n', '            "WITHDRAW_POOL_ERROR"\n', '        );\n', '\n', '        return currentfTokenBalance.sub(prevfTokenBalance);\n', '    }\n', '\n', '    function _calculatefTokenRemainings(\n', '        uint256 obtainedfToken,\n', '        uint256 amountfToken,\n', '        bool wasUserBlacklisted,\n', '        uint256 amountReceiptToken\n', '    )\n', '        internal\n', '        pure\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        uint256 burnAmount = 0;\n', '        if (obtainedfToken < amountfToken) {\n', '            amountfToken = amountfToken.sub(obtainedfToken);\n', '            if (!wasUserBlacklisted) {\n', '                amountReceiptToken = amountReceiptToken.sub(obtainedfToken);\n', '                burnAmount = obtainedfToken;\n', '            }\n', '        } else {\n', '            amountfToken = 0;\n', '            if (!wasUserBlacklisted) {\n', '                burnAmount = amountReceiptToken;\n', '                amountReceiptToken = 0;\n', '            }\n', '        }\n', '\n', '        return (amountfToken, amountReceiptToken, burnAmount);\n', '    }\n', '\n', '    event log(string s);\n', '    event log(uint256 amount);\n', '\n', '    function _calculateFeeableTokens(\n', '        uint256 amount,\n', '        uint256 amountfToken,\n', '        uint256 obtainedToken,\n', '        uint256 amountToken,\n', '        uint256 obtainedfToken,\n', '        uint256 underlyingRatio\n', '    ) internal returns (uint256 feeableToken, uint256 earnedTokens) {\n', '        emit log("_calculateFeeableTokens");\n', '        emit log(amount);\n', '        emit log(amountfToken);\n', '        emit log(obtainedToken);\n', '        emit log(amountToken);\n', '        if (amount == amountfToken) {\n', '            //there is no point to do the ratio math as we can just get the difference between current obtained tokens and initial obtained tokens\n', '            if (obtainedToken > amountToken) {\n', '                feeableToken = obtainedToken.sub(amountToken);\n', '            }\n', '        } else {\n', '            uint256 currentRatio = _getRatio(obtainedfToken, obtainedToken, 18);\n', '\n', '            if (currentRatio < underlyingRatio) {\n', '                uint256 noOfOriginalTokensForCurrentAmount =\n', '                    (amount.mul(10**18)).div(underlyingRatio);\n', '                if (noOfOriginalTokensForCurrentAmount < obtainedToken) {\n', '                    feeableToken = obtainedToken.sub(\n', '                        noOfOriginalTokensForCurrentAmount\n', '                    );\n', '                }\n', '            }\n', '        }\n', '\n', '        emit log("_calculateFeeableTokens end");\n', '        emit log(feeableToken);\n', '\n', '        if (feeableToken > 0) {\n', '            uint256 extraTokensFee = _calculateFee(feeableToken);\n', '            emit ExtraTokens(msg.sender, feeableToken.sub(extraTokensFee));\n', '            earnedTokens = feeableToken.sub(extraTokensFee);\n', '        }\n', '    }\n', '\n', '    receive() external payable {}\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract HarvestSCBase is StrategyBase, HarvestBase {\n', '    uint256 public totalToken; //total invested eth\n', '\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    //------------------------------------ Events -------------------------------------------------//\n', '    //-----------------------------------------------------------------------------------------------------------------//\n', '    /// @notice Event emitted when rewards are exchanged to ETH or to a specific Token\n', '    event RewardsExchanged(\n', '        address indexed user,\n', '        string exchangeType, //ETH or Token\n', '        uint256 rewardsAmount,\n', '        uint256 obtainedAmount\n', '    );\n', '\n', '    /// @notice Event emitted when user makes a deposit\n', '    event Deposit(\n', '        address indexed user,\n', '        address indexed origin,\n', '        uint256 amountToken,\n', '        uint256 amountfToken\n', '    );\n', '\n', '    /// @notice Event emitted when user withdraws\n', '    event Withdraw(\n', '        address indexed user,\n', '        address indexed origin,\n', '        uint256 amountToken,\n', '        uint256 amountfToken,\n', '        uint256 treasuryAmountEth\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', '  |Strategy Flow| \n', "      - User shows up with Token and we deposit it in Havest's Vault. \n", "      - After this we have fToken that we add in Harvest's Reward Pool which gives FARM as rewards\n", '\n', '    - Withdrawal flow does same thing, but backwards\n', '        - User can obtain extra Token when withdrawing. 50% of them goes to the user, 50% goes to the treasury in ETH\n', '        - User can obtain FARM tokens when withdrawing. 50% of them goes to the user in Token, 50% goes to the treasury in ETH \n', '*/\n', 'contract HarvestSC is HarvestSCBase, ReentrancyGuard {\n', '    /**\n', '     * @notice Create a new HarvestDAI contract\n', '     * @param _harvestRewardVault VaultDAI  address\n', '     * @param _harvestRewardPool NoMintRewardPool address\n', '     * @param _sushiswapRouter Sushiswap Router address\n', "     * @param _harvestfToken Pool's underlying token address\n", '     * @param _farmToken Farm address\n', '     * @param _token Token address\n', '     * @param _weth WETH address\n', '     * @param _treasuryAddress treasury address\n', '     * @param _feeAddress fee address\n', '     */\n', '    constructor(\n', '        address _harvestRewardVault,\n', '        address _harvestRewardPool,\n', '        address _sushiswapRouter,\n', '        address _harvestfToken,\n', '        address _farmToken,\n', '        address _token,\n', '        address _weth,\n', '        address payable _treasuryAddress,\n', '        address payable _feeAddress\n', '    ) public {\n', '        require(_harvestRewardVault != address(0), "VAULT_0x0");\n', '        require(_harvestRewardPool != address(0), "POOL_0x0");\n', '        require(_sushiswapRouter != address(0), "ROUTER_0x0");\n', '        require(_harvestfToken != address(0), "fTOKEN_0x0");\n', '        require(_farmToken != address(0), "FARM_0x0");\n', '        require(_token != address(0), "TOKEN_0x0");\n', '        require(_weth != address(0), "WETH_0x0");\n', '        require(_treasuryAddress != address(0), "TREASURY_0x0");\n', '        require(_feeAddress != address(0), "FEE_0x0");\n', '\n', '        harvestRewardVault = IHarvestVault(_harvestRewardVault);\n', '        harvestRewardPool = IMintNoRewardPool(_harvestRewardPool);\n', '        sushiswapRouter = IUniswapRouter(_sushiswapRouter);\n', '        harvestfToken = _harvestfToken;\n', '        farmToken = _farmToken;\n', '        token = _token;\n', '        weth = _weth;\n', '        treasuryAddress = _treasuryAddress;\n', '        receiptToken = new ReceiptToken(token, address(this));\n', '        feeAddress = _feeAddress;\n', '\n', '        cap = 5000000 * (10 ** 18);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposit to this strategy for rewards\n', '     * @param tokenAmount Amount of Token investment\n', '     * @param deadline Number of blocks until transaction expires\n', '     * @return Amount of fToken\n', '     */\n', '    function deposit(\n', '        uint256 tokenAmount,\n', '        uint256 deadline,\n', '        uint256 slippage\n', '    ) public nonReentrant returns (uint256) {\n', '        // -----\n', '        // validate\n', '        // -----\n', '        _validateDeposit(deadline, tokenAmount, totalToken, slippage);\n', '\n', '        _updateRewards(msg.sender);\n', '\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\n', '\n', '        DepositData memory results;\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        if (user.amountfToken == 0) {\n', '            user.wasUserBlacklisted = blacklisted[msg.sender];\n', '        }\n', '        if (user.timestamp == 0) {\n', '            user.timestamp = block.timestamp;\n', '        }\n', '\n', '        totalToken = totalToken.add(tokenAmount);\n', '        user.amountToken = user.amountToken.add(tokenAmount);\n', '        results.obtainedToken = tokenAmount;\n', '\n', '        // -----\n', '        // deposit Token into harvest and get fToken\n', '        // -----\n', '        results.obtainedfToken = _depositTokenToHarvestVault(\n', '            results.obtainedToken\n', '        );\n', '\n', '        // -----\n', '        // stake fToken into the NoMintRewardPool\n', '        // -----\n', '        _stakefTokenToHarvestPool(results.obtainedfToken);\n', '        user.amountfToken = user.amountfToken.add(results.obtainedfToken);\n', '\n', '        // -----\n', '        // mint parachain tokens if user is not blacklisted\n', '        // -----\n', '        if (!user.wasUserBlacklisted) {\n', '            user.amountReceiptToken = user.amountReceiptToken.add(\n', '                results.obtainedfToken\n', '            );\n', '            _mintParachainAuctionTokens(results.obtainedfToken);\n', '        }\n', '\n', '        emit Deposit(\n', '            msg.sender,\n', '            tx.origin,\n', '            results.obtainedToken,\n', '            results.obtainedfToken\n', '        );\n', '\n', '\n', '        totalDeposits = totalDeposits.add(results.obtainedfToken);\n', '\n', '        user.underlyingRatio = _getRatio(\n', '            user.amountfToken,\n', '            user.amountToken,\n', '            18\n', '        );\n', '\n', '        return results.obtainedfToken;\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw tokens and claim rewards\n', '     * @param deadline Number of blocks until transaction expires\n', '     * @return Amount of ETH obtained\n', '     */\n', '    function withdraw(\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint256 slippage,\n', '        uint256 ethPerToken,\n', '        uint256 ethPerFarm,\n', '        uint256 tokensPerEth //no of tokens per 1 eth\n', '    ) public nonReentrant returns (uint256) {\n', '        // -----\n', '        // validation\n', '        // -----\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint256 receiptBalance = receiptToken.balanceOf(msg.sender);\n', '\n', '        _validateWithdraw(\n', '            deadline,\n', '            amount,\n', '            user.amountfToken,\n', '            receiptBalance,\n', '            user.amountReceiptToken,\n', '            user.wasUserBlacklisted,\n', '            user.timestamp,\n', '            slippage\n', '        );\n', '\n', '        _updateRewards(msg.sender);\n', '\n', '        WithdrawData memory results;\n', '        results.initialAmountfToken = user.amountfToken;\n', '        results.prevDustEthBalance = address(this).balance;\n', '\n', '        // -----\n', '        // withdraw from HarvestRewardPool (get fToken back)\n', '        // -----\n', '        results.obtainedfToken = _unstakefTokenFromHarvestPool(amount);\n', '\n', '        // -----\n', '        // get rewards\n', '        // -----\n', '        harvestRewardPool.getReward(); //transfers FARM to this contract\n', '\n', '        // -----\n', '        // calculate rewards and do the accounting for fTokens\n', '        // -----\n', '        uint256 transferableRewards =\n', '            _calculateRewards(msg.sender, amount, results.initialAmountfToken);\n', '\n', '        (\n', '        user.amountfToken,\n', '        user.amountReceiptToken,\n', '        results.burnAmount\n', '        ) = _calculatefTokenRemainings(\n', '            results.obtainedfToken,\n', '            results.initialAmountfToken,\n', '            user.wasUserBlacklisted,\n', '            user.amountReceiptToken\n', '        );\n', '        _burnParachainAuctionTokens(results.burnAmount);\n', '\n', '        // -----\n', '        // withdraw from HarvestRewardVault (return fToken and get Token back)\n', '        // -----\n', '        results.obtainedToken = _withdrawTokenFromHarvestVault(\n', '            results.obtainedfToken\n', '        );\n', '        emit ObtainedInfo(\n', '            msg.sender,\n', '            results.obtainedToken,\n', '            results.obtainedfToken\n', '        );\n', '        totalDeposits = totalDeposits.sub(results.obtainedfToken);\n', '\n', '        // -----\n', '        // calculate feeable tokens (extra Token obtained by returning fToken)\n', '        //              - feeableToken/2 (goes to the treasury in ETH)\n', '        //              - results.totalToken = obtainedToken + 1/2*feeableToken (goes to the user)\n', '        // -----\n', '        results.auctionedToken = 0;\n', '        (results.feeableToken, results.earnedTokens) = _calculateFeeableTokens(\n', '            amount,\n', '            results.initialAmountfToken,\n', '            results.obtainedToken,\n', '            user.amountToken,\n', '            results.obtainedfToken,\n', '            user.underlyingRatio\n', '        );\n', '        user.earnedTokens = user.earnedTokens.add(results.earnedTokens);\n', '        if (results.obtainedToken <= user.amountToken) {\n', '            user.amountToken = user.amountToken.sub(results.obtainedToken);\n', '        } else {\n', '            user.amountToken = 0;\n', '        }\n', '        results.obtainedToken = results.obtainedToken.sub(results.feeableToken);\n', '\n', '        if (results.feeableToken > 0) {\n', '            results.auctionedToken = results.feeableToken.div(2);\n', '            results.feeableToken = results.feeableToken.sub(\n', '                results.auctionedToken\n', '            );\n', '        }\n', '        results.totalToken = results.obtainedToken.add(results.feeableToken);\n', '\n', '        // -----\n', '        // swap auctioned Token to ETH\n', '        // -----\n', '        address[] memory swapPath = new address[](2);\n', '        swapPath[0] = token;\n', '        swapPath[1] = weth;\n', '\n', '        if (results.auctionedToken > 0) {\n', '            uint256 swapAuctionedTokenResult =\n', '            _swapTokenToEth(\n', '                swapPath,\n', '                results.auctionedToken,\n', '                deadline,\n', '                slippage,\n', '                ethPerToken\n', '            );\n', '            results.auctionedEth.add(swapAuctionedTokenResult);\n', '\n', '            emit ExtraTokensExchanged(\n', '                msg.sender,\n', '                results.auctionedToken,\n', '                swapAuctionedTokenResult\n', '            );\n', '        }\n', '\n', '        // -----\n', '        // check & swap FARM rewards with ETH (50% for treasury) and with Token by going through ETH first (the other 50% for user)\n', '        // -----\n', '\n', '        if (transferableRewards > 0) {\n', '            emit RewardsEarned(msg.sender, transferableRewards);\n', '            user.earnedRewards = user.earnedRewards.add(transferableRewards);\n', '\n', '            swapPath[0] = farmToken;\n', '\n', '            results.rewardsInEth = _swapTokenToEth(\n', '                swapPath,\n', '                transferableRewards,\n', '                deadline,\n', '                slippage,\n', '                ethPerFarm\n', '            );\n', '            results.auctionedRewardsInEth = results.rewardsInEth.div(2);\n', '            //50% goes to treasury in ETH\n', '            results.userRewardsInEth = results.rewardsInEth.sub(\n', '                results.auctionedRewardsInEth\n', '            );\n', '            //50% goes to user in Token (swapped below)\n', '\n', '            results.auctionedEth = results.auctionedEth.add(\n', '                results.auctionedRewardsInEth\n', '            );\n', '            emit RewardsExchanged(\n', '                msg.sender,\n', '                "ETH",\n', '                transferableRewards,\n', '                results.rewardsInEth\n', '            );\n', '        }\n', '        if (results.userRewardsInEth > 0) {\n', '            swapPath[0] = weth;\n', '            swapPath[1] = token;\n', '\n', '            uint256 userRewardsEthToTokenResult =\n', '            _swapEthToToken(\n', '                swapPath,\n', '                results.userRewardsInEth,\n', '                deadline,\n', '                slippage,\n', '                tokensPerEth\n', '            );\n', '            results.totalToken = results.totalToken.add(\n', '                userRewardsEthToTokenResult\n', '            );\n', '\n', '            emit RewardsExchanged(\n', '                msg.sender,\n', '                "Token",\n', '                transferableRewards.div(2),\n', '                userRewardsEthToTokenResult\n', '            );\n', '        }\n', '        user.rewards = user.rewards.sub(transferableRewards);\n', '\n', '        // -----\n', '        // final accounting\n', '        // -----\n', '        if (results.totalToken < totalToken) {\n', '            totalToken = totalToken.sub(results.totalToken);\n', '        } else {\n', '            totalToken = 0;\n', '        }\n', '\n', '        if (user.amountfToken == 0) {\n', '            user.amountToken = 0; //1e-18 dust\n', '        }\n', '        user.underlyingRatio = _getRatio(\n', '            user.amountfToken,\n', '            user.amountToken,\n', '            18\n', '        );\n', '\n', '        // -----\n', '        // transfer Token to user, ETH to fee address and ETH to the treasury address\n', '        // -----\n', '        if (fee > 0) {\n', '            uint256 feeToken = _calculateFee(results.totalToken);\n', '            results.totalToken = results.totalToken.sub(feeToken);\n', '\n', '            swapPath[0] = token;\n', '            swapPath[1] = weth;\n', '\n', '            uint256 feeTokenInEth =\n', '            _swapTokenToEth(\n', '                swapPath,\n', '                feeToken,\n', '                deadline,\n', '                slippage,\n', '                ethPerToken\n', '            );\n', '\n', '            safeTransferETH(feeAddress, feeTokenInEth);\n', '            user.userCollectedFees = user.userCollectedFees.add(feeTokenInEth);\n', '        }\n', '\n', '        IERC20(token).safeTransfer(msg.sender, results.totalToken);\n', '\n', '        safeTransferETH(treasuryAddress, results.auctionedEth);\n', '        user.userTreasuryEth = user.userTreasuryEth.add(results.auctionedEth);\n', '\n', '        emit Withdraw(\n', '            msg.sender,\n', '            tx.origin,\n', '            results.obtainedToken,\n', '            results.obtainedfToken,\n', '            results.auctionedEth\n', '        );\n', '\n', '        // -----\n', '        // dust check\n', '        // -----\n', '        if (address(this).balance > results.prevDustEthBalance) {\n', '            ethDust = ethDust.add(\n', '                address(this).balance.sub(results.prevDustEthBalance)\n', '            );\n', '        }\n', '\n', '        return results.totalToken;\n', '    }\n', '}']