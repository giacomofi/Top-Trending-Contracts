['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', 'import "./NFTXv5.sol";\n', 'import "./IXTokenFactory.sol";\n', '\n', 'contract NFTXv6 is NFTXv5 {\n', '    function changeTokenName(uint256 vaultId, string memory newName)\n', '        public\n', '        virtual\n', '        override\n', '    {}\n', '\n', '    function changeTokenSymbol(uint256 vaultId, string memory newSymbol)\n', '        public\n', '        virtual\n', '        override\n', '    {}\n', '\n', '    /* function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\n', '        public\n', '        virtual\n', '        override\n', '    {} */\n', '\n', '    /* IXTokenFactory public xTokenFactory; */\n', '\n', '    /* function setXTokenFactoryAddress(address a) public onlyOwner {\n', '      xTokenFactory = IXTokenFactory(a);\n', '    } */\n', '\n', '    function createVault(\n', '        address _xTokenAddress,\n', '        address _assetAddress,\n', '        bool _isD2Vault\n', '    ) public virtual override nonReentrant returns (uint256) {\n', '        return 99999;\n', '    }\n', '\n', '    function createVault(\n', '        string memory name,\n', '        string memory symbol,\n', '        address _assetAddress,\n', '        bool _isD2Vault\n', '    ) public virtual nonReentrant returns (uint256) {\n', '        onlyOwnerIfPaused(0);\n', '        IXTokenFactory xTokenFactory = IXTokenFactory(\n', '            0xE7ac17cE2550f3a0B4fE3616515975eb093CEfea\n', '        );\n', '        address xTokenAddress = xTokenFactory.createXToken(name, symbol);\n', '        uint256 vaultId = store.addNewVault();\n', '        store.setXTokenAddress(vaultId, xTokenAddress);\n', '        store.setXToken(vaultId);\n', '        if (!_isD2Vault) {\n', '            store.setNftAddress(vaultId, _assetAddress);\n', '            store.setNft(vaultId);\n', '            store.setNegateEligibility(vaultId, true);\n', '        } else {\n', '            store.setD2AssetAddress(vaultId, _assetAddress);\n', '            store.setD2Asset(vaultId);\n', '            store.setIsD2Vault(vaultId, true);\n', '        }\n', '        store.setManager(vaultId, msg.sender);\n', '        emit NewVault(vaultId, msg.sender);\n', '        return vaultId;\n', '    }\n', '\n', '    /* function redeemD1For(\n', '        uint256 vaultId,\n', '        uint256 amount,\n', '        uint256[] memory nftIds,\n', '        address recipient\n', '    ) public payable virtual nonReentrant {\n', '        onlyOwnerIfPaused(2);\n', '        _redeemHelperFor(vaultId, nftIds, false, recipient);\n', '        emit Redeem(vaultId, nftIds, 0, msg.sender);\n', '    }\n', '\n', '    function _redeemHelper(\n', '        uint256 vaultId,\n', '        uint256[] memory nftIds,\n', '        bool isDualOp\n', '    ) internal virtual override {\n', '        _redeemHelperFor(vaultId, nftIds, isDualOp, msg.sender);\n', '    }\n', '\n', '    function _redeemHelperFor(\n', '        uint256 vaultId,\n', '        uint256[] memory nftIds,\n', '        bool isDualOp,\n', '        address recipient\n', '    ) internal virtual {\n', '        if (!isDualOp) {\n', '            store.xToken(vaultId).burnFrom(\n', '                msg.sender,\n', '                nftIds.length.mul(10**18)\n', '            );\n', '        }\n', '        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\n', '            uint256 nftId = nftIds[i];\n', '            require(\n', '                store.holdingsContains(vaultId, nftId) ||\n', '                    store.reservesContains(vaultId, nftId),\n', '                "NFT not in vault"\n', '            );\n', '            if (store.holdingsContains(vaultId, nftId)) {\n', '                store.holdingsRemove(vaultId, nftId);\n', '            } else {\n', '                store.reservesRemove(vaultId, nftId);\n', '            }\n', '            if (store.flipEligOnRedeem(vaultId)) {\n', '                bool isElig = store.isEligible(vaultId, nftId);\n', '                store.setIsEligible(vaultId, nftId, !isElig);\n', '            }\n', '            store.nft(vaultId).safeTransferFrom(\n', '                address(this),\n', '                recipient,\n', '                nftId\n', '            );\n', '        }\n', '    } */\n', '\n', '}']