['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// File: contracts/interface/IBuyoutProposals.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract DelegationStorage {\n', '    address public governance;\n', '    /**\n', '     * @notice Implementation address for this contract\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'contract IBuyoutProposalsStorge is DelegationStorage {\n', '    address public regulator;\n', '    address public market;\n', '\n', '    uint256 public proposolIdCount;\n', '\n', '    uint256 public voteLenth = 259200;\n', '\n', '    mapping(uint256 => uint256) public proposalIds;\n', '\n', '    mapping(uint256 => uint256[]) internal proposalsHistory;\n', '\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    mapping(uint256 => mapping(address => bool)) public voted;\n', '\n', '    uint256 public passNeeded = 75;\n', '\n', '    // n times higher than the market price to buyout\n', '    uint256 public buyoutTimes = 100;\n', '\n', '    uint256 internal constant max = 100;\n', '\n', '    uint256 public buyoutProportion = 15;\n', '\n', '    mapping(uint256 => uint256) allVotes;\n', '\n', '    struct Proposal {\n', '        uint256 votesReceived;\n', '        uint256 voteTotal;\n', '        bool passed;\n', '        address submitter;\n', '        uint256 voteDeadline;\n', '        uint256 shardAmount;\n', '        uint256 wantTokenAmount;\n', '        uint256 buyoutTimes;\n', '        uint256 price;\n', '        bool isSubmitterWithDraw;\n', '        uint256 shardPoolId;\n', '        bool isFailedConfirmed;\n', '        uint256 blockHeight;\n', '        uint256 createTime;\n', '    }\n', '}\n', '\n', 'abstract contract IBuyoutProposals is IBuyoutProposalsStorge {\n', '    function createProposal(\n', '        uint256 _shardPoolId,\n', '        uint256 shardBalance,\n', '        uint256 wantTokenAmount,\n', '        uint256 currentPrice,\n', '        uint256 totalShardSupply,\n', '        address submitter\n', '    ) external virtual returns (uint256 proposalId, uint256 buyoutTimes);\n', '\n', '    function vote(\n', '        uint256 _shardPoolId,\n', '        bool isAgree,\n', '        address shard,\n', '        address voter\n', '    ) external virtual returns (uint256 proposalId, uint256 balance);\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        virtual\n', '        returns (\n', '            uint256 proposalId,\n', '            bool result,\n', '            address submitter,\n', '            uint256 shardAmount,\n', '            uint256 wantTokenAmount\n', '        );\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 wantTokenAmount);\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\n', '        external\n', '        virtual\n', '        returns (\n', '            uint256 _shardPoolId,\n', '            uint256 shardTokenAmount,\n', '            uint256 wantTokenAmount\n', '        );\n', '\n', '    function setBuyoutTimes(uint256 _buyoutTimes) external virtual;\n', '\n', '    function setVoteLenth(uint256 _voteLenth) external virtual;\n', '\n', '    function setPassNeeded(uint256 _passNeeded) external virtual;\n', '\n', '    function setBuyoutProportion(uint256 _buyoutProportion) external virtual;\n', '\n', '    function setMarket(address _market) external virtual;\n', '\n', '    function setRegulator(address _regulator) external virtual;\n', '\n', '    function getProposalsForExactPool(uint256 _shardPoolId)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256[] memory _proposalsHistory);\n', '}\n', '\n', '// File: contracts/BuyoutProposalsDelegator.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract BuyoutProposalsDelegator is IBuyoutProposals {\n', '    /**\n', '     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n', '     */\n', '    event NewImplementation(\n', '        address oldImplementation,\n', '        address newImplementation\n', '    );\n', '\n', '    event NewGovernance(address oldGovernance, address newGovernance);\n', '\n', '    constructor(\n', '        address _governance,\n', '        address _regulator,\n', '        address implementation_\n', '    ) public {\n', '        governance = msg.sender;\n', '        _setImplementation(implementation_);\n', '        delegateTo(\n', '            implementation_,\n', '            abi.encodeWithSignature(\n', '                "initialize(address,address)",\n', '                _governance,\n', '                _regulator\n', '            )\n', '        );\n', '    }\n', '\n', '    function _setImplementation(address implementation_) public {\n', '        require(\n', '            msg.sender == governance,\n', '            "_setImplementation: Caller must be governance"\n', '        );\n', '\n', '        address oldImplementation = implementation;\n', '        implementation = implementation_;\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '    }\n', '\n', '    function _setGovernance(address newGovernance) public {\n', '        require(msg.sender == governance, "UNAUTHORIZED");\n', '\n', '        address oldGovernance = governance;\n', '\n', '        governance = newGovernance;\n', '\n', '        emit NewGovernance(oldGovernance, newGovernance);\n', '    }\n', '\n', '    function createProposal(\n', '        uint256 _shardPoolId,\n', '        uint256 shardBalance,\n', '        uint256 wantTokenAmount,\n', '        uint256 currentPrice,\n', '        uint256 totalShardSupply,\n', '        address submitter\n', '    ) external override returns (uint256 proposalId, uint256 buyoutTimes) {\n', '        bytes memory data =\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature(\n', '                    "createProposal(uint256,uint256,uint256,uint256,uint256,address)",\n', '                    _shardPoolId,\n', '                    shardBalance,\n', '                    wantTokenAmount,\n', '                    currentPrice,\n', '                    totalShardSupply,\n', '                    submitter\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256));\n', '    }\n', '\n', '    function vote(\n', '        uint256 _shardPoolId,\n', '        bool isAgree,\n', '        address shard,\n', '        address voter\n', '    ) external override returns (uint256 proposalId, uint256 balance) {\n', '        bytes memory data =\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature(\n', '                    "vote(uint256,bool,address,address)",\n', '                    _shardPoolId,\n', '                    isAgree,\n', '                    shard,\n', '                    voter\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256));\n', '    }\n', '\n', '    function voteResultConfirm(uint256 _shardPoolId)\n', '        external\n', '        override\n', '        returns (\n', '            uint256 proposalId,\n', '            bool result,\n', '            address submitter,\n', '            uint256 shardAmount,\n', '            uint256 wantTokenAmount\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature(\n', '                    "voteResultConfirm(uint256)",\n', '                    _shardPoolId\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, bool, address, uint256, uint256));\n', '    }\n', '\n', '    function exchangeForWantToken(uint256 _shardPoolId, uint256 shardAmount)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256 wantTokenAmount)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "exchangeForWantToken(uint256,uint256)",\n', '                    _shardPoolId,\n', '                    shardAmount\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256));\n', '    }\n', '\n', '    function redeemForBuyoutFailed(uint256 _proposalId, address submitter)\n', '        external\n', '        override\n', '        returns (\n', '            uint256 _shardPoolId,\n', '            uint256 shardTokenAmount,\n', '            uint256 wantTokenAmount\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature(\n', '                    "redeemForBuyoutFailed(uint256,address)",\n', '                    _proposalId,\n', '                    submitter\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256, uint256));\n', '    }\n', '\n', '    function setBuyoutTimes(uint256 _buyoutTimes) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setBuyoutTimes(uint256)", _buyoutTimes)\n', '        );\n', '    }\n', '\n', '    function setVoteLenth(uint256 _voteLenth) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setVoteLenth(uint256)", _voteLenth)\n', '        );\n', '    }\n', '\n', '    function setPassNeeded(uint256 _passNeeded) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setPassNeeded(uint256)", _passNeeded)\n', '        );\n', '    }\n', '\n', '    function setBuyoutProportion(uint256 _buyoutProportion) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setBuyoutProportion(uint256)",\n', '                _buyoutProportion\n', '            )\n', '        );\n', '    }\n', '\n', '    function setMarket(address _market) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setMarket(address)", _market)\n', '        );\n', '    }\n', '\n', '    function setRegulator(address _regulator) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("setRegulator(address)", _regulator)\n', '        );\n', '    }\n', '\n', '    function getProposalsForExactPool(uint256 _shardPoolId)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256[] memory _proposalsHistory)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getProposalsForExactPool(uint256)",\n', '                    _shardPoolId\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256[]));\n', '    }\n', '\n', '    function delegateTo(address callee, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to the implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToImplementation(bytes memory data)\n', '        public\n', '        returns (bytes memory)\n', '    {\n', '        return delegateTo(implementation, data);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToViewImplementation(bytes memory data)\n', '        public\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) =\n', '            address(this).staticcall(\n', '                abi.encodeWithSignature("delegateToImplementation(bytes)", data)\n', '            );\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return abi.decode(returnData, (bytes));\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '    //  */\n', '    fallback() external payable {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '            switch success\n', '                case 0 {\n', '                    revert(free_mem_ptr, returndatasize())\n', '                }\n', '                default {\n', '                    return(free_mem_ptr, returndatasize())\n', '                }\n', '        }\n', '    }\n', '}']