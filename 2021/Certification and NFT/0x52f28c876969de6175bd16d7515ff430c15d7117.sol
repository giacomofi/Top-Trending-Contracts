['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-14\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function strategies(address) external view returns (address);\n', '}\n', '\n', 'interface Strategy {\n', '    function forceRebalance(uint256) external;\n', '    function harvest() external;\n', '    function setKeeper(address) external;\n', '}\n', '\n', 'interface Vault {\n', '    function deposit(uint256) external;\n', '}\n', '\n', 'contract Repay {\n', '    address public ctrl = address(0x9E65Ad11b299CA0Abefc2799dDB6314Ef2d91080);\n', '    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    address public governance;\n', '    address public yvdai;\n', '    address public strategy;\n', '    \n', '    constructor() public {\n', '        governance = msg.sender;\n', '        yvdai = Controller(ctrl).vaults(dai);\n', '        strategy = Controller(ctrl).strategies(weth);\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    function repay(uint _amount, uint _repay) external {\n', '        if (_amount > 0) {\n', '            IERC20(dai).transferFrom(msg.sender, address(this), _amount);\n', '            IERC20(dai).approve(yvdai, _amount);\n', '            Vault(yvdai).deposit(_amount);\n', '            uint shares = IERC20(yvdai).balanceOf(address(this));\n', '            IERC20(yvdai).transfer(strategy, shares);\n', '        }\n', '        Strategy(strategy).forceRebalance(_repay);\n', '    }\n', '\n', '    function harvest(uint _amount) external {\n', '        require(msg.sender == governance, "!governance");\n', '        if (_amount > 0) {\n', '            IERC20(dai).transferFrom(msg.sender, address(this), _amount);\n', '            IERC20(dai).approve(yvdai, _amount);\n', '            Vault(yvdai).deposit(_amount);\n', '            uint shares = IERC20(yvdai).balanceOf(address(this));\n', '            IERC20(yvdai).transfer(strategy, shares);\n', '        }\n', '        Strategy(strategy).harvest();\n', '    }\n', '\n', '    function setKeeper(address _keeper) external {\n', '        require(msg.sender == governance, "!governance");\n', '        Strategy(strategy).setKeeper(_keeper);\n', '    }\n', '}']