['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// File: interfaces/DelegatorInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract DelegationStorage {\n', '    /**\n', '     * @notice Implementation address for this contract\n', '     */\n', '    address public implementation;\n', '}\n', '\n', 'abstract contract DelegatorInterface is DelegationStorage {\n', '    /**\n', '     * @notice Emitted when implementation is changed\n', '     */\n', '    event NewImplementation(\n', '        address oldImplementation,\n', '        address newImplementation\n', '    );\n', '\n', '    /**\n', '     * @notice Called by the admin to update the implementation of the delegator\n', '     * @param implementation_ The address of the new implementation for delegation\n', '     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n', '     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n', '     */\n', '    function _setImplementation(\n', '        address implementation_,\n', '        bool allowResign,\n', '        bytes memory becomeImplementationData\n', '    ) public virtual;\n', '}\n', '\n', 'abstract contract DelegateInterface is DelegationStorage {\n', '    /**\n', '     * @notice Called by the delegator on a delegate to initialize it for duty\n', '     * @dev Should revert if any issues arise which make it unfit for delegation\n', '     * @param data The encoded bytes data for any initialization\n', '     */\n', '    function _becomeImplementation(bytes memory data) public virtual;\n', '\n', '    /**\n', '     * @notice Called by the delegator on a delegate to forfeit its responsibility\n', '     */\n', '    function _resignImplementation() public virtual;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/ActivityBase.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract ActivityBase is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    address public admin;\n', '    \n', '    address public marketingFund;\n', '    // token as the unit of measurement\n', '    address public WETHToken;\n', "    // invitee's supply 5% deposit weight to its invitor\n", '    uint256 public constant INVITEE_WEIGHT = 20; \n', "    // invitee's supply 10% deposit weight to its invitor\n", '    uint256 public constant INVITOR_WEIGHT = 10;\n', '\n', '    // The block number when SHARD mining starts.\n', '    uint256 public startBlock;\n', '\n', '    // dev fund\n', '    uint256 public userDividendWeight;\n', '    uint256 public devDividendWeight;\n', '    address public developerDAOFund;\n', '\n', '    // deposit limit\n', '    uint256 public amountFeeRateNumerator;\n', '    uint256 public amountfeeRateDenominator;\n', '\n', '    // contract sender fee rate\n', '    uint256 public contractFeeRateNumerator;\n', '    uint256 public contractFeeRateDenominator;\n', '\n', '    // Info of each user is Contract sender\n', '    mapping (uint256 => mapping (address => bool)) public isUserContractSender;\n', '    mapping (uint256 => uint256) public poolTokenAmountLimit;\n', '\n', '    function setDividendWeight(uint256 _userDividendWeight, uint256 _devDividendWeight) public virtual{\n', '        checkAdmin();\n', '        require(\n', '            _userDividendWeight != 0 && _devDividendWeight != 0,\n', '            "invalid input"\n', '        );\n', '        userDividendWeight = _userDividendWeight;\n', '        devDividendWeight = _devDividendWeight;\n', '    }\n', '\n', '    function setDeveloperDAOFund(address _developerDAOFund) public virtual onlyOwner {\n', '        developerDAOFund = _developerDAOFund;\n', '    }\n', '\n', '    function setTokenAmountLimit(uint256 _pid, uint256 _tokenAmountLimit) public virtual {\n', '        checkAdmin();\n', '        poolTokenAmountLimit[_pid] = _tokenAmountLimit;\n', '    }\n', '\n', '    function setTokenAmountLimitFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _feeRateDenominator >= _feeRateNumerator, "invalid input"\n', '        );\n', '        amountFeeRateNumerator = _feeRateNumerator;\n', '        amountfeeRateDenominator = _feeRateDenominator;\n', '    }\n', '\n', '    function setContracSenderFeeRate(uint256 _feeRateNumerator, uint256 _feeRateDenominator) public virtual {\n', '        checkAdmin();\n', '        require(\n', '            _feeRateDenominator >= _feeRateNumerator, "invalid input"\n', '        );\n', '        contractFeeRateNumerator = _feeRateNumerator;\n', '        contractFeeRateDenominator = _feeRateDenominator;\n', '    }\n', '\n', '    function setStartBlock(uint256 _startBlock) public virtual onlyOwner { \n', '        require(startBlock > block.number, "invalid start block");\n', '        startBlock = _startBlock;\n', '        updateAfterModifyStartBlock(_startBlock);\n', '    }\n', '\n', '    function transferAdmin(address _admin) public virtual {\n', '        checkAdmin();\n', '        admin = _admin;\n', '    }\n', '\n', '    function setMarketingFund(address _marketingFund) public virtual onlyOwner {\n', '        marketingFund = _marketingFund;\n', '    }\n', '\n', '    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal virtual{\n', '    }\n', '\n', '    function calculateDividend(uint256 _pending, uint256 _pid, uint256 _userAmount, bool _isContractSender) internal view returns (uint256 _marketingFundDividend, uint256 _devDividend, uint256 _userDividend){\n', '        uint256 fee = 0;\n', '        if(_isContractSender && contractFeeRateDenominator > 0){\n', '            fee = _pending.mul(contractFeeRateNumerator).div(contractFeeRateDenominator);\n', '            _marketingFundDividend = _marketingFundDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        if(poolTokenAmountLimit[_pid] > 0 && amountfeeRateDenominator > 0 && _userAmount >= poolTokenAmountLimit[_pid]){\n', '            fee = _pending.mul(amountFeeRateNumerator).div(amountfeeRateDenominator);\n', '            _marketingFundDividend =_marketingFundDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        if(devDividendWeight > 0){\n', '            fee = _pending.mul(devDividendWeight).div(devDividendWeight.add(userDividendWeight));\n', '            _devDividend = _devDividend.add(fee);\n', '            _pending = _pending.sub(fee);\n', '        }\n', '        _userDividend = _pending;\n', '    }\n', '\n', '    function judgeContractSender(uint256 _pid) internal {\n', '        if(msg.sender != tx.origin){\n', '            isUserContractSender[_pid][msg.sender] = true;\n', '        }\n', '    }\n', '\n', '    function checkAdmin() internal view {\n', '        require(admin == msg.sender, "invalid authorized");\n', '    }\n', '}\n', '\n', '// File: interfaces/IInvitation.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IInvitation{\n', '\n', '    function acceptInvitation(address _invitor) external;\n', '\n', '    function getInvitation(address _sender) external view returns(address _invitor, address[] memory _invitees, bool _isWithdrawn);\n', '    \n', '}\n', '\n', '// File: contracts/MarketingMining.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MarketingMining is ActivityBase{\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How much token the user has provided.\n', '        uint256 originWeight; //initial weight\n', '        uint256 modifiedWeight; //take the invitation relationship into consideration.\n', '        uint256 revenue;\n', '        uint256 userDividend;\n', '        uint256 devDividend;\n', '        uint256 marketingFundDividend;\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        bool withdrawnState;\n', '        bool isUsed;\n', '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        uint256 tokenAmount;  // lock amount\n', '        IERC20 token;   // uniswapPair contract\n', '        uint256 allocPoint;\n', '        uint256 accumulativeDividend;\n', '        uint256 lastDividendHeight;  // last dividend block height\n', '        uint256 accShardPerWeight;\n', '        uint256 totalWeight;\n', '    }\n', '\n', '    uint256 public constant BONUS_MULTIPLIER = 10;\n', '    // The SHARD TOKEN!\n', '    IERC20 public SHARD;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => uint256)) public userInviteeTotalAmount; // total invitee weight\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation poishard in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // SHARD tokens created per block.\n', '    uint256 public SHDPerBlock = 1045 * (1e16);\n', '\n', '    //get invitation relationship\n', '    IInvitation public invitation;\n', '\n', '    uint256 public bonusEndBlock;\n', '    uint256 public totalAvailableDividend;\n', '    \n', '    bool public isInitialized;\n', '    bool public isDepositAvailable;\n', '    bool public isRevenueWithdrawable;\n', '\n', '    event AddPool(uint256 indexed pid, address tokenAddress);\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 weight);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    function initialize(\n', '        IERC20 _SHARD,\n', '        IInvitation _invitation,\n', '        uint256 _bonusEndBlock,\n', '        uint256 _startBlock, \n', '        uint256 _SHDPerBlock,\n', '        address _developerDAOFund,\n', '        address _marketingFund,\n', '        address _weth\n', '    ) public virtual onlyOwner{\n', '        require(!isInitialized, "contract has been initialized");\n', '        invitation = _invitation;\n', '        bonusEndBlock = _bonusEndBlock;\n', '        if (_startBlock < block.number) {\n', '            startBlock = block.number;\n', '        } else {\n', '            startBlock = _startBlock;\n', '        }\n', '        SHARD = _SHARD;\n', '        developerDAOFund = _developerDAOFund;\n', '        marketingFund = _marketingFund;\n', '        WETHToken = _weth;\n', '        if(_SHDPerBlock > 0){\n', '            SHDPerBlock = _SHDPerBlock;\n', '        }\n', '        userDividendWeight = 4;\n', '        devDividendWeight = 1;\n', '\n', '        amountFeeRateNumerator = 1;\n', '        amountfeeRateDenominator = 5;\n', '\n', '        contractFeeRateNumerator = 1;\n', '        contractFeeRateDenominator = 5;\n', '        isDepositAvailable = true;\n', '        isRevenueWithdrawable = false;\n', '        isInitialized = true;\n', '    }\n', '\n', '    // Add a new pool. Can only be called by the owner.\n', '    function add(uint256 _allocPoint, IERC20 _tokenAddress, bool _withUpdate) public virtual {\n', '        checkAdmin();\n', '        if(_withUpdate){\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        PoolInfo memory newpool = PoolInfo({\n', '            token: _tokenAddress, \n', '            tokenAmount: 0,\n', '            allocPoint: _allocPoint,\n', '            lastDividendHeight: lastRewardBlock,\n', '            accumulativeDividend: 0,\n', '            accShardPerWeight: 0,\n', '            totalWeight: 0\n', '        });\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(newpool);\n', '        emit AddPool(poolInfo.length.sub(1), address(_tokenAddress));\n', '    }\n', '\n', "    // Update the given pool's allocation point. Can only be called by the owner.\n", '    function setAllocationPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public virtual {\n', '        checkAdmin();\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    function setSHDPerBlock(uint256 _SHDPerBlock, bool _withUpdate) public virtual {\n', '        checkAdmin();\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        SHDPerBlock = _SHDPerBlock;\n', '    }\n', '\n', '    function setIsDepositAvailable(bool _isDepositAvailable) public virtual onlyOwner {\n', '        isDepositAvailable = _isDepositAvailable;\n', '    }\n', '\n', '    function setIsRevenueWithdrawable(bool _isRevenueWithdrawable) public virtual onlyOwner {\n', '        isRevenueWithdrawable = _isRevenueWithdrawable;\n', '    }\n', '\n', '    // update reward vairables for pools. Be careful of gas spending!\n', '    function massUpdatePools() public virtual {\n', '        uint256 poolCount = poolInfo.length;\n', '        for(uint256 i = 0; i < poolCount; i ++){\n', '            updatePoolDividend(i);\n', '        }\n', '    }\n', '\n', '    function addAvailableDividend(uint256 _amount, bool _withUpdate) public virtual {\n', '        if(_withUpdate){\n', '            massUpdatePools();\n', '        }\n', '        SHARD.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '        totalAvailableDividend = totalAvailableDividend.add(_amount);\n', '    }\n', '\n', '    // update reward vairables for a pool\n', '    function updatePoolDividend(uint256 _pid) public virtual {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastDividendHeight) {\n', '            return;\n', '        }\n', '        if (pool.tokenAmount == 0) {\n', '            pool.lastDividendHeight = block.number;\n', '            return;\n', '        }\n', '        uint256 availableDividend = totalAvailableDividend;\n', '        uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\n', '        uint256 producedToken = multiplier.mul(SHDPerBlock);\n', '        producedToken = availableDividend > producedToken? producedToken: availableDividend;\n', '        if(totalAllocPoint > 0){\n', '            uint256 poolDevidend = producedToken.mul(pool.allocPoint).div(totalAllocPoint);\n', '            if(poolDevidend > 0){\n', '                totalAvailableDividend = totalAvailableDividend.sub(poolDevidend);\n', '                pool.accumulativeDividend = pool.accumulativeDividend.add(poolDevidend);\n', '                pool.accShardPerWeight = pool.accShardPerWeight.add(poolDevidend.mul(1e12).div(pool.totalWeight));\n', '            } \n', '        }\n', '        pool.lastDividendHeight = block.number;\n', '    }\n', '\n', '    function depositETH(uint256 _pid) external payable virtual {\n', '        require(address(poolInfo[_pid].token) == WETHToken, "invalid token");\n', '        updateAfterDeposit(_pid, msg.value);\n', '    }\n', '\n', '    function withdrawETH(uint256 _pid, uint256 _amount) external virtual {\n', '        require(address(poolInfo[_pid].token) == WETHToken, "invalid token");\n', '        updateAfterwithdraw(_pid, _amount);\n', '        if(_amount > 0){\n', '            (bool success, ) = msg.sender.call{value: _amount}(new bytes(0));\n', '            require(success, "Transfer: ETH_TRANSFER_FAILED");\n', '        }\n', '    }\n', '\n', '    function updateAfterDeposit(uint256 _pid, uint256 _amount) internal{\n', '        require(isDepositAvailable, "new invest is forbidden");\n', '        require(_amount > 0, "invalid amount");\n', '        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\n', '        require(invitor != address(0), "should be accept invitation firstly");\n', '        updatePoolDividend(_pid);\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        UserInfo storage userInvitor = userInfo[_pid][invitor];\n', '        uint256 existedAmount = user.amount;\n', '        bool withdrawnState = user.withdrawnState;\n', '        if(!user.isUsed){\n', '            user.isUsed = true;\n', '            judgeContractSender(_pid);\n', '            withdrawnState = isWithdrawn;\n', '        }\n', '        if(!withdrawnState && userInvitor.amount > 0){\n', '            updateUserRevenue(userInvitor, pool);\n', '        }\n', '        if(!withdrawnState){\n', '            updateInvitorWeight(msg.sender, invitor, _pid, true, _amount, isWithdrawn, withdrawnState);\n', '        }\n', '\n', '        if(existedAmount > 0){ \n', '            updateUserRevenue(user, pool);\n', '        }\n', '\n', '        updateUserWeight(msg.sender, _pid, true, _amount, isWithdrawn);\n', '        if(!withdrawnState && userInvitor.amount > 0){\n', '            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\n', '        }  \n', '        if(!withdrawnState){\n', '            user.withdrawnState = isWithdrawn;\n', '        }\n', '        user.amount = existedAmount.add(_amount);\n', '        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\n', '        pool.tokenAmount = pool.tokenAmount.add(_amount);\n', '        emit Deposit(msg.sender, _pid, _amount, user.modifiedWeight);\n', '    }\n', '\n', '    // Deposit tokens to marketing mining for SHD allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public virtual {\n', '        require(address(poolInfo[_pid].token) != WETHToken, "invalid pid");\n', '        IERC20(poolInfo[_pid].token).safeTransferFrom(address(msg.sender), address(this), _amount);\n', '        updateAfterDeposit(_pid, _amount);\n', '    }\n', '\n', '    // Withdraw tokens from marketMining.\n', '    function withdraw(uint256 _pid, uint256 _amount) public virtual {\n', '        require(address(poolInfo[_pid].token) != WETHToken, "invalid pid");\n', '        IERC20(poolInfo[_pid].token).safeTransfer(address(msg.sender), _amount);\n', '        updateAfterwithdraw(_pid, _amount);\n', '    }\n', '\n', '    function updateAfterwithdraw(uint256 _pid, uint256 _amount) internal {\n', '        (address invitor, , bool isWithdrawn) = invitation.getInvitation(msg.sender);\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        bool withdrawnState = user.withdrawnState;\n', '        uint256 existedAmount = user.amount;\n', '        require(existedAmount >= _amount, "withdraw: not good");\n', '        updatePoolDividend(_pid);\n', '        uint256 pending = updateUserRevenue(user, pool);\n', '        UserInfo storage userInvitor = userInfo[_pid][invitor];\n', '        if(!withdrawnState && userInvitor.amount > 0){\n', '            updateUserRevenue(userInvitor, pool);\n', '        }\n', '        if(!withdrawnState){\n', '            updateInvitorWeight(msg.sender, invitor, _pid, false, _amount, isWithdrawn, withdrawnState);\n', '        }\n', '        updateUserWeight(msg.sender, _pid, false, _amount, isWithdrawn);\n', '        user.amount = existedAmount.sub(_amount);\n', '        user.rewardDebt = user.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\n', '        user.withdrawnState = isWithdrawn;\n', '        if(!withdrawnState && userInvitor.amount > 0){\n', '            userInvitor.rewardDebt = userInvitor.modifiedWeight.mul(pool.accShardPerWeight).div(1e12);\n', '        }\n', '        pool.tokenAmount = pool.tokenAmount.sub(_amount);\n', '        user.revenue = 0;\n', '        bool isContractSender = isUserContractSender[_pid][msg.sender];\n', '        (uint256 marketingFundDividend, uint256 devDividend, uint256 userDividend) = calculateDividend(pending, _pid, existedAmount, isContractSender);\n', '        user.userDividend = user.userDividend.add(userDividend);\n', '        user.devDividend = user.devDividend.add(devDividend);\n', '        if(marketingFundDividend > 0){\n', '            user.marketingFundDividend = user.marketingFundDividend.add(marketingFundDividend);\n', '        }\n', '        if(isRevenueWithdrawable){\n', '            devDividend = user.devDividend;\n', '            userDividend = user.userDividend;\n', '            marketingFundDividend = user.marketingFundDividend;\n', '            if(devDividend > 0){\n', '                safeSHARDTransfer(developerDAOFund, devDividend);\n', '            }\n', '            if(userDividend > 0){\n', '                safeSHARDTransfer(msg.sender, userDividend);\n', '            }\n', '            if(marketingFundDividend > 0){\n', '                safeSHARDTransfer(marketingFund, marketingFundDividend);\n', '            }\n', '            user.devDividend = 0;\n', '            user.userDividend = 0;\n', '            user.marketingFundDividend = 0;\n', '        }\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Safe SHD transfer function, just in case if rounding error causes pool to not have enough SHDs.\n', '    function safeSHARDTransfer(address _to, uint256 _amount) internal {\n', '        uint256 SHARDBal = SHARD.balanceOf(address(this));\n', '        if (_amount > SHARDBal) {\n', '            SHARD.transfer(_to, SHARDBal);\n', '        } else {\n', '            SHARD.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to) public view virtual returns (uint256) {\n', '        if (_to <= bonusEndBlock) {\n', '            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '        } else if (_from >= bonusEndBlock) {\n', '            return _to.sub(_from);\n', '        } else {\n', '            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n', '                _to.sub(bonusEndBlock)\n', '            );\n', '        }\n', '    }\n', '\n', '    // View function to see pending SHDs on frontend.\n', '    function pendingSHARD(uint256 _pid, address _user) external view virtual \n', '    returns (uint256 _pending, uint256 _potential, uint256 _blockNumber) {\n', '        _blockNumber = block.number;\n', '        (_pending, _potential) = calculatePendingSHARD(_pid, _user);\n', '    }\n', '\n', '    function pendingSHARDByPids(uint256[] memory _pids, address _user) external view virtual\n', '    returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber){\n', '        uint256 poolCount = _pids.length;\n', '        _pending = new uint256[](poolCount);\n', '        _potential = new uint256[](poolCount);\n', '        _blockNumber = block.number;\n', '        for(uint i = 0; i < poolCount; i ++){\n', '            (_pending[i], _potential[i]) = calculatePendingSHARD(_pids[i], _user);\n', '        }\n', '    } \n', '\n', '    function calculatePendingSHARD(uint256 _pid, address _user) private view returns (uint256 _pending, uint256 _potential) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accShardPerWeight = pool.accShardPerWeight;\n', '        _pending = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue);\n', '        bool isContractSender = isUserContractSender[_pid][_user];\n', '        _potential = _pending;\n', '        (,,_pending) = calculateDividend(_pending, _pid, user.amount, isContractSender);\n', '        _pending = _pending.add(user.userDividend);\n', '        uint256 lpSupply = pool.tokenAmount;\n', '        if (block.number > pool.lastDividendHeight && lpSupply != 0) {\n', '            uint256 multiplier = getMultiplier(pool.lastDividendHeight, block.number);\n', '            uint256 totalUnupdateToken = multiplier.mul(SHDPerBlock);\n', '            totalUnupdateToken = totalAvailableDividend > totalUnupdateToken? totalUnupdateToken: totalAvailableDividend;\n', '            uint256 shardReward = totalUnupdateToken.mul(pool.allocPoint).div(totalAllocPoint);\n', '            accShardPerWeight = accShardPerWeight.add(shardReward.mul(1e12).div(pool.totalWeight));\n', '        }\n', '        _potential = user.modifiedWeight.mul(accShardPerWeight).div(1e12).sub(user.rewardDebt).add(user.revenue).sub(_potential);\n', '        (,,_potential) = calculateDividend(_potential, _pid, user.amount, isContractSender);\n', '    }\n', '\n', '    function getDepositWeight(uint256 _amount) public pure returns(uint256 weight){\n', '        return _amount;\n', '    }\n', '\n', '    function getPoolLength() public view virtual returns(uint256){\n', '        return poolInfo.length;\n', '    }\n', '\n', '    function getPoolInfo(uint256 _pid) public view virtual returns(uint256 _allocPoint, uint256 _accumulativeDividend, uint256 _usersTotalWeight, uint256 _tokenAmount, address _tokenAddress, uint256 _accs){\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        _allocPoint = pool.allocPoint;\n', '        _accumulativeDividend = pool.accumulativeDividend;\n', '        _usersTotalWeight = pool.totalWeight;\n', '        _tokenAmount = pool.tokenAmount;\n', '        _tokenAddress = address(pool.token);\n', '        _accs = pool.accShardPerWeight;\n', '    }\n', '\n', '    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex) public view virtual\n', '    returns(uint256[] memory _allocPoint, uint256[] memory _accumulativeDividend, uint256[] memory _usersTotalWeight, uint256[] memory _tokenAmount, \n', '    address[] memory _tokenAddress, uint256[] memory _accs){\n', '        uint256 poolCount = _toIndex.sub(_fromIndex).add(1);\n', '        _allocPoint = new uint256[](poolCount);\n', '        _accumulativeDividend = new uint256[](poolCount);\n', '        _usersTotalWeight = new uint256[](poolCount);\n', '        _tokenAmount = new uint256[](poolCount);\n', '        _tokenAddress = new address[](poolCount);\n', '        _accs = new uint256[](poolCount);\n', '        uint256 startIndex = 0;\n', '        for(uint i = _fromIndex; i <= _toIndex; i ++){\n', '            PoolInfo storage pool = poolInfo[i];\n', '            _allocPoint[startIndex] = pool.allocPoint;\n', '            _accumulativeDividend[startIndex] = pool.accumulativeDividend;\n', '            _usersTotalWeight[startIndex] = pool.totalWeight;\n', '            _tokenAmount[startIndex] = pool.tokenAmount;\n', '            _tokenAddress[startIndex] = address(pool.token);\n', '            _accs[startIndex] = pool.accShardPerWeight;\n', '            startIndex ++;\n', '        }\n', '    }\n', '\n', '    function getUserInfoByPids(uint256[] memory _pids, address _user) public virtual view \n', '    returns(uint256[] memory _amount, uint256[] memory _modifiedWeight, uint256[] memory _revenue, uint256[] memory _userDividend, uint256[] memory _rewardDebt) {\n', '        uint256 poolCount = _pids.length;\n', '        _amount = new uint256[](poolCount);\n', '        _modifiedWeight = new uint256[](poolCount);\n', '        _revenue = new uint256[](poolCount);\n', '        _userDividend = new uint256[](poolCount);\n', '        _rewardDebt = new uint256[](poolCount);\n', '        for(uint i = 0; i < poolCount; i ++){\n', '            UserInfo storage user = userInfo[_pids[i]][_user];\n', '            _amount[i] = user.amount;\n', '            _modifiedWeight[i] = user.modifiedWeight;\n', '            _revenue[i] = user.revenue;\n', '            _userDividend[i] = user.userDividend;\n', '            _rewardDebt[i] = user.rewardDebt;\n', '        }\n', '    }\n', '\n', '    function updateUserRevenue(UserInfo storage _user, PoolInfo storage _pool) private returns (uint256){\n', '        uint256 pending = _user.modifiedWeight.mul(_pool.accShardPerWeight).div(1e12).sub(_user.rewardDebt);\n', '        _user.revenue = _user.revenue.add(pending);\n', '        _pool.accumulativeDividend = _pool.accumulativeDividend.sub(pending);\n', '        return _user.revenue;\n', '    }\n', '\n', '    function updateInvitorWeight(address _sender, address _invitor, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn, bool _withdrawnState) private {\n', '        UserInfo storage user = userInfo[_pid][_sender];\n', '        uint256 subInviteeAmount = 0;\n', '        uint256 addInviteeAmount = 0;\n', '        if(user.amount > 0  && !_withdrawnState){\n', '            subInviteeAmount = user.originWeight;\n', '        }\n', '        if(!_isWithdrawn){\n', '            if(_isAddAmount){\n', '                addInviteeAmount = getDepositWeight(user.amount.add(_amount));\n', '            }\n', '            else{ \n', '                addInviteeAmount = getDepositWeight(user.amount.sub(_amount));\n', '            }\n', '        }\n', '\n', '        UserInfo storage invitor = userInfo[_pid][_invitor];\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        uint256 inviteeAmountOfUserInvitor = userInviteeTotalAmount[_pid][_invitor];\n', '        uint256 newInviteeAmountOfUserInvitor = inviteeAmountOfUserInvitor.add(addInviteeAmount).sub(subInviteeAmount);\n', '        userInviteeTotalAmount[_pid][_invitor] = newInviteeAmountOfUserInvitor;\n', '        if(invitor.amount > 0){\n', '            invitor.modifiedWeight = invitor.modifiedWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\n', '                                                                   .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));\n', '            pool.totalWeight = pool.totalWeight.add(newInviteeAmountOfUserInvitor.div(INVITEE_WEIGHT))\n', '                                               .sub(inviteeAmountOfUserInvitor.div(INVITEE_WEIGHT));                              \n', '        }\n', '    }\n', '\n', '    function updateUserWeight(address _user, uint256 _pid, bool _isAddAmount, uint256 _amount, bool _isWithdrawn) private {\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 userOriginModifiedWeight = user.modifiedWeight;\n', '        uint256 userNewModifiedWeight;\n', '        if(_isAddAmount){\n', '            userNewModifiedWeight = getDepositWeight(_amount.add(user.amount));\n', '        }\n', '        else{\n', '            userNewModifiedWeight = getDepositWeight(user.amount.sub(_amount));\n', '        }\n', '        user.originWeight = userNewModifiedWeight;\n', '        if(!_isWithdrawn){\n', '            userNewModifiedWeight = userNewModifiedWeight.add(userNewModifiedWeight.div(INVITOR_WEIGHT));\n', '        }\n', '        uint256 inviteeAmountOfUser = userInviteeTotalAmount[_pid][msg.sender];\n', '        userNewModifiedWeight = userNewModifiedWeight.add(inviteeAmountOfUser.div(INVITEE_WEIGHT));\n', '        user.modifiedWeight = userNewModifiedWeight;\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        pool.totalWeight = pool.totalWeight.add(userNewModifiedWeight).sub(userOriginModifiedWeight);\n', '    }\n', '\n', '    function updateAfterModifyStartBlock(uint256 _newStartBlock) internal override{\n', '        uint256 poolLenght = poolInfo.length;\n', '        for(uint256 i = 0; i < poolLenght; i++){\n', '            PoolInfo storage info = poolInfo[i];\n', '            info.lastDividendHeight = _newStartBlock;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/MarketingMiningDelegator.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract MarketingMiningDelegator is DelegatorInterface, MarketingMining {\n', '    constructor(\n', '        address _SHARD,\n', '        address _invitation,\n', '        uint256 _bonusEndBlock,\n', '        uint256 _startBlock,\n', '        uint256 _shardPerBlock,\n', '        address _developerDAOFund,\n', '        address _marketingFund,\n', '        address _weth,\n', '        address implementation_,\n', '        bytes memory becomeImplementationData\n', '    ) public {\n', '        delegateTo(\n', '            implementation_,\n', '            abi.encodeWithSignature(\n', '                "initialize(address,address,uint256,uint256,uint256,address,address,address)",\n', '                _SHARD,\n', '                _invitation,\n', '                _bonusEndBlock,\n', '                _startBlock,\n', '                _shardPerBlock,\n', '                _developerDAOFund,\n', '                _marketingFund,\n', '                _weth\n', '            )\n', '        );\n', '        admin = msg.sender;\n', '        _setImplementation(implementation_, false, becomeImplementationData);\n', '    }\n', '\n', '    function _setImplementation(\n', '        address implementation_,\n', '        bool allowResign,\n', '        bytes memory becomeImplementationData\n', '    ) public override {\n', '        checkAdmin();\n', '        if (allowResign) {\n', '            delegateToImplementation(\n', '                abi.encodeWithSignature("_resignImplementation()")\n', '            );\n', '        }\n', '\n', '        address oldImplementation = implementation;\n', '        implementation = implementation_;\n', '\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "_becomeImplementation(bytes)",\n', '                becomeImplementationData\n', '            )\n', '        );\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '    }\n', '\n', '    function delegateTo(address callee, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to the implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToImplementation(bytes memory data)\n', '        public\n', '        returns (bytes memory)\n', '    {\n', '        return delegateTo(implementation, data);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateToViewImplementation(bytes memory data)\n', '        public\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        (bool success, bytes memory returnData) =\n', '            address(this).staticcall(\n', '                abi.encodeWithSignature("delegateToImplementation(bytes)", data)\n', '            );\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return abi.decode(returnData, (bytes));\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '    //  */\n', '    fallback() external payable {\n', '        if (msg.value > 0) return;\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '            switch success\n', '                case 0 {\n', '                    revert(free_mem_ptr, returndatasize())\n', '                }\n', '                default {\n', '                    return(free_mem_ptr, returndatasize())\n', '                }\n', '        }\n', '    }\n', '\n', '    \n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _tokenAddress,\n', '        bool _isUpdate\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "add(uint256,address,bool)",\n', '                _allocPoint,\n', '                _tokenAddress,\n', '                _isUpdate\n', '            )\n', '        );\n', '    }\n', '\n', '    function setAllocationPoint(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setAllocationPoint(uint256,uint256,bool)",\n', '                _pid,\n', '                _allocPoint,\n', '                _withUpdate\n', '            )\n', '        );\n', '    }\n', '\n', '    function setSHDPerBlock(uint256 _shardPerBlock, bool _withUpdate) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setSHDPerBlock(uint256,bool)",\n', '                _shardPerBlock,\n', '                _withUpdate\n', '            )\n', '        );\n', '    }\n', '\n', '    function setIsDepositAvailable(bool _isDepositAvailable) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setIsDepositAvailable(bool)",\n', '                _isDepositAvailable\n', '            )\n', '        );\n', '    }\n', '\n', '    function setIsRevenueWithdrawable(bool _isRevenueWithdrawable) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setIsRevenueWithdrawable(bool)",\n', '                _isRevenueWithdrawable\n', '            )\n', '        );\n', '    }\n', '\n', '    function setStartBlock(\n', '        uint256 _startBlock\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setStartBlock(uint256)",\n', '                _startBlock\n', '            )\n', '        );\n', '    }\n', '\n', '    function massUpdatePools() public override {\n', '        delegateToImplementation(abi.encodeWithSignature("massUpdatePools()"));\n', '    }\n', '\n', '    function addAvailableDividend(uint256 _amount, bool _isUpdate) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("addAvailableDividend(uint256,bool)", _amount, _isUpdate)\n', '        );\n', '    }\n', '\n', '    function updatePoolDividend(uint256 _pid) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("updatePoolDividend(uint256)", _pid)\n', '        );\n', '    }\n', '\n', '    function depositETH(\n', '        uint256 _pid\n', '    ) external payable override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "depositETH(uint256)",\n', '                _pid\n', '            )\n', '        );\n', '    }\n', '\n', '    function deposit(\n', '        uint256 _pid,\n', '        uint256 _amount\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "deposit(uint256,uint256)",\n', '                _pid,\n', '                _amount\n', '            )\n', '        );\n', '    }\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("withdraw(uint256,uint256)", _pid, _amount)\n', '        );\n', '    }\n', '\n', '    function withdrawETH(uint256 _pid, uint256 _amount) external override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature("withdrawETH(uint256,uint256)", _pid, _amount)\n', '        );\n', '    }\n', '\n', '    function setDeveloperDAOFund(\n', '    address _developer\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setDeveloperDAOFund(address)",\n', '                _developer\n', '            )\n', '        );\n', '    }\n', '\n', '    function setDividendWeight(\n', '        uint256 _userDividendWeight,\n', '        uint256 _devDividendWeight\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setDividendWeight(uint256,uint256)",\n', '                _userDividendWeight,\n', '                _devDividendWeight\n', '            )\n', '        );\n', '    }\n', '\n', '    function setTokenAmountLimit(\n', '        uint256 _pid, \n', '        uint256 _tokenAmountLimit\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setTokenAmountLimit(uint256,uint256)",\n', '                _pid,\n', '                _tokenAmountLimit\n', '            )\n', '        );\n', '    }\n', '\n', '\n', '    function setTokenAmountLimitFeeRate(\n', '        uint256 _feeRateNumerator,\n', '        uint256 _feeRateDenominator\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setTokenAmountLimitFeeRate(uint256,uint256)",\n', '                _feeRateNumerator,\n', '                _feeRateDenominator\n', '            )\n', '        );\n', '    }\n', '\n', '    function setContracSenderFeeRate(\n', '        uint256 _feeRateNumerator,\n', '        uint256 _feeRateDenominator\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setContracSenderFeeRate(uint256,uint256)",\n', '                _feeRateNumerator,\n', '                _feeRateDenominator\n', '            )\n', '        );\n', '    }\n', '\n', '    function transferAdmin(\n', '        address _admin\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "transferAdmin(address)",\n', '                _admin\n', '            )\n', '        );\n', '    }\n', '\n', '    function setMarketingFund(\n', '        address _marketingFund\n', '    ) public override {\n', '        delegateToImplementation(\n', '            abi.encodeWithSignature(\n', '                "setMarketingFund(address)",\n', '                _marketingFund\n', '            )\n', '        );\n', '    }\n', '\n', '    function pendingSHARD(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256, uint256, uint256)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "pendingSHARD(uint256,address)",\n', '                    _pid,\n', '                    _user\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256, uint256, uint256));\n', '    }\n', '\n', '    function pendingSHARDByPids(uint256[] memory _pids, address _user)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256[] memory _pending, uint256[] memory _potential, uint256 _blockNumber)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "pendingSHARDByPids(uint256[],address)",\n', '                    _pids,\n', '                    _user\n', '                )\n', '            );\n', '        return abi.decode(data, (uint256[], uint256[], uint256));\n', '    }\n', '\n', '    function getPoolLength() public view override returns (uint256) {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getPoolLength()")\n', '            );\n', '        return abi.decode(data, (uint256));\n', '    }\n', '\n', '    function getMultiplier(uint256 _from, uint256 _to) public view override returns (uint256) {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature("getMultiplier(uint256,uint256)", _from, _to)\n', '            );\n', '        return abi.decode(data, (uint256));\n', '    }\n', '\n', '    function getPoolInfo(uint256 _pid) \n', '        public \n', '        view \n', '        override\n', '        returns(\n', '            uint256 _allocPoint,\n', '            uint256 _accumulativeDividend, \n', '            uint256 _usersTotalWeight, \n', '            uint256 _tokenAmount, \n', '            address _tokenAddress, \n', '            uint256 _accs)\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getPoolInfo(uint256)",\n', '                    _pid\n', '                )\n', '            );\n', '            return\n', '            abi.decode(\n', '                data,\n', '                (\n', '                    uint256,\n', '                    uint256,\n', '                    uint256,\n', '                    uint256,\n', '                    address,\n', '                    uint256\n', '                )\n', '            );\n', '    }\n', '\n', '    function getPagePoolInfo(uint256 _fromIndex, uint256 _toIndex)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256[] memory _allocPoint,\n', '            uint256[] memory _accumulativeDividend, \n', '            uint256[] memory _usersTotalWeight, \n', '            uint256[] memory _tokenAmount, \n', '            address[] memory _tokenAddress, \n', '            uint256[] memory _accs\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getPagePoolInfo(uint256,uint256)",\n', '                    _fromIndex,\n', '                    _toIndex\n', '                )\n', '            );\n', '        return\n', '            abi.decode(\n', '                data,\n', '                (\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    address[],\n', '                    uint256[]\n', '                )\n', '            );\n', '    }\n', '\n', '    function getUserInfoByPids(uint256[] memory _pids,  address _user)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256[] memory _amount,\n', '            uint256[] memory _modifiedWeight, \n', '            uint256[] memory _revenue, \n', '            uint256[] memory _userDividend, \n', '            uint256[] memory _rewardDebt\n', '        )\n', '    {\n', '        bytes memory data =\n', '            delegateToViewImplementation(\n', '                abi.encodeWithSignature(\n', '                    "getUserInfoByPids(uint256[],address)",\n', '                    _pids,\n', '                    _user\n', '                )\n', '            );\n', '        return\n', '            abi.decode(\n', '                data,\n', '                (\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[],\n', '                    uint256[]\n', '                )\n', '            );\n', '    }\n', '}']