['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "../interface/IERC20.sol";\n', 'import "../interface/ILToken.sol";\n', 'import "../interface/IMigratablePool.sol";\n', 'import "../interface/IPreMiningPool.sol";\n', 'import "../utils/SafeERC20.sol";\n', 'import "../math/MixedSafeMathWithUnit.sol";\n', 'import "./MigratablePool.sol";\n', '\n', '/**\n', ' * @title Deri Protocol PreMining PerpetualPool Implementation\n', ' */\n', 'contract PreMiningPool is IMigratablePool, IPreMiningPool, MigratablePool {\n', '\n', '    using MixedSafeMathWithUnit for uint256;\n', '    using MixedSafeMathWithUnit for int256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Trading symbol\n', '    string private _symbol;\n', '\n', '    // Base token contract, all settlements are done in base token\n', '    IERC20  private _bToken;\n', '    // Base token decimals\n', '    uint256 private _bDecimals;\n', '    // Liquidity provider token contract\n', '    ILToken private _lToken;\n', '\n', '    // Minimum amount requirement when add liquidity\n', '    uint256 private _minAddLiquidity;\n', '    // Redemption fee ratio when removing liquidity\n', '    uint256 private _redemptionFeeRatio;\n', '\n', '    // Total liquidity pool holds\n', '    uint256 private _liquidity;\n', '\n', '    bool private _mutex;\n', '    // Locker to prevent reentry\n', '    modifier _lock_() {\n', '        require(!_mutex, "PerpetualPool: reentry");\n', '        _mutex = true;\n', '        _;\n', '        _mutex = false;\n', '    }\n', '\n', '    /**\n', '     * @dev A dummy constructor, which deos not initialize any storage variables\n', '     * A template will be deployed with no initialization and real pool will be cloned\n', '     * from this template (same as create_forwarder_to mechanism in Vyper),\n', '     * and use `initialize` to initialize all storage variables\n', '     */\n', '    constructor () {}\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{initialize}\n', '     */\n', '    function initialize(\n', '        string memory symbol_,\n', '        address[2] calldata addresses_,\n', '        uint256[2] calldata parameters_\n', '    ) public override {\n', '        require(\n', '            bytes(_symbol).length == 0 && _controller == address(0),\n', '            "PerpetualPool: already initialized"\n', '        );\n', '\n', '        _controller = msg.sender;\n', '        _symbol = symbol_;\n', '\n', '        _bToken = IERC20(addresses_[0]);\n', '        _bDecimals = _bToken.decimals();\n', '        _lToken = ILToken(addresses_[1]);\n', '\n', '        _minAddLiquidity = parameters_[0];\n', '        _redemptionFeeRatio = parameters_[1];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{approveMigration}\n', '     */\n', '    function approveMigration() public override _controller_ {\n', '        require(\n', '            _migrationTimestamp != 0 && block.timestamp >= _migrationTimestamp,\n', '            "PerpetualPool: migrationTimestamp not met yet"\n', '        );\n', '        // approve new pool to pull all base tokens from this pool\n', '        _bToken.safeApprove(_migrationDestination, uint256(-1));\n', '        // set lToken to new pool, after redirecting lToken to new pool,\n', '        // this pool will stop functioning\n', '        _lToken.setPool(_migrationDestination);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{executeMigration}\n', '     */\n', '    function executeMigration(address source) public override _controller_ {\n', '        uint256 migrationTimestamp_ = IPreMiningPool(source).migrationTimestamp();\n', '        address migrationDestination_ = IPreMiningPool(source).migrationDestination();\n', '        require(\n', '            migrationTimestamp_ != 0 && block.timestamp >= migrationTimestamp_,\n', '            "PerpetualPool: migrationTimestamp not met yet"\n', '        );\n', '        require(\n', '            migrationDestination_ == address(this),\n', '            "PerpetualPool: executeMigration to not destination pool"\n', '        );\n', '\n', '        // migrate base token\n', '        _bToken.safeTransferFrom(source, address(this), _bToken.balanceOf(source));\n', '        // migrate state values\n', '        _liquidity = IPreMiningPool(source).getStateValues();\n', '\n', '        emit ExecuteMigration(_migrationTimestamp, source, address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{symbol}\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{getAddresses}\n', '     */\n', '    function getAddresses() public view override returns (\n', '        address bToken,\n', '        address lToken\n', '    ) {\n', '        return (\n', '            address(_bToken),\n', '            address(_lToken)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{getParameters}\n', '     */\n', '    function getParameters() public view override returns (\n', '        uint256 minAddLiquidity,\n', '        uint256 redemptionFeeRatio\n', '    ) {\n', '        return (\n', '            _minAddLiquidity,\n', '            _redemptionFeeRatio\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{getStateValues}\n', '     */\n', '    function getStateValues() public view override returns (\n', '        uint256 liquidity\n', '    ) {\n', '        return _liquidity;\n', '    }\n', '\n', '\n', '    //================================================================================\n', '    // Pool interactions\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{addLiquidity}\n', '     */\n', '    function addLiquidity(uint256 bAmount) public override {\n', '        _addLiquidity(bAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPreMiningPool}.{removeLiquidity}\n', '     */\n', '    function removeLiquidity(uint256 lShares) public override {\n', '        _removeLiquidity(lShares);\n', '    }\n', '\n', '    //================================================================================\n', '    // Critical Logic\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Low level addLiquidity implementation\n', '     */\n', '    function _addLiquidity(uint256 bAmount) internal _lock_ {\n', '        require(\n', '            bAmount >= _minAddLiquidity,\n', '            "PerpetualPool: add liquidity less than minimum requirement"\n', '        );\n', '        require(\n', '            bAmount.reformat(_bDecimals) == bAmount,\n', '            "PerpetualPool: _addLiquidity bAmount not valid"\n', '        );\n', '\n', '        bAmount = _deflationCompatibleSafeTransferFrom(msg.sender, address(this), bAmount);\n', '\n', '        uint256 poolDynamicEquity = _liquidity;\n', '        uint256 totalSupply = _lToken.totalSupply();\n', '        uint256 lShares;\n', '        if (totalSupply == 0) {\n', '            lShares = bAmount;\n', '        } else {\n', '            lShares = bAmount.mul(totalSupply).div(poolDynamicEquity);\n', '        }\n', '\n', '        _lToken.mint(msg.sender, lShares);\n', '        _liquidity = _liquidity.add(bAmount);\n', '\n', '        emit AddLiquidity(msg.sender, lShares, bAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Low level removeLiquidity implementation\n', '     */\n', '    function _removeLiquidity(uint256 lShares) internal _lock_ {\n', '        require(lShares > 0, "PerpetualPool: remove 0 liquidity");\n', '        uint256 balance = _lToken.balanceOf(msg.sender);\n', '        require(\n', '            lShares == balance || balance.sub(lShares) >= 10**18,\n', '            "PerpetualPool: remaining liquidity shares must be 0 or at least 1"\n', '        );\n', '\n', '        uint256 poolDynamicEquity = _liquidity;\n', '        uint256 totalSupply = _lToken.totalSupply();\n', '        uint256 bAmount = lShares.mul(poolDynamicEquity).div(totalSupply);\n', '        if (lShares < totalSupply) {\n', '            bAmount = bAmount.sub(bAmount.mul(_redemptionFeeRatio));\n', '        }\n', '        bAmount = bAmount.reformat(_bDecimals);\n', '\n', '        _liquidity = _liquidity.sub(bAmount);\n', '\n', '        _lToken.burn(msg.sender, lShares);\n', '        _bToken.safeTransfer(msg.sender, bAmount.rescale(_bDecimals));\n', '\n', '        emit RemoveLiquidity(msg.sender, lShares, bAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev safeTransferFrom for base token with deflation protection\n', '     * Returns the actual received amount in base token (as base 10**18)\n', '     */\n', '    function _deflationCompatibleSafeTransferFrom(address from, address to, uint256 amount) internal returns (uint256) {\n', '        uint256 preBalance = _bToken.balanceOf(to);\n', '        _bToken.safeTransferFrom(from, to, amount.rescale(_bDecimals));\n', '        uint256 curBalance = _bToken.balanceOf(to);\n', '\n', '        uint256 a = curBalance.sub(preBalance);\n', '        uint256 b = 10**18;\n', '        uint256 c = a * b;\n', '        require(c / b == a, "PreMiningPool: _deflationCompatibleSafeTransferFrom multiplication overflows");\n', '\n', '        uint256 actualReceivedAmount = c / (10 ** _bDecimals);\n', '        return actualReceivedAmount;\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `amount` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted when `amount` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `amount` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the name.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `to`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n', "     * `amount` is then deducted from the caller's allowance.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./IERC20.sol";\n', '\n', '/**\n', ' * @title Deri Protocol liquidity provider token interface\n', ' */\n', 'interface ILToken is IERC20 {\n', '\n', '    /**\n', '     * @dev Set the pool address of this LToken\n', '     * pool is the only controller of this contract\n', '     * can only be called by current pool\n', '     */\n', '    function setPool(address newPool) external;\n', '\n', '    /**\n', '     * @dev Returns address of pool\n', '     */\n', '    function pool() external view returns (address);\n', '\n', '    /**\n', '     * @dev Mint LToken to `account` of `amount`\n', '     *\n', '     * Can only be called by pool\n', '     * `account` cannot be zero address\n', '     */\n', '    function mint(address account, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Burn `amount` LToken of `account`\n', '     *\n', '     * Can only be called by pool\n', '     * `account` cannot be zero address\n', '     * `account` must owns at least `amount` LToken\n', '     */\n', '    function burn(address account, uint256 amount) external;\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Deri Protocol migratable pool interface\n', ' */\n', 'interface IMigratablePool {\n', '\n', '    /**\n', '     * @dev Emitted when migration is prepared\n', '     * `source` pool will be migrated to `target` pool after `migrationTimestamp`\n', '     */\n', '    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\n', '\n', '    /**\n', '     * @dev Emmited when migration is executed\n', '     * `source` pool is migrated to `target` pool\n', '     */\n', '    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\n', '\n', '    /**\n', '     * @dev Set controller to `newController`\n', '     *\n', '     * can only be called by current controller or the controller has not been set\n', '     */\n', '    function setController(address newController) external;\n', '\n', '    /**\n', '     * @dev Returns address of current controller\n', '     */\n', '    function controller() external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the migrationTimestamp of this pool, zero means not set\n', '     */\n', '    function migrationTimestamp() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the destination pool this pool will migrate to after grace period\n', '     * zero address means not set\n', '     */\n', '    function migrationDestination() external view returns (address);\n', '\n', '    /**\n', '     * @dev Prepare a migration from this pool to `newPool` with `graceDays` as grace period\n', '     * `graceDays` must be at least 3 days from now, allow users to verify the `newPool` code\n', '     *\n', '     * can only be called by controller\n', '     */\n', '    function prepareMigration(address newPool, uint256 graceDays) external;\n', '\n', '    /**\n', '     * @dev Approve migration to `newPool` when grace period ends\n', '     * after approvement, current pool will stop functioning\n', '     *\n', '     * can only be called by controller\n', '     */\n', '    function approveMigration() external;\n', '\n', '    /**\n', '     * @dev Called from the `newPool` to migrate from `source` pool\n', '     * the grace period of `source` pool must ends\n', '     * current pool must be the destination pool set before grace period in the `source` pool\n', '     *\n', '     * can only be called by controller\n', '     */\n', '    function executeMigration(address source) external;\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./IMigratablePool.sol";\n', '\n', '/**\n', ' * @title Deri Protocol PreMining PerpetualPool Interface\n', ' */\n', 'interface IPreMiningPool is IMigratablePool {\n', '\n', '    /**\n', '     * @dev Emitted when `owner` add liquidity of `bAmount`,\n', '     * and receive `lShares` liquidity token\n', '     */\n', '    event AddLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` burn `lShares` of liquidity token,\n', '     * and receive `bAmount` in base token\n', '     */\n', '    event RemoveLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\n', '\n', '    /**\n', '     * @dev Initialize pool\n', '     *\n', '     * addresses:\n', '     *      bToken\n', '     *      lToken\n', '     *\n', '     * parameters:\n', '     *      minAddLiquidity\n', '     *      redemptionFeeRatio\n', '     */\n', '    function initialize(\n', '        string memory symbol_,\n', '        address[2] calldata addresses_,\n', '        uint256[2] calldata parameters_\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns trading symbol\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns addresses of (bToken, pToken, lToken, oracle) in this pool\n', '     */\n', '    function getAddresses() external view returns (\n', '        address bToken,\n', '        address lToken\n', '    );\n', '\n', '    /**\n', '     * @dev Returns parameters of this pool\n', '     */\n', '    function getParameters() external view returns (\n', '        uint256 minAddLiquidity,\n', '        uint256 redemptionFeeRatio\n', '    );\n', '\n', '    /**\n', '     * @dev Returns currents state values of this pool\n', '     */\n', '    function getStateValues() external view returns (\n', '        uint256 liquidity\n', '    );\n', '\n', '    /**\n', '     * @dev Add liquidity of `bAmount` in base token\n', '     *\n', '     * New liquidity provider token will be issued to the provider\n', '     */\n', '    function addLiquidity(uint256 bAmount) external;\n', '\n', '    /**\n', '     * @dev Remove `lShares` of liquidity provider token\n', '     *\n', '     * The liquidity provider token will be burned and\n', '     * the corresponding amount in base token will be sent to provider\n', '     */\n', '    function removeLiquidity(uint256 lShares) external;\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../interface/IERC20.sol";\n', 'import "../math/UnsignedSafeMath.sol";\n', 'import "./Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using UnsignedSafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title Mixed safe math with base unit of 10**18\n', ' */\n', 'library MixedSafeMathWithUnit {\n', '\n', '    uint256 constant UONE = 10**18;\n', '    uint256 constant UMAX = 2**255 - 1;\n', '\n', '    int256 constant IONE = 10**18;\n', '    int256 constant IMIN = -2**255;\n', '\n', '    //================================================================================\n', '    // Conversions\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Convert uint256 to int256\n', '     */\n', '    function utoi(uint256 a) internal pure returns (int256) {\n', '        require(a <= UMAX, "MixedSafeMathWithUnit: convert uint256 to int256 overflow");\n', '        int256 b = int256(a);\n', '        return b;\n', '    }\n', '\n', '    /**\n', '     * @dev Convert int256 to uint256\n', '     */\n', '    function itou(int256 a) internal pure returns (uint256) {\n', '        require(a >= 0, "MixedSafeMathWithUnit: convert int256 to uint256 overflow");\n', '        uint256 b = uint256(a);\n', '        return b;\n', '    }\n', '\n', '    /**\n', '     * @dev Take abs of int256\n', '     */\n', '    function abs(int256 a) internal pure returns (int256) {\n', '        require(a != IMIN, "MixedSafeMathWithUnit: int256 abs overflow");\n', '        if (a >= 0) {\n', '            return a;\n', '        } else {\n', '            return -a;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Take negation of int256\n', '     */\n', '    function neg(int256 a) internal pure returns (int256) {\n', '        require(a != IMIN, "MixedSafeMathWithUnit: int256 negate overflow");\n', '        return -a;\n', '    }\n', '\n', '    //================================================================================\n', '    // Rescale and reformat\n', '    //================================================================================\n', '\n', '    function _rescale(uint256 a, uint256 decimals1, uint256 decimals2)\n', '        internal pure returns (uint256)\n', '    {\n', '        uint256 scale1 = 10 ** decimals1;\n', '        uint256 scale2 = 10 ** decimals2;\n', '        uint256 b = a * scale2;\n', '        require(b / scale2 == a, "MixedSafeMathWithUnit: rescale uint256 overflow");\n', '        uint256 c = b / scale1;\n', '        return c;\n', '    }\n', '\n', '    function _rescale(int256 a, uint256 decimals1, uint256 decimals2)\n', '        internal pure returns (int256)\n', '    {\n', '        int256 scale1 = utoi(10 ** decimals1);\n', '        int256 scale2 = utoi(10 ** decimals2);\n', '        int256 b = a * scale2;\n', '        require(b / scale2 == a, "MixedSafeMathWithUnit: rescale int256 overflow");\n', '        int256 c = b / scale1;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescales a value from 10**18 base to 10**decimals base\n', '     */\n', '    function rescale(uint256 a, uint256 decimals) internal pure returns (uint256) {\n', '        return _rescale(a, 18, decimals);\n', '    }\n', '\n', '    function rescale(int256 a, uint256 decimals) internal pure returns (int256) {\n', '        return _rescale(a, 18, decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Reformat a value to be a valid 10**decimals base value\n', '     * The formatted value is still in 10**18 base\n', '     */\n', '    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\n', '        return _rescale(_rescale(a, 18, decimals), decimals, 18);\n', '    }\n', '\n', '    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\n', '        return _rescale(_rescale(a, 18, decimals), decimals, 18);\n', '    }\n', '\n', '\n', '    //================================================================================\n', '    // Addition\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Addition: uint256 + uint256\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "MixedSafeMathWithUnit: uint256 addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: int256 + int256\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require(\n', '            (b >= 0 && c >= a) || (b < 0 && c < a),\n', '            "MixedSafeMathWithUnit: int256 addition overflow"\n', '        );\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: uint256 + int256\n', '     * uint256(-b) will not overflow when b is IMIN\n', '     */\n', '    function add(uint256 a, int256 b) internal pure returns (uint256) {\n', '        if (b >= 0) {\n', '            return add(a, uint256(b));\n', '        } else {\n', '            return sub(a, uint256(-b));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Addition: int256 + uint256\n', '     */\n', '    function add(int256 a, uint256 b) internal pure returns (int256) {\n', '        return add(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Subtraction\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Subtraction: uint256 - uint256\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(a >= b, "MixedSafeMathWithUnit: uint256 subtraction overflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: int256 - int256\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require(\n', '            (b >= 0 && c <= a) || (b < 0 && c > a),\n', '            "MixedSafeMathWithUnit: int256 subtraction overflow"\n', '        );\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: uint256 - int256\n', '     * uint256(-b) will not overflow when b is IMIN\n', '     */\n', '    function sub(uint256 a, int256 b) internal pure returns (uint256) {\n', '        if (b >= 0) {\n', '            return sub(a, uint256(b));\n', '        } else {\n', '            return add(a, uint256(-b));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction: int256 - uint256\n', '     */\n', '    function sub(int256 a, uint256 b) internal pure returns (int256) {\n', '        return sub(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Multiplication\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Multiplication: uint256 * uint256\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero,\n", "        // but the benefit is lost if 'b' is also tested\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MixedSafeMathWithUnit: uint256 multiplication overflow");\n', '        return c / UONE;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: int256 * int256\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero,\n", "        // but the benefit is lost if 'b' is also tested\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        require(!(a == -1 && b == IMIN), "MixedSafeMathWithUnit: int256 multiplication overflow");\n', '        int256 c = a * b;\n', '        require(c / a == b, "MixedSafeMathWithUnit: int256 multiplication overflow");\n', '        return c / IONE;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: uint256 * int256\n', '     */\n', '    function mul(uint256 a, int256 b) internal pure returns (uint256) {\n', '        return mul(a, itou(b));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication: int256 * uint256\n', '     */\n', '    function mul(int256 a, uint256 b) internal pure returns (int256) {\n', '        return mul(a, utoi(b));\n', '    }\n', '\n', '    //================================================================================\n', '    // Division\n', '    //================================================================================\n', '\n', '    /**\n', '     * @dev Division: uint256 / uint256\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "MixedSafeMathWithUnit: uint256 division by zero");\n', '        uint256 c = a * UONE;\n', '        require(\n', '            c / UONE == a,\n', '            "MixedSafeMathWithUnit: uint256 division internal multiplication overflow"\n', '        );\n', '        uint256 d = c / b;\n', '        return d;\n', '    }\n', '\n', '    /**\n', '     * @dev Division: int256 / int256\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "MixedSafeMathWithUnit: int256 division by zero");\n', '        int256 c = a * IONE;\n', '        require(\n', '            c / IONE == a,\n', '            "MixedSafeMathWithUnit: int256 division internal multiplication overflow"\n', '        );\n', '        require(!(c == IMIN && b == -1), "MixedSafeMathWithUnit: int256 division overflow");\n', '        int256 d = c / b;\n', '        return d;\n', '    }\n', '\n', '    /**\n', '     * @dev Division: uint256 / int256\n', '     */\n', '    function div(uint256 a, int256 b) internal pure returns (uint256) {\n', '        return div(a, itou(b));\n', '    }\n', '\n', '    /**\n', '     * @dev Division: int256 / uint256\n', '     */\n', '    function div(int256 a, uint256 b) internal pure returns (int256) {\n', '        return div(a, utoi(b));\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../interface/IMigratablePool.sol";\n', '\n', '/**\n', ' * @dev Deri Protocol migratable pool implementation\n', ' */\n', 'abstract contract MigratablePool is IMigratablePool {\n', '\n', '    // Controller address\n', '    address _controller;\n', '\n', '    // Migration timestamp of this pool, zero means not set\n', '    // Migration timestamp can only be set with a grace period at least 3 days, and the\n', '    // `migrationDestination` pool address must be also set when setting migration timestamp,\n', '    // users can use this grace period to verify the `migrationDestination` pool code\n', '    uint256 _migrationTimestamp;\n', '\n', '    // The new pool this pool will migrate to after grace period, zero address means not set\n', '    address _migrationDestination;\n', '\n', '    modifier _controller_() {\n', '        require(msg.sender == _controller, "can only be called by current controller");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{setController}\n', '     */\n', '    function setController(address newController) public override {\n', '        require(newController != address(0), "MigratablePool: setController to 0 address");\n', '        require(\n', '            _controller == address(0) || msg.sender == _controller,\n', '            "MigratablePool: setController can only be called by current controller or not set"\n', '        );\n', '        _controller = newController;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{controller}\n', '     */\n', '    function controller() public view override returns (address) {\n', '        return _controller;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{migrationTimestamp}\n', '     */\n', '    function migrationTimestamp() public view override returns (uint256) {\n', '        return _migrationTimestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{migrationDestination}\n', '     */\n', '    function migrationDestination() public view override returns (address) {\n', '        return _migrationDestination;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{prepareMigration}\n', '     */\n', '    function prepareMigration(address newPool, uint256 graceDays) public override _controller_ {\n', '        require(newPool != address(0), "MigratablePool: prepareMigration to 0 address");\n', '        require(graceDays >= 3 && graceDays <= 365, "MigratablePool: graceDays must be 3-365 days");\n', '\n', '        _migrationTimestamp = block.timestamp + graceDays * 1 days;\n', '        _migrationDestination = newPool;\n', '\n', '        emit PrepareMigration(_migrationTimestamp, address(this), _migrationDestination);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{approveMigration}\n', '     *\n', '     * This function will be implemented in inheriting contract\n', '     * This function will change if there is an upgrade to existent pool\n', '     */\n', '    // function approveMigration() public virtual override _controller_ {}\n', '\n', '    /**\n', '     * @dev See {IMigratablePool}.{executeMigration}\n', '     *\n', '     * This function will be implemented in inheriting contract\n', '     * This function will change if there is an upgrade to existent pool\n', '     */\n', '    // function executeMigration(address source) public virtual override _controller_ {}\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title Unsigned safe math\n', ' */\n', 'library UnsignedSafeMath {\n', '\n', '    /**\n', '     * @dev Addition of unsigned integers, counterpart to `+`\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "UnsignedSafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtraction of unsigned integers, counterpart to `-`\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(a >= b, "UnsignedSafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplication of unsigned integers, counterpart to `*`\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero,\n", "        // but the benefit is lost if 'b' is also tested\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "UnsignedSafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Division of unsigned integers, counterpart to `/`\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "UnsignedSafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Modulo of unsigned integers, counterpart to `%`\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "UnsignedSafeMath: modulo by zero");\n', '        uint256 c = a % b;\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}']