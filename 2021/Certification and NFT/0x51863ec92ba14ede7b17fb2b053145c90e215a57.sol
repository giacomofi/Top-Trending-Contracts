['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-10\n', '*/\n', '\n', '// File: ../common.5/openzeppelin/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: ../common.5/openzeppelin/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: ../common.5/openzeppelin/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: ../common.5/openzeppelin/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: ../common.5/openzeppelin/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: contracts/DSMath.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {    \n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/DSProxy.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4 indexed sig,\n', '        address indexed guy,\n', '        bytes32 indexed foo,\n', '        bytes32 indexed bar,\n', '        uint256 wad,\n', '        bytes fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DSProxy is DSAuth, DSNote {\n', '    DSProxyCache public cache; \n', '\n', '    constructor(address _cacheAddr) public {\n', '        require(setCache(_cacheAddr));\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    \n', '    function execute(bytes memory _code, bytes memory _data)\n', '        public\n', '        payable\n', '        returns (address target, bytes32 response)\n', '    {\n', '        target = cache.read(_code);\n', '        if (target == address(0)) {\n', '            \n', '            target = cache.write(_code);\n', '        }\n', '\n', '        response = execute(target, _data);\n', '    }\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        payable\n', '        auth\n', '        note\n', '        returns (bytes32 response)\n', '    {\n', '        require(_target != address(0));\n', '        \n', '        assembly {\n', '            let succeeded := delegatecall(\n', '                sub(gas, 5000),\n', '                _target,\n', '                add(_data, 0x20),\n', '                mload(_data),\n', '                0,\n', '                32\n', '            )\n', '            response := mload(0)\n', '            switch iszero(succeeded)\n', '                case 1 \n', '                {\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '    }\n', '\n', '    \n', '    function setCache(address _cacheAddr) public payable auth note returns (bool) {\n', '        require(_cacheAddr != address(0)); \n', '        cache = DSProxyCache(_cacheAddr); \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DSProxyCache {\n', '    mapping(bytes32 => address) cache;\n', '\n', '    function read(bytes memory _code) public view returns (address) {\n', '        bytes32 hash = keccak256(_code);\n', '        return cache[hash];\n', '    }\n', '\n', '    function write(bytes memory _code) public returns (address target) {\n', '        assembly {\n', '            target := create(0, add(_code, 0x20), mload(_code))\n', '            switch iszero(extcodesize(target))\n', '                case 1 {\n', '                    \n', '                    revert(0, 0)\n', '                }\n', '        }\n', '        bytes32 hash = keccak256(_code);\n', '        cache[hash] = target;\n', '    }\n', '}\n', '\n', '// File: contracts/dEth.sol\n', '\n', '// todo:\n', '// add disclaimer\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '// Number typing guide\n', '// The subsystems we use, use different decimal systems\n', '// Additionally we use different number assumptions for convenience\n', '// RAY -    10**27 - Maker decimal for high precision calculation\n', '// WAD -    10**18 - Maker decimal for token values\n', '// PERC -   10**16 - 1% of a WAD, with 100% == 1 WAD\n', '// CLP -    10**8  - Chainlink price format\n', "// RATIO -  10**32 - Ratio from Maker for a CDP's debt to GDP ratio. \n", '\n', 'contract IDSGuard is DSAuthority\n', '{\n', '    function permit(address src, address dst, bytes32 sig) public;\n', '}\n', '\n', 'contract IDSGuardFactory \n', '{\n', '    function newGuard() public returns (IDSGuard guard);\n', '}\n', '\n', '// Note:\n', '// This is included to avoid method signature collisions between already imported \n', "// DSProxy's two execute functions. \n", 'contract IDSProxy\n', '{\n', '    function execute(address _target, bytes memory _data) public payable returns (bytes32);\n', '}\n', '\n', 'contract IMCDSaverProxy\n', '{\n', '    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk);\n', '    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint);\n', '}\n', '\n', 'contract IChainLinkPriceOracle\n', '{\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound);\n', '}\n', '\n', 'contract IMakerOracle\n', '{\n', '    function read()\n', '        public \n', '        view \n', '        returns(bytes32);\n', '}\n', '\n', 'contract Oracle\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    uint constant ONE_PERC = 10**16; // 1.0%\n', '    uint constant HUNDRED_PERC = 10**18; // 100.0%\n', '\n', '    IMakerOracle public makerOracle;\n', '    IChainLinkPriceOracle public daiUsdOracle;\n', '    IChainLinkPriceOracle public ethUsdOracle;\n', '\n', '    constructor (\n', '            IMakerOracle _makerOracle, \n', '            IChainLinkPriceOracle _daiUsdOracle, \n', '            IChainLinkPriceOracle _ethUsdOracle) \n', '        public\n', '    {\n', '        makerOracle = _makerOracle;\n', '        daiUsdOracle = _daiUsdOracle;\n', '        ethUsdOracle = _ethUsdOracle;\n', '    }   \n', '\n', '    function getEthDaiPrice() \n', '        public\n', '        view\n', '        returns (uint _price)\n', '    {\n', "        // maker's price comes back as a decimal with 18 places\n", '        uint makerEthUsdPrice = uint(makerOracle.read()); \n', '\n', "        // chainlink's price comes back as a decimal with 8 places\n", '        (,int chainlinkEthUsdPrice,,,) = ethUsdOracle.latestRoundData();\n', '        (,int chainlinkDaiUsdPrice,,,) = daiUsdOracle.latestRoundData();\n', '\n', "        // chainlink's price comes back as a decimal with 8 places\n", '        // multiplying two of them, produces 16 places\n', '        // we need it in the WAD format which has 18, therefore .mul(10**2) at the end\n', '        uint chainlinkEthDaiPrice = uint(chainlinkEthUsdPrice).mul(uint(chainlinkDaiUsdPrice)).mul(10**2);\n', '    \n', '        // if the differnce between the ethdai price from chainlink is more than 10% from the\n', '        // maker oracle price, trust the maker oracle \n', '        uint percDiff = absDiff(makerEthUsdPrice, uint(chainlinkEthDaiPrice))\n', '            .mul(HUNDRED_PERC)\n', '            .div(makerEthUsdPrice);\n', '        return percDiff > ONE_PERC.mul(10) ? \n', '            makerEthUsdPrice :\n', '            chainlinkEthDaiPrice;\n', '    }\n', '\n', '    function absDiff(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns(uint)\n', '    {\n', '        return a > b ? a - b : b - a;\n', '    }\n', '}\n', '\n', '// Description:\n', '// This contract tokenizes ownership of a Maker CDP. It does so by allowing anyone to mint new\n', '// tokens in exchange for collateral and issues tokens in proportion to the excess collateral\n', '// that is already in the CDP. It also allows anyone with dEth tokens to redeem these tokens\n', '// in exchange for the excess collateral in the CDP, proportional to their share of total dEth\n', '// tokens.\n', '// Furthermore the contract inherits from DSProxy which allows its CDP to be automated via the \n', '// DeFiSaver ecosystem. This automation is activated by calling the subscribe() method on the\n', '// DeFiSaver SubscriptionsProxyV2 contract via the execute() method inherited from DSProxy.\n', '// This automation will automatically increase the leverage of the CDP to a target ratio if the\n', '// collateral increases in value and automatically decrease it to the target ratio if the \n', '// collateral falls in value. \n', '// SubscriptionsProxyV2 can be viewed here:\n', '// https://etherscan.io/address/0xB78EbeD358Eb5a94Deb08Dc97846002F0632c99A#code\n', '// An audit of the DeFiSaver system can be viewed here:\n', '// https://github.com/DecenterApps/defisaver-contracts/blob/master/audits/Dedaub%20-%20DeFi%20Saver%20Automation%20Audit%20-%20February%202021.pdf\n', '\n', '// When activate the automation makes the dEth contract a perpetually levered long position on\n', '// the price of Ether in US dollars. \n', '\n', '// Details:\n', '// The contract charges a protocol fee that is paid out to contract called the gulper. The fee\n', '// is fixed at 0.9%. \n', '// Due to the sometimes extreme gas fees required to run the DefiSaver automations, an \n', '// additional automation fee is charged to anyone entering or exiting the system. This fee can \n', '// be increased or decreased as needed to compensate existing participants.\n', '// There is a riskLimit parameter that prevents the system from acquiring too much collateral \n', '// before it has established a record of safety. This can also be used to prevent new \n', '// participants from minting new dEth in case an upgrade is necessary and dEth tokens need to \n', '// be migrated to a new version.\n', '// The minRedemptionRatio parameter prevents too much collateral being removed at once from\n', '// the CDP before DefiSaver has the opportunity to return the CDP to its target parameters. \n', '\n', '// Note: \n', '// What is not apparent explicitly in this contract is how calls to the "auth" methods are to\n', '// be dealt with. All auth methods will initially be owned by the owner key of this contract. \n', '// The intent is to keep it under the control of the owner key until some history of use can be\n', '// built up to increase confidence that the contract is indeed safe and stable in the wild.\n', '// Thereafter the owner key will be given to an OpenZeppelin TimelockController contract with a\n', '// 48 hour delay. The TimelockController in turn will be owned by the FoundryDAO and controlled\n', "// via it's governance structures. This will give any participants at least 48 hours to take \n", '// action, should any change be unpalatable. \n', '\n', '// Note: \n', '// Since defisaver automation can be upgraded and since older versions of their subscription \n', '// contract are not guarenteed to be updated by their offchain services and since the calling \n', '// of the automation script involves passing in a custom contract to where a delgate call is\n', '// made; it is safer to rather execute the automation script via an execute(_address, _data) \n', '// call inherited from DSProxy through the auth system.\n', '\n', 'contract dEth is \n', '    ERC20Detailed, \n', '    ERC20,\n', '    DSMath,\n', '    DSProxy\n', '{\n', '    using SafeMath for uint;\n', '\n', '    string constant terms = "By interacting with this contract, you agree to be bound by the terms of service found at https://www.FoundryDao.com/dEthTerms/";\n', '\n', '    uint constant ONE_PERC = 10**16;                    //   1.0% \n', '    uint constant HUNDRED_PERC = 10**18;                // 100.0%\n', '\n', '    uint constant PROTOCOL_FEE_PERC = 9*10**15;         //   0.9%\n', '    \n', '    address payable public gulper;\n', '    uint public cdpId;\n', '    \n', '    // Note:\n', '    // Since these items are not available on test net and represent interactions\n', '    // with the larger DeFi ecosystem, they are directly addressed here with the understanding\n', '    // that testing occurs against simulated forks of the the Ethereum mainnet. \n', '    address constant public makerManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n', '    address constant public ethGemJoin = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n', '    address constant public saverProxy = 0xC563aCE6FACD385cB1F34fA723f412Cc64E63D47;\n', '    address constant public saverProxyActions = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n', '\n', '    Oracle public oracle;\n', '\n', '    // automation variables\n', '    uint public minRedemptionRatio; // the min % excess collateral that must remain after any ETH redeem action\n', '    uint public automationFeePerc;  // the fee that goes to the collateral pool, on entry or exit, to compensate for potentially triggering a boost or redeem\n', '    \n', '    // Note:\n', '    // riskLimit sets the maximum amount of excess collateral Eth the contract will place at risk\n', '    // When exceeded it is no longer possible to issue dEth via the squander function\n', '    // This can also be used to retire the contract by setting it to 0\n', '    uint public riskLimit; \n', '    \n', '    constructor(\n', '            address payable _gulper,\n', '            uint _cdpId,\n', '            Oracle _oracle,\n', '            address _initialRecipient,\n', '            address _automationAuthority)\n', '        public\n', '        DSProxy(0x271293c67E2D3140a0E9381EfF1F9b01E07B0795) //_proxyCache on mainnet\n', '        ERC20Detailed("Derived Ether", "dEth", 18)\n', '    {\n', '        gulper = _gulper;\n', '        cdpId = _cdpId;\n', '\n', '        oracle = _oracle;\n', '\n', '        // Initial values of automation variables\n', '        minRedemptionRatio = uint(160).mul(ONE_PERC).mul(10**18);\n', '        automationFeePerc = ONE_PERC; // 1.0%\n', '        riskLimit = 1000*10**18;      // sets an initial limit of 1000 ETH that the contract will risk. \n', '\n', '        // distributes the initial supply of dEth to the initial recipient at 1 ETH to 1 dEth\n', '        uint excess = getExcessCollateral();\n', '        _mint(_initialRecipient, excess);\n', '\n', '        // set the automation authority to make sure the parameters can be adjusted later on\n', '        IDSGuard guard = IDSGuardFactory(0x5a15566417e6C1c9546523066500bDDBc53F88C7).newGuard(); // DSGuardFactory\n', '        guard.permit(\n', '            _automationAuthority,\n', '            address(this),\n', '            bytes4(keccak256("changeSettings(uint256,uint256,uint256)")));\n', '        setAuthority(guard);\n', '\n', '        require(\n', '            authority.canCall(\n', '                _automationAuthority, \n', '                address(this), \n', '                bytes4(keccak256("changeSettings(uint256,uint256,uint256)"))),\n', '            "guard setting failed");\n', '    }\n', '\n', '    function changeGulper(address payable _newGulper)\n', '        public\n', '        auth\n', '    {\n', '        gulper = _newGulper;\n', '    }\n', '\n', '    function giveCDPToDSProxy(address _dsProxy)\n', '        public\n', '        auth\n', '    {\n', '        bytes memory giveProxyCall = abi.encodeWithSignature(\n', '            "give(address,uint256,address)", \n', '            makerManager, \n', '            cdpId, \n', '            _dsProxy);\n', '        \n', '        IDSProxy(address(this)).execute(saverProxyActions, giveProxyCall);\n', '\n', '        // removes the ability to mint more dEth tokens\n', '        riskLimit = 0;\n', '    }\n', '\n', '    function getCollateral()\n', '        public\n', '        view\n', '        returns(uint _priceRAY, uint _totalCollateral, uint _debt, uint _collateralDenominatedDebt, uint _excessCollateral)\n', '    {\n', '        _priceRAY = getCollateralPriceRAY();\n', '        (_totalCollateral, _debt,,) = IMCDSaverProxy(saverProxy).getCdpDetailedInfo(cdpId);\n', '        _collateralDenominatedDebt = rdiv(_debt, _priceRAY);\n', '        _excessCollateral = sub(_totalCollateral, _collateralDenominatedDebt);\n', '    }\n', '\n', '    function getCollateralPriceRAY()\n', '        public\n', '        view\n', '        returns (uint _priceRAY)\n', '    {\n', '        // we multiply by 10^9 to cast the price to a RAY number as used by the Maker CDP\n', '        _priceRAY = oracle.getEthDaiPrice().mul(10**9);\n', '    }\n', '\n', '    function getExcessCollateral()\n', '        public\n', '        view\n', '        returns(uint _excessCollateral)\n', '    {\n', '        (,,,, _excessCollateral) = getCollateral();\n', '    }\n', '\n', '    function getRatio()\n', '        public\n', '        view\n', '        returns(uint _ratio)\n', '    {\n', '        (,,,bytes32 ilk) = IMCDSaverProxy(saverProxy).getCdpDetailedInfo(cdpId);\n', '        _ratio = IMCDSaverProxy(saverProxy).getRatio(cdpId, ilk);\n', '    }\n', '\n', '    function calculateIssuanceAmount(uint _suppliedCollateral)\n', '        public\n', '        view\n', '        returns (\n', '            uint _protocolFee,\n', '            uint _automationFee,\n', '            uint _actualCollateralAdded,\n', '            uint _accreditedCollateral,\n', '            uint _tokensIssued)\n', '    {\n', '        _protocolFee = _suppliedCollateral.mul(PROTOCOL_FEE_PERC).div(HUNDRED_PERC);\n', '        _automationFee = _suppliedCollateral.mul(automationFeePerc).div(HUNDRED_PERC);\n', '        _actualCollateralAdded = _suppliedCollateral.sub(_protocolFee); \n', '        _accreditedCollateral = _actualCollateralAdded.sub(_automationFee); \n', '        uint newTokenSupplyPerc = _accreditedCollateral.mul(HUNDRED_PERC).div(getExcessCollateral());\n', '        _tokensIssued = totalSupply().mul(newTokenSupplyPerc).div(HUNDRED_PERC);\n', '    }\n', '\n', '    event Issued(\n', '        address _receiver, \n', '        uint _suppliedCollateral,\n', '        uint _protocolFee,\n', '        uint _automationFee,\n', '        uint _actualCollateralAdded,\n', '        uint _accreditedCollateral,\n', '        uint _tokensIssued);\n', '\n', '    // Note: \n', '    // This method should have been called issue(address _receiver), but will remain this for meme value\n', '    function squanderMyEthForWorthlessBeansAndAgreeToTerms(address _receiver)\n', '        payable\n', '        public\n', '    { \n', '        // Goals:\n', '        // 1. deposit eth into the vault \n', '        // 2. give the holder a claim on the vault for later withdrawal to the address they choose \n', '        // 3. pay the protocol\n', '\n', '        require(getExcessCollateral() < riskLimit.add(msg.value), "risk limit exceeded");\n', '\n', '        (uint protocolFee, \n', '        uint automationFee, \n', '        uint collateralToLock, \n', '        uint accreditedCollateral, \n', '        uint tokensToIssue)  = calculateIssuanceAmount(msg.value);\n', '\n', '        bytes memory lockETHproxyCall = abi.encodeWithSignature(\n', '            "lockETH(address,address,uint256)", \n', '            makerManager, \n', '            ethGemJoin,\n', '            cdpId);\n', '        IDSProxy(address(this)).execute.value(collateralToLock)(saverProxyActions, lockETHproxyCall);\n', '        \n', '        (bool protocolFeePaymentSuccess,) = gulper.call.value(protocolFee)("");\n', '        require(protocolFeePaymentSuccess, "protocol fee transfer to gulper failed");\n', '\n', '        // Note: \n', '        // The automationFee is left in the CDP to cover the gas implications of leaving or joining dEth\n', '        // This is why it is not explicitly used in this method. \n', '\n', '        _mint(_receiver, tokensToIssue);\n', '        \n', '        emit Issued(\n', '            _receiver, \n', '            msg.value, \n', '            protocolFee,\n', '            automationFee, \n', '            collateralToLock, \n', '            accreditedCollateral,\n', '            tokensToIssue);\n', '    }\n', '\n', '    function calculateRedemptionValue(uint _tokensToRedeem)\n', '        public\n', '        view\n', '        returns (\n', '            uint _protocolFee,\n', '            uint _automationFee,\n', '            uint _collateralRedeemed, \n', '            uint _collateralReturned)\n', '    {\n', '        // comment: a full check against the minimum ratio might be added in a future version\n', '        // for now keep in mind that this function may return values greater than those that \n', '        // could be executed in one transaction. \n', '        require(_tokensToRedeem <= totalSupply(), "_tokensToRedeem exceeds totalSupply()");\n', '        uint redeemTokenSupplyPerc = _tokensToRedeem.mul(HUNDRED_PERC).div(totalSupply());\n', '        uint collateralAffected = getExcessCollateral().mul(redeemTokenSupplyPerc).div(HUNDRED_PERC);\n', '        _protocolFee = collateralAffected.mul(PROTOCOL_FEE_PERC).div(HUNDRED_PERC);\n', '        _automationFee = collateralAffected.mul(automationFeePerc).div(HUNDRED_PERC);\n', '        _collateralRedeemed = collateralAffected.sub(_automationFee); // how much capital should exit the dEth contract\n', '        _collateralReturned = _collateralRedeemed.sub(_protocolFee); // how much capital should return to the user\n', '    }\n', '\n', '    event Redeemed(\n', '        address _redeemer,\n', '        address _receiver, \n', '        uint _tokensRedeemed,\n', '        uint _protocolFee,\n', '        uint _automationFee,\n', '        uint _collateralRedeemed,\n', '        uint _collateralReturned);\n', '\n', '    function redeem(address _receiver, uint _tokensToRedeem)\n', '        public\n', '    {\n', '        // Goals:\n', '        // 1. if the _tokensToRedeem being claimed does not drain the vault to below 160%\n', "        // 2. pull out the amount of ether the senders' tokens entitle them to and send it to them\n", '\n', '        (uint protocolFee, \n', '        uint automationFee, \n', '        uint collateralToFree,\n', '        uint collateralToReturn) = calculateRedemptionValue(_tokensToRedeem);\n', '\n', '        bytes memory freeETHProxyCall = abi.encodeWithSignature(\n', '            "freeETH(address,address,uint256,uint256)",\n', '            makerManager,\n', '            ethGemJoin,\n', '            cdpId,\n', '            collateralToFree);\n', '        IDSProxy(address(this)).execute(saverProxyActions, freeETHProxyCall);\n', '\n', '        _burn(msg.sender, _tokensToRedeem);\n', '\n', '        (bool protocolFeePaymentSuccess,) = gulper.call.value(protocolFee)("");\n', '        require(protocolFeePaymentSuccess, "protocol fee transfer to gulper failed");\n', '\n', '        // note: the automationFee is left in the CDP to cover the gas implications of leaving or joining dEth\n', '        \n', '        (bool payoutSuccess,) = _receiver.call.value(collateralToReturn)("");\n', '        require(payoutSuccess, "eth send to receiver reverted");\n', '\n', '        // this ensures that the CDP will be boostable by DefiSaver before it can be bitten\n', "        // to prevent bites, getRatio() doesn't use oracle but the price set in the MakerCDP system \n", '        require(getRatio() >= minRedemptionRatio, "cannot violate collateral safety ratio");\n', '\n', '        emit Redeemed(  \n', '            msg.sender,\n', '            _receiver, \n', '            _tokensToRedeem,\n', '            protocolFee,\n', '            automationFee,\n', '            collateralToFree,\n', '            collateralToReturn);\n', '    }\n', '    \n', '    event SettingsChanged(\n', '            uint _minRedemptionRatio,\n', '            uint _automationFeePerc,\n', '            uint _riskLimit);\n', '\n', '    function changeSettings(\n', '            uint _minRedemptionRatio,\n', '            uint _automationFeePerc,\n', '            uint _riskLimit)\n', '        public\n', '        auth\n', '    {\n', '        minRedemptionRatio = _minRedemptionRatio.mul(ONE_PERC).mul(10**18);\n', '        automationFeePerc = _automationFeePerc;\n', '        riskLimit = _riskLimit;\n', '\n', '        emit SettingsChanged(\n', '            minRedemptionRatio,\n', '            automationFeePerc,\n', '            riskLimit);\n', '    }\n', '}\n', '\n', '// File: contracts/DeployMainnet_dEth.sol\n', '\n', 'contract DeployMainnet_dEth \n', '{\n', '    event LogContracts(Oracle _oracle, dEth _dEth);\n', '\n', '    constructor()\n', '        public\n', '    {\n', '        Oracle oracle = new Oracle(\n', '            IMakerOracle(0x729D19f657BD0614b4985Cf1D82531c67569197B),                 //IMakerOracle _makerOracle,\n', '            IChainLinkPriceOracle(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9),        //_daiUsdOracle\n', '            IChainLinkPriceOracle(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419));       //_ethUsdOracle\n', '\n', '        dEth mainnet_dEth = new dEth(\n', '            0xD7DFA44E3dfeB1A1E65544Dc54ee02B9CbE1e66d,                 //_gulper,\n', '            18963,                                                      //_cdpId,\n', '            oracle,                                                     //_oracle\n', '\n', '            0xB7c6bB064620270F8c1daA7502bCca75fC074CF4,                 //_initialRecipient\n', '            0x93fE7D1d24bE7CB33329800ba2166f4D28Eaa553);                //_foundryTreasury)\n', '\n', '        mainnet_dEth.setOwner(msg.sender);\n', '\n', '        emit LogContracts(oracle, mainnet_dEth);\n', '    }\n', '}']