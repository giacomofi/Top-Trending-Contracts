['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-08\n', '*/\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "DODO_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IDODOApprove.sol\n', '\n', '\n', 'interface IDODOApprove {\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '    function getDODOProxy() external view returns (address);\n', '}\n', '\n', '// File: contracts/SmartRoute/DODOApproveProxy.sol\n', '\n', '\n', '\n', 'interface IDODOApproveProxy {\n', '    function isAllowedProxy(address _proxy) external view returns (bool);\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title DODOApproveProxy\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Allow different version dodoproxy to claim from DODOApprove\n', ' */\n', 'contract DODOApproveProxy is InitializableOwnable {\n', '    \n', '    // ============ Storage ============\n', '    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\n', '    mapping (address => bool) public _IS_ALLOWED_PROXY_;\n', '    uint256 public _TIMELOCK_;\n', '    address public _PENDING_ADD_DODO_PROXY_;\n', '    address public immutable _DODO_APPROVE_;\n', '\n', '    // ============ Modifiers ============\n', '    modifier notLocked() {\n', '        require(\n', '            _TIMELOCK_ <= block.timestamp,\n', '            "SetProxy is timelocked"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address dodoApporve) public {\n', '        _DODO_APPROVE_ = dodoApporve;\n', '    }\n', '\n', '    function init(address owner, address[] memory proxies) external {\n', '        initOwner(owner);\n', '        for(uint i = 0; i < proxies.length; i++) \n', '            _IS_ALLOWED_PROXY_[proxies[i]] = true;\n', '    }\n', '\n', '    function unlockAddProxy(address newDodoProxy) public onlyOwner {\n', '        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\n', '        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\n', '    }\n', '\n', '    function lockAddProxy() public onlyOwner {\n', '       _PENDING_ADD_DODO_PROXY_ = address(0);\n', '       _TIMELOCK_ = 0;\n', '    }\n', '\n', '\n', '    function addDODOProxy() external onlyOwner notLocked() {\n', '        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\n', '        lockAddProxy();\n', '    }\n', '\n', '    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\n', '        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\n', '    }\n', '    \n', '    function claimTokens(\n', '        address token,\n', '        address who,\n', '        address dest,\n', '        uint256 amount\n', '    ) external {\n', '        require(_IS_ALLOWED_PROXY_[msg.sender], "DODOApproveProxy:Access restricted");\n', '        IDODOApprove(_DODO_APPROVE_).claimTokens(\n', '            token,\n', '            who,\n', '            dest,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function isAllowedProxy(address _proxy) external view returns (bool) {\n', '        return _IS_ALLOWED_PROXY_[_proxy];\n', '    }\n', '}\n', '\n', '// File: contracts/DODOToken/DODOMigrationBSC.sol\n', '\n', '/**\n', ' * @title DODOMigration between Ethereum and BSC\n', ' * @author DODO Breeder\n', ' */\n', 'contract DODOMigrationBSC is InitializableOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Storage ============\n', '\n', '    address immutable _ETH_DODO_TOKEN_;\n', '    address immutable _DODO_APPROVE_PROXY_;\n', '    mapping(address => uint256) internal balances;\n', '\n', '    constructor(address ethDodoToken, address dodoApproveProxy) public {\n', '        _ETH_DODO_TOKEN_ = ethDodoToken;\n', '        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\n', '    }\n', '\n', '    // ============ Events ============\n', '\n', '    event Lock(address indexed sender, address indexed mintToBscAccount, uint256 amount);\n', '    event Unlock(address indexed to, uint256 amount);\n', '\n', '    // ============ Functions ============\n', '\n', '    function lock(uint256 amount, address mintToBscAccount) external {\n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\n', '            _ETH_DODO_TOKEN_,\n', '            msg.sender,\n', '            address(this),\n', '            amount\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        emit Lock(msg.sender, mintToBscAccount, amount);\n', '    }\n', '\n', '    function unlock(address unlockTo, uint256 amount) external onlyOwner {\n', '        require(balances[unlockTo] >= amount);\n', '        balances[unlockTo] = balances[unlockTo].sub(amount);\n', '        IERC20(_ETH_DODO_TOKEN_).transfer(unlockTo, amount);\n', '        emit Unlock(unlockTo, amount);\n', '    }\n', '\n', '}']